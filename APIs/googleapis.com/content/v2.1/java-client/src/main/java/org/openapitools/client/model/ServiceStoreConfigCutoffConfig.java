/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServiceStoreConfigCutoffConfigLocalCutoffTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Time local delivery ends for the day based on the local timezone of the store. &#x60;local_cutoff_time&#x60; and &#x60;store_close_offset_hours&#x60; are mutually exclusive.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceStoreConfigCutoffConfig {
  public static final String SERIALIZED_NAME_LOCAL_CUTOFF_TIME = "localCutoffTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_CUTOFF_TIME)
  private ServiceStoreConfigCutoffConfigLocalCutoffTime localCutoffTime;

  public static final String SERIALIZED_NAME_NO_DELIVERY_POST_CUTOFF = "noDeliveryPostCutoff";
  @SerializedName(SERIALIZED_NAME_NO_DELIVERY_POST_CUTOFF)
  private Boolean noDeliveryPostCutoff;

  public static final String SERIALIZED_NAME_STORE_CLOSE_OFFSET_HOURS = "storeCloseOffsetHours";
  @SerializedName(SERIALIZED_NAME_STORE_CLOSE_OFFSET_HOURS)
  private String storeCloseOffsetHours;

  public ServiceStoreConfigCutoffConfig() {
  }

  public ServiceStoreConfigCutoffConfig localCutoffTime(ServiceStoreConfigCutoffConfigLocalCutoffTime localCutoffTime) {
    this.localCutoffTime = localCutoffTime;
    return this;
  }

  /**
   * Get localCutoffTime
   * @return localCutoffTime
   */
  @javax.annotation.Nullable
  public ServiceStoreConfigCutoffConfigLocalCutoffTime getLocalCutoffTime() {
    return localCutoffTime;
  }

  public void setLocalCutoffTime(ServiceStoreConfigCutoffConfigLocalCutoffTime localCutoffTime) {
    this.localCutoffTime = localCutoffTime;
  }


  public ServiceStoreConfigCutoffConfig noDeliveryPostCutoff(Boolean noDeliveryPostCutoff) {
    this.noDeliveryPostCutoff = noDeliveryPostCutoff;
    return this;
  }

  /**
   * Merchants can opt-out of showing n+1 day local delivery when they have a shipping service configured to n day local delivery. For example, if the shipping service defines same-day delivery, and it&#39;s past the cut-off, setting this field to &#x60;true&#x60; results in the calculated shipping service rate returning &#x60;NO_DELIVERY_POST_CUTOFF&#x60;. In the same example, setting this field to &#x60;false&#x60; results in the calculated shipping time being one day. This is only for local delivery.
   * @return noDeliveryPostCutoff
   */
  @javax.annotation.Nullable
  public Boolean getNoDeliveryPostCutoff() {
    return noDeliveryPostCutoff;
  }

  public void setNoDeliveryPostCutoff(Boolean noDeliveryPostCutoff) {
    this.noDeliveryPostCutoff = noDeliveryPostCutoff;
  }


  public ServiceStoreConfigCutoffConfig storeCloseOffsetHours(String storeCloseOffsetHours) {
    this.storeCloseOffsetHours = storeCloseOffsetHours;
    return this;
  }

  /**
   * Represents cutoff time as the number of hours before store closing. Mutually exclusive with other fields (hour and minute).
   * @return storeCloseOffsetHours
   */
  @javax.annotation.Nullable
  public String getStoreCloseOffsetHours() {
    return storeCloseOffsetHours;
  }

  public void setStoreCloseOffsetHours(String storeCloseOffsetHours) {
    this.storeCloseOffsetHours = storeCloseOffsetHours;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceStoreConfigCutoffConfig serviceStoreConfigCutoffConfig = (ServiceStoreConfigCutoffConfig) o;
    return Objects.equals(this.localCutoffTime, serviceStoreConfigCutoffConfig.localCutoffTime) &&
        Objects.equals(this.noDeliveryPostCutoff, serviceStoreConfigCutoffConfig.noDeliveryPostCutoff) &&
        Objects.equals(this.storeCloseOffsetHours, serviceStoreConfigCutoffConfig.storeCloseOffsetHours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localCutoffTime, noDeliveryPostCutoff, storeCloseOffsetHours);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceStoreConfigCutoffConfig {\n");
    sb.append("    localCutoffTime: ").append(toIndentedString(localCutoffTime)).append("\n");
    sb.append("    noDeliveryPostCutoff: ").append(toIndentedString(noDeliveryPostCutoff)).append("\n");
    sb.append("    storeCloseOffsetHours: ").append(toIndentedString(storeCloseOffsetHours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localCutoffTime");
    openapiFields.add("noDeliveryPostCutoff");
    openapiFields.add("storeCloseOffsetHours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceStoreConfigCutoffConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceStoreConfigCutoffConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceStoreConfigCutoffConfig is not found in the empty JSON string", ServiceStoreConfigCutoffConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceStoreConfigCutoffConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceStoreConfigCutoffConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `localCutoffTime`
      if (jsonObj.get("localCutoffTime") != null && !jsonObj.get("localCutoffTime").isJsonNull()) {
        ServiceStoreConfigCutoffConfigLocalCutoffTime.validateJsonElement(jsonObj.get("localCutoffTime"));
      }
      if ((jsonObj.get("storeCloseOffsetHours") != null && !jsonObj.get("storeCloseOffsetHours").isJsonNull()) && !jsonObj.get("storeCloseOffsetHours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeCloseOffsetHours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeCloseOffsetHours").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceStoreConfigCutoffConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceStoreConfigCutoffConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceStoreConfigCutoffConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceStoreConfigCutoffConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceStoreConfigCutoffConfig>() {
           @Override
           public void write(JsonWriter out, ServiceStoreConfigCutoffConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceStoreConfigCutoffConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceStoreConfigCutoffConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceStoreConfigCutoffConfig
   * @throws IOException if the JSON string is invalid with respect to ServiceStoreConfigCutoffConfig
   */
  public static ServiceStoreConfigCutoffConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceStoreConfigCutoffConfig.class);
  }

  /**
   * Convert an instance of ServiceStoreConfigCutoffConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

