/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Not available for MCAs [accounts](https://support.google.com/merchants/answer/188487). By turning on [automatic shipping improvements](https://support.google.com/merchants/answer/10027038), you are allowing Google to improve the accuracy of your delivery times shown to shoppers using Google. More accurate delivery times, especially when faster, typically lead to better conversion rates. Google will improve your estimated delivery times based on various factors: * Delivery address of an order * Current handling time and shipping time settings * Estimated weekdays or business days * Parcel tracking data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountShippingImprovements {
  public static final String SERIALIZED_NAME_ALLOW_SHIPPING_IMPROVEMENTS = "allowShippingImprovements";
  @SerializedName(SERIALIZED_NAME_ALLOW_SHIPPING_IMPROVEMENTS)
  private Boolean allowShippingImprovements;

  public AccountShippingImprovements() {
  }

  public AccountShippingImprovements allowShippingImprovements(Boolean allowShippingImprovements) {
    this.allowShippingImprovements = allowShippingImprovements;
    return this;
  }

  /**
   * Enables automatic shipping improvements.
   * @return allowShippingImprovements
   */
  @javax.annotation.Nullable
  public Boolean getAllowShippingImprovements() {
    return allowShippingImprovements;
  }

  public void setAllowShippingImprovements(Boolean allowShippingImprovements) {
    this.allowShippingImprovements = allowShippingImprovements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountShippingImprovements accountShippingImprovements = (AccountShippingImprovements) o;
    return Objects.equals(this.allowShippingImprovements, accountShippingImprovements.allowShippingImprovements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowShippingImprovements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountShippingImprovements {\n");
    sb.append("    allowShippingImprovements: ").append(toIndentedString(allowShippingImprovements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowShippingImprovements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountShippingImprovements
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountShippingImprovements.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountShippingImprovements is not found in the empty JSON string", AccountShippingImprovements.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountShippingImprovements.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountShippingImprovements` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountShippingImprovements.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountShippingImprovements' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountShippingImprovements> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountShippingImprovements.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountShippingImprovements>() {
           @Override
           public void write(JsonWriter out, AccountShippingImprovements value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountShippingImprovements read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountShippingImprovements given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountShippingImprovements
   * @throws IOException if the JSON string is invalid with respect to AccountShippingImprovements
   */
  public static AccountShippingImprovements fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountShippingImprovements.class);
  }

  /**
   * Convert an instance of AccountShippingImprovements to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

