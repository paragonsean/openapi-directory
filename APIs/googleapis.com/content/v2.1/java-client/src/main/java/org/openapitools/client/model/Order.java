/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderAddress;
import org.openapitools.client.model.OrderCustomer;
import org.openapitools.client.model.OrderDeliveryDetails;
import org.openapitools.client.model.OrderLineItem;
import org.openapitools.client.model.OrderOrderAnnotation;
import org.openapitools.client.model.OrderPickupDetails;
import org.openapitools.client.model.OrderPromotion;
import org.openapitools.client.model.OrderRefund;
import org.openapitools.client.model.OrderShipment;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Order. Production access (all methods) requires the order manager role. Sandbox access does not.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Order {
  public static final String SERIALIZED_NAME_ACKNOWLEDGED = "acknowledged";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGED)
  private Boolean acknowledged;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private List<OrderOrderAnnotation> annotations = new ArrayList<>();

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private OrderAddress billingAddress;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private OrderCustomer customer;

  public static final String SERIALIZED_NAME_DELIVERY_DETAILS = "deliveryDetails";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DETAILS)
  private OrderDeliveryDetails deliveryDetails;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<OrderLineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_MERCHANT_ORDER_ID = "merchantOrderId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ORDER_ID)
  private String merchantOrderId;

  public static final String SERIALIZED_NAME_NET_PRICE_AMOUNT = "netPriceAmount";
  @SerializedName(SERIALIZED_NAME_NET_PRICE_AMOUNT)
  private Price netPriceAmount;

  public static final String SERIALIZED_NAME_NET_TAX_AMOUNT = "netTaxAmount";
  @SerializedName(SERIALIZED_NAME_NET_TAX_AMOUNT)
  private Price netTaxAmount;

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "paymentStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private String paymentStatus;

  public static final String SERIALIZED_NAME_PICKUP_DETAILS = "pickupDetails";
  @SerializedName(SERIALIZED_NAME_PICKUP_DETAILS)
  private OrderPickupDetails pickupDetails;

  public static final String SERIALIZED_NAME_PLACED_DATE = "placedDate";
  @SerializedName(SERIALIZED_NAME_PLACED_DATE)
  private String placedDate;

  public static final String SERIALIZED_NAME_PROMOTIONS = "promotions";
  @SerializedName(SERIALIZED_NAME_PROMOTIONS)
  private List<OrderPromotion> promotions = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private List<OrderRefund> refunds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPMENTS = "shipments";
  @SerializedName(SERIALIZED_NAME_SHIPMENTS)
  private List<OrderShipment> shipments = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_COST = "shippingCost";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COST)
  private Price shippingCost;

  public static final String SERIALIZED_NAME_SHIPPING_COST_TAX = "shippingCostTax";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COST_TAX)
  private Price shippingCostTax;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TAX_COLLECTOR = "taxCollector";
  @SerializedName(SERIALIZED_NAME_TAX_COLLECTOR)
  private String taxCollector;

  public Order() {
  }

  public Order acknowledged(Boolean acknowledged) {
    this.acknowledged = acknowledged;
    return this;
  }

  /**
   * Whether the order was acknowledged.
   * @return acknowledged
   */
  @javax.annotation.Nullable
  public Boolean getAcknowledged() {
    return acknowledged;
  }

  public void setAcknowledged(Boolean acknowledged) {
    this.acknowledged = acknowledged;
  }


  public Order annotations(List<OrderOrderAnnotation> annotations) {
    this.annotations = annotations;
    return this;
  }

  public Order addAnnotationsItem(OrderOrderAnnotation annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<>();
    }
    this.annotations.add(annotationsItem);
    return this;
  }

  /**
   * List of key-value pairs that are attached to a given order.
   * @return annotations
   */
  @javax.annotation.Nullable
  public List<OrderOrderAnnotation> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(List<OrderOrderAnnotation> annotations) {
    this.annotations = annotations;
  }


  public Order billingAddress(OrderAddress billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public OrderAddress getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(OrderAddress billingAddress) {
    this.billingAddress = billingAddress;
  }


  public Order customer(OrderCustomer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public OrderCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(OrderCustomer customer) {
    this.customer = customer;
  }


  public Order deliveryDetails(OrderDeliveryDetails deliveryDetails) {
    this.deliveryDetails = deliveryDetails;
    return this;
  }

  /**
   * Get deliveryDetails
   * @return deliveryDetails
   */
  @javax.annotation.Nullable
  public OrderDeliveryDetails getDeliveryDetails() {
    return deliveryDetails;
  }

  public void setDeliveryDetails(OrderDeliveryDetails deliveryDetails) {
    this.deliveryDetails = deliveryDetails;
  }


  public Order id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The REST ID of the order. Globally unique.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Order kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;&#x60;content#order&#x60;\&quot;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Order lineItems(List<OrderLineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public Order addLineItemsItem(OrderLineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * Line items that are ordered.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<OrderLineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<OrderLineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public Order merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * Get merchantId
   * @return merchantId
   */
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public Order merchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
    return this;
  }

  /**
   * Merchant-provided ID of the order.
   * @return merchantOrderId
   */
  @javax.annotation.Nullable
  public String getMerchantOrderId() {
    return merchantOrderId;
  }

  public void setMerchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
  }


  public Order netPriceAmount(Price netPriceAmount) {
    this.netPriceAmount = netPriceAmount;
    return this;
  }

  /**
   * Get netPriceAmount
   * @return netPriceAmount
   */
  @javax.annotation.Nullable
  public Price getNetPriceAmount() {
    return netPriceAmount;
  }

  public void setNetPriceAmount(Price netPriceAmount) {
    this.netPriceAmount = netPriceAmount;
  }


  public Order netTaxAmount(Price netTaxAmount) {
    this.netTaxAmount = netTaxAmount;
    return this;
  }

  /**
   * Get netTaxAmount
   * @return netTaxAmount
   */
  @javax.annotation.Nullable
  public Price getNetTaxAmount() {
    return netTaxAmount;
  }

  public void setNetTaxAmount(Price netTaxAmount) {
    this.netTaxAmount = netTaxAmount;
  }


  public Order paymentStatus(String paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

  /**
   * The status of the payment. Acceptable values are: - \&quot;&#x60;paymentCaptured&#x60;\&quot; - \&quot;&#x60;paymentRejected&#x60;\&quot; - \&quot;&#x60;paymentSecured&#x60;\&quot; - \&quot;&#x60;pendingAuthorization&#x60;\&quot; 
   * @return paymentStatus
   */
  @javax.annotation.Nullable
  public String getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(String paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public Order pickupDetails(OrderPickupDetails pickupDetails) {
    this.pickupDetails = pickupDetails;
    return this;
  }

  /**
   * Get pickupDetails
   * @return pickupDetails
   */
  @javax.annotation.Nullable
  public OrderPickupDetails getPickupDetails() {
    return pickupDetails;
  }

  public void setPickupDetails(OrderPickupDetails pickupDetails) {
    this.pickupDetails = pickupDetails;
  }


  public Order placedDate(String placedDate) {
    this.placedDate = placedDate;
    return this;
  }

  /**
   * The date when the order was placed, in ISO 8601 format.
   * @return placedDate
   */
  @javax.annotation.Nullable
  public String getPlacedDate() {
    return placedDate;
  }

  public void setPlacedDate(String placedDate) {
    this.placedDate = placedDate;
  }


  public Order promotions(List<OrderPromotion> promotions) {
    this.promotions = promotions;
    return this;
  }

  public Order addPromotionsItem(OrderPromotion promotionsItem) {
    if (this.promotions == null) {
      this.promotions = new ArrayList<>();
    }
    this.promotions.add(promotionsItem);
    return this;
  }

  /**
   * Promotions associated with the order. To determine which promotions apply to which products, check the &#x60;Promotions[].appliedItems[].lineItemId&#x60; field against the &#x60;LineItems[].id&#x60; field for each promotion. If a promotion is applied to more than 1 offerId, divide the discount value by the number of affected offers to determine how much discount to apply to each offerId. Examples: 1. To calculate price paid by the customer for a single line item including the discount: For each promotion, subtract the &#x60;LineItems[].adjustments[].priceAdjustment.value&#x60; amount from the &#x60;LineItems[].Price.value&#x60;. 2. To calculate price paid by the customer for a single line item including the discount in case of multiple quantity: For each promotion, divide the &#x60;LineItems[].adjustments[].priceAdjustment.value&#x60; by the quantity of products then subtract the resulting value from the &#x60;LineItems[].Product.Price.value&#x60; for each quantity item. Only 1 promotion can be applied to an offerId in a given order. To refund an item which had a promotion applied to it, make sure to refund the amount after first subtracting the promotion discount from the item price. More details about the program are here.
   * @return promotions
   */
  @javax.annotation.Nullable
  public List<OrderPromotion> getPromotions() {
    return promotions;
  }

  public void setPromotions(List<OrderPromotion> promotions) {
    this.promotions = promotions;
  }


  public Order refunds(List<OrderRefund> refunds) {
    this.refunds = refunds;
    return this;
  }

  public Order addRefundsItem(OrderRefund refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

  /**
   * Refunds for the order.
   * @return refunds
   */
  @javax.annotation.Nullable
  public List<OrderRefund> getRefunds() {
    return refunds;
  }

  public void setRefunds(List<OrderRefund> refunds) {
    this.refunds = refunds;
  }


  public Order shipments(List<OrderShipment> shipments) {
    this.shipments = shipments;
    return this;
  }

  public Order addShipmentsItem(OrderShipment shipmentsItem) {
    if (this.shipments == null) {
      this.shipments = new ArrayList<>();
    }
    this.shipments.add(shipmentsItem);
    return this;
  }

  /**
   * Shipments of the order.
   * @return shipments
   */
  @javax.annotation.Nullable
  public List<OrderShipment> getShipments() {
    return shipments;
  }

  public void setShipments(List<OrderShipment> shipments) {
    this.shipments = shipments;
  }


  public Order shippingCost(Price shippingCost) {
    this.shippingCost = shippingCost;
    return this;
  }

  /**
   * Get shippingCost
   * @return shippingCost
   */
  @javax.annotation.Nullable
  public Price getShippingCost() {
    return shippingCost;
  }

  public void setShippingCost(Price shippingCost) {
    this.shippingCost = shippingCost;
  }


  public Order shippingCostTax(Price shippingCostTax) {
    this.shippingCostTax = shippingCostTax;
    return this;
  }

  /**
   * Get shippingCostTax
   * @return shippingCostTax
   */
  @javax.annotation.Nullable
  public Price getShippingCostTax() {
    return shippingCostTax;
  }

  public void setShippingCostTax(Price shippingCostTax) {
    this.shippingCostTax = shippingCostTax;
  }


  public Order status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the order. Acceptable values are: - \&quot;&#x60;canceled&#x60;\&quot; - \&quot;&#x60;delivered&#x60;\&quot; - \&quot;&#x60;inProgress&#x60;\&quot; - \&quot;&#x60;partiallyDelivered&#x60;\&quot; - \&quot;&#x60;partiallyReturned&#x60;\&quot; - \&quot;&#x60;partiallyShipped&#x60;\&quot; - \&quot;&#x60;pendingShipment&#x60;\&quot; - \&quot;&#x60;returned&#x60;\&quot; - \&quot;&#x60;shipped&#x60;\&quot; 
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Order taxCollector(String taxCollector) {
    this.taxCollector = taxCollector;
    return this;
  }

  /**
   * The party responsible for collecting and remitting taxes. Acceptable values are: - \&quot;&#x60;marketplaceFacilitator&#x60;\&quot; - \&quot;&#x60;merchant&#x60;\&quot; 
   * @return taxCollector
   */
  @javax.annotation.Nullable
  public String getTaxCollector() {
    return taxCollector;
  }

  public void setTaxCollector(String taxCollector) {
    this.taxCollector = taxCollector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.acknowledged, order.acknowledged) &&
        Objects.equals(this.annotations, order.annotations) &&
        Objects.equals(this.billingAddress, order.billingAddress) &&
        Objects.equals(this.customer, order.customer) &&
        Objects.equals(this.deliveryDetails, order.deliveryDetails) &&
        Objects.equals(this.id, order.id) &&
        Objects.equals(this.kind, order.kind) &&
        Objects.equals(this.lineItems, order.lineItems) &&
        Objects.equals(this.merchantId, order.merchantId) &&
        Objects.equals(this.merchantOrderId, order.merchantOrderId) &&
        Objects.equals(this.netPriceAmount, order.netPriceAmount) &&
        Objects.equals(this.netTaxAmount, order.netTaxAmount) &&
        Objects.equals(this.paymentStatus, order.paymentStatus) &&
        Objects.equals(this.pickupDetails, order.pickupDetails) &&
        Objects.equals(this.placedDate, order.placedDate) &&
        Objects.equals(this.promotions, order.promotions) &&
        Objects.equals(this.refunds, order.refunds) &&
        Objects.equals(this.shipments, order.shipments) &&
        Objects.equals(this.shippingCost, order.shippingCost) &&
        Objects.equals(this.shippingCostTax, order.shippingCostTax) &&
        Objects.equals(this.status, order.status) &&
        Objects.equals(this.taxCollector, order.taxCollector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acknowledged, annotations, billingAddress, customer, deliveryDetails, id, kind, lineItems, merchantId, merchantOrderId, netPriceAmount, netTaxAmount, paymentStatus, pickupDetails, placedDate, promotions, refunds, shipments, shippingCost, shippingCostTax, status, taxCollector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    acknowledged: ").append(toIndentedString(acknowledged)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    deliveryDetails: ").append(toIndentedString(deliveryDetails)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    merchantOrderId: ").append(toIndentedString(merchantOrderId)).append("\n");
    sb.append("    netPriceAmount: ").append(toIndentedString(netPriceAmount)).append("\n");
    sb.append("    netTaxAmount: ").append(toIndentedString(netTaxAmount)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    pickupDetails: ").append(toIndentedString(pickupDetails)).append("\n");
    sb.append("    placedDate: ").append(toIndentedString(placedDate)).append("\n");
    sb.append("    promotions: ").append(toIndentedString(promotions)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    shipments: ").append(toIndentedString(shipments)).append("\n");
    sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
    sb.append("    shippingCostTax: ").append(toIndentedString(shippingCostTax)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taxCollector: ").append(toIndentedString(taxCollector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acknowledged");
    openapiFields.add("annotations");
    openapiFields.add("billingAddress");
    openapiFields.add("customer");
    openapiFields.add("deliveryDetails");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("lineItems");
    openapiFields.add("merchantId");
    openapiFields.add("merchantOrderId");
    openapiFields.add("netPriceAmount");
    openapiFields.add("netTaxAmount");
    openapiFields.add("paymentStatus");
    openapiFields.add("pickupDetails");
    openapiFields.add("placedDate");
    openapiFields.add("promotions");
    openapiFields.add("refunds");
    openapiFields.add("shipments");
    openapiFields.add("shippingCost");
    openapiFields.add("shippingCostTax");
    openapiFields.add("status");
    openapiFields.add("taxCollector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Order
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Order.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Order` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("annotations") != null && !jsonObj.get("annotations").isJsonNull()) {
        JsonArray jsonArrayannotations = jsonObj.getAsJsonArray("annotations");
        if (jsonArrayannotations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("annotations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `annotations` to be an array in the JSON string but got `%s`", jsonObj.get("annotations").toString()));
          }

          // validate the optional field `annotations` (array)
          for (int i = 0; i < jsonArrayannotations.size(); i++) {
            OrderOrderAnnotation.validateJsonElement(jsonArrayannotations.get(i));
          };
        }
      }
      // validate the optional field `billingAddress`
      if (jsonObj.get("billingAddress") != null && !jsonObj.get("billingAddress").isJsonNull()) {
        OrderAddress.validateJsonElement(jsonObj.get("billingAddress"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        OrderCustomer.validateJsonElement(jsonObj.get("customer"));
      }
      // validate the optional field `deliveryDetails`
      if (jsonObj.get("deliveryDetails") != null && !jsonObj.get("deliveryDetails").isJsonNull()) {
        OrderDeliveryDetails.validateJsonElement(jsonObj.get("deliveryDetails"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            OrderLineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if ((jsonObj.get("merchantOrderId") != null && !jsonObj.get("merchantOrderId").isJsonNull()) && !jsonObj.get("merchantOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantOrderId").toString()));
      }
      // validate the optional field `netPriceAmount`
      if (jsonObj.get("netPriceAmount") != null && !jsonObj.get("netPriceAmount").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("netPriceAmount"));
      }
      // validate the optional field `netTaxAmount`
      if (jsonObj.get("netTaxAmount") != null && !jsonObj.get("netTaxAmount").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("netTaxAmount"));
      }
      if ((jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) && !jsonObj.get("paymentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentStatus").toString()));
      }
      // validate the optional field `pickupDetails`
      if (jsonObj.get("pickupDetails") != null && !jsonObj.get("pickupDetails").isJsonNull()) {
        OrderPickupDetails.validateJsonElement(jsonObj.get("pickupDetails"));
      }
      if ((jsonObj.get("placedDate") != null && !jsonObj.get("placedDate").isJsonNull()) && !jsonObj.get("placedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placedDate").toString()));
      }
      if (jsonObj.get("promotions") != null && !jsonObj.get("promotions").isJsonNull()) {
        JsonArray jsonArraypromotions = jsonObj.getAsJsonArray("promotions");
        if (jsonArraypromotions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promotions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promotions` to be an array in the JSON string but got `%s`", jsonObj.get("promotions").toString()));
          }

          // validate the optional field `promotions` (array)
          for (int i = 0; i < jsonArraypromotions.size(); i++) {
            OrderPromotion.validateJsonElement(jsonArraypromotions.get(i));
          };
        }
      }
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonNull()) {
        JsonArray jsonArrayrefunds = jsonObj.getAsJsonArray("refunds");
        if (jsonArrayrefunds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunds` to be an array in the JSON string but got `%s`", jsonObj.get("refunds").toString()));
          }

          // validate the optional field `refunds` (array)
          for (int i = 0; i < jsonArrayrefunds.size(); i++) {
            OrderRefund.validateJsonElement(jsonArrayrefunds.get(i));
          };
        }
      }
      if (jsonObj.get("shipments") != null && !jsonObj.get("shipments").isJsonNull()) {
        JsonArray jsonArrayshipments = jsonObj.getAsJsonArray("shipments");
        if (jsonArrayshipments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipments` to be an array in the JSON string but got `%s`", jsonObj.get("shipments").toString()));
          }

          // validate the optional field `shipments` (array)
          for (int i = 0; i < jsonArrayshipments.size(); i++) {
            OrderShipment.validateJsonElement(jsonArrayshipments.get(i));
          };
        }
      }
      // validate the optional field `shippingCost`
      if (jsonObj.get("shippingCost") != null && !jsonObj.get("shippingCost").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("shippingCost"));
      }
      // validate the optional field `shippingCostTax`
      if (jsonObj.get("shippingCostTax") != null && !jsonObj.get("shippingCostTax").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("shippingCostTax"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("taxCollector") != null && !jsonObj.get("taxCollector").isJsonNull()) && !jsonObj.get("taxCollector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxCollector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxCollector").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Order given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Order
   * @throws IOException if the JSON string is invalid with respect to Order
   */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

  /**
   * Convert an instance of Order to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

