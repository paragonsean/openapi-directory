/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SettlementTransactionIdentifiers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SettlementTransactionIdentifiers {
  public static final String SERIALIZED_NAME_ADJUSTMENT_ID = "adjustmentId";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_ID)
  private String adjustmentId;

  public static final String SERIALIZED_NAME_MERCHANT_ORDER_ID = "merchantOrderId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ORDER_ID)
  private String merchantOrderId;

  public static final String SERIALIZED_NAME_ORDER_ITEM_ID = "orderItemId";
  @SerializedName(SERIALIZED_NAME_ORDER_ITEM_ID)
  private String orderItemId;

  public static final String SERIALIZED_NAME_SETTLEMENT_ENTRY_ID = "settlementEntryId";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_ENTRY_ID)
  private String settlementEntryId;

  public static final String SERIALIZED_NAME_SHIPMENT_IDS = "shipmentIds";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_IDS)
  private List<String> shipmentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public SettlementTransactionIdentifiers() {
  }

  public SettlementTransactionIdentifiers adjustmentId(String adjustmentId) {
    this.adjustmentId = adjustmentId;
    return this;
  }

  /**
   * The identifier of the adjustments, if it&#39;s available.
   * @return adjustmentId
   */
  @javax.annotation.Nullable
  public String getAdjustmentId() {
    return adjustmentId;
  }

  public void setAdjustmentId(String adjustmentId) {
    this.adjustmentId = adjustmentId;
  }


  public SettlementTransactionIdentifiers merchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
    return this;
  }

  /**
   * The merchant provided order ID.
   * @return merchantOrderId
   */
  @javax.annotation.Nullable
  public String getMerchantOrderId() {
    return merchantOrderId;
  }

  public void setMerchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
  }


  public SettlementTransactionIdentifiers orderItemId(String orderItemId) {
    this.orderItemId = orderItemId;
    return this;
  }

  /**
   * The identifier of the item.
   * @return orderItemId
   */
  @javax.annotation.Nullable
  public String getOrderItemId() {
    return orderItemId;
  }

  public void setOrderItemId(String orderItemId) {
    this.orderItemId = orderItemId;
  }


  public SettlementTransactionIdentifiers settlementEntryId(String settlementEntryId) {
    this.settlementEntryId = settlementEntryId;
    return this;
  }

  /**
   * The unique ID of the settlement transaction entry.
   * @return settlementEntryId
   */
  @javax.annotation.Nullable
  public String getSettlementEntryId() {
    return settlementEntryId;
  }

  public void setSettlementEntryId(String settlementEntryId) {
    this.settlementEntryId = settlementEntryId;
  }


  public SettlementTransactionIdentifiers shipmentIds(List<String> shipmentIds) {
    this.shipmentIds = shipmentIds;
    return this;
  }

  public SettlementTransactionIdentifiers addShipmentIdsItem(String shipmentIdsItem) {
    if (this.shipmentIds == null) {
      this.shipmentIds = new ArrayList<>();
    }
    this.shipmentIds.add(shipmentIdsItem);
    return this;
  }

  /**
   * The shipment ids for the item.
   * @return shipmentIds
   */
  @javax.annotation.Nullable
  public List<String> getShipmentIds() {
    return shipmentIds;
  }

  public void setShipmentIds(List<String> shipmentIds) {
    this.shipmentIds = shipmentIds;
  }


  public SettlementTransactionIdentifiers transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The Google transaction ID.
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementTransactionIdentifiers settlementTransactionIdentifiers = (SettlementTransactionIdentifiers) o;
    return Objects.equals(this.adjustmentId, settlementTransactionIdentifiers.adjustmentId) &&
        Objects.equals(this.merchantOrderId, settlementTransactionIdentifiers.merchantOrderId) &&
        Objects.equals(this.orderItemId, settlementTransactionIdentifiers.orderItemId) &&
        Objects.equals(this.settlementEntryId, settlementTransactionIdentifiers.settlementEntryId) &&
        Objects.equals(this.shipmentIds, settlementTransactionIdentifiers.shipmentIds) &&
        Objects.equals(this.transactionId, settlementTransactionIdentifiers.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustmentId, merchantOrderId, orderItemId, settlementEntryId, shipmentIds, transactionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementTransactionIdentifiers {\n");
    sb.append("    adjustmentId: ").append(toIndentedString(adjustmentId)).append("\n");
    sb.append("    merchantOrderId: ").append(toIndentedString(merchantOrderId)).append("\n");
    sb.append("    orderItemId: ").append(toIndentedString(orderItemId)).append("\n");
    sb.append("    settlementEntryId: ").append(toIndentedString(settlementEntryId)).append("\n");
    sb.append("    shipmentIds: ").append(toIndentedString(shipmentIds)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustmentId");
    openapiFields.add("merchantOrderId");
    openapiFields.add("orderItemId");
    openapiFields.add("settlementEntryId");
    openapiFields.add("shipmentIds");
    openapiFields.add("transactionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SettlementTransactionIdentifiers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SettlementTransactionIdentifiers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SettlementTransactionIdentifiers is not found in the empty JSON string", SettlementTransactionIdentifiers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SettlementTransactionIdentifiers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SettlementTransactionIdentifiers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adjustmentId") != null && !jsonObj.get("adjustmentId").isJsonNull()) && !jsonObj.get("adjustmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adjustmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adjustmentId").toString()));
      }
      if ((jsonObj.get("merchantOrderId") != null && !jsonObj.get("merchantOrderId").isJsonNull()) && !jsonObj.get("merchantOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantOrderId").toString()));
      }
      if ((jsonObj.get("orderItemId") != null && !jsonObj.get("orderItemId").isJsonNull()) && !jsonObj.get("orderItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderItemId").toString()));
      }
      if ((jsonObj.get("settlementEntryId") != null && !jsonObj.get("settlementEntryId").isJsonNull()) && !jsonObj.get("settlementEntryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementEntryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementEntryId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("shipmentIds") != null && !jsonObj.get("shipmentIds").isJsonNull() && !jsonObj.get("shipmentIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentIds` to be an array in the JSON string but got `%s`", jsonObj.get("shipmentIds").toString()));
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettlementTransactionIdentifiers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettlementTransactionIdentifiers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettlementTransactionIdentifiers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettlementTransactionIdentifiers.class));

       return (TypeAdapter<T>) new TypeAdapter<SettlementTransactionIdentifiers>() {
           @Override
           public void write(JsonWriter out, SettlementTransactionIdentifiers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettlementTransactionIdentifiers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SettlementTransactionIdentifiers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SettlementTransactionIdentifiers
   * @throws IOException if the JSON string is invalid with respect to SettlementTransactionIdentifiers
   */
  public static SettlementTransactionIdentifiers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettlementTransactionIdentifiers.class);
  }

  /**
   * Convert an instance of SettlementTransactionIdentifiers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

