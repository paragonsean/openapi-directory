/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PriceAmount;
import org.openapitools.client.model.PromotionPromotionStatus;
import org.openapitools.client.model.TimePeriod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a promotion. See the following articles for more details. * [Promotions feed specification](https://support.google.com/merchants/answer/2906014) * [Local promotions feed specification](https://support.google.com/merchants/answer/10146130) * [Promotions on Buy on Google product data specification](https://support.google.com/merchants/answer/9173673)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Promotion {
  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private List<String> brand = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRAND_EXCLUSION = "brandExclusion";
  @SerializedName(SERIALIZED_NAME_BRAND_EXCLUSION)
  private List<String> brandExclusion = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT_LANGUAGE = "contentLanguage";
  @SerializedName(SERIALIZED_NAME_CONTENT_LANGUAGE)
  private String contentLanguage;

  /**
   * Required. Coupon value type for the promotion.
   */
  @JsonAdapter(CouponValueTypeEnum.Adapter.class)
  public enum CouponValueTypeEnum {
    COUPON_VALUE_TYPE_UNSPECIFIED("COUPON_VALUE_TYPE_UNSPECIFIED"),
    
    MONEY_OFF("MONEY_OFF"),
    
    PERCENT_OFF("PERCENT_OFF"),
    
    BUY_M_GET_N_MONEY_OFF("BUY_M_GET_N_MONEY_OFF"),
    
    BUY_M_GET_N_PERCENT_OFF("BUY_M_GET_N_PERCENT_OFF"),
    
    BUY_M_GET_MONEY_OFF("BUY_M_GET_MONEY_OFF"),
    
    BUY_M_GET_PERCENT_OFF("BUY_M_GET_PERCENT_OFF"),
    
    FREE_GIFT("FREE_GIFT"),
    
    FREE_GIFT_WITH_VALUE("FREE_GIFT_WITH_VALUE"),
    
    FREE_GIFT_WITH_ITEM_ID("FREE_GIFT_WITH_ITEM_ID"),
    
    FREE_SHIPPING_STANDARD("FREE_SHIPPING_STANDARD"),
    
    FREE_SHIPPING_OVERNIGHT("FREE_SHIPPING_OVERNIGHT"),
    
    FREE_SHIPPING_TWO_DAY("FREE_SHIPPING_TWO_DAY");

    private String value;

    CouponValueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CouponValueTypeEnum fromValue(String value) {
      for (CouponValueTypeEnum b : CouponValueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CouponValueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CouponValueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CouponValueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CouponValueTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CouponValueTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COUPON_VALUE_TYPE = "couponValueType";
  @SerializedName(SERIALIZED_NAME_COUPON_VALUE_TYPE)
  private CouponValueTypeEnum couponValueType;

  public static final String SERIALIZED_NAME_FREE_GIFT_DESCRIPTION = "freeGiftDescription";
  @SerializedName(SERIALIZED_NAME_FREE_GIFT_DESCRIPTION)
  private String freeGiftDescription;

  public static final String SERIALIZED_NAME_FREE_GIFT_ITEM_ID = "freeGiftItemId";
  @SerializedName(SERIALIZED_NAME_FREE_GIFT_ITEM_ID)
  private String freeGiftItemId;

  public static final String SERIALIZED_NAME_FREE_GIFT_VALUE = "freeGiftValue";
  @SerializedName(SERIALIZED_NAME_FREE_GIFT_VALUE)
  private PriceAmount freeGiftValue;

  public static final String SERIALIZED_NAME_GENERIC_REDEMPTION_CODE = "genericRedemptionCode";
  @SerializedName(SERIALIZED_NAME_GENERIC_REDEMPTION_CODE)
  private String genericRedemptionCode;

  public static final String SERIALIZED_NAME_GET_THIS_QUANTITY_DISCOUNTED = "getThisQuantityDiscounted";
  @SerializedName(SERIALIZED_NAME_GET_THIS_QUANTITY_DISCOUNTED)
  private Integer getThisQuantityDiscounted;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ITEM_GROUP_ID = "itemGroupId";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_ID)
  private List<String> itemGroupId = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_GROUP_ID_EXCLUSION = "itemGroupIdExclusion";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_ID_EXCLUSION)
  private List<String> itemGroupIdExclusion = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private List<String> itemId = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_ID_EXCLUSION = "itemIdExclusion";
  @SerializedName(SERIALIZED_NAME_ITEM_ID_EXCLUSION)
  private List<String> itemIdExclusion = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMIT_QUANTITY = "limitQuantity";
  @SerializedName(SERIALIZED_NAME_LIMIT_QUANTITY)
  private Integer limitQuantity;

  public static final String SERIALIZED_NAME_LIMIT_VALUE = "limitValue";
  @SerializedName(SERIALIZED_NAME_LIMIT_VALUE)
  private PriceAmount limitValue;

  public static final String SERIALIZED_NAME_LONG_TITLE = "longTitle";
  @SerializedName(SERIALIZED_NAME_LONG_TITLE)
  private String longTitle;

  public static final String SERIALIZED_NAME_MINIMUM_PURCHASE_AMOUNT = "minimumPurchaseAmount";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PURCHASE_AMOUNT)
  private PriceAmount minimumPurchaseAmount;

  public static final String SERIALIZED_NAME_MINIMUM_PURCHASE_QUANTITY = "minimumPurchaseQuantity";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PURCHASE_QUANTITY)
  private Integer minimumPurchaseQuantity;

  public static final String SERIALIZED_NAME_MONEY_BUDGET = "moneyBudget";
  @SerializedName(SERIALIZED_NAME_MONEY_BUDGET)
  private PriceAmount moneyBudget;

  public static final String SERIALIZED_NAME_MONEY_OFF_AMOUNT = "moneyOffAmount";
  @SerializedName(SERIALIZED_NAME_MONEY_OFF_AMOUNT)
  private PriceAmount moneyOffAmount;

  /**
   * Required. Type of the promotion.
   */
  @JsonAdapter(OfferTypeEnum.Adapter.class)
  public enum OfferTypeEnum {
    OFFER_TYPE_UNSPECIFIED("OFFER_TYPE_UNSPECIFIED"),
    
    NO_CODE("NO_CODE"),
    
    GENERIC_CODE("GENERIC_CODE");

    private String value;

    OfferTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OfferTypeEnum fromValue(String value) {
      for (OfferTypeEnum b : OfferTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OfferTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OfferTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OfferTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OfferTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OfferTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OFFER_TYPE = "offerType";
  @SerializedName(SERIALIZED_NAME_OFFER_TYPE)
  private OfferTypeEnum offerType;

  public static final String SERIALIZED_NAME_ORDER_LIMIT = "orderLimit";
  @SerializedName(SERIALIZED_NAME_ORDER_LIMIT)
  private Integer orderLimit;

  public static final String SERIALIZED_NAME_PERCENT_OFF = "percentOff";
  @SerializedName(SERIALIZED_NAME_PERCENT_OFF)
  private Integer percentOff;

  /**
   * Required. Applicability of the promotion to either all products or only specific products.
   */
  @JsonAdapter(ProductApplicabilityEnum.Adapter.class)
  public enum ProductApplicabilityEnum {
    PRODUCT_APPLICABILITY_UNSPECIFIED("PRODUCT_APPLICABILITY_UNSPECIFIED"),
    
    ALL_PRODUCTS("ALL_PRODUCTS"),
    
    SPECIFIC_PRODUCTS("SPECIFIC_PRODUCTS");

    private String value;

    ProductApplicabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductApplicabilityEnum fromValue(String value) {
      for (ProductApplicabilityEnum b : ProductApplicabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductApplicabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductApplicabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductApplicabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductApplicabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductApplicabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_APPLICABILITY = "productApplicability";
  @SerializedName(SERIALIZED_NAME_PRODUCT_APPLICABILITY)
  private ProductApplicabilityEnum productApplicability;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private List<String> productType = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_EXCLUSION = "productTypeExclusion";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_EXCLUSION)
  private List<String> productTypeExclusion = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROMOTION_DESTINATION_IDS = "promotionDestinationIds";
  @SerializedName(SERIALIZED_NAME_PROMOTION_DESTINATION_IDS)
  private List<String> promotionDestinationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROMOTION_DISPLAY_DATES = "promotionDisplayDates";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PROMOTION_DISPLAY_DATES)
  private String promotionDisplayDates;

  public static final String SERIALIZED_NAME_PROMOTION_DISPLAY_TIME_PERIOD = "promotionDisplayTimePeriod";
  @SerializedName(SERIALIZED_NAME_PROMOTION_DISPLAY_TIME_PERIOD)
  private TimePeriod promotionDisplayTimePeriod;

  public static final String SERIALIZED_NAME_PROMOTION_EFFECTIVE_DATES = "promotionEffectiveDates";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PROMOTION_EFFECTIVE_DATES)
  private String promotionEffectiveDates;

  public static final String SERIALIZED_NAME_PROMOTION_EFFECTIVE_TIME_PERIOD = "promotionEffectiveTimePeriod";
  @SerializedName(SERIALIZED_NAME_PROMOTION_EFFECTIVE_TIME_PERIOD)
  private TimePeriod promotionEffectiveTimePeriod;

  public static final String SERIALIZED_NAME_PROMOTION_ID = "promotionId";
  @SerializedName(SERIALIZED_NAME_PROMOTION_ID)
  private String promotionId;

  public static final String SERIALIZED_NAME_PROMOTION_STATUS = "promotionStatus";
  @SerializedName(SERIALIZED_NAME_PROMOTION_STATUS)
  private PromotionPromotionStatus promotionStatus;

  public static final String SERIALIZED_NAME_PROMOTION_URL = "promotionUrl";
  @SerializedName(SERIALIZED_NAME_PROMOTION_URL)
  private String promotionUrl;

  /**
   * Gets or Sets redemptionChannel
   */
  @JsonAdapter(RedemptionChannelEnum.Adapter.class)
  public enum RedemptionChannelEnum {
    REDEMPTION_CHANNEL_UNSPECIFIED("REDEMPTION_CHANNEL_UNSPECIFIED"),
    
    IN_STORE("IN_STORE"),
    
    ONLINE("ONLINE");

    private String value;

    RedemptionChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedemptionChannelEnum fromValue(String value) {
      for (RedemptionChannelEnum b : RedemptionChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RedemptionChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedemptionChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedemptionChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedemptionChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RedemptionChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REDEMPTION_CHANNEL = "redemptionChannel";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_CHANNEL)
  private List<RedemptionChannelEnum> redemptionChannel = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_SERVICE_NAMES = "shippingServiceNames";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SERVICE_NAMES)
  private List<String> shippingServiceNames = new ArrayList<>();

  /**
   * Whether the promotion applies to all stores, or only specified stores. Local Inventory ads promotions throw an error if no store applicability is included. An INVALID_ARGUMENT error is thrown if store_applicability is set to ALL_STORES and store_code or score_code_exclusion is set to a value.
   */
  @JsonAdapter(StoreApplicabilityEnum.Adapter.class)
  public enum StoreApplicabilityEnum {
    STORE_APPLICABILITY_UNSPECIFIED("STORE_APPLICABILITY_UNSPECIFIED"),
    
    ALL_STORES("ALL_STORES"),
    
    SPECIFIC_STORES("SPECIFIC_STORES");

    private String value;

    StoreApplicabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StoreApplicabilityEnum fromValue(String value) {
      for (StoreApplicabilityEnum b : StoreApplicabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StoreApplicabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StoreApplicabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StoreApplicabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StoreApplicabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StoreApplicabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORE_APPLICABILITY = "storeApplicability";
  @SerializedName(SERIALIZED_NAME_STORE_APPLICABILITY)
  private StoreApplicabilityEnum storeApplicability;

  public static final String SERIALIZED_NAME_STORE_CODE = "storeCode";
  @SerializedName(SERIALIZED_NAME_STORE_CODE)
  private List<String> storeCode = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORE_CODE_EXCLUSION = "storeCodeExclusion";
  @SerializedName(SERIALIZED_NAME_STORE_CODE_EXCLUSION)
  private List<String> storeCodeExclusion = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_COUNTRY = "targetCountry";
  @SerializedName(SERIALIZED_NAME_TARGET_COUNTRY)
  private String targetCountry;

  public Promotion() {
  }

  public Promotion(
     String id
  ) {
    this();
    this.id = id;
  }

  public Promotion brand(List<String> brand) {
    this.brand = brand;
    return this;
  }

  public Promotion addBrandItem(String brandItem) {
    if (this.brand == null) {
      this.brand = new ArrayList<>();
    }
    this.brand.add(brandItem);
    return this;
  }

  /**
   * Product filter by brand for the promotion.
   * @return brand
   */
  @javax.annotation.Nullable
  public List<String> getBrand() {
    return brand;
  }

  public void setBrand(List<String> brand) {
    this.brand = brand;
  }


  public Promotion brandExclusion(List<String> brandExclusion) {
    this.brandExclusion = brandExclusion;
    return this;
  }

  public Promotion addBrandExclusionItem(String brandExclusionItem) {
    if (this.brandExclusion == null) {
      this.brandExclusion = new ArrayList<>();
    }
    this.brandExclusion.add(brandExclusionItem);
    return this;
  }

  /**
   * Product filter by brand exclusion for the promotion.
   * @return brandExclusion
   */
  @javax.annotation.Nullable
  public List<String> getBrandExclusion() {
    return brandExclusion;
  }

  public void setBrandExclusion(List<String> brandExclusion) {
    this.brandExclusion = brandExclusion;
  }


  public Promotion contentLanguage(String contentLanguage) {
    this.contentLanguage = contentLanguage;
    return this;
  }

  /**
   * Required. The content language used as part of the unique identifier. &#x60;en&#x60; content language is available for all target countries. &#x60;fr&#x60; content language is available for &#x60;CA&#x60; and &#x60;FR&#x60; target countries. &#x60;de&#x60; content language is available for &#x60;DE&#x60; target country. &#x60;nl&#x60; content language is available for &#x60;NL&#x60; target country. &#x60;it&#x60; content language is available for &#x60;IT&#x60; target country. &#x60;pt&#x60; content language is available for &#x60;BR&#x60; target country. &#x60;ja&#x60; content language is available for &#x60;JP&#x60; target country. &#x60;ko&#x60; content language is available for &#x60;KR&#x60; target country.
   * @return contentLanguage
   */
  @javax.annotation.Nullable
  public String getContentLanguage() {
    return contentLanguage;
  }

  public void setContentLanguage(String contentLanguage) {
    this.contentLanguage = contentLanguage;
  }


  public Promotion couponValueType(CouponValueTypeEnum couponValueType) {
    this.couponValueType = couponValueType;
    return this;
  }

  /**
   * Required. Coupon value type for the promotion.
   * @return couponValueType
   */
  @javax.annotation.Nullable
  public CouponValueTypeEnum getCouponValueType() {
    return couponValueType;
  }

  public void setCouponValueType(CouponValueTypeEnum couponValueType) {
    this.couponValueType = couponValueType;
  }


  public Promotion freeGiftDescription(String freeGiftDescription) {
    this.freeGiftDescription = freeGiftDescription;
    return this;
  }

  /**
   * Free gift description for the promotion.
   * @return freeGiftDescription
   */
  @javax.annotation.Nullable
  public String getFreeGiftDescription() {
    return freeGiftDescription;
  }

  public void setFreeGiftDescription(String freeGiftDescription) {
    this.freeGiftDescription = freeGiftDescription;
  }


  public Promotion freeGiftItemId(String freeGiftItemId) {
    this.freeGiftItemId = freeGiftItemId;
    return this;
  }

  /**
   * Free gift item ID for the promotion.
   * @return freeGiftItemId
   */
  @javax.annotation.Nullable
  public String getFreeGiftItemId() {
    return freeGiftItemId;
  }

  public void setFreeGiftItemId(String freeGiftItemId) {
    this.freeGiftItemId = freeGiftItemId;
  }


  public Promotion freeGiftValue(PriceAmount freeGiftValue) {
    this.freeGiftValue = freeGiftValue;
    return this;
  }

  /**
   * Get freeGiftValue
   * @return freeGiftValue
   */
  @javax.annotation.Nullable
  public PriceAmount getFreeGiftValue() {
    return freeGiftValue;
  }

  public void setFreeGiftValue(PriceAmount freeGiftValue) {
    this.freeGiftValue = freeGiftValue;
  }


  public Promotion genericRedemptionCode(String genericRedemptionCode) {
    this.genericRedemptionCode = genericRedemptionCode;
    return this;
  }

  /**
   * Generic redemption code for the promotion. To be used with the &#x60;offerType&#x60; field.
   * @return genericRedemptionCode
   */
  @javax.annotation.Nullable
  public String getGenericRedemptionCode() {
    return genericRedemptionCode;
  }

  public void setGenericRedemptionCode(String genericRedemptionCode) {
    this.genericRedemptionCode = genericRedemptionCode;
  }


  public Promotion getThisQuantityDiscounted(Integer getThisQuantityDiscounted) {
    this.getThisQuantityDiscounted = getThisQuantityDiscounted;
    return this;
  }

  /**
   * The number of items discounted in the promotion.
   * @return getThisQuantityDiscounted
   */
  @javax.annotation.Nullable
  public Integer getGetThisQuantityDiscounted() {
    return getThisQuantityDiscounted;
  }

  public void setGetThisQuantityDiscounted(Integer getThisQuantityDiscounted) {
    this.getThisQuantityDiscounted = getThisQuantityDiscounted;
  }


  /**
   * Output only. The REST promotion ID to uniquely identify the promotion. Content API methods that operate on promotions take this as their &#x60;promotionId&#x60; parameter. The REST ID for a promotion is of the form channel:contentLanguage:targetCountry:promotionId The &#x60;channel&#x60; field has a value of &#x60;\&quot;online\&quot;&#x60;, &#x60;\&quot;in_store\&quot;&#x60;, or &#x60;\&quot;online_in_store\&quot;&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public Promotion itemGroupId(List<String> itemGroupId) {
    this.itemGroupId = itemGroupId;
    return this;
  }

  public Promotion addItemGroupIdItem(String itemGroupIdItem) {
    if (this.itemGroupId == null) {
      this.itemGroupId = new ArrayList<>();
    }
    this.itemGroupId.add(itemGroupIdItem);
    return this;
  }

  /**
   * Product filter by item group ID for the promotion.
   * @return itemGroupId
   */
  @javax.annotation.Nullable
  public List<String> getItemGroupId() {
    return itemGroupId;
  }

  public void setItemGroupId(List<String> itemGroupId) {
    this.itemGroupId = itemGroupId;
  }


  public Promotion itemGroupIdExclusion(List<String> itemGroupIdExclusion) {
    this.itemGroupIdExclusion = itemGroupIdExclusion;
    return this;
  }

  public Promotion addItemGroupIdExclusionItem(String itemGroupIdExclusionItem) {
    if (this.itemGroupIdExclusion == null) {
      this.itemGroupIdExclusion = new ArrayList<>();
    }
    this.itemGroupIdExclusion.add(itemGroupIdExclusionItem);
    return this;
  }

  /**
   * Product filter by item group ID exclusion for the promotion.
   * @return itemGroupIdExclusion
   */
  @javax.annotation.Nullable
  public List<String> getItemGroupIdExclusion() {
    return itemGroupIdExclusion;
  }

  public void setItemGroupIdExclusion(List<String> itemGroupIdExclusion) {
    this.itemGroupIdExclusion = itemGroupIdExclusion;
  }


  public Promotion itemId(List<String> itemId) {
    this.itemId = itemId;
    return this;
  }

  public Promotion addItemIdItem(String itemIdItem) {
    if (this.itemId == null) {
      this.itemId = new ArrayList<>();
    }
    this.itemId.add(itemIdItem);
    return this;
  }

  /**
   * Product filter by item ID for the promotion.
   * @return itemId
   */
  @javax.annotation.Nullable
  public List<String> getItemId() {
    return itemId;
  }

  public void setItemId(List<String> itemId) {
    this.itemId = itemId;
  }


  public Promotion itemIdExclusion(List<String> itemIdExclusion) {
    this.itemIdExclusion = itemIdExclusion;
    return this;
  }

  public Promotion addItemIdExclusionItem(String itemIdExclusionItem) {
    if (this.itemIdExclusion == null) {
      this.itemIdExclusion = new ArrayList<>();
    }
    this.itemIdExclusion.add(itemIdExclusionItem);
    return this;
  }

  /**
   * Product filter by item ID exclusion for the promotion.
   * @return itemIdExclusion
   */
  @javax.annotation.Nullable
  public List<String> getItemIdExclusion() {
    return itemIdExclusion;
  }

  public void setItemIdExclusion(List<String> itemIdExclusion) {
    this.itemIdExclusion = itemIdExclusion;
  }


  public Promotion limitQuantity(Integer limitQuantity) {
    this.limitQuantity = limitQuantity;
    return this;
  }

  /**
   * Maximum purchase quantity for the promotion.
   * @return limitQuantity
   */
  @javax.annotation.Nullable
  public Integer getLimitQuantity() {
    return limitQuantity;
  }

  public void setLimitQuantity(Integer limitQuantity) {
    this.limitQuantity = limitQuantity;
  }


  public Promotion limitValue(PriceAmount limitValue) {
    this.limitValue = limitValue;
    return this;
  }

  /**
   * Get limitValue
   * @return limitValue
   */
  @javax.annotation.Nullable
  public PriceAmount getLimitValue() {
    return limitValue;
  }

  public void setLimitValue(PriceAmount limitValue) {
    this.limitValue = limitValue;
  }


  public Promotion longTitle(String longTitle) {
    this.longTitle = longTitle;
    return this;
  }

  /**
   * Required. Long title for the promotion.
   * @return longTitle
   */
  @javax.annotation.Nullable
  public String getLongTitle() {
    return longTitle;
  }

  public void setLongTitle(String longTitle) {
    this.longTitle = longTitle;
  }


  public Promotion minimumPurchaseAmount(PriceAmount minimumPurchaseAmount) {
    this.minimumPurchaseAmount = minimumPurchaseAmount;
    return this;
  }

  /**
   * Get minimumPurchaseAmount
   * @return minimumPurchaseAmount
   */
  @javax.annotation.Nullable
  public PriceAmount getMinimumPurchaseAmount() {
    return minimumPurchaseAmount;
  }

  public void setMinimumPurchaseAmount(PriceAmount minimumPurchaseAmount) {
    this.minimumPurchaseAmount = minimumPurchaseAmount;
  }


  public Promotion minimumPurchaseQuantity(Integer minimumPurchaseQuantity) {
    this.minimumPurchaseQuantity = minimumPurchaseQuantity;
    return this;
  }

  /**
   * Minimum purchase quantity for the promotion.
   * @return minimumPurchaseQuantity
   */
  @javax.annotation.Nullable
  public Integer getMinimumPurchaseQuantity() {
    return minimumPurchaseQuantity;
  }

  public void setMinimumPurchaseQuantity(Integer minimumPurchaseQuantity) {
    this.minimumPurchaseQuantity = minimumPurchaseQuantity;
  }


  public Promotion moneyBudget(PriceAmount moneyBudget) {
    this.moneyBudget = moneyBudget;
    return this;
  }

  /**
   * Get moneyBudget
   * @return moneyBudget
   */
  @javax.annotation.Nullable
  public PriceAmount getMoneyBudget() {
    return moneyBudget;
  }

  public void setMoneyBudget(PriceAmount moneyBudget) {
    this.moneyBudget = moneyBudget;
  }


  public Promotion moneyOffAmount(PriceAmount moneyOffAmount) {
    this.moneyOffAmount = moneyOffAmount;
    return this;
  }

  /**
   * Get moneyOffAmount
   * @return moneyOffAmount
   */
  @javax.annotation.Nullable
  public PriceAmount getMoneyOffAmount() {
    return moneyOffAmount;
  }

  public void setMoneyOffAmount(PriceAmount moneyOffAmount) {
    this.moneyOffAmount = moneyOffAmount;
  }


  public Promotion offerType(OfferTypeEnum offerType) {
    this.offerType = offerType;
    return this;
  }

  /**
   * Required. Type of the promotion.
   * @return offerType
   */
  @javax.annotation.Nullable
  public OfferTypeEnum getOfferType() {
    return offerType;
  }

  public void setOfferType(OfferTypeEnum offerType) {
    this.offerType = offerType;
  }


  public Promotion orderLimit(Integer orderLimit) {
    this.orderLimit = orderLimit;
    return this;
  }

  /**
   * Order limit for the promotion.
   * @return orderLimit
   */
  @javax.annotation.Nullable
  public Integer getOrderLimit() {
    return orderLimit;
  }

  public void setOrderLimit(Integer orderLimit) {
    this.orderLimit = orderLimit;
  }


  public Promotion percentOff(Integer percentOff) {
    this.percentOff = percentOff;
    return this;
  }

  /**
   * The percentage discount offered in the promotion.
   * @return percentOff
   */
  @javax.annotation.Nullable
  public Integer getPercentOff() {
    return percentOff;
  }

  public void setPercentOff(Integer percentOff) {
    this.percentOff = percentOff;
  }


  public Promotion productApplicability(ProductApplicabilityEnum productApplicability) {
    this.productApplicability = productApplicability;
    return this;
  }

  /**
   * Required. Applicability of the promotion to either all products or only specific products.
   * @return productApplicability
   */
  @javax.annotation.Nullable
  public ProductApplicabilityEnum getProductApplicability() {
    return productApplicability;
  }

  public void setProductApplicability(ProductApplicabilityEnum productApplicability) {
    this.productApplicability = productApplicability;
  }


  public Promotion productType(List<String> productType) {
    this.productType = productType;
    return this;
  }

  public Promotion addProductTypeItem(String productTypeItem) {
    if (this.productType == null) {
      this.productType = new ArrayList<>();
    }
    this.productType.add(productTypeItem);
    return this;
  }

  /**
   * Product filter by product type for the promotion.
   * @return productType
   */
  @javax.annotation.Nullable
  public List<String> getProductType() {
    return productType;
  }

  public void setProductType(List<String> productType) {
    this.productType = productType;
  }


  public Promotion productTypeExclusion(List<String> productTypeExclusion) {
    this.productTypeExclusion = productTypeExclusion;
    return this;
  }

  public Promotion addProductTypeExclusionItem(String productTypeExclusionItem) {
    if (this.productTypeExclusion == null) {
      this.productTypeExclusion = new ArrayList<>();
    }
    this.productTypeExclusion.add(productTypeExclusionItem);
    return this;
  }

  /**
   * Product filter by product type exclusion for the promotion.
   * @return productTypeExclusion
   */
  @javax.annotation.Nullable
  public List<String> getProductTypeExclusion() {
    return productTypeExclusion;
  }

  public void setProductTypeExclusion(List<String> productTypeExclusion) {
    this.productTypeExclusion = productTypeExclusion;
  }


  public Promotion promotionDestinationIds(List<String> promotionDestinationIds) {
    this.promotionDestinationIds = promotionDestinationIds;
    return this;
  }

  public Promotion addPromotionDestinationIdsItem(String promotionDestinationIdsItem) {
    if (this.promotionDestinationIds == null) {
      this.promotionDestinationIds = new ArrayList<>();
    }
    this.promotionDestinationIds.add(promotionDestinationIdsItem);
    return this;
  }

  /**
   * Destination ID for the promotion.
   * @return promotionDestinationIds
   */
  @javax.annotation.Nullable
  public List<String> getPromotionDestinationIds() {
    return promotionDestinationIds;
  }

  public void setPromotionDestinationIds(List<String> promotionDestinationIds) {
    this.promotionDestinationIds = promotionDestinationIds;
  }


  @Deprecated
  public Promotion promotionDisplayDates(String promotionDisplayDates) {
    this.promotionDisplayDates = promotionDisplayDates;
    return this;
  }

  /**
   * String representation of the promotion display dates. Deprecated. Use &#x60;promotion_display_time_period&#x60; instead.
   * @return promotionDisplayDates
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getPromotionDisplayDates() {
    return promotionDisplayDates;
  }

  @Deprecated
  public void setPromotionDisplayDates(String promotionDisplayDates) {
    this.promotionDisplayDates = promotionDisplayDates;
  }


  public Promotion promotionDisplayTimePeriod(TimePeriod promotionDisplayTimePeriod) {
    this.promotionDisplayTimePeriod = promotionDisplayTimePeriod;
    return this;
  }

  /**
   * Get promotionDisplayTimePeriod
   * @return promotionDisplayTimePeriod
   */
  @javax.annotation.Nullable
  public TimePeriod getPromotionDisplayTimePeriod() {
    return promotionDisplayTimePeriod;
  }

  public void setPromotionDisplayTimePeriod(TimePeriod promotionDisplayTimePeriod) {
    this.promotionDisplayTimePeriod = promotionDisplayTimePeriod;
  }


  @Deprecated
  public Promotion promotionEffectiveDates(String promotionEffectiveDates) {
    this.promotionEffectiveDates = promotionEffectiveDates;
    return this;
  }

  /**
   * String representation of the promotion effective dates. Deprecated. Use &#x60;promotion_effective_time_period&#x60; instead.
   * @return promotionEffectiveDates
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getPromotionEffectiveDates() {
    return promotionEffectiveDates;
  }

  @Deprecated
  public void setPromotionEffectiveDates(String promotionEffectiveDates) {
    this.promotionEffectiveDates = promotionEffectiveDates;
  }


  public Promotion promotionEffectiveTimePeriod(TimePeriod promotionEffectiveTimePeriod) {
    this.promotionEffectiveTimePeriod = promotionEffectiveTimePeriod;
    return this;
  }

  /**
   * Get promotionEffectiveTimePeriod
   * @return promotionEffectiveTimePeriod
   */
  @javax.annotation.Nullable
  public TimePeriod getPromotionEffectiveTimePeriod() {
    return promotionEffectiveTimePeriod;
  }

  public void setPromotionEffectiveTimePeriod(TimePeriod promotionEffectiveTimePeriod) {
    this.promotionEffectiveTimePeriod = promotionEffectiveTimePeriod;
  }


  public Promotion promotionId(String promotionId) {
    this.promotionId = promotionId;
    return this;
  }

  /**
   * Required. The user provided promotion ID to uniquely identify the promotion.
   * @return promotionId
   */
  @javax.annotation.Nullable
  public String getPromotionId() {
    return promotionId;
  }

  public void setPromotionId(String promotionId) {
    this.promotionId = promotionId;
  }


  public Promotion promotionStatus(PromotionPromotionStatus promotionStatus) {
    this.promotionStatus = promotionStatus;
    return this;
  }

  /**
   * Get promotionStatus
   * @return promotionStatus
   */
  @javax.annotation.Nullable
  public PromotionPromotionStatus getPromotionStatus() {
    return promotionStatus;
  }

  public void setPromotionStatus(PromotionPromotionStatus promotionStatus) {
    this.promotionStatus = promotionStatus;
  }


  public Promotion promotionUrl(String promotionUrl) {
    this.promotionUrl = promotionUrl;
    return this;
  }

  /**
   * URL to the page on the merchant&#39;s site where the promotion shows. Local Inventory ads promotions throw an error if no promo url is included. URL is used to confirm that the promotion is valid and can be redeemed.
   * @return promotionUrl
   */
  @javax.annotation.Nullable
  public String getPromotionUrl() {
    return promotionUrl;
  }

  public void setPromotionUrl(String promotionUrl) {
    this.promotionUrl = promotionUrl;
  }


  public Promotion redemptionChannel(List<RedemptionChannelEnum> redemptionChannel) {
    this.redemptionChannel = redemptionChannel;
    return this;
  }

  public Promotion addRedemptionChannelItem(RedemptionChannelEnum redemptionChannelItem) {
    if (this.redemptionChannel == null) {
      this.redemptionChannel = new ArrayList<>();
    }
    this.redemptionChannel.add(redemptionChannelItem);
    return this;
  }

  /**
   * Required. Redemption channel for the promotion. At least one channel is required.
   * @return redemptionChannel
   */
  @javax.annotation.Nullable
  public List<RedemptionChannelEnum> getRedemptionChannel() {
    return redemptionChannel;
  }

  public void setRedemptionChannel(List<RedemptionChannelEnum> redemptionChannel) {
    this.redemptionChannel = redemptionChannel;
  }


  public Promotion shippingServiceNames(List<String> shippingServiceNames) {
    this.shippingServiceNames = shippingServiceNames;
    return this;
  }

  public Promotion addShippingServiceNamesItem(String shippingServiceNamesItem) {
    if (this.shippingServiceNames == null) {
      this.shippingServiceNames = new ArrayList<>();
    }
    this.shippingServiceNames.add(shippingServiceNamesItem);
    return this;
  }

  /**
   * Shipping service names for the promotion.
   * @return shippingServiceNames
   */
  @javax.annotation.Nullable
  public List<String> getShippingServiceNames() {
    return shippingServiceNames;
  }

  public void setShippingServiceNames(List<String> shippingServiceNames) {
    this.shippingServiceNames = shippingServiceNames;
  }


  public Promotion storeApplicability(StoreApplicabilityEnum storeApplicability) {
    this.storeApplicability = storeApplicability;
    return this;
  }

  /**
   * Whether the promotion applies to all stores, or only specified stores. Local Inventory ads promotions throw an error if no store applicability is included. An INVALID_ARGUMENT error is thrown if store_applicability is set to ALL_STORES and store_code or score_code_exclusion is set to a value.
   * @return storeApplicability
   */
  @javax.annotation.Nullable
  public StoreApplicabilityEnum getStoreApplicability() {
    return storeApplicability;
  }

  public void setStoreApplicability(StoreApplicabilityEnum storeApplicability) {
    this.storeApplicability = storeApplicability;
  }


  public Promotion storeCode(List<String> storeCode) {
    this.storeCode = storeCode;
    return this;
  }

  public Promotion addStoreCodeItem(String storeCodeItem) {
    if (this.storeCode == null) {
      this.storeCode = new ArrayList<>();
    }
    this.storeCode.add(storeCodeItem);
    return this;
  }

  /**
   * Store codes to include for the promotion.
   * @return storeCode
   */
  @javax.annotation.Nullable
  public List<String> getStoreCode() {
    return storeCode;
  }

  public void setStoreCode(List<String> storeCode) {
    this.storeCode = storeCode;
  }


  public Promotion storeCodeExclusion(List<String> storeCodeExclusion) {
    this.storeCodeExclusion = storeCodeExclusion;
    return this;
  }

  public Promotion addStoreCodeExclusionItem(String storeCodeExclusionItem) {
    if (this.storeCodeExclusion == null) {
      this.storeCodeExclusion = new ArrayList<>();
    }
    this.storeCodeExclusion.add(storeCodeExclusionItem);
    return this;
  }

  /**
   * Store codes to exclude for the promotion.
   * @return storeCodeExclusion
   */
  @javax.annotation.Nullable
  public List<String> getStoreCodeExclusion() {
    return storeCodeExclusion;
  }

  public void setStoreCodeExclusion(List<String> storeCodeExclusion) {
    this.storeCodeExclusion = storeCodeExclusion;
  }


  public Promotion targetCountry(String targetCountry) {
    this.targetCountry = targetCountry;
    return this;
  }

  /**
   * Required. The target country used as part of the unique identifier. Can be &#x60;AU&#x60;, &#x60;CA&#x60;, &#x60;DE&#x60;, &#x60;FR&#x60;, &#x60;GB&#x60;, &#x60;IN&#x60;, &#x60;US&#x60;, &#x60;BR&#x60;, &#x60;ES&#x60;, &#x60;NL&#x60;, &#x60;JP&#x60;, &#x60;IT&#x60; or &#x60;KR&#x60;.
   * @return targetCountry
   */
  @javax.annotation.Nullable
  public String getTargetCountry() {
    return targetCountry;
  }

  public void setTargetCountry(String targetCountry) {
    this.targetCountry = targetCountry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Promotion promotion = (Promotion) o;
    return Objects.equals(this.brand, promotion.brand) &&
        Objects.equals(this.brandExclusion, promotion.brandExclusion) &&
        Objects.equals(this.contentLanguage, promotion.contentLanguage) &&
        Objects.equals(this.couponValueType, promotion.couponValueType) &&
        Objects.equals(this.freeGiftDescription, promotion.freeGiftDescription) &&
        Objects.equals(this.freeGiftItemId, promotion.freeGiftItemId) &&
        Objects.equals(this.freeGiftValue, promotion.freeGiftValue) &&
        Objects.equals(this.genericRedemptionCode, promotion.genericRedemptionCode) &&
        Objects.equals(this.getThisQuantityDiscounted, promotion.getThisQuantityDiscounted) &&
        Objects.equals(this.id, promotion.id) &&
        Objects.equals(this.itemGroupId, promotion.itemGroupId) &&
        Objects.equals(this.itemGroupIdExclusion, promotion.itemGroupIdExclusion) &&
        Objects.equals(this.itemId, promotion.itemId) &&
        Objects.equals(this.itemIdExclusion, promotion.itemIdExclusion) &&
        Objects.equals(this.limitQuantity, promotion.limitQuantity) &&
        Objects.equals(this.limitValue, promotion.limitValue) &&
        Objects.equals(this.longTitle, promotion.longTitle) &&
        Objects.equals(this.minimumPurchaseAmount, promotion.minimumPurchaseAmount) &&
        Objects.equals(this.minimumPurchaseQuantity, promotion.minimumPurchaseQuantity) &&
        Objects.equals(this.moneyBudget, promotion.moneyBudget) &&
        Objects.equals(this.moneyOffAmount, promotion.moneyOffAmount) &&
        Objects.equals(this.offerType, promotion.offerType) &&
        Objects.equals(this.orderLimit, promotion.orderLimit) &&
        Objects.equals(this.percentOff, promotion.percentOff) &&
        Objects.equals(this.productApplicability, promotion.productApplicability) &&
        Objects.equals(this.productType, promotion.productType) &&
        Objects.equals(this.productTypeExclusion, promotion.productTypeExclusion) &&
        Objects.equals(this.promotionDestinationIds, promotion.promotionDestinationIds) &&
        Objects.equals(this.promotionDisplayDates, promotion.promotionDisplayDates) &&
        Objects.equals(this.promotionDisplayTimePeriod, promotion.promotionDisplayTimePeriod) &&
        Objects.equals(this.promotionEffectiveDates, promotion.promotionEffectiveDates) &&
        Objects.equals(this.promotionEffectiveTimePeriod, promotion.promotionEffectiveTimePeriod) &&
        Objects.equals(this.promotionId, promotion.promotionId) &&
        Objects.equals(this.promotionStatus, promotion.promotionStatus) &&
        Objects.equals(this.promotionUrl, promotion.promotionUrl) &&
        Objects.equals(this.redemptionChannel, promotion.redemptionChannel) &&
        Objects.equals(this.shippingServiceNames, promotion.shippingServiceNames) &&
        Objects.equals(this.storeApplicability, promotion.storeApplicability) &&
        Objects.equals(this.storeCode, promotion.storeCode) &&
        Objects.equals(this.storeCodeExclusion, promotion.storeCodeExclusion) &&
        Objects.equals(this.targetCountry, promotion.targetCountry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, brandExclusion, contentLanguage, couponValueType, freeGiftDescription, freeGiftItemId, freeGiftValue, genericRedemptionCode, getThisQuantityDiscounted, id, itemGroupId, itemGroupIdExclusion, itemId, itemIdExclusion, limitQuantity, limitValue, longTitle, minimumPurchaseAmount, minimumPurchaseQuantity, moneyBudget, moneyOffAmount, offerType, orderLimit, percentOff, productApplicability, productType, productTypeExclusion, promotionDestinationIds, promotionDisplayDates, promotionDisplayTimePeriod, promotionEffectiveDates, promotionEffectiveTimePeriod, promotionId, promotionStatus, promotionUrl, redemptionChannel, shippingServiceNames, storeApplicability, storeCode, storeCodeExclusion, targetCountry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Promotion {\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    brandExclusion: ").append(toIndentedString(brandExclusion)).append("\n");
    sb.append("    contentLanguage: ").append(toIndentedString(contentLanguage)).append("\n");
    sb.append("    couponValueType: ").append(toIndentedString(couponValueType)).append("\n");
    sb.append("    freeGiftDescription: ").append(toIndentedString(freeGiftDescription)).append("\n");
    sb.append("    freeGiftItemId: ").append(toIndentedString(freeGiftItemId)).append("\n");
    sb.append("    freeGiftValue: ").append(toIndentedString(freeGiftValue)).append("\n");
    sb.append("    genericRedemptionCode: ").append(toIndentedString(genericRedemptionCode)).append("\n");
    sb.append("    getThisQuantityDiscounted: ").append(toIndentedString(getThisQuantityDiscounted)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    itemGroupId: ").append(toIndentedString(itemGroupId)).append("\n");
    sb.append("    itemGroupIdExclusion: ").append(toIndentedString(itemGroupIdExclusion)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemIdExclusion: ").append(toIndentedString(itemIdExclusion)).append("\n");
    sb.append("    limitQuantity: ").append(toIndentedString(limitQuantity)).append("\n");
    sb.append("    limitValue: ").append(toIndentedString(limitValue)).append("\n");
    sb.append("    longTitle: ").append(toIndentedString(longTitle)).append("\n");
    sb.append("    minimumPurchaseAmount: ").append(toIndentedString(minimumPurchaseAmount)).append("\n");
    sb.append("    minimumPurchaseQuantity: ").append(toIndentedString(minimumPurchaseQuantity)).append("\n");
    sb.append("    moneyBudget: ").append(toIndentedString(moneyBudget)).append("\n");
    sb.append("    moneyOffAmount: ").append(toIndentedString(moneyOffAmount)).append("\n");
    sb.append("    offerType: ").append(toIndentedString(offerType)).append("\n");
    sb.append("    orderLimit: ").append(toIndentedString(orderLimit)).append("\n");
    sb.append("    percentOff: ").append(toIndentedString(percentOff)).append("\n");
    sb.append("    productApplicability: ").append(toIndentedString(productApplicability)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    productTypeExclusion: ").append(toIndentedString(productTypeExclusion)).append("\n");
    sb.append("    promotionDestinationIds: ").append(toIndentedString(promotionDestinationIds)).append("\n");
    sb.append("    promotionDisplayDates: ").append(toIndentedString(promotionDisplayDates)).append("\n");
    sb.append("    promotionDisplayTimePeriod: ").append(toIndentedString(promotionDisplayTimePeriod)).append("\n");
    sb.append("    promotionEffectiveDates: ").append(toIndentedString(promotionEffectiveDates)).append("\n");
    sb.append("    promotionEffectiveTimePeriod: ").append(toIndentedString(promotionEffectiveTimePeriod)).append("\n");
    sb.append("    promotionId: ").append(toIndentedString(promotionId)).append("\n");
    sb.append("    promotionStatus: ").append(toIndentedString(promotionStatus)).append("\n");
    sb.append("    promotionUrl: ").append(toIndentedString(promotionUrl)).append("\n");
    sb.append("    redemptionChannel: ").append(toIndentedString(redemptionChannel)).append("\n");
    sb.append("    shippingServiceNames: ").append(toIndentedString(shippingServiceNames)).append("\n");
    sb.append("    storeApplicability: ").append(toIndentedString(storeApplicability)).append("\n");
    sb.append("    storeCode: ").append(toIndentedString(storeCode)).append("\n");
    sb.append("    storeCodeExclusion: ").append(toIndentedString(storeCodeExclusion)).append("\n");
    sb.append("    targetCountry: ").append(toIndentedString(targetCountry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand");
    openapiFields.add("brandExclusion");
    openapiFields.add("contentLanguage");
    openapiFields.add("couponValueType");
    openapiFields.add("freeGiftDescription");
    openapiFields.add("freeGiftItemId");
    openapiFields.add("freeGiftValue");
    openapiFields.add("genericRedemptionCode");
    openapiFields.add("getThisQuantityDiscounted");
    openapiFields.add("id");
    openapiFields.add("itemGroupId");
    openapiFields.add("itemGroupIdExclusion");
    openapiFields.add("itemId");
    openapiFields.add("itemIdExclusion");
    openapiFields.add("limitQuantity");
    openapiFields.add("limitValue");
    openapiFields.add("longTitle");
    openapiFields.add("minimumPurchaseAmount");
    openapiFields.add("minimumPurchaseQuantity");
    openapiFields.add("moneyBudget");
    openapiFields.add("moneyOffAmount");
    openapiFields.add("offerType");
    openapiFields.add("orderLimit");
    openapiFields.add("percentOff");
    openapiFields.add("productApplicability");
    openapiFields.add("productType");
    openapiFields.add("productTypeExclusion");
    openapiFields.add("promotionDestinationIds");
    openapiFields.add("promotionDisplayDates");
    openapiFields.add("promotionDisplayTimePeriod");
    openapiFields.add("promotionEffectiveDates");
    openapiFields.add("promotionEffectiveTimePeriod");
    openapiFields.add("promotionId");
    openapiFields.add("promotionStatus");
    openapiFields.add("promotionUrl");
    openapiFields.add("redemptionChannel");
    openapiFields.add("shippingServiceNames");
    openapiFields.add("storeApplicability");
    openapiFields.add("storeCode");
    openapiFields.add("storeCodeExclusion");
    openapiFields.add("targetCountry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Promotion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Promotion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Promotion is not found in the empty JSON string", Promotion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Promotion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Promotion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull() && !jsonObj.get("brand").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be an array in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("brandExclusion") != null && !jsonObj.get("brandExclusion").isJsonNull() && !jsonObj.get("brandExclusion").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandExclusion` to be an array in the JSON string but got `%s`", jsonObj.get("brandExclusion").toString()));
      }
      if ((jsonObj.get("contentLanguage") != null && !jsonObj.get("contentLanguage").isJsonNull()) && !jsonObj.get("contentLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentLanguage").toString()));
      }
      if ((jsonObj.get("couponValueType") != null && !jsonObj.get("couponValueType").isJsonNull()) && !jsonObj.get("couponValueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `couponValueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("couponValueType").toString()));
      }
      // validate the optional field `couponValueType`
      if (jsonObj.get("couponValueType") != null && !jsonObj.get("couponValueType").isJsonNull()) {
        CouponValueTypeEnum.validateJsonElement(jsonObj.get("couponValueType"));
      }
      if ((jsonObj.get("freeGiftDescription") != null && !jsonObj.get("freeGiftDescription").isJsonNull()) && !jsonObj.get("freeGiftDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeGiftDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeGiftDescription").toString()));
      }
      if ((jsonObj.get("freeGiftItemId") != null && !jsonObj.get("freeGiftItemId").isJsonNull()) && !jsonObj.get("freeGiftItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeGiftItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeGiftItemId").toString()));
      }
      // validate the optional field `freeGiftValue`
      if (jsonObj.get("freeGiftValue") != null && !jsonObj.get("freeGiftValue").isJsonNull()) {
        PriceAmount.validateJsonElement(jsonObj.get("freeGiftValue"));
      }
      if ((jsonObj.get("genericRedemptionCode") != null && !jsonObj.get("genericRedemptionCode").isJsonNull()) && !jsonObj.get("genericRedemptionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genericRedemptionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genericRedemptionCode").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("itemGroupId") != null && !jsonObj.get("itemGroupId").isJsonNull() && !jsonObj.get("itemGroupId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupId` to be an array in the JSON string but got `%s`", jsonObj.get("itemGroupId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("itemGroupIdExclusion") != null && !jsonObj.get("itemGroupIdExclusion").isJsonNull() && !jsonObj.get("itemGroupIdExclusion").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupIdExclusion` to be an array in the JSON string but got `%s`", jsonObj.get("itemGroupIdExclusion").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull() && !jsonObj.get("itemId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be an array in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("itemIdExclusion") != null && !jsonObj.get("itemIdExclusion").isJsonNull() && !jsonObj.get("itemIdExclusion").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemIdExclusion` to be an array in the JSON string but got `%s`", jsonObj.get("itemIdExclusion").toString()));
      }
      // validate the optional field `limitValue`
      if (jsonObj.get("limitValue") != null && !jsonObj.get("limitValue").isJsonNull()) {
        PriceAmount.validateJsonElement(jsonObj.get("limitValue"));
      }
      if ((jsonObj.get("longTitle") != null && !jsonObj.get("longTitle").isJsonNull()) && !jsonObj.get("longTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longTitle").toString()));
      }
      // validate the optional field `minimumPurchaseAmount`
      if (jsonObj.get("minimumPurchaseAmount") != null && !jsonObj.get("minimumPurchaseAmount").isJsonNull()) {
        PriceAmount.validateJsonElement(jsonObj.get("minimumPurchaseAmount"));
      }
      // validate the optional field `moneyBudget`
      if (jsonObj.get("moneyBudget") != null && !jsonObj.get("moneyBudget").isJsonNull()) {
        PriceAmount.validateJsonElement(jsonObj.get("moneyBudget"));
      }
      // validate the optional field `moneyOffAmount`
      if (jsonObj.get("moneyOffAmount") != null && !jsonObj.get("moneyOffAmount").isJsonNull()) {
        PriceAmount.validateJsonElement(jsonObj.get("moneyOffAmount"));
      }
      if ((jsonObj.get("offerType") != null && !jsonObj.get("offerType").isJsonNull()) && !jsonObj.get("offerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerType").toString()));
      }
      // validate the optional field `offerType`
      if (jsonObj.get("offerType") != null && !jsonObj.get("offerType").isJsonNull()) {
        OfferTypeEnum.validateJsonElement(jsonObj.get("offerType"));
      }
      if ((jsonObj.get("productApplicability") != null && !jsonObj.get("productApplicability").isJsonNull()) && !jsonObj.get("productApplicability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productApplicability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productApplicability").toString()));
      }
      // validate the optional field `productApplicability`
      if (jsonObj.get("productApplicability") != null && !jsonObj.get("productApplicability").isJsonNull()) {
        ProductApplicabilityEnum.validateJsonElement(jsonObj.get("productApplicability"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull() && !jsonObj.get("productType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `productType` to be an array in the JSON string but got `%s`", jsonObj.get("productType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("productTypeExclusion") != null && !jsonObj.get("productTypeExclusion").isJsonNull() && !jsonObj.get("productTypeExclusion").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTypeExclusion` to be an array in the JSON string but got `%s`", jsonObj.get("productTypeExclusion").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("promotionDestinationIds") != null && !jsonObj.get("promotionDestinationIds").isJsonNull() && !jsonObj.get("promotionDestinationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionDestinationIds` to be an array in the JSON string but got `%s`", jsonObj.get("promotionDestinationIds").toString()));
      }
      if ((jsonObj.get("promotionDisplayDates") != null && !jsonObj.get("promotionDisplayDates").isJsonNull()) && !jsonObj.get("promotionDisplayDates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionDisplayDates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionDisplayDates").toString()));
      }
      // validate the optional field `promotionDisplayTimePeriod`
      if (jsonObj.get("promotionDisplayTimePeriod") != null && !jsonObj.get("promotionDisplayTimePeriod").isJsonNull()) {
        TimePeriod.validateJsonElement(jsonObj.get("promotionDisplayTimePeriod"));
      }
      if ((jsonObj.get("promotionEffectiveDates") != null && !jsonObj.get("promotionEffectiveDates").isJsonNull()) && !jsonObj.get("promotionEffectiveDates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionEffectiveDates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionEffectiveDates").toString()));
      }
      // validate the optional field `promotionEffectiveTimePeriod`
      if (jsonObj.get("promotionEffectiveTimePeriod") != null && !jsonObj.get("promotionEffectiveTimePeriod").isJsonNull()) {
        TimePeriod.validateJsonElement(jsonObj.get("promotionEffectiveTimePeriod"));
      }
      if ((jsonObj.get("promotionId") != null && !jsonObj.get("promotionId").isJsonNull()) && !jsonObj.get("promotionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionId").toString()));
      }
      // validate the optional field `promotionStatus`
      if (jsonObj.get("promotionStatus") != null && !jsonObj.get("promotionStatus").isJsonNull()) {
        PromotionPromotionStatus.validateJsonElement(jsonObj.get("promotionStatus"));
      }
      if ((jsonObj.get("promotionUrl") != null && !jsonObj.get("promotionUrl").isJsonNull()) && !jsonObj.get("promotionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redemptionChannel") != null && !jsonObj.get("redemptionChannel").isJsonNull() && !jsonObj.get("redemptionChannel").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemptionChannel` to be an array in the JSON string but got `%s`", jsonObj.get("redemptionChannel").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("shippingServiceNames") != null && !jsonObj.get("shippingServiceNames").isJsonNull() && !jsonObj.get("shippingServiceNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingServiceNames` to be an array in the JSON string but got `%s`", jsonObj.get("shippingServiceNames").toString()));
      }
      if ((jsonObj.get("storeApplicability") != null && !jsonObj.get("storeApplicability").isJsonNull()) && !jsonObj.get("storeApplicability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeApplicability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeApplicability").toString()));
      }
      // validate the optional field `storeApplicability`
      if (jsonObj.get("storeApplicability") != null && !jsonObj.get("storeApplicability").isJsonNull()) {
        StoreApplicabilityEnum.validateJsonElement(jsonObj.get("storeApplicability"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("storeCode") != null && !jsonObj.get("storeCode").isJsonNull() && !jsonObj.get("storeCode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeCode` to be an array in the JSON string but got `%s`", jsonObj.get("storeCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("storeCodeExclusion") != null && !jsonObj.get("storeCodeExclusion").isJsonNull() && !jsonObj.get("storeCodeExclusion").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeCodeExclusion` to be an array in the JSON string but got `%s`", jsonObj.get("storeCodeExclusion").toString()));
      }
      if ((jsonObj.get("targetCountry") != null && !jsonObj.get("targetCountry").isJsonNull()) && !jsonObj.get("targetCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetCountry").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Promotion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Promotion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Promotion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Promotion.class));

       return (TypeAdapter<T>) new TypeAdapter<Promotion>() {
           @Override
           public void write(JsonWriter out, Promotion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Promotion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Promotion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Promotion
   * @throws IOException if the JSON string is invalid with respect to Promotion
   */
  public static Promotion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Promotion.class);
  }

  /**
   * Convert an instance of Promotion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

