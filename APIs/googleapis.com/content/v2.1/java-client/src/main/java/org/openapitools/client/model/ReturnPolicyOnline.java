/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReturnPolicyOnlinePolicy;
import org.openapitools.client.model.ReturnPolicyOnlineRestockingFee;
import org.openapitools.client.model.ReturnPolicyOnlineReturnReasonCategoryInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Return policy online object. This is currently used to represent return policies for ads and free listings programs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReturnPolicyOnline {
  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<String> countries = new ArrayList<>();

  /**
   * Gets or Sets itemConditions
   */
  @JsonAdapter(ItemConditionsEnum.Adapter.class)
  public enum ItemConditionsEnum {
    ITEM_CONDITION_UNSPECIFIED("ITEM_CONDITION_UNSPECIFIED"),
    
    NEW("NEW"),
    
    USED("USED");

    private String value;

    ItemConditionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemConditionsEnum fromValue(String value) {
      for (ItemConditionsEnum b : ItemConditionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ItemConditionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemConditionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemConditionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ItemConditionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ItemConditionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ITEM_CONDITIONS = "itemConditions";
  @SerializedName(SERIALIZED_NAME_ITEM_CONDITIONS)
  private List<ItemConditionsEnum> itemConditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private ReturnPolicyOnlinePolicy policy;

  public static final String SERIALIZED_NAME_RESTOCKING_FEE = "restockingFee";
  @SerializedName(SERIALIZED_NAME_RESTOCKING_FEE)
  private ReturnPolicyOnlineRestockingFee restockingFee;

  /**
   * Gets or Sets returnMethods
   */
  @JsonAdapter(ReturnMethodsEnum.Adapter.class)
  public enum ReturnMethodsEnum {
    RETURN_METHOD_UNSPECIFIED("RETURN_METHOD_UNSPECIFIED"),
    
    BY_MAIL("BY_MAIL"),
    
    IN_STORE("IN_STORE"),
    
    AT_A_KIOSK("AT_A_KIOSK");

    private String value;

    ReturnMethodsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReturnMethodsEnum fromValue(String value) {
      for (ReturnMethodsEnum b : ReturnMethodsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReturnMethodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReturnMethodsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReturnMethodsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReturnMethodsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReturnMethodsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RETURN_METHODS = "returnMethods";
  @SerializedName(SERIALIZED_NAME_RETURN_METHODS)
  private List<ReturnMethodsEnum> returnMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_POLICY_ID = "returnPolicyId";
  @SerializedName(SERIALIZED_NAME_RETURN_POLICY_ID)
  private String returnPolicyId;

  public static final String SERIALIZED_NAME_RETURN_POLICY_URI = "returnPolicyUri";
  @SerializedName(SERIALIZED_NAME_RETURN_POLICY_URI)
  private String returnPolicyUri;

  public static final String SERIALIZED_NAME_RETURN_REASON_CATEGORY_INFO = "returnReasonCategoryInfo";
  @SerializedName(SERIALIZED_NAME_RETURN_REASON_CATEGORY_INFO)
  private List<ReturnPolicyOnlineReturnReasonCategoryInfo> returnReasonCategoryInfo = new ArrayList<>();

  public ReturnPolicyOnline() {
  }

  public ReturnPolicyOnline(
     String returnPolicyId
  ) {
    this();
    this.returnPolicyId = returnPolicyId;
  }

  public ReturnPolicyOnline countries(List<String> countries) {
    this.countries = countries;
    return this;
  }

  public ReturnPolicyOnline addCountriesItem(String countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

  /**
   * The countries of sale where the return policy is applicable. The values must be a valid 2 letter ISO 3166 code, e.g. \&quot;US\&quot;.
   * @return countries
   */
  @javax.annotation.Nullable
  public List<String> getCountries() {
    return countries;
  }

  public void setCountries(List<String> countries) {
    this.countries = countries;
  }


  public ReturnPolicyOnline itemConditions(List<ItemConditionsEnum> itemConditions) {
    this.itemConditions = itemConditions;
    return this;
  }

  public ReturnPolicyOnline addItemConditionsItem(ItemConditionsEnum itemConditionsItem) {
    if (this.itemConditions == null) {
      this.itemConditions = new ArrayList<>();
    }
    this.itemConditions.add(itemConditionsItem);
    return this;
  }

  /**
   * The item conditions that are accepted for returns. This is required to not be empty unless the type of return policy is noReturns.
   * @return itemConditions
   */
  @javax.annotation.Nullable
  public List<ItemConditionsEnum> getItemConditions() {
    return itemConditions;
  }

  public void setItemConditions(List<ItemConditionsEnum> itemConditions) {
    this.itemConditions = itemConditions;
  }


  public ReturnPolicyOnline label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The unique user-defined label of the return policy. The same label cannot be used in different return policies for the same country. Policies with the label &#39;default&#39; will apply to all products, unless a product specifies a return_policy_label attribute.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public ReturnPolicyOnline name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the policy as shown in Merchant Center.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReturnPolicyOnline policy(ReturnPolicyOnlinePolicy policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nullable
  public ReturnPolicyOnlinePolicy getPolicy() {
    return policy;
  }

  public void setPolicy(ReturnPolicyOnlinePolicy policy) {
    this.policy = policy;
  }


  public ReturnPolicyOnline restockingFee(ReturnPolicyOnlineRestockingFee restockingFee) {
    this.restockingFee = restockingFee;
    return this;
  }

  /**
   * Get restockingFee
   * @return restockingFee
   */
  @javax.annotation.Nullable
  public ReturnPolicyOnlineRestockingFee getRestockingFee() {
    return restockingFee;
  }

  public void setRestockingFee(ReturnPolicyOnlineRestockingFee restockingFee) {
    this.restockingFee = restockingFee;
  }


  public ReturnPolicyOnline returnMethods(List<ReturnMethodsEnum> returnMethods) {
    this.returnMethods = returnMethods;
    return this;
  }

  public ReturnPolicyOnline addReturnMethodsItem(ReturnMethodsEnum returnMethodsItem) {
    if (this.returnMethods == null) {
      this.returnMethods = new ArrayList<>();
    }
    this.returnMethods.add(returnMethodsItem);
    return this;
  }

  /**
   * The return methods of how customers can return an item. This value is required to not be empty unless the type of return policy is noReturns.
   * @return returnMethods
   */
  @javax.annotation.Nullable
  public List<ReturnMethodsEnum> getReturnMethods() {
    return returnMethods;
  }

  public void setReturnMethods(List<ReturnMethodsEnum> returnMethods) {
    this.returnMethods = returnMethods;
  }


  /**
   * Output only. Return policy ID generated by Google.
   * @return returnPolicyId
   */
  @javax.annotation.Nullable
  public String getReturnPolicyId() {
    return returnPolicyId;
  }



  public ReturnPolicyOnline returnPolicyUri(String returnPolicyUri) {
    this.returnPolicyUri = returnPolicyUri;
    return this;
  }

  /**
   * The return policy uri. This can used by Google to do a sanity check for the policy.
   * @return returnPolicyUri
   */
  @javax.annotation.Nullable
  public String getReturnPolicyUri() {
    return returnPolicyUri;
  }

  public void setReturnPolicyUri(String returnPolicyUri) {
    this.returnPolicyUri = returnPolicyUri;
  }


  public ReturnPolicyOnline returnReasonCategoryInfo(List<ReturnPolicyOnlineReturnReasonCategoryInfo> returnReasonCategoryInfo) {
    this.returnReasonCategoryInfo = returnReasonCategoryInfo;
    return this;
  }

  public ReturnPolicyOnline addReturnReasonCategoryInfoItem(ReturnPolicyOnlineReturnReasonCategoryInfo returnReasonCategoryInfoItem) {
    if (this.returnReasonCategoryInfo == null) {
      this.returnReasonCategoryInfo = new ArrayList<>();
    }
    this.returnReasonCategoryInfo.add(returnReasonCategoryInfoItem);
    return this;
  }

  /**
   * The return reason category information. This required to not be empty unless the type of return policy is noReturns.
   * @return returnReasonCategoryInfo
   */
  @javax.annotation.Nullable
  public List<ReturnPolicyOnlineReturnReasonCategoryInfo> getReturnReasonCategoryInfo() {
    return returnReasonCategoryInfo;
  }

  public void setReturnReasonCategoryInfo(List<ReturnPolicyOnlineReturnReasonCategoryInfo> returnReasonCategoryInfo) {
    this.returnReasonCategoryInfo = returnReasonCategoryInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnPolicyOnline returnPolicyOnline = (ReturnPolicyOnline) o;
    return Objects.equals(this.countries, returnPolicyOnline.countries) &&
        Objects.equals(this.itemConditions, returnPolicyOnline.itemConditions) &&
        Objects.equals(this.label, returnPolicyOnline.label) &&
        Objects.equals(this.name, returnPolicyOnline.name) &&
        Objects.equals(this.policy, returnPolicyOnline.policy) &&
        Objects.equals(this.restockingFee, returnPolicyOnline.restockingFee) &&
        Objects.equals(this.returnMethods, returnPolicyOnline.returnMethods) &&
        Objects.equals(this.returnPolicyId, returnPolicyOnline.returnPolicyId) &&
        Objects.equals(this.returnPolicyUri, returnPolicyOnline.returnPolicyUri) &&
        Objects.equals(this.returnReasonCategoryInfo, returnPolicyOnline.returnReasonCategoryInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countries, itemConditions, label, name, policy, restockingFee, returnMethods, returnPolicyId, returnPolicyUri, returnReasonCategoryInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnPolicyOnline {\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    itemConditions: ").append(toIndentedString(itemConditions)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    restockingFee: ").append(toIndentedString(restockingFee)).append("\n");
    sb.append("    returnMethods: ").append(toIndentedString(returnMethods)).append("\n");
    sb.append("    returnPolicyId: ").append(toIndentedString(returnPolicyId)).append("\n");
    sb.append("    returnPolicyUri: ").append(toIndentedString(returnPolicyUri)).append("\n");
    sb.append("    returnReasonCategoryInfo: ").append(toIndentedString(returnReasonCategoryInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countries");
    openapiFields.add("itemConditions");
    openapiFields.add("label");
    openapiFields.add("name");
    openapiFields.add("policy");
    openapiFields.add("restockingFee");
    openapiFields.add("returnMethods");
    openapiFields.add("returnPolicyId");
    openapiFields.add("returnPolicyUri");
    openapiFields.add("returnReasonCategoryInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnPolicyOnline
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnPolicyOnline.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnPolicyOnline is not found in the empty JSON string", ReturnPolicyOnline.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnPolicyOnline.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnPolicyOnline` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull() && !jsonObj.get("countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("itemConditions") != null && !jsonObj.get("itemConditions").isJsonNull() && !jsonObj.get("itemConditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemConditions` to be an array in the JSON string but got `%s`", jsonObj.get("itemConditions").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `policy`
      if (jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) {
        ReturnPolicyOnlinePolicy.validateJsonElement(jsonObj.get("policy"));
      }
      // validate the optional field `restockingFee`
      if (jsonObj.get("restockingFee") != null && !jsonObj.get("restockingFee").isJsonNull()) {
        ReturnPolicyOnlineRestockingFee.validateJsonElement(jsonObj.get("restockingFee"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("returnMethods") != null && !jsonObj.get("returnMethods").isJsonNull() && !jsonObj.get("returnMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnMethods` to be an array in the JSON string but got `%s`", jsonObj.get("returnMethods").toString()));
      }
      if ((jsonObj.get("returnPolicyId") != null && !jsonObj.get("returnPolicyId").isJsonNull()) && !jsonObj.get("returnPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnPolicyId").toString()));
      }
      if ((jsonObj.get("returnPolicyUri") != null && !jsonObj.get("returnPolicyUri").isJsonNull()) && !jsonObj.get("returnPolicyUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnPolicyUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnPolicyUri").toString()));
      }
      if (jsonObj.get("returnReasonCategoryInfo") != null && !jsonObj.get("returnReasonCategoryInfo").isJsonNull()) {
        JsonArray jsonArrayreturnReasonCategoryInfo = jsonObj.getAsJsonArray("returnReasonCategoryInfo");
        if (jsonArrayreturnReasonCategoryInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("returnReasonCategoryInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `returnReasonCategoryInfo` to be an array in the JSON string but got `%s`", jsonObj.get("returnReasonCategoryInfo").toString()));
          }

          // validate the optional field `returnReasonCategoryInfo` (array)
          for (int i = 0; i < jsonArrayreturnReasonCategoryInfo.size(); i++) {
            ReturnPolicyOnlineReturnReasonCategoryInfo.validateJsonElement(jsonArrayreturnReasonCategoryInfo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnPolicyOnline.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnPolicyOnline' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnPolicyOnline> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnPolicyOnline.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnPolicyOnline>() {
           @Override
           public void write(JsonWriter out, ReturnPolicyOnline value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnPolicyOnline read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnPolicyOnline given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnPolicyOnline
   * @throws IOException if the JSON string is invalid with respect to ReturnPolicyOnline
   */
  public static ReturnPolicyOnline fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnPolicyOnline.class);
  }

  /**
   * Convert an instance of ReturnPolicyOnline to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

