/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Call to action (CTA) that explains how a merchant can implement this recommendation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationCallToAction {
  public static final String SERIALIZED_NAME_INTENT = "intent";
  @SerializedName(SERIALIZED_NAME_INTENT)
  private String intent;

  public static final String SERIALIZED_NAME_LOCALIZED_TEXT = "localizedText";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_TEXT)
  private String localizedText;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public RecommendationCallToAction() {
  }

  public RecommendationCallToAction(
     String intent, 
     String localizedText
  ) {
    this();
    this.intent = intent;
    this.localizedText = localizedText;
  }

  /**
   * Output only. Intent of the action. This value describes the intent (for example, &#x60;OPEN_CREATE_EMAIL_CAMPAIGN_FLOW&#x60;) and can vary from recommendation to recommendation. This value can change over time for the same recommendation. Currently available intent values: - OPEN_CREATE_EMAIL_CAMPAIGN_FLOW: Opens a user journey where they can create a marketing email campaign. (No default URL) - OPEN_CREATE_COLLECTION_TAB: Opens a user journey where they can [create a collection](https://support.google.com/merchants/answer/9703228) for their Merchant account. (No default URL)
   * @return intent
   */
  @javax.annotation.Nullable
  public String getIntent() {
    return intent;
  }



  /**
   * Output only. Localized text of the CTA. Optional.
   * @return localizedText
   */
  @javax.annotation.Nullable
  public String getLocalizedText() {
    return localizedText;
  }



  public RecommendationCallToAction uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Optional. URL of the CTA. This field will only be set for some recommendations where there is a suggested landing URL. Otherwise it will be set to an empty string. We recommend developers to use their own custom landing page according to the description of the intent field above when this uri field is empty.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationCallToAction recommendationCallToAction = (RecommendationCallToAction) o;
    return Objects.equals(this.intent, recommendationCallToAction.intent) &&
        Objects.equals(this.localizedText, recommendationCallToAction.localizedText) &&
        Objects.equals(this.uri, recommendationCallToAction.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intent, localizedText, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationCallToAction {\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    localizedText: ").append(toIndentedString(localizedText)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intent");
    openapiFields.add("localizedText");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationCallToAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationCallToAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationCallToAction is not found in the empty JSON string", RecommendationCallToAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationCallToAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationCallToAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("intent") != null && !jsonObj.get("intent").isJsonNull()) && !jsonObj.get("intent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intent").toString()));
      }
      if ((jsonObj.get("localizedText") != null && !jsonObj.get("localizedText").isJsonNull()) && !jsonObj.get("localizedText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizedText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localizedText").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationCallToAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationCallToAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationCallToAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationCallToAction.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationCallToAction>() {
           @Override
           public void write(JsonWriter out, RecommendationCallToAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationCallToAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationCallToAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationCallToAction
   * @throws IOException if the JSON string is invalid with respect to RecommendationCallToAction
   */
  public static RecommendationCallToAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationCallToAction.class);
  }

  /**
   * Convert an instance of RecommendationCallToAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

