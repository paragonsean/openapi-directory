/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountUser {
  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private Boolean admin;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_ORDER_MANAGER = "orderManager";
  @SerializedName(SERIALIZED_NAME_ORDER_MANAGER)
  private Boolean orderManager;

  public static final String SERIALIZED_NAME_PAYMENTS_ANALYST = "paymentsAnalyst";
  @SerializedName(SERIALIZED_NAME_PAYMENTS_ANALYST)
  private Boolean paymentsAnalyst;

  public static final String SERIALIZED_NAME_PAYMENTS_MANAGER = "paymentsManager";
  @SerializedName(SERIALIZED_NAME_PAYMENTS_MANAGER)
  private Boolean paymentsManager;

  public static final String SERIALIZED_NAME_REPORTING_MANAGER = "reportingManager";
  @SerializedName(SERIALIZED_NAME_REPORTING_MANAGER)
  private Boolean reportingManager;

  public AccountUser() {
  }

  public AccountUser admin(Boolean admin) {
    this.admin = admin;
    return this;
  }

  /**
   * Whether user is an admin.
   * @return admin
   */
  @javax.annotation.Nullable
  public Boolean getAdmin() {
    return admin;
  }

  public void setAdmin(Boolean admin) {
    this.admin = admin;
  }


  public AccountUser emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * User&#39;s email address.
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public AccountUser orderManager(Boolean orderManager) {
    this.orderManager = orderManager;
    return this;
  }

  /**
   * Whether user is an order manager.
   * @return orderManager
   */
  @javax.annotation.Nullable
  public Boolean getOrderManager() {
    return orderManager;
  }

  public void setOrderManager(Boolean orderManager) {
    this.orderManager = orderManager;
  }


  public AccountUser paymentsAnalyst(Boolean paymentsAnalyst) {
    this.paymentsAnalyst = paymentsAnalyst;
    return this;
  }

  /**
   * Whether user can access payment statements.
   * @return paymentsAnalyst
   */
  @javax.annotation.Nullable
  public Boolean getPaymentsAnalyst() {
    return paymentsAnalyst;
  }

  public void setPaymentsAnalyst(Boolean paymentsAnalyst) {
    this.paymentsAnalyst = paymentsAnalyst;
  }


  public AccountUser paymentsManager(Boolean paymentsManager) {
    this.paymentsManager = paymentsManager;
    return this;
  }

  /**
   * Whether user can manage payment settings.
   * @return paymentsManager
   */
  @javax.annotation.Nullable
  public Boolean getPaymentsManager() {
    return paymentsManager;
  }

  public void setPaymentsManager(Boolean paymentsManager) {
    this.paymentsManager = paymentsManager;
  }


  public AccountUser reportingManager(Boolean reportingManager) {
    this.reportingManager = reportingManager;
    return this;
  }

  /**
   * Whether user is a reporting manager.
   * @return reportingManager
   */
  @javax.annotation.Nullable
  public Boolean getReportingManager() {
    return reportingManager;
  }

  public void setReportingManager(Boolean reportingManager) {
    this.reportingManager = reportingManager;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountUser accountUser = (AccountUser) o;
    return Objects.equals(this.admin, accountUser.admin) &&
        Objects.equals(this.emailAddress, accountUser.emailAddress) &&
        Objects.equals(this.orderManager, accountUser.orderManager) &&
        Objects.equals(this.paymentsAnalyst, accountUser.paymentsAnalyst) &&
        Objects.equals(this.paymentsManager, accountUser.paymentsManager) &&
        Objects.equals(this.reportingManager, accountUser.reportingManager);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admin, emailAddress, orderManager, paymentsAnalyst, paymentsManager, reportingManager);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountUser {\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    orderManager: ").append(toIndentedString(orderManager)).append("\n");
    sb.append("    paymentsAnalyst: ").append(toIndentedString(paymentsAnalyst)).append("\n");
    sb.append("    paymentsManager: ").append(toIndentedString(paymentsManager)).append("\n");
    sb.append("    reportingManager: ").append(toIndentedString(reportingManager)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin");
    openapiFields.add("emailAddress");
    openapiFields.add("orderManager");
    openapiFields.add("paymentsAnalyst");
    openapiFields.add("paymentsManager");
    openapiFields.add("reportingManager");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountUser is not found in the empty JSON string", AccountUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("emailAddress") != null && !jsonObj.get("emailAddress").isJsonNull()) && !jsonObj.get("emailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountUser.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountUser>() {
           @Override
           public void write(JsonWriter out, AccountUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountUser
   * @throws IOException if the JSON string is invalid with respect to AccountUser
   */
  public static AccountUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountUser.class);
  }

  /**
   * Convert an instance of AccountUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

