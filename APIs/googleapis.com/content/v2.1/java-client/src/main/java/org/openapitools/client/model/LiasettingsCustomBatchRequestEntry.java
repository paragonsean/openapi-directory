/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LiaOmnichannelExperience;
import org.openapitools.client.model.LiaSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LiasettingsCustomBatchRequestEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiasettingsCustomBatchRequestEntry {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_BATCH_ID = "batchId";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  private Integer batchId;

  public static final String SERIALIZED_NAME_CONTACT_EMAIL = "contactEmail";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL)
  private String contactEmail;

  public static final String SERIALIZED_NAME_CONTACT_NAME = "contactName";
  @SerializedName(SERIALIZED_NAME_CONTACT_NAME)
  private String contactName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_GMB_EMAIL = "gmbEmail";
  @SerializedName(SERIALIZED_NAME_GMB_EMAIL)
  private String gmbEmail;

  public static final String SERIALIZED_NAME_LIA_SETTINGS = "liaSettings";
  @SerializedName(SERIALIZED_NAME_LIA_SETTINGS)
  private LiaSettings liaSettings;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_OMNICHANNEL_EXPERIENCE = "omnichannelExperience";
  @SerializedName(SERIALIZED_NAME_OMNICHANNEL_EXPERIENCE)
  private LiaOmnichannelExperience omnichannelExperience;

  public static final String SERIALIZED_NAME_POS_DATA_PROVIDER_ID = "posDataProviderId";
  @SerializedName(SERIALIZED_NAME_POS_DATA_PROVIDER_ID)
  private String posDataProviderId;

  public static final String SERIALIZED_NAME_POS_EXTERNAL_ACCOUNT_ID = "posExternalAccountId";
  @SerializedName(SERIALIZED_NAME_POS_EXTERNAL_ACCOUNT_ID)
  private String posExternalAccountId;

  public LiasettingsCustomBatchRequestEntry() {
  }

  public LiasettingsCustomBatchRequestEntry accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The ID of the account for which to get/update account LIA settings.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public LiasettingsCustomBatchRequestEntry batchId(Integer batchId) {
    this.batchId = batchId;
    return this;
  }

  /**
   * An entry ID, unique within the batch request.
   * @return batchId
   */
  @javax.annotation.Nullable
  public Integer getBatchId() {
    return batchId;
  }

  public void setBatchId(Integer batchId) {
    this.batchId = batchId;
  }


  public LiasettingsCustomBatchRequestEntry contactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
    return this;
  }

  /**
   * Inventory validation contact email. Required only for SetInventoryValidationContact.
   * @return contactEmail
   */
  @javax.annotation.Nullable
  public String getContactEmail() {
    return contactEmail;
  }

  public void setContactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
  }


  public LiasettingsCustomBatchRequestEntry contactName(String contactName) {
    this.contactName = contactName;
    return this;
  }

  /**
   * Inventory validation contact name. Required only for SetInventoryValidationContact.
   * @return contactName
   */
  @javax.annotation.Nullable
  public String getContactName() {
    return contactName;
  }

  public void setContactName(String contactName) {
    this.contactName = contactName;
  }


  public LiasettingsCustomBatchRequestEntry country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country code. Required only for RequestInventoryVerification.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public LiasettingsCustomBatchRequestEntry gmbEmail(String gmbEmail) {
    this.gmbEmail = gmbEmail;
    return this;
  }

  /**
   * The Business Profile. Required only for RequestGmbAccess.
   * @return gmbEmail
   */
  @javax.annotation.Nullable
  public String getGmbEmail() {
    return gmbEmail;
  }

  public void setGmbEmail(String gmbEmail) {
    this.gmbEmail = gmbEmail;
  }


  public LiasettingsCustomBatchRequestEntry liaSettings(LiaSettings liaSettings) {
    this.liaSettings = liaSettings;
    return this;
  }

  /**
   * Get liaSettings
   * @return liaSettings
   */
  @javax.annotation.Nullable
  public LiaSettings getLiaSettings() {
    return liaSettings;
  }

  public void setLiaSettings(LiaSettings liaSettings) {
    this.liaSettings = liaSettings;
  }


  public LiasettingsCustomBatchRequestEntry merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * The ID of the managing account.
   * @return merchantId
   */
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public LiasettingsCustomBatchRequestEntry method(String method) {
    this.method = method;
    return this;
  }

  /**
   * The method of the batch entry. Acceptable values are: - \&quot;&#x60;get&#x60;\&quot; - \&quot;&#x60;getAccessibleGmbAccounts&#x60;\&quot; - \&quot;&#x60;requestGmbAccess&#x60;\&quot; - \&quot;&#x60;requestInventoryVerification&#x60;\&quot; - \&quot;&#x60;setInventoryVerificationContact&#x60;\&quot; - \&quot;&#x60;update&#x60;\&quot; 
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public LiasettingsCustomBatchRequestEntry omnichannelExperience(LiaOmnichannelExperience omnichannelExperience) {
    this.omnichannelExperience = omnichannelExperience;
    return this;
  }

  /**
   * Get omnichannelExperience
   * @return omnichannelExperience
   */
  @javax.annotation.Nullable
  public LiaOmnichannelExperience getOmnichannelExperience() {
    return omnichannelExperience;
  }

  public void setOmnichannelExperience(LiaOmnichannelExperience omnichannelExperience) {
    this.omnichannelExperience = omnichannelExperience;
  }


  public LiasettingsCustomBatchRequestEntry posDataProviderId(String posDataProviderId) {
    this.posDataProviderId = posDataProviderId;
    return this;
  }

  /**
   * The ID of POS data provider. Required only for SetPosProvider.
   * @return posDataProviderId
   */
  @javax.annotation.Nullable
  public String getPosDataProviderId() {
    return posDataProviderId;
  }

  public void setPosDataProviderId(String posDataProviderId) {
    this.posDataProviderId = posDataProviderId;
  }


  public LiasettingsCustomBatchRequestEntry posExternalAccountId(String posExternalAccountId) {
    this.posExternalAccountId = posExternalAccountId;
    return this;
  }

  /**
   * The account ID by which this merchant is known to the POS provider.
   * @return posExternalAccountId
   */
  @javax.annotation.Nullable
  public String getPosExternalAccountId() {
    return posExternalAccountId;
  }

  public void setPosExternalAccountId(String posExternalAccountId) {
    this.posExternalAccountId = posExternalAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiasettingsCustomBatchRequestEntry liasettingsCustomBatchRequestEntry = (LiasettingsCustomBatchRequestEntry) o;
    return Objects.equals(this.accountId, liasettingsCustomBatchRequestEntry.accountId) &&
        Objects.equals(this.batchId, liasettingsCustomBatchRequestEntry.batchId) &&
        Objects.equals(this.contactEmail, liasettingsCustomBatchRequestEntry.contactEmail) &&
        Objects.equals(this.contactName, liasettingsCustomBatchRequestEntry.contactName) &&
        Objects.equals(this.country, liasettingsCustomBatchRequestEntry.country) &&
        Objects.equals(this.gmbEmail, liasettingsCustomBatchRequestEntry.gmbEmail) &&
        Objects.equals(this.liaSettings, liasettingsCustomBatchRequestEntry.liaSettings) &&
        Objects.equals(this.merchantId, liasettingsCustomBatchRequestEntry.merchantId) &&
        Objects.equals(this.method, liasettingsCustomBatchRequestEntry.method) &&
        Objects.equals(this.omnichannelExperience, liasettingsCustomBatchRequestEntry.omnichannelExperience) &&
        Objects.equals(this.posDataProviderId, liasettingsCustomBatchRequestEntry.posDataProviderId) &&
        Objects.equals(this.posExternalAccountId, liasettingsCustomBatchRequestEntry.posExternalAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, batchId, contactEmail, contactName, country, gmbEmail, liaSettings, merchantId, method, omnichannelExperience, posDataProviderId, posExternalAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiasettingsCustomBatchRequestEntry {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    gmbEmail: ").append(toIndentedString(gmbEmail)).append("\n");
    sb.append("    liaSettings: ").append(toIndentedString(liaSettings)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    omnichannelExperience: ").append(toIndentedString(omnichannelExperience)).append("\n");
    sb.append("    posDataProviderId: ").append(toIndentedString(posDataProviderId)).append("\n");
    sb.append("    posExternalAccountId: ").append(toIndentedString(posExternalAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("batchId");
    openapiFields.add("contactEmail");
    openapiFields.add("contactName");
    openapiFields.add("country");
    openapiFields.add("gmbEmail");
    openapiFields.add("liaSettings");
    openapiFields.add("merchantId");
    openapiFields.add("method");
    openapiFields.add("omnichannelExperience");
    openapiFields.add("posDataProviderId");
    openapiFields.add("posExternalAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiasettingsCustomBatchRequestEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiasettingsCustomBatchRequestEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiasettingsCustomBatchRequestEntry is not found in the empty JSON string", LiasettingsCustomBatchRequestEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiasettingsCustomBatchRequestEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiasettingsCustomBatchRequestEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("contactEmail") != null && !jsonObj.get("contactEmail").isJsonNull()) && !jsonObj.get("contactEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactEmail").toString()));
      }
      if ((jsonObj.get("contactName") != null && !jsonObj.get("contactName").isJsonNull()) && !jsonObj.get("contactName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactName").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("gmbEmail") != null && !jsonObj.get("gmbEmail").isJsonNull()) && !jsonObj.get("gmbEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gmbEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gmbEmail").toString()));
      }
      // validate the optional field `liaSettings`
      if (jsonObj.get("liaSettings") != null && !jsonObj.get("liaSettings").isJsonNull()) {
        LiaSettings.validateJsonElement(jsonObj.get("liaSettings"));
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      // validate the optional field `omnichannelExperience`
      if (jsonObj.get("omnichannelExperience") != null && !jsonObj.get("omnichannelExperience").isJsonNull()) {
        LiaOmnichannelExperience.validateJsonElement(jsonObj.get("omnichannelExperience"));
      }
      if ((jsonObj.get("posDataProviderId") != null && !jsonObj.get("posDataProviderId").isJsonNull()) && !jsonObj.get("posDataProviderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posDataProviderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posDataProviderId").toString()));
      }
      if ((jsonObj.get("posExternalAccountId") != null && !jsonObj.get("posExternalAccountId").isJsonNull()) && !jsonObj.get("posExternalAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posExternalAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posExternalAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiasettingsCustomBatchRequestEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiasettingsCustomBatchRequestEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiasettingsCustomBatchRequestEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiasettingsCustomBatchRequestEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<LiasettingsCustomBatchRequestEntry>() {
           @Override
           public void write(JsonWriter out, LiasettingsCustomBatchRequestEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiasettingsCustomBatchRequestEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiasettingsCustomBatchRequestEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiasettingsCustomBatchRequestEntry
   * @throws IOException if the JSON string is invalid with respect to LiasettingsCustomBatchRequestEntry
   */
  public static LiasettingsCustomBatchRequestEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiasettingsCustomBatchRequestEntry.class);
  }

  /**
   * Convert an instance of LiasettingsCustomBatchRequestEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

