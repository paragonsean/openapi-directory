/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LiaAboutPageSettings;
import org.openapitools.client.model.LiaInventorySettings;
import org.openapitools.client.model.LiaOmnichannelExperience;
import org.openapitools.client.model.LiaOnDisplayToOrderSettings;
import org.openapitools.client.model.LiaPosDataProvider;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LiaCountrySettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiaCountrySettings {
  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private LiaAboutPageSettings about;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_HOSTED_LOCAL_STOREFRONT_ACTIVE = "hostedLocalStorefrontActive";
  @SerializedName(SERIALIZED_NAME_HOSTED_LOCAL_STOREFRONT_ACTIVE)
  private Boolean hostedLocalStorefrontActive;

  public static final String SERIALIZED_NAME_INVENTORY = "inventory";
  @SerializedName(SERIALIZED_NAME_INVENTORY)
  private LiaInventorySettings inventory;

  public static final String SERIALIZED_NAME_OMNICHANNEL_EXPERIENCE = "omnichannelExperience";
  @SerializedName(SERIALIZED_NAME_OMNICHANNEL_EXPERIENCE)
  private LiaOmnichannelExperience omnichannelExperience;

  public static final String SERIALIZED_NAME_ON_DISPLAY_TO_ORDER = "onDisplayToOrder";
  @SerializedName(SERIALIZED_NAME_ON_DISPLAY_TO_ORDER)
  private LiaOnDisplayToOrderSettings onDisplayToOrder;

  public static final String SERIALIZED_NAME_POS_DATA_PROVIDER = "posDataProvider";
  @SerializedName(SERIALIZED_NAME_POS_DATA_PROVIDER)
  private LiaPosDataProvider posDataProvider;

  public static final String SERIALIZED_NAME_STORE_PICKUP_ACTIVE = "storePickupActive";
  @SerializedName(SERIALIZED_NAME_STORE_PICKUP_ACTIVE)
  private Boolean storePickupActive;

  public LiaCountrySettings() {
  }

  public LiaCountrySettings about(LiaAboutPageSettings about) {
    this.about = about;
    return this;
  }

  /**
   * Get about
   * @return about
   */
  @javax.annotation.Nullable
  public LiaAboutPageSettings getAbout() {
    return about;
  }

  public void setAbout(LiaAboutPageSettings about) {
    this.about = about;
  }


  public LiaCountrySettings country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Required. CLDR country code (for example, \&quot;US\&quot;).
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public LiaCountrySettings hostedLocalStorefrontActive(Boolean hostedLocalStorefrontActive) {
    this.hostedLocalStorefrontActive = hostedLocalStorefrontActive;
    return this;
  }

  /**
   * The status of the \&quot;Merchant hosted local storefront\&quot; feature.
   * @return hostedLocalStorefrontActive
   */
  @javax.annotation.Nullable
  public Boolean getHostedLocalStorefrontActive() {
    return hostedLocalStorefrontActive;
  }

  public void setHostedLocalStorefrontActive(Boolean hostedLocalStorefrontActive) {
    this.hostedLocalStorefrontActive = hostedLocalStorefrontActive;
  }


  public LiaCountrySettings inventory(LiaInventorySettings inventory) {
    this.inventory = inventory;
    return this;
  }

  /**
   * Get inventory
   * @return inventory
   */
  @javax.annotation.Nullable
  public LiaInventorySettings getInventory() {
    return inventory;
  }

  public void setInventory(LiaInventorySettings inventory) {
    this.inventory = inventory;
  }


  public LiaCountrySettings omnichannelExperience(LiaOmnichannelExperience omnichannelExperience) {
    this.omnichannelExperience = omnichannelExperience;
    return this;
  }

  /**
   * Get omnichannelExperience
   * @return omnichannelExperience
   */
  @javax.annotation.Nullable
  public LiaOmnichannelExperience getOmnichannelExperience() {
    return omnichannelExperience;
  }

  public void setOmnichannelExperience(LiaOmnichannelExperience omnichannelExperience) {
    this.omnichannelExperience = omnichannelExperience;
  }


  public LiaCountrySettings onDisplayToOrder(LiaOnDisplayToOrderSettings onDisplayToOrder) {
    this.onDisplayToOrder = onDisplayToOrder;
    return this;
  }

  /**
   * Get onDisplayToOrder
   * @return onDisplayToOrder
   */
  @javax.annotation.Nullable
  public LiaOnDisplayToOrderSettings getOnDisplayToOrder() {
    return onDisplayToOrder;
  }

  public void setOnDisplayToOrder(LiaOnDisplayToOrderSettings onDisplayToOrder) {
    this.onDisplayToOrder = onDisplayToOrder;
  }


  public LiaCountrySettings posDataProvider(LiaPosDataProvider posDataProvider) {
    this.posDataProvider = posDataProvider;
    return this;
  }

  /**
   * Get posDataProvider
   * @return posDataProvider
   */
  @javax.annotation.Nullable
  public LiaPosDataProvider getPosDataProvider() {
    return posDataProvider;
  }

  public void setPosDataProvider(LiaPosDataProvider posDataProvider) {
    this.posDataProvider = posDataProvider;
  }


  public LiaCountrySettings storePickupActive(Boolean storePickupActive) {
    this.storePickupActive = storePickupActive;
    return this;
  }

  /**
   * The status of the \&quot;Store pickup\&quot; feature.
   * @return storePickupActive
   */
  @javax.annotation.Nullable
  public Boolean getStorePickupActive() {
    return storePickupActive;
  }

  public void setStorePickupActive(Boolean storePickupActive) {
    this.storePickupActive = storePickupActive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiaCountrySettings liaCountrySettings = (LiaCountrySettings) o;
    return Objects.equals(this.about, liaCountrySettings.about) &&
        Objects.equals(this.country, liaCountrySettings.country) &&
        Objects.equals(this.hostedLocalStorefrontActive, liaCountrySettings.hostedLocalStorefrontActive) &&
        Objects.equals(this.inventory, liaCountrySettings.inventory) &&
        Objects.equals(this.omnichannelExperience, liaCountrySettings.omnichannelExperience) &&
        Objects.equals(this.onDisplayToOrder, liaCountrySettings.onDisplayToOrder) &&
        Objects.equals(this.posDataProvider, liaCountrySettings.posDataProvider) &&
        Objects.equals(this.storePickupActive, liaCountrySettings.storePickupActive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, country, hostedLocalStorefrontActive, inventory, omnichannelExperience, onDisplayToOrder, posDataProvider, storePickupActive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiaCountrySettings {\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    hostedLocalStorefrontActive: ").append(toIndentedString(hostedLocalStorefrontActive)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    omnichannelExperience: ").append(toIndentedString(omnichannelExperience)).append("\n");
    sb.append("    onDisplayToOrder: ").append(toIndentedString(onDisplayToOrder)).append("\n");
    sb.append("    posDataProvider: ").append(toIndentedString(posDataProvider)).append("\n");
    sb.append("    storePickupActive: ").append(toIndentedString(storePickupActive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("about");
    openapiFields.add("country");
    openapiFields.add("hostedLocalStorefrontActive");
    openapiFields.add("inventory");
    openapiFields.add("omnichannelExperience");
    openapiFields.add("onDisplayToOrder");
    openapiFields.add("posDataProvider");
    openapiFields.add("storePickupActive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiaCountrySettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiaCountrySettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiaCountrySettings is not found in the empty JSON string", LiaCountrySettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiaCountrySettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiaCountrySettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `about`
      if (jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) {
        LiaAboutPageSettings.validateJsonElement(jsonObj.get("about"));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `inventory`
      if (jsonObj.get("inventory") != null && !jsonObj.get("inventory").isJsonNull()) {
        LiaInventorySettings.validateJsonElement(jsonObj.get("inventory"));
      }
      // validate the optional field `omnichannelExperience`
      if (jsonObj.get("omnichannelExperience") != null && !jsonObj.get("omnichannelExperience").isJsonNull()) {
        LiaOmnichannelExperience.validateJsonElement(jsonObj.get("omnichannelExperience"));
      }
      // validate the optional field `onDisplayToOrder`
      if (jsonObj.get("onDisplayToOrder") != null && !jsonObj.get("onDisplayToOrder").isJsonNull()) {
        LiaOnDisplayToOrderSettings.validateJsonElement(jsonObj.get("onDisplayToOrder"));
      }
      // validate the optional field `posDataProvider`
      if (jsonObj.get("posDataProvider") != null && !jsonObj.get("posDataProvider").isJsonNull()) {
        LiaPosDataProvider.validateJsonElement(jsonObj.get("posDataProvider"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiaCountrySettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiaCountrySettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiaCountrySettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiaCountrySettings.class));

       return (TypeAdapter<T>) new TypeAdapter<LiaCountrySettings>() {
           @Override
           public void write(JsonWriter out, LiaCountrySettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiaCountrySettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiaCountrySettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiaCountrySettings
   * @throws IOException if the JSON string is invalid with respect to LiaCountrySettings
   */
  public static LiaCountrySettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiaCountrySettings.class);
  }

  /**
   * Convert an instance of LiaCountrySettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

