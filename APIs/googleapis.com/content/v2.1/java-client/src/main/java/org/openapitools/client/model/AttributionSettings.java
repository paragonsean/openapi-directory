/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributionSettingsConversionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents attribution settings for conversion sources receiving pre-attribution data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttributionSettings {
  public static final String SERIALIZED_NAME_ATTRIBUTION_LOOKBACK_WINDOW_IN_DAYS = "attributionLookbackWindowInDays";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTION_LOOKBACK_WINDOW_IN_DAYS)
  private Integer attributionLookbackWindowInDays;

  /**
   * Required. Attribution model.
   */
  @JsonAdapter(AttributionModelEnum.Adapter.class)
  public enum AttributionModelEnum {
    ATTRIBUTION_MODEL_UNSPECIFIED("ATTRIBUTION_MODEL_UNSPECIFIED"),
    
    CROSS_CHANNEL_LAST_CLICK("CROSS_CHANNEL_LAST_CLICK"),
    
    ADS_PREFERRED_LAST_CLICK("ADS_PREFERRED_LAST_CLICK"),
    
    CROSS_CHANNEL_DATA_DRIVEN("CROSS_CHANNEL_DATA_DRIVEN"),
    
    CROSS_CHANNEL_FIRST_CLICK("CROSS_CHANNEL_FIRST_CLICK"),
    
    CROSS_CHANNEL_LINEAR("CROSS_CHANNEL_LINEAR"),
    
    CROSS_CHANNEL_POSITION_BASED("CROSS_CHANNEL_POSITION_BASED"),
    
    CROSS_CHANNEL_TIME_DECAY("CROSS_CHANNEL_TIME_DECAY");

    private String value;

    AttributionModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttributionModelEnum fromValue(String value) {
      for (AttributionModelEnum b : AttributionModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AttributionModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttributionModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttributionModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AttributionModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AttributionModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ATTRIBUTION_MODEL = "attributionModel";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTION_MODEL)
  private AttributionModelEnum attributionModel;

  public static final String SERIALIZED_NAME_CONVERSION_TYPE = "conversionType";
  @SerializedName(SERIALIZED_NAME_CONVERSION_TYPE)
  private List<AttributionSettingsConversionType> conversionType = new ArrayList<>();

  public AttributionSettings() {
  }

  public AttributionSettings attributionLookbackWindowInDays(Integer attributionLookbackWindowInDays) {
    this.attributionLookbackWindowInDays = attributionLookbackWindowInDays;
    return this;
  }

  /**
   * Required. Lookback windows (in days) used for attribution in this source. Supported values are 7, 30, 40.
   * @return attributionLookbackWindowInDays
   */
  @javax.annotation.Nullable
  public Integer getAttributionLookbackWindowInDays() {
    return attributionLookbackWindowInDays;
  }

  public void setAttributionLookbackWindowInDays(Integer attributionLookbackWindowInDays) {
    this.attributionLookbackWindowInDays = attributionLookbackWindowInDays;
  }


  public AttributionSettings attributionModel(AttributionModelEnum attributionModel) {
    this.attributionModel = attributionModel;
    return this;
  }

  /**
   * Required. Attribution model.
   * @return attributionModel
   */
  @javax.annotation.Nullable
  public AttributionModelEnum getAttributionModel() {
    return attributionModel;
  }

  public void setAttributionModel(AttributionModelEnum attributionModel) {
    this.attributionModel = attributionModel;
  }


  public AttributionSettings conversionType(List<AttributionSettingsConversionType> conversionType) {
    this.conversionType = conversionType;
    return this;
  }

  public AttributionSettings addConversionTypeItem(AttributionSettingsConversionType conversionTypeItem) {
    if (this.conversionType == null) {
      this.conversionType = new ArrayList<>();
    }
    this.conversionType.add(conversionTypeItem);
    return this;
  }

  /**
   * Immutable. Unordered list. List of different conversion types a conversion event can be classified as. A standard \&quot;purchase\&quot; type will be automatically created if this list is empty at creation time.
   * @return conversionType
   */
  @javax.annotation.Nullable
  public List<AttributionSettingsConversionType> getConversionType() {
    return conversionType;
  }

  public void setConversionType(List<AttributionSettingsConversionType> conversionType) {
    this.conversionType = conversionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributionSettings attributionSettings = (AttributionSettings) o;
    return Objects.equals(this.attributionLookbackWindowInDays, attributionSettings.attributionLookbackWindowInDays) &&
        Objects.equals(this.attributionModel, attributionSettings.attributionModel) &&
        Objects.equals(this.conversionType, attributionSettings.conversionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributionLookbackWindowInDays, attributionModel, conversionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributionSettings {\n");
    sb.append("    attributionLookbackWindowInDays: ").append(toIndentedString(attributionLookbackWindowInDays)).append("\n");
    sb.append("    attributionModel: ").append(toIndentedString(attributionModel)).append("\n");
    sb.append("    conversionType: ").append(toIndentedString(conversionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributionLookbackWindowInDays");
    openapiFields.add("attributionModel");
    openapiFields.add("conversionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributionSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributionSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributionSettings is not found in the empty JSON string", AttributionSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributionSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributionSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attributionModel") != null && !jsonObj.get("attributionModel").isJsonNull()) && !jsonObj.get("attributionModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributionModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributionModel").toString()));
      }
      // validate the optional field `attributionModel`
      if (jsonObj.get("attributionModel") != null && !jsonObj.get("attributionModel").isJsonNull()) {
        AttributionModelEnum.validateJsonElement(jsonObj.get("attributionModel"));
      }
      if (jsonObj.get("conversionType") != null && !jsonObj.get("conversionType").isJsonNull()) {
        JsonArray jsonArrayconversionType = jsonObj.getAsJsonArray("conversionType");
        if (jsonArrayconversionType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conversionType").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conversionType` to be an array in the JSON string but got `%s`", jsonObj.get("conversionType").toString()));
          }

          // validate the optional field `conversionType` (array)
          for (int i = 0; i < jsonArrayconversionType.size(); i++) {
            AttributionSettingsConversionType.validateJsonElement(jsonArrayconversionType.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributionSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributionSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributionSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributionSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributionSettings>() {
           @Override
           public void write(JsonWriter out, AttributionSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributionSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributionSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributionSettings
   * @throws IOException if the JSON string is invalid with respect to AttributionSettings
   */
  public static AttributionSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributionSettings.class);
  }

  /**
   * Convert an instance of AttributionSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

