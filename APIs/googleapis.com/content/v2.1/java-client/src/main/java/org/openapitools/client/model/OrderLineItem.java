/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderCancellation;
import org.openapitools.client.model.OrderLineItemAdjustment;
import org.openapitools.client.model.OrderLineItemProduct;
import org.openapitools.client.model.OrderLineItemReturnInfo;
import org.openapitools.client.model.OrderLineItemShippingDetails;
import org.openapitools.client.model.OrderMerchantProvidedAnnotation;
import org.openapitools.client.model.OrderReturn;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderLineItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderLineItem {
  public static final String SERIALIZED_NAME_ADJUSTMENTS = "adjustments";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENTS)
  private List<OrderLineItemAdjustment> adjustments = new ArrayList<>();

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private List<OrderMerchantProvidedAnnotation> annotations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CANCELLATIONS = "cancellations";
  @SerializedName(SERIALIZED_NAME_CANCELLATIONS)
  private List<OrderCancellation> cancellations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Price price;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private OrderLineItemProduct product;

  public static final String SERIALIZED_NAME_QUANTITY_CANCELED = "quantityCanceled";
  @SerializedName(SERIALIZED_NAME_QUANTITY_CANCELED)
  private Integer quantityCanceled;

  public static final String SERIALIZED_NAME_QUANTITY_DELIVERED = "quantityDelivered";
  @SerializedName(SERIALIZED_NAME_QUANTITY_DELIVERED)
  private Integer quantityDelivered;

  public static final String SERIALIZED_NAME_QUANTITY_ORDERED = "quantityOrdered";
  @SerializedName(SERIALIZED_NAME_QUANTITY_ORDERED)
  private Integer quantityOrdered;

  public static final String SERIALIZED_NAME_QUANTITY_PENDING = "quantityPending";
  @SerializedName(SERIALIZED_NAME_QUANTITY_PENDING)
  private Integer quantityPending;

  public static final String SERIALIZED_NAME_QUANTITY_READY_FOR_PICKUP = "quantityReadyForPickup";
  @SerializedName(SERIALIZED_NAME_QUANTITY_READY_FOR_PICKUP)
  private Integer quantityReadyForPickup;

  public static final String SERIALIZED_NAME_QUANTITY_RETURNED = "quantityReturned";
  @SerializedName(SERIALIZED_NAME_QUANTITY_RETURNED)
  private Integer quantityReturned;

  public static final String SERIALIZED_NAME_QUANTITY_SHIPPED = "quantityShipped";
  @SerializedName(SERIALIZED_NAME_QUANTITY_SHIPPED)
  private Integer quantityShipped;

  public static final String SERIALIZED_NAME_QUANTITY_UNDELIVERABLE = "quantityUndeliverable";
  @SerializedName(SERIALIZED_NAME_QUANTITY_UNDELIVERABLE)
  private Integer quantityUndeliverable;

  public static final String SERIALIZED_NAME_RETURN_INFO = "returnInfo";
  @SerializedName(SERIALIZED_NAME_RETURN_INFO)
  private OrderLineItemReturnInfo returnInfo;

  public static final String SERIALIZED_NAME_RETURNS = "returns";
  @SerializedName(SERIALIZED_NAME_RETURNS)
  private List<OrderReturn> returns = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_DETAILS = "shippingDetails";
  @SerializedName(SERIALIZED_NAME_SHIPPING_DETAILS)
  private OrderLineItemShippingDetails shippingDetails;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Price tax;

  public OrderLineItem() {
  }

  public OrderLineItem adjustments(List<OrderLineItemAdjustment> adjustments) {
    this.adjustments = adjustments;
    return this;
  }

  public OrderLineItem addAdjustmentsItem(OrderLineItemAdjustment adjustmentsItem) {
    if (this.adjustments == null) {
      this.adjustments = new ArrayList<>();
    }
    this.adjustments.add(adjustmentsItem);
    return this;
  }

  /**
   * Price and tax adjustments applied on the line item.
   * @return adjustments
   */
  @javax.annotation.Nullable
  public List<OrderLineItemAdjustment> getAdjustments() {
    return adjustments;
  }

  public void setAdjustments(List<OrderLineItemAdjustment> adjustments) {
    this.adjustments = adjustments;
  }


  public OrderLineItem annotations(List<OrderMerchantProvidedAnnotation> annotations) {
    this.annotations = annotations;
    return this;
  }

  public OrderLineItem addAnnotationsItem(OrderMerchantProvidedAnnotation annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<>();
    }
    this.annotations.add(annotationsItem);
    return this;
  }

  /**
   * Annotations that are attached to the line item.
   * @return annotations
   */
  @javax.annotation.Nullable
  public List<OrderMerchantProvidedAnnotation> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(List<OrderMerchantProvidedAnnotation> annotations) {
    this.annotations = annotations;
  }


  public OrderLineItem cancellations(List<OrderCancellation> cancellations) {
    this.cancellations = cancellations;
    return this;
  }

  public OrderLineItem addCancellationsItem(OrderCancellation cancellationsItem) {
    if (this.cancellations == null) {
      this.cancellations = new ArrayList<>();
    }
    this.cancellations.add(cancellationsItem);
    return this;
  }

  /**
   * Cancellations of the line item.
   * @return cancellations
   */
  @javax.annotation.Nullable
  public List<OrderCancellation> getCancellations() {
    return cancellations;
  }

  public void setCancellations(List<OrderCancellation> cancellations) {
    this.cancellations = cancellations;
  }


  public OrderLineItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the line item.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OrderLineItem price(Price price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Price getPrice() {
    return price;
  }

  public void setPrice(Price price) {
    this.price = price;
  }


  public OrderLineItem product(OrderLineItemProduct product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public OrderLineItemProduct getProduct() {
    return product;
  }

  public void setProduct(OrderLineItemProduct product) {
    this.product = product;
  }


  public OrderLineItem quantityCanceled(Integer quantityCanceled) {
    this.quantityCanceled = quantityCanceled;
    return this;
  }

  /**
   * Number of items canceled.
   * @return quantityCanceled
   */
  @javax.annotation.Nullable
  public Integer getQuantityCanceled() {
    return quantityCanceled;
  }

  public void setQuantityCanceled(Integer quantityCanceled) {
    this.quantityCanceled = quantityCanceled;
  }


  public OrderLineItem quantityDelivered(Integer quantityDelivered) {
    this.quantityDelivered = quantityDelivered;
    return this;
  }

  /**
   * Number of items delivered.
   * @return quantityDelivered
   */
  @javax.annotation.Nullable
  public Integer getQuantityDelivered() {
    return quantityDelivered;
  }

  public void setQuantityDelivered(Integer quantityDelivered) {
    this.quantityDelivered = quantityDelivered;
  }


  public OrderLineItem quantityOrdered(Integer quantityOrdered) {
    this.quantityOrdered = quantityOrdered;
    return this;
  }

  /**
   * Number of items ordered.
   * @return quantityOrdered
   */
  @javax.annotation.Nullable
  public Integer getQuantityOrdered() {
    return quantityOrdered;
  }

  public void setQuantityOrdered(Integer quantityOrdered) {
    this.quantityOrdered = quantityOrdered;
  }


  public OrderLineItem quantityPending(Integer quantityPending) {
    this.quantityPending = quantityPending;
    return this;
  }

  /**
   * Number of items pending.
   * @return quantityPending
   */
  @javax.annotation.Nullable
  public Integer getQuantityPending() {
    return quantityPending;
  }

  public void setQuantityPending(Integer quantityPending) {
    this.quantityPending = quantityPending;
  }


  public OrderLineItem quantityReadyForPickup(Integer quantityReadyForPickup) {
    this.quantityReadyForPickup = quantityReadyForPickup;
    return this;
  }

  /**
   * Number of items ready for pickup.
   * @return quantityReadyForPickup
   */
  @javax.annotation.Nullable
  public Integer getQuantityReadyForPickup() {
    return quantityReadyForPickup;
  }

  public void setQuantityReadyForPickup(Integer quantityReadyForPickup) {
    this.quantityReadyForPickup = quantityReadyForPickup;
  }


  public OrderLineItem quantityReturned(Integer quantityReturned) {
    this.quantityReturned = quantityReturned;
    return this;
  }

  /**
   * Number of items returned.
   * @return quantityReturned
   */
  @javax.annotation.Nullable
  public Integer getQuantityReturned() {
    return quantityReturned;
  }

  public void setQuantityReturned(Integer quantityReturned) {
    this.quantityReturned = quantityReturned;
  }


  public OrderLineItem quantityShipped(Integer quantityShipped) {
    this.quantityShipped = quantityShipped;
    return this;
  }

  /**
   * Number of items shipped.
   * @return quantityShipped
   */
  @javax.annotation.Nullable
  public Integer getQuantityShipped() {
    return quantityShipped;
  }

  public void setQuantityShipped(Integer quantityShipped) {
    this.quantityShipped = quantityShipped;
  }


  public OrderLineItem quantityUndeliverable(Integer quantityUndeliverable) {
    this.quantityUndeliverable = quantityUndeliverable;
    return this;
  }

  /**
   * Number of items undeliverable.
   * @return quantityUndeliverable
   */
  @javax.annotation.Nullable
  public Integer getQuantityUndeliverable() {
    return quantityUndeliverable;
  }

  public void setQuantityUndeliverable(Integer quantityUndeliverable) {
    this.quantityUndeliverable = quantityUndeliverable;
  }


  public OrderLineItem returnInfo(OrderLineItemReturnInfo returnInfo) {
    this.returnInfo = returnInfo;
    return this;
  }

  /**
   * Get returnInfo
   * @return returnInfo
   */
  @javax.annotation.Nullable
  public OrderLineItemReturnInfo getReturnInfo() {
    return returnInfo;
  }

  public void setReturnInfo(OrderLineItemReturnInfo returnInfo) {
    this.returnInfo = returnInfo;
  }


  public OrderLineItem returns(List<OrderReturn> returns) {
    this.returns = returns;
    return this;
  }

  public OrderLineItem addReturnsItem(OrderReturn returnsItem) {
    if (this.returns == null) {
      this.returns = new ArrayList<>();
    }
    this.returns.add(returnsItem);
    return this;
  }

  /**
   * Returns of the line item.
   * @return returns
   */
  @javax.annotation.Nullable
  public List<OrderReturn> getReturns() {
    return returns;
  }

  public void setReturns(List<OrderReturn> returns) {
    this.returns = returns;
  }


  public OrderLineItem shippingDetails(OrderLineItemShippingDetails shippingDetails) {
    this.shippingDetails = shippingDetails;
    return this;
  }

  /**
   * Get shippingDetails
   * @return shippingDetails
   */
  @javax.annotation.Nullable
  public OrderLineItemShippingDetails getShippingDetails() {
    return shippingDetails;
  }

  public void setShippingDetails(OrderLineItemShippingDetails shippingDetails) {
    this.shippingDetails = shippingDetails;
  }


  public OrderLineItem tax(Price tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Get tax
   * @return tax
   */
  @javax.annotation.Nullable
  public Price getTax() {
    return tax;
  }

  public void setTax(Price tax) {
    this.tax = tax;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLineItem orderLineItem = (OrderLineItem) o;
    return Objects.equals(this.adjustments, orderLineItem.adjustments) &&
        Objects.equals(this.annotations, orderLineItem.annotations) &&
        Objects.equals(this.cancellations, orderLineItem.cancellations) &&
        Objects.equals(this.id, orderLineItem.id) &&
        Objects.equals(this.price, orderLineItem.price) &&
        Objects.equals(this.product, orderLineItem.product) &&
        Objects.equals(this.quantityCanceled, orderLineItem.quantityCanceled) &&
        Objects.equals(this.quantityDelivered, orderLineItem.quantityDelivered) &&
        Objects.equals(this.quantityOrdered, orderLineItem.quantityOrdered) &&
        Objects.equals(this.quantityPending, orderLineItem.quantityPending) &&
        Objects.equals(this.quantityReadyForPickup, orderLineItem.quantityReadyForPickup) &&
        Objects.equals(this.quantityReturned, orderLineItem.quantityReturned) &&
        Objects.equals(this.quantityShipped, orderLineItem.quantityShipped) &&
        Objects.equals(this.quantityUndeliverable, orderLineItem.quantityUndeliverable) &&
        Objects.equals(this.returnInfo, orderLineItem.returnInfo) &&
        Objects.equals(this.returns, orderLineItem.returns) &&
        Objects.equals(this.shippingDetails, orderLineItem.shippingDetails) &&
        Objects.equals(this.tax, orderLineItem.tax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustments, annotations, cancellations, id, price, product, quantityCanceled, quantityDelivered, quantityOrdered, quantityPending, quantityReadyForPickup, quantityReturned, quantityShipped, quantityUndeliverable, returnInfo, returns, shippingDetails, tax);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLineItem {\n");
    sb.append("    adjustments: ").append(toIndentedString(adjustments)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    cancellations: ").append(toIndentedString(cancellations)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    quantityCanceled: ").append(toIndentedString(quantityCanceled)).append("\n");
    sb.append("    quantityDelivered: ").append(toIndentedString(quantityDelivered)).append("\n");
    sb.append("    quantityOrdered: ").append(toIndentedString(quantityOrdered)).append("\n");
    sb.append("    quantityPending: ").append(toIndentedString(quantityPending)).append("\n");
    sb.append("    quantityReadyForPickup: ").append(toIndentedString(quantityReadyForPickup)).append("\n");
    sb.append("    quantityReturned: ").append(toIndentedString(quantityReturned)).append("\n");
    sb.append("    quantityShipped: ").append(toIndentedString(quantityShipped)).append("\n");
    sb.append("    quantityUndeliverable: ").append(toIndentedString(quantityUndeliverable)).append("\n");
    sb.append("    returnInfo: ").append(toIndentedString(returnInfo)).append("\n");
    sb.append("    returns: ").append(toIndentedString(returns)).append("\n");
    sb.append("    shippingDetails: ").append(toIndentedString(shippingDetails)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustments");
    openapiFields.add("annotations");
    openapiFields.add("cancellations");
    openapiFields.add("id");
    openapiFields.add("price");
    openapiFields.add("product");
    openapiFields.add("quantityCanceled");
    openapiFields.add("quantityDelivered");
    openapiFields.add("quantityOrdered");
    openapiFields.add("quantityPending");
    openapiFields.add("quantityReadyForPickup");
    openapiFields.add("quantityReturned");
    openapiFields.add("quantityShipped");
    openapiFields.add("quantityUndeliverable");
    openapiFields.add("returnInfo");
    openapiFields.add("returns");
    openapiFields.add("shippingDetails");
    openapiFields.add("tax");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderLineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderLineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLineItem is not found in the empty JSON string", OrderLineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderLineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderLineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("adjustments") != null && !jsonObj.get("adjustments").isJsonNull()) {
        JsonArray jsonArrayadjustments = jsonObj.getAsJsonArray("adjustments");
        if (jsonArrayadjustments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("adjustments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `adjustments` to be an array in the JSON string but got `%s`", jsonObj.get("adjustments").toString()));
          }

          // validate the optional field `adjustments` (array)
          for (int i = 0; i < jsonArrayadjustments.size(); i++) {
            OrderLineItemAdjustment.validateJsonElement(jsonArrayadjustments.get(i));
          };
        }
      }
      if (jsonObj.get("annotations") != null && !jsonObj.get("annotations").isJsonNull()) {
        JsonArray jsonArrayannotations = jsonObj.getAsJsonArray("annotations");
        if (jsonArrayannotations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("annotations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `annotations` to be an array in the JSON string but got `%s`", jsonObj.get("annotations").toString()));
          }

          // validate the optional field `annotations` (array)
          for (int i = 0; i < jsonArrayannotations.size(); i++) {
            OrderMerchantProvidedAnnotation.validateJsonElement(jsonArrayannotations.get(i));
          };
        }
      }
      if (jsonObj.get("cancellations") != null && !jsonObj.get("cancellations").isJsonNull()) {
        JsonArray jsonArraycancellations = jsonObj.getAsJsonArray("cancellations");
        if (jsonArraycancellations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cancellations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cancellations` to be an array in the JSON string but got `%s`", jsonObj.get("cancellations").toString()));
          }

          // validate the optional field `cancellations` (array)
          for (int i = 0; i < jsonArraycancellations.size(); i++) {
            OrderCancellation.validateJsonElement(jsonArraycancellations.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        OrderLineItemProduct.validateJsonElement(jsonObj.get("product"));
      }
      // validate the optional field `returnInfo`
      if (jsonObj.get("returnInfo") != null && !jsonObj.get("returnInfo").isJsonNull()) {
        OrderLineItemReturnInfo.validateJsonElement(jsonObj.get("returnInfo"));
      }
      if (jsonObj.get("returns") != null && !jsonObj.get("returns").isJsonNull()) {
        JsonArray jsonArrayreturns = jsonObj.getAsJsonArray("returns");
        if (jsonArrayreturns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("returns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `returns` to be an array in the JSON string but got `%s`", jsonObj.get("returns").toString()));
          }

          // validate the optional field `returns` (array)
          for (int i = 0; i < jsonArrayreturns.size(); i++) {
            OrderReturn.validateJsonElement(jsonArrayreturns.get(i));
          };
        }
      }
      // validate the optional field `shippingDetails`
      if (jsonObj.get("shippingDetails") != null && !jsonObj.get("shippingDetails").isJsonNull()) {
        OrderLineItemShippingDetails.validateJsonElement(jsonObj.get("shippingDetails"));
      }
      // validate the optional field `tax`
      if (jsonObj.get("tax") != null && !jsonObj.get("tax").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("tax"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLineItem>() {
           @Override
           public void write(JsonWriter out, OrderLineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderLineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderLineItem
   * @throws IOException if the JSON string is invalid with respect to OrderLineItem
   */
  public static OrderLineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLineItem.class);
  }

  /**
   * Convert an instance of OrderLineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

