/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Fields related to [competitive visibility reports] (https://support.google.com/merchants/answer/11366442).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompetitiveVisibility {
  public static final String SERIALIZED_NAME_ADS_ORGANIC_RATIO = "adsOrganicRatio";
  @SerializedName(SERIALIZED_NAME_ADS_ORGANIC_RATIO)
  private Double adsOrganicRatio;

  public static final String SERIALIZED_NAME_CATEGORY_BENCHMARK_VISIBILITY_TREND = "categoryBenchmarkVisibilityTrend";
  @SerializedName(SERIALIZED_NAME_CATEGORY_BENCHMARK_VISIBILITY_TREND)
  private Double categoryBenchmarkVisibilityTrend;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private Date date;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_HIGHER_POSITION_RATE = "higherPositionRate";
  @SerializedName(SERIALIZED_NAME_HIGHER_POSITION_RATE)
  private Double higherPositionRate;

  public static final String SERIALIZED_NAME_IS_YOUR_DOMAIN = "isYourDomain";
  @SerializedName(SERIALIZED_NAME_IS_YOUR_DOMAIN)
  private Boolean isYourDomain;

  public static final String SERIALIZED_NAME_PAGE_OVERLAP_RATE = "pageOverlapRate";
  @SerializedName(SERIALIZED_NAME_PAGE_OVERLAP_RATE)
  private Double pageOverlapRate;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private String rank;

  public static final String SERIALIZED_NAME_RELATIVE_VISIBILITY = "relativeVisibility";
  @SerializedName(SERIALIZED_NAME_RELATIVE_VISIBILITY)
  private Double relativeVisibility;

  /**
   * Type of impression listing. Required in the &#x60;SELECT&#x60; clause. Cannot be filtered on in the &#39;WHERE&#39; clause.
   */
  @JsonAdapter(TrafficSourceEnum.Adapter.class)
  public enum TrafficSourceEnum {
    UNKNOWN("UNKNOWN"),
    
    ORGANIC("ORGANIC"),
    
    ADS("ADS"),
    
    ALL("ALL");

    private String value;

    TrafficSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrafficSourceEnum fromValue(String value) {
      for (TrafficSourceEnum b : TrafficSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrafficSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrafficSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrafficSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrafficSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrafficSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRAFFIC_SOURCE = "trafficSource";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_SOURCE)
  private TrafficSourceEnum trafficSource;

  public static final String SERIALIZED_NAME_YOUR_DOMAIN_VISIBILITY_TREND = "yourDomainVisibilityTrend";
  @SerializedName(SERIALIZED_NAME_YOUR_DOMAIN_VISIBILITY_TREND)
  private Double yourDomainVisibilityTrend;

  public CompetitiveVisibility() {
  }

  public CompetitiveVisibility adsOrganicRatio(Double adsOrganicRatio) {
    this.adsOrganicRatio = adsOrganicRatio;
    return this;
  }

  /**
   * [Ads / organic ratio] (https://support.google.com/merchants/answer/11366442#zippy&#x3D;%2Cadsfree-ratio) shows how often a merchant receives impressions from Shopping ads compared to organic traffic. The number is rounded and bucketed. Available only in &#x60;CompetitiveVisibilityTopMerchantView&#x60; and &#x60;CompetitiveVisibilityCompetitorView&#x60;. Cannot be filtered on in the &#39;WHERE&#39; clause.
   * @return adsOrganicRatio
   */
  @javax.annotation.Nullable
  public Double getAdsOrganicRatio() {
    return adsOrganicRatio;
  }

  public void setAdsOrganicRatio(Double adsOrganicRatio) {
    this.adsOrganicRatio = adsOrganicRatio;
  }


  public CompetitiveVisibility categoryBenchmarkVisibilityTrend(Double categoryBenchmarkVisibilityTrend) {
    this.categoryBenchmarkVisibilityTrend = categoryBenchmarkVisibilityTrend;
    return this;
  }

  /**
   * Change in visibility based on impressions with respect to the start of the selected time range (or first day with non-zero impressions) for a combined set of merchants with highest visibility approximating the market. Available only in &#x60;CompetitiveVisibilityBenchmarkView&#x60;. Cannot be filtered on in the &#39;WHERE&#39; clause.
   * @return categoryBenchmarkVisibilityTrend
   */
  @javax.annotation.Nullable
  public Double getCategoryBenchmarkVisibilityTrend() {
    return categoryBenchmarkVisibilityTrend;
  }

  public void setCategoryBenchmarkVisibilityTrend(Double categoryBenchmarkVisibilityTrend) {
    this.categoryBenchmarkVisibilityTrend = categoryBenchmarkVisibilityTrend;
  }


  public CompetitiveVisibility categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Google product category ID to calculate the report for, represented in [Google&#39;s product taxonomy](https://support.google.com/merchants/answer/6324436). Required in the &#x60;SELECT&#x60; clause. A &#x60;WHERE&#x60; condition on &#x60;competitive_visibility.category_id&#x60; is required in the query.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public CompetitiveVisibility countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The country where impression appeared. Required in the &#x60;SELECT&#x60; clause. A &#x60;WHERE&#x60; condition on &#x60;competitive_visibility.country_code&#x60; is required in the query.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public CompetitiveVisibility date(Date date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public Date getDate() {
    return date;
  }

  public void setDate(Date date) {
    this.date = date;
  }


  public CompetitiveVisibility domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Domain of your competitor or your domain, if &#39;is_your_domain&#39; is true. Available only in &#x60;CompetitiveVisibilityTopMerchantView&#x60; and &#x60;CompetitiveVisibilityCompetitorView&#x60;. Required in the &#x60;SELECT&#x60; clause for &#x60;CompetitiveVisibilityTopMerchantView&#x60; and &#x60;CompetitiveVisibilityCompetitorView&#x60;. Cannot be filtered on in the &#39;WHERE&#39; clause.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public CompetitiveVisibility higherPositionRate(Double higherPositionRate) {
    this.higherPositionRate = higherPositionRate;
    return this;
  }

  /**
   * Higher position rate shows how often a competitorâ€™s offer got placed in a higher position on the page than your offer. Available only in &#x60;CompetitiveVisibilityTopMerchantView&#x60; and &#x60;CompetitiveVisibilityCompetitorView&#x60;. Cannot be filtered on in the &#39;WHERE&#39; clause.
   * @return higherPositionRate
   */
  @javax.annotation.Nullable
  public Double getHigherPositionRate() {
    return higherPositionRate;
  }

  public void setHigherPositionRate(Double higherPositionRate) {
    this.higherPositionRate = higherPositionRate;
  }


  public CompetitiveVisibility isYourDomain(Boolean isYourDomain) {
    this.isYourDomain = isYourDomain;
    return this;
  }

  /**
   * True if this row contains data for your domain. Available only in &#x60;CompetitiveVisibilityTopMerchantView&#x60; and &#x60;CompetitiveVisibilityCompetitorView&#x60;. Cannot be filtered on in the &#39;WHERE&#39; clause.
   * @return isYourDomain
   */
  @javax.annotation.Nullable
  public Boolean getIsYourDomain() {
    return isYourDomain;
  }

  public void setIsYourDomain(Boolean isYourDomain) {
    this.isYourDomain = isYourDomain;
  }


  public CompetitiveVisibility pageOverlapRate(Double pageOverlapRate) {
    this.pageOverlapRate = pageOverlapRate;
    return this;
  }

  /**
   * Page overlap rate describes how frequently competing retailersâ€™ offers are shown together with your offers on the same page. Available only in &#x60;CompetitiveVisibilityTopMerchantView&#x60; and &#x60;CompetitiveVisibilityCompetitorView&#x60;. Cannot be filtered on in the &#39;WHERE&#39; clause.
   * @return pageOverlapRate
   */
  @javax.annotation.Nullable
  public Double getPageOverlapRate() {
    return pageOverlapRate;
  }

  public void setPageOverlapRate(Double pageOverlapRate) {
    this.pageOverlapRate = pageOverlapRate;
  }


  public CompetitiveVisibility rank(String rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Position of the domain in the top merchants ranking for the selected keys (&#x60;date&#x60;, &#x60;category_id&#x60;, &#x60;country_code&#x60;, &#x60;listing_type&#x60;) based on impressions. 1 is the highest. Available only in &#x60;CompetitiveVisibilityTopMerchantView&#x60; and &#x60;CompetitiveVisibilityCompetitorView&#x60;. Cannot be filtered on in the &#39;WHERE&#39; clause.
   * @return rank
   */
  @javax.annotation.Nullable
  public String getRank() {
    return rank;
  }

  public void setRank(String rank) {
    this.rank = rank;
  }


  public CompetitiveVisibility relativeVisibility(Double relativeVisibility) {
    this.relativeVisibility = relativeVisibility;
    return this;
  }

  /**
   * Relative visibility shows how often your competitorsâ€™ offers are shown compared to your offers. In other words, this is the number of displayed impressions of a competitor retailer divided by the number of your displayed impressions during a selected time range for a selected product category and country. Available only in &#x60;CompetitiveVisibilityCompetitorView&#x60;. Cannot be filtered on in the &#39;WHERE&#39; clause.
   * @return relativeVisibility
   */
  @javax.annotation.Nullable
  public Double getRelativeVisibility() {
    return relativeVisibility;
  }

  public void setRelativeVisibility(Double relativeVisibility) {
    this.relativeVisibility = relativeVisibility;
  }


  public CompetitiveVisibility trafficSource(TrafficSourceEnum trafficSource) {
    this.trafficSource = trafficSource;
    return this;
  }

  /**
   * Type of impression listing. Required in the &#x60;SELECT&#x60; clause. Cannot be filtered on in the &#39;WHERE&#39; clause.
   * @return trafficSource
   */
  @javax.annotation.Nullable
  public TrafficSourceEnum getTrafficSource() {
    return trafficSource;
  }

  public void setTrafficSource(TrafficSourceEnum trafficSource) {
    this.trafficSource = trafficSource;
  }


  public CompetitiveVisibility yourDomainVisibilityTrend(Double yourDomainVisibilityTrend) {
    this.yourDomainVisibilityTrend = yourDomainVisibilityTrend;
    return this;
  }

  /**
   * Change in visibility based on impressions for your domain with respect to the start of the selected time range (or first day with non-zero impressions). Available only in &#x60;CompetitiveVisibilityBenchmarkView&#x60;. Cannot be filtered on in the &#39;WHERE&#39; clause.
   * @return yourDomainVisibilityTrend
   */
  @javax.annotation.Nullable
  public Double getYourDomainVisibilityTrend() {
    return yourDomainVisibilityTrend;
  }

  public void setYourDomainVisibilityTrend(Double yourDomainVisibilityTrend) {
    this.yourDomainVisibilityTrend = yourDomainVisibilityTrend;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompetitiveVisibility competitiveVisibility = (CompetitiveVisibility) o;
    return Objects.equals(this.adsOrganicRatio, competitiveVisibility.adsOrganicRatio) &&
        Objects.equals(this.categoryBenchmarkVisibilityTrend, competitiveVisibility.categoryBenchmarkVisibilityTrend) &&
        Objects.equals(this.categoryId, competitiveVisibility.categoryId) &&
        Objects.equals(this.countryCode, competitiveVisibility.countryCode) &&
        Objects.equals(this.date, competitiveVisibility.date) &&
        Objects.equals(this.domain, competitiveVisibility.domain) &&
        Objects.equals(this.higherPositionRate, competitiveVisibility.higherPositionRate) &&
        Objects.equals(this.isYourDomain, competitiveVisibility.isYourDomain) &&
        Objects.equals(this.pageOverlapRate, competitiveVisibility.pageOverlapRate) &&
        Objects.equals(this.rank, competitiveVisibility.rank) &&
        Objects.equals(this.relativeVisibility, competitiveVisibility.relativeVisibility) &&
        Objects.equals(this.trafficSource, competitiveVisibility.trafficSource) &&
        Objects.equals(this.yourDomainVisibilityTrend, competitiveVisibility.yourDomainVisibilityTrend);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adsOrganicRatio, categoryBenchmarkVisibilityTrend, categoryId, countryCode, date, domain, higherPositionRate, isYourDomain, pageOverlapRate, rank, relativeVisibility, trafficSource, yourDomainVisibilityTrend);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompetitiveVisibility {\n");
    sb.append("    adsOrganicRatio: ").append(toIndentedString(adsOrganicRatio)).append("\n");
    sb.append("    categoryBenchmarkVisibilityTrend: ").append(toIndentedString(categoryBenchmarkVisibilityTrend)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    higherPositionRate: ").append(toIndentedString(higherPositionRate)).append("\n");
    sb.append("    isYourDomain: ").append(toIndentedString(isYourDomain)).append("\n");
    sb.append("    pageOverlapRate: ").append(toIndentedString(pageOverlapRate)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    relativeVisibility: ").append(toIndentedString(relativeVisibility)).append("\n");
    sb.append("    trafficSource: ").append(toIndentedString(trafficSource)).append("\n");
    sb.append("    yourDomainVisibilityTrend: ").append(toIndentedString(yourDomainVisibilityTrend)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adsOrganicRatio");
    openapiFields.add("categoryBenchmarkVisibilityTrend");
    openapiFields.add("categoryId");
    openapiFields.add("countryCode");
    openapiFields.add("date");
    openapiFields.add("domain");
    openapiFields.add("higherPositionRate");
    openapiFields.add("isYourDomain");
    openapiFields.add("pageOverlapRate");
    openapiFields.add("rank");
    openapiFields.add("relativeVisibility");
    openapiFields.add("trafficSource");
    openapiFields.add("yourDomainVisibilityTrend");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompetitiveVisibility
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompetitiveVisibility.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompetitiveVisibility is not found in the empty JSON string", CompetitiveVisibility.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompetitiveVisibility.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompetitiveVisibility` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // validate the optional field `date`
      if (jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("date"));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("rank") != null && !jsonObj.get("rank").isJsonNull()) && !jsonObj.get("rank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rank").toString()));
      }
      if ((jsonObj.get("trafficSource") != null && !jsonObj.get("trafficSource").isJsonNull()) && !jsonObj.get("trafficSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trafficSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trafficSource").toString()));
      }
      // validate the optional field `trafficSource`
      if (jsonObj.get("trafficSource") != null && !jsonObj.get("trafficSource").isJsonNull()) {
        TrafficSourceEnum.validateJsonElement(jsonObj.get("trafficSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompetitiveVisibility.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompetitiveVisibility' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompetitiveVisibility> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompetitiveVisibility.class));

       return (TypeAdapter<T>) new TypeAdapter<CompetitiveVisibility>() {
           @Override
           public void write(JsonWriter out, CompetitiveVisibility value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompetitiveVisibility read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompetitiveVisibility given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompetitiveVisibility
   * @throws IOException if the JSON string is invalid with respect to CompetitiveVisibility
   */
  public static CompetitiveVisibility fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompetitiveVisibility.class);
  }

  /**
   * Convert an instance of CompetitiveVisibility to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

