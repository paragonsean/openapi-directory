/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Settlement reports detail order-level and item-level credits and debits between you and Google.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SettlementReport {
  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PREVIOUS_BALANCE = "previousBalance";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_BALANCE)
  private Price previousBalance;

  public static final String SERIALIZED_NAME_SETTLEMENT_ID = "settlementId";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_ID)
  private String settlementId;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_TRANSFER_AMOUNT = "transferAmount";
  @SerializedName(SERIALIZED_NAME_TRANSFER_AMOUNT)
  private Price transferAmount;

  public static final String SERIALIZED_NAME_TRANSFER_DATE = "transferDate";
  @SerializedName(SERIALIZED_NAME_TRANSFER_DATE)
  private String transferDate;

  public static final String SERIALIZED_NAME_TRANSFER_IDS = "transferIds";
  @SerializedName(SERIALIZED_NAME_TRANSFER_IDS)
  private List<String> transferIds = new ArrayList<>();

  public SettlementReport() {
  }

  public SettlementReport endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The end date on which all transactions are included in the report, in ISO 8601 format.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public SettlementReport kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;&#x60;content#settlementReport&#x60;\&quot;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public SettlementReport previousBalance(Price previousBalance) {
    this.previousBalance = previousBalance;
    return this;
  }

  /**
   * Get previousBalance
   * @return previousBalance
   */
  @javax.annotation.Nullable
  public Price getPreviousBalance() {
    return previousBalance;
  }

  public void setPreviousBalance(Price previousBalance) {
    this.previousBalance = previousBalance;
  }


  public SettlementReport settlementId(String settlementId) {
    this.settlementId = settlementId;
    return this;
  }

  /**
   * The ID of the settlement report.
   * @return settlementId
   */
  @javax.annotation.Nullable
  public String getSettlementId() {
    return settlementId;
  }

  public void setSettlementId(String settlementId) {
    this.settlementId = settlementId;
  }


  public SettlementReport startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The start date on which all transactions are included in the report, in ISO 8601 format.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public SettlementReport transferAmount(Price transferAmount) {
    this.transferAmount = transferAmount;
    return this;
  }

  /**
   * Get transferAmount
   * @return transferAmount
   */
  @javax.annotation.Nullable
  public Price getTransferAmount() {
    return transferAmount;
  }

  public void setTransferAmount(Price transferAmount) {
    this.transferAmount = transferAmount;
  }


  public SettlementReport transferDate(String transferDate) {
    this.transferDate = transferDate;
    return this;
  }

  /**
   * Date on which transfer for this payment was initiated by Google, in ISO 8601 format.
   * @return transferDate
   */
  @javax.annotation.Nullable
  public String getTransferDate() {
    return transferDate;
  }

  public void setTransferDate(String transferDate) {
    this.transferDate = transferDate;
  }


  public SettlementReport transferIds(List<String> transferIds) {
    this.transferIds = transferIds;
    return this;
  }

  public SettlementReport addTransferIdsItem(String transferIdsItem) {
    if (this.transferIds == null) {
      this.transferIds = new ArrayList<>();
    }
    this.transferIds.add(transferIdsItem);
    return this;
  }

  /**
   * The list of bank identifiers used for the transfer. For example, Trace ID for Federal Automated Clearing House (ACH). This may also be known as the Wire ID.
   * @return transferIds
   */
  @javax.annotation.Nullable
  public List<String> getTransferIds() {
    return transferIds;
  }

  public void setTransferIds(List<String> transferIds) {
    this.transferIds = transferIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementReport settlementReport = (SettlementReport) o;
    return Objects.equals(this.endDate, settlementReport.endDate) &&
        Objects.equals(this.kind, settlementReport.kind) &&
        Objects.equals(this.previousBalance, settlementReport.previousBalance) &&
        Objects.equals(this.settlementId, settlementReport.settlementId) &&
        Objects.equals(this.startDate, settlementReport.startDate) &&
        Objects.equals(this.transferAmount, settlementReport.transferAmount) &&
        Objects.equals(this.transferDate, settlementReport.transferDate) &&
        Objects.equals(this.transferIds, settlementReport.transferIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endDate, kind, previousBalance, settlementId, startDate, transferAmount, transferDate, transferIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementReport {\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    previousBalance: ").append(toIndentedString(previousBalance)).append("\n");
    sb.append("    settlementId: ").append(toIndentedString(settlementId)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    transferAmount: ").append(toIndentedString(transferAmount)).append("\n");
    sb.append("    transferDate: ").append(toIndentedString(transferDate)).append("\n");
    sb.append("    transferIds: ").append(toIndentedString(transferIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endDate");
    openapiFields.add("kind");
    openapiFields.add("previousBalance");
    openapiFields.add("settlementId");
    openapiFields.add("startDate");
    openapiFields.add("transferAmount");
    openapiFields.add("transferDate");
    openapiFields.add("transferIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SettlementReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SettlementReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SettlementReport is not found in the empty JSON string", SettlementReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SettlementReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SettlementReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `previousBalance`
      if (jsonObj.get("previousBalance") != null && !jsonObj.get("previousBalance").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("previousBalance"));
      }
      if ((jsonObj.get("settlementId") != null && !jsonObj.get("settlementId").isJsonNull()) && !jsonObj.get("settlementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settlementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settlementId").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      // validate the optional field `transferAmount`
      if (jsonObj.get("transferAmount") != null && !jsonObj.get("transferAmount").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("transferAmount"));
      }
      if ((jsonObj.get("transferDate") != null && !jsonObj.get("transferDate").isJsonNull()) && !jsonObj.get("transferDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferDate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transferIds") != null && !jsonObj.get("transferIds").isJsonNull() && !jsonObj.get("transferIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferIds` to be an array in the JSON string but got `%s`", jsonObj.get("transferIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettlementReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettlementReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettlementReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettlementReport.class));

       return (TypeAdapter<T>) new TypeAdapter<SettlementReport>() {
           @Override
           public void write(JsonWriter out, SettlementReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettlementReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SettlementReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SettlementReport
   * @throws IOException if the JSON string is invalid with respect to SettlementReport
   */
  public static SettlementReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettlementReport.class);
  }

  /**
   * Convert an instance of SettlementReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

