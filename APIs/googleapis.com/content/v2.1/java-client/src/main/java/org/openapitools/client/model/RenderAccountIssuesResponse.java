/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountIssue;
import org.openapitools.client.model.AlternateDisputeResolution;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response containing support content and actions for listed account issues.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RenderAccountIssuesResponse {
  public static final String SERIALIZED_NAME_ALTERNATE_DISPUTE_RESOLUTION = "alternateDisputeResolution";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_DISPUTE_RESOLUTION)
  private AlternateDisputeResolution alternateDisputeResolution;

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private List<AccountIssue> issues = new ArrayList<>();

  public RenderAccountIssuesResponse() {
  }

  public RenderAccountIssuesResponse alternateDisputeResolution(AlternateDisputeResolution alternateDisputeResolution) {
    this.alternateDisputeResolution = alternateDisputeResolution;
    return this;
  }

  /**
   * Get alternateDisputeResolution
   * @return alternateDisputeResolution
   */
  @javax.annotation.Nullable
  public AlternateDisputeResolution getAlternateDisputeResolution() {
    return alternateDisputeResolution;
  }

  public void setAlternateDisputeResolution(AlternateDisputeResolution alternateDisputeResolution) {
    this.alternateDisputeResolution = alternateDisputeResolution;
  }


  public RenderAccountIssuesResponse issues(List<AccountIssue> issues) {
    this.issues = issues;
    return this;
  }

  public RenderAccountIssuesResponse addIssuesItem(AccountIssue issuesItem) {
    if (this.issues == null) {
      this.issues = new ArrayList<>();
    }
    this.issues.add(issuesItem);
    return this;
  }

  /**
   * List of account issues for a given account. This list can be shown with compressed, expandable items. In the compressed form, the title and impact should be shown for each issue. Once the issue is expanded, the detailed content and available actions should be rendered.
   * @return issues
   */
  @javax.annotation.Nullable
  public List<AccountIssue> getIssues() {
    return issues;
  }

  public void setIssues(List<AccountIssue> issues) {
    this.issues = issues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RenderAccountIssuesResponse renderAccountIssuesResponse = (RenderAccountIssuesResponse) o;
    return Objects.equals(this.alternateDisputeResolution, renderAccountIssuesResponse.alternateDisputeResolution) &&
        Objects.equals(this.issues, renderAccountIssuesResponse.issues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateDisputeResolution, issues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RenderAccountIssuesResponse {\n");
    sb.append("    alternateDisputeResolution: ").append(toIndentedString(alternateDisputeResolution)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateDisputeResolution");
    openapiFields.add("issues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RenderAccountIssuesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RenderAccountIssuesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RenderAccountIssuesResponse is not found in the empty JSON string", RenderAccountIssuesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RenderAccountIssuesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RenderAccountIssuesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alternateDisputeResolution`
      if (jsonObj.get("alternateDisputeResolution") != null && !jsonObj.get("alternateDisputeResolution").isJsonNull()) {
        AlternateDisputeResolution.validateJsonElement(jsonObj.get("alternateDisputeResolution"));
      }
      if (jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull()) {
        JsonArray jsonArrayissues = jsonObj.getAsJsonArray("issues");
        if (jsonArrayissues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("issues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `issues` to be an array in the JSON string but got `%s`", jsonObj.get("issues").toString()));
          }

          // validate the optional field `issues` (array)
          for (int i = 0; i < jsonArrayissues.size(); i++) {
            AccountIssue.validateJsonElement(jsonArrayissues.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RenderAccountIssuesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RenderAccountIssuesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RenderAccountIssuesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RenderAccountIssuesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RenderAccountIssuesResponse>() {
           @Override
           public void write(JsonWriter out, RenderAccountIssuesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RenderAccountIssuesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RenderAccountIssuesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RenderAccountIssuesResponse
   * @throws IOException if the JSON string is invalid with respect to RenderAccountIssuesResponse
   */
  public static RenderAccountIssuesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RenderAccountIssuesResponse.class);
  }

  /**
   * Convert an instance of RenderAccountIssuesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

