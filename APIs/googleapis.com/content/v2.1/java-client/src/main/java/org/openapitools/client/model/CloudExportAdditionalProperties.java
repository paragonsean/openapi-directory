/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Product property for the Cloud Retail API. For example, properties for a TV product could be \&quot;Screen-Resolution\&quot; or \&quot;Screen-Size\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudExportAdditionalProperties {
  public static final String SERIALIZED_NAME_BOOL_VALUE = "boolValue";
  @SerializedName(SERIALIZED_NAME_BOOL_VALUE)
  private Boolean boolValue;

  public static final String SERIALIZED_NAME_FLOAT_VALUE = "floatValue";
  @SerializedName(SERIALIZED_NAME_FLOAT_VALUE)
  private List<Float> floatValue = new ArrayList<>();

  public static final String SERIALIZED_NAME_INT_VALUE = "intValue";
  @SerializedName(SERIALIZED_NAME_INT_VALUE)
  private List<String> intValue = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Float maxValue;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Float minValue;

  public static final String SERIALIZED_NAME_PROPERTY_NAME = "propertyName";
  @SerializedName(SERIALIZED_NAME_PROPERTY_NAME)
  private String propertyName;

  public static final String SERIALIZED_NAME_TEXT_VALUE = "textValue";
  @SerializedName(SERIALIZED_NAME_TEXT_VALUE)
  private List<String> textValue = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_CODE = "unitCode";
  @SerializedName(SERIALIZED_NAME_UNIT_CODE)
  private String unitCode;

  public CloudExportAdditionalProperties() {
  }

  public CloudExportAdditionalProperties boolValue(Boolean boolValue) {
    this.boolValue = boolValue;
    return this;
  }

  /**
   * Boolean value of the given property. For example for a TV product, \&quot;True\&quot; or \&quot;False\&quot; if the screen is UHD.
   * @return boolValue
   */
  @javax.annotation.Nullable
  public Boolean getBoolValue() {
    return boolValue;
  }

  public void setBoolValue(Boolean boolValue) {
    this.boolValue = boolValue;
  }


  public CloudExportAdditionalProperties floatValue(List<Float> floatValue) {
    this.floatValue = floatValue;
    return this;
  }

  public CloudExportAdditionalProperties addFloatValueItem(Float floatValueItem) {
    if (this.floatValue == null) {
      this.floatValue = new ArrayList<>();
    }
    this.floatValue.add(floatValueItem);
    return this;
  }

  /**
   * Float values of the given property. For example for a TV product 1.2345. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order.
   * @return floatValue
   */
  @javax.annotation.Nullable
  public List<Float> getFloatValue() {
    return floatValue;
  }

  public void setFloatValue(List<Float> floatValue) {
    this.floatValue = floatValue;
  }


  public CloudExportAdditionalProperties intValue(List<String> intValue) {
    this.intValue = intValue;
    return this;
  }

  public CloudExportAdditionalProperties addIntValueItem(String intValueItem) {
    if (this.intValue == null) {
      this.intValue = new ArrayList<>();
    }
    this.intValue.add(intValueItem);
    return this;
  }

  /**
   * Integer values of the given property. For example, 1080 for a screen resolution of a TV product. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order.
   * @return intValue
   */
  @javax.annotation.Nullable
  public List<String> getIntValue() {
    return intValue;
  }

  public void setIntValue(List<String> intValue) {
    this.intValue = intValue;
  }


  public CloudExportAdditionalProperties maxValue(Float maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * Maximum float value of the given property. For example for a TV product 100.00.
   * @return maxValue
   */
  @javax.annotation.Nullable
  public Float getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(Float maxValue) {
    this.maxValue = maxValue;
  }


  public CloudExportAdditionalProperties minValue(Float minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * Minimum float value of the given property. For example for a TV product 1.00.
   * @return minValue
   */
  @javax.annotation.Nullable
  public Float getMinValue() {
    return minValue;
  }

  public void setMinValue(Float minValue) {
    this.minValue = minValue;
  }


  public CloudExportAdditionalProperties propertyName(String propertyName) {
    this.propertyName = propertyName;
    return this;
  }

  /**
   * Name of the given property. For example, \&quot;Screen-Resolution\&quot; for a TV product. Maximum string size is 256 characters.
   * @return propertyName
   */
  @javax.annotation.Nullable
  public String getPropertyName() {
    return propertyName;
  }

  public void setPropertyName(String propertyName) {
    this.propertyName = propertyName;
  }


  public CloudExportAdditionalProperties textValue(List<String> textValue) {
    this.textValue = textValue;
    return this;
  }

  public CloudExportAdditionalProperties addTextValueItem(String textValueItem) {
    if (this.textValue == null) {
      this.textValue = new ArrayList<>();
    }
    this.textValue.add(textValueItem);
    return this;
  }

  /**
   * Text value of the given property. For example, \&quot;8K(UHD)\&quot; could be a text value for a TV product. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order. Maximum string size is 256 characters.
   * @return textValue
   */
  @javax.annotation.Nullable
  public List<String> getTextValue() {
    return textValue;
  }

  public void setTextValue(List<String> textValue) {
    this.textValue = textValue;
  }


  public CloudExportAdditionalProperties unitCode(String unitCode) {
    this.unitCode = unitCode;
    return this;
  }

  /**
   * Unit of the given property. For example, \&quot;Pixels\&quot; for a TV product. Maximum string size is 256 bytes.
   * @return unitCode
   */
  @javax.annotation.Nullable
  public String getUnitCode() {
    return unitCode;
  }

  public void setUnitCode(String unitCode) {
    this.unitCode = unitCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudExportAdditionalProperties cloudExportAdditionalProperties = (CloudExportAdditionalProperties) o;
    return Objects.equals(this.boolValue, cloudExportAdditionalProperties.boolValue) &&
        Objects.equals(this.floatValue, cloudExportAdditionalProperties.floatValue) &&
        Objects.equals(this.intValue, cloudExportAdditionalProperties.intValue) &&
        Objects.equals(this.maxValue, cloudExportAdditionalProperties.maxValue) &&
        Objects.equals(this.minValue, cloudExportAdditionalProperties.minValue) &&
        Objects.equals(this.propertyName, cloudExportAdditionalProperties.propertyName) &&
        Objects.equals(this.textValue, cloudExportAdditionalProperties.textValue) &&
        Objects.equals(this.unitCode, cloudExportAdditionalProperties.unitCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boolValue, floatValue, intValue, maxValue, minValue, propertyName, textValue, unitCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudExportAdditionalProperties {\n");
    sb.append("    boolValue: ").append(toIndentedString(boolValue)).append("\n");
    sb.append("    floatValue: ").append(toIndentedString(floatValue)).append("\n");
    sb.append("    intValue: ").append(toIndentedString(intValue)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    propertyName: ").append(toIndentedString(propertyName)).append("\n");
    sb.append("    textValue: ").append(toIndentedString(textValue)).append("\n");
    sb.append("    unitCode: ").append(toIndentedString(unitCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boolValue");
    openapiFields.add("floatValue");
    openapiFields.add("intValue");
    openapiFields.add("maxValue");
    openapiFields.add("minValue");
    openapiFields.add("propertyName");
    openapiFields.add("textValue");
    openapiFields.add("unitCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudExportAdditionalProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudExportAdditionalProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudExportAdditionalProperties is not found in the empty JSON string", CloudExportAdditionalProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudExportAdditionalProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudExportAdditionalProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("floatValue") != null && !jsonObj.get("floatValue").isJsonNull() && !jsonObj.get("floatValue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `floatValue` to be an array in the JSON string but got `%s`", jsonObj.get("floatValue").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("intValue") != null && !jsonObj.get("intValue").isJsonNull() && !jsonObj.get("intValue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `intValue` to be an array in the JSON string but got `%s`", jsonObj.get("intValue").toString()));
      }
      if ((jsonObj.get("propertyName") != null && !jsonObj.get("propertyName").isJsonNull()) && !jsonObj.get("propertyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("textValue") != null && !jsonObj.get("textValue").isJsonNull() && !jsonObj.get("textValue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `textValue` to be an array in the JSON string but got `%s`", jsonObj.get("textValue").toString()));
      }
      if ((jsonObj.get("unitCode") != null && !jsonObj.get("unitCode").isJsonNull()) && !jsonObj.get("unitCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudExportAdditionalProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudExportAdditionalProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudExportAdditionalProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudExportAdditionalProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudExportAdditionalProperties>() {
           @Override
           public void write(JsonWriter out, CloudExportAdditionalProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudExportAdditionalProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudExportAdditionalProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudExportAdditionalProperties
   * @throws IOException if the JSON string is invalid with respect to CloudExportAdditionalProperties
   */
  public static CloudExportAdditionalProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudExportAdditionalProperties.class);
  }

  /**
   * Convert an instance of CloudExportAdditionalProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

