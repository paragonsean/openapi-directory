/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Label assigned by CSS domain or CSS group to one of its sub-accounts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountLabel {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LABEL_ID = "labelId";
  @SerializedName(SERIALIZED_NAME_LABEL_ID)
  private String labelId;

  /**
   * Output only. The type of this label.
   */
  @JsonAdapter(LabelTypeEnum.Adapter.class)
  public enum LabelTypeEnum {
    LABEL_TYPE_UNSPECIFIED("LABEL_TYPE_UNSPECIFIED"),
    
    MANUAL("MANUAL"),
    
    AUTOMATIC("AUTOMATIC");

    private String value;

    LabelTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LabelTypeEnum fromValue(String value) {
      for (LabelTypeEnum b : LabelTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LabelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabelTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LabelTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LabelTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LabelTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LABEL_TYPE = "labelType";
  @SerializedName(SERIALIZED_NAME_LABEL_TYPE)
  private LabelTypeEnum labelType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public AccountLabel() {
  }

  public AccountLabel(
     String labelId, 
     LabelTypeEnum labelType
  ) {
    this();
    this.labelId = labelId;
    this.labelType = labelType;
  }

  public AccountLabel accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Immutable. The ID of account this label belongs to.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public AccountLabel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of this label.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. The ID of the label.
   * @return labelId
   */
  @javax.annotation.Nullable
  public String getLabelId() {
    return labelId;
  }



  /**
   * Output only. The type of this label.
   * @return labelType
   */
  @javax.annotation.Nullable
  public LabelTypeEnum getLabelType() {
    return labelType;
  }



  public AccountLabel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The display name of this label.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountLabel accountLabel = (AccountLabel) o;
    return Objects.equals(this.accountId, accountLabel.accountId) &&
        Objects.equals(this.description, accountLabel.description) &&
        Objects.equals(this.labelId, accountLabel.labelId) &&
        Objects.equals(this.labelType, accountLabel.labelType) &&
        Objects.equals(this.name, accountLabel.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, description, labelId, labelType, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountLabel {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labelId: ").append(toIndentedString(labelId)).append("\n");
    sb.append("    labelType: ").append(toIndentedString(labelType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("description");
    openapiFields.add("labelId");
    openapiFields.add("labelType");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountLabel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountLabel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountLabel is not found in the empty JSON string", AccountLabel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountLabel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountLabel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("labelId") != null && !jsonObj.get("labelId").isJsonNull()) && !jsonObj.get("labelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelId").toString()));
      }
      if ((jsonObj.get("labelType") != null && !jsonObj.get("labelType").isJsonNull()) && !jsonObj.get("labelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelType").toString()));
      }
      // validate the optional field `labelType`
      if (jsonObj.get("labelType") != null && !jsonObj.get("labelType").isJsonNull()) {
        LabelTypeEnum.validateJsonElement(jsonObj.get("labelType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountLabel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountLabel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountLabel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountLabel.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountLabel>() {
           @Override
           public void write(JsonWriter out, AccountLabel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountLabel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountLabel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountLabel
   * @throws IOException if the JSON string is invalid with respect to AccountLabel
   */
  public static AccountLabel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountLabel.class);
  }

  /**
   * Convert an instance of AccountLabel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

