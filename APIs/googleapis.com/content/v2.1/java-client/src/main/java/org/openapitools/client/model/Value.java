/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The single value of a rate group or the value of a rate group table&#39;s cell. Exactly one of &#x60;noShipping&#x60;, &#x60;flatRate&#x60;, &#x60;pricePercentage&#x60;, &#x60;carrierRateName&#x60;, &#x60;subtableName&#x60; must be set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Value {
  public static final String SERIALIZED_NAME_CARRIER_RATE_NAME = "carrierRateName";
  @SerializedName(SERIALIZED_NAME_CARRIER_RATE_NAME)
  private String carrierRateName;

  public static final String SERIALIZED_NAME_FLAT_RATE = "flatRate";
  @SerializedName(SERIALIZED_NAME_FLAT_RATE)
  private Price flatRate;

  public static final String SERIALIZED_NAME_NO_SHIPPING = "noShipping";
  @SerializedName(SERIALIZED_NAME_NO_SHIPPING)
  private Boolean noShipping;

  public static final String SERIALIZED_NAME_PRICE_PERCENTAGE = "pricePercentage";
  @SerializedName(SERIALIZED_NAME_PRICE_PERCENTAGE)
  private String pricePercentage;

  public static final String SERIALIZED_NAME_SUBTABLE_NAME = "subtableName";
  @SerializedName(SERIALIZED_NAME_SUBTABLE_NAME)
  private String subtableName;

  public Value() {
  }

  public Value carrierRateName(String carrierRateName) {
    this.carrierRateName = carrierRateName;
    return this;
  }

  /**
   * The name of a carrier rate referring to a carrier rate defined in the same rate group. Can only be set if all other fields are not set.
   * @return carrierRateName
   */
  @javax.annotation.Nullable
  public String getCarrierRateName() {
    return carrierRateName;
  }

  public void setCarrierRateName(String carrierRateName) {
    this.carrierRateName = carrierRateName;
  }


  public Value flatRate(Price flatRate) {
    this.flatRate = flatRate;
    return this;
  }

  /**
   * Get flatRate
   * @return flatRate
   */
  @javax.annotation.Nullable
  public Price getFlatRate() {
    return flatRate;
  }

  public void setFlatRate(Price flatRate) {
    this.flatRate = flatRate;
  }


  public Value noShipping(Boolean noShipping) {
    this.noShipping = noShipping;
    return this;
  }

  /**
   * If true, then the product can&#39;t ship. Must be true when set, can only be set if all other fields are not set.
   * @return noShipping
   */
  @javax.annotation.Nullable
  public Boolean getNoShipping() {
    return noShipping;
  }

  public void setNoShipping(Boolean noShipping) {
    this.noShipping = noShipping;
  }


  public Value pricePercentage(String pricePercentage) {
    this.pricePercentage = pricePercentage;
    return this;
  }

  /**
   * A percentage of the price represented as a number in decimal notation (for example, &#x60;\&quot;5.4\&quot;&#x60;). Can only be set if all other fields are not set.
   * @return pricePercentage
   */
  @javax.annotation.Nullable
  public String getPricePercentage() {
    return pricePercentage;
  }

  public void setPricePercentage(String pricePercentage) {
    this.pricePercentage = pricePercentage;
  }


  public Value subtableName(String subtableName) {
    this.subtableName = subtableName;
    return this;
  }

  /**
   * The name of a subtable. Can only be set in table cells (not for single values), and only if all other fields are not set.
   * @return subtableName
   */
  @javax.annotation.Nullable
  public String getSubtableName() {
    return subtableName;
  }

  public void setSubtableName(String subtableName) {
    this.subtableName = subtableName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Value value = (Value) o;
    return Objects.equals(this.carrierRateName, value.carrierRateName) &&
        Objects.equals(this.flatRate, value.flatRate) &&
        Objects.equals(this.noShipping, value.noShipping) &&
        Objects.equals(this.pricePercentage, value.pricePercentage) &&
        Objects.equals(this.subtableName, value.subtableName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrierRateName, flatRate, noShipping, pricePercentage, subtableName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Value {\n");
    sb.append("    carrierRateName: ").append(toIndentedString(carrierRateName)).append("\n");
    sb.append("    flatRate: ").append(toIndentedString(flatRate)).append("\n");
    sb.append("    noShipping: ").append(toIndentedString(noShipping)).append("\n");
    sb.append("    pricePercentage: ").append(toIndentedString(pricePercentage)).append("\n");
    sb.append("    subtableName: ").append(toIndentedString(subtableName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carrierRateName");
    openapiFields.add("flatRate");
    openapiFields.add("noShipping");
    openapiFields.add("pricePercentage");
    openapiFields.add("subtableName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Value
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Value.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Value is not found in the empty JSON string", Value.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Value.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Value` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("carrierRateName") != null && !jsonObj.get("carrierRateName").isJsonNull()) && !jsonObj.get("carrierRateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierRateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierRateName").toString()));
      }
      // validate the optional field `flatRate`
      if (jsonObj.get("flatRate") != null && !jsonObj.get("flatRate").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("flatRate"));
      }
      if ((jsonObj.get("pricePercentage") != null && !jsonObj.get("pricePercentage").isJsonNull()) && !jsonObj.get("pricePercentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricePercentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricePercentage").toString()));
      }
      if ((jsonObj.get("subtableName") != null && !jsonObj.get("subtableName").isJsonNull()) && !jsonObj.get("subtableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtableName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Value.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Value' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Value> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Value.class));

       return (TypeAdapter<T>) new TypeAdapter<Value>() {
           @Override
           public void write(JsonWriter out, Value value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Value read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Value given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Value
   * @throws IOException if the JSON string is invalid with respect to Value
   */
  public static Value fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Value.class);
  }

  /**
   * Convert an instance of Value to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

