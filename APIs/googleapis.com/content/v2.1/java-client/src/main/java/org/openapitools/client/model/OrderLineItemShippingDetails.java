/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrderLineItemShippingDetailsMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderLineItemShippingDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderLineItemShippingDetails {
  public static final String SERIALIZED_NAME_DELIVER_BY_DATE = "deliverByDate";
  @SerializedName(SERIALIZED_NAME_DELIVER_BY_DATE)
  private String deliverByDate;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private OrderLineItemShippingDetailsMethod method;

  public static final String SERIALIZED_NAME_PICKUP_PROMISE_IN_MINUTES = "pickupPromiseInMinutes";
  @SerializedName(SERIALIZED_NAME_PICKUP_PROMISE_IN_MINUTES)
  private Integer pickupPromiseInMinutes;

  public static final String SERIALIZED_NAME_SHIP_BY_DATE = "shipByDate";
  @SerializedName(SERIALIZED_NAME_SHIP_BY_DATE)
  private String shipByDate;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public OrderLineItemShippingDetails() {
  }

  public OrderLineItemShippingDetails deliverByDate(String deliverByDate) {
    this.deliverByDate = deliverByDate;
    return this;
  }

  /**
   * Required. The delivery by date, in ISO 8601 format.
   * @return deliverByDate
   */
  @javax.annotation.Nullable
  public String getDeliverByDate() {
    return deliverByDate;
  }

  public void setDeliverByDate(String deliverByDate) {
    this.deliverByDate = deliverByDate;
  }


  public OrderLineItemShippingDetails method(OrderLineItemShippingDetailsMethod method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public OrderLineItemShippingDetailsMethod getMethod() {
    return method;
  }

  public void setMethod(OrderLineItemShippingDetailsMethod method) {
    this.method = method;
  }


  public OrderLineItemShippingDetails pickupPromiseInMinutes(Integer pickupPromiseInMinutes) {
    this.pickupPromiseInMinutes = pickupPromiseInMinutes;
    return this;
  }

  /**
   * The promised time in minutes in which the order will be ready for pickup. This only applies to buy-online-pickup-in-store same-day order.
   * @return pickupPromiseInMinutes
   */
  @javax.annotation.Nullable
  public Integer getPickupPromiseInMinutes() {
    return pickupPromiseInMinutes;
  }

  public void setPickupPromiseInMinutes(Integer pickupPromiseInMinutes) {
    this.pickupPromiseInMinutes = pickupPromiseInMinutes;
  }


  public OrderLineItemShippingDetails shipByDate(String shipByDate) {
    this.shipByDate = shipByDate;
    return this;
  }

  /**
   * Required. The ship by date, in ISO 8601 format.
   * @return shipByDate
   */
  @javax.annotation.Nullable
  public String getShipByDate() {
    return shipByDate;
  }

  public void setShipByDate(String shipByDate) {
    this.shipByDate = shipByDate;
  }


  public OrderLineItemShippingDetails type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of shipment. Indicates whether &#x60;deliveryDetails&#x60; or &#x60;pickupDetails&#x60; is applicable for this shipment. Acceptable values are: - \&quot;&#x60;delivery&#x60;\&quot; - \&quot;&#x60;pickup&#x60;\&quot; 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLineItemShippingDetails orderLineItemShippingDetails = (OrderLineItemShippingDetails) o;
    return Objects.equals(this.deliverByDate, orderLineItemShippingDetails.deliverByDate) &&
        Objects.equals(this.method, orderLineItemShippingDetails.method) &&
        Objects.equals(this.pickupPromiseInMinutes, orderLineItemShippingDetails.pickupPromiseInMinutes) &&
        Objects.equals(this.shipByDate, orderLineItemShippingDetails.shipByDate) &&
        Objects.equals(this.type, orderLineItemShippingDetails.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliverByDate, method, pickupPromiseInMinutes, shipByDate, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLineItemShippingDetails {\n");
    sb.append("    deliverByDate: ").append(toIndentedString(deliverByDate)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    pickupPromiseInMinutes: ").append(toIndentedString(pickupPromiseInMinutes)).append("\n");
    sb.append("    shipByDate: ").append(toIndentedString(shipByDate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliverByDate");
    openapiFields.add("method");
    openapiFields.add("pickupPromiseInMinutes");
    openapiFields.add("shipByDate");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderLineItemShippingDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderLineItemShippingDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLineItemShippingDetails is not found in the empty JSON string", OrderLineItemShippingDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderLineItemShippingDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderLineItemShippingDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deliverByDate") != null && !jsonObj.get("deliverByDate").isJsonNull()) && !jsonObj.get("deliverByDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliverByDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliverByDate").toString()));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        OrderLineItemShippingDetailsMethod.validateJsonElement(jsonObj.get("method"));
      }
      if ((jsonObj.get("shipByDate") != null && !jsonObj.get("shipByDate").isJsonNull()) && !jsonObj.get("shipByDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipByDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipByDate").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLineItemShippingDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLineItemShippingDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLineItemShippingDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLineItemShippingDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLineItemShippingDetails>() {
           @Override
           public void write(JsonWriter out, OrderLineItemShippingDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLineItemShippingDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderLineItemShippingDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderLineItemShippingDetails
   * @throws IOException if the JSON string is invalid with respect to OrderLineItemShippingDetails
   */
  public static OrderLineItemShippingDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLineItemShippingDetails.class);
  }

  /**
   * Convert an instance of OrderLineItemShippingDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

