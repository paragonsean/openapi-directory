/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderreturnsLineItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderreturnsCreateOrderReturnRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderreturnsCreateOrderReturnRequest {
  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<OrderreturnsLineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_RETURN_METHOD_TYPE = "returnMethodType";
  @SerializedName(SERIALIZED_NAME_RETURN_METHOD_TYPE)
  private String returnMethodType;

  public OrderreturnsCreateOrderReturnRequest() {
  }

  public OrderreturnsCreateOrderReturnRequest lineItems(List<OrderreturnsLineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public OrderreturnsCreateOrderReturnRequest addLineItemsItem(OrderreturnsLineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * The list of line items to return.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<OrderreturnsLineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<OrderreturnsLineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public OrderreturnsCreateOrderReturnRequest operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * The ID of the operation. Unique across all operations for a given order.
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public OrderreturnsCreateOrderReturnRequest orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The ID of the order.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public OrderreturnsCreateOrderReturnRequest returnMethodType(String returnMethodType) {
    this.returnMethodType = returnMethodType;
    return this;
  }

  /**
   * The way of the package being returned.
   * @return returnMethodType
   */
  @javax.annotation.Nullable
  public String getReturnMethodType() {
    return returnMethodType;
  }

  public void setReturnMethodType(String returnMethodType) {
    this.returnMethodType = returnMethodType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderreturnsCreateOrderReturnRequest orderreturnsCreateOrderReturnRequest = (OrderreturnsCreateOrderReturnRequest) o;
    return Objects.equals(this.lineItems, orderreturnsCreateOrderReturnRequest.lineItems) &&
        Objects.equals(this.operationId, orderreturnsCreateOrderReturnRequest.operationId) &&
        Objects.equals(this.orderId, orderreturnsCreateOrderReturnRequest.orderId) &&
        Objects.equals(this.returnMethodType, orderreturnsCreateOrderReturnRequest.returnMethodType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lineItems, operationId, orderId, returnMethodType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderreturnsCreateOrderReturnRequest {\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    returnMethodType: ").append(toIndentedString(returnMethodType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lineItems");
    openapiFields.add("operationId");
    openapiFields.add("orderId");
    openapiFields.add("returnMethodType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderreturnsCreateOrderReturnRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderreturnsCreateOrderReturnRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderreturnsCreateOrderReturnRequest is not found in the empty JSON string", OrderreturnsCreateOrderReturnRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderreturnsCreateOrderReturnRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderreturnsCreateOrderReturnRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            OrderreturnsLineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("returnMethodType") != null && !jsonObj.get("returnMethodType").isJsonNull()) && !jsonObj.get("returnMethodType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnMethodType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnMethodType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderreturnsCreateOrderReturnRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderreturnsCreateOrderReturnRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderreturnsCreateOrderReturnRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderreturnsCreateOrderReturnRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderreturnsCreateOrderReturnRequest>() {
           @Override
           public void write(JsonWriter out, OrderreturnsCreateOrderReturnRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderreturnsCreateOrderReturnRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderreturnsCreateOrderReturnRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderreturnsCreateOrderReturnRequest
   * @throws IOException if the JSON string is invalid with respect to OrderreturnsCreateOrderReturnRequest
   */
  public static OrderreturnsCreateOrderReturnRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderreturnsCreateOrderReturnRequest.class);
  }

  /**
   * Convert an instance of OrderreturnsCreateOrderReturnRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

