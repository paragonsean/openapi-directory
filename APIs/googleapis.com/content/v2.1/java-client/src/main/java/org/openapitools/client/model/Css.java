/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about CSS domain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Css {
  public static final String SERIALIZED_NAME_CSS_DOMAIN_ID = "cssDomainId";
  @SerializedName(SERIALIZED_NAME_CSS_DOMAIN_ID)
  private String cssDomainId;

  public static final String SERIALIZED_NAME_CSS_GROUP_ID = "cssGroupId";
  @SerializedName(SERIALIZED_NAME_CSS_GROUP_ID)
  private String cssGroupId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_HOMEPAGE_URI = "homepageUri";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE_URI)
  private String homepageUri;

  public static final String SERIALIZED_NAME_LABEL_IDS = "labelIds";
  @SerializedName(SERIALIZED_NAME_LABEL_IDS)
  private List<String> labelIds = new ArrayList<>();

  public Css() {
  }

  public Css(
     String cssDomainId, 
     String cssGroupId, 
     String displayName, 
     String fullName, 
     String homepageUri
  ) {
    this();
    this.cssDomainId = cssDomainId;
    this.cssGroupId = cssGroupId;
    this.displayName = displayName;
    this.fullName = fullName;
    this.homepageUri = homepageUri;
  }

  /**
   * Output only. Immutable. The CSS domain ID.
   * @return cssDomainId
   */
  @javax.annotation.Nullable
  public String getCssDomainId() {
    return cssDomainId;
  }



  /**
   * Output only. Immutable. The ID of the CSS group this CSS domain is affiliated with. Only populated for CSS group users.
   * @return cssGroupId
   */
  @javax.annotation.Nullable
  public String getCssGroupId() {
    return cssGroupId;
  }



  /**
   * Output only. Immutable. The CSS domain&#39;s display name, used when space is constrained.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Output only. Immutable. The CSS domain&#39;s full name.
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }



  /**
   * Output only. Immutable. The CSS domain&#39;s homepage.
   * @return homepageUri
   */
  @javax.annotation.Nullable
  public String getHomepageUri() {
    return homepageUri;
  }



  public Css labelIds(List<String> labelIds) {
    this.labelIds = labelIds;
    return this;
  }

  public Css addLabelIdsItem(String labelIdsItem) {
    if (this.labelIds == null) {
      this.labelIds = new ArrayList<>();
    }
    this.labelIds.add(labelIdsItem);
    return this;
  }

  /**
   * A list of label IDs that are assigned to this CSS domain by its CSS group. Only populated for CSS group users.
   * @return labelIds
   */
  @javax.annotation.Nullable
  public List<String> getLabelIds() {
    return labelIds;
  }

  public void setLabelIds(List<String> labelIds) {
    this.labelIds = labelIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Css css = (Css) o;
    return Objects.equals(this.cssDomainId, css.cssDomainId) &&
        Objects.equals(this.cssGroupId, css.cssGroupId) &&
        Objects.equals(this.displayName, css.displayName) &&
        Objects.equals(this.fullName, css.fullName) &&
        Objects.equals(this.homepageUri, css.homepageUri) &&
        Objects.equals(this.labelIds, css.labelIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cssDomainId, cssGroupId, displayName, fullName, homepageUri, labelIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Css {\n");
    sb.append("    cssDomainId: ").append(toIndentedString(cssDomainId)).append("\n");
    sb.append("    cssGroupId: ").append(toIndentedString(cssGroupId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    homepageUri: ").append(toIndentedString(homepageUri)).append("\n");
    sb.append("    labelIds: ").append(toIndentedString(labelIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cssDomainId");
    openapiFields.add("cssGroupId");
    openapiFields.add("displayName");
    openapiFields.add("fullName");
    openapiFields.add("homepageUri");
    openapiFields.add("labelIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Css
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Css.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Css is not found in the empty JSON string", Css.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Css.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Css` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cssDomainId") != null && !jsonObj.get("cssDomainId").isJsonNull()) && !jsonObj.get("cssDomainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cssDomainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cssDomainId").toString()));
      }
      if ((jsonObj.get("cssGroupId") != null && !jsonObj.get("cssGroupId").isJsonNull()) && !jsonObj.get("cssGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cssGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cssGroupId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("homepageUri") != null && !jsonObj.get("homepageUri").isJsonNull()) && !jsonObj.get("homepageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homepageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homepageUri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labelIds") != null && !jsonObj.get("labelIds").isJsonNull() && !jsonObj.get("labelIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelIds` to be an array in the JSON string but got `%s`", jsonObj.get("labelIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Css.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Css' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Css> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Css.class));

       return (TypeAdapter<T>) new TypeAdapter<Css>() {
           @Override
           public void write(JsonWriter out, Css value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Css read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Css given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Css
   * @throws IOException if the JSON string is invalid with respect to Css
   */
  public static Css fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Css.class);
  }

  /**
   * Convert an instance of Css to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

