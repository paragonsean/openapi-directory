/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConversionSource;
import org.openapitools.client.model.ListConversionSourcesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversionsourcesApi
 */
@Disabled
public class ConversionsourcesApiTest {

    private final ConversionsourcesApi api = new ConversionsourcesApi();

    /**
     * Creates a new conversion source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentConversionsourcesCreateTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ConversionSource conversionSource = null;
        ConversionSource response = api.contentConversionsourcesCreate(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, conversionSource);
        // TODO: test validations
    }

    /**
     * Archives an existing conversion source. It will be recoverable for 30 days. This archiving behavior is not typical in the Content API and unique to this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentConversionsourcesDeleteTest() throws ApiException {
        String merchantId = null;
        String conversionSourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.contentConversionsourcesDelete(merchantId, conversionSourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Fetches a conversion source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentConversionsourcesGetTest() throws ApiException {
        String merchantId = null;
        String conversionSourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ConversionSource response = api.contentConversionsourcesGet(merchantId, conversionSourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves the list of conversion sources the caller has access to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentConversionsourcesListTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        Boolean showDeleted = null;
        ListConversionSourcesResponse response = api.contentConversionsourcesList(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, showDeleted);
        // TODO: test validations
    }

    /**
     * Updates information of an existing conversion source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentConversionsourcesPatchTest() throws ApiException {
        String merchantId = null;
        String conversionSourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        ConversionSource conversionSource = null;
        ConversionSource response = api.contentConversionsourcesPatch(merchantId, conversionSourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, conversionSource);
        // TODO: test validations
    }

    /**
     * Re-enables an archived conversion source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentConversionsourcesUndeleteTest() throws ApiException {
        String merchantId = null;
        String conversionSourceId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        api.contentConversionsourcesUndelete(merchantId, conversionSourceId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

}
