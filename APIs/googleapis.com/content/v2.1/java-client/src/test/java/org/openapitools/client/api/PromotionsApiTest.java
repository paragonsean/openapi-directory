/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListPromotionResponse;
import org.openapitools.client.model.Promotion;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PromotionsApi
 */
@Disabled
public class PromotionsApiTest {

    private final PromotionsApi api = new PromotionsApi();

    /**
     * Inserts a promotion for your Merchant Center account. If the promotion already exists, then it updates the promotion instead. To [end or delete] (https://developers.google.com/shopping-content/guides/promotions#end_a_promotion) a promotion update the time period of the promotion to a time that has already passed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentPromotionsCreateTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Promotion promotion = null;
        Promotion response = api.contentPromotionsCreate(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, promotion);
        // TODO: test validations
    }

    /**
     * Retrieves a promotion from your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentPromotionsGetTest() throws ApiException {
        String merchantId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Promotion response = api.contentPromotionsGet(merchantId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List all promotions from your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentPromotionsListTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String countryCode = null;
        String languageCode = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPromotionResponse response = api.contentPromotionsList(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, countryCode, languageCode, pageSize, pageToken);
        // TODO: test validations
    }

}
