/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Datafeed;
import org.openapitools.client.model.DatafeedsCustomBatchRequest;
import org.openapitools.client.model.DatafeedsCustomBatchResponse;
import org.openapitools.client.model.DatafeedsFetchNowResponse;
import org.openapitools.client.model.DatafeedsListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatafeedsApi
 */
@Disabled
public class DatafeedsApiTest {

    private final DatafeedsApi api = new DatafeedsApi();

    /**
     * Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentDatafeedsCustombatchTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DatafeedsCustomBatchRequest datafeedsCustomBatchRequest = null;
        DatafeedsCustomBatchResponse response = api.contentDatafeedsCustombatch($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, datafeedsCustomBatchRequest);
        // TODO: test validations
    }

    /**
     * Deletes a datafeed configuration from your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentDatafeedsDeleteTest() throws ApiException {
        String merchantId = null;
        String datafeedId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.contentDatafeedsDelete(merchantId, datafeedId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this method more than once per day, we recommend you use the [Products service](https://developers.google.com/shopping-content/reference/rest/v2.1/products) to update your product data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentDatafeedsFetchnowTest() throws ApiException {
        String merchantId = null;
        String datafeedId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DatafeedsFetchNowResponse response = api.contentDatafeedsFetchnow(merchantId, datafeedId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves a datafeed configuration from your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentDatafeedsGetTest() throws ApiException {
        String merchantId = null;
        String datafeedId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Datafeed response = api.contentDatafeedsGet(merchantId, datafeedId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Registers a datafeed configuration with your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentDatafeedsInsertTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Datafeed datafeed = null;
        Datafeed response = api.contentDatafeedsInsert(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, datafeed);
        // TODO: test validations
    }

    /**
     * Lists the configurations for datafeeds in your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentDatafeedsListTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        DatafeedsListResponse response = api.contentDatafeedsList(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a datafeed configuration of your Merchant Center account. Any fields that are not provided are deleted from the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentDatafeedsUpdateTest() throws ApiException {
        String merchantId = null;
        String datafeedId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Datafeed datafeed = null;
        Datafeed response = api.contentDatafeedsUpdate(merchantId, datafeedId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, datafeed);
        // TODO: test validations
    }

}
