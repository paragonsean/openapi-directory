/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ReturnAddress;
import org.openapitools.client.model.ReturnaddressCustomBatchRequest;
import org.openapitools.client.model.ReturnaddressCustomBatchResponse;
import org.openapitools.client.model.ReturnaddressListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReturnaddressApi
 */
@Disabled
public class ReturnaddressApiTest {

    private final ReturnaddressApi api = new ReturnaddressApi();

    /**
     * Batches multiple return address related calls in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentReturnaddressCustombatchTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReturnaddressCustomBatchRequest returnaddressCustomBatchRequest = null;
        ReturnaddressCustomBatchResponse response = api.contentReturnaddressCustombatch($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, returnaddressCustomBatchRequest);
        // TODO: test validations
    }

    /**
     * Deletes a return address for the given Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentReturnaddressDeleteTest() throws ApiException {
        String merchantId = null;
        String returnAddressId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.contentReturnaddressDelete(merchantId, returnAddressId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a return address of the Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentReturnaddressGetTest() throws ApiException {
        String merchantId = null;
        String returnAddressId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReturnAddress response = api.contentReturnaddressGet(merchantId, returnAddressId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Inserts a return address for the Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentReturnaddressInsertTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReturnAddress returnAddress = null;
        ReturnAddress response = api.contentReturnaddressInsert(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, returnAddress);
        // TODO: test validations
    }

    /**
     * Lists the return addresses of the Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentReturnaddressListTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String country = null;
        Integer maxResults = null;
        String pageToken = null;
        ReturnaddressListResponse response = api.contentReturnaddressList(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, country, maxResults, pageToken);
        // TODO: test validations
    }

}
