/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.LiaOmnichannelExperience;
import org.openapitools.client.model.LiaSettings;
import org.openapitools.client.model.LiasettingsCustomBatchRequest;
import org.openapitools.client.model.LiasettingsCustomBatchResponse;
import org.openapitools.client.model.LiasettingsGetAccessibleGmbAccountsResponse;
import org.openapitools.client.model.LiasettingsListPosDataProvidersResponse;
import org.openapitools.client.model.LiasettingsListResponse;
import org.openapitools.client.model.LiasettingsRequestGmbAccessResponse;
import org.openapitools.client.model.LiasettingsRequestInventoryVerificationResponse;
import org.openapitools.client.model.LiasettingsSetInventoryVerificationContactResponse;
import org.openapitools.client.model.LiasettingsSetPosDataProviderResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LiasettingsApi
 */
@Disabled
public class LiasettingsApiTest {

    private final LiasettingsApi api = new LiasettingsApi();

    /**
     * Retrieves and/or updates the LIA settings of multiple accounts in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentLiasettingsCustombatchTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LiasettingsCustomBatchRequest liasettingsCustomBatchRequest = null;
        LiasettingsCustomBatchResponse response = api.contentLiasettingsCustombatch($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, liasettingsCustomBatchRequest);
        // TODO: test validations
    }

    /**
     * Retrieves the LIA settings of the account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentLiasettingsGetTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LiaSettings response = api.contentLiasettingsGet(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves the list of accessible Business Profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentLiasettingsGetaccessiblegmbaccountsTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LiasettingsGetAccessibleGmbAccountsResponse response = api.contentLiasettingsGetaccessiblegmbaccounts(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the LIA settings of the sub-accounts in your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentLiasettingsListTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        LiasettingsListResponse response = api.contentLiasettingsList(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieves the list of POS data providers that have active settings for the all eiligible countries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentLiasettingsListposdataprovidersTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LiasettingsListPosDataProvidersResponse response = api.contentLiasettingsListposdataproviders($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Requests access to a specified Business Profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentLiasettingsRequestgmbaccessTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String gmbEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LiasettingsRequestGmbAccessResponse response = api.contentLiasettingsRequestgmbaccess(merchantId, accountId, gmbEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Requests inventory validation for the specified country.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentLiasettingsRequestinventoryverificationTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String country = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LiasettingsRequestInventoryVerificationResponse response = api.contentLiasettingsRequestinventoryverification(merchantId, accountId, country, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Sets the inventory verification contract for the specified country.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentLiasettingsSetinventoryverificationcontactTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String country = null;
        String language = null;
        String contactName = null;
        String contactEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LiasettingsSetInventoryVerificationContactResponse response = api.contentLiasettingsSetinventoryverificationcontact(merchantId, accountId, country, language, contactName, contactEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Sets the omnichannel experience for the specified country. Only supported for merchants whose POS data provider is trusted to enable the corresponding experience. For more context, see these help articles [about LFP](https://support.google.com/merchants/answer/7676652) and [how to get started](https://support.google.com/merchants/answer/7676578) with it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentLiasettingsSetomnichannelexperienceTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String country = null;
        String lsfType = null;
        List<String> pickupTypes = null;
        LiaOmnichannelExperience response = api.contentLiasettingsSetomnichannelexperience(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, country, lsfType, pickupTypes);
        // TODO: test validations
    }

    /**
     * Sets the POS data provider for the specified country.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentLiasettingsSetposdataproviderTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String country = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String posDataProviderId = null;
        String posExternalAccountId = null;
        LiasettingsSetPosDataProviderResponse response = api.contentLiasettingsSetposdataprovider(merchantId, accountId, country, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, posDataProviderId, posExternalAccountId);
        // TODO: test validations
    }

    /**
     * Updates the LIA settings of the account. Any fields that are not provided are deleted from the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentLiasettingsUpdateTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LiaSettings liaSettings = null;
        LiaSettings response = api.contentLiasettingsUpdate(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, liaSettings);
        // TODO: test validations
    }

}
