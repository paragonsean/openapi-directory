/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CaptureOrderResponse;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.OrdersAcknowledgeRequest;
import org.openapitools.client.model.OrdersAcknowledgeResponse;
import org.openapitools.client.model.OrdersAdvanceTestOrderResponse;
import org.openapitools.client.model.OrdersCancelLineItemRequest;
import org.openapitools.client.model.OrdersCancelLineItemResponse;
import org.openapitools.client.model.OrdersCancelRequest;
import org.openapitools.client.model.OrdersCancelResponse;
import org.openapitools.client.model.OrdersCancelTestOrderByCustomerRequest;
import org.openapitools.client.model.OrdersCancelTestOrderByCustomerResponse;
import org.openapitools.client.model.OrdersCreateTestOrderRequest;
import org.openapitools.client.model.OrdersCreateTestOrderResponse;
import org.openapitools.client.model.OrdersCreateTestReturnRequest;
import org.openapitools.client.model.OrdersCreateTestReturnResponse;
import org.openapitools.client.model.OrdersGetByMerchantOrderIdResponse;
import org.openapitools.client.model.OrdersGetTestOrderTemplateResponse;
import org.openapitools.client.model.OrdersInStoreRefundLineItemRequest;
import org.openapitools.client.model.OrdersInStoreRefundLineItemResponse;
import org.openapitools.client.model.OrdersListResponse;
import org.openapitools.client.model.OrdersRefundItemRequest;
import org.openapitools.client.model.OrdersRefundItemResponse;
import org.openapitools.client.model.OrdersRefundOrderRequest;
import org.openapitools.client.model.OrdersRefundOrderResponse;
import org.openapitools.client.model.OrdersRejectReturnLineItemRequest;
import org.openapitools.client.model.OrdersRejectReturnLineItemResponse;
import org.openapitools.client.model.OrdersReturnRefundLineItemRequest;
import org.openapitools.client.model.OrdersReturnRefundLineItemResponse;
import org.openapitools.client.model.OrdersSetLineItemMetadataRequest;
import org.openapitools.client.model.OrdersSetLineItemMetadataResponse;
import org.openapitools.client.model.OrdersShipLineItemsRequest;
import org.openapitools.client.model.OrdersShipLineItemsResponse;
import org.openapitools.client.model.OrdersUpdateLineItemShippingDetailsRequest;
import org.openapitools.client.model.OrdersUpdateLineItemShippingDetailsResponse;
import org.openapitools.client.model.OrdersUpdateMerchantOrderIdRequest;
import org.openapitools.client.model.OrdersUpdateMerchantOrderIdResponse;
import org.openapitools.client.model.OrdersUpdateShipmentRequest;
import org.openapitools.client.model.OrdersUpdateShipmentResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrdersApi
 */
@Disabled
public class OrdersApiTest {

    private final OrdersApi api = new OrdersApi();

    /**
     * Marks an order as acknowledged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersAcknowledgeTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersAcknowledgeRequest ordersAcknowledgeRequest = null;
        OrdersAcknowledgeResponse response = api.contentOrdersAcknowledge(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersAcknowledgeRequest);
        // TODO: test validations
    }

    /**
     * Sandbox only. Moves a test order from state \&quot;&#x60;inProgress&#x60;\&quot; to state \&quot;&#x60;pendingShipment&#x60;\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersAdvancetestorderTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersAdvanceTestOrderResponse response = api.contentOrdersAdvancetestorder(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Cancels all line items in an order, making a full refund.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersCancelTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersCancelRequest ordersCancelRequest = null;
        OrdersCancelResponse response = api.contentOrdersCancel(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersCancelRequest);
        // TODO: test validations
    }

    /**
     * Cancels a line item, making a full refund.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersCancellineitemTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersCancelLineItemRequest ordersCancelLineItemRequest = null;
        OrdersCancelLineItemResponse response = api.contentOrdersCancellineitem(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersCancelLineItemRequest);
        // TODO: test validations
    }

    /**
     * Sandbox only. Cancels a test order for customer-initiated cancellation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersCanceltestorderbycustomerTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersCancelTestOrderByCustomerRequest ordersCancelTestOrderByCustomerRequest = null;
        OrdersCancelTestOrderByCustomerResponse response = api.contentOrdersCanceltestorderbycustomer(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersCancelTestOrderByCustomerRequest);
        // TODO: test validations
    }

    /**
     * Capture funds from the customer for the current order total. This method should be called after the merchant verifies that they are able and ready to start shipping the order. This method blocks until a response is received from the payment processsor. If this method succeeds, the merchant is guaranteed to receive funds for the order after shipment. If the request fails, it can be retried or the order may be cancelled. This method cannot be called after the entire order is already shipped. A rejected error code is returned when the payment service provider has declined the charge. This indicates a problem between the PSP and either the merchant&#39;s or customer&#39;s account. Sometimes this error will be resolved by the customer. We recommend retrying these errors once per day or cancelling the order with reason &#x60;failedToCaptureFunds&#x60; if the items cannot be held.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersCaptureOrderTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        CaptureOrderResponse response = api.contentOrdersCaptureOrder(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Sandbox only. Creates a test order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersCreatetestorderTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersCreateTestOrderRequest ordersCreateTestOrderRequest = null;
        OrdersCreateTestOrderResponse response = api.contentOrdersCreatetestorder(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersCreateTestOrderRequest);
        // TODO: test validations
    }

    /**
     * Sandbox only. Creates a test return.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersCreatetestreturnTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersCreateTestReturnRequest ordersCreateTestReturnRequest = null;
        OrdersCreateTestReturnResponse response = api.contentOrdersCreatetestreturn(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersCreateTestReturnRequest);
        // TODO: test validations
    }

    /**
     * Retrieves an order from your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersGetTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Order response = api.contentOrdersGet(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves an order using merchant order ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersGetbymerchantorderidTest() throws ApiException {
        String merchantId = null;
        String merchantOrderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersGetByMerchantOrderIdResponse response = api.contentOrdersGetbymerchantorderid(merchantId, merchantOrderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersGettestordertemplateTest() throws ApiException {
        String merchantId = null;
        String templateName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String country = null;
        OrdersGetTestOrderTemplateResponse response = api.contentOrdersGettestordertemplate(merchantId, templateName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, country);
        // TODO: test validations
    }

    /**
     * Deprecated. Notifies that item return and refund was handled directly by merchant outside of Google payments processing (for example, cash refund done in store). Note: We recommend calling the returnrefundlineitem method to refund in-store returns. We will issue the refund directly to the customer. This helps to prevent possible differences arising between merchant and Google transaction records. We also recommend having the point of sale system communicate with Google to ensure that customers do not receive a double refund by first refunding through Google then through an in-store return.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersInstorerefundlineitemTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersInStoreRefundLineItemRequest ordersInStoreRefundLineItemRequest = null;
        OrdersInStoreRefundLineItemResponse response = api.contentOrdersInstorerefundlineitem(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersInStoreRefundLineItemRequest);
        // TODO: test validations
    }

    /**
     * Lists the orders in your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersListTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean acknowledged = null;
        Integer maxResults = null;
        String orderBy = null;
        String pageToken = null;
        String placedDateEnd = null;
        String placedDateStart = null;
        List<String> statuses = null;
        OrdersListResponse response = api.contentOrdersList(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acknowledged, maxResults, orderBy, pageToken, placedDateEnd, placedDateStart, statuses);
        // TODO: test validations
    }

    /**
     * Issues a partial or total refund for items and shipment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersRefunditemTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersRefundItemRequest ordersRefundItemRequest = null;
        OrdersRefundItemResponse response = api.contentOrdersRefunditem(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersRefundItemRequest);
        // TODO: test validations
    }

    /**
     * Issues a partial or total refund for an order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersRefundorderTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersRefundOrderRequest ordersRefundOrderRequest = null;
        OrdersRefundOrderResponse response = api.contentOrdersRefundorder(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersRefundOrderRequest);
        // TODO: test validations
    }

    /**
     * Rejects return on an line item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersRejectreturnlineitemTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersRejectReturnLineItemRequest ordersRejectReturnLineItemRequest = null;
        OrdersRejectReturnLineItemResponse response = api.contentOrdersRejectreturnlineitem(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersRejectReturnLineItemRequest);
        // TODO: test validations
    }

    /**
     * Returns and refunds a line item. Note that this method can only be called on fully shipped orders. The Orderreturns API is the preferred way to handle returns after you receive a return from a customer. You can use Orderreturns.list or Orderreturns.get to search for the return, and then use Orderreturns.processreturn to issue the refund. If the return cannot be found, then we recommend using this API to issue a refund.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersReturnrefundlineitemTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersReturnRefundLineItemRequest ordersReturnRefundLineItemRequest = null;
        OrdersReturnRefundLineItemResponse response = api.contentOrdersReturnrefundlineitem(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersReturnRefundLineItemRequest);
        // TODO: test validations
    }

    /**
     * Sets (or overrides if it already exists) merchant provided annotations in the form of key-value pairs. A common use case would be to supply us with additional structured information about a line item that cannot be provided through other methods. Submitted key-value pairs can be retrieved as part of the orders resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersSetlineitemmetadataTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersSetLineItemMetadataRequest ordersSetLineItemMetadataRequest = null;
        OrdersSetLineItemMetadataResponse response = api.contentOrdersSetlineitemmetadata(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersSetLineItemMetadataRequest);
        // TODO: test validations
    }

    /**
     * Marks line item(s) as shipped.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersShiplineitemsTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersShipLineItemsRequest ordersShipLineItemsRequest = null;
        OrdersShipLineItemsResponse response = api.contentOrdersShiplineitems(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersShipLineItemsRequest);
        // TODO: test validations
    }

    /**
     * Updates ship by and delivery by dates for a line item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersUpdatelineitemshippingdetailsTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersUpdateLineItemShippingDetailsRequest ordersUpdateLineItemShippingDetailsRequest = null;
        OrdersUpdateLineItemShippingDetailsResponse response = api.contentOrdersUpdatelineitemshippingdetails(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersUpdateLineItemShippingDetailsRequest);
        // TODO: test validations
    }

    /**
     * Updates the merchant order ID for a given order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersUpdatemerchantorderidTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersUpdateMerchantOrderIdRequest ordersUpdateMerchantOrderIdRequest = null;
        OrdersUpdateMerchantOrderIdResponse response = api.contentOrdersUpdatemerchantorderid(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersUpdateMerchantOrderIdRequest);
        // TODO: test validations
    }

    /**
     * Updates a shipment&#39;s status, carrier, and/or tracking ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentOrdersUpdateshipmentTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        OrdersUpdateShipmentRequest ordersUpdateShipmentRequest = null;
        OrdersUpdateShipmentResponse response = api.contentOrdersUpdateshipment(merchantId, orderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ordersUpdateShipmentRequest);
        // TODO: test validations
    }

}
