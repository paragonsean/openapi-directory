/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.AccountCredentials;
import org.openapitools.client.model.AccountLabel;
import org.openapitools.client.model.AccountReturnCarrier;
import org.openapitools.client.model.AccountsAuthInfoResponse;
import org.openapitools.client.model.AccountsClaimWebsiteResponse;
import org.openapitools.client.model.AccountsCustomBatchRequest;
import org.openapitools.client.model.AccountsCustomBatchResponse;
import org.openapitools.client.model.AccountsLinkRequest;
import org.openapitools.client.model.AccountsLinkResponse;
import org.openapitools.client.model.AccountsListLinksResponse;
import org.openapitools.client.model.AccountsListResponse;
import org.openapitools.client.model.AccountsUpdateLabelsRequest;
import org.openapitools.client.model.AccountsUpdateLabelsResponse;
import org.openapitools.client.model.ListAccountLabelsResponse;
import org.openapitools.client.model.ListAccountReturnCarrierResponse;
import org.openapitools.client.model.RequestPhoneVerificationRequest;
import org.openapitools.client.model.RequestPhoneVerificationResponse;
import org.openapitools.client.model.VerifyPhoneNumberRequest;
import org.openapitools.client.model.VerifyPhoneNumberResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Returns information about the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsAuthinfoTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccountsAuthInfoResponse response = api.contentAccountsAuthinfo($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Claims the website of a Merchant Center sub-account. Merchant accounts with approved third-party CSSs aren&#39;t required to claim a website.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsClaimwebsiteTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean overwrite = null;
        AccountsClaimWebsiteResponse response = api.contentAccountsClaimwebsite(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, overwrite);
        // TODO: test validations
    }

    /**
     * Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsCredentialsCreateTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccountCredentials accountCredentials = null;
        AccountCredentials response = api.contentAccountsCredentialsCreate(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accountCredentials);
        // TODO: test validations
    }

    /**
     * Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsCustombatchTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccountsCustomBatchRequest accountsCustomBatchRequest = null;
        AccountsCustomBatchResponse response = api.contentAccountsCustombatch($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accountsCustomBatchRequest);
        // TODO: test validations
    }

    /**
     * Deletes a Merchant Center sub-account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsDeleteTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        api.contentAccountsDelete(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force);
        // TODO: test validations
    }

    /**
     * Retrieves a Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsGetTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        Account response = api.contentAccountsGet(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Creates a Merchant Center sub-account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsInsertTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Account account = null;
        Account response = api.contentAccountsInsert(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, account);
        // TODO: test validations
    }

    /**
     * Creates a new label, not assigned to any account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsLabelsCreateTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccountLabel accountLabel = null;
        AccountLabel response = api.contentAccountsLabelsCreate(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accountLabel);
        // TODO: test validations
    }

    /**
     * Deletes a label and removes it from all accounts to which it was assigned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsLabelsDeleteTest() throws ApiException {
        String accountId = null;
        String labelId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.contentAccountsLabelsDelete(accountId, labelId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the labels assigned to an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsLabelsListTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAccountLabelsResponse response = api.contentAccountsLabelsList(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a label.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsLabelsPatchTest() throws ApiException {
        String accountId = null;
        String labelId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccountLabel accountLabel = null;
        AccountLabel response = api.contentAccountsLabelsPatch(accountId, labelId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accountLabel);
        // TODO: test validations
    }

    /**
     * Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsLinkTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccountsLinkRequest accountsLinkRequest = null;
        AccountsLinkResponse response = api.contentAccountsLink(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accountsLinkRequest);
        // TODO: test validations
    }

    /**
     * Lists the sub-accounts in your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsListTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String label = null;
        Integer maxResults = null;
        String name = null;
        String pageToken = null;
        String view = null;
        AccountsListResponse response = api.contentAccountsList(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, label, maxResults, name, pageToken, view);
        // TODO: test validations
    }

    /**
     * Returns the list of accounts linked to your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsListlinksTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        AccountsListLinksResponse response = api.contentAccountsListlinks(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Request verification code to start phone verification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsRequestphoneverificationTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RequestPhoneVerificationRequest requestPhoneVerificationRequest = null;
        RequestPhoneVerificationResponse response = api.contentAccountsRequestphoneverification(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestPhoneVerificationRequest);
        // TODO: test validations
    }

    /**
     * Links return carrier to a merchant account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsReturncarrierCreateTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccountReturnCarrier accountReturnCarrier = null;
        AccountReturnCarrier response = api.contentAccountsReturncarrierCreate(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accountReturnCarrier);
        // TODO: test validations
    }

    /**
     * Delete a return carrier in the merchant account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsReturncarrierDeleteTest() throws ApiException {
        String accountId = null;
        String carrierAccountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.contentAccountsReturncarrierDelete(accountId, carrierAccountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists available return carriers in the merchant account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsReturncarrierListTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListAccountReturnCarrierResponse response = api.contentAccountsReturncarrierList(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a return carrier in the merchant account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsReturncarrierPatchTest() throws ApiException {
        String accountId = null;
        String carrierAccountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccountReturnCarrier accountReturnCarrier = null;
        AccountReturnCarrier response = api.contentAccountsReturncarrierPatch(accountId, carrierAccountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accountReturnCarrier);
        // TODO: test validations
    }

    /**
     * Updates a Merchant Center account. Any fields that are not provided are deleted from the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsUpdateTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Account account = null;
        Account response = api.contentAccountsUpdate(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, account);
        // TODO: test validations
    }

    /**
     * Updates labels that are assigned to the Merchant Center account by CSS user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsUpdatelabelsTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccountsUpdateLabelsRequest accountsUpdateLabelsRequest = null;
        AccountsUpdateLabelsResponse response = api.contentAccountsUpdatelabels(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accountsUpdateLabelsRequest);
        // TODO: test validations
    }

    /**
     * Validates verification code to verify phone number for the account. If successful this will overwrite the value of &#x60;accounts.businessinformation.phoneNumber&#x60;. Only verified phone number will replace an existing verified phone number.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsVerifyphonenumberTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        VerifyPhoneNumberRequest verifyPhoneNumberRequest = null;
        VerifyPhoneNumberResponse response = api.contentAccountsVerifyphonenumber(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, verifyPhoneNumberRequest);
        // TODO: test validations
    }

}
