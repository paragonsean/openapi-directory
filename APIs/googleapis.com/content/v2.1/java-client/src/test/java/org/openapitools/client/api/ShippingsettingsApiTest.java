/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ShippingSettings;
import org.openapitools.client.model.ShippingsettingsCustomBatchRequest;
import org.openapitools.client.model.ShippingsettingsCustomBatchResponse;
import org.openapitools.client.model.ShippingsettingsGetSupportedCarriersResponse;
import org.openapitools.client.model.ShippingsettingsGetSupportedHolidaysResponse;
import org.openapitools.client.model.ShippingsettingsGetSupportedPickupServicesResponse;
import org.openapitools.client.model.ShippingsettingsListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShippingsettingsApi
 */
@Disabled
public class ShippingsettingsApiTest {

    private final ShippingsettingsApi api = new ShippingsettingsApi();

    /**
     * Retrieves and updates the shipping settings of multiple accounts in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentShippingsettingsCustombatchTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ShippingsettingsCustomBatchRequest shippingsettingsCustomBatchRequest = null;
        ShippingsettingsCustomBatchResponse response = api.contentShippingsettingsCustombatch($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, shippingsettingsCustomBatchRequest);
        // TODO: test validations
    }

    /**
     * Retrieves the shipping settings of the account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentShippingsettingsGetTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ShippingSettings response = api.contentShippingsettingsGet(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves supported carriers and carrier services for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentShippingsettingsGetsupportedcarriersTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ShippingsettingsGetSupportedCarriersResponse response = api.contentShippingsettingsGetsupportedcarriers(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves supported holidays for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentShippingsettingsGetsupportedholidaysTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ShippingsettingsGetSupportedHolidaysResponse response = api.contentShippingsettingsGetsupportedholidays(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves supported pickup services for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentShippingsettingsGetsupportedpickupservicesTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ShippingsettingsGetSupportedPickupServicesResponse response = api.contentShippingsettingsGetsupportedpickupservices(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the shipping settings of the sub-accounts in your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentShippingsettingsListTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        ShippingsettingsListResponse response = api.contentShippingsettingsList(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the shipping settings of the account. Any fields that are not provided are deleted from the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentShippingsettingsUpdateTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ShippingSettings shippingSettings = null;
        ShippingSettings response = api.contentShippingsettingsUpdate(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, shippingSettings);
        // TODO: test validations
    }

}
