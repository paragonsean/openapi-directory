# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
from openapi_server import util


class ProductShipping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, location_group_name: str=None, location_id: str=None, postal_code: str=None, price: Price=None, region: str=None, service: str=None):
        """ProductShipping - a model defined in OpenAPI

        :param country: The country of this ProductShipping.
        :param location_group_name: The location_group_name of this ProductShipping.
        :param location_id: The location_id of this ProductShipping.
        :param postal_code: The postal_code of this ProductShipping.
        :param price: The price of this ProductShipping.
        :param region: The region of this ProductShipping.
        :param service: The service of this ProductShipping.
        """
        self.openapi_types = {
            'country': str,
            'location_group_name': str,
            'location_id': str,
            'postal_code': str,
            'price': Price,
            'region': str,
            'service': str
        }

        self.attribute_map = {
            'country': 'country',
            'location_group_name': 'locationGroupName',
            'location_id': 'locationId',
            'postal_code': 'postalCode',
            'price': 'price',
            'region': 'region',
            'service': 'service'
        }

        self._country = country
        self._location_group_name = location_group_name
        self._location_id = location_id
        self._postal_code = postal_code
        self._price = price
        self._region = region
        self._service = service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductShipping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductShipping of this ProductShipping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this ProductShipping.

        The CLDR territory code of the country to which an item will ship.

        :return: The country of this ProductShipping.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ProductShipping.

        The CLDR territory code of the country to which an item will ship.

        :param country: The country of this ProductShipping.
        :type country: str
        """

        self._country = country

    @property
    def location_group_name(self):
        """Gets the location_group_name of this ProductShipping.

        The location where the shipping is applicable, represented by a location group name.

        :return: The location_group_name of this ProductShipping.
        :rtype: str
        """
        return self._location_group_name

    @location_group_name.setter
    def location_group_name(self, location_group_name):
        """Sets the location_group_name of this ProductShipping.

        The location where the shipping is applicable, represented by a location group name.

        :param location_group_name: The location_group_name of this ProductShipping.
        :type location_group_name: str
        """

        self._location_group_name = location_group_name

    @property
    def location_id(self):
        """Gets the location_id of this ProductShipping.

        The numeric ID of a location that the shipping rate applies to as defined in the AdWords API.

        :return: The location_id of this ProductShipping.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ProductShipping.

        The numeric ID of a location that the shipping rate applies to as defined in the AdWords API.

        :param location_id: The location_id of this ProductShipping.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def postal_code(self):
        """Gets the postal_code of this ProductShipping.

        The postal code range that the shipping rate applies to, represented by a postal code, a postal code prefix followed by a * wildcard, a range between two postal codes or two postal code prefixes of equal length.

        :return: The postal_code of this ProductShipping.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ProductShipping.

        The postal code range that the shipping rate applies to, represented by a postal code, a postal code prefix followed by a * wildcard, a range between two postal codes or two postal code prefixes of equal length.

        :param postal_code: The postal_code of this ProductShipping.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def price(self):
        """Gets the price of this ProductShipping.


        :return: The price of this ProductShipping.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductShipping.


        :param price: The price of this ProductShipping.
        :type price: Price
        """

        self._price = price

    @property
    def region(self):
        """Gets the region of this ProductShipping.

        The geographic region to which a shipping rate applies.

        :return: The region of this ProductShipping.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ProductShipping.

        The geographic region to which a shipping rate applies.

        :param region: The region of this ProductShipping.
        :type region: str
        """

        self._region = region

    @property
    def service(self):
        """Gets the service of this ProductShipping.

        A free-form description of the service class or delivery speed.

        :return: The service of this ProductShipping.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ProductShipping.

        A free-form description of the service class or delivery speed.

        :param service: The service of this ProductShipping.
        :type service: str
        """

        self._service = service
