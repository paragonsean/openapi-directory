# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
from openapi_server import util


class CarrierRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier_name: str=None, carrier_service: str=None, flat_adjustment: Price=None, name: str=None, origin_postal_code: str=None, percentage_adjustment: str=None):
        """CarrierRate - a model defined in OpenAPI

        :param carrier_name: The carrier_name of this CarrierRate.
        :param carrier_service: The carrier_service of this CarrierRate.
        :param flat_adjustment: The flat_adjustment of this CarrierRate.
        :param name: The name of this CarrierRate.
        :param origin_postal_code: The origin_postal_code of this CarrierRate.
        :param percentage_adjustment: The percentage_adjustment of this CarrierRate.
        """
        self.openapi_types = {
            'carrier_name': str,
            'carrier_service': str,
            'flat_adjustment': Price,
            'name': str,
            'origin_postal_code': str,
            'percentage_adjustment': str
        }

        self.attribute_map = {
            'carrier_name': 'carrierName',
            'carrier_service': 'carrierService',
            'flat_adjustment': 'flatAdjustment',
            'name': 'name',
            'origin_postal_code': 'originPostalCode',
            'percentage_adjustment': 'percentageAdjustment'
        }

        self._carrier_name = carrier_name
        self._carrier_service = carrier_service
        self._flat_adjustment = flat_adjustment
        self._name = name
        self._origin_postal_code = origin_postal_code
        self._percentage_adjustment = percentage_adjustment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CarrierRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CarrierRate of this CarrierRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier_name(self):
        """Gets the carrier_name of this CarrierRate.

        Carrier service, such as `\"UPS\"` or `\"Fedex\"`. The list of supported carriers can be retrieved via the `getSupportedCarriers` method. Required.

        :return: The carrier_name of this CarrierRate.
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this CarrierRate.

        Carrier service, such as `\"UPS\"` or `\"Fedex\"`. The list of supported carriers can be retrieved via the `getSupportedCarriers` method. Required.

        :param carrier_name: The carrier_name of this CarrierRate.
        :type carrier_name: str
        """

        self._carrier_name = carrier_name

    @property
    def carrier_service(self):
        """Gets the carrier_service of this CarrierRate.

        Carrier service, such as `\"ground\"` or `\"2 days\"`. The list of supported services for a carrier can be retrieved via the `getSupportedCarriers` method. Required.

        :return: The carrier_service of this CarrierRate.
        :rtype: str
        """
        return self._carrier_service

    @carrier_service.setter
    def carrier_service(self, carrier_service):
        """Sets the carrier_service of this CarrierRate.

        Carrier service, such as `\"ground\"` or `\"2 days\"`. The list of supported services for a carrier can be retrieved via the `getSupportedCarriers` method. Required.

        :param carrier_service: The carrier_service of this CarrierRate.
        :type carrier_service: str
        """

        self._carrier_service = carrier_service

    @property
    def flat_adjustment(self):
        """Gets the flat_adjustment of this CarrierRate.


        :return: The flat_adjustment of this CarrierRate.
        :rtype: Price
        """
        return self._flat_adjustment

    @flat_adjustment.setter
    def flat_adjustment(self, flat_adjustment):
        """Sets the flat_adjustment of this CarrierRate.


        :param flat_adjustment: The flat_adjustment of this CarrierRate.
        :type flat_adjustment: Price
        """

        self._flat_adjustment = flat_adjustment

    @property
    def name(self):
        """Gets the name of this CarrierRate.

        Name of the carrier rate. Must be unique per rate group. Required.

        :return: The name of this CarrierRate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CarrierRate.

        Name of the carrier rate. Must be unique per rate group. Required.

        :param name: The name of this CarrierRate.
        :type name: str
        """

        self._name = name

    @property
    def origin_postal_code(self):
        """Gets the origin_postal_code of this CarrierRate.

        Shipping origin for this carrier rate. Required.

        :return: The origin_postal_code of this CarrierRate.
        :rtype: str
        """
        return self._origin_postal_code

    @origin_postal_code.setter
    def origin_postal_code(self, origin_postal_code):
        """Sets the origin_postal_code of this CarrierRate.

        Shipping origin for this carrier rate. Required.

        :param origin_postal_code: The origin_postal_code of this CarrierRate.
        :type origin_postal_code: str
        """

        self._origin_postal_code = origin_postal_code

    @property
    def percentage_adjustment(self):
        """Gets the percentage_adjustment of this CarrierRate.

        Multiplicative shipping rate modifier as a number in decimal notation. Can be negative. For example `\"5.4\"` increases the rate by 5.4%, `\"-3\"` decreases the rate by 3%. Optional.

        :return: The percentage_adjustment of this CarrierRate.
        :rtype: str
        """
        return self._percentage_adjustment

    @percentage_adjustment.setter
    def percentage_adjustment(self, percentage_adjustment):
        """Sets the percentage_adjustment of this CarrierRate.

        Multiplicative shipping rate modifier as a number in decimal notation. Can be negative. For example `\"5.4\"` increases the rate by 5.4%, `\"-3\"` decreases the rate by 3%. Optional.

        :param percentage_adjustment: The percentage_adjustment of this CarrierRate.
        :type percentage_adjustment: str
        """

        self._percentage_adjustment = percentage_adjustment
