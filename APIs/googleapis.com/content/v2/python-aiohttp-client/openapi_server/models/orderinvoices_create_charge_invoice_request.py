# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_summary import InvoiceSummary
from openapi_server.models.shipment_invoice_line_item_invoice import ShipmentInvoiceLineItemInvoice
from openapi_server import util


class OrderinvoicesCreateChargeInvoiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invoice_id: str=None, invoice_summary: InvoiceSummary=None, line_item_invoices: List[ShipmentInvoiceLineItemInvoice]=None, operation_id: str=None, shipment_group_id: str=None):
        """OrderinvoicesCreateChargeInvoiceRequest - a model defined in OpenAPI

        :param invoice_id: The invoice_id of this OrderinvoicesCreateChargeInvoiceRequest.
        :param invoice_summary: The invoice_summary of this OrderinvoicesCreateChargeInvoiceRequest.
        :param line_item_invoices: The line_item_invoices of this OrderinvoicesCreateChargeInvoiceRequest.
        :param operation_id: The operation_id of this OrderinvoicesCreateChargeInvoiceRequest.
        :param shipment_group_id: The shipment_group_id of this OrderinvoicesCreateChargeInvoiceRequest.
        """
        self.openapi_types = {
            'invoice_id': str,
            'invoice_summary': InvoiceSummary,
            'line_item_invoices': List[ShipmentInvoiceLineItemInvoice],
            'operation_id': str,
            'shipment_group_id': str
        }

        self.attribute_map = {
            'invoice_id': 'invoiceId',
            'invoice_summary': 'invoiceSummary',
            'line_item_invoices': 'lineItemInvoices',
            'operation_id': 'operationId',
            'shipment_group_id': 'shipmentGroupId'
        }

        self._invoice_id = invoice_id
        self._invoice_summary = invoice_summary
        self._line_item_invoices = line_item_invoices
        self._operation_id = operation_id
        self._shipment_group_id = shipment_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderinvoicesCreateChargeInvoiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderinvoicesCreateChargeInvoiceRequest of this OrderinvoicesCreateChargeInvoiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invoice_id(self):
        """Gets the invoice_id of this OrderinvoicesCreateChargeInvoiceRequest.

        [required] The ID of the invoice.

        :return: The invoice_id of this OrderinvoicesCreateChargeInvoiceRequest.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this OrderinvoicesCreateChargeInvoiceRequest.

        [required] The ID of the invoice.

        :param invoice_id: The invoice_id of this OrderinvoicesCreateChargeInvoiceRequest.
        :type invoice_id: str
        """

        self._invoice_id = invoice_id

    @property
    def invoice_summary(self):
        """Gets the invoice_summary of this OrderinvoicesCreateChargeInvoiceRequest.


        :return: The invoice_summary of this OrderinvoicesCreateChargeInvoiceRequest.
        :rtype: InvoiceSummary
        """
        return self._invoice_summary

    @invoice_summary.setter
    def invoice_summary(self, invoice_summary):
        """Sets the invoice_summary of this OrderinvoicesCreateChargeInvoiceRequest.


        :param invoice_summary: The invoice_summary of this OrderinvoicesCreateChargeInvoiceRequest.
        :type invoice_summary: InvoiceSummary
        """

        self._invoice_summary = invoice_summary

    @property
    def line_item_invoices(self):
        """Gets the line_item_invoices of this OrderinvoicesCreateChargeInvoiceRequest.

        [required] Invoice details per line item.

        :return: The line_item_invoices of this OrderinvoicesCreateChargeInvoiceRequest.
        :rtype: List[ShipmentInvoiceLineItemInvoice]
        """
        return self._line_item_invoices

    @line_item_invoices.setter
    def line_item_invoices(self, line_item_invoices):
        """Sets the line_item_invoices of this OrderinvoicesCreateChargeInvoiceRequest.

        [required] Invoice details per line item.

        :param line_item_invoices: The line_item_invoices of this OrderinvoicesCreateChargeInvoiceRequest.
        :type line_item_invoices: List[ShipmentInvoiceLineItemInvoice]
        """

        self._line_item_invoices = line_item_invoices

    @property
    def operation_id(self):
        """Gets the operation_id of this OrderinvoicesCreateChargeInvoiceRequest.

        [required] The ID of the operation, unique across all operations for a given order.

        :return: The operation_id of this OrderinvoicesCreateChargeInvoiceRequest.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this OrderinvoicesCreateChargeInvoiceRequest.

        [required] The ID of the operation, unique across all operations for a given order.

        :param operation_id: The operation_id of this OrderinvoicesCreateChargeInvoiceRequest.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def shipment_group_id(self):
        """Gets the shipment_group_id of this OrderinvoicesCreateChargeInvoiceRequest.

        [required] ID of the shipment group. It is assigned by the merchant in the `shipLineItems` method and is used to group multiple line items that have the same kind of shipping charges.

        :return: The shipment_group_id of this OrderinvoicesCreateChargeInvoiceRequest.
        :rtype: str
        """
        return self._shipment_group_id

    @shipment_group_id.setter
    def shipment_group_id(self, shipment_group_id):
        """Sets the shipment_group_id of this OrderinvoicesCreateChargeInvoiceRequest.

        [required] ID of the shipment group. It is assigned by the merchant in the `shipLineItems` method and is used to group multiple line items that have the same kind of shipping charges.

        :param shipment_group_id: The shipment_group_id of this OrderinvoicesCreateChargeInvoiceRequest.
        :type shipment_group_id: str
        """

        self._shipment_group_id = shipment_group_id
