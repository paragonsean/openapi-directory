# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_name: str=None, intention: str=None):
        """ProductDestination - a model defined in OpenAPI

        :param destination_name: The destination_name of this ProductDestination.
        :param intention: The intention of this ProductDestination.
        """
        self.openapi_types = {
            'destination_name': str,
            'intention': str
        }

        self.attribute_map = {
            'destination_name': 'destinationName',
            'intention': 'intention'
        }

        self._destination_name = destination_name
        self._intention = intention

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductDestination of this ProductDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_name(self):
        """Gets the destination_name of this ProductDestination.

        The name of the destination.

        :return: The destination_name of this ProductDestination.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this ProductDestination.

        The name of the destination.

        :param destination_name: The destination_name of this ProductDestination.
        :type destination_name: str
        """

        self._destination_name = destination_name

    @property
    def intention(self):
        """Gets the intention of this ProductDestination.

        Whether the destination is required, excluded or should be validated. Acceptable values are: - \"`default`\" - \"`excluded`\" - \"`optional`\" - \"`required`\" 

        :return: The intention of this ProductDestination.
        :rtype: str
        """
        return self._intention

    @intention.setter
    def intention(self, intention):
        """Sets the intention of this ProductDestination.

        Whether the destination is required, excluded or should be validated. Acceptable values are: - \"`default`\" - \"`excluded`\" - \"`optional`\" - \"`required`\" 

        :param intention: The intention of this ProductDestination.
        :type intention: str
        """

        self._intention = intention
