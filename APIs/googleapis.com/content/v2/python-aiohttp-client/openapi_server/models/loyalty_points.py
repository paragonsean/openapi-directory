# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoyaltyPoints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, points_value: str=None, ratio: float=None):
        """LoyaltyPoints - a model defined in OpenAPI

        :param name: The name of this LoyaltyPoints.
        :param points_value: The points_value of this LoyaltyPoints.
        :param ratio: The ratio of this LoyaltyPoints.
        """
        self.openapi_types = {
            'name': str,
            'points_value': str,
            'ratio': float
        }

        self.attribute_map = {
            'name': 'name',
            'points_value': 'pointsValue',
            'ratio': 'ratio'
        }

        self._name = name
        self._points_value = points_value
        self._ratio = ratio

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyPoints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyPoints of this LoyaltyPoints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this LoyaltyPoints.

        Name of loyalty points program. It is recommended to limit the name to 12 full-width characters or 24 Roman characters.

        :return: The name of this LoyaltyPoints.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoyaltyPoints.

        Name of loyalty points program. It is recommended to limit the name to 12 full-width characters or 24 Roman characters.

        :param name: The name of this LoyaltyPoints.
        :type name: str
        """

        self._name = name

    @property
    def points_value(self):
        """Gets the points_value of this LoyaltyPoints.

        The retailer's loyalty points in absolute value.

        :return: The points_value of this LoyaltyPoints.
        :rtype: str
        """
        return self._points_value

    @points_value.setter
    def points_value(self, points_value):
        """Sets the points_value of this LoyaltyPoints.

        The retailer's loyalty points in absolute value.

        :param points_value: The points_value of this LoyaltyPoints.
        :type points_value: str
        """

        self._points_value = points_value

    @property
    def ratio(self):
        """Gets the ratio of this LoyaltyPoints.

        The ratio of a point when converted to currency. Google assumes currency based on Merchant Center settings. If ratio is left out, it defaults to 1.0.

        :return: The ratio of this LoyaltyPoints.
        :rtype: float
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this LoyaltyPoints.

        The ratio of a point when converted to currency. Google assumes currency based on Merchant Center settings. If ratio is left out, it defaults to 1.0.

        :param ratio: The ratio of this LoyaltyPoints.
        :type ratio: float
        """

        self._ratio = ratio
