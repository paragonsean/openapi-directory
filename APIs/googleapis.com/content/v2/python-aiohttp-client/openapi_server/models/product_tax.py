# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductTax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, location_id: str=None, postal_code: str=None, rate: float=None, region: str=None, tax_ship: bool=None):
        """ProductTax - a model defined in OpenAPI

        :param country: The country of this ProductTax.
        :param location_id: The location_id of this ProductTax.
        :param postal_code: The postal_code of this ProductTax.
        :param rate: The rate of this ProductTax.
        :param region: The region of this ProductTax.
        :param tax_ship: The tax_ship of this ProductTax.
        """
        self.openapi_types = {
            'country': str,
            'location_id': str,
            'postal_code': str,
            'rate': float,
            'region': str,
            'tax_ship': bool
        }

        self.attribute_map = {
            'country': 'country',
            'location_id': 'locationId',
            'postal_code': 'postalCode',
            'rate': 'rate',
            'region': 'region',
            'tax_ship': 'taxShip'
        }

        self._country = country
        self._location_id = location_id
        self._postal_code = postal_code
        self._rate = rate
        self._region = region
        self._tax_ship = tax_ship

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductTax of this ProductTax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this ProductTax.

        The country within which the item is taxed, specified as a CLDR territory code.

        :return: The country of this ProductTax.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ProductTax.

        The country within which the item is taxed, specified as a CLDR territory code.

        :param country: The country of this ProductTax.
        :type country: str
        """

        self._country = country

    @property
    def location_id(self):
        """Gets the location_id of this ProductTax.

        The numeric ID of a location that the tax rate applies to as defined in the AdWords API.

        :return: The location_id of this ProductTax.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ProductTax.

        The numeric ID of a location that the tax rate applies to as defined in the AdWords API.

        :param location_id: The location_id of this ProductTax.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def postal_code(self):
        """Gets the postal_code of this ProductTax.

        The postal code range that the tax rate applies to, represented by a ZIP code, a ZIP code prefix using * wildcard, a range between two ZIP codes or two ZIP code prefixes of equal length. Examples: 94114, 94*, 94002-95460, 94*-95*.

        :return: The postal_code of this ProductTax.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ProductTax.

        The postal code range that the tax rate applies to, represented by a ZIP code, a ZIP code prefix using * wildcard, a range between two ZIP codes or two ZIP code prefixes of equal length. Examples: 94114, 94*, 94002-95460, 94*-95*.

        :param postal_code: The postal_code of this ProductTax.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def rate(self):
        """Gets the rate of this ProductTax.

        The percentage of tax rate that applies to the item price.

        :return: The rate of this ProductTax.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this ProductTax.

        The percentage of tax rate that applies to the item price.

        :param rate: The rate of this ProductTax.
        :type rate: float
        """

        self._rate = rate

    @property
    def region(self):
        """Gets the region of this ProductTax.

        The geographic region to which the tax rate applies.

        :return: The region of this ProductTax.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ProductTax.

        The geographic region to which the tax rate applies.

        :param region: The region of this ProductTax.
        :type region: str
        """

        self._region = region

    @property
    def tax_ship(self):
        """Gets the tax_ship of this ProductTax.

        Should be set to true if tax is charged on shipping.

        :return: The tax_ship of this ProductTax.
        :rtype: bool
        """
        return self._tax_ship

    @tax_ship.setter
    def tax_ship(self, tax_ship):
        """Sets the tax_ship of this ProductTax.

        Should be set to true if tax is charged on shipping.

        :param tax_ship: The tax_ship of this ProductTax.
        :type tax_ship: bool
        """

        self._tax_ship = tax_ship
