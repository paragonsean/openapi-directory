# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.carrier_rate import CarrierRate
from openapi_server.models.table import Table
from openapi_server.models.value import Value
from openapi_server import util


class RateGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_shipping_labels: List[str]=None, carrier_rates: List[CarrierRate]=None, main_table: Table=None, name: str=None, single_value: Value=None, subtables: List[Table]=None):
        """RateGroup - a model defined in OpenAPI

        :param applicable_shipping_labels: The applicable_shipping_labels of this RateGroup.
        :param carrier_rates: The carrier_rates of this RateGroup.
        :param main_table: The main_table of this RateGroup.
        :param name: The name of this RateGroup.
        :param single_value: The single_value of this RateGroup.
        :param subtables: The subtables of this RateGroup.
        """
        self.openapi_types = {
            'applicable_shipping_labels': List[str],
            'carrier_rates': List[CarrierRate],
            'main_table': Table,
            'name': str,
            'single_value': Value,
            'subtables': List[Table]
        }

        self.attribute_map = {
            'applicable_shipping_labels': 'applicableShippingLabels',
            'carrier_rates': 'carrierRates',
            'main_table': 'mainTable',
            'name': 'name',
            'single_value': 'singleValue',
            'subtables': 'subtables'
        }

        self._applicable_shipping_labels = applicable_shipping_labels
        self._carrier_rates = carrier_rates
        self._main_table = main_table
        self._name = name
        self._single_value = single_value
        self._subtables = subtables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RateGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RateGroup of this RateGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_shipping_labels(self):
        """Gets the applicable_shipping_labels of this RateGroup.

        A list of shipping labels defining the products to which this rate group applies to. This is a disjunction: only one of the labels has to match for the rate group to apply. May only be empty for the last rate group of a service. Required.

        :return: The applicable_shipping_labels of this RateGroup.
        :rtype: List[str]
        """
        return self._applicable_shipping_labels

    @applicable_shipping_labels.setter
    def applicable_shipping_labels(self, applicable_shipping_labels):
        """Sets the applicable_shipping_labels of this RateGroup.

        A list of shipping labels defining the products to which this rate group applies to. This is a disjunction: only one of the labels has to match for the rate group to apply. May only be empty for the last rate group of a service. Required.

        :param applicable_shipping_labels: The applicable_shipping_labels of this RateGroup.
        :type applicable_shipping_labels: List[str]
        """

        self._applicable_shipping_labels = applicable_shipping_labels

    @property
    def carrier_rates(self):
        """Gets the carrier_rates of this RateGroup.

        A list of carrier rates that can be referred to by `mainTable` or `singleValue`.

        :return: The carrier_rates of this RateGroup.
        :rtype: List[CarrierRate]
        """
        return self._carrier_rates

    @carrier_rates.setter
    def carrier_rates(self, carrier_rates):
        """Sets the carrier_rates of this RateGroup.

        A list of carrier rates that can be referred to by `mainTable` or `singleValue`.

        :param carrier_rates: The carrier_rates of this RateGroup.
        :type carrier_rates: List[CarrierRate]
        """

        self._carrier_rates = carrier_rates

    @property
    def main_table(self):
        """Gets the main_table of this RateGroup.


        :return: The main_table of this RateGroup.
        :rtype: Table
        """
        return self._main_table

    @main_table.setter
    def main_table(self, main_table):
        """Sets the main_table of this RateGroup.


        :param main_table: The main_table of this RateGroup.
        :type main_table: Table
        """

        self._main_table = main_table

    @property
    def name(self):
        """Gets the name of this RateGroup.

        Name of the rate group. Optional. If set has to be unique within shipping service.

        :return: The name of this RateGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RateGroup.

        Name of the rate group. Optional. If set has to be unique within shipping service.

        :param name: The name of this RateGroup.
        :type name: str
        """

        self._name = name

    @property
    def single_value(self):
        """Gets the single_value of this RateGroup.


        :return: The single_value of this RateGroup.
        :rtype: Value
        """
        return self._single_value

    @single_value.setter
    def single_value(self, single_value):
        """Sets the single_value of this RateGroup.


        :param single_value: The single_value of this RateGroup.
        :type single_value: Value
        """

        self._single_value = single_value

    @property
    def subtables(self):
        """Gets the subtables of this RateGroup.

        A list of subtables referred to by `mainTable`. Can only be set if `mainTable` is set.

        :return: The subtables of this RateGroup.
        :rtype: List[Table]
        """
        return self._subtables

    @subtables.setter
    def subtables(self, subtables):
        """Sets the subtables of this RateGroup.

        A list of subtables referred to by `mainTable`. Can only be set if `mainTable` is set.

        :param subtables: The subtables of this RateGroup.
        :type subtables: List[Table]
        """

        self._subtables = subtables
