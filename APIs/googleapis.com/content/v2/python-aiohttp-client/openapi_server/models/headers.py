# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location_id_set import LocationIdSet
from openapi_server.models.price import Price
from openapi_server.models.weight import Weight
from openapi_server import util


class Headers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, locations: List[LocationIdSet]=None, number_of_items: List[str]=None, postal_code_group_names: List[str]=None, prices: List[Price]=None, weights: List[Weight]=None):
        """Headers - a model defined in OpenAPI

        :param locations: The locations of this Headers.
        :param number_of_items: The number_of_items of this Headers.
        :param postal_code_group_names: The postal_code_group_names of this Headers.
        :param prices: The prices of this Headers.
        :param weights: The weights of this Headers.
        """
        self.openapi_types = {
            'locations': List[LocationIdSet],
            'number_of_items': List[str],
            'postal_code_group_names': List[str],
            'prices': List[Price],
            'weights': List[Weight]
        }

        self.attribute_map = {
            'locations': 'locations',
            'number_of_items': 'numberOfItems',
            'postal_code_group_names': 'postalCodeGroupNames',
            'prices': 'prices',
            'weights': 'weights'
        }

        self._locations = locations
        self._number_of_items = number_of_items
        self._postal_code_group_names = postal_code_group_names
        self._prices = prices
        self._weights = weights

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Headers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Headers of this Headers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locations(self):
        """Gets the locations of this Headers.

        A list of location ID sets. Must be non-empty. Can only be set if all other fields are not set.

        :return: The locations of this Headers.
        :rtype: List[LocationIdSet]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Headers.

        A list of location ID sets. Must be non-empty. Can only be set if all other fields are not set.

        :param locations: The locations of this Headers.
        :type locations: List[LocationIdSet]
        """

        self._locations = locations

    @property
    def number_of_items(self):
        """Gets the number_of_items of this Headers.

        A list of inclusive number of items upper bounds. The last value can be `\"infinity\"`. For example `[\"10\", \"50\", \"infinity\"]` represents the headers \"<= 10 items\", \"<= 50 items\", and \"> 50 items\". Must be non-empty. Can only be set if all other fields are not set.

        :return: The number_of_items of this Headers.
        :rtype: List[str]
        """
        return self._number_of_items

    @number_of_items.setter
    def number_of_items(self, number_of_items):
        """Sets the number_of_items of this Headers.

        A list of inclusive number of items upper bounds. The last value can be `\"infinity\"`. For example `[\"10\", \"50\", \"infinity\"]` represents the headers \"<= 10 items\", \"<= 50 items\", and \"> 50 items\". Must be non-empty. Can only be set if all other fields are not set.

        :param number_of_items: The number_of_items of this Headers.
        :type number_of_items: List[str]
        """

        self._number_of_items = number_of_items

    @property
    def postal_code_group_names(self):
        """Gets the postal_code_group_names of this Headers.

        A list of postal group names. The last value can be `\"all other locations\"`. Example: `[\"zone 1\", \"zone 2\", \"all other locations\"]`. The referred postal code groups must match the delivery country of the service. Must be non-empty. Can only be set if all other fields are not set.

        :return: The postal_code_group_names of this Headers.
        :rtype: List[str]
        """
        return self._postal_code_group_names

    @postal_code_group_names.setter
    def postal_code_group_names(self, postal_code_group_names):
        """Sets the postal_code_group_names of this Headers.

        A list of postal group names. The last value can be `\"all other locations\"`. Example: `[\"zone 1\", \"zone 2\", \"all other locations\"]`. The referred postal code groups must match the delivery country of the service. Must be non-empty. Can only be set if all other fields are not set.

        :param postal_code_group_names: The postal_code_group_names of this Headers.
        :type postal_code_group_names: List[str]
        """

        self._postal_code_group_names = postal_code_group_names

    @property
    def prices(self):
        """Gets the prices of this Headers.

        A list of inclusive order price upper bounds. The last price's value can be `\"infinity\"`. For example `[{\"value\": \"10\", \"currency\": \"USD\"}, {\"value\": \"500\", \"currency\": \"USD\"}, {\"value\": \"infinity\", \"currency\": \"USD\"}]` represents the headers \"<= $10\", \"<= $500\", and \"> $500\". All prices within a service must have the same currency. Must be non-empty. Can only be set if all other fields are not set.

        :return: The prices of this Headers.
        :rtype: List[Price]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this Headers.

        A list of inclusive order price upper bounds. The last price's value can be `\"infinity\"`. For example `[{\"value\": \"10\", \"currency\": \"USD\"}, {\"value\": \"500\", \"currency\": \"USD\"}, {\"value\": \"infinity\", \"currency\": \"USD\"}]` represents the headers \"<= $10\", \"<= $500\", and \"> $500\". All prices within a service must have the same currency. Must be non-empty. Can only be set if all other fields are not set.

        :param prices: The prices of this Headers.
        :type prices: List[Price]
        """

        self._prices = prices

    @property
    def weights(self):
        """Gets the weights of this Headers.

        A list of inclusive order weight upper bounds. The last weight's value can be `\"infinity\"`. For example `[{\"value\": \"10\", \"unit\": \"kg\"}, {\"value\": \"50\", \"unit\": \"kg\"}, {\"value\": \"infinity\", \"unit\": \"kg\"}]` represents the headers \"<= 10kg\", \"<= 50kg\", and \"> 50kg\". All weights within a service must have the same unit. Must be non-empty. Can only be set if all other fields are not set.

        :return: The weights of this Headers.
        :rtype: List[Weight]
        """
        return self._weights

    @weights.setter
    def weights(self, weights):
        """Sets the weights of this Headers.

        A list of inclusive order weight upper bounds. The last weight's value can be `\"infinity\"`. For example `[{\"value\": \"10\", \"unit\": \"kg\"}, {\"value\": \"50\", \"unit\": \"kg\"}, {\"value\": \"infinity\", \"unit\": \"kg\"}]` represents the headers \"<= 10kg\", \"<= 50kg\", and \"> 50kg\". All weights within a service must have the same unit. Must be non-empty. Can only be set if all other fields are not set.

        :param weights: The weights of this Headers.
        :type weights: List[Weight]
        """

        self._weights = weights
