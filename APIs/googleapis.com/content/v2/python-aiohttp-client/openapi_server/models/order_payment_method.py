# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_address import OrderAddress
from openapi_server import util


class OrderPaymentMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: OrderAddress=None, expiration_month: int=None, expiration_year: int=None, last_four_digits: str=None, phone_number: str=None, type: str=None):
        """OrderPaymentMethod - a model defined in OpenAPI

        :param billing_address: The billing_address of this OrderPaymentMethod.
        :param expiration_month: The expiration_month of this OrderPaymentMethod.
        :param expiration_year: The expiration_year of this OrderPaymentMethod.
        :param last_four_digits: The last_four_digits of this OrderPaymentMethod.
        :param phone_number: The phone_number of this OrderPaymentMethod.
        :param type: The type of this OrderPaymentMethod.
        """
        self.openapi_types = {
            'billing_address': OrderAddress,
            'expiration_month': int,
            'expiration_year': int,
            'last_four_digits': str,
            'phone_number': str,
            'type': str
        }

        self.attribute_map = {
            'billing_address': 'billingAddress',
            'expiration_month': 'expirationMonth',
            'expiration_year': 'expirationYear',
            'last_four_digits': 'lastFourDigits',
            'phone_number': 'phoneNumber',
            'type': 'type'
        }

        self._billing_address = billing_address
        self._expiration_month = expiration_month
        self._expiration_year = expiration_year
        self._last_four_digits = last_four_digits
        self._phone_number = phone_number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderPaymentMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderPaymentMethod of this OrderPaymentMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this OrderPaymentMethod.


        :return: The billing_address of this OrderPaymentMethod.
        :rtype: OrderAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this OrderPaymentMethod.


        :param billing_address: The billing_address of this OrderPaymentMethod.
        :type billing_address: OrderAddress
        """

        self._billing_address = billing_address

    @property
    def expiration_month(self):
        """Gets the expiration_month of this OrderPaymentMethod.

        The card expiration month (January = 1, February = 2 etc.).

        :return: The expiration_month of this OrderPaymentMethod.
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this OrderPaymentMethod.

        The card expiration month (January = 1, February = 2 etc.).

        :param expiration_month: The expiration_month of this OrderPaymentMethod.
        :type expiration_month: int
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this OrderPaymentMethod.

        The card expiration year (4-digit, e.g. 2015).

        :return: The expiration_year of this OrderPaymentMethod.
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this OrderPaymentMethod.

        The card expiration year (4-digit, e.g. 2015).

        :param expiration_year: The expiration_year of this OrderPaymentMethod.
        :type expiration_year: int
        """

        self._expiration_year = expiration_year

    @property
    def last_four_digits(self):
        """Gets the last_four_digits of this OrderPaymentMethod.

        The last four digits of the card number.

        :return: The last_four_digits of this OrderPaymentMethod.
        :rtype: str
        """
        return self._last_four_digits

    @last_four_digits.setter
    def last_four_digits(self, last_four_digits):
        """Sets the last_four_digits of this OrderPaymentMethod.

        The last four digits of the card number.

        :param last_four_digits: The last_four_digits of this OrderPaymentMethod.
        :type last_four_digits: str
        """

        self._last_four_digits = last_four_digits

    @property
    def phone_number(self):
        """Gets the phone_number of this OrderPaymentMethod.

        The billing phone number.

        :return: The phone_number of this OrderPaymentMethod.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this OrderPaymentMethod.

        The billing phone number.

        :param phone_number: The phone_number of this OrderPaymentMethod.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def type(self):
        """Gets the type of this OrderPaymentMethod.

        The type of instrument. Acceptable values are: - \"`AMEX`\" - \"`DISCOVER`\" - \"`JCB`\" - \"`MASTERCARD`\" - \"`UNIONPAY`\" - \"`VISA`\" - \"``\" 

        :return: The type of this OrderPaymentMethod.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderPaymentMethod.

        The type of instrument. Acceptable values are: - \"`AMEX`\" - \"`DISCOVER`\" - \"`JCB`\" - \"`MASTERCARD`\" - \"`UNIONPAY`\" - \"`VISA`\" - \"``\" 

        :param type: The type of this OrderPaymentMethod.
        :type type: str
        """

        self._type = type
