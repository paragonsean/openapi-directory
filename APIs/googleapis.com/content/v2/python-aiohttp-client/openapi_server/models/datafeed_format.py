# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatafeedFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_delimiter: str=None, file_encoding: str=None, quoting_mode: str=None):
        """DatafeedFormat - a model defined in OpenAPI

        :param column_delimiter: The column_delimiter of this DatafeedFormat.
        :param file_encoding: The file_encoding of this DatafeedFormat.
        :param quoting_mode: The quoting_mode of this DatafeedFormat.
        """
        self.openapi_types = {
            'column_delimiter': str,
            'file_encoding': str,
            'quoting_mode': str
        }

        self.attribute_map = {
            'column_delimiter': 'columnDelimiter',
            'file_encoding': 'fileEncoding',
            'quoting_mode': 'quotingMode'
        }

        self._column_delimiter = column_delimiter
        self._file_encoding = file_encoding
        self._quoting_mode = quoting_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatafeedFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatafeedFormat of this DatafeedFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_delimiter(self):
        """Gets the column_delimiter of this DatafeedFormat.

        Delimiter for the separation of values in a delimiter-separated values feed. If not specified, the delimiter will be auto-detected. Ignored for non-DSV data feeds. Acceptable values are: - \"`pipe`\" - \"`tab`\" - \"`tilde`\" 

        :return: The column_delimiter of this DatafeedFormat.
        :rtype: str
        """
        return self._column_delimiter

    @column_delimiter.setter
    def column_delimiter(self, column_delimiter):
        """Sets the column_delimiter of this DatafeedFormat.

        Delimiter for the separation of values in a delimiter-separated values feed. If not specified, the delimiter will be auto-detected. Ignored for non-DSV data feeds. Acceptable values are: - \"`pipe`\" - \"`tab`\" - \"`tilde`\" 

        :param column_delimiter: The column_delimiter of this DatafeedFormat.
        :type column_delimiter: str
        """

        self._column_delimiter = column_delimiter

    @property
    def file_encoding(self):
        """Gets the file_encoding of this DatafeedFormat.

        Character encoding scheme of the data feed. If not specified, the encoding will be auto-detected. Acceptable values are: - \"`latin-1`\" - \"`utf-16be`\" - \"`utf-16le`\" - \"`utf-8`\" - \"`windows-1252`\" 

        :return: The file_encoding of this DatafeedFormat.
        :rtype: str
        """
        return self._file_encoding

    @file_encoding.setter
    def file_encoding(self, file_encoding):
        """Sets the file_encoding of this DatafeedFormat.

        Character encoding scheme of the data feed. If not specified, the encoding will be auto-detected. Acceptable values are: - \"`latin-1`\" - \"`utf-16be`\" - \"`utf-16le`\" - \"`utf-8`\" - \"`windows-1252`\" 

        :param file_encoding: The file_encoding of this DatafeedFormat.
        :type file_encoding: str
        """

        self._file_encoding = file_encoding

    @property
    def quoting_mode(self):
        """Gets the quoting_mode of this DatafeedFormat.

        Specifies how double quotes are interpreted. If not specified, the mode will be auto-detected. Ignored for non-DSV data feeds. Acceptable values are: - \"`normal character`\" - \"`value quoting`\" 

        :return: The quoting_mode of this DatafeedFormat.
        :rtype: str
        """
        return self._quoting_mode

    @quoting_mode.setter
    def quoting_mode(self, quoting_mode):
        """Sets the quoting_mode of this DatafeedFormat.

        Specifies how double quotes are interpreted. If not specified, the mode will be auto-detected. Ignored for non-DSV data feeds. Acceptable values are: - \"`normal character`\" - \"`value quoting`\" 

        :param quoting_mode: The quoting_mode of this DatafeedFormat.
        :type quoting_mode: str
        """

        self._quoting_mode = quoting_mode
