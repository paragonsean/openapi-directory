# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datafeed_fetch_schedule import DatafeedFetchSchedule
from openapi_server.models.datafeed_format import DatafeedFormat
from openapi_server.models.datafeed_target import DatafeedTarget
from openapi_server import util


class Datafeed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_language: str=None, content_language: str=None, content_type: str=None, fetch_schedule: DatafeedFetchSchedule=None, file_name: str=None, format: DatafeedFormat=None, id: str=None, intended_destinations: List[str]=None, kind: str=None, name: str=None, target_country: str=None, targets: List[DatafeedTarget]=None):
        """Datafeed - a model defined in OpenAPI

        :param attribute_language: The attribute_language of this Datafeed.
        :param content_language: The content_language of this Datafeed.
        :param content_type: The content_type of this Datafeed.
        :param fetch_schedule: The fetch_schedule of this Datafeed.
        :param file_name: The file_name of this Datafeed.
        :param format: The format of this Datafeed.
        :param id: The id of this Datafeed.
        :param intended_destinations: The intended_destinations of this Datafeed.
        :param kind: The kind of this Datafeed.
        :param name: The name of this Datafeed.
        :param target_country: The target_country of this Datafeed.
        :param targets: The targets of this Datafeed.
        """
        self.openapi_types = {
            'attribute_language': str,
            'content_language': str,
            'content_type': str,
            'fetch_schedule': DatafeedFetchSchedule,
            'file_name': str,
            'format': DatafeedFormat,
            'id': str,
            'intended_destinations': List[str],
            'kind': str,
            'name': str,
            'target_country': str,
            'targets': List[DatafeedTarget]
        }

        self.attribute_map = {
            'attribute_language': 'attributeLanguage',
            'content_language': 'contentLanguage',
            'content_type': 'contentType',
            'fetch_schedule': 'fetchSchedule',
            'file_name': 'fileName',
            'format': 'format',
            'id': 'id',
            'intended_destinations': 'intendedDestinations',
            'kind': 'kind',
            'name': 'name',
            'target_country': 'targetCountry',
            'targets': 'targets'
        }

        self._attribute_language = attribute_language
        self._content_language = content_language
        self._content_type = content_type
        self._fetch_schedule = fetch_schedule
        self._file_name = file_name
        self._format = format
        self._id = id
        self._intended_destinations = intended_destinations
        self._kind = kind
        self._name = name
        self._target_country = target_country
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Datafeed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Datafeed of this Datafeed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_language(self):
        """Gets the attribute_language of this Datafeed.

        The two-letter ISO 639-1 language in which the attributes are defined in the data feed.

        :return: The attribute_language of this Datafeed.
        :rtype: str
        """
        return self._attribute_language

    @attribute_language.setter
    def attribute_language(self, attribute_language):
        """Sets the attribute_language of this Datafeed.

        The two-letter ISO 639-1 language in which the attributes are defined in the data feed.

        :param attribute_language: The attribute_language of this Datafeed.
        :type attribute_language: str
        """

        self._attribute_language = attribute_language

    @property
    def content_language(self):
        """Gets the content_language of this Datafeed.

        [DEPRECATED] Please use targets[].language instead. The two-letter ISO 639-1 language of the items in the feed. Must be a valid language for `targetCountry`.

        :return: The content_language of this Datafeed.
        :rtype: str
        """
        return self._content_language

    @content_language.setter
    def content_language(self, content_language):
        """Sets the content_language of this Datafeed.

        [DEPRECATED] Please use targets[].language instead. The two-letter ISO 639-1 language of the items in the feed. Must be a valid language for `targetCountry`.

        :param content_language: The content_language of this Datafeed.
        :type content_language: str
        """

        self._content_language = content_language

    @property
    def content_type(self):
        """Gets the content_type of this Datafeed.

        Required. The type of data feed. For product inventory feeds, only feeds for local stores, not online stores, are supported. Acceptable values are: - \"`local products`\" - \"`product inventory`\" - \"`products`\" 

        :return: The content_type of this Datafeed.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Datafeed.

        Required. The type of data feed. For product inventory feeds, only feeds for local stores, not online stores, are supported. Acceptable values are: - \"`local products`\" - \"`product inventory`\" - \"`products`\" 

        :param content_type: The content_type of this Datafeed.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def fetch_schedule(self):
        """Gets the fetch_schedule of this Datafeed.


        :return: The fetch_schedule of this Datafeed.
        :rtype: DatafeedFetchSchedule
        """
        return self._fetch_schedule

    @fetch_schedule.setter
    def fetch_schedule(self, fetch_schedule):
        """Sets the fetch_schedule of this Datafeed.


        :param fetch_schedule: The fetch_schedule of this Datafeed.
        :type fetch_schedule: DatafeedFetchSchedule
        """

        self._fetch_schedule = fetch_schedule

    @property
    def file_name(self):
        """Gets the file_name of this Datafeed.

        Required. The filename of the feed. All feeds must have a unique file name.

        :return: The file_name of this Datafeed.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Datafeed.

        Required. The filename of the feed. All feeds must have a unique file name.

        :param file_name: The file_name of this Datafeed.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def format(self):
        """Gets the format of this Datafeed.


        :return: The format of this Datafeed.
        :rtype: DatafeedFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Datafeed.


        :param format: The format of this Datafeed.
        :type format: DatafeedFormat
        """

        self._format = format

    @property
    def id(self):
        """Gets the id of this Datafeed.

        Required for update. The ID of the data feed.

        :return: The id of this Datafeed.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Datafeed.

        Required for update. The ID of the data feed.

        :param id: The id of this Datafeed.
        :type id: str
        """

        self._id = id

    @property
    def intended_destinations(self):
        """Gets the intended_destinations of this Datafeed.

        [DEPRECATED] Please use targets[].includedDestinations instead. The list of intended destinations (corresponds to checked check boxes in Merchant Center).

        :return: The intended_destinations of this Datafeed.
        :rtype: List[str]
        """
        return self._intended_destinations

    @intended_destinations.setter
    def intended_destinations(self, intended_destinations):
        """Sets the intended_destinations of this Datafeed.

        [DEPRECATED] Please use targets[].includedDestinations instead. The list of intended destinations (corresponds to checked check boxes in Merchant Center).

        :param intended_destinations: The intended_destinations of this Datafeed.
        :type intended_destinations: List[str]
        """

        self._intended_destinations = intended_destinations

    @property
    def kind(self):
        """Gets the kind of this Datafeed.

        Identifies what kind of resource this is. Value: the fixed string \"`content#datafeed`\"

        :return: The kind of this Datafeed.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Datafeed.

        Identifies what kind of resource this is. Value: the fixed string \"`content#datafeed`\"

        :param kind: The kind of this Datafeed.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Datafeed.

        Required for insert. A descriptive name of the data feed.

        :return: The name of this Datafeed.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Datafeed.

        Required for insert. A descriptive name of the data feed.

        :param name: The name of this Datafeed.
        :type name: str
        """

        self._name = name

    @property
    def target_country(self):
        """Gets the target_country of this Datafeed.

        [DEPRECATED] Please use targets[].country instead. The country where the items in the feed will be included in the search index, represented as a CLDR territory code.

        :return: The target_country of this Datafeed.
        :rtype: str
        """
        return self._target_country

    @target_country.setter
    def target_country(self, target_country):
        """Sets the target_country of this Datafeed.

        [DEPRECATED] Please use targets[].country instead. The country where the items in the feed will be included in the search index, represented as a CLDR territory code.

        :param target_country: The target_country of this Datafeed.
        :type target_country: str
        """

        self._target_country = target_country

    @property
    def targets(self):
        """Gets the targets of this Datafeed.

        The targets this feed should apply to (country, language, destinations).

        :return: The targets of this Datafeed.
        :rtype: List[DatafeedTarget]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this Datafeed.

        The targets this feed should apply to (country, language, destinations).

        :param targets: The targets of this Datafeed.
        :type targets: List[DatafeedTarget]
        """

        self._targets = targets
