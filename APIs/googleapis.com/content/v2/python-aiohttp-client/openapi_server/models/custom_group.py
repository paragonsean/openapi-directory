# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_attribute import CustomAttribute
from openapi_server import util


class CustomGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List[CustomAttribute]=None, name: str=None):
        """CustomGroup - a model defined in OpenAPI

        :param attributes: The attributes of this CustomGroup.
        :param name: The name of this CustomGroup.
        """
        self.openapi_types = {
            'attributes': List[CustomAttribute],
            'name': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'name': 'name'
        }

        self._attributes = attributes
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomGroup of this CustomGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this CustomGroup.

        The sub-attributes.

        :return: The attributes of this CustomGroup.
        :rtype: List[CustomAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CustomGroup.

        The sub-attributes.

        :param attributes: The attributes of this CustomGroup.
        :type attributes: List[CustomAttribute]
        """

        self._attributes = attributes

    @property
    def name(self):
        """Gets the name of this CustomGroup.

        The name of the group. Underscores will be replaced by spaces upon insertion.

        :return: The name of this CustomGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomGroup.

        The name of the group. Underscores will be replaced by spaces upon insertion.

        :param name: The name of this CustomGroup.
        :type name: str
        """

        self._name = name
