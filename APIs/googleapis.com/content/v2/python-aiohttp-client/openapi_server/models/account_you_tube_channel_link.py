# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountYouTubeChannelLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, status: str=None):
        """AccountYouTubeChannelLink - a model defined in OpenAPI

        :param channel_id: The channel_id of this AccountYouTubeChannelLink.
        :param status: The status of this AccountYouTubeChannelLink.
        """
        self.openapi_types = {
            'channel_id': str,
            'status': str
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'status': 'status'
        }

        self._channel_id = channel_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountYouTubeChannelLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountYouTubeChannelLink of this AccountYouTubeChannelLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this AccountYouTubeChannelLink.

        Channel ID.

        :return: The channel_id of this AccountYouTubeChannelLink.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this AccountYouTubeChannelLink.

        Channel ID.

        :param channel_id: The channel_id of this AccountYouTubeChannelLink.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def status(self):
        """Gets the status of this AccountYouTubeChannelLink.

        Status of the link between this Merchant Center account and the YouTube channel. Upon retrieval, it represents the actual status of the link and can be either `active` if it was approved in YT Creator Studio or `pending` if it's pending approval. Upon insertion, it represents the *intended* status of the link. Re-uploading a link with status `active` when it's still pending or with status `pending` when it's already active will have no effect: the status will remain unchanged. Re-uploading a link with deprecated status `inactive` is equivalent to not submitting the link at all and will delete the link if it was active or cancel the link request if it was pending.

        :return: The status of this AccountYouTubeChannelLink.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountYouTubeChannelLink.

        Status of the link between this Merchant Center account and the YouTube channel. Upon retrieval, it represents the actual status of the link and can be either `active` if it was approved in YT Creator Studio or `pending` if it's pending approval. Upon insertion, it represents the *intended* status of the link. Re-uploading a link with status `active` when it's still pending or with status `pending` when it's already active will have no effect: the status will remain unchanged. Re-uploading a link with deprecated status `inactive` is equivalent to not submitting the link at all and will delete the link if it was active or cancel the link request if it was pending.

        :param status: The status of this AccountYouTubeChannelLink.
        :type status: str
        """

        self._status = status
