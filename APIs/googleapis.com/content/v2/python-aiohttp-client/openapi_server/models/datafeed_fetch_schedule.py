# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatafeedFetchSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_month: int=None, fetch_url: str=None, hour: int=None, minute_of_hour: int=None, password: str=None, paused: bool=None, time_zone: str=None, username: str=None, weekday: str=None):
        """DatafeedFetchSchedule - a model defined in OpenAPI

        :param day_of_month: The day_of_month of this DatafeedFetchSchedule.
        :param fetch_url: The fetch_url of this DatafeedFetchSchedule.
        :param hour: The hour of this DatafeedFetchSchedule.
        :param minute_of_hour: The minute_of_hour of this DatafeedFetchSchedule.
        :param password: The password of this DatafeedFetchSchedule.
        :param paused: The paused of this DatafeedFetchSchedule.
        :param time_zone: The time_zone of this DatafeedFetchSchedule.
        :param username: The username of this DatafeedFetchSchedule.
        :param weekday: The weekday of this DatafeedFetchSchedule.
        """
        self.openapi_types = {
            'day_of_month': int,
            'fetch_url': str,
            'hour': int,
            'minute_of_hour': int,
            'password': str,
            'paused': bool,
            'time_zone': str,
            'username': str,
            'weekday': str
        }

        self.attribute_map = {
            'day_of_month': 'dayOfMonth',
            'fetch_url': 'fetchUrl',
            'hour': 'hour',
            'minute_of_hour': 'minuteOfHour',
            'password': 'password',
            'paused': 'paused',
            'time_zone': 'timeZone',
            'username': 'username',
            'weekday': 'weekday'
        }

        self._day_of_month = day_of_month
        self._fetch_url = fetch_url
        self._hour = hour
        self._minute_of_hour = minute_of_hour
        self._password = password
        self._paused = paused
        self._time_zone = time_zone
        self._username = username
        self._weekday = weekday

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatafeedFetchSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatafeedFetchSchedule of this DatafeedFetchSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_month(self):
        """Gets the day_of_month of this DatafeedFetchSchedule.

        The day of the month the feed file should be fetched (1-31).

        :return: The day_of_month of this DatafeedFetchSchedule.
        :rtype: int
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this DatafeedFetchSchedule.

        The day of the month the feed file should be fetched (1-31).

        :param day_of_month: The day_of_month of this DatafeedFetchSchedule.
        :type day_of_month: int
        """

        self._day_of_month = day_of_month

    @property
    def fetch_url(self):
        """Gets the fetch_url of this DatafeedFetchSchedule.

        The URL where the feed file can be fetched. Google Merchant Center will support automatic scheduled uploads using the HTTP, HTTPS, FTP, or SFTP protocols, so the value will need to be a valid link using one of those four protocols.

        :return: The fetch_url of this DatafeedFetchSchedule.
        :rtype: str
        """
        return self._fetch_url

    @fetch_url.setter
    def fetch_url(self, fetch_url):
        """Sets the fetch_url of this DatafeedFetchSchedule.

        The URL where the feed file can be fetched. Google Merchant Center will support automatic scheduled uploads using the HTTP, HTTPS, FTP, or SFTP protocols, so the value will need to be a valid link using one of those four protocols.

        :param fetch_url: The fetch_url of this DatafeedFetchSchedule.
        :type fetch_url: str
        """

        self._fetch_url = fetch_url

    @property
    def hour(self):
        """Gets the hour of this DatafeedFetchSchedule.

        The hour of the day the feed file should be fetched (0-23).

        :return: The hour of this DatafeedFetchSchedule.
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this DatafeedFetchSchedule.

        The hour of the day the feed file should be fetched (0-23).

        :param hour: The hour of this DatafeedFetchSchedule.
        :type hour: int
        """

        self._hour = hour

    @property
    def minute_of_hour(self):
        """Gets the minute_of_hour of this DatafeedFetchSchedule.

        The minute of the hour the feed file should be fetched (0-59). Read-only.

        :return: The minute_of_hour of this DatafeedFetchSchedule.
        :rtype: int
        """
        return self._minute_of_hour

    @minute_of_hour.setter
    def minute_of_hour(self, minute_of_hour):
        """Sets the minute_of_hour of this DatafeedFetchSchedule.

        The minute of the hour the feed file should be fetched (0-59). Read-only.

        :param minute_of_hour: The minute_of_hour of this DatafeedFetchSchedule.
        :type minute_of_hour: int
        """

        self._minute_of_hour = minute_of_hour

    @property
    def password(self):
        """Gets the password of this DatafeedFetchSchedule.

        An optional password for fetch_url.

        :return: The password of this DatafeedFetchSchedule.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DatafeedFetchSchedule.

        An optional password for fetch_url.

        :param password: The password of this DatafeedFetchSchedule.
        :type password: str
        """

        self._password = password

    @property
    def paused(self):
        """Gets the paused of this DatafeedFetchSchedule.

        Whether the scheduled fetch is paused or not.

        :return: The paused of this DatafeedFetchSchedule.
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this DatafeedFetchSchedule.

        Whether the scheduled fetch is paused or not.

        :param paused: The paused of this DatafeedFetchSchedule.
        :type paused: bool
        """

        self._paused = paused

    @property
    def time_zone(self):
        """Gets the time_zone of this DatafeedFetchSchedule.

        Time zone used for schedule. UTC by default. E.g., \"America/Los_Angeles\".

        :return: The time_zone of this DatafeedFetchSchedule.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this DatafeedFetchSchedule.

        Time zone used for schedule. UTC by default. E.g., \"America/Los_Angeles\".

        :param time_zone: The time_zone of this DatafeedFetchSchedule.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def username(self):
        """Gets the username of this DatafeedFetchSchedule.

        An optional user name for fetch_url.

        :return: The username of this DatafeedFetchSchedule.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DatafeedFetchSchedule.

        An optional user name for fetch_url.

        :param username: The username of this DatafeedFetchSchedule.
        :type username: str
        """

        self._username = username

    @property
    def weekday(self):
        """Gets the weekday of this DatafeedFetchSchedule.

        The day of the week the feed file should be fetched. Acceptable values are: - \"`monday`\" - \"`tuesday`\" - \"`wednesday`\" - \"`thursday`\" - \"`friday`\" - \"`saturday`\" - \"`sunday`\" 

        :return: The weekday of this DatafeedFetchSchedule.
        :rtype: str
        """
        return self._weekday

    @weekday.setter
    def weekday(self, weekday):
        """Sets the weekday of this DatafeedFetchSchedule.

        The day of the week the feed file should be fetched. Acceptable values are: - \"`monday`\" - \"`tuesday`\" - \"`wednesday`\" - \"`thursday`\" - \"`friday`\" - \"`saturday`\" - \"`sunday`\" 

        :param weekday: The weekday of this DatafeedFetchSchedule.
        :type weekday: str
        """

        self._weekday = weekday
