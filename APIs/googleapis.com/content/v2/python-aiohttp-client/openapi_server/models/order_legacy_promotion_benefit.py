# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
from openapi_server import util


class OrderLegacyPromotionBenefit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount: Price=None, offer_ids: List[str]=None, sub_type: str=None, tax_impact: Price=None, type: str=None):
        """OrderLegacyPromotionBenefit - a model defined in OpenAPI

        :param discount: The discount of this OrderLegacyPromotionBenefit.
        :param offer_ids: The offer_ids of this OrderLegacyPromotionBenefit.
        :param sub_type: The sub_type of this OrderLegacyPromotionBenefit.
        :param tax_impact: The tax_impact of this OrderLegacyPromotionBenefit.
        :param type: The type of this OrderLegacyPromotionBenefit.
        """
        self.openapi_types = {
            'discount': Price,
            'offer_ids': List[str],
            'sub_type': str,
            'tax_impact': Price,
            'type': str
        }

        self.attribute_map = {
            'discount': 'discount',
            'offer_ids': 'offerIds',
            'sub_type': 'subType',
            'tax_impact': 'taxImpact',
            'type': 'type'
        }

        self._discount = discount
        self._offer_ids = offer_ids
        self._sub_type = sub_type
        self._tax_impact = tax_impact
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLegacyPromotionBenefit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderLegacyPromotionBenefit of this OrderLegacyPromotionBenefit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount(self):
        """Gets the discount of this OrderLegacyPromotionBenefit.


        :return: The discount of this OrderLegacyPromotionBenefit.
        :rtype: Price
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this OrderLegacyPromotionBenefit.


        :param discount: The discount of this OrderLegacyPromotionBenefit.
        :type discount: Price
        """

        self._discount = discount

    @property
    def offer_ids(self):
        """Gets the offer_ids of this OrderLegacyPromotionBenefit.

        The OfferId(s) that were purchased in this order and map to this specific benefit of the promotion.

        :return: The offer_ids of this OrderLegacyPromotionBenefit.
        :rtype: List[str]
        """
        return self._offer_ids

    @offer_ids.setter
    def offer_ids(self, offer_ids):
        """Sets the offer_ids of this OrderLegacyPromotionBenefit.

        The OfferId(s) that were purchased in this order and map to this specific benefit of the promotion.

        :param offer_ids: The offer_ids of this OrderLegacyPromotionBenefit.
        :type offer_ids: List[str]
        """

        self._offer_ids = offer_ids

    @property
    def sub_type(self):
        """Gets the sub_type of this OrderLegacyPromotionBenefit.

        Further describes the benefit of the promotion. Note that we will expand on this enumeration as we support new promotion sub-types. Acceptable values are: - \"`buyMGetMoneyOff`\" - \"`buyMGetNMoneyOff`\" - \"`buyMGetNPercentOff`\" - \"`buyMGetPercentOff`\" - \"`freeGift`\" - \"`freeGiftWithItemId`\" - \"`freeGiftWithValue`\" - \"`freeOvernightShipping`\" - \"`freeShipping`\" - \"`freeTwoDayShipping`\" - \"`moneyOff`\" - \"`percentageOff`\" - \"`rewardPoints`\" - \"`salePrice`\" 

        :return: The sub_type of this OrderLegacyPromotionBenefit.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this OrderLegacyPromotionBenefit.

        Further describes the benefit of the promotion. Note that we will expand on this enumeration as we support new promotion sub-types. Acceptable values are: - \"`buyMGetMoneyOff`\" - \"`buyMGetNMoneyOff`\" - \"`buyMGetNPercentOff`\" - \"`buyMGetPercentOff`\" - \"`freeGift`\" - \"`freeGiftWithItemId`\" - \"`freeGiftWithValue`\" - \"`freeOvernightShipping`\" - \"`freeShipping`\" - \"`freeTwoDayShipping`\" - \"`moneyOff`\" - \"`percentageOff`\" - \"`rewardPoints`\" - \"`salePrice`\" 

        :param sub_type: The sub_type of this OrderLegacyPromotionBenefit.
        :type sub_type: str
        """

        self._sub_type = sub_type

    @property
    def tax_impact(self):
        """Gets the tax_impact of this OrderLegacyPromotionBenefit.


        :return: The tax_impact of this OrderLegacyPromotionBenefit.
        :rtype: Price
        """
        return self._tax_impact

    @tax_impact.setter
    def tax_impact(self, tax_impact):
        """Sets the tax_impact of this OrderLegacyPromotionBenefit.


        :param tax_impact: The tax_impact of this OrderLegacyPromotionBenefit.
        :type tax_impact: Price
        """

        self._tax_impact = tax_impact

    @property
    def type(self):
        """Gets the type of this OrderLegacyPromotionBenefit.

        Describes whether the promotion applies to products (e.g. 20% off) or to shipping (e.g. Free Shipping). Acceptable values are: - \"`product`\" - \"`shipping`\" 

        :return: The type of this OrderLegacyPromotionBenefit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderLegacyPromotionBenefit.

        Describes whether the promotion applies to products (e.g. 20% off) or to shipping (e.g. Free Shipping). Acceptable values are: - \"`product`\" - \"`shipping`\" 

        :param type: The type of this OrderLegacyPromotionBenefit.
        :type type: str
        """

        self._type = type
