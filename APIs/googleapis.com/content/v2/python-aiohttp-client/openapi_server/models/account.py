# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_adwords_link import AccountAdwordsLink
from openapi_server.models.account_business_information import AccountBusinessInformation
from openapi_server.models.account_google_my_business_link import AccountGoogleMyBusinessLink
from openapi_server.models.account_user import AccountUser
from openapi_server.models.account_you_tube_channel_link import AccountYouTubeChannelLink
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adult_content: bool=None, adwords_links: List[AccountAdwordsLink]=None, business_information: AccountBusinessInformation=None, google_my_business_link: AccountGoogleMyBusinessLink=None, id: str=None, kind: str=None, name: str=None, reviews_url: str=None, seller_id: str=None, users: List[AccountUser]=None, website_url: str=None, youtube_channel_links: List[AccountYouTubeChannelLink]=None):
        """Account - a model defined in OpenAPI

        :param adult_content: The adult_content of this Account.
        :param adwords_links: The adwords_links of this Account.
        :param business_information: The business_information of this Account.
        :param google_my_business_link: The google_my_business_link of this Account.
        :param id: The id of this Account.
        :param kind: The kind of this Account.
        :param name: The name of this Account.
        :param reviews_url: The reviews_url of this Account.
        :param seller_id: The seller_id of this Account.
        :param users: The users of this Account.
        :param website_url: The website_url of this Account.
        :param youtube_channel_links: The youtube_channel_links of this Account.
        """
        self.openapi_types = {
            'adult_content': bool,
            'adwords_links': List[AccountAdwordsLink],
            'business_information': AccountBusinessInformation,
            'google_my_business_link': AccountGoogleMyBusinessLink,
            'id': str,
            'kind': str,
            'name': str,
            'reviews_url': str,
            'seller_id': str,
            'users': List[AccountUser],
            'website_url': str,
            'youtube_channel_links': List[AccountYouTubeChannelLink]
        }

        self.attribute_map = {
            'adult_content': 'adultContent',
            'adwords_links': 'adwordsLinks',
            'business_information': 'businessInformation',
            'google_my_business_link': 'googleMyBusinessLink',
            'id': 'id',
            'kind': 'kind',
            'name': 'name',
            'reviews_url': 'reviewsUrl',
            'seller_id': 'sellerId',
            'users': 'users',
            'website_url': 'websiteUrl',
            'youtube_channel_links': 'youtubeChannelLinks'
        }

        self._adult_content = adult_content
        self._adwords_links = adwords_links
        self._business_information = business_information
        self._google_my_business_link = google_my_business_link
        self._id = id
        self._kind = kind
        self._name = name
        self._reviews_url = reviews_url
        self._seller_id = seller_id
        self._users = users
        self._website_url = website_url
        self._youtube_channel_links = youtube_channel_links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adult_content(self):
        """Gets the adult_content of this Account.

        Indicates whether the merchant sells adult content.

        :return: The adult_content of this Account.
        :rtype: bool
        """
        return self._adult_content

    @adult_content.setter
    def adult_content(self, adult_content):
        """Sets the adult_content of this Account.

        Indicates whether the merchant sells adult content.

        :param adult_content: The adult_content of this Account.
        :type adult_content: bool
        """

        self._adult_content = adult_content

    @property
    def adwords_links(self):
        """Gets the adwords_links of this Account.

        List of linked AdWords accounts that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected either in the AdWords interface or through the AdWords API. To delete an active link, or to cancel a link request, remove it from the list.

        :return: The adwords_links of this Account.
        :rtype: List[AccountAdwordsLink]
        """
        return self._adwords_links

    @adwords_links.setter
    def adwords_links(self, adwords_links):
        """Sets the adwords_links of this Account.

        List of linked AdWords accounts that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected either in the AdWords interface or through the AdWords API. To delete an active link, or to cancel a link request, remove it from the list.

        :param adwords_links: The adwords_links of this Account.
        :type adwords_links: List[AccountAdwordsLink]
        """

        self._adwords_links = adwords_links

    @property
    def business_information(self):
        """Gets the business_information of this Account.


        :return: The business_information of this Account.
        :rtype: AccountBusinessInformation
        """
        return self._business_information

    @business_information.setter
    def business_information(self, business_information):
        """Sets the business_information of this Account.


        :param business_information: The business_information of this Account.
        :type business_information: AccountBusinessInformation
        """

        self._business_information = business_information

    @property
    def google_my_business_link(self):
        """Gets the google_my_business_link of this Account.


        :return: The google_my_business_link of this Account.
        :rtype: AccountGoogleMyBusinessLink
        """
        return self._google_my_business_link

    @google_my_business_link.setter
    def google_my_business_link(self, google_my_business_link):
        """Sets the google_my_business_link of this Account.


        :param google_my_business_link: The google_my_business_link of this Account.
        :type google_my_business_link: AccountGoogleMyBusinessLink
        """

        self._google_my_business_link = google_my_business_link

    @property
    def id(self):
        """Gets the id of this Account.

        Required for update. Merchant Center account ID.

        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        Required for update. Merchant Center account ID.

        :param id: The id of this Account.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Account.

        Identifies what kind of resource this is. Value: the fixed string \"`content#account`\"

        :return: The kind of this Account.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Account.

        Identifies what kind of resource this is. Value: the fixed string \"`content#account`\"

        :param kind: The kind of this Account.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Account.

        Required. Display name for the account.

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Required. Display name for the account.

        :param name: The name of this Account.
        :type name: str
        """

        self._name = name

    @property
    def reviews_url(self):
        """Gets the reviews_url of this Account.

        [DEPRECATED] This field is never returned and will be ignored if provided.

        :return: The reviews_url of this Account.
        :rtype: str
        """
        return self._reviews_url

    @reviews_url.setter
    def reviews_url(self, reviews_url):
        """Sets the reviews_url of this Account.

        [DEPRECATED] This field is never returned and will be ignored if provided.

        :param reviews_url: The reviews_url of this Account.
        :type reviews_url: str
        """

        self._reviews_url = reviews_url

    @property
    def seller_id(self):
        """Gets the seller_id of this Account.

        Client-specific, locally-unique, internal ID for the child account.

        :return: The seller_id of this Account.
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this Account.

        Client-specific, locally-unique, internal ID for the child account.

        :param seller_id: The seller_id of this Account.
        :type seller_id: str
        """

        self._seller_id = seller_id

    @property
    def users(self):
        """Gets the users of this Account.

        Users with access to the account. Every account (except for subaccounts) must have at least one admin user.

        :return: The users of this Account.
        :rtype: List[AccountUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Account.

        Users with access to the account. Every account (except for subaccounts) must have at least one admin user.

        :param users: The users of this Account.
        :type users: List[AccountUser]
        """

        self._users = users

    @property
    def website_url(self):
        """Gets the website_url of this Account.

        The merchant's website.

        :return: The website_url of this Account.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this Account.

        The merchant's website.

        :param website_url: The website_url of this Account.
        :type website_url: str
        """

        self._website_url = website_url

    @property
    def youtube_channel_links(self):
        """Gets the youtube_channel_links of this Account.

        List of linked YouTube channels that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected in the YT Creator Studio interface. To delete an active link, or to cancel a link request, remove it from the list.

        :return: The youtube_channel_links of this Account.
        :rtype: List[AccountYouTubeChannelLink]
        """
        return self._youtube_channel_links

    @youtube_channel_links.setter
    def youtube_channel_links(self, youtube_channel_links):
        """Sets the youtube_channel_links of this Account.

        List of linked YouTube channels that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected in the YT Creator Studio interface. To delete an active link, or to cancel a link request, remove it from the list.

        :param youtube_channel_links: The youtube_channel_links of this Account.
        :type youtube_channel_links: List[AccountYouTubeChannelLink]
        """

        self._youtube_channel_links = youtube_channel_links
