# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HolidaysHoliday(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, _date: str=None, delivery_guarantee_date: str=None, delivery_guarantee_hour: str=None, id: str=None, type: str=None):
        """HolidaysHoliday - a model defined in OpenAPI

        :param country_code: The country_code of this HolidaysHoliday.
        :param _date: The _date of this HolidaysHoliday.
        :param delivery_guarantee_date: The delivery_guarantee_date of this HolidaysHoliday.
        :param delivery_guarantee_hour: The delivery_guarantee_hour of this HolidaysHoliday.
        :param id: The id of this HolidaysHoliday.
        :param type: The type of this HolidaysHoliday.
        """
        self.openapi_types = {
            'country_code': str,
            '_date': str,
            'delivery_guarantee_date': str,
            'delivery_guarantee_hour': str,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            '_date': 'date',
            'delivery_guarantee_date': 'deliveryGuaranteeDate',
            'delivery_guarantee_hour': 'deliveryGuaranteeHour',
            'id': 'id',
            'type': 'type'
        }

        self._country_code = country_code
        self.__date = _date
        self._delivery_guarantee_date = delivery_guarantee_date
        self._delivery_guarantee_hour = delivery_guarantee_hour
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HolidaysHoliday':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HolidaysHoliday of this HolidaysHoliday.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this HolidaysHoliday.

        The CLDR territory code of the country in which the holiday is available. E.g. \"US\", \"DE\", \"GB\". A holiday cutoff can only be configured in a shipping settings service with matching delivery country. Always present.

        :return: The country_code of this HolidaysHoliday.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this HolidaysHoliday.

        The CLDR territory code of the country in which the holiday is available. E.g. \"US\", \"DE\", \"GB\". A holiday cutoff can only be configured in a shipping settings service with matching delivery country. Always present.

        :param country_code: The country_code of this HolidaysHoliday.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def _date(self):
        """Gets the _date of this HolidaysHoliday.

        Date of the holiday, in ISO 8601 format. E.g. \"2016-12-25\" for Christmas 2016. Always present.

        :return: The _date of this HolidaysHoliday.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this HolidaysHoliday.

        Date of the holiday, in ISO 8601 format. E.g. \"2016-12-25\" for Christmas 2016. Always present.

        :param _date: The _date of this HolidaysHoliday.
        :type _date: str
        """

        self.__date = _date

    @property
    def delivery_guarantee_date(self):
        """Gets the delivery_guarantee_date of this HolidaysHoliday.

        Date on which the order has to arrive at the customer's, in ISO 8601 format. E.g. \"2016-12-24\" for 24th December 2016. Always present.

        :return: The delivery_guarantee_date of this HolidaysHoliday.
        :rtype: str
        """
        return self._delivery_guarantee_date

    @delivery_guarantee_date.setter
    def delivery_guarantee_date(self, delivery_guarantee_date):
        """Sets the delivery_guarantee_date of this HolidaysHoliday.

        Date on which the order has to arrive at the customer's, in ISO 8601 format. E.g. \"2016-12-24\" for 24th December 2016. Always present.

        :param delivery_guarantee_date: The delivery_guarantee_date of this HolidaysHoliday.
        :type delivery_guarantee_date: str
        """

        self._delivery_guarantee_date = delivery_guarantee_date

    @property
    def delivery_guarantee_hour(self):
        """Gets the delivery_guarantee_hour of this HolidaysHoliday.

        Hour of the day in the delivery location's timezone on the guaranteed delivery date by which the order has to arrive at the customer's. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Always present.

        :return: The delivery_guarantee_hour of this HolidaysHoliday.
        :rtype: str
        """
        return self._delivery_guarantee_hour

    @delivery_guarantee_hour.setter
    def delivery_guarantee_hour(self, delivery_guarantee_hour):
        """Sets the delivery_guarantee_hour of this HolidaysHoliday.

        Hour of the day in the delivery location's timezone on the guaranteed delivery date by which the order has to arrive at the customer's. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Always present.

        :param delivery_guarantee_hour: The delivery_guarantee_hour of this HolidaysHoliday.
        :type delivery_guarantee_hour: str
        """

        self._delivery_guarantee_hour = delivery_guarantee_hour

    @property
    def id(self):
        """Gets the id of this HolidaysHoliday.

        Unique identifier for the holiday to be used when configuring holiday cutoffs. Always present.

        :return: The id of this HolidaysHoliday.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HolidaysHoliday.

        Unique identifier for the holiday to be used when configuring holiday cutoffs. Always present.

        :param id: The id of this HolidaysHoliday.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this HolidaysHoliday.

        The holiday type. Always present. Acceptable values are: - \"`Christmas`\" - \"`Easter`\" - \"`Father's Day`\" - \"`Halloween`\" - \"`Independence Day (USA)`\" - \"`Mother's Day`\" - \"`Thanksgiving`\" - \"`Valentine's Day`\" 

        :return: The type of this HolidaysHoliday.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HolidaysHoliday.

        The holiday type. Always present. Acceptable values are: - \"`Christmas`\" - \"`Easter`\" - \"`Father's Day`\" - \"`Halloween`\" - \"`Independence Day (USA)`\" - \"`Mother's Day`\" - \"`Thanksgiving`\" - \"`Valentine's Day`\" 

        :param type: The type of this HolidaysHoliday.
        :type type: str
        """

        self._type = type
