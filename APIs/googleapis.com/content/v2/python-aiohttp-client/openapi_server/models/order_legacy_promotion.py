# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_legacy_promotion_benefit import OrderLegacyPromotionBenefit
from openapi_server import util


class OrderLegacyPromotion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benefits: List[OrderLegacyPromotionBenefit]=None, effective_dates: str=None, generic_redemption_code: str=None, id: str=None, long_title: str=None, product_applicability: str=None, redemption_channel: str=None):
        """OrderLegacyPromotion - a model defined in OpenAPI

        :param benefits: The benefits of this OrderLegacyPromotion.
        :param effective_dates: The effective_dates of this OrderLegacyPromotion.
        :param generic_redemption_code: The generic_redemption_code of this OrderLegacyPromotion.
        :param id: The id of this OrderLegacyPromotion.
        :param long_title: The long_title of this OrderLegacyPromotion.
        :param product_applicability: The product_applicability of this OrderLegacyPromotion.
        :param redemption_channel: The redemption_channel of this OrderLegacyPromotion.
        """
        self.openapi_types = {
            'benefits': List[OrderLegacyPromotionBenefit],
            'effective_dates': str,
            'generic_redemption_code': str,
            'id': str,
            'long_title': str,
            'product_applicability': str,
            'redemption_channel': str
        }

        self.attribute_map = {
            'benefits': 'benefits',
            'effective_dates': 'effectiveDates',
            'generic_redemption_code': 'genericRedemptionCode',
            'id': 'id',
            'long_title': 'longTitle',
            'product_applicability': 'productApplicability',
            'redemption_channel': 'redemptionChannel'
        }

        self._benefits = benefits
        self._effective_dates = effective_dates
        self._generic_redemption_code = generic_redemption_code
        self._id = id
        self._long_title = long_title
        self._product_applicability = product_applicability
        self._redemption_channel = redemption_channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLegacyPromotion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderLegacyPromotion of this OrderLegacyPromotion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benefits(self):
        """Gets the benefits of this OrderLegacyPromotion.


        :return: The benefits of this OrderLegacyPromotion.
        :rtype: List[OrderLegacyPromotionBenefit]
        """
        return self._benefits

    @benefits.setter
    def benefits(self, benefits):
        """Sets the benefits of this OrderLegacyPromotion.


        :param benefits: The benefits of this OrderLegacyPromotion.
        :type benefits: List[OrderLegacyPromotionBenefit]
        """

        self._benefits = benefits

    @property
    def effective_dates(self):
        """Gets the effective_dates of this OrderLegacyPromotion.

        The date and time frame when the promotion is active and ready for validation review. Note that the promotion live time may be delayed for a few hours due to the validation review. Start date and end date are separated by a forward slash (/). The start date is specified by the format (YYYY-MM-DD), followed by the letter ?T?, the time of the day when the sale starts (in Greenwich Mean Time, GMT), followed by an expression of the time zone for the sale. The end date is in the same format.

        :return: The effective_dates of this OrderLegacyPromotion.
        :rtype: str
        """
        return self._effective_dates

    @effective_dates.setter
    def effective_dates(self, effective_dates):
        """Sets the effective_dates of this OrderLegacyPromotion.

        The date and time frame when the promotion is active and ready for validation review. Note that the promotion live time may be delayed for a few hours due to the validation review. Start date and end date are separated by a forward slash (/). The start date is specified by the format (YYYY-MM-DD), followed by the letter ?T?, the time of the day when the sale starts (in Greenwich Mean Time, GMT), followed by an expression of the time zone for the sale. The end date is in the same format.

        :param effective_dates: The effective_dates of this OrderLegacyPromotion.
        :type effective_dates: str
        """

        self._effective_dates = effective_dates

    @property
    def generic_redemption_code(self):
        """Gets the generic_redemption_code of this OrderLegacyPromotion.

        Optional. The text code that corresponds to the promotion when applied on the retailer?s website.

        :return: The generic_redemption_code of this OrderLegacyPromotion.
        :rtype: str
        """
        return self._generic_redemption_code

    @generic_redemption_code.setter
    def generic_redemption_code(self, generic_redemption_code):
        """Sets the generic_redemption_code of this OrderLegacyPromotion.

        Optional. The text code that corresponds to the promotion when applied on the retailer?s website.

        :param generic_redemption_code: The generic_redemption_code of this OrderLegacyPromotion.
        :type generic_redemption_code: str
        """

        self._generic_redemption_code = generic_redemption_code

    @property
    def id(self):
        """Gets the id of this OrderLegacyPromotion.

        The unique ID of the promotion.

        :return: The id of this OrderLegacyPromotion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderLegacyPromotion.

        The unique ID of the promotion.

        :param id: The id of this OrderLegacyPromotion.
        :type id: str
        """

        self._id = id

    @property
    def long_title(self):
        """Gets the long_title of this OrderLegacyPromotion.

        The full title of the promotion.

        :return: The long_title of this OrderLegacyPromotion.
        :rtype: str
        """
        return self._long_title

    @long_title.setter
    def long_title(self, long_title):
        """Sets the long_title of this OrderLegacyPromotion.

        The full title of the promotion.

        :param long_title: The long_title of this OrderLegacyPromotion.
        :type long_title: str
        """

        self._long_title = long_title

    @property
    def product_applicability(self):
        """Gets the product_applicability of this OrderLegacyPromotion.

        Whether the promotion is applicable to all products or only specific products. Acceptable values are: - \"`allProducts`\" - \"`specificProducts`\" 

        :return: The product_applicability of this OrderLegacyPromotion.
        :rtype: str
        """
        return self._product_applicability

    @product_applicability.setter
    def product_applicability(self, product_applicability):
        """Sets the product_applicability of this OrderLegacyPromotion.

        Whether the promotion is applicable to all products or only specific products. Acceptable values are: - \"`allProducts`\" - \"`specificProducts`\" 

        :param product_applicability: The product_applicability of this OrderLegacyPromotion.
        :type product_applicability: str
        """

        self._product_applicability = product_applicability

    @property
    def redemption_channel(self):
        """Gets the redemption_channel of this OrderLegacyPromotion.

        Indicates that the promotion is valid online. Acceptable values are: - \"`online`\" 

        :return: The redemption_channel of this OrderLegacyPromotion.
        :rtype: str
        """
        return self._redemption_channel

    @redemption_channel.setter
    def redemption_channel(self, redemption_channel):
        """Sets the redemption_channel of this OrderLegacyPromotion.

        Indicates that the promotion is valid online. Acceptable values are: - \"`online`\" 

        :param redemption_channel: The redemption_channel of this OrderLegacyPromotion.
        :type redemption_channel: str
        """

        self._redemption_channel = redemption_channel
