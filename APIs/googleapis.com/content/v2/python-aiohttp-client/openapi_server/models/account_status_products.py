# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_status_item_level_issue import AccountStatusItemLevelIssue
from openapi_server.models.account_status_statistics import AccountStatusStatistics
from openapi_server import util


class AccountStatusProducts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, country: str=None, destination: str=None, item_level_issues: List[AccountStatusItemLevelIssue]=None, statistics: AccountStatusStatistics=None):
        """AccountStatusProducts - a model defined in OpenAPI

        :param channel: The channel of this AccountStatusProducts.
        :param country: The country of this AccountStatusProducts.
        :param destination: The destination of this AccountStatusProducts.
        :param item_level_issues: The item_level_issues of this AccountStatusProducts.
        :param statistics: The statistics of this AccountStatusProducts.
        """
        self.openapi_types = {
            'channel': str,
            'country': str,
            'destination': str,
            'item_level_issues': List[AccountStatusItemLevelIssue],
            'statistics': AccountStatusStatistics
        }

        self.attribute_map = {
            'channel': 'channel',
            'country': 'country',
            'destination': 'destination',
            'item_level_issues': 'itemLevelIssues',
            'statistics': 'statistics'
        }

        self._channel = channel
        self._country = country
        self._destination = destination
        self._item_level_issues = item_level_issues
        self._statistics = statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountStatusProducts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountStatusProducts of this AccountStatusProducts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this AccountStatusProducts.

        The channel the data applies to. Acceptable values are: - \"`local`\" - \"`online`\" 

        :return: The channel of this AccountStatusProducts.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this AccountStatusProducts.

        The channel the data applies to. Acceptable values are: - \"`local`\" - \"`online`\" 

        :param channel: The channel of this AccountStatusProducts.
        :type channel: str
        """

        self._channel = channel

    @property
    def country(self):
        """Gets the country of this AccountStatusProducts.

        The country the data applies to.

        :return: The country of this AccountStatusProducts.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AccountStatusProducts.

        The country the data applies to.

        :param country: The country of this AccountStatusProducts.
        :type country: str
        """

        self._country = country

    @property
    def destination(self):
        """Gets the destination of this AccountStatusProducts.

        The destination the data applies to.

        :return: The destination of this AccountStatusProducts.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this AccountStatusProducts.

        The destination the data applies to.

        :param destination: The destination of this AccountStatusProducts.
        :type destination: str
        """

        self._destination = destination

    @property
    def item_level_issues(self):
        """Gets the item_level_issues of this AccountStatusProducts.

        List of item-level issues.

        :return: The item_level_issues of this AccountStatusProducts.
        :rtype: List[AccountStatusItemLevelIssue]
        """
        return self._item_level_issues

    @item_level_issues.setter
    def item_level_issues(self, item_level_issues):
        """Sets the item_level_issues of this AccountStatusProducts.

        List of item-level issues.

        :param item_level_issues: The item_level_issues of this AccountStatusProducts.
        :type item_level_issues: List[AccountStatusItemLevelIssue]
        """

        self._item_level_issues = item_level_issues

    @property
    def statistics(self):
        """Gets the statistics of this AccountStatusProducts.


        :return: The statistics of this AccountStatusProducts.
        :rtype: AccountStatusStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this AccountStatusProducts.


        :param statistics: The statistics of this AccountStatusProducts.
        :type statistics: AccountStatusStatistics
        """

        self._statistics = statistics
