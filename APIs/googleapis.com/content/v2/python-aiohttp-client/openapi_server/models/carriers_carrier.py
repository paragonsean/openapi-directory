# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CarriersCarrier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, edd_services: List[str]=None, name: str=None, services: List[str]=None):
        """CarriersCarrier - a model defined in OpenAPI

        :param country: The country of this CarriersCarrier.
        :param edd_services: The edd_services of this CarriersCarrier.
        :param name: The name of this CarriersCarrier.
        :param services: The services of this CarriersCarrier.
        """
        self.openapi_types = {
            'country': str,
            'edd_services': List[str],
            'name': str,
            'services': List[str]
        }

        self.attribute_map = {
            'country': 'country',
            'edd_services': 'eddServices',
            'name': 'name',
            'services': 'services'
        }

        self._country = country
        self._edd_services = edd_services
        self._name = name
        self._services = services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CarriersCarrier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CarriersCarrier of this CarriersCarrier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this CarriersCarrier.

        The CLDR country code of the carrier (e.g., \"US\"). Always present.

        :return: The country of this CarriersCarrier.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CarriersCarrier.

        The CLDR country code of the carrier (e.g., \"US\"). Always present.

        :param country: The country of this CarriersCarrier.
        :type country: str
        """

        self._country = country

    @property
    def edd_services(self):
        """Gets the edd_services of this CarriersCarrier.

        A list of services supported for EDD (Estimated Delivery Date) calculation. This is the list of valid values for WarehouseBasedDeliveryTime.carrierService.

        :return: The edd_services of this CarriersCarrier.
        :rtype: List[str]
        """
        return self._edd_services

    @edd_services.setter
    def edd_services(self, edd_services):
        """Sets the edd_services of this CarriersCarrier.

        A list of services supported for EDD (Estimated Delivery Date) calculation. This is the list of valid values for WarehouseBasedDeliveryTime.carrierService.

        :param edd_services: The edd_services of this CarriersCarrier.
        :type edd_services: List[str]
        """

        self._edd_services = edd_services

    @property
    def name(self):
        """Gets the name of this CarriersCarrier.

        The name of the carrier (e.g., `\"UPS\"`). Always present.

        :return: The name of this CarriersCarrier.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CarriersCarrier.

        The name of the carrier (e.g., `\"UPS\"`). Always present.

        :param name: The name of this CarriersCarrier.
        :type name: str
        """

        self._name = name

    @property
    def services(self):
        """Gets the services of this CarriersCarrier.

        A list of supported services (e.g., `\"ground\"`) for that carrier. Contains at least one service. This is the list of valid values for CarrierRate.carrierService.

        :return: The services of this CarriersCarrier.
        :rtype: List[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this CarriersCarrier.

        A list of supported services (e.g., `\"ground\"`) for that carrier. Contains at least one service. This is the list of valid values for CarrierRate.carrierService.

        :param services: The services of this CarriersCarrier.
        :type services: List[str]
        """

        self._services = services
