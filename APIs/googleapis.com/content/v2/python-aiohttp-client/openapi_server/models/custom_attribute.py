# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, unit: str=None, value: str=None):
        """CustomAttribute - a model defined in OpenAPI

        :param name: The name of this CustomAttribute.
        :param type: The type of this CustomAttribute.
        :param unit: The unit of this CustomAttribute.
        :param value: The value of this CustomAttribute.
        """
        self.openapi_types = {
            'name': str,
            'type': str,
            'unit': str,
            'value': str
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'unit': 'unit',
            'value': 'value'
        }

        self._name = name
        self._type = type
        self._unit = unit
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomAttribute of this CustomAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CustomAttribute.

        The name of the attribute. Underscores will be replaced by spaces upon insertion.

        :return: The name of this CustomAttribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomAttribute.

        The name of the attribute. Underscores will be replaced by spaces upon insertion.

        :param name: The name of this CustomAttribute.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this CustomAttribute.

        The type of the attribute. Acceptable values are: - \"`boolean`\" - \"`datetimerange`\" - \"`float`\" - \"`group`\" - \"`int`\" - \"`price`\" - \"`text`\" - \"`time`\" - \"`url`\" 

        :return: The type of this CustomAttribute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomAttribute.

        The type of the attribute. Acceptable values are: - \"`boolean`\" - \"`datetimerange`\" - \"`float`\" - \"`group`\" - \"`int`\" - \"`price`\" - \"`text`\" - \"`time`\" - \"`url`\" 

        :param type: The type of this CustomAttribute.
        :type type: str
        """

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this CustomAttribute.

        Free-form unit of the attribute. Unit can only be used for values of type int, float, or price.

        :return: The unit of this CustomAttribute.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this CustomAttribute.

        Free-form unit of the attribute. Unit can only be used for values of type int, float, or price.

        :param unit: The unit of this CustomAttribute.
        :type unit: str
        """

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this CustomAttribute.

        The value of the attribute.

        :return: The value of this CustomAttribute.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomAttribute.

        The value of the attribute.

        :param value: The value of this CustomAttribute.
        :type value: str
        """

        self._value = value
