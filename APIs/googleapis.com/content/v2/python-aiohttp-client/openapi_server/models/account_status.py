# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_status_account_level_issue import AccountStatusAccountLevelIssue
from openapi_server.models.account_status_data_quality_issue import AccountStatusDataQualityIssue
from openapi_server.models.account_status_products import AccountStatusProducts
from openapi_server import util


class AccountStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, account_level_issues: List[AccountStatusAccountLevelIssue]=None, data_quality_issues: List[AccountStatusDataQualityIssue]=None, kind: str=None, products: List[AccountStatusProducts]=None, website_claimed: bool=None):
        """AccountStatus - a model defined in OpenAPI

        :param account_id: The account_id of this AccountStatus.
        :param account_level_issues: The account_level_issues of this AccountStatus.
        :param data_quality_issues: The data_quality_issues of this AccountStatus.
        :param kind: The kind of this AccountStatus.
        :param products: The products of this AccountStatus.
        :param website_claimed: The website_claimed of this AccountStatus.
        """
        self.openapi_types = {
            'account_id': str,
            'account_level_issues': List[AccountStatusAccountLevelIssue],
            'data_quality_issues': List[AccountStatusDataQualityIssue],
            'kind': str,
            'products': List[AccountStatusProducts],
            'website_claimed': bool
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'account_level_issues': 'accountLevelIssues',
            'data_quality_issues': 'dataQualityIssues',
            'kind': 'kind',
            'products': 'products',
            'website_claimed': 'websiteClaimed'
        }

        self._account_id = account_id
        self._account_level_issues = account_level_issues
        self._data_quality_issues = data_quality_issues
        self._kind = kind
        self._products = products
        self._website_claimed = website_claimed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountStatus of this AccountStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AccountStatus.

        The ID of the account for which the status is reported.

        :return: The account_id of this AccountStatus.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountStatus.

        The ID of the account for which the status is reported.

        :param account_id: The account_id of this AccountStatus.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def account_level_issues(self):
        """Gets the account_level_issues of this AccountStatus.

        A list of account level issues.

        :return: The account_level_issues of this AccountStatus.
        :rtype: List[AccountStatusAccountLevelIssue]
        """
        return self._account_level_issues

    @account_level_issues.setter
    def account_level_issues(self, account_level_issues):
        """Sets the account_level_issues of this AccountStatus.

        A list of account level issues.

        :param account_level_issues: The account_level_issues of this AccountStatus.
        :type account_level_issues: List[AccountStatusAccountLevelIssue]
        """

        self._account_level_issues = account_level_issues

    @property
    def data_quality_issues(self):
        """Gets the data_quality_issues of this AccountStatus.

        DEPRECATED - never populated.

        :return: The data_quality_issues of this AccountStatus.
        :rtype: List[AccountStatusDataQualityIssue]
        """
        return self._data_quality_issues

    @data_quality_issues.setter
    def data_quality_issues(self, data_quality_issues):
        """Sets the data_quality_issues of this AccountStatus.

        DEPRECATED - never populated.

        :param data_quality_issues: The data_quality_issues of this AccountStatus.
        :type data_quality_issues: List[AccountStatusDataQualityIssue]
        """

        self._data_quality_issues = data_quality_issues

    @property
    def kind(self):
        """Gets the kind of this AccountStatus.

        Identifies what kind of resource this is. Value: the fixed string \"`content#accountStatus`\"

        :return: The kind of this AccountStatus.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AccountStatus.

        Identifies what kind of resource this is. Value: the fixed string \"`content#accountStatus`\"

        :param kind: The kind of this AccountStatus.
        :type kind: str
        """

        self._kind = kind

    @property
    def products(self):
        """Gets the products of this AccountStatus.

        List of product-related data by channel, destination, and country. Data in this field may be delayed by up to 30 minutes.

        :return: The products of this AccountStatus.
        :rtype: List[AccountStatusProducts]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this AccountStatus.

        List of product-related data by channel, destination, and country. Data in this field may be delayed by up to 30 minutes.

        :param products: The products of this AccountStatus.
        :type products: List[AccountStatusProducts]
        """

        self._products = products

    @property
    def website_claimed(self):
        """Gets the website_claimed of this AccountStatus.

        Whether the account's website is claimed or not.

        :return: The website_claimed of this AccountStatus.
        :rtype: bool
        """
        return self._website_claimed

    @website_claimed.setter
    def website_claimed(self, website_claimed):
        """Sets the website_claimed of this AccountStatus.

        Whether the account's website is claimed or not.

        :param website_claimed: The website_claimed of this AccountStatus.
        :type website_claimed: bool
        """

        self._website_claimed = website_claimed
