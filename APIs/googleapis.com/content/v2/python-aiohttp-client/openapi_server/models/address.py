# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrative_area: str=None, city: str=None, country: str=None, postal_code: str=None, street_address: str=None):
        """Address - a model defined in OpenAPI

        :param administrative_area: The administrative_area of this Address.
        :param city: The city of this Address.
        :param country: The country of this Address.
        :param postal_code: The postal_code of this Address.
        :param street_address: The street_address of this Address.
        """
        self.openapi_types = {
            'administrative_area': str,
            'city': str,
            'country': str,
            'postal_code': str,
            'street_address': str
        }

        self.attribute_map = {
            'administrative_area': 'administrativeArea',
            'city': 'city',
            'country': 'country',
            'postal_code': 'postalCode',
            'street_address': 'streetAddress'
        }

        self._administrative_area = administrative_area
        self._city = city
        self._country = country
        self._postal_code = postal_code
        self._street_address = street_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrative_area(self):
        """Gets the administrative_area of this Address.

        Required. Top-level administrative subdivision of the country. For example, a state like California (\"CA\") or a province like Quebec (\"QC\").

        :return: The administrative_area of this Address.
        :rtype: str
        """
        return self._administrative_area

    @administrative_area.setter
    def administrative_area(self, administrative_area):
        """Sets the administrative_area of this Address.

        Required. Top-level administrative subdivision of the country. For example, a state like California (\"CA\") or a province like Quebec (\"QC\").

        :param administrative_area: The administrative_area of this Address.
        :type administrative_area: str
        """

        self._administrative_area = administrative_area

    @property
    def city(self):
        """Gets the city of this Address.

        Required. City, town or commune. May also include dependent localities or sublocalities (e.g. neighborhoods or suburbs).

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        Required. City, town or commune. May also include dependent localities or sublocalities (e.g. neighborhoods or suburbs).

        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address.

        Required. [CLDR country code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml)(e.g. \"US\").

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        Required. [CLDR country code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml)(e.g. \"US\").

        :param country: The country of this Address.
        :type country: str
        """

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        Required. Postal code or ZIP (e.g. \"94043\"). Required.

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        Required. Postal code or ZIP (e.g. \"94043\"). Required.

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def street_address(self):
        """Gets the street_address of this Address.

        Street-level part of the address.

        :return: The street_address of this Address.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Address.

        Street-level part of the address.

        :param street_address: The street_address of this Address.
        :type street_address: str
        """

        self._street_address = street_address
