# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_attribute import CustomAttribute
from openapi_server.models.custom_group import CustomGroup
from openapi_server.models.error import Error
from openapi_server.models.installment import Installment
from openapi_server.models.loyalty_points import LoyaltyPoints
from openapi_server.models.price import Price
from openapi_server.models.product_aspect import ProductAspect
from openapi_server.models.product_destination import ProductDestination
from openapi_server.models.product_shipping import ProductShipping
from openapi_server.models.product_shipping_dimension import ProductShippingDimension
from openapi_server.models.product_shipping_weight import ProductShippingWeight
from openapi_server.models.product_tax import ProductTax
from openapi_server.models.product_unit_pricing_base_measure import ProductUnitPricingBaseMeasure
from openapi_server.models.product_unit_pricing_measure import ProductUnitPricingMeasure
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_image_links: List[str]=None, additional_product_types: List[str]=None, adult: bool=None, adwords_grouping: str=None, adwords_labels: List[str]=None, adwords_redirect: str=None, age_group: str=None, aspects: List[ProductAspect]=None, availability: str=None, availability_date: str=None, brand: str=None, canonical_link: str=None, channel: str=None, color: str=None, condition: str=None, content_language: str=None, cost_of_goods_sold: Price=None, custom_attributes: List[CustomAttribute]=None, custom_groups: List[CustomGroup]=None, custom_label0: str=None, custom_label1: str=None, custom_label2: str=None, custom_label3: str=None, custom_label4: str=None, description: str=None, destinations: List[ProductDestination]=None, display_ads_id: str=None, display_ads_link: str=None, display_ads_similar_ids: List[str]=None, display_ads_title: str=None, display_ads_value: float=None, energy_efficiency_class: str=None, expiration_date: str=None, gender: str=None, google_product_category: str=None, gtin: str=None, id: str=None, identifier_exists: bool=None, image_link: str=None, installment: Installment=None, is_bundle: bool=None, item_group_id: str=None, kind: str=None, link: str=None, loyalty_points: LoyaltyPoints=None, material: str=None, max_energy_efficiency_class: str=None, max_handling_time: str=None, min_energy_efficiency_class: str=None, min_handling_time: str=None, mobile_link: str=None, mpn: str=None, multipack: str=None, offer_id: str=None, online_only: bool=None, pattern: str=None, price: Price=None, product_type: str=None, promotion_ids: List[str]=None, sale_price: Price=None, sale_price_effective_date: str=None, sell_on_google_quantity: str=None, shipping: List[ProductShipping]=None, shipping_height: ProductShippingDimension=None, shipping_label: str=None, shipping_length: ProductShippingDimension=None, shipping_weight: ProductShippingWeight=None, shipping_width: ProductShippingDimension=None, size_system: str=None, size_type: str=None, sizes: List[str]=None, source: str=None, target_country: str=None, taxes: List[ProductTax]=None, title: str=None, unit_pricing_base_measure: ProductUnitPricingBaseMeasure=None, unit_pricing_measure: ProductUnitPricingMeasure=None, validated_destinations: List[str]=None, warnings: List[Error]=None):
        """Product - a model defined in OpenAPI

        :param additional_image_links: The additional_image_links of this Product.
        :param additional_product_types: The additional_product_types of this Product.
        :param adult: The adult of this Product.
        :param adwords_grouping: The adwords_grouping of this Product.
        :param adwords_labels: The adwords_labels of this Product.
        :param adwords_redirect: The adwords_redirect of this Product.
        :param age_group: The age_group of this Product.
        :param aspects: The aspects of this Product.
        :param availability: The availability of this Product.
        :param availability_date: The availability_date of this Product.
        :param brand: The brand of this Product.
        :param canonical_link: The canonical_link of this Product.
        :param channel: The channel of this Product.
        :param color: The color of this Product.
        :param condition: The condition of this Product.
        :param content_language: The content_language of this Product.
        :param cost_of_goods_sold: The cost_of_goods_sold of this Product.
        :param custom_attributes: The custom_attributes of this Product.
        :param custom_groups: The custom_groups of this Product.
        :param custom_label0: The custom_label0 of this Product.
        :param custom_label1: The custom_label1 of this Product.
        :param custom_label2: The custom_label2 of this Product.
        :param custom_label3: The custom_label3 of this Product.
        :param custom_label4: The custom_label4 of this Product.
        :param description: The description of this Product.
        :param destinations: The destinations of this Product.
        :param display_ads_id: The display_ads_id of this Product.
        :param display_ads_link: The display_ads_link of this Product.
        :param display_ads_similar_ids: The display_ads_similar_ids of this Product.
        :param display_ads_title: The display_ads_title of this Product.
        :param display_ads_value: The display_ads_value of this Product.
        :param energy_efficiency_class: The energy_efficiency_class of this Product.
        :param expiration_date: The expiration_date of this Product.
        :param gender: The gender of this Product.
        :param google_product_category: The google_product_category of this Product.
        :param gtin: The gtin of this Product.
        :param id: The id of this Product.
        :param identifier_exists: The identifier_exists of this Product.
        :param image_link: The image_link of this Product.
        :param installment: The installment of this Product.
        :param is_bundle: The is_bundle of this Product.
        :param item_group_id: The item_group_id of this Product.
        :param kind: The kind of this Product.
        :param link: The link of this Product.
        :param loyalty_points: The loyalty_points of this Product.
        :param material: The material of this Product.
        :param max_energy_efficiency_class: The max_energy_efficiency_class of this Product.
        :param max_handling_time: The max_handling_time of this Product.
        :param min_energy_efficiency_class: The min_energy_efficiency_class of this Product.
        :param min_handling_time: The min_handling_time of this Product.
        :param mobile_link: The mobile_link of this Product.
        :param mpn: The mpn of this Product.
        :param multipack: The multipack of this Product.
        :param offer_id: The offer_id of this Product.
        :param online_only: The online_only of this Product.
        :param pattern: The pattern of this Product.
        :param price: The price of this Product.
        :param product_type: The product_type of this Product.
        :param promotion_ids: The promotion_ids of this Product.
        :param sale_price: The sale_price of this Product.
        :param sale_price_effective_date: The sale_price_effective_date of this Product.
        :param sell_on_google_quantity: The sell_on_google_quantity of this Product.
        :param shipping: The shipping of this Product.
        :param shipping_height: The shipping_height of this Product.
        :param shipping_label: The shipping_label of this Product.
        :param shipping_length: The shipping_length of this Product.
        :param shipping_weight: The shipping_weight of this Product.
        :param shipping_width: The shipping_width of this Product.
        :param size_system: The size_system of this Product.
        :param size_type: The size_type of this Product.
        :param sizes: The sizes of this Product.
        :param source: The source of this Product.
        :param target_country: The target_country of this Product.
        :param taxes: The taxes of this Product.
        :param title: The title of this Product.
        :param unit_pricing_base_measure: The unit_pricing_base_measure of this Product.
        :param unit_pricing_measure: The unit_pricing_measure of this Product.
        :param validated_destinations: The validated_destinations of this Product.
        :param warnings: The warnings of this Product.
        """
        self.openapi_types = {
            'additional_image_links': List[str],
            'additional_product_types': List[str],
            'adult': bool,
            'adwords_grouping': str,
            'adwords_labels': List[str],
            'adwords_redirect': str,
            'age_group': str,
            'aspects': List[ProductAspect],
            'availability': str,
            'availability_date': str,
            'brand': str,
            'canonical_link': str,
            'channel': str,
            'color': str,
            'condition': str,
            'content_language': str,
            'cost_of_goods_sold': Price,
            'custom_attributes': List[CustomAttribute],
            'custom_groups': List[CustomGroup],
            'custom_label0': str,
            'custom_label1': str,
            'custom_label2': str,
            'custom_label3': str,
            'custom_label4': str,
            'description': str,
            'destinations': List[ProductDestination],
            'display_ads_id': str,
            'display_ads_link': str,
            'display_ads_similar_ids': List[str],
            'display_ads_title': str,
            'display_ads_value': float,
            'energy_efficiency_class': str,
            'expiration_date': str,
            'gender': str,
            'google_product_category': str,
            'gtin': str,
            'id': str,
            'identifier_exists': bool,
            'image_link': str,
            'installment': Installment,
            'is_bundle': bool,
            'item_group_id': str,
            'kind': str,
            'link': str,
            'loyalty_points': LoyaltyPoints,
            'material': str,
            'max_energy_efficiency_class': str,
            'max_handling_time': str,
            'min_energy_efficiency_class': str,
            'min_handling_time': str,
            'mobile_link': str,
            'mpn': str,
            'multipack': str,
            'offer_id': str,
            'online_only': bool,
            'pattern': str,
            'price': Price,
            'product_type': str,
            'promotion_ids': List[str],
            'sale_price': Price,
            'sale_price_effective_date': str,
            'sell_on_google_quantity': str,
            'shipping': List[ProductShipping],
            'shipping_height': ProductShippingDimension,
            'shipping_label': str,
            'shipping_length': ProductShippingDimension,
            'shipping_weight': ProductShippingWeight,
            'shipping_width': ProductShippingDimension,
            'size_system': str,
            'size_type': str,
            'sizes': List[str],
            'source': str,
            'target_country': str,
            'taxes': List[ProductTax],
            'title': str,
            'unit_pricing_base_measure': ProductUnitPricingBaseMeasure,
            'unit_pricing_measure': ProductUnitPricingMeasure,
            'validated_destinations': List[str],
            'warnings': List[Error]
        }

        self.attribute_map = {
            'additional_image_links': 'additionalImageLinks',
            'additional_product_types': 'additionalProductTypes',
            'adult': 'adult',
            'adwords_grouping': 'adwordsGrouping',
            'adwords_labels': 'adwordsLabels',
            'adwords_redirect': 'adwordsRedirect',
            'age_group': 'ageGroup',
            'aspects': 'aspects',
            'availability': 'availability',
            'availability_date': 'availabilityDate',
            'brand': 'brand',
            'canonical_link': 'canonicalLink',
            'channel': 'channel',
            'color': 'color',
            'condition': 'condition',
            'content_language': 'contentLanguage',
            'cost_of_goods_sold': 'costOfGoodsSold',
            'custom_attributes': 'customAttributes',
            'custom_groups': 'customGroups',
            'custom_label0': 'customLabel0',
            'custom_label1': 'customLabel1',
            'custom_label2': 'customLabel2',
            'custom_label3': 'customLabel3',
            'custom_label4': 'customLabel4',
            'description': 'description',
            'destinations': 'destinations',
            'display_ads_id': 'displayAdsId',
            'display_ads_link': 'displayAdsLink',
            'display_ads_similar_ids': 'displayAdsSimilarIds',
            'display_ads_title': 'displayAdsTitle',
            'display_ads_value': 'displayAdsValue',
            'energy_efficiency_class': 'energyEfficiencyClass',
            'expiration_date': 'expirationDate',
            'gender': 'gender',
            'google_product_category': 'googleProductCategory',
            'gtin': 'gtin',
            'id': 'id',
            'identifier_exists': 'identifierExists',
            'image_link': 'imageLink',
            'installment': 'installment',
            'is_bundle': 'isBundle',
            'item_group_id': 'itemGroupId',
            'kind': 'kind',
            'link': 'link',
            'loyalty_points': 'loyaltyPoints',
            'material': 'material',
            'max_energy_efficiency_class': 'maxEnergyEfficiencyClass',
            'max_handling_time': 'maxHandlingTime',
            'min_energy_efficiency_class': 'minEnergyEfficiencyClass',
            'min_handling_time': 'minHandlingTime',
            'mobile_link': 'mobileLink',
            'mpn': 'mpn',
            'multipack': 'multipack',
            'offer_id': 'offerId',
            'online_only': 'onlineOnly',
            'pattern': 'pattern',
            'price': 'price',
            'product_type': 'productType',
            'promotion_ids': 'promotionIds',
            'sale_price': 'salePrice',
            'sale_price_effective_date': 'salePriceEffectiveDate',
            'sell_on_google_quantity': 'sellOnGoogleQuantity',
            'shipping': 'shipping',
            'shipping_height': 'shippingHeight',
            'shipping_label': 'shippingLabel',
            'shipping_length': 'shippingLength',
            'shipping_weight': 'shippingWeight',
            'shipping_width': 'shippingWidth',
            'size_system': 'sizeSystem',
            'size_type': 'sizeType',
            'sizes': 'sizes',
            'source': 'source',
            'target_country': 'targetCountry',
            'taxes': 'taxes',
            'title': 'title',
            'unit_pricing_base_measure': 'unitPricingBaseMeasure',
            'unit_pricing_measure': 'unitPricingMeasure',
            'validated_destinations': 'validatedDestinations',
            'warnings': 'warnings'
        }

        self._additional_image_links = additional_image_links
        self._additional_product_types = additional_product_types
        self._adult = adult
        self._adwords_grouping = adwords_grouping
        self._adwords_labels = adwords_labels
        self._adwords_redirect = adwords_redirect
        self._age_group = age_group
        self._aspects = aspects
        self._availability = availability
        self._availability_date = availability_date
        self._brand = brand
        self._canonical_link = canonical_link
        self._channel = channel
        self._color = color
        self._condition = condition
        self._content_language = content_language
        self._cost_of_goods_sold = cost_of_goods_sold
        self._custom_attributes = custom_attributes
        self._custom_groups = custom_groups
        self._custom_label0 = custom_label0
        self._custom_label1 = custom_label1
        self._custom_label2 = custom_label2
        self._custom_label3 = custom_label3
        self._custom_label4 = custom_label4
        self._description = description
        self._destinations = destinations
        self._display_ads_id = display_ads_id
        self._display_ads_link = display_ads_link
        self._display_ads_similar_ids = display_ads_similar_ids
        self._display_ads_title = display_ads_title
        self._display_ads_value = display_ads_value
        self._energy_efficiency_class = energy_efficiency_class
        self._expiration_date = expiration_date
        self._gender = gender
        self._google_product_category = google_product_category
        self._gtin = gtin
        self._id = id
        self._identifier_exists = identifier_exists
        self._image_link = image_link
        self._installment = installment
        self._is_bundle = is_bundle
        self._item_group_id = item_group_id
        self._kind = kind
        self._link = link
        self._loyalty_points = loyalty_points
        self._material = material
        self._max_energy_efficiency_class = max_energy_efficiency_class
        self._max_handling_time = max_handling_time
        self._min_energy_efficiency_class = min_energy_efficiency_class
        self._min_handling_time = min_handling_time
        self._mobile_link = mobile_link
        self._mpn = mpn
        self._multipack = multipack
        self._offer_id = offer_id
        self._online_only = online_only
        self._pattern = pattern
        self._price = price
        self._product_type = product_type
        self._promotion_ids = promotion_ids
        self._sale_price = sale_price
        self._sale_price_effective_date = sale_price_effective_date
        self._sell_on_google_quantity = sell_on_google_quantity
        self._shipping = shipping
        self._shipping_height = shipping_height
        self._shipping_label = shipping_label
        self._shipping_length = shipping_length
        self._shipping_weight = shipping_weight
        self._shipping_width = shipping_width
        self._size_system = size_system
        self._size_type = size_type
        self._sizes = sizes
        self._source = source
        self._target_country = target_country
        self._taxes = taxes
        self._title = title
        self._unit_pricing_base_measure = unit_pricing_base_measure
        self._unit_pricing_measure = unit_pricing_measure
        self._validated_destinations = validated_destinations
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_image_links(self):
        """Gets the additional_image_links of this Product.

        Additional URLs of images of the item.

        :return: The additional_image_links of this Product.
        :rtype: List[str]
        """
        return self._additional_image_links

    @additional_image_links.setter
    def additional_image_links(self, additional_image_links):
        """Sets the additional_image_links of this Product.

        Additional URLs of images of the item.

        :param additional_image_links: The additional_image_links of this Product.
        :type additional_image_links: List[str]
        """

        self._additional_image_links = additional_image_links

    @property
    def additional_product_types(self):
        """Gets the additional_product_types of this Product.

        Additional categories of the item (formatted as in products data specification).

        :return: The additional_product_types of this Product.
        :rtype: List[str]
        """
        return self._additional_product_types

    @additional_product_types.setter
    def additional_product_types(self, additional_product_types):
        """Sets the additional_product_types of this Product.

        Additional categories of the item (formatted as in products data specification).

        :param additional_product_types: The additional_product_types of this Product.
        :type additional_product_types: List[str]
        """

        self._additional_product_types = additional_product_types

    @property
    def adult(self):
        """Gets the adult of this Product.

        Should be set to true if the item is targeted towards adults.

        :return: The adult of this Product.
        :rtype: bool
        """
        return self._adult

    @adult.setter
    def adult(self, adult):
        """Sets the adult of this Product.

        Should be set to true if the item is targeted towards adults.

        :param adult: The adult of this Product.
        :type adult: bool
        """

        self._adult = adult

    @property
    def adwords_grouping(self):
        """Gets the adwords_grouping of this Product.

        Used to group items in an arbitrary way. Only for CPA%, discouraged otherwise.

        :return: The adwords_grouping of this Product.
        :rtype: str
        """
        return self._adwords_grouping

    @adwords_grouping.setter
    def adwords_grouping(self, adwords_grouping):
        """Sets the adwords_grouping of this Product.

        Used to group items in an arbitrary way. Only for CPA%, discouraged otherwise.

        :param adwords_grouping: The adwords_grouping of this Product.
        :type adwords_grouping: str
        """

        self._adwords_grouping = adwords_grouping

    @property
    def adwords_labels(self):
        """Gets the adwords_labels of this Product.

        Similar to adwords_grouping, but only works on CPC.

        :return: The adwords_labels of this Product.
        :rtype: List[str]
        """
        return self._adwords_labels

    @adwords_labels.setter
    def adwords_labels(self, adwords_labels):
        """Sets the adwords_labels of this Product.

        Similar to adwords_grouping, but only works on CPC.

        :param adwords_labels: The adwords_labels of this Product.
        :type adwords_labels: List[str]
        """

        self._adwords_labels = adwords_labels

    @property
    def adwords_redirect(self):
        """Gets the adwords_redirect of this Product.

        Allows advertisers to override the item URL when the product is shown within the context of Product Ads.

        :return: The adwords_redirect of this Product.
        :rtype: str
        """
        return self._adwords_redirect

    @adwords_redirect.setter
    def adwords_redirect(self, adwords_redirect):
        """Sets the adwords_redirect of this Product.

        Allows advertisers to override the item URL when the product is shown within the context of Product Ads.

        :param adwords_redirect: The adwords_redirect of this Product.
        :type adwords_redirect: str
        """

        self._adwords_redirect = adwords_redirect

    @property
    def age_group(self):
        """Gets the age_group of this Product.

        Target age group of the item. Acceptable values are: - \"`adult`\" - \"`infant`\" - \"`kids`\" - \"`newborn`\" - \"`toddler`\" - \"`youngAdult`\" 

        :return: The age_group of this Product.
        :rtype: str
        """
        return self._age_group

    @age_group.setter
    def age_group(self, age_group):
        """Sets the age_group of this Product.

        Target age group of the item. Acceptable values are: - \"`adult`\" - \"`infant`\" - \"`kids`\" - \"`newborn`\" - \"`toddler`\" - \"`youngAdult`\" 

        :param age_group: The age_group of this Product.
        :type age_group: str
        """

        self._age_group = age_group

    @property
    def aspects(self):
        """Gets the aspects of this Product.

        Deprecated. Do not use.

        :return: The aspects of this Product.
        :rtype: List[ProductAspect]
        """
        return self._aspects

    @aspects.setter
    def aspects(self, aspects):
        """Sets the aspects of this Product.

        Deprecated. Do not use.

        :param aspects: The aspects of this Product.
        :type aspects: List[ProductAspect]
        """

        self._aspects = aspects

    @property
    def availability(self):
        """Gets the availability of this Product.

        Availability status of the item. Acceptable values are: - \"`in stock`\" - \"`out of stock`\" - \"`preorder`\" 

        :return: The availability of this Product.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this Product.

        Availability status of the item. Acceptable values are: - \"`in stock`\" - \"`out of stock`\" - \"`preorder`\" 

        :param availability: The availability of this Product.
        :type availability: str
        """

        self._availability = availability

    @property
    def availability_date(self):
        """Gets the availability_date of this Product.

        The day a pre-ordered product becomes available for delivery, in ISO 8601 format.

        :return: The availability_date of this Product.
        :rtype: str
        """
        return self._availability_date

    @availability_date.setter
    def availability_date(self, availability_date):
        """Sets the availability_date of this Product.

        The day a pre-ordered product becomes available for delivery, in ISO 8601 format.

        :param availability_date: The availability_date of this Product.
        :type availability_date: str
        """

        self._availability_date = availability_date

    @property
    def brand(self):
        """Gets the brand of this Product.

        Brand of the item.

        :return: The brand of this Product.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Product.

        Brand of the item.

        :param brand: The brand of this Product.
        :type brand: str
        """

        self._brand = brand

    @property
    def canonical_link(self):
        """Gets the canonical_link of this Product.

        URL for the canonical version of your item's landing page.

        :return: The canonical_link of this Product.
        :rtype: str
        """
        return self._canonical_link

    @canonical_link.setter
    def canonical_link(self, canonical_link):
        """Sets the canonical_link of this Product.

        URL for the canonical version of your item's landing page.

        :param canonical_link: The canonical_link of this Product.
        :type canonical_link: str
        """

        self._canonical_link = canonical_link

    @property
    def channel(self):
        """Gets the channel of this Product.

        Required. The item's channel (online or local). Acceptable values are: - \"`local`\" - \"`online`\" 

        :return: The channel of this Product.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Product.

        Required. The item's channel (online or local). Acceptable values are: - \"`local`\" - \"`online`\" 

        :param channel: The channel of this Product.
        :type channel: str
        """

        self._channel = channel

    @property
    def color(self):
        """Gets the color of this Product.

        Color of the item.

        :return: The color of this Product.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Product.

        Color of the item.

        :param color: The color of this Product.
        :type color: str
        """

        self._color = color

    @property
    def condition(self):
        """Gets the condition of this Product.

        Condition or state of the item. Acceptable values are: - \"`new`\" - \"`refurbished`\" - \"`used`\" 

        :return: The condition of this Product.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Product.

        Condition or state of the item. Acceptable values are: - \"`new`\" - \"`refurbished`\" - \"`used`\" 

        :param condition: The condition of this Product.
        :type condition: str
        """

        self._condition = condition

    @property
    def content_language(self):
        """Gets the content_language of this Product.

        Required. The two-letter ISO 639-1 language code for the item.

        :return: The content_language of this Product.
        :rtype: str
        """
        return self._content_language

    @content_language.setter
    def content_language(self, content_language):
        """Sets the content_language of this Product.

        Required. The two-letter ISO 639-1 language code for the item.

        :param content_language: The content_language of this Product.
        :type content_language: str
        """

        self._content_language = content_language

    @property
    def cost_of_goods_sold(self):
        """Gets the cost_of_goods_sold of this Product.


        :return: The cost_of_goods_sold of this Product.
        :rtype: Price
        """
        return self._cost_of_goods_sold

    @cost_of_goods_sold.setter
    def cost_of_goods_sold(self, cost_of_goods_sold):
        """Sets the cost_of_goods_sold of this Product.


        :param cost_of_goods_sold: The cost_of_goods_sold of this Product.
        :type cost_of_goods_sold: Price
        """

        self._cost_of_goods_sold = cost_of_goods_sold

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Product.

        A list of custom (merchant-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form (e.g., `{ \"name\": \"size type\", \"value\": \"regular\" }`). This is useful for submitting attributes not explicitly exposed by the API, such as additional attributes used for Buy on Google (formerly known as Shopping Actions).

        :return: The custom_attributes of this Product.
        :rtype: List[CustomAttribute]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Product.

        A list of custom (merchant-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form (e.g., `{ \"name\": \"size type\", \"value\": \"regular\" }`). This is useful for submitting attributes not explicitly exposed by the API, such as additional attributes used for Buy on Google (formerly known as Shopping Actions).

        :param custom_attributes: The custom_attributes of this Product.
        :type custom_attributes: List[CustomAttribute]
        """

        self._custom_attributes = custom_attributes

    @property
    def custom_groups(self):
        """Gets the custom_groups of this Product.

        A list of custom (merchant-provided) custom attribute groups.

        :return: The custom_groups of this Product.
        :rtype: List[CustomGroup]
        """
        return self._custom_groups

    @custom_groups.setter
    def custom_groups(self, custom_groups):
        """Sets the custom_groups of this Product.

        A list of custom (merchant-provided) custom attribute groups.

        :param custom_groups: The custom_groups of this Product.
        :type custom_groups: List[CustomGroup]
        """

        self._custom_groups = custom_groups

    @property
    def custom_label0(self):
        """Gets the custom_label0 of this Product.

        Custom label 0 for custom grouping of items in a Shopping campaign.

        :return: The custom_label0 of this Product.
        :rtype: str
        """
        return self._custom_label0

    @custom_label0.setter
    def custom_label0(self, custom_label0):
        """Sets the custom_label0 of this Product.

        Custom label 0 for custom grouping of items in a Shopping campaign.

        :param custom_label0: The custom_label0 of this Product.
        :type custom_label0: str
        """

        self._custom_label0 = custom_label0

    @property
    def custom_label1(self):
        """Gets the custom_label1 of this Product.

        Custom label 1 for custom grouping of items in a Shopping campaign.

        :return: The custom_label1 of this Product.
        :rtype: str
        """
        return self._custom_label1

    @custom_label1.setter
    def custom_label1(self, custom_label1):
        """Sets the custom_label1 of this Product.

        Custom label 1 for custom grouping of items in a Shopping campaign.

        :param custom_label1: The custom_label1 of this Product.
        :type custom_label1: str
        """

        self._custom_label1 = custom_label1

    @property
    def custom_label2(self):
        """Gets the custom_label2 of this Product.

        Custom label 2 for custom grouping of items in a Shopping campaign.

        :return: The custom_label2 of this Product.
        :rtype: str
        """
        return self._custom_label2

    @custom_label2.setter
    def custom_label2(self, custom_label2):
        """Sets the custom_label2 of this Product.

        Custom label 2 for custom grouping of items in a Shopping campaign.

        :param custom_label2: The custom_label2 of this Product.
        :type custom_label2: str
        """

        self._custom_label2 = custom_label2

    @property
    def custom_label3(self):
        """Gets the custom_label3 of this Product.

        Custom label 3 for custom grouping of items in a Shopping campaign.

        :return: The custom_label3 of this Product.
        :rtype: str
        """
        return self._custom_label3

    @custom_label3.setter
    def custom_label3(self, custom_label3):
        """Sets the custom_label3 of this Product.

        Custom label 3 for custom grouping of items in a Shopping campaign.

        :param custom_label3: The custom_label3 of this Product.
        :type custom_label3: str
        """

        self._custom_label3 = custom_label3

    @property
    def custom_label4(self):
        """Gets the custom_label4 of this Product.

        Custom label 4 for custom grouping of items in a Shopping campaign.

        :return: The custom_label4 of this Product.
        :rtype: str
        """
        return self._custom_label4

    @custom_label4.setter
    def custom_label4(self, custom_label4):
        """Sets the custom_label4 of this Product.

        Custom label 4 for custom grouping of items in a Shopping campaign.

        :param custom_label4: The custom_label4 of this Product.
        :type custom_label4: str
        """

        self._custom_label4 = custom_label4

    @property
    def description(self):
        """Gets the description of this Product.

        Description of the item.

        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product.

        Description of the item.

        :param description: The description of this Product.
        :type description: str
        """

        self._description = description

    @property
    def destinations(self):
        """Gets the destinations of this Product.

        Specifies the intended destinations for the product.

        :return: The destinations of this Product.
        :rtype: List[ProductDestination]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this Product.

        Specifies the intended destinations for the product.

        :param destinations: The destinations of this Product.
        :type destinations: List[ProductDestination]
        """

        self._destinations = destinations

    @property
    def display_ads_id(self):
        """Gets the display_ads_id of this Product.

        An identifier for an item for dynamic remarketing campaigns.

        :return: The display_ads_id of this Product.
        :rtype: str
        """
        return self._display_ads_id

    @display_ads_id.setter
    def display_ads_id(self, display_ads_id):
        """Sets the display_ads_id of this Product.

        An identifier for an item for dynamic remarketing campaigns.

        :param display_ads_id: The display_ads_id of this Product.
        :type display_ads_id: str
        """

        self._display_ads_id = display_ads_id

    @property
    def display_ads_link(self):
        """Gets the display_ads_link of this Product.

        URL directly to your item's landing page for dynamic remarketing campaigns.

        :return: The display_ads_link of this Product.
        :rtype: str
        """
        return self._display_ads_link

    @display_ads_link.setter
    def display_ads_link(self, display_ads_link):
        """Sets the display_ads_link of this Product.

        URL directly to your item's landing page for dynamic remarketing campaigns.

        :param display_ads_link: The display_ads_link of this Product.
        :type display_ads_link: str
        """

        self._display_ads_link = display_ads_link

    @property
    def display_ads_similar_ids(self):
        """Gets the display_ads_similar_ids of this Product.

        Advertiser-specified recommendations.

        :return: The display_ads_similar_ids of this Product.
        :rtype: List[str]
        """
        return self._display_ads_similar_ids

    @display_ads_similar_ids.setter
    def display_ads_similar_ids(self, display_ads_similar_ids):
        """Sets the display_ads_similar_ids of this Product.

        Advertiser-specified recommendations.

        :param display_ads_similar_ids: The display_ads_similar_ids of this Product.
        :type display_ads_similar_ids: List[str]
        """

        self._display_ads_similar_ids = display_ads_similar_ids

    @property
    def display_ads_title(self):
        """Gets the display_ads_title of this Product.

        Title of an item for dynamic remarketing campaigns.

        :return: The display_ads_title of this Product.
        :rtype: str
        """
        return self._display_ads_title

    @display_ads_title.setter
    def display_ads_title(self, display_ads_title):
        """Sets the display_ads_title of this Product.

        Title of an item for dynamic remarketing campaigns.

        :param display_ads_title: The display_ads_title of this Product.
        :type display_ads_title: str
        """

        self._display_ads_title = display_ads_title

    @property
    def display_ads_value(self):
        """Gets the display_ads_value of this Product.

        Offer margin for dynamic remarketing campaigns.

        :return: The display_ads_value of this Product.
        :rtype: float
        """
        return self._display_ads_value

    @display_ads_value.setter
    def display_ads_value(self, display_ads_value):
        """Sets the display_ads_value of this Product.

        Offer margin for dynamic remarketing campaigns.

        :param display_ads_value: The display_ads_value of this Product.
        :type display_ads_value: float
        """

        self._display_ads_value = display_ads_value

    @property
    def energy_efficiency_class(self):
        """Gets the energy_efficiency_class of this Product.

        The energy efficiency class as defined in EU directive 2010/30/EU. Acceptable values are: - \"`A`\" - \"`A+`\" - \"`A++`\" - \"`A+++`\" - \"`B`\" - \"`C`\" - \"`D`\" - \"`E`\" - \"`F`\" - \"`G`\" 

        :return: The energy_efficiency_class of this Product.
        :rtype: str
        """
        return self._energy_efficiency_class

    @energy_efficiency_class.setter
    def energy_efficiency_class(self, energy_efficiency_class):
        """Sets the energy_efficiency_class of this Product.

        The energy efficiency class as defined in EU directive 2010/30/EU. Acceptable values are: - \"`A`\" - \"`A+`\" - \"`A++`\" - \"`A+++`\" - \"`B`\" - \"`C`\" - \"`D`\" - \"`E`\" - \"`F`\" - \"`G`\" 

        :param energy_efficiency_class: The energy_efficiency_class of this Product.
        :type energy_efficiency_class: str
        """

        self._energy_efficiency_class = energy_efficiency_class

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Product.

        Date on which the item should expire, as specified upon insertion, in ISO 8601 format. The actual expiration date in Google Shopping is exposed in `productstatuses` as `googleExpirationDate` and might be earlier if `expirationDate` is too far in the future.

        :return: The expiration_date of this Product.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Product.

        Date on which the item should expire, as specified upon insertion, in ISO 8601 format. The actual expiration date in Google Shopping is exposed in `productstatuses` as `googleExpirationDate` and might be earlier if `expirationDate` is too far in the future.

        :param expiration_date: The expiration_date of this Product.
        :type expiration_date: str
        """

        self._expiration_date = expiration_date

    @property
    def gender(self):
        """Gets the gender of this Product.

        Target gender of the item. Acceptable values are: - \"`female`\" - \"`male`\" - \"`unisex`\" 

        :return: The gender of this Product.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Product.

        Target gender of the item. Acceptable values are: - \"`female`\" - \"`male`\" - \"`unisex`\" 

        :param gender: The gender of this Product.
        :type gender: str
        """

        self._gender = gender

    @property
    def google_product_category(self):
        """Gets the google_product_category of this Product.

        Google's category of the item (see [Google product taxonomy](https://support.google.com/merchants/answer/1705911)). When querying products, this field will contain the user provided value. There is currently no way to get back the auto assigned google product categories through the API.

        :return: The google_product_category of this Product.
        :rtype: str
        """
        return self._google_product_category

    @google_product_category.setter
    def google_product_category(self, google_product_category):
        """Sets the google_product_category of this Product.

        Google's category of the item (see [Google product taxonomy](https://support.google.com/merchants/answer/1705911)). When querying products, this field will contain the user provided value. There is currently no way to get back the auto assigned google product categories through the API.

        :param google_product_category: The google_product_category of this Product.
        :type google_product_category: str
        """

        self._google_product_category = google_product_category

    @property
    def gtin(self):
        """Gets the gtin of this Product.

        Global Trade Item Number (GTIN) of the item.

        :return: The gtin of this Product.
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this Product.

        Global Trade Item Number (GTIN) of the item.

        :param gtin: The gtin of this Product.
        :type gtin: str
        """

        self._gtin = gtin

    @property
    def id(self):
        """Gets the id of this Product.

        The REST ID of the product. Content API methods that operate on products take this as their `productId` parameter. The REST ID for a product is of the form channel:contentLanguage: targetCountry: offerId.

        :return: The id of this Product.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.

        The REST ID of the product. Content API methods that operate on products take this as their `productId` parameter. The REST ID for a product is of the form channel:contentLanguage: targetCountry: offerId.

        :param id: The id of this Product.
        :type id: str
        """

        self._id = id

    @property
    def identifier_exists(self):
        """Gets the identifier_exists of this Product.

        False when the item does not have unique product identifiers appropriate to its category, such as GTIN, MPN, and brand. Required according to the Unique Product Identifier Rules for all target countries except for Canada.

        :return: The identifier_exists of this Product.
        :rtype: bool
        """
        return self._identifier_exists

    @identifier_exists.setter
    def identifier_exists(self, identifier_exists):
        """Sets the identifier_exists of this Product.

        False when the item does not have unique product identifiers appropriate to its category, such as GTIN, MPN, and brand. Required according to the Unique Product Identifier Rules for all target countries except for Canada.

        :param identifier_exists: The identifier_exists of this Product.
        :type identifier_exists: bool
        """

        self._identifier_exists = identifier_exists

    @property
    def image_link(self):
        """Gets the image_link of this Product.

        URL of an image of the item.

        :return: The image_link of this Product.
        :rtype: str
        """
        return self._image_link

    @image_link.setter
    def image_link(self, image_link):
        """Sets the image_link of this Product.

        URL of an image of the item.

        :param image_link: The image_link of this Product.
        :type image_link: str
        """

        self._image_link = image_link

    @property
    def installment(self):
        """Gets the installment of this Product.


        :return: The installment of this Product.
        :rtype: Installment
        """
        return self._installment

    @installment.setter
    def installment(self, installment):
        """Sets the installment of this Product.


        :param installment: The installment of this Product.
        :type installment: Installment
        """

        self._installment = installment

    @property
    def is_bundle(self):
        """Gets the is_bundle of this Product.

        Whether the item is a merchant-defined bundle. A bundle is a custom grouping of different products sold by a merchant for a single price.

        :return: The is_bundle of this Product.
        :rtype: bool
        """
        return self._is_bundle

    @is_bundle.setter
    def is_bundle(self, is_bundle):
        """Sets the is_bundle of this Product.

        Whether the item is a merchant-defined bundle. A bundle is a custom grouping of different products sold by a merchant for a single price.

        :param is_bundle: The is_bundle of this Product.
        :type is_bundle: bool
        """

        self._is_bundle = is_bundle

    @property
    def item_group_id(self):
        """Gets the item_group_id of this Product.

        Shared identifier for all variants of the same product.

        :return: The item_group_id of this Product.
        :rtype: str
        """
        return self._item_group_id

    @item_group_id.setter
    def item_group_id(self, item_group_id):
        """Sets the item_group_id of this Product.

        Shared identifier for all variants of the same product.

        :param item_group_id: The item_group_id of this Product.
        :type item_group_id: str
        """

        self._item_group_id = item_group_id

    @property
    def kind(self):
        """Gets the kind of this Product.

        Identifies what kind of resource this is. Value: the fixed string \"`content#product`\"

        :return: The kind of this Product.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Product.

        Identifies what kind of resource this is. Value: the fixed string \"`content#product`\"

        :param kind: The kind of this Product.
        :type kind: str
        """

        self._kind = kind

    @property
    def link(self):
        """Gets the link of this Product.

        URL directly linking to your item's page on your website.

        :return: The link of this Product.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Product.

        URL directly linking to your item's page on your website.

        :param link: The link of this Product.
        :type link: str
        """

        self._link = link

    @property
    def loyalty_points(self):
        """Gets the loyalty_points of this Product.


        :return: The loyalty_points of this Product.
        :rtype: LoyaltyPoints
        """
        return self._loyalty_points

    @loyalty_points.setter
    def loyalty_points(self, loyalty_points):
        """Sets the loyalty_points of this Product.


        :param loyalty_points: The loyalty_points of this Product.
        :type loyalty_points: LoyaltyPoints
        """

        self._loyalty_points = loyalty_points

    @property
    def material(self):
        """Gets the material of this Product.

        The material of which the item is made.

        :return: The material of this Product.
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this Product.

        The material of which the item is made.

        :param material: The material of this Product.
        :type material: str
        """

        self._material = material

    @property
    def max_energy_efficiency_class(self):
        """Gets the max_energy_efficiency_class of this Product.

        The energy efficiency class as defined in EU directive 2010/30/EU. Acceptable values are: - \"`A`\" - \"`A+`\" - \"`A++`\" - \"`A+++`\" - \"`B`\" - \"`C`\" - \"`D`\" - \"`E`\" - \"`F`\" - \"`G`\" 

        :return: The max_energy_efficiency_class of this Product.
        :rtype: str
        """
        return self._max_energy_efficiency_class

    @max_energy_efficiency_class.setter
    def max_energy_efficiency_class(self, max_energy_efficiency_class):
        """Sets the max_energy_efficiency_class of this Product.

        The energy efficiency class as defined in EU directive 2010/30/EU. Acceptable values are: - \"`A`\" - \"`A+`\" - \"`A++`\" - \"`A+++`\" - \"`B`\" - \"`C`\" - \"`D`\" - \"`E`\" - \"`F`\" - \"`G`\" 

        :param max_energy_efficiency_class: The max_energy_efficiency_class of this Product.
        :type max_energy_efficiency_class: str
        """

        self._max_energy_efficiency_class = max_energy_efficiency_class

    @property
    def max_handling_time(self):
        """Gets the max_handling_time of this Product.

        Maximal product handling time (in business days).

        :return: The max_handling_time of this Product.
        :rtype: str
        """
        return self._max_handling_time

    @max_handling_time.setter
    def max_handling_time(self, max_handling_time):
        """Sets the max_handling_time of this Product.

        Maximal product handling time (in business days).

        :param max_handling_time: The max_handling_time of this Product.
        :type max_handling_time: str
        """

        self._max_handling_time = max_handling_time

    @property
    def min_energy_efficiency_class(self):
        """Gets the min_energy_efficiency_class of this Product.

        The energy efficiency class as defined in EU directive 2010/30/EU. Acceptable values are: - \"`A`\" - \"`A+`\" - \"`A++`\" - \"`A+++`\" - \"`B`\" - \"`C`\" - \"`D`\" - \"`E`\" - \"`F`\" - \"`G`\" 

        :return: The min_energy_efficiency_class of this Product.
        :rtype: str
        """
        return self._min_energy_efficiency_class

    @min_energy_efficiency_class.setter
    def min_energy_efficiency_class(self, min_energy_efficiency_class):
        """Sets the min_energy_efficiency_class of this Product.

        The energy efficiency class as defined in EU directive 2010/30/EU. Acceptable values are: - \"`A`\" - \"`A+`\" - \"`A++`\" - \"`A+++`\" - \"`B`\" - \"`C`\" - \"`D`\" - \"`E`\" - \"`F`\" - \"`G`\" 

        :param min_energy_efficiency_class: The min_energy_efficiency_class of this Product.
        :type min_energy_efficiency_class: str
        """

        self._min_energy_efficiency_class = min_energy_efficiency_class

    @property
    def min_handling_time(self):
        """Gets the min_handling_time of this Product.

        Minimal product handling time (in business days).

        :return: The min_handling_time of this Product.
        :rtype: str
        """
        return self._min_handling_time

    @min_handling_time.setter
    def min_handling_time(self, min_handling_time):
        """Sets the min_handling_time of this Product.

        Minimal product handling time (in business days).

        :param min_handling_time: The min_handling_time of this Product.
        :type min_handling_time: str
        """

        self._min_handling_time = min_handling_time

    @property
    def mobile_link(self):
        """Gets the mobile_link of this Product.

        URL for the mobile-optimized version of your item's landing page.

        :return: The mobile_link of this Product.
        :rtype: str
        """
        return self._mobile_link

    @mobile_link.setter
    def mobile_link(self, mobile_link):
        """Sets the mobile_link of this Product.

        URL for the mobile-optimized version of your item's landing page.

        :param mobile_link: The mobile_link of this Product.
        :type mobile_link: str
        """

        self._mobile_link = mobile_link

    @property
    def mpn(self):
        """Gets the mpn of this Product.

        Manufacturer Part Number (MPN) of the item.

        :return: The mpn of this Product.
        :rtype: str
        """
        return self._mpn

    @mpn.setter
    def mpn(self, mpn):
        """Sets the mpn of this Product.

        Manufacturer Part Number (MPN) of the item.

        :param mpn: The mpn of this Product.
        :type mpn: str
        """

        self._mpn = mpn

    @property
    def multipack(self):
        """Gets the multipack of this Product.

        The number of identical products in a merchant-defined multipack.

        :return: The multipack of this Product.
        :rtype: str
        """
        return self._multipack

    @multipack.setter
    def multipack(self, multipack):
        """Sets the multipack of this Product.

        The number of identical products in a merchant-defined multipack.

        :param multipack: The multipack of this Product.
        :type multipack: str
        """

        self._multipack = multipack

    @property
    def offer_id(self):
        """Gets the offer_id of this Product.

        Required. A unique identifier for the item. Leading and trailing whitespaces are stripped and multiple whitespaces are replaced by a single whitespace upon submission. Only valid unicode characters are accepted. See the products feed specification for details. *Note:* Content API methods that operate on products take the REST ID of the product, *not* this identifier.

        :return: The offer_id of this Product.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this Product.

        Required. A unique identifier for the item. Leading and trailing whitespaces are stripped and multiple whitespaces are replaced by a single whitespace upon submission. Only valid unicode characters are accepted. See the products feed specification for details. *Note:* Content API methods that operate on products take the REST ID of the product, *not* this identifier.

        :param offer_id: The offer_id of this Product.
        :type offer_id: str
        """

        self._offer_id = offer_id

    @property
    def online_only(self):
        """Gets the online_only of this Product.

        Deprecated.

        :return: The online_only of this Product.
        :rtype: bool
        """
        return self._online_only

    @online_only.setter
    def online_only(self, online_only):
        """Sets the online_only of this Product.

        Deprecated.

        :param online_only: The online_only of this Product.
        :type online_only: bool
        """

        self._online_only = online_only

    @property
    def pattern(self):
        """Gets the pattern of this Product.

        The item's pattern (e.g. polka dots).

        :return: The pattern of this Product.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this Product.

        The item's pattern (e.g. polka dots).

        :param pattern: The pattern of this Product.
        :type pattern: str
        """

        self._pattern = pattern

    @property
    def price(self):
        """Gets the price of this Product.


        :return: The price of this Product.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Product.


        :param price: The price of this Product.
        :type price: Price
        """

        self._price = price

    @property
    def product_type(self):
        """Gets the product_type of this Product.

        Your category of the item (formatted as in products data specification).

        :return: The product_type of this Product.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this Product.

        Your category of the item (formatted as in products data specification).

        :param product_type: The product_type of this Product.
        :type product_type: str
        """

        self._product_type = product_type

    @property
    def promotion_ids(self):
        """Gets the promotion_ids of this Product.

        The unique ID of a promotion.

        :return: The promotion_ids of this Product.
        :rtype: List[str]
        """
        return self._promotion_ids

    @promotion_ids.setter
    def promotion_ids(self, promotion_ids):
        """Sets the promotion_ids of this Product.

        The unique ID of a promotion.

        :param promotion_ids: The promotion_ids of this Product.
        :type promotion_ids: List[str]
        """

        self._promotion_ids = promotion_ids

    @property
    def sale_price(self):
        """Gets the sale_price of this Product.


        :return: The sale_price of this Product.
        :rtype: Price
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this Product.


        :param sale_price: The sale_price of this Product.
        :type sale_price: Price
        """

        self._sale_price = sale_price

    @property
    def sale_price_effective_date(self):
        """Gets the sale_price_effective_date of this Product.

        Date range during which the item is on sale (see products data specification ).

        :return: The sale_price_effective_date of this Product.
        :rtype: str
        """
        return self._sale_price_effective_date

    @sale_price_effective_date.setter
    def sale_price_effective_date(self, sale_price_effective_date):
        """Sets the sale_price_effective_date of this Product.

        Date range during which the item is on sale (see products data specification ).

        :param sale_price_effective_date: The sale_price_effective_date of this Product.
        :type sale_price_effective_date: str
        """

        self._sale_price_effective_date = sale_price_effective_date

    @property
    def sell_on_google_quantity(self):
        """Gets the sell_on_google_quantity of this Product.

        The quantity of the product that is available for selling on Google. Supported only for online products.

        :return: The sell_on_google_quantity of this Product.
        :rtype: str
        """
        return self._sell_on_google_quantity

    @sell_on_google_quantity.setter
    def sell_on_google_quantity(self, sell_on_google_quantity):
        """Sets the sell_on_google_quantity of this Product.

        The quantity of the product that is available for selling on Google. Supported only for online products.

        :param sell_on_google_quantity: The sell_on_google_quantity of this Product.
        :type sell_on_google_quantity: str
        """

        self._sell_on_google_quantity = sell_on_google_quantity

    @property
    def shipping(self):
        """Gets the shipping of this Product.

        Shipping rules.

        :return: The shipping of this Product.
        :rtype: List[ProductShipping]
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this Product.

        Shipping rules.

        :param shipping: The shipping of this Product.
        :type shipping: List[ProductShipping]
        """

        self._shipping = shipping

    @property
    def shipping_height(self):
        """Gets the shipping_height of this Product.


        :return: The shipping_height of this Product.
        :rtype: ProductShippingDimension
        """
        return self._shipping_height

    @shipping_height.setter
    def shipping_height(self, shipping_height):
        """Sets the shipping_height of this Product.


        :param shipping_height: The shipping_height of this Product.
        :type shipping_height: ProductShippingDimension
        """

        self._shipping_height = shipping_height

    @property
    def shipping_label(self):
        """Gets the shipping_label of this Product.

        The shipping label of the product, used to group product in account-level shipping rules.

        :return: The shipping_label of this Product.
        :rtype: str
        """
        return self._shipping_label

    @shipping_label.setter
    def shipping_label(self, shipping_label):
        """Sets the shipping_label of this Product.

        The shipping label of the product, used to group product in account-level shipping rules.

        :param shipping_label: The shipping_label of this Product.
        :type shipping_label: str
        """

        self._shipping_label = shipping_label

    @property
    def shipping_length(self):
        """Gets the shipping_length of this Product.


        :return: The shipping_length of this Product.
        :rtype: ProductShippingDimension
        """
        return self._shipping_length

    @shipping_length.setter
    def shipping_length(self, shipping_length):
        """Sets the shipping_length of this Product.


        :param shipping_length: The shipping_length of this Product.
        :type shipping_length: ProductShippingDimension
        """

        self._shipping_length = shipping_length

    @property
    def shipping_weight(self):
        """Gets the shipping_weight of this Product.


        :return: The shipping_weight of this Product.
        :rtype: ProductShippingWeight
        """
        return self._shipping_weight

    @shipping_weight.setter
    def shipping_weight(self, shipping_weight):
        """Sets the shipping_weight of this Product.


        :param shipping_weight: The shipping_weight of this Product.
        :type shipping_weight: ProductShippingWeight
        """

        self._shipping_weight = shipping_weight

    @property
    def shipping_width(self):
        """Gets the shipping_width of this Product.


        :return: The shipping_width of this Product.
        :rtype: ProductShippingDimension
        """
        return self._shipping_width

    @shipping_width.setter
    def shipping_width(self, shipping_width):
        """Sets the shipping_width of this Product.


        :param shipping_width: The shipping_width of this Product.
        :type shipping_width: ProductShippingDimension
        """

        self._shipping_width = shipping_width

    @property
    def size_system(self):
        """Gets the size_system of this Product.

        System in which the size is specified. Recommended for apparel items. Acceptable values are: - \"`AU`\" - \"`BR`\" - \"`CN`\" - \"`DE`\" - \"`EU`\" - \"`FR`\" - \"`IT`\" - \"`JP`\" - \"`MEX`\" - \"`UK`\" - \"`US`\" 

        :return: The size_system of this Product.
        :rtype: str
        """
        return self._size_system

    @size_system.setter
    def size_system(self, size_system):
        """Sets the size_system of this Product.

        System in which the size is specified. Recommended for apparel items. Acceptable values are: - \"`AU`\" - \"`BR`\" - \"`CN`\" - \"`DE`\" - \"`EU`\" - \"`FR`\" - \"`IT`\" - \"`JP`\" - \"`MEX`\" - \"`UK`\" - \"`US`\" 

        :param size_system: The size_system of this Product.
        :type size_system: str
        """

        self._size_system = size_system

    @property
    def size_type(self):
        """Gets the size_type of this Product.

        The cut of the item. Recommended for apparel items. Acceptable values are: - \"`big and tall`\" - \"`maternity`\" - \"`oversize`\" - \"`petite`\" - \"`plus`\" - \"`regular`\" 

        :return: The size_type of this Product.
        :rtype: str
        """
        return self._size_type

    @size_type.setter
    def size_type(self, size_type):
        """Sets the size_type of this Product.

        The cut of the item. Recommended for apparel items. Acceptable values are: - \"`big and tall`\" - \"`maternity`\" - \"`oversize`\" - \"`petite`\" - \"`plus`\" - \"`regular`\" 

        :param size_type: The size_type of this Product.
        :type size_type: str
        """

        self._size_type = size_type

    @property
    def sizes(self):
        """Gets the sizes of this Product.

        Size of the item. Only one value is allowed. For variants with different sizes, insert a separate product for each size with the same `itemGroupId` value (see size definition).

        :return: The sizes of this Product.
        :rtype: List[str]
        """
        return self._sizes

    @sizes.setter
    def sizes(self, sizes):
        """Sets the sizes of this Product.

        Size of the item. Only one value is allowed. For variants with different sizes, insert a separate product for each size with the same `itemGroupId` value (see size definition).

        :param sizes: The sizes of this Product.
        :type sizes: List[str]
        """

        self._sizes = sizes

    @property
    def source(self):
        """Gets the source of this Product.

        The source of the offer, i.e., how the offer was created. Acceptable values are: - \"`api`\" - \"`crawl`\" - \"`feed`\" 

        :return: The source of this Product.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Product.

        The source of the offer, i.e., how the offer was created. Acceptable values are: - \"`api`\" - \"`crawl`\" - \"`feed`\" 

        :param source: The source of this Product.
        :type source: str
        """

        self._source = source

    @property
    def target_country(self):
        """Gets the target_country of this Product.

        Required. The CLDR territory code for the item.

        :return: The target_country of this Product.
        :rtype: str
        """
        return self._target_country

    @target_country.setter
    def target_country(self, target_country):
        """Sets the target_country of this Product.

        Required. The CLDR territory code for the item.

        :param target_country: The target_country of this Product.
        :type target_country: str
        """

        self._target_country = target_country

    @property
    def taxes(self):
        """Gets the taxes of this Product.

        Tax information.

        :return: The taxes of this Product.
        :rtype: List[ProductTax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this Product.

        Tax information.

        :param taxes: The taxes of this Product.
        :type taxes: List[ProductTax]
        """

        self._taxes = taxes

    @property
    def title(self):
        """Gets the title of this Product.

        Title of the item.

        :return: The title of this Product.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Product.

        Title of the item.

        :param title: The title of this Product.
        :type title: str
        """

        self._title = title

    @property
    def unit_pricing_base_measure(self):
        """Gets the unit_pricing_base_measure of this Product.


        :return: The unit_pricing_base_measure of this Product.
        :rtype: ProductUnitPricingBaseMeasure
        """
        return self._unit_pricing_base_measure

    @unit_pricing_base_measure.setter
    def unit_pricing_base_measure(self, unit_pricing_base_measure):
        """Sets the unit_pricing_base_measure of this Product.


        :param unit_pricing_base_measure: The unit_pricing_base_measure of this Product.
        :type unit_pricing_base_measure: ProductUnitPricingBaseMeasure
        """

        self._unit_pricing_base_measure = unit_pricing_base_measure

    @property
    def unit_pricing_measure(self):
        """Gets the unit_pricing_measure of this Product.


        :return: The unit_pricing_measure of this Product.
        :rtype: ProductUnitPricingMeasure
        """
        return self._unit_pricing_measure

    @unit_pricing_measure.setter
    def unit_pricing_measure(self, unit_pricing_measure):
        """Sets the unit_pricing_measure of this Product.


        :param unit_pricing_measure: The unit_pricing_measure of this Product.
        :type unit_pricing_measure: ProductUnitPricingMeasure
        """

        self._unit_pricing_measure = unit_pricing_measure

    @property
    def validated_destinations(self):
        """Gets the validated_destinations of this Product.

        Deprecated. The read-only list of intended destinations which passed validation.

        :return: The validated_destinations of this Product.
        :rtype: List[str]
        """
        return self._validated_destinations

    @validated_destinations.setter
    def validated_destinations(self, validated_destinations):
        """Sets the validated_destinations of this Product.

        Deprecated. The read-only list of intended destinations which passed validation.

        :param validated_destinations: The validated_destinations of this Product.
        :type validated_destinations: List[str]
        """

        self._validated_destinations = validated_destinations

    @property
    def warnings(self):
        """Gets the warnings of this Product.

        Read-only warnings.

        :return: The warnings of this Product.
        :rtype: List[Error]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Product.

        Read-only warnings.

        :param warnings: The warnings of this Product.
        :type warnings: List[Error]
        """

        self._warnings = warnings
