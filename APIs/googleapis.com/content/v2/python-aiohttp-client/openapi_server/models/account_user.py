# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: bool=None, email_address: str=None, order_manager: bool=None, payments_analyst: bool=None, payments_manager: bool=None):
        """AccountUser - a model defined in OpenAPI

        :param admin: The admin of this AccountUser.
        :param email_address: The email_address of this AccountUser.
        :param order_manager: The order_manager of this AccountUser.
        :param payments_analyst: The payments_analyst of this AccountUser.
        :param payments_manager: The payments_manager of this AccountUser.
        """
        self.openapi_types = {
            'admin': bool,
            'email_address': str,
            'order_manager': bool,
            'payments_analyst': bool,
            'payments_manager': bool
        }

        self.attribute_map = {
            'admin': 'admin',
            'email_address': 'emailAddress',
            'order_manager': 'orderManager',
            'payments_analyst': 'paymentsAnalyst',
            'payments_manager': 'paymentsManager'
        }

        self._admin = admin
        self._email_address = email_address
        self._order_manager = order_manager
        self._payments_analyst = payments_analyst
        self._payments_manager = payments_manager

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountUser of this AccountUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this AccountUser.

        Whether user is an admin.

        :return: The admin of this AccountUser.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this AccountUser.

        Whether user is an admin.

        :param admin: The admin of this AccountUser.
        :type admin: bool
        """

        self._admin = admin

    @property
    def email_address(self):
        """Gets the email_address of this AccountUser.

        User's email address.

        :return: The email_address of this AccountUser.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AccountUser.

        User's email address.

        :param email_address: The email_address of this AccountUser.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def order_manager(self):
        """Gets the order_manager of this AccountUser.

        Whether user is an order manager.

        :return: The order_manager of this AccountUser.
        :rtype: bool
        """
        return self._order_manager

    @order_manager.setter
    def order_manager(self, order_manager):
        """Sets the order_manager of this AccountUser.

        Whether user is an order manager.

        :param order_manager: The order_manager of this AccountUser.
        :type order_manager: bool
        """

        self._order_manager = order_manager

    @property
    def payments_analyst(self):
        """Gets the payments_analyst of this AccountUser.

        Whether user can access payment statements.

        :return: The payments_analyst of this AccountUser.
        :rtype: bool
        """
        return self._payments_analyst

    @payments_analyst.setter
    def payments_analyst(self, payments_analyst):
        """Sets the payments_analyst of this AccountUser.

        Whether user can access payment statements.

        :param payments_analyst: The payments_analyst of this AccountUser.
        :type payments_analyst: bool
        """

        self._payments_analyst = payments_analyst

    @property
    def payments_manager(self):
        """Gets the payments_manager of this AccountUser.

        Whether user can manage payment settings.

        :return: The payments_manager of this AccountUser.
        :rtype: bool
        """
        return self._payments_manager

    @payments_manager.setter
    def payments_manager(self, payments_manager):
        """Sets the payments_manager of this AccountUser.

        Whether user can manage payment settings.

        :param payments_manager: The payments_manager of this AccountUser.
        :type payments_manager: bool
        """

        self._payments_manager = payments_manager
