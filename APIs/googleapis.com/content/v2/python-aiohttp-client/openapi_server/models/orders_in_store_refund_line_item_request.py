# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
from openapi_server import util


class OrdersInStoreRefundLineItemRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_pretax: Price=None, amount_tax: Price=None, line_item_id: str=None, operation_id: str=None, product_id: str=None, quantity: int=None, reason: str=None, reason_text: str=None):
        """OrdersInStoreRefundLineItemRequest - a model defined in OpenAPI

        :param amount_pretax: The amount_pretax of this OrdersInStoreRefundLineItemRequest.
        :param amount_tax: The amount_tax of this OrdersInStoreRefundLineItemRequest.
        :param line_item_id: The line_item_id of this OrdersInStoreRefundLineItemRequest.
        :param operation_id: The operation_id of this OrdersInStoreRefundLineItemRequest.
        :param product_id: The product_id of this OrdersInStoreRefundLineItemRequest.
        :param quantity: The quantity of this OrdersInStoreRefundLineItemRequest.
        :param reason: The reason of this OrdersInStoreRefundLineItemRequest.
        :param reason_text: The reason_text of this OrdersInStoreRefundLineItemRequest.
        """
        self.openapi_types = {
            'amount_pretax': Price,
            'amount_tax': Price,
            'line_item_id': str,
            'operation_id': str,
            'product_id': str,
            'quantity': int,
            'reason': str,
            'reason_text': str
        }

        self.attribute_map = {
            'amount_pretax': 'amountPretax',
            'amount_tax': 'amountTax',
            'line_item_id': 'lineItemId',
            'operation_id': 'operationId',
            'product_id': 'productId',
            'quantity': 'quantity',
            'reason': 'reason',
            'reason_text': 'reasonText'
        }

        self._amount_pretax = amount_pretax
        self._amount_tax = amount_tax
        self._line_item_id = line_item_id
        self._operation_id = operation_id
        self._product_id = product_id
        self._quantity = quantity
        self._reason = reason
        self._reason_text = reason_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrdersInStoreRefundLineItemRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrdersInStoreRefundLineItemRequest of this OrdersInStoreRefundLineItemRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_pretax(self):
        """Gets the amount_pretax of this OrdersInStoreRefundLineItemRequest.


        :return: The amount_pretax of this OrdersInStoreRefundLineItemRequest.
        :rtype: Price
        """
        return self._amount_pretax

    @amount_pretax.setter
    def amount_pretax(self, amount_pretax):
        """Sets the amount_pretax of this OrdersInStoreRefundLineItemRequest.


        :param amount_pretax: The amount_pretax of this OrdersInStoreRefundLineItemRequest.
        :type amount_pretax: Price
        """

        self._amount_pretax = amount_pretax

    @property
    def amount_tax(self):
        """Gets the amount_tax of this OrdersInStoreRefundLineItemRequest.


        :return: The amount_tax of this OrdersInStoreRefundLineItemRequest.
        :rtype: Price
        """
        return self._amount_tax

    @amount_tax.setter
    def amount_tax(self, amount_tax):
        """Sets the amount_tax of this OrdersInStoreRefundLineItemRequest.


        :param amount_tax: The amount_tax of this OrdersInStoreRefundLineItemRequest.
        :type amount_tax: Price
        """

        self._amount_tax = amount_tax

    @property
    def line_item_id(self):
        """Gets the line_item_id of this OrdersInStoreRefundLineItemRequest.

        The ID of the line item to return. Either lineItemId or productId is required.

        :return: The line_item_id of this OrdersInStoreRefundLineItemRequest.
        :rtype: str
        """
        return self._line_item_id

    @line_item_id.setter
    def line_item_id(self, line_item_id):
        """Sets the line_item_id of this OrdersInStoreRefundLineItemRequest.

        The ID of the line item to return. Either lineItemId or productId is required.

        :param line_item_id: The line_item_id of this OrdersInStoreRefundLineItemRequest.
        :type line_item_id: str
        """

        self._line_item_id = line_item_id

    @property
    def operation_id(self):
        """Gets the operation_id of this OrdersInStoreRefundLineItemRequest.

        The ID of the operation. Unique across all operations for a given order.

        :return: The operation_id of this OrdersInStoreRefundLineItemRequest.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this OrdersInStoreRefundLineItemRequest.

        The ID of the operation. Unique across all operations for a given order.

        :param operation_id: The operation_id of this OrdersInStoreRefundLineItemRequest.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def product_id(self):
        """Gets the product_id of this OrdersInStoreRefundLineItemRequest.

        The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.

        :return: The product_id of this OrdersInStoreRefundLineItemRequest.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this OrdersInStoreRefundLineItemRequest.

        The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.

        :param product_id: The product_id of this OrdersInStoreRefundLineItemRequest.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this OrdersInStoreRefundLineItemRequest.

        The quantity to return and refund.

        :return: The quantity of this OrdersInStoreRefundLineItemRequest.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrdersInStoreRefundLineItemRequest.

        The quantity to return and refund.

        :param quantity: The quantity of this OrdersInStoreRefundLineItemRequest.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def reason(self):
        """Gets the reason of this OrdersInStoreRefundLineItemRequest.

        The reason for the return. Acceptable values are: - \"`customerDiscretionaryReturn`\" - \"`customerInitiatedMerchantCancel`\" - \"`deliveredTooLate`\" - \"`expiredItem`\" - \"`invalidCoupon`\" - \"`malformedShippingAddress`\" - \"`other`\" - \"`productArrivedDamaged`\" - \"`productNotAsDescribed`\" - \"`qualityNotAsExpected`\" - \"`undeliverableShippingAddress`\" - \"`unsupportedPoBoxAddress`\" - \"`wrongProductShipped`\" 

        :return: The reason of this OrdersInStoreRefundLineItemRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this OrdersInStoreRefundLineItemRequest.

        The reason for the return. Acceptable values are: - \"`customerDiscretionaryReturn`\" - \"`customerInitiatedMerchantCancel`\" - \"`deliveredTooLate`\" - \"`expiredItem`\" - \"`invalidCoupon`\" - \"`malformedShippingAddress`\" - \"`other`\" - \"`productArrivedDamaged`\" - \"`productNotAsDescribed`\" - \"`qualityNotAsExpected`\" - \"`undeliverableShippingAddress`\" - \"`unsupportedPoBoxAddress`\" - \"`wrongProductShipped`\" 

        :param reason: The reason of this OrdersInStoreRefundLineItemRequest.
        :type reason: str
        """

        self._reason = reason

    @property
    def reason_text(self):
        """Gets the reason_text of this OrdersInStoreRefundLineItemRequest.

        The explanation of the reason.

        :return: The reason_text of this OrdersInStoreRefundLineItemRequest.
        :rtype: str
        """
        return self._reason_text

    @reason_text.setter
    def reason_text(self, reason_text):
        """Sets the reason_text of this OrdersInStoreRefundLineItemRequest.

        The explanation of the reason.

        :param reason_text: The reason_text of this OrdersInStoreRefundLineItemRequest.
        :type reason_text: str
        """

        self._reason_text = reason_text
