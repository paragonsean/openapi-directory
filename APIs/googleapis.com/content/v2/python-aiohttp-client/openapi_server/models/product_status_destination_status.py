# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductStatusDestinationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approval_pending: bool=None, approval_status: str=None, destination: str=None, intention: str=None):
        """ProductStatusDestinationStatus - a model defined in OpenAPI

        :param approval_pending: The approval_pending of this ProductStatusDestinationStatus.
        :param approval_status: The approval_status of this ProductStatusDestinationStatus.
        :param destination: The destination of this ProductStatusDestinationStatus.
        :param intention: The intention of this ProductStatusDestinationStatus.
        """
        self.openapi_types = {
            'approval_pending': bool,
            'approval_status': str,
            'destination': str,
            'intention': str
        }

        self.attribute_map = {
            'approval_pending': 'approvalPending',
            'approval_status': 'approvalStatus',
            'destination': 'destination',
            'intention': 'intention'
        }

        self._approval_pending = approval_pending
        self._approval_status = approval_status
        self._destination = destination
        self._intention = intention

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductStatusDestinationStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductStatusDestinationStatus of this ProductStatusDestinationStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approval_pending(self):
        """Gets the approval_pending of this ProductStatusDestinationStatus.

        Whether the approval status might change due to further processing.

        :return: The approval_pending of this ProductStatusDestinationStatus.
        :rtype: bool
        """
        return self._approval_pending

    @approval_pending.setter
    def approval_pending(self, approval_pending):
        """Sets the approval_pending of this ProductStatusDestinationStatus.

        Whether the approval status might change due to further processing.

        :param approval_pending: The approval_pending of this ProductStatusDestinationStatus.
        :type approval_pending: bool
        """

        self._approval_pending = approval_pending

    @property
    def approval_status(self):
        """Gets the approval_status of this ProductStatusDestinationStatus.

        The destination's approval status. Acceptable values are: - \"`approved`\" - \"`disapproved`\" 

        :return: The approval_status of this ProductStatusDestinationStatus.
        :rtype: str
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status):
        """Sets the approval_status of this ProductStatusDestinationStatus.

        The destination's approval status. Acceptable values are: - \"`approved`\" - \"`disapproved`\" 

        :param approval_status: The approval_status of this ProductStatusDestinationStatus.
        :type approval_status: str
        """

        self._approval_status = approval_status

    @property
    def destination(self):
        """Gets the destination of this ProductStatusDestinationStatus.

        The name of the destination

        :return: The destination of this ProductStatusDestinationStatus.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ProductStatusDestinationStatus.

        The name of the destination

        :param destination: The destination of this ProductStatusDestinationStatus.
        :type destination: str
        """

        self._destination = destination

    @property
    def intention(self):
        """Gets the intention of this ProductStatusDestinationStatus.

        Provided for backward compatibility only. Always set to \"required\". Acceptable values are: - \"`default`\" - \"`excluded`\" - \"`optional`\" - \"`required`\" 

        :return: The intention of this ProductStatusDestinationStatus.
        :rtype: str
        """
        return self._intention

    @intention.setter
    def intention(self, intention):
        """Sets the intention of this ProductStatusDestinationStatus.

        Provided for backward compatibility only. Always set to \"required\". Acceptable values are: - \"`default`\" - \"`excluded`\" - \"`optional`\" - \"`required`\" 

        :param intention: The intention of this ProductStatusDestinationStatus.
        :type intention: str
        """

        self._intention = intention
