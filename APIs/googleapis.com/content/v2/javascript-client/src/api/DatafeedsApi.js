/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Datafeed from '../model/Datafeed';
import DatafeedsCustomBatchRequest from '../model/DatafeedsCustomBatchRequest';
import DatafeedsCustomBatchResponse from '../model/DatafeedsCustomBatchResponse';
import DatafeedsFetchNowResponse from '../model/DatafeedsFetchNowResponse';
import DatafeedsListResponse from '../model/DatafeedsListResponse';

/**
* Datafeeds service.
* @module api/DatafeedsApi
* @version v2
*/
export default class DatafeedsApi {

    /**
    * Constructs a new DatafeedsApi. 
    * @alias module:api/DatafeedsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentDatafeedsCustombatch operation.
     * @callback module:api/DatafeedsApi~contentDatafeedsCustombatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatafeedsCustomBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [dryRun] Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).
     * @param {module:model/DatafeedsCustomBatchRequest} [datafeedsCustomBatchRequest] 
     * @param {module:api/DatafeedsApi~contentDatafeedsCustombatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatafeedsCustomBatchResponse}
     */
    contentDatafeedsCustombatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['datafeedsCustomBatchRequest'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'dryRun': opts['dryRun']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatafeedsCustomBatchResponse;
      return this.apiClient.callApi(
        '/datafeeds/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentDatafeedsDelete operation.
     * @callback module:api/DatafeedsApi~contentDatafeedsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a datafeed configuration from your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
     * @param {String} datafeedId The ID of the datafeed.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [dryRun] Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).
     * @param {module:api/DatafeedsApi~contentDatafeedsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contentDatafeedsDelete(merchantId, datafeedId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentDatafeedsDelete");
      }
      // verify the required parameter 'datafeedId' is set
      if (datafeedId === undefined || datafeedId === null) {
        throw new Error("Missing the required parameter 'datafeedId' when calling contentDatafeedsDelete");
      }

      let pathParams = {
        'merchantId': merchantId,
        'datafeedId': datafeedId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'dryRun': opts['dryRun']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{merchantId}/datafeeds/{datafeedId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentDatafeedsFetchnow operation.
     * @callback module:api/DatafeedsApi~contentDatafeedsFetchnowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatafeedsFetchNowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this method more than once per day, we recommend you use the Products service to update your product data.
     * @param {String} merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
     * @param {String} datafeedId The ID of the datafeed to be fetched.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [dryRun] Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).
     * @param {module:api/DatafeedsApi~contentDatafeedsFetchnowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatafeedsFetchNowResponse}
     */
    contentDatafeedsFetchnow(merchantId, datafeedId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentDatafeedsFetchnow");
      }
      // verify the required parameter 'datafeedId' is set
      if (datafeedId === undefined || datafeedId === null) {
        throw new Error("Missing the required parameter 'datafeedId' when calling contentDatafeedsFetchnow");
      }

      let pathParams = {
        'merchantId': merchantId,
        'datafeedId': datafeedId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'dryRun': opts['dryRun']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatafeedsFetchNowResponse;
      return this.apiClient.callApi(
        '/{merchantId}/datafeeds/{datafeedId}/fetchNow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentDatafeedsGet operation.
     * @callback module:api/DatafeedsApi~contentDatafeedsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Datafeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a datafeed configuration from your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
     * @param {String} datafeedId The ID of the datafeed.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/DatafeedsApi~contentDatafeedsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Datafeed}
     */
    contentDatafeedsGet(merchantId, datafeedId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentDatafeedsGet");
      }
      // verify the required parameter 'datafeedId' is set
      if (datafeedId === undefined || datafeedId === null) {
        throw new Error("Missing the required parameter 'datafeedId' when calling contentDatafeedsGet");
      }

      let pathParams = {
        'merchantId': merchantId,
        'datafeedId': datafeedId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Datafeed;
      return this.apiClient.callApi(
        '/{merchantId}/datafeeds/{datafeedId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentDatafeedsInsert operation.
     * @callback module:api/DatafeedsApi~contentDatafeedsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Datafeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a datafeed configuration with your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [dryRun] Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).
     * @param {module:model/Datafeed} [datafeed] 
     * @param {module:api/DatafeedsApi~contentDatafeedsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Datafeed}
     */
    contentDatafeedsInsert(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['datafeed'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentDatafeedsInsert");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'dryRun': opts['dryRun']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Datafeed;
      return this.apiClient.callApi(
        '/{merchantId}/datafeeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentDatafeedsList operation.
     * @callback module:api/DatafeedsApi~contentDatafeedsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatafeedsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the configurations for datafeeds in your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the datafeeds. This account cannot be a multi-client account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxResults] The maximum number of products to return in the response, used for paging.
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {module:api/DatafeedsApi~contentDatafeedsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatafeedsListResponse}
     */
    contentDatafeedsList(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentDatafeedsList");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatafeedsListResponse;
      return this.apiClient.callApi(
        '/{merchantId}/datafeeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentDatafeedsUpdate operation.
     * @callback module:api/DatafeedsApi~contentDatafeedsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Datafeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a datafeed configuration of your Merchant Center account. Any fields that are not provided are deleted from the resource.
     * @param {String} merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
     * @param {String} datafeedId The ID of the datafeed.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [dryRun] Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).
     * @param {module:model/Datafeed} [datafeed] 
     * @param {module:api/DatafeedsApi~contentDatafeedsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Datafeed}
     */
    contentDatafeedsUpdate(merchantId, datafeedId, opts, callback) {
      opts = opts || {};
      let postBody = opts['datafeed'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentDatafeedsUpdate");
      }
      // verify the required parameter 'datafeedId' is set
      if (datafeedId === undefined || datafeedId === null) {
        throw new Error("Missing the required parameter 'datafeedId' when calling contentDatafeedsUpdate");
      }

      let pathParams = {
        'merchantId': merchantId,
        'datafeedId': datafeedId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'dryRun': opts['dryRun']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Datafeed;
      return this.apiClient.callApi(
        '/{merchantId}/datafeeds/{datafeedId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
