/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductStatus from '../model/ProductStatus';
import ProductstatusesCustomBatchRequest from '../model/ProductstatusesCustomBatchRequest';
import ProductstatusesCustomBatchResponse from '../model/ProductstatusesCustomBatchResponse';
import ProductstatusesListResponse from '../model/ProductstatusesListResponse';

/**
* Productstatuses service.
* @module api/ProductstatusesApi
* @version v2
*/
export default class ProductstatusesApi {

    /**
    * Constructs a new ProductstatusesApi. 
    * @alias module:api/ProductstatusesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentProductstatusesCustombatch operation.
     * @callback module:api/ProductstatusesApi~contentProductstatusesCustombatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductstatusesCustomBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the statuses of multiple products in a single request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [includeAttributes] Flag to include full product data in the results of this request. The default value is false.
     * @param {module:model/ProductstatusesCustomBatchRequest} [productstatusesCustomBatchRequest] 
     * @param {module:api/ProductstatusesApi~contentProductstatusesCustombatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductstatusesCustomBatchResponse}
     */
    contentProductstatusesCustombatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['productstatusesCustomBatchRequest'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'includeAttributes': opts['includeAttributes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductstatusesCustomBatchResponse;
      return this.apiClient.callApi(
        '/productstatuses/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentProductstatusesGet operation.
     * @callback module:api/ProductstatusesApi~contentProductstatusesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the status of a product from your Merchant Center account.
     * @param {String} merchantId The ID of the account that contains the product. This account cannot be a multi-client account.
     * @param {String} productId The REST ID of the product.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Array.<String>} [destinations] If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.
     * @param {Boolean} [includeAttributes] Flag to include full product data in the result of this get request. The default value is false.
     * @param {module:api/ProductstatusesApi~contentProductstatusesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductStatus}
     */
    contentProductstatusesGet(merchantId, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentProductstatusesGet");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling contentProductstatusesGet");
      }

      let pathParams = {
        'merchantId': merchantId,
        'productId': productId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'destinations': this.apiClient.buildCollectionParam(opts['destinations'], 'multi'),
        'includeAttributes': opts['includeAttributes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductStatus;
      return this.apiClient.callApi(
        '/{merchantId}/productstatuses/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentProductstatusesList operation.
     * @callback module:api/ProductstatusesApi~contentProductstatusesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductstatusesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the statuses of the products in your Merchant Center account.
     * @param {String} merchantId The ID of the account that contains the products. This account cannot be a multi-client account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Array.<String>} [destinations] If set, only issues for the specified destinations are returned, otherwise only issues for the Shopping destination.
     * @param {Boolean} [includeAttributes] Flag to include full product data in the results of the list request. The default value is false.
     * @param {Boolean} [includeInvalidInsertedItems] Flag to include the invalid inserted items in the result of the list request. By default the invalid items are not shown (the default value is false).
     * @param {Number} [maxResults] The maximum number of product statuses to return in the response, used for paging.
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {module:api/ProductstatusesApi~contentProductstatusesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductstatusesListResponse}
     */
    contentProductstatusesList(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentProductstatusesList");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'destinations': this.apiClient.buildCollectionParam(opts['destinations'], 'multi'),
        'includeAttributes': opts['includeAttributes'],
        'includeInvalidInsertedItems': opts['includeInvalidInsertedItems'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductstatusesListResponse;
      return this.apiClient.callApi(
        '/{merchantId}/productstatuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
