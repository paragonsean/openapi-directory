/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MerchantOrderReturn from '../model/MerchantOrderReturn';
import OrderreturnsListResponse from '../model/OrderreturnsListResponse';

/**
* Orderreturns service.
* @module api/OrderreturnsApi
* @version v2
*/
export default class OrderreturnsApi {

    /**
    * Constructs a new OrderreturnsApi. 
    * @alias module:api/OrderreturnsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentOrderreturnsGet operation.
     * @callback module:api/OrderreturnsApi~contentOrderreturnsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MerchantOrderReturn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an order return from your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} returnId Merchant order return ID generated by Google.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/OrderreturnsApi~contentOrderreturnsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MerchantOrderReturn}
     */
    contentOrderreturnsGet(merchantId, returnId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrderreturnsGet");
      }
      // verify the required parameter 'returnId' is set
      if (returnId === undefined || returnId === null) {
        throw new Error("Missing the required parameter 'returnId' when calling contentOrderreturnsGet");
      }

      let pathParams = {
        'merchantId': merchantId,
        'returnId': returnId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MerchantOrderReturn;
      return this.apiClient.callApi(
        '/{merchantId}/orderreturns/{returnId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrderreturnsList operation.
     * @callback module:api/OrderreturnsApi~contentOrderreturnsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderreturnsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists order returns in your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [createdEndDate] Obtains order returns created before this date (inclusively), in ISO 8601 format.
     * @param {String} [createdStartDate] Obtains order returns created after this date (inclusively), in ISO 8601 format.
     * @param {Number} [maxResults] The maximum number of order returns to return in the response, used for paging. The default value is 25 returns per page, and the maximum allowed value is 250 returns per page.
     * @param {module:model/String} [orderBy] Return the results in the specified order.
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {module:api/OrderreturnsApi~contentOrderreturnsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderreturnsListResponse}
     */
    contentOrderreturnsList(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrderreturnsList");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'createdEndDate': opts['createdEndDate'],
        'createdStartDate': opts['createdStartDate'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderreturnsListResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orderreturns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
