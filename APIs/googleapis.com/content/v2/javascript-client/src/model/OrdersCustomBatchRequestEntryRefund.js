/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';

/**
 * The OrdersCustomBatchRequestEntryRefund model module.
 * @module model/OrdersCustomBatchRequestEntryRefund
 * @version v2
 */
class OrdersCustomBatchRequestEntryRefund {
    /**
     * Constructs a new <code>OrdersCustomBatchRequestEntryRefund</code>.
     * @alias module:model/OrdersCustomBatchRequestEntryRefund
     */
    constructor() { 
        
        OrdersCustomBatchRequestEntryRefund.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrdersCustomBatchRequestEntryRefund</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrdersCustomBatchRequestEntryRefund} obj Optional instance to populate.
     * @return {module:model/OrdersCustomBatchRequestEntryRefund} The populated <code>OrdersCustomBatchRequestEntryRefund</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrdersCustomBatchRequestEntryRefund();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Price.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('amountPretax')) {
                obj['amountPretax'] = Price.constructFromObject(data['amountPretax']);
            }
            if (data.hasOwnProperty('amountTax')) {
                obj['amountTax'] = Price.constructFromObject(data['amountTax']);
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('reasonText')) {
                obj['reasonText'] = ApiClient.convertToType(data['reasonText'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrdersCustomBatchRequestEntryRefund</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrdersCustomBatchRequestEntryRefund</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Price.validateJSON(data['amount']);
        }
        // validate the optional field `amountPretax`
        if (data['amountPretax']) { // data not null
          Price.validateJSON(data['amountPretax']);
        }
        // validate the optional field `amountTax`
        if (data['amountTax']) { // data not null
          Price.validateJSON(data['amountTax']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['reasonText'] && !(typeof data['reasonText'] === 'string' || data['reasonText'] instanceof String)) {
            throw new Error("Expected the field `reasonText` to be a primitive type in the JSON string but got " + data['reasonText']);
        }

        return true;
    }


}



/**
 * @member {module:model/Price} amount
 */
OrdersCustomBatchRequestEntryRefund.prototype['amount'] = undefined;

/**
 * @member {module:model/Price} amountPretax
 */
OrdersCustomBatchRequestEntryRefund.prototype['amountPretax'] = undefined;

/**
 * @member {module:model/Price} amountTax
 */
OrdersCustomBatchRequestEntryRefund.prototype['amountTax'] = undefined;

/**
 * The reason for the refund. Acceptable values are: - \"`adjustment`\" - \"`courtesyAdjustment`\" - \"`customerCanceled`\" - \"`customerDiscretionaryReturn`\" - \"`deliveredLateByCarrier`\" - \"`feeAdjustment`\" - \"`lateShipmentCredit`\" - \"`noInventory`\" - \"`other`\" - \"`priceError`\" - \"`productArrivedDamaged`\" - \"`productNotAsDescribed`\" - \"`shippingCostAdjustment`\" - \"`taxAdjustment`\" - \"`undeliverableShippingAddress`\" - \"`wrongProductShipped`\" 
 * @member {String} reason
 */
OrdersCustomBatchRequestEntryRefund.prototype['reason'] = undefined;

/**
 * The explanation of the reason.
 * @member {String} reasonText
 */
OrdersCustomBatchRequestEntryRefund.prototype['reasonText'] = undefined;






export default OrdersCustomBatchRequestEntryRefund;

