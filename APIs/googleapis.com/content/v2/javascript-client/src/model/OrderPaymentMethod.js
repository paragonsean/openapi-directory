/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderAddress from './OrderAddress';

/**
 * The OrderPaymentMethod model module.
 * @module model/OrderPaymentMethod
 * @version v2
 */
class OrderPaymentMethod {
    /**
     * Constructs a new <code>OrderPaymentMethod</code>.
     * @alias module:model/OrderPaymentMethod
     */
    constructor() { 
        
        OrderPaymentMethod.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderPaymentMethod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderPaymentMethod} obj Optional instance to populate.
     * @return {module:model/OrderPaymentMethod} The populated <code>OrderPaymentMethod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderPaymentMethod();

            if (data.hasOwnProperty('billingAddress')) {
                obj['billingAddress'] = OrderAddress.constructFromObject(data['billingAddress']);
            }
            if (data.hasOwnProperty('expirationMonth')) {
                obj['expirationMonth'] = ApiClient.convertToType(data['expirationMonth'], 'Number');
            }
            if (data.hasOwnProperty('expirationYear')) {
                obj['expirationYear'] = ApiClient.convertToType(data['expirationYear'], 'Number');
            }
            if (data.hasOwnProperty('lastFourDigits')) {
                obj['lastFourDigits'] = ApiClient.convertToType(data['lastFourDigits'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderPaymentMethod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderPaymentMethod</code>.
     */
    static validateJSON(data) {
        // validate the optional field `billingAddress`
        if (data['billingAddress']) { // data not null
          OrderAddress.validateJSON(data['billingAddress']);
        }
        // ensure the json data is a string
        if (data['lastFourDigits'] && !(typeof data['lastFourDigits'] === 'string' || data['lastFourDigits'] instanceof String)) {
            throw new Error("Expected the field `lastFourDigits` to be a primitive type in the JSON string but got " + data['lastFourDigits']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/OrderAddress} billingAddress
 */
OrderPaymentMethod.prototype['billingAddress'] = undefined;

/**
 * The card expiration month (January = 1, February = 2 etc.).
 * @member {Number} expirationMonth
 */
OrderPaymentMethod.prototype['expirationMonth'] = undefined;

/**
 * The card expiration year (4-digit, e.g. 2015).
 * @member {Number} expirationYear
 */
OrderPaymentMethod.prototype['expirationYear'] = undefined;

/**
 * The last four digits of the card number.
 * @member {String} lastFourDigits
 */
OrderPaymentMethod.prototype['lastFourDigits'] = undefined;

/**
 * The billing phone number.
 * @member {String} phoneNumber
 */
OrderPaymentMethod.prototype['phoneNumber'] = undefined;

/**
 * The type of instrument. Acceptable values are: - \"`AMEX`\" - \"`DISCOVER`\" - \"`JCB`\" - \"`MASTERCARD`\" - \"`UNIONPAY`\" - \"`VISA`\" - \"``\" 
 * @member {String} type
 */
OrderPaymentMethod.prototype['type'] = undefined;






export default OrderPaymentMethod;

