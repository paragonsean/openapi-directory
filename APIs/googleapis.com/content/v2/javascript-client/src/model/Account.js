/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountAdwordsLink from './AccountAdwordsLink';
import AccountBusinessInformation from './AccountBusinessInformation';
import AccountGoogleMyBusinessLink from './AccountGoogleMyBusinessLink';
import AccountUser from './AccountUser';
import AccountYouTubeChannelLink from './AccountYouTubeChannelLink';

/**
 * The Account model module.
 * @module model/Account
 * @version v2
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * Account data. After the creation of a new account it may take a few minutes before it is fully operational. The methods delete, insert, and update require the admin role.
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('adultContent')) {
                obj['adultContent'] = ApiClient.convertToType(data['adultContent'], 'Boolean');
            }
            if (data.hasOwnProperty('adwordsLinks')) {
                obj['adwordsLinks'] = ApiClient.convertToType(data['adwordsLinks'], [AccountAdwordsLink]);
            }
            if (data.hasOwnProperty('businessInformation')) {
                obj['businessInformation'] = AccountBusinessInformation.constructFromObject(data['businessInformation']);
            }
            if (data.hasOwnProperty('googleMyBusinessLink')) {
                obj['googleMyBusinessLink'] = AccountGoogleMyBusinessLink.constructFromObject(data['googleMyBusinessLink']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reviewsUrl')) {
                obj['reviewsUrl'] = ApiClient.convertToType(data['reviewsUrl'], 'String');
            }
            if (data.hasOwnProperty('sellerId')) {
                obj['sellerId'] = ApiClient.convertToType(data['sellerId'], 'String');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [AccountUser]);
            }
            if (data.hasOwnProperty('websiteUrl')) {
                obj['websiteUrl'] = ApiClient.convertToType(data['websiteUrl'], 'String');
            }
            if (data.hasOwnProperty('youtubeChannelLinks')) {
                obj['youtubeChannelLinks'] = ApiClient.convertToType(data['youtubeChannelLinks'], [AccountYouTubeChannelLink]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        if (data['adwordsLinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['adwordsLinks'])) {
                throw new Error("Expected the field `adwordsLinks` to be an array in the JSON data but got " + data['adwordsLinks']);
            }
            // validate the optional field `adwordsLinks` (array)
            for (const item of data['adwordsLinks']) {
                AccountAdwordsLink.validateJSON(item);
            };
        }
        // validate the optional field `businessInformation`
        if (data['businessInformation']) { // data not null
          AccountBusinessInformation.validateJSON(data['businessInformation']);
        }
        // validate the optional field `googleMyBusinessLink`
        if (data['googleMyBusinessLink']) { // data not null
          AccountGoogleMyBusinessLink.validateJSON(data['googleMyBusinessLink']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['reviewsUrl'] && !(typeof data['reviewsUrl'] === 'string' || data['reviewsUrl'] instanceof String)) {
            throw new Error("Expected the field `reviewsUrl` to be a primitive type in the JSON string but got " + data['reviewsUrl']);
        }
        // ensure the json data is a string
        if (data['sellerId'] && !(typeof data['sellerId'] === 'string' || data['sellerId'] instanceof String)) {
            throw new Error("Expected the field `sellerId` to be a primitive type in the JSON string but got " + data['sellerId']);
        }
        if (data['users']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['users'])) {
                throw new Error("Expected the field `users` to be an array in the JSON data but got " + data['users']);
            }
            // validate the optional field `users` (array)
            for (const item of data['users']) {
                AccountUser.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['websiteUrl'] && !(typeof data['websiteUrl'] === 'string' || data['websiteUrl'] instanceof String)) {
            throw new Error("Expected the field `websiteUrl` to be a primitive type in the JSON string but got " + data['websiteUrl']);
        }
        if (data['youtubeChannelLinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['youtubeChannelLinks'])) {
                throw new Error("Expected the field `youtubeChannelLinks` to be an array in the JSON data but got " + data['youtubeChannelLinks']);
            }
            // validate the optional field `youtubeChannelLinks` (array)
            for (const item of data['youtubeChannelLinks']) {
                AccountYouTubeChannelLink.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Indicates whether the merchant sells adult content.
 * @member {Boolean} adultContent
 */
Account.prototype['adultContent'] = undefined;

/**
 * List of linked AdWords accounts that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected either in the AdWords interface or through the AdWords API. To delete an active link, or to cancel a link request, remove it from the list.
 * @member {Array.<module:model/AccountAdwordsLink>} adwordsLinks
 */
Account.prototype['adwordsLinks'] = undefined;

/**
 * @member {module:model/AccountBusinessInformation} businessInformation
 */
Account.prototype['businessInformation'] = undefined;

/**
 * @member {module:model/AccountGoogleMyBusinessLink} googleMyBusinessLink
 */
Account.prototype['googleMyBusinessLink'] = undefined;

/**
 * Required for update. Merchant Center account ID.
 * @member {String} id
 */
Account.prototype['id'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"`content#account`\"
 * @member {String} kind
 */
Account.prototype['kind'] = undefined;

/**
 * Required. Display name for the account.
 * @member {String} name
 */
Account.prototype['name'] = undefined;

/**
 * [DEPRECATED] This field is never returned and will be ignored if provided.
 * @member {String} reviewsUrl
 */
Account.prototype['reviewsUrl'] = undefined;

/**
 * Client-specific, locally-unique, internal ID for the child account.
 * @member {String} sellerId
 */
Account.prototype['sellerId'] = undefined;

/**
 * Users with access to the account. Every account (except for subaccounts) must have at least one admin user.
 * @member {Array.<module:model/AccountUser>} users
 */
Account.prototype['users'] = undefined;

/**
 * The merchant's website.
 * @member {String} websiteUrl
 */
Account.prototype['websiteUrl'] = undefined;

/**
 * List of linked YouTube channels that are active or pending approval. To create a new link request, add a new link with status `active` to the list. It will remain in a `pending` state until approved or rejected in the YT Creator Studio interface. To delete an active link, or to cancel a link request, remove it from the list.
 * @member {Array.<module:model/AccountYouTubeChannelLink>} youtubeChannelLinks
 */
Account.prototype['youtubeChannelLinks'] = undefined;






export default Account;

