/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HolidaysHoliday model module.
 * @module model/HolidaysHoliday
 * @version v2
 */
class HolidaysHoliday {
    /**
     * Constructs a new <code>HolidaysHoliday</code>.
     * @alias module:model/HolidaysHoliday
     */
    constructor() { 
        
        HolidaysHoliday.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HolidaysHoliday</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HolidaysHoliday} obj Optional instance to populate.
     * @return {module:model/HolidaysHoliday} The populated <code>HolidaysHoliday</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HolidaysHoliday();

            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('deliveryGuaranteeDate')) {
                obj['deliveryGuaranteeDate'] = ApiClient.convertToType(data['deliveryGuaranteeDate'], 'String');
            }
            if (data.hasOwnProperty('deliveryGuaranteeHour')) {
                obj['deliveryGuaranteeHour'] = ApiClient.convertToType(data['deliveryGuaranteeHour'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HolidaysHoliday</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HolidaysHoliday</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['deliveryGuaranteeDate'] && !(typeof data['deliveryGuaranteeDate'] === 'string' || data['deliveryGuaranteeDate'] instanceof String)) {
            throw new Error("Expected the field `deliveryGuaranteeDate` to be a primitive type in the JSON string but got " + data['deliveryGuaranteeDate']);
        }
        // ensure the json data is a string
        if (data['deliveryGuaranteeHour'] && !(typeof data['deliveryGuaranteeHour'] === 'string' || data['deliveryGuaranteeHour'] instanceof String)) {
            throw new Error("Expected the field `deliveryGuaranteeHour` to be a primitive type in the JSON string but got " + data['deliveryGuaranteeHour']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The CLDR territory code of the country in which the holiday is available. E.g. \"US\", \"DE\", \"GB\". A holiday cutoff can only be configured in a shipping settings service with matching delivery country. Always present.
 * @member {String} countryCode
 */
HolidaysHoliday.prototype['countryCode'] = undefined;

/**
 * Date of the holiday, in ISO 8601 format. E.g. \"2016-12-25\" for Christmas 2016. Always present.
 * @member {String} date
 */
HolidaysHoliday.prototype['date'] = undefined;

/**
 * Date on which the order has to arrive at the customer's, in ISO 8601 format. E.g. \"2016-12-24\" for 24th December 2016. Always present.
 * @member {String} deliveryGuaranteeDate
 */
HolidaysHoliday.prototype['deliveryGuaranteeDate'] = undefined;

/**
 * Hour of the day in the delivery location's timezone on the guaranteed delivery date by which the order has to arrive at the customer's. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Always present.
 * @member {String} deliveryGuaranteeHour
 */
HolidaysHoliday.prototype['deliveryGuaranteeHour'] = undefined;

/**
 * Unique identifier for the holiday to be used when configuring holiday cutoffs. Always present.
 * @member {String} id
 */
HolidaysHoliday.prototype['id'] = undefined;

/**
 * The holiday type. Always present. Acceptable values are: - \"`Christmas`\" - \"`Easter`\" - \"`Father's Day`\" - \"`Halloween`\" - \"`Independence Day (USA)`\" - \"`Mother's Day`\" - \"`Thanksgiving`\" - \"`Valentine's Day`\" 
 * @member {String} type
 */
HolidaysHoliday.prototype['type'] = undefined;






export default HolidaysHoliday;

