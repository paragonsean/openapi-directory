/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderLegacyPromotion from './OrderLegacyPromotion';
import Price from './Price';
import TestOrderCustomer from './TestOrderCustomer';
import TestOrderLineItem from './TestOrderLineItem';
import TestOrderPaymentMethod from './TestOrderPaymentMethod';

/**
 * The TestOrder model module.
 * @module model/TestOrder
 * @version v2
 */
class TestOrder {
    /**
     * Constructs a new <code>TestOrder</code>.
     * @alias module:model/TestOrder
     */
    constructor() { 
        
        TestOrder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestOrder} obj Optional instance to populate.
     * @return {module:model/TestOrder} The populated <code>TestOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestOrder();

            if (data.hasOwnProperty('customer')) {
                obj['customer'] = TestOrderCustomer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('enableOrderinvoices')) {
                obj['enableOrderinvoices'] = ApiClient.convertToType(data['enableOrderinvoices'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('lineItems')) {
                obj['lineItems'] = ApiClient.convertToType(data['lineItems'], [TestOrderLineItem]);
            }
            if (data.hasOwnProperty('notificationMode')) {
                obj['notificationMode'] = ApiClient.convertToType(data['notificationMode'], 'String');
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = TestOrderPaymentMethod.constructFromObject(data['paymentMethod']);
            }
            if (data.hasOwnProperty('predefinedDeliveryAddress')) {
                obj['predefinedDeliveryAddress'] = ApiClient.convertToType(data['predefinedDeliveryAddress'], 'String');
            }
            if (data.hasOwnProperty('predefinedPickupDetails')) {
                obj['predefinedPickupDetails'] = ApiClient.convertToType(data['predefinedPickupDetails'], 'String');
            }
            if (data.hasOwnProperty('promotions')) {
                obj['promotions'] = ApiClient.convertToType(data['promotions'], [OrderLegacyPromotion]);
            }
            if (data.hasOwnProperty('shippingCost')) {
                obj['shippingCost'] = Price.constructFromObject(data['shippingCost']);
            }
            if (data.hasOwnProperty('shippingCostTax')) {
                obj['shippingCostTax'] = Price.constructFromObject(data['shippingCostTax']);
            }
            if (data.hasOwnProperty('shippingOption')) {
                obj['shippingOption'] = ApiClient.convertToType(data['shippingOption'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestOrder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestOrder</code>.
     */
    static validateJSON(data) {
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          TestOrderCustomer.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['lineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineItems'])) {
                throw new Error("Expected the field `lineItems` to be an array in the JSON data but got " + data['lineItems']);
            }
            // validate the optional field `lineItems` (array)
            for (const item of data['lineItems']) {
                TestOrderLineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['notificationMode'] && !(typeof data['notificationMode'] === 'string' || data['notificationMode'] instanceof String)) {
            throw new Error("Expected the field `notificationMode` to be a primitive type in the JSON string but got " + data['notificationMode']);
        }
        // validate the optional field `paymentMethod`
        if (data['paymentMethod']) { // data not null
          TestOrderPaymentMethod.validateJSON(data['paymentMethod']);
        }
        // ensure the json data is a string
        if (data['predefinedDeliveryAddress'] && !(typeof data['predefinedDeliveryAddress'] === 'string' || data['predefinedDeliveryAddress'] instanceof String)) {
            throw new Error("Expected the field `predefinedDeliveryAddress` to be a primitive type in the JSON string but got " + data['predefinedDeliveryAddress']);
        }
        // ensure the json data is a string
        if (data['predefinedPickupDetails'] && !(typeof data['predefinedPickupDetails'] === 'string' || data['predefinedPickupDetails'] instanceof String)) {
            throw new Error("Expected the field `predefinedPickupDetails` to be a primitive type in the JSON string but got " + data['predefinedPickupDetails']);
        }
        if (data['promotions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['promotions'])) {
                throw new Error("Expected the field `promotions` to be an array in the JSON data but got " + data['promotions']);
            }
            // validate the optional field `promotions` (array)
            for (const item of data['promotions']) {
                OrderLegacyPromotion.validateJSON(item);
            };
        }
        // validate the optional field `shippingCost`
        if (data['shippingCost']) { // data not null
          Price.validateJSON(data['shippingCost']);
        }
        // validate the optional field `shippingCostTax`
        if (data['shippingCostTax']) { // data not null
          Price.validateJSON(data['shippingCostTax']);
        }
        // ensure the json data is a string
        if (data['shippingOption'] && !(typeof data['shippingOption'] === 'string' || data['shippingOption'] instanceof String)) {
            throw new Error("Expected the field `shippingOption` to be a primitive type in the JSON string but got " + data['shippingOption']);
        }

        return true;
    }


}



/**
 * @member {module:model/TestOrderCustomer} customer
 */
TestOrder.prototype['customer'] = undefined;

/**
 * Whether the orderinvoices service should support this order.
 * @member {Boolean} enableOrderinvoices
 */
TestOrder.prototype['enableOrderinvoices'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"`content#testOrder`\"
 * @member {String} kind
 */
TestOrder.prototype['kind'] = undefined;

/**
 * Required. Line items that are ordered. At least one line item must be provided.
 * @member {Array.<module:model/TestOrderLineItem>} lineItems
 */
TestOrder.prototype['lineItems'] = undefined;

/**
 * Restricted. Do not use.
 * @member {String} notificationMode
 */
TestOrder.prototype['notificationMode'] = undefined;

/**
 * @member {module:model/TestOrderPaymentMethod} paymentMethod
 */
TestOrder.prototype['paymentMethod'] = undefined;

/**
 * Required. Identifier of one of the predefined delivery addresses for the delivery. Acceptable values are: - \"`dwight`\" - \"`jim`\" - \"`pam`\" 
 * @member {String} predefinedDeliveryAddress
 */
TestOrder.prototype['predefinedDeliveryAddress'] = undefined;

/**
 * Identifier of one of the predefined pickup details. Required for orders containing line items with shipping type `pickup`. Acceptable values are: - \"`dwight`\" - \"`jim`\" - \"`pam`\" 
 * @member {String} predefinedPickupDetails
 */
TestOrder.prototype['predefinedPickupDetails'] = undefined;

/**
 * Deprecated. Ignored if provided.
 * @member {Array.<module:model/OrderLegacyPromotion>} promotions
 */
TestOrder.prototype['promotions'] = undefined;

/**
 * @member {module:model/Price} shippingCost
 */
TestOrder.prototype['shippingCost'] = undefined;

/**
 * @member {module:model/Price} shippingCostTax
 */
TestOrder.prototype['shippingCostTax'] = undefined;

/**
 * Required. The requested shipping option. Acceptable values are: - \"`economy`\" - \"`expedited`\" - \"`oneDay`\" - \"`sameDay`\" - \"`standard`\" - \"`twoDay`\" 
 * @member {String} shippingOption
 */
TestOrder.prototype['shippingOption'] = undefined;






export default TestOrder;

