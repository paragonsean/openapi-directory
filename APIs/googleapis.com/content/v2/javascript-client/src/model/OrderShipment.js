/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderShipmentLineItemShipment from './OrderShipmentLineItemShipment';
import OrderShipmentScheduledDeliveryDetails from './OrderShipmentScheduledDeliveryDetails';

/**
 * The OrderShipment model module.
 * @module model/OrderShipment
 * @version v2
 */
class OrderShipment {
    /**
     * Constructs a new <code>OrderShipment</code>.
     * @alias module:model/OrderShipment
     */
    constructor() { 
        
        OrderShipment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderShipment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderShipment} obj Optional instance to populate.
     * @return {module:model/OrderShipment} The populated <code>OrderShipment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderShipment();

            if (data.hasOwnProperty('carrier')) {
                obj['carrier'] = ApiClient.convertToType(data['carrier'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('deliveryDate')) {
                obj['deliveryDate'] = ApiClient.convertToType(data['deliveryDate'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lineItems')) {
                obj['lineItems'] = ApiClient.convertToType(data['lineItems'], [OrderShipmentLineItemShipment]);
            }
            if (data.hasOwnProperty('scheduledDeliveryDetails')) {
                obj['scheduledDeliveryDetails'] = OrderShipmentScheduledDeliveryDetails.constructFromObject(data['scheduledDeliveryDetails']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('trackingId')) {
                obj['trackingId'] = ApiClient.convertToType(data['trackingId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderShipment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderShipment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['carrier'] && !(typeof data['carrier'] === 'string' || data['carrier'] instanceof String)) {
            throw new Error("Expected the field `carrier` to be a primitive type in the JSON string but got " + data['carrier']);
        }
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['deliveryDate'] && !(typeof data['deliveryDate'] === 'string' || data['deliveryDate'] instanceof String)) {
            throw new Error("Expected the field `deliveryDate` to be a primitive type in the JSON string but got " + data['deliveryDate']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['lineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineItems'])) {
                throw new Error("Expected the field `lineItems` to be an array in the JSON data but got " + data['lineItems']);
            }
            // validate the optional field `lineItems` (array)
            for (const item of data['lineItems']) {
                OrderShipmentLineItemShipment.validateJSON(item);
            };
        }
        // validate the optional field `scheduledDeliveryDetails`
        if (data['scheduledDeliveryDetails']) { // data not null
          OrderShipmentScheduledDeliveryDetails.validateJSON(data['scheduledDeliveryDetails']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['trackingId'] && !(typeof data['trackingId'] === 'string' || data['trackingId'] instanceof String)) {
            throw new Error("Expected the field `trackingId` to be a primitive type in the JSON string but got " + data['trackingId']);
        }

        return true;
    }


}



/**
 * The carrier handling the shipment. For supported carriers, Google includes the carrier name and tracking URL in emails to customers. For select supported carriers, Google also automatically updates the shipment status based on the provided shipment ID. *Note:* You can also use unsupported carriers, but emails to customers will not include the carrier name or tracking URL, and there will be no automatic order status updates. Supported carriers for US are: - \"`ups`\" (United Parcel Service) *automatic status updates* - \"`usps`\" (United States Postal Service) *automatic status updates* - \"`fedex`\" (FedEx) *automatic status updates * - \"`dhl`\" (DHL eCommerce) *automatic status updates* (US only) - \"`ontrac`\" (OnTrac) *automatic status updates * - \"`dhl express`\" (DHL Express) - \"`deliv`\" (Deliv) - \"`dynamex`\" (TForce) - \"`lasership`\" (LaserShip) - \"`mpx`\" (Military Parcel Xpress) - \"`uds`\" (United Delivery Service) - \"`efw`\" (Estes Forwarding Worldwide) - \"`jd logistics`\" (JD Logistics) - \"`yunexpress`\" (YunExpress) - \"`china post`\" (China Post) - \"`china ems`\" (China Post Express Mail Service) - \"`singapore post`\" (Singapore Post) - \"`pos malaysia`\" (Pos Malaysia) - \"`postnl`\" (PostNL) - \"`ptt`\" (PTT Turkish Post) - \"`eub`\" (ePacket) - \"`chukou1`\" (Chukou1 Logistics) - \"`bestex`\" (Best Express) - \"`canada post`\" (Canada Post) - \"`purolator`\" (Purolator) - \"`canpar`\" (Canpar) - \"`india post`\" (India Post) - \"`blue dart`\" (Blue Dart) - \"`delhivery`\" (Delhivery) - \"`dtdc`\" (DTDC) - \"`tpc india`\" (TPC India) Supported carriers for FR are: - \"`la poste`\" (La Poste) *automatic status updates * - \"`colissimo`\" (Colissimo by La Poste) *automatic status updates* - \"`ups`\" (United Parcel Service) *automatic status updates * - \"`chronopost`\" (Chronopost by La Poste) - \"`gls`\" (General Logistics Systems France) - \"`dpd`\" (DPD Group by GeoPost) - \"`bpost`\" (Belgian Post Group) - \"`colis prive`\" (Colis Priv√©) - \"`boxtal`\" (Boxtal) - \"`geodis`\" (GEODIS) - \"`tnt`\" (TNT) - \"`db schenker`\" (DB Schenker) - \"`aramex`\" (Aramex) 
 * @member {String} carrier
 */
OrderShipment.prototype['carrier'] = undefined;

/**
 * Date on which the shipment has been created, in ISO 8601 format.
 * @member {String} creationDate
 */
OrderShipment.prototype['creationDate'] = undefined;

/**
 * Date on which the shipment has been delivered, in ISO 8601 format. Present only if `status` is `delivered`
 * @member {String} deliveryDate
 */
OrderShipment.prototype['deliveryDate'] = undefined;

/**
 * The ID of the shipment.
 * @member {String} id
 */
OrderShipment.prototype['id'] = undefined;

/**
 * The line items that are shipped.
 * @member {Array.<module:model/OrderShipmentLineItemShipment>} lineItems
 */
OrderShipment.prototype['lineItems'] = undefined;

/**
 * @member {module:model/OrderShipmentScheduledDeliveryDetails} scheduledDeliveryDetails
 */
OrderShipment.prototype['scheduledDeliveryDetails'] = undefined;

/**
 * The status of the shipment. Acceptable values are: - \"`delivered`\" - \"`readyForPickup`\" - \"`shipped`\" - \"`undeliverable`\" 
 * @member {String} status
 */
OrderShipment.prototype['status'] = undefined;

/**
 * The tracking ID for the shipment.
 * @member {String} trackingId
 */
OrderShipment.prototype['trackingId'] = undefined;






export default OrderShipment;

