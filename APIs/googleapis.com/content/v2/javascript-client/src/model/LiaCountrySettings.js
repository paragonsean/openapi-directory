/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LiaAboutPageSettings from './LiaAboutPageSettings';
import LiaInventorySettings from './LiaInventorySettings';
import LiaOnDisplayToOrderSettings from './LiaOnDisplayToOrderSettings';
import LiaPosDataProvider from './LiaPosDataProvider';

/**
 * The LiaCountrySettings model module.
 * @module model/LiaCountrySettings
 * @version v2
 */
class LiaCountrySettings {
    /**
     * Constructs a new <code>LiaCountrySettings</code>.
     * @alias module:model/LiaCountrySettings
     */
    constructor() { 
        
        LiaCountrySettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiaCountrySettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiaCountrySettings} obj Optional instance to populate.
     * @return {module:model/LiaCountrySettings} The populated <code>LiaCountrySettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiaCountrySettings();

            if (data.hasOwnProperty('about')) {
                obj['about'] = LiaAboutPageSettings.constructFromObject(data['about']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('hostedLocalStorefrontActive')) {
                obj['hostedLocalStorefrontActive'] = ApiClient.convertToType(data['hostedLocalStorefrontActive'], 'Boolean');
            }
            if (data.hasOwnProperty('inventory')) {
                obj['inventory'] = LiaInventorySettings.constructFromObject(data['inventory']);
            }
            if (data.hasOwnProperty('onDisplayToOrder')) {
                obj['onDisplayToOrder'] = LiaOnDisplayToOrderSettings.constructFromObject(data['onDisplayToOrder']);
            }
            if (data.hasOwnProperty('posDataProvider')) {
                obj['posDataProvider'] = LiaPosDataProvider.constructFromObject(data['posDataProvider']);
            }
            if (data.hasOwnProperty('storePickupActive')) {
                obj['storePickupActive'] = ApiClient.convertToType(data['storePickupActive'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiaCountrySettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiaCountrySettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `about`
        if (data['about']) { // data not null
          LiaAboutPageSettings.validateJSON(data['about']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // validate the optional field `inventory`
        if (data['inventory']) { // data not null
          LiaInventorySettings.validateJSON(data['inventory']);
        }
        // validate the optional field `onDisplayToOrder`
        if (data['onDisplayToOrder']) { // data not null
          LiaOnDisplayToOrderSettings.validateJSON(data['onDisplayToOrder']);
        }
        // validate the optional field `posDataProvider`
        if (data['posDataProvider']) { // data not null
          LiaPosDataProvider.validateJSON(data['posDataProvider']);
        }

        return true;
    }


}



/**
 * @member {module:model/LiaAboutPageSettings} about
 */
LiaCountrySettings.prototype['about'] = undefined;

/**
 * Required. CLDR country code (e.g. \"US\").
 * @member {String} country
 */
LiaCountrySettings.prototype['country'] = undefined;

/**
 * The status of the \"Merchant hosted local storefront\" feature.
 * @member {Boolean} hostedLocalStorefrontActive
 */
LiaCountrySettings.prototype['hostedLocalStorefrontActive'] = undefined;

/**
 * @member {module:model/LiaInventorySettings} inventory
 */
LiaCountrySettings.prototype['inventory'] = undefined;

/**
 * @member {module:model/LiaOnDisplayToOrderSettings} onDisplayToOrder
 */
LiaCountrySettings.prototype['onDisplayToOrder'] = undefined;

/**
 * @member {module:model/LiaPosDataProvider} posDataProvider
 */
LiaCountrySettings.prototype['posDataProvider'] = undefined;

/**
 * The status of the \"Store pickup\" feature.
 * @member {Boolean} storePickupActive
 */
LiaCountrySettings.prototype['storePickupActive'] = undefined;






export default LiaCountrySettings;

