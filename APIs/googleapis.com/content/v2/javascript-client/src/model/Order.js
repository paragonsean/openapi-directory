/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderCustomer from './OrderCustomer';
import OrderDeliveryDetails from './OrderDeliveryDetails';
import OrderLegacyPromotion from './OrderLegacyPromotion';
import OrderLineItem from './OrderLineItem';
import OrderPaymentMethod from './OrderPaymentMethod';
import OrderPickupDetails from './OrderPickupDetails';
import OrderRefund from './OrderRefund';
import OrderShipment from './OrderShipment';
import Price from './Price';

/**
 * The Order model module.
 * @module model/Order
 * @version v2
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * Order. Production access (all methods) requires the order manager role. Sandbox access does not.
     * @alias module:model/Order
     */
    constructor() { 
        
        Order.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('acknowledged')) {
                obj['acknowledged'] = ApiClient.convertToType(data['acknowledged'], 'Boolean');
            }
            if (data.hasOwnProperty('channelType')) {
                obj['channelType'] = ApiClient.convertToType(data['channelType'], 'String');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = OrderCustomer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('deliveryDetails')) {
                obj['deliveryDetails'] = OrderDeliveryDetails.constructFromObject(data['deliveryDetails']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('lineItems')) {
                obj['lineItems'] = ApiClient.convertToType(data['lineItems'], [OrderLineItem]);
            }
            if (data.hasOwnProperty('merchantId')) {
                obj['merchantId'] = ApiClient.convertToType(data['merchantId'], 'String');
            }
            if (data.hasOwnProperty('merchantOrderId')) {
                obj['merchantOrderId'] = ApiClient.convertToType(data['merchantOrderId'], 'String');
            }
            if (data.hasOwnProperty('netAmount')) {
                obj['netAmount'] = Price.constructFromObject(data['netAmount']);
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = OrderPaymentMethod.constructFromObject(data['paymentMethod']);
            }
            if (data.hasOwnProperty('paymentStatus')) {
                obj['paymentStatus'] = ApiClient.convertToType(data['paymentStatus'], 'String');
            }
            if (data.hasOwnProperty('pickupDetails')) {
                obj['pickupDetails'] = OrderPickupDetails.constructFromObject(data['pickupDetails']);
            }
            if (data.hasOwnProperty('placedDate')) {
                obj['placedDate'] = ApiClient.convertToType(data['placedDate'], 'String');
            }
            if (data.hasOwnProperty('promotions')) {
                obj['promotions'] = ApiClient.convertToType(data['promotions'], [OrderLegacyPromotion]);
            }
            if (data.hasOwnProperty('refunds')) {
                obj['refunds'] = ApiClient.convertToType(data['refunds'], [OrderRefund]);
            }
            if (data.hasOwnProperty('shipments')) {
                obj['shipments'] = ApiClient.convertToType(data['shipments'], [OrderShipment]);
            }
            if (data.hasOwnProperty('shippingCost')) {
                obj['shippingCost'] = Price.constructFromObject(data['shippingCost']);
            }
            if (data.hasOwnProperty('shippingCostTax')) {
                obj['shippingCostTax'] = Price.constructFromObject(data['shippingCostTax']);
            }
            if (data.hasOwnProperty('shippingOption')) {
                obj['shippingOption'] = ApiClient.convertToType(data['shippingOption'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('taxCollector')) {
                obj['taxCollector'] = ApiClient.convertToType(data['taxCollector'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Order</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Order</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channelType'] && !(typeof data['channelType'] === 'string' || data['channelType'] instanceof String)) {
            throw new Error("Expected the field `channelType` to be a primitive type in the JSON string but got " + data['channelType']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          OrderCustomer.validateJSON(data['customer']);
        }
        // validate the optional field `deliveryDetails`
        if (data['deliveryDetails']) { // data not null
          OrderDeliveryDetails.validateJSON(data['deliveryDetails']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['lineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineItems'])) {
                throw new Error("Expected the field `lineItems` to be an array in the JSON data but got " + data['lineItems']);
            }
            // validate the optional field `lineItems` (array)
            for (const item of data['lineItems']) {
                OrderLineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['merchantId'] && !(typeof data['merchantId'] === 'string' || data['merchantId'] instanceof String)) {
            throw new Error("Expected the field `merchantId` to be a primitive type in the JSON string but got " + data['merchantId']);
        }
        // ensure the json data is a string
        if (data['merchantOrderId'] && !(typeof data['merchantOrderId'] === 'string' || data['merchantOrderId'] instanceof String)) {
            throw new Error("Expected the field `merchantOrderId` to be a primitive type in the JSON string but got " + data['merchantOrderId']);
        }
        // validate the optional field `netAmount`
        if (data['netAmount']) { // data not null
          Price.validateJSON(data['netAmount']);
        }
        // validate the optional field `paymentMethod`
        if (data['paymentMethod']) { // data not null
          OrderPaymentMethod.validateJSON(data['paymentMethod']);
        }
        // ensure the json data is a string
        if (data['paymentStatus'] && !(typeof data['paymentStatus'] === 'string' || data['paymentStatus'] instanceof String)) {
            throw new Error("Expected the field `paymentStatus` to be a primitive type in the JSON string but got " + data['paymentStatus']);
        }
        // validate the optional field `pickupDetails`
        if (data['pickupDetails']) { // data not null
          OrderPickupDetails.validateJSON(data['pickupDetails']);
        }
        // ensure the json data is a string
        if (data['placedDate'] && !(typeof data['placedDate'] === 'string' || data['placedDate'] instanceof String)) {
            throw new Error("Expected the field `placedDate` to be a primitive type in the JSON string but got " + data['placedDate']);
        }
        if (data['promotions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['promotions'])) {
                throw new Error("Expected the field `promotions` to be an array in the JSON data but got " + data['promotions']);
            }
            // validate the optional field `promotions` (array)
            for (const item of data['promotions']) {
                OrderLegacyPromotion.validateJSON(item);
            };
        }
        if (data['refunds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refunds'])) {
                throw new Error("Expected the field `refunds` to be an array in the JSON data but got " + data['refunds']);
            }
            // validate the optional field `refunds` (array)
            for (const item of data['refunds']) {
                OrderRefund.validateJSON(item);
            };
        }
        if (data['shipments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shipments'])) {
                throw new Error("Expected the field `shipments` to be an array in the JSON data but got " + data['shipments']);
            }
            // validate the optional field `shipments` (array)
            for (const item of data['shipments']) {
                OrderShipment.validateJSON(item);
            };
        }
        // validate the optional field `shippingCost`
        if (data['shippingCost']) { // data not null
          Price.validateJSON(data['shippingCost']);
        }
        // validate the optional field `shippingCostTax`
        if (data['shippingCostTax']) { // data not null
          Price.validateJSON(data['shippingCostTax']);
        }
        // ensure the json data is a string
        if (data['shippingOption'] && !(typeof data['shippingOption'] === 'string' || data['shippingOption'] instanceof String)) {
            throw new Error("Expected the field `shippingOption` to be a primitive type in the JSON string but got " + data['shippingOption']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['taxCollector'] && !(typeof data['taxCollector'] === 'string' || data['taxCollector'] instanceof String)) {
            throw new Error("Expected the field `taxCollector` to be a primitive type in the JSON string but got " + data['taxCollector']);
        }

        return true;
    }


}



/**
 * Whether the order was acknowledged.
 * @member {Boolean} acknowledged
 */
Order.prototype['acknowledged'] = undefined;

/**
 * Deprecated. Acceptable values are: - \"`googleExpress`\" - \"`purchasesOnGoogle`\" 
 * @member {String} channelType
 */
Order.prototype['channelType'] = undefined;

/**
 * @member {module:model/OrderCustomer} customer
 */
Order.prototype['customer'] = undefined;

/**
 * @member {module:model/OrderDeliveryDetails} deliveryDetails
 */
Order.prototype['deliveryDetails'] = undefined;

/**
 * The REST ID of the order. Globally unique.
 * @member {String} id
 */
Order.prototype['id'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"`content#order`\"
 * @member {String} kind
 */
Order.prototype['kind'] = undefined;

/**
 * Line items that are ordered.
 * @member {Array.<module:model/OrderLineItem>} lineItems
 */
Order.prototype['lineItems'] = undefined;

/**
 * @member {String} merchantId
 */
Order.prototype['merchantId'] = undefined;

/**
 * Merchant-provided ID of the order.
 * @member {String} merchantOrderId
 */
Order.prototype['merchantOrderId'] = undefined;

/**
 * @member {module:model/Price} netAmount
 */
Order.prototype['netAmount'] = undefined;

/**
 * @member {module:model/OrderPaymentMethod} paymentMethod
 */
Order.prototype['paymentMethod'] = undefined;

/**
 * The status of the payment. Acceptable values are: - \"`paymentCaptured`\" - \"`paymentRejected`\" - \"`paymentSecured`\" - \"`pendingAuthorization`\" 
 * @member {String} paymentStatus
 */
Order.prototype['paymentStatus'] = undefined;

/**
 * @member {module:model/OrderPickupDetails} pickupDetails
 */
Order.prototype['pickupDetails'] = undefined;

/**
 * The date when the order was placed, in ISO 8601 format.
 * @member {String} placedDate
 */
Order.prototype['placedDate'] = undefined;

/**
 * The details of the merchant provided promotions applied to the order. To determine which promotions apply to which products, check the `Promotions[].Benefits[].OfferIds` field against the `LineItems[].Product.OfferId` field for each promotion. If a promotion is applied to more than 1 `offerId`, divide the discount value by the number of affected offers to determine how much discount to apply to each `offerId`. Examples: 1. To calculate the line item level discount for a single specific item: For each promotion, subtract the `Promotions[].Benefits[].Discount.value` amount from the `LineItems[].Price.value`. 2. To calculate the line item level discount for multiple quantity of a specific item: For each promotion, divide the `Promotions[].Benefits[].Discount.value` by the quantity of products and substract it from `LineItems[].Product.Price.value` for each quantity item. Only 1 promotion can be applied to an offerId in a given order. To refund an item which had a promotion applied to it, make sure to refund the amount after first subtracting the promotion discount from the item price. More details about the program are here.
 * @member {Array.<module:model/OrderLegacyPromotion>} promotions
 */
Order.prototype['promotions'] = undefined;

/**
 * Refunds for the order.
 * @member {Array.<module:model/OrderRefund>} refunds
 */
Order.prototype['refunds'] = undefined;

/**
 * Shipments of the order.
 * @member {Array.<module:model/OrderShipment>} shipments
 */
Order.prototype['shipments'] = undefined;

/**
 * @member {module:model/Price} shippingCost
 */
Order.prototype['shippingCost'] = undefined;

/**
 * @member {module:model/Price} shippingCostTax
 */
Order.prototype['shippingCostTax'] = undefined;

/**
 * Deprecated. Shipping details are provided with line items instead. Acceptable values are: - \"`economy`\" - \"`expedited`\" - \"`oneDay`\" - \"`sameDay`\" - \"`standard`\" - \"`twoDay`\" 
 * @member {String} shippingOption
 */
Order.prototype['shippingOption'] = undefined;

/**
 * The status of the order. Acceptable values are: - \"`canceled`\" - \"`delivered`\" - \"`inProgress`\" - \"`partiallyDelivered`\" - \"`partiallyReturned`\" - \"`partiallyShipped`\" - \"`pendingShipment`\" - \"`returned`\" - \"`shipped`\" 
 * @member {String} status
 */
Order.prototype['status'] = undefined;

/**
 * The party responsible for collecting and remitting taxes. Acceptable values are: - \"`marketplaceFacilitator`\" - \"`merchant`\" 
 * @member {String} taxCollector
 */
Order.prototype['taxCollector'] = undefined;






export default Order;

