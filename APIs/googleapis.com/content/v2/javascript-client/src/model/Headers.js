/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocationIdSet from './LocationIdSet';
import Price from './Price';
import Weight from './Weight';

/**
 * The Headers model module.
 * @module model/Headers
 * @version v2
 */
class Headers {
    /**
     * Constructs a new <code>Headers</code>.
     * A non-empty list of row or column headers for a table. Exactly one of &#x60;prices&#x60;, &#x60;weights&#x60;, &#x60;numItems&#x60;, &#x60;postalCodeGroupNames&#x60;, or &#x60;location&#x60; must be set.
     * @alias module:model/Headers
     */
    constructor() { 
        
        Headers.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Headers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Headers} obj Optional instance to populate.
     * @return {module:model/Headers} The populated <code>Headers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Headers();

            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [LocationIdSet]);
            }
            if (data.hasOwnProperty('numberOfItems')) {
                obj['numberOfItems'] = ApiClient.convertToType(data['numberOfItems'], ['String']);
            }
            if (data.hasOwnProperty('postalCodeGroupNames')) {
                obj['postalCodeGroupNames'] = ApiClient.convertToType(data['postalCodeGroupNames'], ['String']);
            }
            if (data.hasOwnProperty('prices')) {
                obj['prices'] = ApiClient.convertToType(data['prices'], [Price]);
            }
            if (data.hasOwnProperty('weights')) {
                obj['weights'] = ApiClient.convertToType(data['weights'], [Weight]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Headers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Headers</code>.
     */
    static validateJSON(data) {
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                LocationIdSet.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['numberOfItems'])) {
            throw new Error("Expected the field `numberOfItems` to be an array in the JSON data but got " + data['numberOfItems']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['postalCodeGroupNames'])) {
            throw new Error("Expected the field `postalCodeGroupNames` to be an array in the JSON data but got " + data['postalCodeGroupNames']);
        }
        if (data['prices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['prices'])) {
                throw new Error("Expected the field `prices` to be an array in the JSON data but got " + data['prices']);
            }
            // validate the optional field `prices` (array)
            for (const item of data['prices']) {
                Price.validateJSON(item);
            };
        }
        if (data['weights']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['weights'])) {
                throw new Error("Expected the field `weights` to be an array in the JSON data but got " + data['weights']);
            }
            // validate the optional field `weights` (array)
            for (const item of data['weights']) {
                Weight.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A list of location ID sets. Must be non-empty. Can only be set if all other fields are not set.
 * @member {Array.<module:model/LocationIdSet>} locations
 */
Headers.prototype['locations'] = undefined;

/**
 * A list of inclusive number of items upper bounds. The last value can be `\"infinity\"`. For example `[\"10\", \"50\", \"infinity\"]` represents the headers \"<= 10 items\", \"<= 50 items\", and \"> 50 items\". Must be non-empty. Can only be set if all other fields are not set.
 * @member {Array.<String>} numberOfItems
 */
Headers.prototype['numberOfItems'] = undefined;

/**
 * A list of postal group names. The last value can be `\"all other locations\"`. Example: `[\"zone 1\", \"zone 2\", \"all other locations\"]`. The referred postal code groups must match the delivery country of the service. Must be non-empty. Can only be set if all other fields are not set.
 * @member {Array.<String>} postalCodeGroupNames
 */
Headers.prototype['postalCodeGroupNames'] = undefined;

/**
 * A list of inclusive order price upper bounds. The last price's value can be `\"infinity\"`. For example `[{\"value\": \"10\", \"currency\": \"USD\"}, {\"value\": \"500\", \"currency\": \"USD\"}, {\"value\": \"infinity\", \"currency\": \"USD\"}]` represents the headers \"<= $10\", \"<= $500\", and \"> $500\". All prices within a service must have the same currency. Must be non-empty. Can only be set if all other fields are not set.
 * @member {Array.<module:model/Price>} prices
 */
Headers.prototype['prices'] = undefined;

/**
 * A list of inclusive order weight upper bounds. The last weight's value can be `\"infinity\"`. For example `[{\"value\": \"10\", \"unit\": \"kg\"}, {\"value\": \"50\", \"unit\": \"kg\"}, {\"value\": \"infinity\", \"unit\": \"kg\"}]` represents the headers \"<= 10kg\", \"<= 50kg\", and \"> 50kg\". All weights within a service must have the same unit. Must be non-empty. Can only be set if all other fields are not set.
 * @member {Array.<module:model/Weight>} weights
 */
Headers.prototype['weights'] = undefined;






export default Headers;

