/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderLineItemProductFee from './OrderLineItemProductFee';
import OrderLineItemProductVariantAttribute from './OrderLineItemProductVariantAttribute';
import Price from './Price';

/**
 * The OrderLineItemProduct model module.
 * @module model/OrderLineItemProduct
 * @version v2
 */
class OrderLineItemProduct {
    /**
     * Constructs a new <code>OrderLineItemProduct</code>.
     * @alias module:model/OrderLineItemProduct
     */
    constructor() { 
        
        OrderLineItemProduct.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderLineItemProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderLineItemProduct} obj Optional instance to populate.
     * @return {module:model/OrderLineItemProduct} The populated <code>OrderLineItemProduct</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderLineItemProduct();

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], 'String');
            }
            if (data.hasOwnProperty('contentLanguage')) {
                obj['contentLanguage'] = ApiClient.convertToType(data['contentLanguage'], 'String');
            }
            if (data.hasOwnProperty('fees')) {
                obj['fees'] = ApiClient.convertToType(data['fees'], [OrderLineItemProductFee]);
            }
            if (data.hasOwnProperty('gtin')) {
                obj['gtin'] = ApiClient.convertToType(data['gtin'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('imageLink')) {
                obj['imageLink'] = ApiClient.convertToType(data['imageLink'], 'String');
            }
            if (data.hasOwnProperty('itemGroupId')) {
                obj['itemGroupId'] = ApiClient.convertToType(data['itemGroupId'], 'String');
            }
            if (data.hasOwnProperty('mpn')) {
                obj['mpn'] = ApiClient.convertToType(data['mpn'], 'String');
            }
            if (data.hasOwnProperty('offerId')) {
                obj['offerId'] = ApiClient.convertToType(data['offerId'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Price.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('shownImage')) {
                obj['shownImage'] = ApiClient.convertToType(data['shownImage'], 'String');
            }
            if (data.hasOwnProperty('targetCountry')) {
                obj['targetCountry'] = ApiClient.convertToType(data['targetCountry'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('variantAttributes')) {
                obj['variantAttributes'] = ApiClient.convertToType(data['variantAttributes'], [OrderLineItemProductVariantAttribute]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderLineItemProduct</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderLineItemProduct</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['condition'] && !(typeof data['condition'] === 'string' || data['condition'] instanceof String)) {
            throw new Error("Expected the field `condition` to be a primitive type in the JSON string but got " + data['condition']);
        }
        // ensure the json data is a string
        if (data['contentLanguage'] && !(typeof data['contentLanguage'] === 'string' || data['contentLanguage'] instanceof String)) {
            throw new Error("Expected the field `contentLanguage` to be a primitive type in the JSON string but got " + data['contentLanguage']);
        }
        if (data['fees']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fees'])) {
                throw new Error("Expected the field `fees` to be an array in the JSON data but got " + data['fees']);
            }
            // validate the optional field `fees` (array)
            for (const item of data['fees']) {
                OrderLineItemProductFee.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['gtin'] && !(typeof data['gtin'] === 'string' || data['gtin'] instanceof String)) {
            throw new Error("Expected the field `gtin` to be a primitive type in the JSON string but got " + data['gtin']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['imageLink'] && !(typeof data['imageLink'] === 'string' || data['imageLink'] instanceof String)) {
            throw new Error("Expected the field `imageLink` to be a primitive type in the JSON string but got " + data['imageLink']);
        }
        // ensure the json data is a string
        if (data['itemGroupId'] && !(typeof data['itemGroupId'] === 'string' || data['itemGroupId'] instanceof String)) {
            throw new Error("Expected the field `itemGroupId` to be a primitive type in the JSON string but got " + data['itemGroupId']);
        }
        // ensure the json data is a string
        if (data['mpn'] && !(typeof data['mpn'] === 'string' || data['mpn'] instanceof String)) {
            throw new Error("Expected the field `mpn` to be a primitive type in the JSON string but got " + data['mpn']);
        }
        // ensure the json data is a string
        if (data['offerId'] && !(typeof data['offerId'] === 'string' || data['offerId'] instanceof String)) {
            throw new Error("Expected the field `offerId` to be a primitive type in the JSON string but got " + data['offerId']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Price.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['shownImage'] && !(typeof data['shownImage'] === 'string' || data['shownImage'] instanceof String)) {
            throw new Error("Expected the field `shownImage` to be a primitive type in the JSON string but got " + data['shownImage']);
        }
        // ensure the json data is a string
        if (data['targetCountry'] && !(typeof data['targetCountry'] === 'string' || data['targetCountry'] instanceof String)) {
            throw new Error("Expected the field `targetCountry` to be a primitive type in the JSON string but got " + data['targetCountry']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        if (data['variantAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variantAttributes'])) {
                throw new Error("Expected the field `variantAttributes` to be an array in the JSON data but got " + data['variantAttributes']);
            }
            // validate the optional field `variantAttributes` (array)
            for (const item of data['variantAttributes']) {
                OrderLineItemProductVariantAttribute.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Brand of the item.
 * @member {String} brand
 */
OrderLineItemProduct.prototype['brand'] = undefined;

/**
 * The item's channel (online or local). Acceptable values are: - \"`local`\" - \"`online`\" 
 * @member {String} channel
 */
OrderLineItemProduct.prototype['channel'] = undefined;

/**
 * Condition or state of the item. Acceptable values are: - \"`new`\" - \"`refurbished`\" - \"`used`\" 
 * @member {String} condition
 */
OrderLineItemProduct.prototype['condition'] = undefined;

/**
 * The two-letter ISO 639-1 language code for the item.
 * @member {String} contentLanguage
 */
OrderLineItemProduct.prototype['contentLanguage'] = undefined;

/**
 * Associated fees at order creation time.
 * @member {Array.<module:model/OrderLineItemProductFee>} fees
 */
OrderLineItemProduct.prototype['fees'] = undefined;

/**
 * Global Trade Item Number (GTIN) of the item.
 * @member {String} gtin
 */
OrderLineItemProduct.prototype['gtin'] = undefined;

/**
 * The REST ID of the product.
 * @member {String} id
 */
OrderLineItemProduct.prototype['id'] = undefined;

/**
 * URL of an image of the item.
 * @member {String} imageLink
 */
OrderLineItemProduct.prototype['imageLink'] = undefined;

/**
 * Shared identifier for all variants of the same product.
 * @member {String} itemGroupId
 */
OrderLineItemProduct.prototype['itemGroupId'] = undefined;

/**
 * Manufacturer Part Number (MPN) of the item.
 * @member {String} mpn
 */
OrderLineItemProduct.prototype['mpn'] = undefined;

/**
 * An identifier of the item.
 * @member {String} offerId
 */
OrderLineItemProduct.prototype['offerId'] = undefined;

/**
 * @member {module:model/Price} price
 */
OrderLineItemProduct.prototype['price'] = undefined;

/**
 * URL to the cached image shown to the user when order was placed.
 * @member {String} shownImage
 */
OrderLineItemProduct.prototype['shownImage'] = undefined;

/**
 * The CLDR territory // code of the target country of the product.
 * @member {String} targetCountry
 */
OrderLineItemProduct.prototype['targetCountry'] = undefined;

/**
 * The title of the product.
 * @member {String} title
 */
OrderLineItemProduct.prototype['title'] = undefined;

/**
 * Variant attributes for the item. These are dimensions of the product, such as color, gender, material, pattern, and size. You can find a comprehensive list of variant attributes here.
 * @member {Array.<module:model/OrderLineItemProductVariantAttribute>} variantAttributes
 */
OrderLineItemProduct.prototype['variantAttributes'] = undefined;






export default OrderLineItemProduct;

