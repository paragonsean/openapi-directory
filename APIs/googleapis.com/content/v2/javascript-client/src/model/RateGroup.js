/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CarrierRate from './CarrierRate';
import Table from './Table';
import Value from './Value';

/**
 * The RateGroup model module.
 * @module model/RateGroup
 * @version v2
 */
class RateGroup {
    /**
     * Constructs a new <code>RateGroup</code>.
     * @alias module:model/RateGroup
     */
    constructor() { 
        
        RateGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RateGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RateGroup} obj Optional instance to populate.
     * @return {module:model/RateGroup} The populated <code>RateGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RateGroup();

            if (data.hasOwnProperty('applicableShippingLabels')) {
                obj['applicableShippingLabels'] = ApiClient.convertToType(data['applicableShippingLabels'], ['String']);
            }
            if (data.hasOwnProperty('carrierRates')) {
                obj['carrierRates'] = ApiClient.convertToType(data['carrierRates'], [CarrierRate]);
            }
            if (data.hasOwnProperty('mainTable')) {
                obj['mainTable'] = Table.constructFromObject(data['mainTable']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('singleValue')) {
                obj['singleValue'] = Value.constructFromObject(data['singleValue']);
            }
            if (data.hasOwnProperty('subtables')) {
                obj['subtables'] = ApiClient.convertToType(data['subtables'], [Table]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RateGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RateGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['applicableShippingLabels'])) {
            throw new Error("Expected the field `applicableShippingLabels` to be an array in the JSON data but got " + data['applicableShippingLabels']);
        }
        if (data['carrierRates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['carrierRates'])) {
                throw new Error("Expected the field `carrierRates` to be an array in the JSON data but got " + data['carrierRates']);
            }
            // validate the optional field `carrierRates` (array)
            for (const item of data['carrierRates']) {
                CarrierRate.validateJSON(item);
            };
        }
        // validate the optional field `mainTable`
        if (data['mainTable']) { // data not null
          Table.validateJSON(data['mainTable']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `singleValue`
        if (data['singleValue']) { // data not null
          Value.validateJSON(data['singleValue']);
        }
        if (data['subtables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subtables'])) {
                throw new Error("Expected the field `subtables` to be an array in the JSON data but got " + data['subtables']);
            }
            // validate the optional field `subtables` (array)
            for (const item of data['subtables']) {
                Table.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A list of shipping labels defining the products to which this rate group applies to. This is a disjunction: only one of the labels has to match for the rate group to apply. May only be empty for the last rate group of a service. Required.
 * @member {Array.<String>} applicableShippingLabels
 */
RateGroup.prototype['applicableShippingLabels'] = undefined;

/**
 * A list of carrier rates that can be referred to by `mainTable` or `singleValue`.
 * @member {Array.<module:model/CarrierRate>} carrierRates
 */
RateGroup.prototype['carrierRates'] = undefined;

/**
 * @member {module:model/Table} mainTable
 */
RateGroup.prototype['mainTable'] = undefined;

/**
 * Name of the rate group. Optional. If set has to be unique within shipping service.
 * @member {String} name
 */
RateGroup.prototype['name'] = undefined;

/**
 * @member {module:model/Value} singleValue
 */
RateGroup.prototype['singleValue'] = undefined;

/**
 * A list of subtables referred to by `mainTable`. Can only be set if `mainTable` is set.
 * @member {Array.<module:model/Table>} subtables
 */
RateGroup.prototype['subtables'] = undefined;






export default RateGroup;

