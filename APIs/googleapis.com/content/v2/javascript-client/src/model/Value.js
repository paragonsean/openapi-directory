/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';

/**
 * The Value model module.
 * @module model/Value
 * @version v2
 */
class Value {
    /**
     * Constructs a new <code>Value</code>.
     * The single value of a rate group or the value of a rate group table&#39;s cell. Exactly one of &#x60;noShipping&#x60;, &#x60;flatRate&#x60;, &#x60;pricePercentage&#x60;, &#x60;carrierRateName&#x60;, &#x60;subtableName&#x60; must be set.
     * @alias module:model/Value
     */
    constructor() { 
        
        Value.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Value</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Value} obj Optional instance to populate.
     * @return {module:model/Value} The populated <code>Value</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Value();

            if (data.hasOwnProperty('carrierRateName')) {
                obj['carrierRateName'] = ApiClient.convertToType(data['carrierRateName'], 'String');
            }
            if (data.hasOwnProperty('flatRate')) {
                obj['flatRate'] = Price.constructFromObject(data['flatRate']);
            }
            if (data.hasOwnProperty('noShipping')) {
                obj['noShipping'] = ApiClient.convertToType(data['noShipping'], 'Boolean');
            }
            if (data.hasOwnProperty('pricePercentage')) {
                obj['pricePercentage'] = ApiClient.convertToType(data['pricePercentage'], 'String');
            }
            if (data.hasOwnProperty('subtableName')) {
                obj['subtableName'] = ApiClient.convertToType(data['subtableName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Value</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Value</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['carrierRateName'] && !(typeof data['carrierRateName'] === 'string' || data['carrierRateName'] instanceof String)) {
            throw new Error("Expected the field `carrierRateName` to be a primitive type in the JSON string but got " + data['carrierRateName']);
        }
        // validate the optional field `flatRate`
        if (data['flatRate']) { // data not null
          Price.validateJSON(data['flatRate']);
        }
        // ensure the json data is a string
        if (data['pricePercentage'] && !(typeof data['pricePercentage'] === 'string' || data['pricePercentage'] instanceof String)) {
            throw new Error("Expected the field `pricePercentage` to be a primitive type in the JSON string but got " + data['pricePercentage']);
        }
        // ensure the json data is a string
        if (data['subtableName'] && !(typeof data['subtableName'] === 'string' || data['subtableName'] instanceof String)) {
            throw new Error("Expected the field `subtableName` to be a primitive type in the JSON string but got " + data['subtableName']);
        }

        return true;
    }


}



/**
 * The name of a carrier rate referring to a carrier rate defined in the same rate group. Can only be set if all other fields are not set.
 * @member {String} carrierRateName
 */
Value.prototype['carrierRateName'] = undefined;

/**
 * @member {module:model/Price} flatRate
 */
Value.prototype['flatRate'] = undefined;

/**
 * If true, then the product can't ship. Must be true when set, can only be set if all other fields are not set.
 * @member {Boolean} noShipping
 */
Value.prototype['noShipping'] = undefined;

/**
 * A percentage of the price represented as a number in decimal notation (e.g., `\"5.4\"`). Can only be set if all other fields are not set.
 * @member {String} pricePercentage
 */
Value.prototype['pricePercentage'] = undefined;

/**
 * The name of a subtable. Can only be set in table cells (i.e., not for single values), and only if all other fields are not set.
 * @member {String} subtableName
 */
Value.prototype['subtableName'] = undefined;






export default Value;

