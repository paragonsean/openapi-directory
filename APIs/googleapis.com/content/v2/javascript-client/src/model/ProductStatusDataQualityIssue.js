/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductStatusDataQualityIssue model module.
 * @module model/ProductStatusDataQualityIssue
 * @version v2
 */
class ProductStatusDataQualityIssue {
    /**
     * Constructs a new <code>ProductStatusDataQualityIssue</code>.
     * @alias module:model/ProductStatusDataQualityIssue
     */
    constructor() { 
        
        ProductStatusDataQualityIssue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductStatusDataQualityIssue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductStatusDataQualityIssue} obj Optional instance to populate.
     * @return {module:model/ProductStatusDataQualityIssue} The populated <code>ProductStatusDataQualityIssue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductStatusDataQualityIssue();

            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'String');
            }
            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('fetchStatus')) {
                obj['fetchStatus'] = ApiClient.convertToType(data['fetchStatus'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('valueOnLandingPage')) {
                obj['valueOnLandingPage'] = ApiClient.convertToType(data['valueOnLandingPage'], 'String');
            }
            if (data.hasOwnProperty('valueProvided')) {
                obj['valueProvided'] = ApiClient.convertToType(data['valueProvided'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductStatusDataQualityIssue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductStatusDataQualityIssue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['destination'] && !(typeof data['destination'] === 'string' || data['destination'] instanceof String)) {
            throw new Error("Expected the field `destination` to be a primitive type in the JSON string but got " + data['destination']);
        }
        // ensure the json data is a string
        if (data['detail'] && !(typeof data['detail'] === 'string' || data['detail'] instanceof String)) {
            throw new Error("Expected the field `detail` to be a primitive type in the JSON string but got " + data['detail']);
        }
        // ensure the json data is a string
        if (data['fetchStatus'] && !(typeof data['fetchStatus'] === 'string' || data['fetchStatus'] instanceof String)) {
            throw new Error("Expected the field `fetchStatus` to be a primitive type in the JSON string but got " + data['fetchStatus']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['valueOnLandingPage'] && !(typeof data['valueOnLandingPage'] === 'string' || data['valueOnLandingPage'] instanceof String)) {
            throw new Error("Expected the field `valueOnLandingPage` to be a primitive type in the JSON string but got " + data['valueOnLandingPage']);
        }
        // ensure the json data is a string
        if (data['valueProvided'] && !(typeof data['valueProvided'] === 'string' || data['valueProvided'] instanceof String)) {
            throw new Error("Expected the field `valueProvided` to be a primitive type in the JSON string but got " + data['valueProvided']);
        }

        return true;
    }


}



/**
 * @member {String} destination
 */
ProductStatusDataQualityIssue.prototype['destination'] = undefined;

/**
 * @member {String} detail
 */
ProductStatusDataQualityIssue.prototype['detail'] = undefined;

/**
 * @member {String} fetchStatus
 */
ProductStatusDataQualityIssue.prototype['fetchStatus'] = undefined;

/**
 * @member {String} id
 */
ProductStatusDataQualityIssue.prototype['id'] = undefined;

/**
 * @member {String} location
 */
ProductStatusDataQualityIssue.prototype['location'] = undefined;

/**
 * @member {String} severity
 */
ProductStatusDataQualityIssue.prototype['severity'] = undefined;

/**
 * @member {String} timestamp
 */
ProductStatusDataQualityIssue.prototype['timestamp'] = undefined;

/**
 * @member {String} valueOnLandingPage
 */
ProductStatusDataQualityIssue.prototype['valueOnLandingPage'] = undefined;

/**
 * @member {String} valueProvided
 */
ProductStatusDataQualityIssue.prototype['valueProvided'] = undefined;






export default ProductStatusDataQualityIssue;

