/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderCancellation from './OrderCancellation';
import OrderLineItemProduct from './OrderLineItemProduct';
import OrderLineItemReturnInfo from './OrderLineItemReturnInfo';
import OrderLineItemShippingDetails from './OrderLineItemShippingDetails';
import OrderMerchantProvidedAnnotation from './OrderMerchantProvidedAnnotation';
import OrderReturn from './OrderReturn';
import Price from './Price';

/**
 * The OrderLineItem model module.
 * @module model/OrderLineItem
 * @version v2
 */
class OrderLineItem {
    /**
     * Constructs a new <code>OrderLineItem</code>.
     * @alias module:model/OrderLineItem
     */
    constructor() { 
        
        OrderLineItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderLineItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderLineItem} obj Optional instance to populate.
     * @return {module:model/OrderLineItem} The populated <code>OrderLineItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderLineItem();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], [OrderMerchantProvidedAnnotation]);
            }
            if (data.hasOwnProperty('cancellations')) {
                obj['cancellations'] = ApiClient.convertToType(data['cancellations'], [OrderCancellation]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Price.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = OrderLineItemProduct.constructFromObject(data['product']);
            }
            if (data.hasOwnProperty('quantityCanceled')) {
                obj['quantityCanceled'] = ApiClient.convertToType(data['quantityCanceled'], 'Number');
            }
            if (data.hasOwnProperty('quantityDelivered')) {
                obj['quantityDelivered'] = ApiClient.convertToType(data['quantityDelivered'], 'Number');
            }
            if (data.hasOwnProperty('quantityOrdered')) {
                obj['quantityOrdered'] = ApiClient.convertToType(data['quantityOrdered'], 'Number');
            }
            if (data.hasOwnProperty('quantityPending')) {
                obj['quantityPending'] = ApiClient.convertToType(data['quantityPending'], 'Number');
            }
            if (data.hasOwnProperty('quantityReadyForPickup')) {
                obj['quantityReadyForPickup'] = ApiClient.convertToType(data['quantityReadyForPickup'], 'Number');
            }
            if (data.hasOwnProperty('quantityReturned')) {
                obj['quantityReturned'] = ApiClient.convertToType(data['quantityReturned'], 'Number');
            }
            if (data.hasOwnProperty('quantityShipped')) {
                obj['quantityShipped'] = ApiClient.convertToType(data['quantityShipped'], 'Number');
            }
            if (data.hasOwnProperty('returnInfo')) {
                obj['returnInfo'] = OrderLineItemReturnInfo.constructFromObject(data['returnInfo']);
            }
            if (data.hasOwnProperty('returns')) {
                obj['returns'] = ApiClient.convertToType(data['returns'], [OrderReturn]);
            }
            if (data.hasOwnProperty('shippingDetails')) {
                obj['shippingDetails'] = OrderLineItemShippingDetails.constructFromObject(data['shippingDetails']);
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = Price.constructFromObject(data['tax']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderLineItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderLineItem</code>.
     */
    static validateJSON(data) {
        if (data['annotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['annotations'])) {
                throw new Error("Expected the field `annotations` to be an array in the JSON data but got " + data['annotations']);
            }
            // validate the optional field `annotations` (array)
            for (const item of data['annotations']) {
                OrderMerchantProvidedAnnotation.validateJSON(item);
            };
        }
        if (data['cancellations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cancellations'])) {
                throw new Error("Expected the field `cancellations` to be an array in the JSON data but got " + data['cancellations']);
            }
            // validate the optional field `cancellations` (array)
            for (const item of data['cancellations']) {
                OrderCancellation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Price.validateJSON(data['price']);
        }
        // validate the optional field `product`
        if (data['product']) { // data not null
          OrderLineItemProduct.validateJSON(data['product']);
        }
        // validate the optional field `returnInfo`
        if (data['returnInfo']) { // data not null
          OrderLineItemReturnInfo.validateJSON(data['returnInfo']);
        }
        if (data['returns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['returns'])) {
                throw new Error("Expected the field `returns` to be an array in the JSON data but got " + data['returns']);
            }
            // validate the optional field `returns` (array)
            for (const item of data['returns']) {
                OrderReturn.validateJSON(item);
            };
        }
        // validate the optional field `shippingDetails`
        if (data['shippingDetails']) { // data not null
          OrderLineItemShippingDetails.validateJSON(data['shippingDetails']);
        }
        // validate the optional field `tax`
        if (data['tax']) { // data not null
          Price.validateJSON(data['tax']);
        }

        return true;
    }


}



/**
 * Annotations that are attached to the line item.
 * @member {Array.<module:model/OrderMerchantProvidedAnnotation>} annotations
 */
OrderLineItem.prototype['annotations'] = undefined;

/**
 * Cancellations of the line item.
 * @member {Array.<module:model/OrderCancellation>} cancellations
 */
OrderLineItem.prototype['cancellations'] = undefined;

/**
 * The ID of the line item.
 * @member {String} id
 */
OrderLineItem.prototype['id'] = undefined;

/**
 * @member {module:model/Price} price
 */
OrderLineItem.prototype['price'] = undefined;

/**
 * @member {module:model/OrderLineItemProduct} product
 */
OrderLineItem.prototype['product'] = undefined;

/**
 * Number of items canceled.
 * @member {Number} quantityCanceled
 */
OrderLineItem.prototype['quantityCanceled'] = undefined;

/**
 * Number of items delivered.
 * @member {Number} quantityDelivered
 */
OrderLineItem.prototype['quantityDelivered'] = undefined;

/**
 * Number of items ordered.
 * @member {Number} quantityOrdered
 */
OrderLineItem.prototype['quantityOrdered'] = undefined;

/**
 * Number of items pending.
 * @member {Number} quantityPending
 */
OrderLineItem.prototype['quantityPending'] = undefined;

/**
 * Number of items ready for pickup.
 * @member {Number} quantityReadyForPickup
 */
OrderLineItem.prototype['quantityReadyForPickup'] = undefined;

/**
 * Number of items returned.
 * @member {Number} quantityReturned
 */
OrderLineItem.prototype['quantityReturned'] = undefined;

/**
 * Number of items shipped.
 * @member {Number} quantityShipped
 */
OrderLineItem.prototype['quantityShipped'] = undefined;

/**
 * @member {module:model/OrderLineItemReturnInfo} returnInfo
 */
OrderLineItem.prototype['returnInfo'] = undefined;

/**
 * Returns of the line item.
 * @member {Array.<module:model/OrderReturn>} returns
 */
OrderLineItem.prototype['returns'] = undefined;

/**
 * @member {module:model/OrderLineItemShippingDetails} shippingDetails
 */
OrderLineItem.prototype['shippingDetails'] = undefined;

/**
 * @member {module:model/Price} tax
 */
OrderLineItem.prototype['tax'] = undefined;






export default OrderLineItem;

