/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.AccountsAuthInfoResponse;
import org.openapitools.client.model.AccountsClaimWebsiteResponse;
import org.openapitools.client.model.AccountsCustomBatchRequest;
import org.openapitools.client.model.AccountsCustomBatchResponse;
import org.openapitools.client.model.AccountsLinkRequest;
import org.openapitools.client.model.AccountsLinkResponse;
import org.openapitools.client.model.AccountsListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Returns information about the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsAuthinfoTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccountsAuthInfoResponse response = api.contentAccountsAuthinfo($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Claims the website of a Merchant Center sub-account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsClaimwebsiteTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean overwrite = null;
        AccountsClaimWebsiteResponse response = api.contentAccountsClaimwebsite(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, overwrite);
        // TODO: test validations
    }

    /**
     * Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsCustombatchTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        AccountsCustomBatchRequest accountsCustomBatchRequest = null;
        AccountsCustomBatchResponse response = api.contentAccountsCustombatch($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, accountsCustomBatchRequest);
        // TODO: test validations
    }

    /**
     * Deletes a Merchant Center sub-account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsDeleteTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        Boolean force = null;
        api.contentAccountsDelete(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, force);
        // TODO: test validations
    }

    /**
     * Retrieves a Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsGetTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Account response = api.contentAccountsGet(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a Merchant Center sub-account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsInsertTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        Account account = null;
        Account response = api.contentAccountsInsert(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, account);
        // TODO: test validations
    }

    /**
     * Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsLinkTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccountsLinkRequest accountsLinkRequest = null;
        AccountsLinkResponse response = api.contentAccountsLink(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accountsLinkRequest);
        // TODO: test validations
    }

    /**
     * Lists the sub-accounts in your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsListTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        AccountsListResponse response = api.contentAccountsList(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a Merchant Center account. Any fields that are not provided are deleted from the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentAccountsUpdateTest() throws ApiException {
        String merchantId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        Account account = null;
        Account response = api.contentAccountsUpdate(merchantId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, account);
        // TODO: test validations
    }

}
