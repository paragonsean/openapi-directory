/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PosCustomBatchRequest;
import org.openapitools.client.model.PosCustomBatchResponse;
import org.openapitools.client.model.PosInventoryRequest;
import org.openapitools.client.model.PosInventoryResponse;
import org.openapitools.client.model.PosListResponse;
import org.openapitools.client.model.PosSaleRequest;
import org.openapitools.client.model.PosSaleResponse;
import org.openapitools.client.model.PosStore;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PosApi
 */
@Disabled
public class PosApiTest {

    private final PosApi api = new PosApi();

    /**
     * Batches multiple POS-related calls in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentPosCustombatchTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        PosCustomBatchRequest posCustomBatchRequest = null;
        PosCustomBatchResponse response = api.contentPosCustombatch($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, posCustomBatchRequest);
        // TODO: test validations
    }

    /**
     * Deletes a store for the given merchant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentPosDeleteTest() throws ApiException {
        String merchantId = null;
        String targetMerchantId = null;
        String storeCode = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        api.contentPosDelete(merchantId, targetMerchantId, storeCode, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun);
        // TODO: test validations
    }

    /**
     * Retrieves information about the given store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentPosGetTest() throws ApiException {
        String merchantId = null;
        String targetMerchantId = null;
        String storeCode = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PosStore response = api.contentPosGet(merchantId, targetMerchantId, storeCode, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a store for the given merchant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentPosInsertTest() throws ApiException {
        String merchantId = null;
        String targetMerchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        PosStore posStore = null;
        PosStore response = api.contentPosInsert(merchantId, targetMerchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, posStore);
        // TODO: test validations
    }

    /**
     * Submit inventory for the given merchant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentPosInventoryTest() throws ApiException {
        String merchantId = null;
        String targetMerchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        PosInventoryRequest posInventoryRequest = null;
        PosInventoryResponse response = api.contentPosInventory(merchantId, targetMerchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, posInventoryRequest);
        // TODO: test validations
    }

    /**
     * Lists the stores of the target merchant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentPosListTest() throws ApiException {
        String merchantId = null;
        String targetMerchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PosListResponse response = api.contentPosList(merchantId, targetMerchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Submit a sale event for the given merchant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentPosSaleTest() throws ApiException {
        String merchantId = null;
        String targetMerchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        PosSaleRequest posSaleRequest = null;
        PosSaleResponse response = api.contentPosSale(merchantId, targetMerchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, posSaleRequest);
        // TODO: test validations
    }

}
