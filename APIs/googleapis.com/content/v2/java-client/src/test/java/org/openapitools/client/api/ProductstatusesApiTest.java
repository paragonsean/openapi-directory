/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProductStatus;
import org.openapitools.client.model.ProductstatusesCustomBatchRequest;
import org.openapitools.client.model.ProductstatusesCustomBatchResponse;
import org.openapitools.client.model.ProductstatusesListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductstatusesApi
 */
@Disabled
public class ProductstatusesApiTest {

    private final ProductstatusesApi api = new ProductstatusesApi();

    /**
     * Gets the statuses of multiple products in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentProductstatusesCustombatchTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeAttributes = null;
        ProductstatusesCustomBatchRequest productstatusesCustomBatchRequest = null;
        ProductstatusesCustomBatchResponse response = api.contentProductstatusesCustombatch($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeAttributes, productstatusesCustomBatchRequest);
        // TODO: test validations
    }

    /**
     * Gets the status of a product from your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentProductstatusesGetTest() throws ApiException {
        String merchantId = null;
        String productId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> destinations = null;
        Boolean includeAttributes = null;
        ProductStatus response = api.contentProductstatusesGet(merchantId, productId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, destinations, includeAttributes);
        // TODO: test validations
    }

    /**
     * Lists the statuses of the products in your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentProductstatusesListTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> destinations = null;
        Boolean includeAttributes = null;
        Boolean includeInvalidInsertedItems = null;
        Integer maxResults = null;
        String pageToken = null;
        ProductstatusesListResponse response = api.contentProductstatusesList(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, destinations, includeAttributes, includeInvalidInsertedItems, maxResults, pageToken);
        // TODO: test validations
    }

}
