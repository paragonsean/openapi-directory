/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductsCustomBatchRequest;
import org.openapitools.client.model.ProductsCustomBatchResponse;
import org.openapitools.client.model.ProductsListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Disabled
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Retrieves, inserts, and deletes multiple products in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentProductsCustombatchTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        ProductsCustomBatchRequest productsCustomBatchRequest = null;
        ProductsCustomBatchResponse response = api.contentProductsCustombatch($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, productsCustomBatchRequest);
        // TODO: test validations
    }

    /**
     * Deletes a product from your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentProductsDeleteTest() throws ApiException {
        String merchantId = null;
        String productId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        api.contentProductsDelete(merchantId, productId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun);
        // TODO: test validations
    }

    /**
     * Retrieves a product from your Merchant Center account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentProductsGetTest() throws ApiException {
        String merchantId = null;
        String productId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Product response = api.contentProductsGet(merchantId, productId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Uploads a product to your Merchant Center account. If an item with the same channel, contentLanguage, offerId, and targetCountry already exists, this method updates that entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentProductsInsertTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        Product product = null;
        Product response = api.contentProductsInsert(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, product);
        // TODO: test validations
    }

    /**
     * Lists the products in your Merchant Center account. The response might contain fewer items than specified by maxResults. Rely on nextPageToken to determine if there are more items to be requested.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentProductsListTest() throws ApiException {
        String merchantId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeInvalidInsertedItems = null;
        Integer maxResults = null;
        String pageToken = null;
        ProductsListResponse response = api.contentProductsList(merchantId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeInvalidInsertedItems, maxResults, pageToken);
        // TODO: test validations
    }

}
