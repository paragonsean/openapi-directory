/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DatafeedFetchSchedule;
import org.openapitools.client.model.DatafeedFormat;
import org.openapitools.client.model.DatafeedTarget;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Datafeed configuration data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Datafeed {
  public static final String SERIALIZED_NAME_ATTRIBUTE_LANGUAGE = "attributeLanguage";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_LANGUAGE)
  private String attributeLanguage;

  public static final String SERIALIZED_NAME_CONTENT_LANGUAGE = "contentLanguage";
  @SerializedName(SERIALIZED_NAME_CONTENT_LANGUAGE)
  private String contentLanguage;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_FETCH_SCHEDULE = "fetchSchedule";
  @SerializedName(SERIALIZED_NAME_FETCH_SCHEDULE)
  private DatafeedFetchSchedule fetchSchedule;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private DatafeedFormat format;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTENDED_DESTINATIONS = "intendedDestinations";
  @SerializedName(SERIALIZED_NAME_INTENDED_DESTINATIONS)
  private List<String> intendedDestinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TARGET_COUNTRY = "targetCountry";
  @SerializedName(SERIALIZED_NAME_TARGET_COUNTRY)
  private String targetCountry;

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<DatafeedTarget> targets = new ArrayList<>();

  public Datafeed() {
  }

  public Datafeed attributeLanguage(String attributeLanguage) {
    this.attributeLanguage = attributeLanguage;
    return this;
  }

  /**
   * The two-letter ISO 639-1 language in which the attributes are defined in the data feed.
   * @return attributeLanguage
   */
  @javax.annotation.Nullable
  public String getAttributeLanguage() {
    return attributeLanguage;
  }

  public void setAttributeLanguage(String attributeLanguage) {
    this.attributeLanguage = attributeLanguage;
  }


  public Datafeed contentLanguage(String contentLanguage) {
    this.contentLanguage = contentLanguage;
    return this;
  }

  /**
   * [DEPRECATED] Please use targets[].language instead. The two-letter ISO 639-1 language of the items in the feed. Must be a valid language for &#x60;targetCountry&#x60;.
   * @return contentLanguage
   */
  @javax.annotation.Nullable
  public String getContentLanguage() {
    return contentLanguage;
  }

  public void setContentLanguage(String contentLanguage) {
    this.contentLanguage = contentLanguage;
  }


  public Datafeed contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Required. The type of data feed. For product inventory feeds, only feeds for local stores, not online stores, are supported. Acceptable values are: - \&quot;&#x60;local products&#x60;\&quot; - \&quot;&#x60;product inventory&#x60;\&quot; - \&quot;&#x60;products&#x60;\&quot; 
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public Datafeed fetchSchedule(DatafeedFetchSchedule fetchSchedule) {
    this.fetchSchedule = fetchSchedule;
    return this;
  }

  /**
   * Get fetchSchedule
   * @return fetchSchedule
   */
  @javax.annotation.Nullable
  public DatafeedFetchSchedule getFetchSchedule() {
    return fetchSchedule;
  }

  public void setFetchSchedule(DatafeedFetchSchedule fetchSchedule) {
    this.fetchSchedule = fetchSchedule;
  }


  public Datafeed fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Required. The filename of the feed. All feeds must have a unique file name.
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public Datafeed format(DatafeedFormat format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public DatafeedFormat getFormat() {
    return format;
  }

  public void setFormat(DatafeedFormat format) {
    this.format = format;
  }


  public Datafeed id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required for update. The ID of the data feed.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Datafeed intendedDestinations(List<String> intendedDestinations) {
    this.intendedDestinations = intendedDestinations;
    return this;
  }

  public Datafeed addIntendedDestinationsItem(String intendedDestinationsItem) {
    if (this.intendedDestinations == null) {
      this.intendedDestinations = new ArrayList<>();
    }
    this.intendedDestinations.add(intendedDestinationsItem);
    return this;
  }

  /**
   * [DEPRECATED] Please use targets[].includedDestinations instead. The list of intended destinations (corresponds to checked check boxes in Merchant Center).
   * @return intendedDestinations
   */
  @javax.annotation.Nullable
  public List<String> getIntendedDestinations() {
    return intendedDestinations;
  }

  public void setIntendedDestinations(List<String> intendedDestinations) {
    this.intendedDestinations = intendedDestinations;
  }


  public Datafeed kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;&#x60;content#datafeed&#x60;\&quot;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Datafeed name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required for insert. A descriptive name of the data feed.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Datafeed targetCountry(String targetCountry) {
    this.targetCountry = targetCountry;
    return this;
  }

  /**
   * [DEPRECATED] Please use targets[].country instead. The country where the items in the feed will be included in the search index, represented as a CLDR territory code.
   * @return targetCountry
   */
  @javax.annotation.Nullable
  public String getTargetCountry() {
    return targetCountry;
  }

  public void setTargetCountry(String targetCountry) {
    this.targetCountry = targetCountry;
  }


  public Datafeed targets(List<DatafeedTarget> targets) {
    this.targets = targets;
    return this;
  }

  public Datafeed addTargetsItem(DatafeedTarget targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

  /**
   * The targets this feed should apply to (country, language, destinations).
   * @return targets
   */
  @javax.annotation.Nullable
  public List<DatafeedTarget> getTargets() {
    return targets;
  }

  public void setTargets(List<DatafeedTarget> targets) {
    this.targets = targets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Datafeed datafeed = (Datafeed) o;
    return Objects.equals(this.attributeLanguage, datafeed.attributeLanguage) &&
        Objects.equals(this.contentLanguage, datafeed.contentLanguage) &&
        Objects.equals(this.contentType, datafeed.contentType) &&
        Objects.equals(this.fetchSchedule, datafeed.fetchSchedule) &&
        Objects.equals(this.fileName, datafeed.fileName) &&
        Objects.equals(this.format, datafeed.format) &&
        Objects.equals(this.id, datafeed.id) &&
        Objects.equals(this.intendedDestinations, datafeed.intendedDestinations) &&
        Objects.equals(this.kind, datafeed.kind) &&
        Objects.equals(this.name, datafeed.name) &&
        Objects.equals(this.targetCountry, datafeed.targetCountry) &&
        Objects.equals(this.targets, datafeed.targets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeLanguage, contentLanguage, contentType, fetchSchedule, fileName, format, id, intendedDestinations, kind, name, targetCountry, targets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Datafeed {\n");
    sb.append("    attributeLanguage: ").append(toIndentedString(attributeLanguage)).append("\n");
    sb.append("    contentLanguage: ").append(toIndentedString(contentLanguage)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    fetchSchedule: ").append(toIndentedString(fetchSchedule)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    intendedDestinations: ").append(toIndentedString(intendedDestinations)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    targetCountry: ").append(toIndentedString(targetCountry)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributeLanguage");
    openapiFields.add("contentLanguage");
    openapiFields.add("contentType");
    openapiFields.add("fetchSchedule");
    openapiFields.add("fileName");
    openapiFields.add("format");
    openapiFields.add("id");
    openapiFields.add("intendedDestinations");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("targetCountry");
    openapiFields.add("targets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Datafeed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Datafeed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Datafeed is not found in the empty JSON string", Datafeed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Datafeed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Datafeed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attributeLanguage") != null && !jsonObj.get("attributeLanguage").isJsonNull()) && !jsonObj.get("attributeLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeLanguage").toString()));
      }
      if ((jsonObj.get("contentLanguage") != null && !jsonObj.get("contentLanguage").isJsonNull()) && !jsonObj.get("contentLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentLanguage").toString()));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      // validate the optional field `fetchSchedule`
      if (jsonObj.get("fetchSchedule") != null && !jsonObj.get("fetchSchedule").isJsonNull()) {
        DatafeedFetchSchedule.validateJsonElement(jsonObj.get("fetchSchedule"));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        DatafeedFormat.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("intendedDestinations") != null && !jsonObj.get("intendedDestinations").isJsonNull() && !jsonObj.get("intendedDestinations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `intendedDestinations` to be an array in the JSON string but got `%s`", jsonObj.get("intendedDestinations").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("targetCountry") != null && !jsonObj.get("targetCountry").isJsonNull()) && !jsonObj.get("targetCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetCountry").toString()));
      }
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull()) {
        JsonArray jsonArraytargets = jsonObj.getAsJsonArray("targets");
        if (jsonArraytargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targets` to be an array in the JSON string but got `%s`", jsonObj.get("targets").toString()));
          }

          // validate the optional field `targets` (array)
          for (int i = 0; i < jsonArraytargets.size(); i++) {
            DatafeedTarget.validateJsonElement(jsonArraytargets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Datafeed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Datafeed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Datafeed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Datafeed.class));

       return (TypeAdapter<T>) new TypeAdapter<Datafeed>() {
           @Override
           public void write(JsonWriter out, Datafeed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Datafeed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Datafeed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Datafeed
   * @throws IOException if the JSON string is invalid with respect to Datafeed
   */
  public static Datafeed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Datafeed.class);
  }

  /**
   * Convert an instance of Datafeed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

