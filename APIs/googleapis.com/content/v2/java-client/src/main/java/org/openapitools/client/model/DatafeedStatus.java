/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DatafeedStatusError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The status of a datafeed, i.e., the result of the last retrieval of the datafeed computed asynchronously when the feed processing is finished.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatafeedStatus {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DATAFEED_ID = "datafeedId";
  @SerializedName(SERIALIZED_NAME_DATAFEED_ID)
  private String datafeedId;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<DatafeedStatusError> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEMS_TOTAL = "itemsTotal";
  @SerializedName(SERIALIZED_NAME_ITEMS_TOTAL)
  private String itemsTotal;

  public static final String SERIALIZED_NAME_ITEMS_VALID = "itemsValid";
  @SerializedName(SERIALIZED_NAME_ITEMS_VALID)
  private String itemsValid;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LAST_UPLOAD_DATE = "lastUploadDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPLOAD_DATE)
  private String lastUploadDate;

  public static final String SERIALIZED_NAME_PROCESSING_STATUS = "processingStatus";
  @SerializedName(SERIALIZED_NAME_PROCESSING_STATUS)
  private String processingStatus;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<DatafeedStatusError> warnings = new ArrayList<>();

  public DatafeedStatus() {
  }

  public DatafeedStatus country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country for which the status is reported, represented as a CLDR territory code.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public DatafeedStatus datafeedId(String datafeedId) {
    this.datafeedId = datafeedId;
    return this;
  }

  /**
   * The ID of the feed for which the status is reported.
   * @return datafeedId
   */
  @javax.annotation.Nullable
  public String getDatafeedId() {
    return datafeedId;
  }

  public void setDatafeedId(String datafeedId) {
    this.datafeedId = datafeedId;
  }


  public DatafeedStatus errors(List<DatafeedStatusError> errors) {
    this.errors = errors;
    return this;
  }

  public DatafeedStatus addErrorsItem(DatafeedStatusError errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * The list of errors occurring in the feed.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<DatafeedStatusError> getErrors() {
    return errors;
  }

  public void setErrors(List<DatafeedStatusError> errors) {
    this.errors = errors;
  }


  public DatafeedStatus itemsTotal(String itemsTotal) {
    this.itemsTotal = itemsTotal;
    return this;
  }

  /**
   * The number of items in the feed that were processed.
   * @return itemsTotal
   */
  @javax.annotation.Nullable
  public String getItemsTotal() {
    return itemsTotal;
  }

  public void setItemsTotal(String itemsTotal) {
    this.itemsTotal = itemsTotal;
  }


  public DatafeedStatus itemsValid(String itemsValid) {
    this.itemsValid = itemsValid;
    return this;
  }

  /**
   * The number of items in the feed that were valid.
   * @return itemsValid
   */
  @javax.annotation.Nullable
  public String getItemsValid() {
    return itemsValid;
  }

  public void setItemsValid(String itemsValid) {
    this.itemsValid = itemsValid;
  }


  public DatafeedStatus kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;&#x60;content#datafeedStatus&#x60;\&quot;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public DatafeedStatus language(String language) {
    this.language = language;
    return this;
  }

  /**
   * The two-letter ISO 639-1 language for which the status is reported.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public DatafeedStatus lastUploadDate(String lastUploadDate) {
    this.lastUploadDate = lastUploadDate;
    return this;
  }

  /**
   * The last date at which the feed was uploaded.
   * @return lastUploadDate
   */
  @javax.annotation.Nullable
  public String getLastUploadDate() {
    return lastUploadDate;
  }

  public void setLastUploadDate(String lastUploadDate) {
    this.lastUploadDate = lastUploadDate;
  }


  public DatafeedStatus processingStatus(String processingStatus) {
    this.processingStatus = processingStatus;
    return this;
  }

  /**
   * The processing status of the feed. Acceptable values are: - \&quot;&#x60;\&quot;&#x60;failure&#x60;\&quot;: The feed could not be processed or all items had errors.&#x60;\&quot; - \&quot;&#x60;in progress&#x60;\&quot;: The feed is being processed. - \&quot;&#x60;none&#x60;\&quot;: The feed has not yet been processed. For example, a feed that has never been uploaded will have this processing status. - \&quot;&#x60;success&#x60;\&quot;: The feed was processed successfully, though some items might have had errors. 
   * @return processingStatus
   */
  @javax.annotation.Nullable
  public String getProcessingStatus() {
    return processingStatus;
  }

  public void setProcessingStatus(String processingStatus) {
    this.processingStatus = processingStatus;
  }


  public DatafeedStatus warnings(List<DatafeedStatusError> warnings) {
    this.warnings = warnings;
    return this;
  }

  public DatafeedStatus addWarningsItem(DatafeedStatusError warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * The list of errors occurring in the feed.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<DatafeedStatusError> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<DatafeedStatusError> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatafeedStatus datafeedStatus = (DatafeedStatus) o;
    return Objects.equals(this.country, datafeedStatus.country) &&
        Objects.equals(this.datafeedId, datafeedStatus.datafeedId) &&
        Objects.equals(this.errors, datafeedStatus.errors) &&
        Objects.equals(this.itemsTotal, datafeedStatus.itemsTotal) &&
        Objects.equals(this.itemsValid, datafeedStatus.itemsValid) &&
        Objects.equals(this.kind, datafeedStatus.kind) &&
        Objects.equals(this.language, datafeedStatus.language) &&
        Objects.equals(this.lastUploadDate, datafeedStatus.lastUploadDate) &&
        Objects.equals(this.processingStatus, datafeedStatus.processingStatus) &&
        Objects.equals(this.warnings, datafeedStatus.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, datafeedId, errors, itemsTotal, itemsValid, kind, language, lastUploadDate, processingStatus, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatafeedStatus {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    datafeedId: ").append(toIndentedString(datafeedId)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    itemsTotal: ").append(toIndentedString(itemsTotal)).append("\n");
    sb.append("    itemsValid: ").append(toIndentedString(itemsValid)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastUploadDate: ").append(toIndentedString(lastUploadDate)).append("\n");
    sb.append("    processingStatus: ").append(toIndentedString(processingStatus)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("datafeedId");
    openapiFields.add("errors");
    openapiFields.add("itemsTotal");
    openapiFields.add("itemsValid");
    openapiFields.add("kind");
    openapiFields.add("language");
    openapiFields.add("lastUploadDate");
    openapiFields.add("processingStatus");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatafeedStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatafeedStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatafeedStatus is not found in the empty JSON string", DatafeedStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatafeedStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatafeedStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("datafeedId") != null && !jsonObj.get("datafeedId").isJsonNull()) && !jsonObj.get("datafeedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datafeedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datafeedId").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            DatafeedStatusError.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("itemsTotal") != null && !jsonObj.get("itemsTotal").isJsonNull()) && !jsonObj.get("itemsTotal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemsTotal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemsTotal").toString()));
      }
      if ((jsonObj.get("itemsValid") != null && !jsonObj.get("itemsValid").isJsonNull()) && !jsonObj.get("itemsValid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemsValid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemsValid").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("lastUploadDate") != null && !jsonObj.get("lastUploadDate").isJsonNull()) && !jsonObj.get("lastUploadDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUploadDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUploadDate").toString()));
      }
      if ((jsonObj.get("processingStatus") != null && !jsonObj.get("processingStatus").isJsonNull()) && !jsonObj.get("processingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingStatus").toString()));
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            DatafeedStatusError.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatafeedStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatafeedStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatafeedStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatafeedStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DatafeedStatus>() {
           @Override
           public void write(JsonWriter out, DatafeedStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatafeedStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatafeedStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatafeedStatus
   * @throws IOException if the JSON string is invalid with respect to DatafeedStatus
   */
  public static DatafeedStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatafeedStatus.class);
  }

  /**
   * Convert an instance of DatafeedStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

