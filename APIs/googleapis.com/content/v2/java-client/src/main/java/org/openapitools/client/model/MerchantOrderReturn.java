/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MerchantOrderReturnItem;
import org.openapitools.client.model.ReturnShipment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Order return. Production access (all methods) requires the order manager role. Sandbox access does not.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MerchantOrderReturn {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_MERCHANT_ORDER_ID = "merchantOrderId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ORDER_ID)
  private String merchantOrderId;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_RETURN_ID = "orderReturnId";
  @SerializedName(SERIALIZED_NAME_ORDER_RETURN_ID)
  private String orderReturnId;

  public static final String SERIALIZED_NAME_RETURN_ITEMS = "returnItems";
  @SerializedName(SERIALIZED_NAME_RETURN_ITEMS)
  private List<MerchantOrderReturnItem> returnItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_SHIPMENTS = "returnShipments";
  @SerializedName(SERIALIZED_NAME_RETURN_SHIPMENTS)
  private List<ReturnShipment> returnShipments = new ArrayList<>();

  public MerchantOrderReturn() {
  }

  public MerchantOrderReturn creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date of creation of the return, in ISO 8601 format.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public MerchantOrderReturn merchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
    return this;
  }

  /**
   * Merchant defined order ID.
   * @return merchantOrderId
   */
  @javax.annotation.Nullable
  public String getMerchantOrderId() {
    return merchantOrderId;
  }

  public void setMerchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
  }


  public MerchantOrderReturn orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Google order ID.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public MerchantOrderReturn orderReturnId(String orderReturnId) {
    this.orderReturnId = orderReturnId;
    return this;
  }

  /**
   * Order return ID generated by Google.
   * @return orderReturnId
   */
  @javax.annotation.Nullable
  public String getOrderReturnId() {
    return orderReturnId;
  }

  public void setOrderReturnId(String orderReturnId) {
    this.orderReturnId = orderReturnId;
  }


  public MerchantOrderReturn returnItems(List<MerchantOrderReturnItem> returnItems) {
    this.returnItems = returnItems;
    return this;
  }

  public MerchantOrderReturn addReturnItemsItem(MerchantOrderReturnItem returnItemsItem) {
    if (this.returnItems == null) {
      this.returnItems = new ArrayList<>();
    }
    this.returnItems.add(returnItemsItem);
    return this;
  }

  /**
   * Items of the return.
   * @return returnItems
   */
  @javax.annotation.Nullable
  public List<MerchantOrderReturnItem> getReturnItems() {
    return returnItems;
  }

  public void setReturnItems(List<MerchantOrderReturnItem> returnItems) {
    this.returnItems = returnItems;
  }


  public MerchantOrderReturn returnShipments(List<ReturnShipment> returnShipments) {
    this.returnShipments = returnShipments;
    return this;
  }

  public MerchantOrderReturn addReturnShipmentsItem(ReturnShipment returnShipmentsItem) {
    if (this.returnShipments == null) {
      this.returnShipments = new ArrayList<>();
    }
    this.returnShipments.add(returnShipmentsItem);
    return this;
  }

  /**
   * Shipments of the return.
   * @return returnShipments
   */
  @javax.annotation.Nullable
  public List<ReturnShipment> getReturnShipments() {
    return returnShipments;
  }

  public void setReturnShipments(List<ReturnShipment> returnShipments) {
    this.returnShipments = returnShipments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantOrderReturn merchantOrderReturn = (MerchantOrderReturn) o;
    return Objects.equals(this.creationDate, merchantOrderReturn.creationDate) &&
        Objects.equals(this.merchantOrderId, merchantOrderReturn.merchantOrderId) &&
        Objects.equals(this.orderId, merchantOrderReturn.orderId) &&
        Objects.equals(this.orderReturnId, merchantOrderReturn.orderReturnId) &&
        Objects.equals(this.returnItems, merchantOrderReturn.returnItems) &&
        Objects.equals(this.returnShipments, merchantOrderReturn.returnShipments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, merchantOrderId, orderId, orderReturnId, returnItems, returnShipments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantOrderReturn {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    merchantOrderId: ").append(toIndentedString(merchantOrderId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderReturnId: ").append(toIndentedString(orderReturnId)).append("\n");
    sb.append("    returnItems: ").append(toIndentedString(returnItems)).append("\n");
    sb.append("    returnShipments: ").append(toIndentedString(returnShipments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("merchantOrderId");
    openapiFields.add("orderId");
    openapiFields.add("orderReturnId");
    openapiFields.add("returnItems");
    openapiFields.add("returnShipments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MerchantOrderReturn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MerchantOrderReturn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantOrderReturn is not found in the empty JSON string", MerchantOrderReturn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MerchantOrderReturn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MerchantOrderReturn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creationDate") != null && !jsonObj.get("creationDate").isJsonNull()) && !jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      if ((jsonObj.get("merchantOrderId") != null && !jsonObj.get("merchantOrderId").isJsonNull()) && !jsonObj.get("merchantOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantOrderId").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("orderReturnId") != null && !jsonObj.get("orderReturnId").isJsonNull()) && !jsonObj.get("orderReturnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderReturnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderReturnId").toString()));
      }
      if (jsonObj.get("returnItems") != null && !jsonObj.get("returnItems").isJsonNull()) {
        JsonArray jsonArrayreturnItems = jsonObj.getAsJsonArray("returnItems");
        if (jsonArrayreturnItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("returnItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `returnItems` to be an array in the JSON string but got `%s`", jsonObj.get("returnItems").toString()));
          }

          // validate the optional field `returnItems` (array)
          for (int i = 0; i < jsonArrayreturnItems.size(); i++) {
            MerchantOrderReturnItem.validateJsonElement(jsonArrayreturnItems.get(i));
          };
        }
      }
      if (jsonObj.get("returnShipments") != null && !jsonObj.get("returnShipments").isJsonNull()) {
        JsonArray jsonArrayreturnShipments = jsonObj.getAsJsonArray("returnShipments");
        if (jsonArrayreturnShipments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("returnShipments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `returnShipments` to be an array in the JSON string but got `%s`", jsonObj.get("returnShipments").toString()));
          }

          // validate the optional field `returnShipments` (array)
          for (int i = 0; i < jsonArrayreturnShipments.size(); i++) {
            ReturnShipment.validateJsonElement(jsonArrayreturnShipments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantOrderReturn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantOrderReturn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantOrderReturn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantOrderReturn.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantOrderReturn>() {
           @Override
           public void write(JsonWriter out, MerchantOrderReturn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantOrderReturn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MerchantOrderReturn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MerchantOrderReturn
   * @throws IOException if the JSON string is invalid with respect to MerchantOrderReturn
   */
  public static MerchantOrderReturn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantOrderReturn.class);
  }

  /**
   * Convert an instance of MerchantOrderReturn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

