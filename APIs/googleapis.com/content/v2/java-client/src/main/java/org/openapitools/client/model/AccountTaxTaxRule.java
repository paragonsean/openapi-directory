/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tax calculation rule to apply in a state or province (USA only).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountTaxTaxRule {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_RATE_PERCENT = "ratePercent";
  @SerializedName(SERIALIZED_NAME_RATE_PERCENT)
  private String ratePercent;

  public static final String SERIALIZED_NAME_SHIPPING_TAXED = "shippingTaxed";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TAXED)
  private Boolean shippingTaxed;

  public static final String SERIALIZED_NAME_USE_GLOBAL_RATE = "useGlobalRate";
  @SerializedName(SERIALIZED_NAME_USE_GLOBAL_RATE)
  private Boolean useGlobalRate;

  public AccountTaxTaxRule() {
  }

  public AccountTaxTaxRule country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country code in which tax is applicable.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public AccountTaxTaxRule locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * Required. State (or province) is which the tax is applicable, described by its location ID (also called criteria ID).
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public AccountTaxTaxRule ratePercent(String ratePercent) {
    this.ratePercent = ratePercent;
    return this;
  }

  /**
   * Explicit tax rate in percent, represented as a floating point number without the percentage character. Must not be negative.
   * @return ratePercent
   */
  @javax.annotation.Nullable
  public String getRatePercent() {
    return ratePercent;
  }

  public void setRatePercent(String ratePercent) {
    this.ratePercent = ratePercent;
  }


  public AccountTaxTaxRule shippingTaxed(Boolean shippingTaxed) {
    this.shippingTaxed = shippingTaxed;
    return this;
  }

  /**
   * If true, shipping charges are also taxed.
   * @return shippingTaxed
   */
  @javax.annotation.Nullable
  public Boolean getShippingTaxed() {
    return shippingTaxed;
  }

  public void setShippingTaxed(Boolean shippingTaxed) {
    this.shippingTaxed = shippingTaxed;
  }


  public AccountTaxTaxRule useGlobalRate(Boolean useGlobalRate) {
    this.useGlobalRate = useGlobalRate;
    return this;
  }

  /**
   * Whether the tax rate is taken from a global tax table or specified explicitly.
   * @return useGlobalRate
   */
  @javax.annotation.Nullable
  public Boolean getUseGlobalRate() {
    return useGlobalRate;
  }

  public void setUseGlobalRate(Boolean useGlobalRate) {
    this.useGlobalRate = useGlobalRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountTaxTaxRule accountTaxTaxRule = (AccountTaxTaxRule) o;
    return Objects.equals(this.country, accountTaxTaxRule.country) &&
        Objects.equals(this.locationId, accountTaxTaxRule.locationId) &&
        Objects.equals(this.ratePercent, accountTaxTaxRule.ratePercent) &&
        Objects.equals(this.shippingTaxed, accountTaxTaxRule.shippingTaxed) &&
        Objects.equals(this.useGlobalRate, accountTaxTaxRule.useGlobalRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, locationId, ratePercent, shippingTaxed, useGlobalRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountTaxTaxRule {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    ratePercent: ").append(toIndentedString(ratePercent)).append("\n");
    sb.append("    shippingTaxed: ").append(toIndentedString(shippingTaxed)).append("\n");
    sb.append("    useGlobalRate: ").append(toIndentedString(useGlobalRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("locationId");
    openapiFields.add("ratePercent");
    openapiFields.add("shippingTaxed");
    openapiFields.add("useGlobalRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountTaxTaxRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountTaxTaxRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountTaxTaxRule is not found in the empty JSON string", AccountTaxTaxRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountTaxTaxRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountTaxTaxRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if ((jsonObj.get("ratePercent") != null && !jsonObj.get("ratePercent").isJsonNull()) && !jsonObj.get("ratePercent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratePercent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratePercent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountTaxTaxRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountTaxTaxRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountTaxTaxRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountTaxTaxRule.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountTaxTaxRule>() {
           @Override
           public void write(JsonWriter out, AccountTaxTaxRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountTaxTaxRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountTaxTaxRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountTaxTaxRule
   * @throws IOException if the JSON string is invalid with respect to AccountTaxTaxRule
   */
  public static AccountTaxTaxRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountTaxTaxRule.class);
  }

  /**
   * Convert an instance of AccountTaxTaxRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

