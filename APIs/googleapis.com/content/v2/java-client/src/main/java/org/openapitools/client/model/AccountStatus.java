/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountStatusAccountLevelIssue;
import org.openapitools.client.model.AccountStatusDataQualityIssue;
import org.openapitools.client.model.AccountStatusProducts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The status of an account, i.e., information about its products, which is computed offline and not returned immediately at insertion time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountStatus {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACCOUNT_LEVEL_ISSUES = "accountLevelIssues";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_LEVEL_ISSUES)
  private List<AccountStatusAccountLevelIssue> accountLevelIssues = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_QUALITY_ISSUES = "dataQualityIssues";
  @SerializedName(SERIALIZED_NAME_DATA_QUALITY_ISSUES)
  private List<AccountStatusDataQualityIssue> dataQualityIssues = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<AccountStatusProducts> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEBSITE_CLAIMED = "websiteClaimed";
  @SerializedName(SERIALIZED_NAME_WEBSITE_CLAIMED)
  private Boolean websiteClaimed;

  public AccountStatus() {
  }

  public AccountStatus accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The ID of the account for which the status is reported.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public AccountStatus accountLevelIssues(List<AccountStatusAccountLevelIssue> accountLevelIssues) {
    this.accountLevelIssues = accountLevelIssues;
    return this;
  }

  public AccountStatus addAccountLevelIssuesItem(AccountStatusAccountLevelIssue accountLevelIssuesItem) {
    if (this.accountLevelIssues == null) {
      this.accountLevelIssues = new ArrayList<>();
    }
    this.accountLevelIssues.add(accountLevelIssuesItem);
    return this;
  }

  /**
   * A list of account level issues.
   * @return accountLevelIssues
   */
  @javax.annotation.Nullable
  public List<AccountStatusAccountLevelIssue> getAccountLevelIssues() {
    return accountLevelIssues;
  }

  public void setAccountLevelIssues(List<AccountStatusAccountLevelIssue> accountLevelIssues) {
    this.accountLevelIssues = accountLevelIssues;
  }


  public AccountStatus dataQualityIssues(List<AccountStatusDataQualityIssue> dataQualityIssues) {
    this.dataQualityIssues = dataQualityIssues;
    return this;
  }

  public AccountStatus addDataQualityIssuesItem(AccountStatusDataQualityIssue dataQualityIssuesItem) {
    if (this.dataQualityIssues == null) {
      this.dataQualityIssues = new ArrayList<>();
    }
    this.dataQualityIssues.add(dataQualityIssuesItem);
    return this;
  }

  /**
   * DEPRECATED - never populated.
   * @return dataQualityIssues
   */
  @javax.annotation.Nullable
  public List<AccountStatusDataQualityIssue> getDataQualityIssues() {
    return dataQualityIssues;
  }

  public void setDataQualityIssues(List<AccountStatusDataQualityIssue> dataQualityIssues) {
    this.dataQualityIssues = dataQualityIssues;
  }


  public AccountStatus kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;&#x60;content#accountStatus&#x60;\&quot;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AccountStatus products(List<AccountStatusProducts> products) {
    this.products = products;
    return this;
  }

  public AccountStatus addProductsItem(AccountStatusProducts productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * List of product-related data by channel, destination, and country. Data in this field may be delayed by up to 30 minutes.
   * @return products
   */
  @javax.annotation.Nullable
  public List<AccountStatusProducts> getProducts() {
    return products;
  }

  public void setProducts(List<AccountStatusProducts> products) {
    this.products = products;
  }


  public AccountStatus websiteClaimed(Boolean websiteClaimed) {
    this.websiteClaimed = websiteClaimed;
    return this;
  }

  /**
   * Whether the account&#39;s website is claimed or not.
   * @return websiteClaimed
   */
  @javax.annotation.Nullable
  public Boolean getWebsiteClaimed() {
    return websiteClaimed;
  }

  public void setWebsiteClaimed(Boolean websiteClaimed) {
    this.websiteClaimed = websiteClaimed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountStatus accountStatus = (AccountStatus) o;
    return Objects.equals(this.accountId, accountStatus.accountId) &&
        Objects.equals(this.accountLevelIssues, accountStatus.accountLevelIssues) &&
        Objects.equals(this.dataQualityIssues, accountStatus.dataQualityIssues) &&
        Objects.equals(this.kind, accountStatus.kind) &&
        Objects.equals(this.products, accountStatus.products) &&
        Objects.equals(this.websiteClaimed, accountStatus.websiteClaimed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountLevelIssues, dataQualityIssues, kind, products, websiteClaimed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountStatus {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountLevelIssues: ").append(toIndentedString(accountLevelIssues)).append("\n");
    sb.append("    dataQualityIssues: ").append(toIndentedString(dataQualityIssues)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    websiteClaimed: ").append(toIndentedString(websiteClaimed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("accountLevelIssues");
    openapiFields.add("dataQualityIssues");
    openapiFields.add("kind");
    openapiFields.add("products");
    openapiFields.add("websiteClaimed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountStatus is not found in the empty JSON string", AccountStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (jsonObj.get("accountLevelIssues") != null && !jsonObj.get("accountLevelIssues").isJsonNull()) {
        JsonArray jsonArrayaccountLevelIssues = jsonObj.getAsJsonArray("accountLevelIssues");
        if (jsonArrayaccountLevelIssues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accountLevelIssues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accountLevelIssues` to be an array in the JSON string but got `%s`", jsonObj.get("accountLevelIssues").toString()));
          }

          // validate the optional field `accountLevelIssues` (array)
          for (int i = 0; i < jsonArrayaccountLevelIssues.size(); i++) {
            AccountStatusAccountLevelIssue.validateJsonElement(jsonArrayaccountLevelIssues.get(i));
          };
        }
      }
      if (jsonObj.get("dataQualityIssues") != null && !jsonObj.get("dataQualityIssues").isJsonNull()) {
        JsonArray jsonArraydataQualityIssues = jsonObj.getAsJsonArray("dataQualityIssues");
        if (jsonArraydataQualityIssues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataQualityIssues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataQualityIssues` to be an array in the JSON string but got `%s`", jsonObj.get("dataQualityIssues").toString()));
          }

          // validate the optional field `dataQualityIssues` (array)
          for (int i = 0; i < jsonArraydataQualityIssues.size(); i++) {
            AccountStatusDataQualityIssue.validateJsonElement(jsonArraydataQualityIssues.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
        if (jsonArrayproducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
          }

          // validate the optional field `products` (array)
          for (int i = 0; i < jsonArrayproducts.size(); i++) {
            AccountStatusProducts.validateJsonElement(jsonArrayproducts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountStatus>() {
           @Override
           public void write(JsonWriter out, AccountStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountStatus
   * @throws IOException if the JSON string is invalid with respect to AccountStatus
   */
  public static AccountStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountStatus.class);
  }

  /**
   * Convert an instance of AccountStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

