/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UnitInvoice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShipmentInvoiceLineItemInvoice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShipmentInvoiceLineItemInvoice {
  public static final String SERIALIZED_NAME_LINE_ITEM_ID = "lineItemId";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_ID)
  private String lineItemId;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_SHIPMENT_UNIT_IDS = "shipmentUnitIds";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_UNIT_IDS)
  private List<String> shipmentUnitIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_INVOICE = "unitInvoice";
  @SerializedName(SERIALIZED_NAME_UNIT_INVOICE)
  private UnitInvoice unitInvoice;

  public ShipmentInvoiceLineItemInvoice() {
  }

  public ShipmentInvoiceLineItemInvoice lineItemId(String lineItemId) {
    this.lineItemId = lineItemId;
    return this;
  }

  /**
   * ID of the line item. Either lineItemId or productId must be set.
   * @return lineItemId
   */
  @javax.annotation.Nullable
  public String getLineItemId() {
    return lineItemId;
  }

  public void setLineItemId(String lineItemId) {
    this.lineItemId = lineItemId;
  }


  public ShipmentInvoiceLineItemInvoice productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * ID of the product. This is the REST ID used in the products service. Either lineItemId or productId must be set.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public ShipmentInvoiceLineItemInvoice shipmentUnitIds(List<String> shipmentUnitIds) {
    this.shipmentUnitIds = shipmentUnitIds;
    return this;
  }

  public ShipmentInvoiceLineItemInvoice addShipmentUnitIdsItem(String shipmentUnitIdsItem) {
    if (this.shipmentUnitIds == null) {
      this.shipmentUnitIds = new ArrayList<>();
    }
    this.shipmentUnitIds.add(shipmentUnitIdsItem);
    return this;
  }

  /**
   * [required] The shipment unit ID is assigned by the merchant and defines individual quantities within a line item. The same ID can be assigned to units that are the same while units that differ must be assigned a different ID (for example: free or promotional units).
   * @return shipmentUnitIds
   */
  @javax.annotation.Nullable
  public List<String> getShipmentUnitIds() {
    return shipmentUnitIds;
  }

  public void setShipmentUnitIds(List<String> shipmentUnitIds) {
    this.shipmentUnitIds = shipmentUnitIds;
  }


  public ShipmentInvoiceLineItemInvoice unitInvoice(UnitInvoice unitInvoice) {
    this.unitInvoice = unitInvoice;
    return this;
  }

  /**
   * Get unitInvoice
   * @return unitInvoice
   */
  @javax.annotation.Nullable
  public UnitInvoice getUnitInvoice() {
    return unitInvoice;
  }

  public void setUnitInvoice(UnitInvoice unitInvoice) {
    this.unitInvoice = unitInvoice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipmentInvoiceLineItemInvoice shipmentInvoiceLineItemInvoice = (ShipmentInvoiceLineItemInvoice) o;
    return Objects.equals(this.lineItemId, shipmentInvoiceLineItemInvoice.lineItemId) &&
        Objects.equals(this.productId, shipmentInvoiceLineItemInvoice.productId) &&
        Objects.equals(this.shipmentUnitIds, shipmentInvoiceLineItemInvoice.shipmentUnitIds) &&
        Objects.equals(this.unitInvoice, shipmentInvoiceLineItemInvoice.unitInvoice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lineItemId, productId, shipmentUnitIds, unitInvoice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipmentInvoiceLineItemInvoice {\n");
    sb.append("    lineItemId: ").append(toIndentedString(lineItemId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    shipmentUnitIds: ").append(toIndentedString(shipmentUnitIds)).append("\n");
    sb.append("    unitInvoice: ").append(toIndentedString(unitInvoice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lineItemId");
    openapiFields.add("productId");
    openapiFields.add("shipmentUnitIds");
    openapiFields.add("unitInvoice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShipmentInvoiceLineItemInvoice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShipmentInvoiceLineItemInvoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipmentInvoiceLineItemInvoice is not found in the empty JSON string", ShipmentInvoiceLineItemInvoice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShipmentInvoiceLineItemInvoice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipmentInvoiceLineItemInvoice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lineItemId") != null && !jsonObj.get("lineItemId").isJsonNull()) && !jsonObj.get("lineItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineItemId").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("shipmentUnitIds") != null && !jsonObj.get("shipmentUnitIds").isJsonNull() && !jsonObj.get("shipmentUnitIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentUnitIds` to be an array in the JSON string but got `%s`", jsonObj.get("shipmentUnitIds").toString()));
      }
      // validate the optional field `unitInvoice`
      if (jsonObj.get("unitInvoice") != null && !jsonObj.get("unitInvoice").isJsonNull()) {
        UnitInvoice.validateJsonElement(jsonObj.get("unitInvoice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipmentInvoiceLineItemInvoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipmentInvoiceLineItemInvoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipmentInvoiceLineItemInvoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipmentInvoiceLineItemInvoice.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipmentInvoiceLineItemInvoice>() {
           @Override
           public void write(JsonWriter out, ShipmentInvoiceLineItemInvoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipmentInvoiceLineItemInvoice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShipmentInvoiceLineItemInvoice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShipmentInvoiceLineItemInvoice
   * @throws IOException if the JSON string is invalid with respect to ShipmentInvoiceLineItemInvoice
   */
  public static ShipmentInvoiceLineItemInvoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShipmentInvoiceLineItemInvoice.class);
  }

  /**
   * Convert an instance of ShipmentInvoiceLineItemInvoice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

