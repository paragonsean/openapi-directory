/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatafeedTarget
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatafeedTarget {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_EXCLUDED_DESTINATIONS = "excludedDestinations";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_DESTINATIONS)
  private List<String> excludedDestinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_DESTINATIONS = "includedDestinations";
  @SerializedName(SERIALIZED_NAME_INCLUDED_DESTINATIONS)
  private List<String> includedDestinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public DatafeedTarget() {
  }

  public DatafeedTarget country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country where the items in the feed will be included in the search index, represented as a CLDR territory code.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public DatafeedTarget excludedDestinations(List<String> excludedDestinations) {
    this.excludedDestinations = excludedDestinations;
    return this;
  }

  public DatafeedTarget addExcludedDestinationsItem(String excludedDestinationsItem) {
    if (this.excludedDestinations == null) {
      this.excludedDestinations = new ArrayList<>();
    }
    this.excludedDestinations.add(excludedDestinationsItem);
    return this;
  }

  /**
   * The list of destinations to exclude for this target (corresponds to unchecked check boxes in Merchant Center).
   * @return excludedDestinations
   */
  @javax.annotation.Nullable
  public List<String> getExcludedDestinations() {
    return excludedDestinations;
  }

  public void setExcludedDestinations(List<String> excludedDestinations) {
    this.excludedDestinations = excludedDestinations;
  }


  public DatafeedTarget includedDestinations(List<String> includedDestinations) {
    this.includedDestinations = includedDestinations;
    return this;
  }

  public DatafeedTarget addIncludedDestinationsItem(String includedDestinationsItem) {
    if (this.includedDestinations == null) {
      this.includedDestinations = new ArrayList<>();
    }
    this.includedDestinations.add(includedDestinationsItem);
    return this;
  }

  /**
   * The list of destinations to include for this target (corresponds to checked check boxes in Merchant Center). Default destinations are always included unless provided in &#x60;excludedDestinations&#x60;. List of supported destinations (if available to the account): - DisplayAds - Shopping - ShoppingActions - SurfacesAcrossGoogle 
   * @return includedDestinations
   */
  @javax.annotation.Nullable
  public List<String> getIncludedDestinations() {
    return includedDestinations;
  }

  public void setIncludedDestinations(List<String> includedDestinations) {
    this.includedDestinations = includedDestinations;
  }


  public DatafeedTarget language(String language) {
    this.language = language;
    return this;
  }

  /**
   * The two-letter ISO 639-1 language of the items in the feed. Must be a valid language for &#x60;targets[].country&#x60;.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatafeedTarget datafeedTarget = (DatafeedTarget) o;
    return Objects.equals(this.country, datafeedTarget.country) &&
        Objects.equals(this.excludedDestinations, datafeedTarget.excludedDestinations) &&
        Objects.equals(this.includedDestinations, datafeedTarget.includedDestinations) &&
        Objects.equals(this.language, datafeedTarget.language);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, excludedDestinations, includedDestinations, language);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatafeedTarget {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    excludedDestinations: ").append(toIndentedString(excludedDestinations)).append("\n");
    sb.append("    includedDestinations: ").append(toIndentedString(includedDestinations)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("excludedDestinations");
    openapiFields.add("includedDestinations");
    openapiFields.add("language");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatafeedTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatafeedTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatafeedTarget is not found in the empty JSON string", DatafeedTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatafeedTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatafeedTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedDestinations") != null && !jsonObj.get("excludedDestinations").isJsonNull() && !jsonObj.get("excludedDestinations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedDestinations` to be an array in the JSON string but got `%s`", jsonObj.get("excludedDestinations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedDestinations") != null && !jsonObj.get("includedDestinations").isJsonNull() && !jsonObj.get("includedDestinations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedDestinations` to be an array in the JSON string but got `%s`", jsonObj.get("includedDestinations").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatafeedTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatafeedTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatafeedTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatafeedTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<DatafeedTarget>() {
           @Override
           public void write(JsonWriter out, DatafeedTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatafeedTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatafeedTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatafeedTarget
   * @throws IOException if the JSON string is invalid with respect to DatafeedTarget
   */
  public static DatafeedTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatafeedTarget.class);
  }

  /**
   * Convert an instance of DatafeedTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

