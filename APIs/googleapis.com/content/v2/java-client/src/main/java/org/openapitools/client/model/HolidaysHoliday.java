/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HolidaysHoliday
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HolidaysHoliday {
  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DELIVERY_GUARANTEE_DATE = "deliveryGuaranteeDate";
  @SerializedName(SERIALIZED_NAME_DELIVERY_GUARANTEE_DATE)
  private String deliveryGuaranteeDate;

  public static final String SERIALIZED_NAME_DELIVERY_GUARANTEE_HOUR = "deliveryGuaranteeHour";
  @SerializedName(SERIALIZED_NAME_DELIVERY_GUARANTEE_HOUR)
  private String deliveryGuaranteeHour;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public HolidaysHoliday() {
  }

  public HolidaysHoliday countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The CLDR territory code of the country in which the holiday is available. E.g. \&quot;US\&quot;, \&quot;DE\&quot;, \&quot;GB\&quot;. A holiday cutoff can only be configured in a shipping settings service with matching delivery country. Always present.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public HolidaysHoliday date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Date of the holiday, in ISO 8601 format. E.g. \&quot;2016-12-25\&quot; for Christmas 2016. Always present.
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public HolidaysHoliday deliveryGuaranteeDate(String deliveryGuaranteeDate) {
    this.deliveryGuaranteeDate = deliveryGuaranteeDate;
    return this;
  }

  /**
   * Date on which the order has to arrive at the customer&#39;s, in ISO 8601 format. E.g. \&quot;2016-12-24\&quot; for 24th December 2016. Always present.
   * @return deliveryGuaranteeDate
   */
  @javax.annotation.Nullable
  public String getDeliveryGuaranteeDate() {
    return deliveryGuaranteeDate;
  }

  public void setDeliveryGuaranteeDate(String deliveryGuaranteeDate) {
    this.deliveryGuaranteeDate = deliveryGuaranteeDate;
  }


  public HolidaysHoliday deliveryGuaranteeHour(String deliveryGuaranteeHour) {
    this.deliveryGuaranteeHour = deliveryGuaranteeHour;
    return this;
  }

  /**
   * Hour of the day in the delivery location&#39;s timezone on the guaranteed delivery date by which the order has to arrive at the customer&#39;s. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Always present.
   * @return deliveryGuaranteeHour
   */
  @javax.annotation.Nullable
  public String getDeliveryGuaranteeHour() {
    return deliveryGuaranteeHour;
  }

  public void setDeliveryGuaranteeHour(String deliveryGuaranteeHour) {
    this.deliveryGuaranteeHour = deliveryGuaranteeHour;
  }


  public HolidaysHoliday id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the holiday to be used when configuring holiday cutoffs. Always present.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public HolidaysHoliday type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The holiday type. Always present. Acceptable values are: - \&quot;&#x60;Christmas&#x60;\&quot; - \&quot;&#x60;Easter&#x60;\&quot; - \&quot;&#x60;Father&#39;s Day&#x60;\&quot; - \&quot;&#x60;Halloween&#x60;\&quot; - \&quot;&#x60;Independence Day (USA)&#x60;\&quot; - \&quot;&#x60;Mother&#39;s Day&#x60;\&quot; - \&quot;&#x60;Thanksgiving&#x60;\&quot; - \&quot;&#x60;Valentine&#39;s Day&#x60;\&quot; 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HolidaysHoliday holidaysHoliday = (HolidaysHoliday) o;
    return Objects.equals(this.countryCode, holidaysHoliday.countryCode) &&
        Objects.equals(this.date, holidaysHoliday.date) &&
        Objects.equals(this.deliveryGuaranteeDate, holidaysHoliday.deliveryGuaranteeDate) &&
        Objects.equals(this.deliveryGuaranteeHour, holidaysHoliday.deliveryGuaranteeHour) &&
        Objects.equals(this.id, holidaysHoliday.id) &&
        Objects.equals(this.type, holidaysHoliday.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, date, deliveryGuaranteeDate, deliveryGuaranteeHour, id, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HolidaysHoliday {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    deliveryGuaranteeDate: ").append(toIndentedString(deliveryGuaranteeDate)).append("\n");
    sb.append("    deliveryGuaranteeHour: ").append(toIndentedString(deliveryGuaranteeHour)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryCode");
    openapiFields.add("date");
    openapiFields.add("deliveryGuaranteeDate");
    openapiFields.add("deliveryGuaranteeHour");
    openapiFields.add("id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HolidaysHoliday
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HolidaysHoliday.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HolidaysHoliday is not found in the empty JSON string", HolidaysHoliday.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HolidaysHoliday.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HolidaysHoliday` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("deliveryGuaranteeDate") != null && !jsonObj.get("deliveryGuaranteeDate").isJsonNull()) && !jsonObj.get("deliveryGuaranteeDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryGuaranteeDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryGuaranteeDate").toString()));
      }
      if ((jsonObj.get("deliveryGuaranteeHour") != null && !jsonObj.get("deliveryGuaranteeHour").isJsonNull()) && !jsonObj.get("deliveryGuaranteeHour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryGuaranteeHour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryGuaranteeHour").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HolidaysHoliday.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HolidaysHoliday' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HolidaysHoliday> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HolidaysHoliday.class));

       return (TypeAdapter<T>) new TypeAdapter<HolidaysHoliday>() {
           @Override
           public void write(JsonWriter out, HolidaysHoliday value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HolidaysHoliday read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HolidaysHoliday given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HolidaysHoliday
   * @throws IOException if the JSON string is invalid with respect to HolidaysHoliday
   */
  public static HolidaysHoliday fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HolidaysHoliday.class);
  }

  /**
   * Convert an instance of HolidaysHoliday to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

