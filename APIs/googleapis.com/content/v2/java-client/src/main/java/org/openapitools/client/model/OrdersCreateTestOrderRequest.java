/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TestOrder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrdersCreateTestOrderRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrdersCreateTestOrderRequest {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "templateName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  private String templateName;

  public static final String SERIALIZED_NAME_TEST_ORDER = "testOrder";
  @SerializedName(SERIALIZED_NAME_TEST_ORDER)
  private TestOrder testOrder;

  public OrdersCreateTestOrderRequest() {
  }

  public OrdersCreateTestOrderRequest country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The CLDR territory code of the country of the test order to create. Affects the currency and addresses of orders created via &#x60;template_name&#x60;, or the addresses of orders created via &#x60;test_order&#x60;. Acceptable values are: - \&quot;&#x60;US&#x60;\&quot; - \&quot;&#x60;FR&#x60;\&quot; Defaults to &#x60;US&#x60;.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public OrdersCreateTestOrderRequest templateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

  /**
   * The test order template to use. Specify as an alternative to &#x60;testOrder&#x60; as a shortcut for retrieving a template and then creating an order using that template. Acceptable values are: - \&quot;&#x60;template1&#x60;\&quot; - \&quot;&#x60;template1a&#x60;\&quot; - \&quot;&#x60;template1b&#x60;\&quot; - \&quot;&#x60;template2&#x60;\&quot; - \&quot;&#x60;template3&#x60;\&quot; 
   * @return templateName
   */
  @javax.annotation.Nullable
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }


  public OrdersCreateTestOrderRequest testOrder(TestOrder testOrder) {
    this.testOrder = testOrder;
    return this;
  }

  /**
   * Get testOrder
   * @return testOrder
   */
  @javax.annotation.Nullable
  public TestOrder getTestOrder() {
    return testOrder;
  }

  public void setTestOrder(TestOrder testOrder) {
    this.testOrder = testOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrdersCreateTestOrderRequest ordersCreateTestOrderRequest = (OrdersCreateTestOrderRequest) o;
    return Objects.equals(this.country, ordersCreateTestOrderRequest.country) &&
        Objects.equals(this.templateName, ordersCreateTestOrderRequest.templateName) &&
        Objects.equals(this.testOrder, ordersCreateTestOrderRequest.testOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, templateName, testOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrdersCreateTestOrderRequest {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    testOrder: ").append(toIndentedString(testOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("templateName");
    openapiFields.add("testOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrdersCreateTestOrderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrdersCreateTestOrderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrdersCreateTestOrderRequest is not found in the empty JSON string", OrdersCreateTestOrderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrdersCreateTestOrderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrdersCreateTestOrderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("templateName") != null && !jsonObj.get("templateName").isJsonNull()) && !jsonObj.get("templateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateName").toString()));
      }
      // validate the optional field `testOrder`
      if (jsonObj.get("testOrder") != null && !jsonObj.get("testOrder").isJsonNull()) {
        TestOrder.validateJsonElement(jsonObj.get("testOrder"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrdersCreateTestOrderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrdersCreateTestOrderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrdersCreateTestOrderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrdersCreateTestOrderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OrdersCreateTestOrderRequest>() {
           @Override
           public void write(JsonWriter out, OrdersCreateTestOrderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrdersCreateTestOrderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrdersCreateTestOrderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrdersCreateTestOrderRequest
   * @throws IOException if the JSON string is invalid with respect to OrdersCreateTestOrderRequest
   */
  public static OrdersCreateTestOrderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrdersCreateTestOrderRequest.class);
  }

  /**
   * Convert an instance of OrdersCreateTestOrderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

