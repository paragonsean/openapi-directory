/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountAdwordsLink;
import org.openapitools.client.model.AccountBusinessInformation;
import org.openapitools.client.model.AccountGoogleMyBusinessLink;
import org.openapitools.client.model.AccountUser;
import org.openapitools.client.model.AccountYouTubeChannelLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account data. After the creation of a new account it may take a few minutes before it is fully operational. The methods delete, insert, and update require the admin role.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_ADULT_CONTENT = "adultContent";
  @SerializedName(SERIALIZED_NAME_ADULT_CONTENT)
  private Boolean adultContent;

  public static final String SERIALIZED_NAME_ADWORDS_LINKS = "adwordsLinks";
  @SerializedName(SERIALIZED_NAME_ADWORDS_LINKS)
  private List<AccountAdwordsLink> adwordsLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUSINESS_INFORMATION = "businessInformation";
  @SerializedName(SERIALIZED_NAME_BUSINESS_INFORMATION)
  private AccountBusinessInformation businessInformation;

  public static final String SERIALIZED_NAME_GOOGLE_MY_BUSINESS_LINK = "googleMyBusinessLink";
  @SerializedName(SERIALIZED_NAME_GOOGLE_MY_BUSINESS_LINK)
  private AccountGoogleMyBusinessLink googleMyBusinessLink;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REVIEWS_URL = "reviewsUrl";
  @SerializedName(SERIALIZED_NAME_REVIEWS_URL)
  private String reviewsUrl;

  public static final String SERIALIZED_NAME_SELLER_ID = "sellerId";
  @SerializedName(SERIALIZED_NAME_SELLER_ID)
  private String sellerId;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<AccountUser> users = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEBSITE_URL = "websiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public static final String SERIALIZED_NAME_YOUTUBE_CHANNEL_LINKS = "youtubeChannelLinks";
  @SerializedName(SERIALIZED_NAME_YOUTUBE_CHANNEL_LINKS)
  private List<AccountYouTubeChannelLink> youtubeChannelLinks = new ArrayList<>();

  public Account() {
  }

  public Account adultContent(Boolean adultContent) {
    this.adultContent = adultContent;
    return this;
  }

  /**
   * Indicates whether the merchant sells adult content.
   * @return adultContent
   */
  @javax.annotation.Nullable
  public Boolean getAdultContent() {
    return adultContent;
  }

  public void setAdultContent(Boolean adultContent) {
    this.adultContent = adultContent;
  }


  public Account adwordsLinks(List<AccountAdwordsLink> adwordsLinks) {
    this.adwordsLinks = adwordsLinks;
    return this;
  }

  public Account addAdwordsLinksItem(AccountAdwordsLink adwordsLinksItem) {
    if (this.adwordsLinks == null) {
      this.adwordsLinks = new ArrayList<>();
    }
    this.adwordsLinks.add(adwordsLinksItem);
    return this;
  }

  /**
   * List of linked AdWords accounts that are active or pending approval. To create a new link request, add a new link with status &#x60;active&#x60; to the list. It will remain in a &#x60;pending&#x60; state until approved or rejected either in the AdWords interface or through the AdWords API. To delete an active link, or to cancel a link request, remove it from the list.
   * @return adwordsLinks
   */
  @javax.annotation.Nullable
  public List<AccountAdwordsLink> getAdwordsLinks() {
    return adwordsLinks;
  }

  public void setAdwordsLinks(List<AccountAdwordsLink> adwordsLinks) {
    this.adwordsLinks = adwordsLinks;
  }


  public Account businessInformation(AccountBusinessInformation businessInformation) {
    this.businessInformation = businessInformation;
    return this;
  }

  /**
   * Get businessInformation
   * @return businessInformation
   */
  @javax.annotation.Nullable
  public AccountBusinessInformation getBusinessInformation() {
    return businessInformation;
  }

  public void setBusinessInformation(AccountBusinessInformation businessInformation) {
    this.businessInformation = businessInformation;
  }


  public Account googleMyBusinessLink(AccountGoogleMyBusinessLink googleMyBusinessLink) {
    this.googleMyBusinessLink = googleMyBusinessLink;
    return this;
  }

  /**
   * Get googleMyBusinessLink
   * @return googleMyBusinessLink
   */
  @javax.annotation.Nullable
  public AccountGoogleMyBusinessLink getGoogleMyBusinessLink() {
    return googleMyBusinessLink;
  }

  public void setGoogleMyBusinessLink(AccountGoogleMyBusinessLink googleMyBusinessLink) {
    this.googleMyBusinessLink = googleMyBusinessLink;
  }


  public Account id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required for update. Merchant Center account ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Account kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;&#x60;content#account&#x60;\&quot;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Account name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Display name for the account.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Account reviewsUrl(String reviewsUrl) {
    this.reviewsUrl = reviewsUrl;
    return this;
  }

  /**
   * [DEPRECATED] This field is never returned and will be ignored if provided.
   * @return reviewsUrl
   */
  @javax.annotation.Nullable
  public String getReviewsUrl() {
    return reviewsUrl;
  }

  public void setReviewsUrl(String reviewsUrl) {
    this.reviewsUrl = reviewsUrl;
  }


  public Account sellerId(String sellerId) {
    this.sellerId = sellerId;
    return this;
  }

  /**
   * Client-specific, locally-unique, internal ID for the child account.
   * @return sellerId
   */
  @javax.annotation.Nullable
  public String getSellerId() {
    return sellerId;
  }

  public void setSellerId(String sellerId) {
    this.sellerId = sellerId;
  }


  public Account users(List<AccountUser> users) {
    this.users = users;
    return this;
  }

  public Account addUsersItem(AccountUser usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * Users with access to the account. Every account (except for subaccounts) must have at least one admin user.
   * @return users
   */
  @javax.annotation.Nullable
  public List<AccountUser> getUsers() {
    return users;
  }

  public void setUsers(List<AccountUser> users) {
    this.users = users;
  }


  public Account websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * The merchant&#39;s website.
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }


  public Account youtubeChannelLinks(List<AccountYouTubeChannelLink> youtubeChannelLinks) {
    this.youtubeChannelLinks = youtubeChannelLinks;
    return this;
  }

  public Account addYoutubeChannelLinksItem(AccountYouTubeChannelLink youtubeChannelLinksItem) {
    if (this.youtubeChannelLinks == null) {
      this.youtubeChannelLinks = new ArrayList<>();
    }
    this.youtubeChannelLinks.add(youtubeChannelLinksItem);
    return this;
  }

  /**
   * List of linked YouTube channels that are active or pending approval. To create a new link request, add a new link with status &#x60;active&#x60; to the list. It will remain in a &#x60;pending&#x60; state until approved or rejected in the YT Creator Studio interface. To delete an active link, or to cancel a link request, remove it from the list.
   * @return youtubeChannelLinks
   */
  @javax.annotation.Nullable
  public List<AccountYouTubeChannelLink> getYoutubeChannelLinks() {
    return youtubeChannelLinks;
  }

  public void setYoutubeChannelLinks(List<AccountYouTubeChannelLink> youtubeChannelLinks) {
    this.youtubeChannelLinks = youtubeChannelLinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.adultContent, account.adultContent) &&
        Objects.equals(this.adwordsLinks, account.adwordsLinks) &&
        Objects.equals(this.businessInformation, account.businessInformation) &&
        Objects.equals(this.googleMyBusinessLink, account.googleMyBusinessLink) &&
        Objects.equals(this.id, account.id) &&
        Objects.equals(this.kind, account.kind) &&
        Objects.equals(this.name, account.name) &&
        Objects.equals(this.reviewsUrl, account.reviewsUrl) &&
        Objects.equals(this.sellerId, account.sellerId) &&
        Objects.equals(this.users, account.users) &&
        Objects.equals(this.websiteUrl, account.websiteUrl) &&
        Objects.equals(this.youtubeChannelLinks, account.youtubeChannelLinks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adultContent, adwordsLinks, businessInformation, googleMyBusinessLink, id, kind, name, reviewsUrl, sellerId, users, websiteUrl, youtubeChannelLinks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    adultContent: ").append(toIndentedString(adultContent)).append("\n");
    sb.append("    adwordsLinks: ").append(toIndentedString(adwordsLinks)).append("\n");
    sb.append("    businessInformation: ").append(toIndentedString(businessInformation)).append("\n");
    sb.append("    googleMyBusinessLink: ").append(toIndentedString(googleMyBusinessLink)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reviewsUrl: ").append(toIndentedString(reviewsUrl)).append("\n");
    sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("    youtubeChannelLinks: ").append(toIndentedString(youtubeChannelLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adultContent");
    openapiFields.add("adwordsLinks");
    openapiFields.add("businessInformation");
    openapiFields.add("googleMyBusinessLink");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("reviewsUrl");
    openapiFields.add("sellerId");
    openapiFields.add("users");
    openapiFields.add("websiteUrl");
    openapiFields.add("youtubeChannelLinks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("adwordsLinks") != null && !jsonObj.get("adwordsLinks").isJsonNull()) {
        JsonArray jsonArrayadwordsLinks = jsonObj.getAsJsonArray("adwordsLinks");
        if (jsonArrayadwordsLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("adwordsLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `adwordsLinks` to be an array in the JSON string but got `%s`", jsonObj.get("adwordsLinks").toString()));
          }

          // validate the optional field `adwordsLinks` (array)
          for (int i = 0; i < jsonArrayadwordsLinks.size(); i++) {
            AccountAdwordsLink.validateJsonElement(jsonArrayadwordsLinks.get(i));
          };
        }
      }
      // validate the optional field `businessInformation`
      if (jsonObj.get("businessInformation") != null && !jsonObj.get("businessInformation").isJsonNull()) {
        AccountBusinessInformation.validateJsonElement(jsonObj.get("businessInformation"));
      }
      // validate the optional field `googleMyBusinessLink`
      if (jsonObj.get("googleMyBusinessLink") != null && !jsonObj.get("googleMyBusinessLink").isJsonNull()) {
        AccountGoogleMyBusinessLink.validateJsonElement(jsonObj.get("googleMyBusinessLink"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("reviewsUrl") != null && !jsonObj.get("reviewsUrl").isJsonNull()) && !jsonObj.get("reviewsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewsUrl").toString()));
      }
      if ((jsonObj.get("sellerId") != null && !jsonObj.get("sellerId").isJsonNull()) && !jsonObj.get("sellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerId").toString()));
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            AccountUser.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
      if ((jsonObj.get("websiteUrl") != null && !jsonObj.get("websiteUrl").isJsonNull()) && !jsonObj.get("websiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteUrl").toString()));
      }
      if (jsonObj.get("youtubeChannelLinks") != null && !jsonObj.get("youtubeChannelLinks").isJsonNull()) {
        JsonArray jsonArrayyoutubeChannelLinks = jsonObj.getAsJsonArray("youtubeChannelLinks");
        if (jsonArrayyoutubeChannelLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("youtubeChannelLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `youtubeChannelLinks` to be an array in the JSON string but got `%s`", jsonObj.get("youtubeChannelLinks").toString()));
          }

          // validate the optional field `youtubeChannelLinks` (array)
          for (int i = 0; i < jsonArrayyoutubeChannelLinks.size(); i++) {
            AccountYouTubeChannelLink.validateJsonElement(jsonArrayyoutubeChannelLinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

