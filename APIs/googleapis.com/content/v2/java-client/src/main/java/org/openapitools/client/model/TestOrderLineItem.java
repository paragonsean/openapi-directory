/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrderLineItemReturnInfo;
import org.openapitools.client.model.OrderLineItemShippingDetails;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.TestOrderLineItemProduct;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestOrderLineItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestOrderLineItem {
  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private TestOrderLineItemProduct product;

  public static final String SERIALIZED_NAME_QUANTITY_ORDERED = "quantityOrdered";
  @SerializedName(SERIALIZED_NAME_QUANTITY_ORDERED)
  private Integer quantityOrdered;

  public static final String SERIALIZED_NAME_RETURN_INFO = "returnInfo";
  @SerializedName(SERIALIZED_NAME_RETURN_INFO)
  private OrderLineItemReturnInfo returnInfo;

  public static final String SERIALIZED_NAME_SHIPPING_DETAILS = "shippingDetails";
  @SerializedName(SERIALIZED_NAME_SHIPPING_DETAILS)
  private OrderLineItemShippingDetails shippingDetails;

  public static final String SERIALIZED_NAME_UNIT_TAX = "unitTax";
  @SerializedName(SERIALIZED_NAME_UNIT_TAX)
  private Price unitTax;

  public TestOrderLineItem() {
  }

  public TestOrderLineItem product(TestOrderLineItemProduct product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public TestOrderLineItemProduct getProduct() {
    return product;
  }

  public void setProduct(TestOrderLineItemProduct product) {
    this.product = product;
  }


  public TestOrderLineItem quantityOrdered(Integer quantityOrdered) {
    this.quantityOrdered = quantityOrdered;
    return this;
  }

  /**
   * Required. Number of items ordered.
   * @return quantityOrdered
   */
  @javax.annotation.Nullable
  public Integer getQuantityOrdered() {
    return quantityOrdered;
  }

  public void setQuantityOrdered(Integer quantityOrdered) {
    this.quantityOrdered = quantityOrdered;
  }


  public TestOrderLineItem returnInfo(OrderLineItemReturnInfo returnInfo) {
    this.returnInfo = returnInfo;
    return this;
  }

  /**
   * Get returnInfo
   * @return returnInfo
   */
  @javax.annotation.Nullable
  public OrderLineItemReturnInfo getReturnInfo() {
    return returnInfo;
  }

  public void setReturnInfo(OrderLineItemReturnInfo returnInfo) {
    this.returnInfo = returnInfo;
  }


  public TestOrderLineItem shippingDetails(OrderLineItemShippingDetails shippingDetails) {
    this.shippingDetails = shippingDetails;
    return this;
  }

  /**
   * Get shippingDetails
   * @return shippingDetails
   */
  @javax.annotation.Nullable
  public OrderLineItemShippingDetails getShippingDetails() {
    return shippingDetails;
  }

  public void setShippingDetails(OrderLineItemShippingDetails shippingDetails) {
    this.shippingDetails = shippingDetails;
  }


  public TestOrderLineItem unitTax(Price unitTax) {
    this.unitTax = unitTax;
    return this;
  }

  /**
   * Get unitTax
   * @return unitTax
   */
  @javax.annotation.Nullable
  public Price getUnitTax() {
    return unitTax;
  }

  public void setUnitTax(Price unitTax) {
    this.unitTax = unitTax;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestOrderLineItem testOrderLineItem = (TestOrderLineItem) o;
    return Objects.equals(this.product, testOrderLineItem.product) &&
        Objects.equals(this.quantityOrdered, testOrderLineItem.quantityOrdered) &&
        Objects.equals(this.returnInfo, testOrderLineItem.returnInfo) &&
        Objects.equals(this.shippingDetails, testOrderLineItem.shippingDetails) &&
        Objects.equals(this.unitTax, testOrderLineItem.unitTax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(product, quantityOrdered, returnInfo, shippingDetails, unitTax);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestOrderLineItem {\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    quantityOrdered: ").append(toIndentedString(quantityOrdered)).append("\n");
    sb.append("    returnInfo: ").append(toIndentedString(returnInfo)).append("\n");
    sb.append("    shippingDetails: ").append(toIndentedString(shippingDetails)).append("\n");
    sb.append("    unitTax: ").append(toIndentedString(unitTax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("product");
    openapiFields.add("quantityOrdered");
    openapiFields.add("returnInfo");
    openapiFields.add("shippingDetails");
    openapiFields.add("unitTax");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestOrderLineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestOrderLineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestOrderLineItem is not found in the empty JSON string", TestOrderLineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestOrderLineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestOrderLineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        TestOrderLineItemProduct.validateJsonElement(jsonObj.get("product"));
      }
      // validate the optional field `returnInfo`
      if (jsonObj.get("returnInfo") != null && !jsonObj.get("returnInfo").isJsonNull()) {
        OrderLineItemReturnInfo.validateJsonElement(jsonObj.get("returnInfo"));
      }
      // validate the optional field `shippingDetails`
      if (jsonObj.get("shippingDetails") != null && !jsonObj.get("shippingDetails").isJsonNull()) {
        OrderLineItemShippingDetails.validateJsonElement(jsonObj.get("shippingDetails"));
      }
      // validate the optional field `unitTax`
      if (jsonObj.get("unitTax") != null && !jsonObj.get("unitTax").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("unitTax"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestOrderLineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestOrderLineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestOrderLineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestOrderLineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<TestOrderLineItem>() {
           @Override
           public void write(JsonWriter out, TestOrderLineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestOrderLineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestOrderLineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestOrderLineItem
   * @throws IOException if the JSON string is invalid with respect to TestOrderLineItem
   */
  public static TestOrderLineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestOrderLineItem.class);
  }

  /**
   * Convert an instance of TestOrderLineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

