/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrdersReturnRefundLineItemRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrdersReturnRefundLineItemRequest {
  public static final String SERIALIZED_NAME_AMOUNT_PRETAX = "amountPretax";
  @SerializedName(SERIALIZED_NAME_AMOUNT_PRETAX)
  private Price amountPretax;

  public static final String SERIALIZED_NAME_AMOUNT_TAX = "amountTax";
  @SerializedName(SERIALIZED_NAME_AMOUNT_TAX)
  private Price amountTax;

  public static final String SERIALIZED_NAME_LINE_ITEM_ID = "lineItemId";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_ID)
  private String lineItemId;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_REASON_TEXT = "reasonText";
  @SerializedName(SERIALIZED_NAME_REASON_TEXT)
  private String reasonText;

  public OrdersReturnRefundLineItemRequest() {
  }

  public OrdersReturnRefundLineItemRequest amountPretax(Price amountPretax) {
    this.amountPretax = amountPretax;
    return this;
  }

  /**
   * Get amountPretax
   * @return amountPretax
   */
  @javax.annotation.Nullable
  public Price getAmountPretax() {
    return amountPretax;
  }

  public void setAmountPretax(Price amountPretax) {
    this.amountPretax = amountPretax;
  }


  public OrdersReturnRefundLineItemRequest amountTax(Price amountTax) {
    this.amountTax = amountTax;
    return this;
  }

  /**
   * Get amountTax
   * @return amountTax
   */
  @javax.annotation.Nullable
  public Price getAmountTax() {
    return amountTax;
  }

  public void setAmountTax(Price amountTax) {
    this.amountTax = amountTax;
  }


  public OrdersReturnRefundLineItemRequest lineItemId(String lineItemId) {
    this.lineItemId = lineItemId;
    return this;
  }

  /**
   * The ID of the line item to return. Either lineItemId or productId is required.
   * @return lineItemId
   */
  @javax.annotation.Nullable
  public String getLineItemId() {
    return lineItemId;
  }

  public void setLineItemId(String lineItemId) {
    this.lineItemId = lineItemId;
  }


  public OrdersReturnRefundLineItemRequest operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * The ID of the operation. Unique across all operations for a given order.
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public OrdersReturnRefundLineItemRequest productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * The ID of the product to return. This is the REST ID used in the products service. Either lineItemId or productId is required.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public OrdersReturnRefundLineItemRequest quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The quantity to return and refund. Quantity is required.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public OrdersReturnRefundLineItemRequest reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason for the return. Acceptable values are: - \&quot;&#x60;customerDiscretionaryReturn&#x60;\&quot; - \&quot;&#x60;customerInitiatedMerchantCancel&#x60;\&quot; - \&quot;&#x60;deliveredTooLate&#x60;\&quot; - \&quot;&#x60;expiredItem&#x60;\&quot; - \&quot;&#x60;invalidCoupon&#x60;\&quot; - \&quot;&#x60;malformedShippingAddress&#x60;\&quot; - \&quot;&#x60;other&#x60;\&quot; - \&quot;&#x60;productArrivedDamaged&#x60;\&quot; - \&quot;&#x60;productNotAsDescribed&#x60;\&quot; - \&quot;&#x60;qualityNotAsExpected&#x60;\&quot; - \&quot;&#x60;undeliverableShippingAddress&#x60;\&quot; - \&quot;&#x60;unsupportedPoBoxAddress&#x60;\&quot; - \&quot;&#x60;wrongProductShipped&#x60;\&quot; 
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public OrdersReturnRefundLineItemRequest reasonText(String reasonText) {
    this.reasonText = reasonText;
    return this;
  }

  /**
   * The explanation of the reason.
   * @return reasonText
   */
  @javax.annotation.Nullable
  public String getReasonText() {
    return reasonText;
  }

  public void setReasonText(String reasonText) {
    this.reasonText = reasonText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrdersReturnRefundLineItemRequest ordersReturnRefundLineItemRequest = (OrdersReturnRefundLineItemRequest) o;
    return Objects.equals(this.amountPretax, ordersReturnRefundLineItemRequest.amountPretax) &&
        Objects.equals(this.amountTax, ordersReturnRefundLineItemRequest.amountTax) &&
        Objects.equals(this.lineItemId, ordersReturnRefundLineItemRequest.lineItemId) &&
        Objects.equals(this.operationId, ordersReturnRefundLineItemRequest.operationId) &&
        Objects.equals(this.productId, ordersReturnRefundLineItemRequest.productId) &&
        Objects.equals(this.quantity, ordersReturnRefundLineItemRequest.quantity) &&
        Objects.equals(this.reason, ordersReturnRefundLineItemRequest.reason) &&
        Objects.equals(this.reasonText, ordersReturnRefundLineItemRequest.reasonText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountPretax, amountTax, lineItemId, operationId, productId, quantity, reason, reasonText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrdersReturnRefundLineItemRequest {\n");
    sb.append("    amountPretax: ").append(toIndentedString(amountPretax)).append("\n");
    sb.append("    amountTax: ").append(toIndentedString(amountTax)).append("\n");
    sb.append("    lineItemId: ").append(toIndentedString(lineItemId)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    reasonText: ").append(toIndentedString(reasonText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amountPretax");
    openapiFields.add("amountTax");
    openapiFields.add("lineItemId");
    openapiFields.add("operationId");
    openapiFields.add("productId");
    openapiFields.add("quantity");
    openapiFields.add("reason");
    openapiFields.add("reasonText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrdersReturnRefundLineItemRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrdersReturnRefundLineItemRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrdersReturnRefundLineItemRequest is not found in the empty JSON string", OrdersReturnRefundLineItemRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrdersReturnRefundLineItemRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrdersReturnRefundLineItemRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `amountPretax`
      if (jsonObj.get("amountPretax") != null && !jsonObj.get("amountPretax").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("amountPretax"));
      }
      // validate the optional field `amountTax`
      if (jsonObj.get("amountTax") != null && !jsonObj.get("amountTax").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("amountTax"));
      }
      if ((jsonObj.get("lineItemId") != null && !jsonObj.get("lineItemId").isJsonNull()) && !jsonObj.get("lineItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineItemId").toString()));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("reasonText") != null && !jsonObj.get("reasonText").isJsonNull()) && !jsonObj.get("reasonText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrdersReturnRefundLineItemRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrdersReturnRefundLineItemRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrdersReturnRefundLineItemRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrdersReturnRefundLineItemRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OrdersReturnRefundLineItemRequest>() {
           @Override
           public void write(JsonWriter out, OrdersReturnRefundLineItemRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrdersReturnRefundLineItemRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrdersReturnRefundLineItemRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrdersReturnRefundLineItemRequest
   * @throws IOException if the JSON string is invalid with respect to OrdersReturnRefundLineItemRequest
   */
  public static OrdersReturnRefundLineItemRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrdersReturnRefundLineItemRequest.class);
  }

  /**
   * Convert an instance of OrdersReturnRefundLineItemRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

