/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LocationIdSet;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.Weight;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A non-empty list of row or column headers for a table. Exactly one of &#x60;prices&#x60;, &#x60;weights&#x60;, &#x60;numItems&#x60;, &#x60;postalCodeGroupNames&#x60;, or &#x60;location&#x60; must be set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Headers {
  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<LocationIdSet> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_ITEMS = "numberOfItems";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ITEMS)
  private List<String> numberOfItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSTAL_CODE_GROUP_NAMES = "postalCodeGroupNames";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE_GROUP_NAMES)
  private List<String> postalCodeGroupNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICES = "prices";
  @SerializedName(SERIALIZED_NAME_PRICES)
  private List<Price> prices = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEIGHTS = "weights";
  @SerializedName(SERIALIZED_NAME_WEIGHTS)
  private List<Weight> weights = new ArrayList<>();

  public Headers() {
  }

  public Headers locations(List<LocationIdSet> locations) {
    this.locations = locations;
    return this;
  }

  public Headers addLocationsItem(LocationIdSet locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * A list of location ID sets. Must be non-empty. Can only be set if all other fields are not set.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<LocationIdSet> getLocations() {
    return locations;
  }

  public void setLocations(List<LocationIdSet> locations) {
    this.locations = locations;
  }


  public Headers numberOfItems(List<String> numberOfItems) {
    this.numberOfItems = numberOfItems;
    return this;
  }

  public Headers addNumberOfItemsItem(String numberOfItemsItem) {
    if (this.numberOfItems == null) {
      this.numberOfItems = new ArrayList<>();
    }
    this.numberOfItems.add(numberOfItemsItem);
    return this;
  }

  /**
   * A list of inclusive number of items upper bounds. The last value can be &#x60;\&quot;infinity\&quot;&#x60;. For example &#x60;[\&quot;10\&quot;, \&quot;50\&quot;, \&quot;infinity\&quot;]&#x60; represents the headers \&quot;&lt;&#x3D; 10 items\&quot;, \&quot;&lt;&#x3D; 50 items\&quot;, and \&quot;&gt; 50 items\&quot;. Must be non-empty. Can only be set if all other fields are not set.
   * @return numberOfItems
   */
  @javax.annotation.Nullable
  public List<String> getNumberOfItems() {
    return numberOfItems;
  }

  public void setNumberOfItems(List<String> numberOfItems) {
    this.numberOfItems = numberOfItems;
  }


  public Headers postalCodeGroupNames(List<String> postalCodeGroupNames) {
    this.postalCodeGroupNames = postalCodeGroupNames;
    return this;
  }

  public Headers addPostalCodeGroupNamesItem(String postalCodeGroupNamesItem) {
    if (this.postalCodeGroupNames == null) {
      this.postalCodeGroupNames = new ArrayList<>();
    }
    this.postalCodeGroupNames.add(postalCodeGroupNamesItem);
    return this;
  }

  /**
   * A list of postal group names. The last value can be &#x60;\&quot;all other locations\&quot;&#x60;. Example: &#x60;[\&quot;zone 1\&quot;, \&quot;zone 2\&quot;, \&quot;all other locations\&quot;]&#x60;. The referred postal code groups must match the delivery country of the service. Must be non-empty. Can only be set if all other fields are not set.
   * @return postalCodeGroupNames
   */
  @javax.annotation.Nullable
  public List<String> getPostalCodeGroupNames() {
    return postalCodeGroupNames;
  }

  public void setPostalCodeGroupNames(List<String> postalCodeGroupNames) {
    this.postalCodeGroupNames = postalCodeGroupNames;
  }


  public Headers prices(List<Price> prices) {
    this.prices = prices;
    return this;
  }

  public Headers addPricesItem(Price pricesItem) {
    if (this.prices == null) {
      this.prices = new ArrayList<>();
    }
    this.prices.add(pricesItem);
    return this;
  }

  /**
   * A list of inclusive order price upper bounds. The last price&#39;s value can be &#x60;\&quot;infinity\&quot;&#x60;. For example &#x60;[{\&quot;value\&quot;: \&quot;10\&quot;, \&quot;currency\&quot;: \&quot;USD\&quot;}, {\&quot;value\&quot;: \&quot;500\&quot;, \&quot;currency\&quot;: \&quot;USD\&quot;}, {\&quot;value\&quot;: \&quot;infinity\&quot;, \&quot;currency\&quot;: \&quot;USD\&quot;}]&#x60; represents the headers \&quot;&lt;&#x3D; $10\&quot;, \&quot;&lt;&#x3D; $500\&quot;, and \&quot;&gt; $500\&quot;. All prices within a service must have the same currency. Must be non-empty. Can only be set if all other fields are not set.
   * @return prices
   */
  @javax.annotation.Nullable
  public List<Price> getPrices() {
    return prices;
  }

  public void setPrices(List<Price> prices) {
    this.prices = prices;
  }


  public Headers weights(List<Weight> weights) {
    this.weights = weights;
    return this;
  }

  public Headers addWeightsItem(Weight weightsItem) {
    if (this.weights == null) {
      this.weights = new ArrayList<>();
    }
    this.weights.add(weightsItem);
    return this;
  }

  /**
   * A list of inclusive order weight upper bounds. The last weight&#39;s value can be &#x60;\&quot;infinity\&quot;&#x60;. For example &#x60;[{\&quot;value\&quot;: \&quot;10\&quot;, \&quot;unit\&quot;: \&quot;kg\&quot;}, {\&quot;value\&quot;: \&quot;50\&quot;, \&quot;unit\&quot;: \&quot;kg\&quot;}, {\&quot;value\&quot;: \&quot;infinity\&quot;, \&quot;unit\&quot;: \&quot;kg\&quot;}]&#x60; represents the headers \&quot;&lt;&#x3D; 10kg\&quot;, \&quot;&lt;&#x3D; 50kg\&quot;, and \&quot;&gt; 50kg\&quot;. All weights within a service must have the same unit. Must be non-empty. Can only be set if all other fields are not set.
   * @return weights
   */
  @javax.annotation.Nullable
  public List<Weight> getWeights() {
    return weights;
  }

  public void setWeights(List<Weight> weights) {
    this.weights = weights;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Headers headers = (Headers) o;
    return Objects.equals(this.locations, headers.locations) &&
        Objects.equals(this.numberOfItems, headers.numberOfItems) &&
        Objects.equals(this.postalCodeGroupNames, headers.postalCodeGroupNames) &&
        Objects.equals(this.prices, headers.prices) &&
        Objects.equals(this.weights, headers.weights);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locations, numberOfItems, postalCodeGroupNames, prices, weights);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Headers {\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    numberOfItems: ").append(toIndentedString(numberOfItems)).append("\n");
    sb.append("    postalCodeGroupNames: ").append(toIndentedString(postalCodeGroupNames)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("    weights: ").append(toIndentedString(weights)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locations");
    openapiFields.add("numberOfItems");
    openapiFields.add("postalCodeGroupNames");
    openapiFields.add("prices");
    openapiFields.add("weights");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Headers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Headers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Headers is not found in the empty JSON string", Headers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Headers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Headers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            LocationIdSet.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("numberOfItems") != null && !jsonObj.get("numberOfItems").isJsonNull() && !jsonObj.get("numberOfItems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberOfItems` to be an array in the JSON string but got `%s`", jsonObj.get("numberOfItems").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("postalCodeGroupNames") != null && !jsonObj.get("postalCodeGroupNames").isJsonNull() && !jsonObj.get("postalCodeGroupNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCodeGroupNames` to be an array in the JSON string but got `%s`", jsonObj.get("postalCodeGroupNames").toString()));
      }
      if (jsonObj.get("prices") != null && !jsonObj.get("prices").isJsonNull()) {
        JsonArray jsonArrayprices = jsonObj.getAsJsonArray("prices");
        if (jsonArrayprices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("prices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `prices` to be an array in the JSON string but got `%s`", jsonObj.get("prices").toString()));
          }

          // validate the optional field `prices` (array)
          for (int i = 0; i < jsonArrayprices.size(); i++) {
            Price.validateJsonElement(jsonArrayprices.get(i));
          };
        }
      }
      if (jsonObj.get("weights") != null && !jsonObj.get("weights").isJsonNull()) {
        JsonArray jsonArrayweights = jsonObj.getAsJsonArray("weights");
        if (jsonArrayweights != null) {
          // ensure the json data is an array
          if (!jsonObj.get("weights").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `weights` to be an array in the JSON string but got `%s`", jsonObj.get("weights").toString()));
          }

          // validate the optional field `weights` (array)
          for (int i = 0; i < jsonArrayweights.size(); i++) {
            Weight.validateJsonElement(jsonArrayweights.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Headers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Headers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Headers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Headers.class));

       return (TypeAdapter<T>) new TypeAdapter<Headers>() {
           @Override
           public void write(JsonWriter out, Headers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Headers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Headers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Headers
   * @throws IOException if the JSON string is invalid with respect to Headers
   */
  public static Headers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Headers.class);
  }

  /**
   * Convert an instance of Headers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

