/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The absolute quantity of an item available at the given store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PosInventory {
  public static final String SERIALIZED_NAME_CONTENT_LANGUAGE = "contentLanguage";
  @SerializedName(SERIALIZED_NAME_CONTENT_LANGUAGE)
  private String contentLanguage;

  public static final String SERIALIZED_NAME_GTIN = "gtin";
  @SerializedName(SERIALIZED_NAME_GTIN)
  private String gtin;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Price price;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private String quantity;

  public static final String SERIALIZED_NAME_STORE_CODE = "storeCode";
  @SerializedName(SERIALIZED_NAME_STORE_CODE)
  private String storeCode;

  public static final String SERIALIZED_NAME_TARGET_COUNTRY = "targetCountry";
  @SerializedName(SERIALIZED_NAME_TARGET_COUNTRY)
  private String targetCountry;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public PosInventory() {
  }

  public PosInventory contentLanguage(String contentLanguage) {
    this.contentLanguage = contentLanguage;
    return this;
  }

  /**
   * Required. The two-letter ISO 639-1 language code for the item.
   * @return contentLanguage
   */
  @javax.annotation.Nullable
  public String getContentLanguage() {
    return contentLanguage;
  }

  public void setContentLanguage(String contentLanguage) {
    this.contentLanguage = contentLanguage;
  }


  public PosInventory gtin(String gtin) {
    this.gtin = gtin;
    return this;
  }

  /**
   * Global Trade Item Number.
   * @return gtin
   */
  @javax.annotation.Nullable
  public String getGtin() {
    return gtin;
  }

  public void setGtin(String gtin) {
    this.gtin = gtin;
  }


  public PosInventory itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Required. A unique identifier for the item.
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public PosInventory kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;&#x60;content#posInventory&#x60;\&quot;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public PosInventory price(Price price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Price getPrice() {
    return price;
  }

  public void setPrice(Price price) {
    this.price = price;
  }


  public PosInventory quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Required. The available quantity of the item.
   * @return quantity
   */
  @javax.annotation.Nullable
  public String getQuantity() {
    return quantity;
  }

  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }


  public PosInventory storeCode(String storeCode) {
    this.storeCode = storeCode;
    return this;
  }

  /**
   * Required. The identifier of the merchant&#39;s store. Either a &#x60;storeCode&#x60; inserted via the API or the code of the store in Google My Business.
   * @return storeCode
   */
  @javax.annotation.Nullable
  public String getStoreCode() {
    return storeCode;
  }

  public void setStoreCode(String storeCode) {
    this.storeCode = storeCode;
  }


  public PosInventory targetCountry(String targetCountry) {
    this.targetCountry = targetCountry;
    return this;
  }

  /**
   * Required. The CLDR territory code for the item.
   * @return targetCountry
   */
  @javax.annotation.Nullable
  public String getTargetCountry() {
    return targetCountry;
  }

  public void setTargetCountry(String targetCountry) {
    this.targetCountry = targetCountry;
  }


  public PosInventory timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Required. The inventory timestamp, in ISO 8601 format.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PosInventory posInventory = (PosInventory) o;
    return Objects.equals(this.contentLanguage, posInventory.contentLanguage) &&
        Objects.equals(this.gtin, posInventory.gtin) &&
        Objects.equals(this.itemId, posInventory.itemId) &&
        Objects.equals(this.kind, posInventory.kind) &&
        Objects.equals(this.price, posInventory.price) &&
        Objects.equals(this.quantity, posInventory.quantity) &&
        Objects.equals(this.storeCode, posInventory.storeCode) &&
        Objects.equals(this.targetCountry, posInventory.targetCountry) &&
        Objects.equals(this.timestamp, posInventory.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentLanguage, gtin, itemId, kind, price, quantity, storeCode, targetCountry, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PosInventory {\n");
    sb.append("    contentLanguage: ").append(toIndentedString(contentLanguage)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    storeCode: ").append(toIndentedString(storeCode)).append("\n");
    sb.append("    targetCountry: ").append(toIndentedString(targetCountry)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentLanguage");
    openapiFields.add("gtin");
    openapiFields.add("itemId");
    openapiFields.add("kind");
    openapiFields.add("price");
    openapiFields.add("quantity");
    openapiFields.add("storeCode");
    openapiFields.add("targetCountry");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PosInventory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PosInventory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PosInventory is not found in the empty JSON string", PosInventory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PosInventory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PosInventory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentLanguage") != null && !jsonObj.get("contentLanguage").isJsonNull()) && !jsonObj.get("contentLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentLanguage").toString()));
      }
      if ((jsonObj.get("gtin") != null && !jsonObj.get("gtin").isJsonNull()) && !jsonObj.get("gtin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gtin").toString()));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("quantity") != null && !jsonObj.get("quantity").isJsonNull()) && !jsonObj.get("quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantity").toString()));
      }
      if ((jsonObj.get("storeCode") != null && !jsonObj.get("storeCode").isJsonNull()) && !jsonObj.get("storeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeCode").toString()));
      }
      if ((jsonObj.get("targetCountry") != null && !jsonObj.get("targetCountry").isJsonNull()) && !jsonObj.get("targetCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetCountry").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PosInventory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PosInventory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PosInventory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PosInventory.class));

       return (TypeAdapter<T>) new TypeAdapter<PosInventory>() {
           @Override
           public void write(JsonWriter out, PosInventory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PosInventory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PosInventory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PosInventory
   * @throws IOException if the JSON string is invalid with respect to PosInventory
   */
  public static PosInventory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PosInventory.class);
  }

  /**
   * Convert an instance of PosInventory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

