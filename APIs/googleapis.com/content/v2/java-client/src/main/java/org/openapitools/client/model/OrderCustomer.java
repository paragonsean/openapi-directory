/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrderCustomerMarketingRightsInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderCustomer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderCustomer {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPLICIT_MARKETING_PREFERENCE = "explicitMarketingPreference";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_MARKETING_PREFERENCE)
  private Boolean explicitMarketingPreference;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_INVOICE_RECEIVING_EMAIL = "invoiceReceivingEmail";
  @SerializedName(SERIALIZED_NAME_INVOICE_RECEIVING_EMAIL)
  private String invoiceReceivingEmail;

  public static final String SERIALIZED_NAME_MARKETING_RIGHTS_INFO = "marketingRightsInfo";
  @SerializedName(SERIALIZED_NAME_MARKETING_RIGHTS_INFO)
  private OrderCustomerMarketingRightsInfo marketingRightsInfo;

  public OrderCustomer() {
  }

  public OrderCustomer email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Deprecated.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public OrderCustomer explicitMarketingPreference(Boolean explicitMarketingPreference) {
    this.explicitMarketingPreference = explicitMarketingPreference;
    return this;
  }

  /**
   * Deprecated. Please use marketingRightsInfo instead.
   * @return explicitMarketingPreference
   */
  @javax.annotation.Nullable
  public Boolean getExplicitMarketingPreference() {
    return explicitMarketingPreference;
  }

  public void setExplicitMarketingPreference(Boolean explicitMarketingPreference) {
    this.explicitMarketingPreference = explicitMarketingPreference;
  }


  public OrderCustomer fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Full name of the customer.
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public OrderCustomer invoiceReceivingEmail(String invoiceReceivingEmail) {
    this.invoiceReceivingEmail = invoiceReceivingEmail;
    return this;
  }

  /**
   * Email address for the merchant to send value-added tax or invoice documentation of the order. Only the last document sent is made available to the customer. For more information, see About automated VAT invoicing for Buy on Google.
   * @return invoiceReceivingEmail
   */
  @javax.annotation.Nullable
  public String getInvoiceReceivingEmail() {
    return invoiceReceivingEmail;
  }

  public void setInvoiceReceivingEmail(String invoiceReceivingEmail) {
    this.invoiceReceivingEmail = invoiceReceivingEmail;
  }


  public OrderCustomer marketingRightsInfo(OrderCustomerMarketingRightsInfo marketingRightsInfo) {
    this.marketingRightsInfo = marketingRightsInfo;
    return this;
  }

  /**
   * Get marketingRightsInfo
   * @return marketingRightsInfo
   */
  @javax.annotation.Nullable
  public OrderCustomerMarketingRightsInfo getMarketingRightsInfo() {
    return marketingRightsInfo;
  }

  public void setMarketingRightsInfo(OrderCustomerMarketingRightsInfo marketingRightsInfo) {
    this.marketingRightsInfo = marketingRightsInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderCustomer orderCustomer = (OrderCustomer) o;
    return Objects.equals(this.email, orderCustomer.email) &&
        Objects.equals(this.explicitMarketingPreference, orderCustomer.explicitMarketingPreference) &&
        Objects.equals(this.fullName, orderCustomer.fullName) &&
        Objects.equals(this.invoiceReceivingEmail, orderCustomer.invoiceReceivingEmail) &&
        Objects.equals(this.marketingRightsInfo, orderCustomer.marketingRightsInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, explicitMarketingPreference, fullName, invoiceReceivingEmail, marketingRightsInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderCustomer {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    explicitMarketingPreference: ").append(toIndentedString(explicitMarketingPreference)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    invoiceReceivingEmail: ").append(toIndentedString(invoiceReceivingEmail)).append("\n");
    sb.append("    marketingRightsInfo: ").append(toIndentedString(marketingRightsInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("explicitMarketingPreference");
    openapiFields.add("fullName");
    openapiFields.add("invoiceReceivingEmail");
    openapiFields.add("marketingRightsInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderCustomer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderCustomer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderCustomer is not found in the empty JSON string", OrderCustomer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderCustomer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderCustomer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("invoiceReceivingEmail") != null && !jsonObj.get("invoiceReceivingEmail").isJsonNull()) && !jsonObj.get("invoiceReceivingEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceReceivingEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceReceivingEmail").toString()));
      }
      // validate the optional field `marketingRightsInfo`
      if (jsonObj.get("marketingRightsInfo") != null && !jsonObj.get("marketingRightsInfo").isJsonNull()) {
        OrderCustomerMarketingRightsInfo.validateJsonElement(jsonObj.get("marketingRightsInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderCustomer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderCustomer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderCustomer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderCustomer.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderCustomer>() {
           @Override
           public void write(JsonWriter out, OrderCustomer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderCustomer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderCustomer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderCustomer
   * @throws IOException if the JSON string is invalid with respect to OrderCustomer
   */
  public static OrderCustomer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderCustomer.class);
  }

  /**
   * Convert an instance of OrderCustomer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

