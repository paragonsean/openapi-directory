/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.Promotion;
import org.openapitools.client.model.UnitInvoiceAdditionalCharge;
import org.openapitools.client.model.UnitInvoiceTaxLine;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UnitInvoice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UnitInvoice {
  public static final String SERIALIZED_NAME_ADDITIONAL_CHARGES = "additionalCharges";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CHARGES)
  private List<UnitInvoiceAdditionalCharge> additionalCharges = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROMOTIONS = "promotions";
  @SerializedName(SERIALIZED_NAME_PROMOTIONS)
  private List<Promotion> promotions = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_PRICE_PRETAX = "unitPricePretax";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE_PRETAX)
  private Price unitPricePretax;

  public static final String SERIALIZED_NAME_UNIT_PRICE_TAXES = "unitPriceTaxes";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE_TAXES)
  private List<UnitInvoiceTaxLine> unitPriceTaxes = new ArrayList<>();

  public UnitInvoice() {
  }

  public UnitInvoice additionalCharges(List<UnitInvoiceAdditionalCharge> additionalCharges) {
    this.additionalCharges = additionalCharges;
    return this;
  }

  public UnitInvoice addAdditionalChargesItem(UnitInvoiceAdditionalCharge additionalChargesItem) {
    if (this.additionalCharges == null) {
      this.additionalCharges = new ArrayList<>();
    }
    this.additionalCharges.add(additionalChargesItem);
    return this;
  }

  /**
   * Additional charges for a unit, e.g. shipping costs.
   * @return additionalCharges
   */
  @javax.annotation.Nullable
  public List<UnitInvoiceAdditionalCharge> getAdditionalCharges() {
    return additionalCharges;
  }

  public void setAdditionalCharges(List<UnitInvoiceAdditionalCharge> additionalCharges) {
    this.additionalCharges = additionalCharges;
  }


  public UnitInvoice promotions(List<Promotion> promotions) {
    this.promotions = promotions;
    return this;
  }

  public UnitInvoice addPromotionsItem(Promotion promotionsItem) {
    if (this.promotions == null) {
      this.promotions = new ArrayList<>();
    }
    this.promotions.add(promotionsItem);
    return this;
  }

  /**
   * Deprecated.
   * @return promotions
   */
  @javax.annotation.Nullable
  public List<Promotion> getPromotions() {
    return promotions;
  }

  public void setPromotions(List<Promotion> promotions) {
    this.promotions = promotions;
  }


  public UnitInvoice unitPricePretax(Price unitPricePretax) {
    this.unitPricePretax = unitPricePretax;
    return this;
  }

  /**
   * Get unitPricePretax
   * @return unitPricePretax
   */
  @javax.annotation.Nullable
  public Price getUnitPricePretax() {
    return unitPricePretax;
  }

  public void setUnitPricePretax(Price unitPricePretax) {
    this.unitPricePretax = unitPricePretax;
  }


  public UnitInvoice unitPriceTaxes(List<UnitInvoiceTaxLine> unitPriceTaxes) {
    this.unitPriceTaxes = unitPriceTaxes;
    return this;
  }

  public UnitInvoice addUnitPriceTaxesItem(UnitInvoiceTaxLine unitPriceTaxesItem) {
    if (this.unitPriceTaxes == null) {
      this.unitPriceTaxes = new ArrayList<>();
    }
    this.unitPriceTaxes.add(unitPriceTaxesItem);
    return this;
  }

  /**
   * Tax amounts to apply to the unit price.
   * @return unitPriceTaxes
   */
  @javax.annotation.Nullable
  public List<UnitInvoiceTaxLine> getUnitPriceTaxes() {
    return unitPriceTaxes;
  }

  public void setUnitPriceTaxes(List<UnitInvoiceTaxLine> unitPriceTaxes) {
    this.unitPriceTaxes = unitPriceTaxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnitInvoice unitInvoice = (UnitInvoice) o;
    return Objects.equals(this.additionalCharges, unitInvoice.additionalCharges) &&
        Objects.equals(this.promotions, unitInvoice.promotions) &&
        Objects.equals(this.unitPricePretax, unitInvoice.unitPricePretax) &&
        Objects.equals(this.unitPriceTaxes, unitInvoice.unitPriceTaxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalCharges, promotions, unitPricePretax, unitPriceTaxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnitInvoice {\n");
    sb.append("    additionalCharges: ").append(toIndentedString(additionalCharges)).append("\n");
    sb.append("    promotions: ").append(toIndentedString(promotions)).append("\n");
    sb.append("    unitPricePretax: ").append(toIndentedString(unitPricePretax)).append("\n");
    sb.append("    unitPriceTaxes: ").append(toIndentedString(unitPriceTaxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalCharges");
    openapiFields.add("promotions");
    openapiFields.add("unitPricePretax");
    openapiFields.add("unitPriceTaxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UnitInvoice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnitInvoice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnitInvoice is not found in the empty JSON string", UnitInvoice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UnitInvoice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnitInvoice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalCharges") != null && !jsonObj.get("additionalCharges").isJsonNull()) {
        JsonArray jsonArrayadditionalCharges = jsonObj.getAsJsonArray("additionalCharges");
        if (jsonArrayadditionalCharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalCharges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalCharges` to be an array in the JSON string but got `%s`", jsonObj.get("additionalCharges").toString()));
          }

          // validate the optional field `additionalCharges` (array)
          for (int i = 0; i < jsonArrayadditionalCharges.size(); i++) {
            UnitInvoiceAdditionalCharge.validateJsonElement(jsonArrayadditionalCharges.get(i));
          };
        }
      }
      if (jsonObj.get("promotions") != null && !jsonObj.get("promotions").isJsonNull()) {
        JsonArray jsonArraypromotions = jsonObj.getAsJsonArray("promotions");
        if (jsonArraypromotions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promotions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promotions` to be an array in the JSON string but got `%s`", jsonObj.get("promotions").toString()));
          }

          // validate the optional field `promotions` (array)
          for (int i = 0; i < jsonArraypromotions.size(); i++) {
            Promotion.validateJsonElement(jsonArraypromotions.get(i));
          };
        }
      }
      // validate the optional field `unitPricePretax`
      if (jsonObj.get("unitPricePretax") != null && !jsonObj.get("unitPricePretax").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("unitPricePretax"));
      }
      if (jsonObj.get("unitPriceTaxes") != null && !jsonObj.get("unitPriceTaxes").isJsonNull()) {
        JsonArray jsonArrayunitPriceTaxes = jsonObj.getAsJsonArray("unitPriceTaxes");
        if (jsonArrayunitPriceTaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unitPriceTaxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unitPriceTaxes` to be an array in the JSON string but got `%s`", jsonObj.get("unitPriceTaxes").toString()));
          }

          // validate the optional field `unitPriceTaxes` (array)
          for (int i = 0; i < jsonArrayunitPriceTaxes.size(); i++) {
            UnitInvoiceTaxLine.validateJsonElement(jsonArrayunitPriceTaxes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnitInvoice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnitInvoice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnitInvoice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnitInvoice.class));

       return (TypeAdapter<T>) new TypeAdapter<UnitInvoice>() {
           @Override
           public void write(JsonWriter out, UnitInvoice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnitInvoice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UnitInvoice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UnitInvoice
   * @throws IOException if the JSON string is invalid with respect to UnitInvoice
   */
  public static UnitInvoice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnitInvoice.class);
  }

  /**
   * Convert an instance of UnitInvoice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

