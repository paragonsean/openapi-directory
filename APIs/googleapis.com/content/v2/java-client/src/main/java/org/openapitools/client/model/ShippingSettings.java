/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PostalCodeGroup;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.Warehouse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The merchant account&#39;s shipping settings. All methods except getsupportedcarriers and getsupportedholidays require the admin role.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShippingSettings {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_POSTAL_CODE_GROUPS = "postalCodeGroups";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE_GROUPS)
  private List<PostalCodeGroup> postalCodeGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<Service> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_WAREHOUSES = "warehouses";
  @SerializedName(SERIALIZED_NAME_WAREHOUSES)
  private List<Warehouse> warehouses = new ArrayList<>();

  public ShippingSettings() {
  }

  public ShippingSettings accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The ID of the account to which these account shipping settings belong. Ignored upon update, always present in get request responses.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public ShippingSettings postalCodeGroups(List<PostalCodeGroup> postalCodeGroups) {
    this.postalCodeGroups = postalCodeGroups;
    return this;
  }

  public ShippingSettings addPostalCodeGroupsItem(PostalCodeGroup postalCodeGroupsItem) {
    if (this.postalCodeGroups == null) {
      this.postalCodeGroups = new ArrayList<>();
    }
    this.postalCodeGroups.add(postalCodeGroupsItem);
    return this;
  }

  /**
   * A list of postal code groups that can be referred to in &#x60;services&#x60;. Optional.
   * @return postalCodeGroups
   */
  @javax.annotation.Nullable
  public List<PostalCodeGroup> getPostalCodeGroups() {
    return postalCodeGroups;
  }

  public void setPostalCodeGroups(List<PostalCodeGroup> postalCodeGroups) {
    this.postalCodeGroups = postalCodeGroups;
  }


  public ShippingSettings services(List<Service> services) {
    this.services = services;
    return this;
  }

  public ShippingSettings addServicesItem(Service servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * The target account&#39;s list of services. Optional.
   * @return services
   */
  @javax.annotation.Nullable
  public List<Service> getServices() {
    return services;
  }

  public void setServices(List<Service> services) {
    this.services = services;
  }


  public ShippingSettings warehouses(List<Warehouse> warehouses) {
    this.warehouses = warehouses;
    return this;
  }

  public ShippingSettings addWarehousesItem(Warehouse warehousesItem) {
    if (this.warehouses == null) {
      this.warehouses = new ArrayList<>();
    }
    this.warehouses.add(warehousesItem);
    return this;
  }

  /**
   * Optional. A list of warehouses which can be referred to in &#x60;services&#x60;.
   * @return warehouses
   */
  @javax.annotation.Nullable
  public List<Warehouse> getWarehouses() {
    return warehouses;
  }

  public void setWarehouses(List<Warehouse> warehouses) {
    this.warehouses = warehouses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingSettings shippingSettings = (ShippingSettings) o;
    return Objects.equals(this.accountId, shippingSettings.accountId) &&
        Objects.equals(this.postalCodeGroups, shippingSettings.postalCodeGroups) &&
        Objects.equals(this.services, shippingSettings.services) &&
        Objects.equals(this.warehouses, shippingSettings.warehouses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, postalCodeGroups, services, warehouses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingSettings {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    postalCodeGroups: ").append(toIndentedString(postalCodeGroups)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    warehouses: ").append(toIndentedString(warehouses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("postalCodeGroups");
    openapiFields.add("services");
    openapiFields.add("warehouses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingSettings is not found in the empty JSON string", ShippingSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (jsonObj.get("postalCodeGroups") != null && !jsonObj.get("postalCodeGroups").isJsonNull()) {
        JsonArray jsonArraypostalCodeGroups = jsonObj.getAsJsonArray("postalCodeGroups");
        if (jsonArraypostalCodeGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("postalCodeGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `postalCodeGroups` to be an array in the JSON string but got `%s`", jsonObj.get("postalCodeGroups").toString()));
          }

          // validate the optional field `postalCodeGroups` (array)
          for (int i = 0; i < jsonArraypostalCodeGroups.size(); i++) {
            PostalCodeGroup.validateJsonElement(jsonArraypostalCodeGroups.get(i));
          };
        }
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            Service.validateJsonElement(jsonArrayservices.get(i));
          };
        }
      }
      if (jsonObj.get("warehouses") != null && !jsonObj.get("warehouses").isJsonNull()) {
        JsonArray jsonArraywarehouses = jsonObj.getAsJsonArray("warehouses");
        if (jsonArraywarehouses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warehouses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warehouses` to be an array in the JSON string but got `%s`", jsonObj.get("warehouses").toString()));
          }

          // validate the optional field `warehouses` (array)
          for (int i = 0; i < jsonArraywarehouses.size(); i++) {
            Warehouse.validateJsonElement(jsonArraywarehouses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingSettings>() {
           @Override
           public void write(JsonWriter out, ShippingSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingSettings
   * @throws IOException if the JSON string is invalid with respect to ShippingSettings
   */
  public static ShippingSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingSettings.class);
  }

  /**
   * Convert an instance of ShippingSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

