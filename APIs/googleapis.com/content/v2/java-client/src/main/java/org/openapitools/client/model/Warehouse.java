/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.BusinessDayConfig;
import org.openapitools.client.model.WarehouseCutoffTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A fulfillment warehouse, which stores and handles inventory.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Warehouse {
  public static final String SERIALIZED_NAME_BUSINESS_DAY_CONFIG = "businessDayConfig";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DAY_CONFIG)
  private BusinessDayConfig businessDayConfig;

  public static final String SERIALIZED_NAME_CUTOFF_TIME = "cutoffTime";
  @SerializedName(SERIALIZED_NAME_CUTOFF_TIME)
  private WarehouseCutoffTime cutoffTime;

  public static final String SERIALIZED_NAME_HANDLING_DAYS = "handlingDays";
  @SerializedName(SERIALIZED_NAME_HANDLING_DAYS)
  private String handlingDays;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  public Warehouse() {
  }

  public Warehouse businessDayConfig(BusinessDayConfig businessDayConfig) {
    this.businessDayConfig = businessDayConfig;
    return this;
  }

  /**
   * Get businessDayConfig
   * @return businessDayConfig
   */
  @javax.annotation.Nullable
  public BusinessDayConfig getBusinessDayConfig() {
    return businessDayConfig;
  }

  public void setBusinessDayConfig(BusinessDayConfig businessDayConfig) {
    this.businessDayConfig = businessDayConfig;
  }


  public Warehouse cutoffTime(WarehouseCutoffTime cutoffTime) {
    this.cutoffTime = cutoffTime;
    return this;
  }

  /**
   * Get cutoffTime
   * @return cutoffTime
   */
  @javax.annotation.Nullable
  public WarehouseCutoffTime getCutoffTime() {
    return cutoffTime;
  }

  public void setCutoffTime(WarehouseCutoffTime cutoffTime) {
    this.cutoffTime = cutoffTime;
  }


  public Warehouse handlingDays(String handlingDays) {
    this.handlingDays = handlingDays;
    return this;
  }

  /**
   * Required. The number of days it takes for this warehouse to pack up and ship an item. This is on the warehouse level, but can be overridden on the offer level based on the attributes of an item.
   * @return handlingDays
   */
  @javax.annotation.Nullable
  public String getHandlingDays() {
    return handlingDays;
  }

  public void setHandlingDays(String handlingDays) {
    this.handlingDays = handlingDays;
  }


  public Warehouse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name of the warehouse. Must be unique within account.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Warehouse shippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nullable
  public Address getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Warehouse warehouse = (Warehouse) o;
    return Objects.equals(this.businessDayConfig, warehouse.businessDayConfig) &&
        Objects.equals(this.cutoffTime, warehouse.cutoffTime) &&
        Objects.equals(this.handlingDays, warehouse.handlingDays) &&
        Objects.equals(this.name, warehouse.name) &&
        Objects.equals(this.shippingAddress, warehouse.shippingAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessDayConfig, cutoffTime, handlingDays, name, shippingAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Warehouse {\n");
    sb.append("    businessDayConfig: ").append(toIndentedString(businessDayConfig)).append("\n");
    sb.append("    cutoffTime: ").append(toIndentedString(cutoffTime)).append("\n");
    sb.append("    handlingDays: ").append(toIndentedString(handlingDays)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("businessDayConfig");
    openapiFields.add("cutoffTime");
    openapiFields.add("handlingDays");
    openapiFields.add("name");
    openapiFields.add("shippingAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Warehouse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Warehouse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Warehouse is not found in the empty JSON string", Warehouse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Warehouse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Warehouse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `businessDayConfig`
      if (jsonObj.get("businessDayConfig") != null && !jsonObj.get("businessDayConfig").isJsonNull()) {
        BusinessDayConfig.validateJsonElement(jsonObj.get("businessDayConfig"));
      }
      // validate the optional field `cutoffTime`
      if (jsonObj.get("cutoffTime") != null && !jsonObj.get("cutoffTime").isJsonNull()) {
        WarehouseCutoffTime.validateJsonElement(jsonObj.get("cutoffTime"));
      }
      if ((jsonObj.get("handlingDays") != null && !jsonObj.get("handlingDays").isJsonNull()) && !jsonObj.get("handlingDays").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handlingDays` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handlingDays").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `shippingAddress`
      if (jsonObj.get("shippingAddress") != null && !jsonObj.get("shippingAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("shippingAddress"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Warehouse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Warehouse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Warehouse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Warehouse.class));

       return (TypeAdapter<T>) new TypeAdapter<Warehouse>() {
           @Override
           public void write(JsonWriter out, Warehouse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Warehouse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Warehouse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Warehouse
   * @throws IOException if the JSON string is invalid with respect to Warehouse
   */
  public static Warehouse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Warehouse.class);
  }

  /**
   * Convert an instance of Warehouse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

