/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CarrierRate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CarrierRate {
  public static final String SERIALIZED_NAME_CARRIER_NAME = "carrierName";
  @SerializedName(SERIALIZED_NAME_CARRIER_NAME)
  private String carrierName;

  public static final String SERIALIZED_NAME_CARRIER_SERVICE = "carrierService";
  @SerializedName(SERIALIZED_NAME_CARRIER_SERVICE)
  private String carrierService;

  public static final String SERIALIZED_NAME_FLAT_ADJUSTMENT = "flatAdjustment";
  @SerializedName(SERIALIZED_NAME_FLAT_ADJUSTMENT)
  private Price flatAdjustment;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGIN_POSTAL_CODE = "originPostalCode";
  @SerializedName(SERIALIZED_NAME_ORIGIN_POSTAL_CODE)
  private String originPostalCode;

  public static final String SERIALIZED_NAME_PERCENTAGE_ADJUSTMENT = "percentageAdjustment";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_ADJUSTMENT)
  private String percentageAdjustment;

  public CarrierRate() {
  }

  public CarrierRate carrierName(String carrierName) {
    this.carrierName = carrierName;
    return this;
  }

  /**
   * Carrier service, such as &#x60;\&quot;UPS\&quot;&#x60; or &#x60;\&quot;Fedex\&quot;&#x60;. The list of supported carriers can be retrieved via the &#x60;getSupportedCarriers&#x60; method. Required.
   * @return carrierName
   */
  @javax.annotation.Nullable
  public String getCarrierName() {
    return carrierName;
  }

  public void setCarrierName(String carrierName) {
    this.carrierName = carrierName;
  }


  public CarrierRate carrierService(String carrierService) {
    this.carrierService = carrierService;
    return this;
  }

  /**
   * Carrier service, such as &#x60;\&quot;ground\&quot;&#x60; or &#x60;\&quot;2 days\&quot;&#x60;. The list of supported services for a carrier can be retrieved via the &#x60;getSupportedCarriers&#x60; method. Required.
   * @return carrierService
   */
  @javax.annotation.Nullable
  public String getCarrierService() {
    return carrierService;
  }

  public void setCarrierService(String carrierService) {
    this.carrierService = carrierService;
  }


  public CarrierRate flatAdjustment(Price flatAdjustment) {
    this.flatAdjustment = flatAdjustment;
    return this;
  }

  /**
   * Get flatAdjustment
   * @return flatAdjustment
   */
  @javax.annotation.Nullable
  public Price getFlatAdjustment() {
    return flatAdjustment;
  }

  public void setFlatAdjustment(Price flatAdjustment) {
    this.flatAdjustment = flatAdjustment;
  }


  public CarrierRate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the carrier rate. Must be unique per rate group. Required.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CarrierRate originPostalCode(String originPostalCode) {
    this.originPostalCode = originPostalCode;
    return this;
  }

  /**
   * Shipping origin for this carrier rate. Required.
   * @return originPostalCode
   */
  @javax.annotation.Nullable
  public String getOriginPostalCode() {
    return originPostalCode;
  }

  public void setOriginPostalCode(String originPostalCode) {
    this.originPostalCode = originPostalCode;
  }


  public CarrierRate percentageAdjustment(String percentageAdjustment) {
    this.percentageAdjustment = percentageAdjustment;
    return this;
  }

  /**
   * Multiplicative shipping rate modifier as a number in decimal notation. Can be negative. For example &#x60;\&quot;5.4\&quot;&#x60; increases the rate by 5.4%, &#x60;\&quot;-3\&quot;&#x60; decreases the rate by 3%. Optional.
   * @return percentageAdjustment
   */
  @javax.annotation.Nullable
  public String getPercentageAdjustment() {
    return percentageAdjustment;
  }

  public void setPercentageAdjustment(String percentageAdjustment) {
    this.percentageAdjustment = percentageAdjustment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CarrierRate carrierRate = (CarrierRate) o;
    return Objects.equals(this.carrierName, carrierRate.carrierName) &&
        Objects.equals(this.carrierService, carrierRate.carrierService) &&
        Objects.equals(this.flatAdjustment, carrierRate.flatAdjustment) &&
        Objects.equals(this.name, carrierRate.name) &&
        Objects.equals(this.originPostalCode, carrierRate.originPostalCode) &&
        Objects.equals(this.percentageAdjustment, carrierRate.percentageAdjustment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrierName, carrierService, flatAdjustment, name, originPostalCode, percentageAdjustment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CarrierRate {\n");
    sb.append("    carrierName: ").append(toIndentedString(carrierName)).append("\n");
    sb.append("    carrierService: ").append(toIndentedString(carrierService)).append("\n");
    sb.append("    flatAdjustment: ").append(toIndentedString(flatAdjustment)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    originPostalCode: ").append(toIndentedString(originPostalCode)).append("\n");
    sb.append("    percentageAdjustment: ").append(toIndentedString(percentageAdjustment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carrierName");
    openapiFields.add("carrierService");
    openapiFields.add("flatAdjustment");
    openapiFields.add("name");
    openapiFields.add("originPostalCode");
    openapiFields.add("percentageAdjustment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CarrierRate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CarrierRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CarrierRate is not found in the empty JSON string", CarrierRate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CarrierRate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CarrierRate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("carrierName") != null && !jsonObj.get("carrierName").isJsonNull()) && !jsonObj.get("carrierName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierName").toString()));
      }
      if ((jsonObj.get("carrierService") != null && !jsonObj.get("carrierService").isJsonNull()) && !jsonObj.get("carrierService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierService").toString()));
      }
      // validate the optional field `flatAdjustment`
      if (jsonObj.get("flatAdjustment") != null && !jsonObj.get("flatAdjustment").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("flatAdjustment"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("originPostalCode") != null && !jsonObj.get("originPostalCode").isJsonNull()) && !jsonObj.get("originPostalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originPostalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originPostalCode").toString()));
      }
      if ((jsonObj.get("percentageAdjustment") != null && !jsonObj.get("percentageAdjustment").isJsonNull()) && !jsonObj.get("percentageAdjustment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentageAdjustment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentageAdjustment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CarrierRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CarrierRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CarrierRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CarrierRate.class));

       return (TypeAdapter<T>) new TypeAdapter<CarrierRate>() {
           @Override
           public void write(JsonWriter out, CarrierRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CarrierRate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CarrierRate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CarrierRate
   * @throws IOException if the JSON string is invalid with respect to CarrierRate
   */
  public static CarrierRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CarrierRate.class);
  }

  /**
   * Convert an instance of CarrierRate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

