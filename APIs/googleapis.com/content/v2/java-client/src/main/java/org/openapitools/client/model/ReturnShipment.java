/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ShipmentTrackingInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReturnShipment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReturnShipment {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_DELIVERY_DATE = "deliveryDate";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DATE)
  private String deliveryDate;

  public static final String SERIALIZED_NAME_RETURN_METHOD_TYPE = "returnMethodType";
  @SerializedName(SERIALIZED_NAME_RETURN_METHOD_TYPE)
  private String returnMethodType;

  public static final String SERIALIZED_NAME_SHIPMENT_ID = "shipmentId";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_ID)
  private String shipmentId;

  public static final String SERIALIZED_NAME_SHIPMENT_TRACKING_INFOS = "shipmentTrackingInfos";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_TRACKING_INFOS)
  private List<ShipmentTrackingInfo> shipmentTrackingInfos = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_DATE = "shippingDate";
  @SerializedName(SERIALIZED_NAME_SHIPPING_DATE)
  private String shippingDate;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public ReturnShipment() {
  }

  public ReturnShipment creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The date of creation of the shipment, in ISO 8601 format.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public ReturnShipment deliveryDate(String deliveryDate) {
    this.deliveryDate = deliveryDate;
    return this;
  }

  /**
   * The date of delivery of the shipment, in ISO 8601 format.
   * @return deliveryDate
   */
  @javax.annotation.Nullable
  public String getDeliveryDate() {
    return deliveryDate;
  }

  public void setDeliveryDate(String deliveryDate) {
    this.deliveryDate = deliveryDate;
  }


  public ReturnShipment returnMethodType(String returnMethodType) {
    this.returnMethodType = returnMethodType;
    return this;
  }

  /**
   * Type of the return method. Acceptable values are: - \&quot;&#x60;byMail&#x60;\&quot; - \&quot;&#x60;contactCustomerSupport&#x60;\&quot; - \&quot;&#x60;returnless&#x60;\&quot; 
   * @return returnMethodType
   */
  @javax.annotation.Nullable
  public String getReturnMethodType() {
    return returnMethodType;
  }

  public void setReturnMethodType(String returnMethodType) {
    this.returnMethodType = returnMethodType;
  }


  public ReturnShipment shipmentId(String shipmentId) {
    this.shipmentId = shipmentId;
    return this;
  }

  /**
   * Shipment ID generated by Google.
   * @return shipmentId
   */
  @javax.annotation.Nullable
  public String getShipmentId() {
    return shipmentId;
  }

  public void setShipmentId(String shipmentId) {
    this.shipmentId = shipmentId;
  }


  public ReturnShipment shipmentTrackingInfos(List<ShipmentTrackingInfo> shipmentTrackingInfos) {
    this.shipmentTrackingInfos = shipmentTrackingInfos;
    return this;
  }

  public ReturnShipment addShipmentTrackingInfosItem(ShipmentTrackingInfo shipmentTrackingInfosItem) {
    if (this.shipmentTrackingInfos == null) {
      this.shipmentTrackingInfos = new ArrayList<>();
    }
    this.shipmentTrackingInfos.add(shipmentTrackingInfosItem);
    return this;
  }

  /**
   * Tracking information of the shipment. One return shipment might be handled by several shipping carriers sequentially.
   * @return shipmentTrackingInfos
   */
  @javax.annotation.Nullable
  public List<ShipmentTrackingInfo> getShipmentTrackingInfos() {
    return shipmentTrackingInfos;
  }

  public void setShipmentTrackingInfos(List<ShipmentTrackingInfo> shipmentTrackingInfos) {
    this.shipmentTrackingInfos = shipmentTrackingInfos;
  }


  public ReturnShipment shippingDate(String shippingDate) {
    this.shippingDate = shippingDate;
    return this;
  }

  /**
   * The date of shipping of the shipment, in ISO 8601 format.
   * @return shippingDate
   */
  @javax.annotation.Nullable
  public String getShippingDate() {
    return shippingDate;
  }

  public void setShippingDate(String shippingDate) {
    this.shippingDate = shippingDate;
  }


  public ReturnShipment state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State of the shipment. Acceptable values are: - \&quot;&#x60;completed&#x60;\&quot; - \&quot;&#x60;new&#x60;\&quot; - \&quot;&#x60;shipped&#x60;\&quot; - \&quot;&#x60;undeliverable&#x60;\&quot; - \&quot;&#x60;pending&#x60;\&quot; 
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnShipment returnShipment = (ReturnShipment) o;
    return Objects.equals(this.creationDate, returnShipment.creationDate) &&
        Objects.equals(this.deliveryDate, returnShipment.deliveryDate) &&
        Objects.equals(this.returnMethodType, returnShipment.returnMethodType) &&
        Objects.equals(this.shipmentId, returnShipment.shipmentId) &&
        Objects.equals(this.shipmentTrackingInfos, returnShipment.shipmentTrackingInfos) &&
        Objects.equals(this.shippingDate, returnShipment.shippingDate) &&
        Objects.equals(this.state, returnShipment.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, deliveryDate, returnMethodType, shipmentId, shipmentTrackingInfos, shippingDate, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnShipment {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    deliveryDate: ").append(toIndentedString(deliveryDate)).append("\n");
    sb.append("    returnMethodType: ").append(toIndentedString(returnMethodType)).append("\n");
    sb.append("    shipmentId: ").append(toIndentedString(shipmentId)).append("\n");
    sb.append("    shipmentTrackingInfos: ").append(toIndentedString(shipmentTrackingInfos)).append("\n");
    sb.append("    shippingDate: ").append(toIndentedString(shippingDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("deliveryDate");
    openapiFields.add("returnMethodType");
    openapiFields.add("shipmentId");
    openapiFields.add("shipmentTrackingInfos");
    openapiFields.add("shippingDate");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnShipment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnShipment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnShipment is not found in the empty JSON string", ReturnShipment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnShipment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnShipment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creationDate") != null && !jsonObj.get("creationDate").isJsonNull()) && !jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      if ((jsonObj.get("deliveryDate") != null && !jsonObj.get("deliveryDate").isJsonNull()) && !jsonObj.get("deliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryDate").toString()));
      }
      if ((jsonObj.get("returnMethodType") != null && !jsonObj.get("returnMethodType").isJsonNull()) && !jsonObj.get("returnMethodType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnMethodType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnMethodType").toString()));
      }
      if ((jsonObj.get("shipmentId") != null && !jsonObj.get("shipmentId").isJsonNull()) && !jsonObj.get("shipmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentId").toString()));
      }
      if (jsonObj.get("shipmentTrackingInfos") != null && !jsonObj.get("shipmentTrackingInfos").isJsonNull()) {
        JsonArray jsonArrayshipmentTrackingInfos = jsonObj.getAsJsonArray("shipmentTrackingInfos");
        if (jsonArrayshipmentTrackingInfos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipmentTrackingInfos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipmentTrackingInfos` to be an array in the JSON string but got `%s`", jsonObj.get("shipmentTrackingInfos").toString()));
          }

          // validate the optional field `shipmentTrackingInfos` (array)
          for (int i = 0; i < jsonArrayshipmentTrackingInfos.size(); i++) {
            ShipmentTrackingInfo.validateJsonElement(jsonArrayshipmentTrackingInfos.get(i));
          };
        }
      }
      if ((jsonObj.get("shippingDate") != null && !jsonObj.get("shippingDate").isJsonNull()) && !jsonObj.get("shippingDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingDate").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnShipment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnShipment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnShipment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnShipment.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnShipment>() {
           @Override
           public void write(JsonWriter out, ReturnShipment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnShipment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnShipment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnShipment
   * @throws IOException if the JSON string is invalid with respect to ReturnShipment
   */
  public static ReturnShipment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnShipment.class);
  }

  /**
   * Convert an instance of ReturnShipment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

