/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderLegacyPromotionBenefit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderLegacyPromotion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderLegacyPromotion {
  public static final String SERIALIZED_NAME_BENEFITS = "benefits";
  @SerializedName(SERIALIZED_NAME_BENEFITS)
  private List<OrderLegacyPromotionBenefit> benefits = new ArrayList<>();

  public static final String SERIALIZED_NAME_EFFECTIVE_DATES = "effectiveDates";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATES)
  private String effectiveDates;

  public static final String SERIALIZED_NAME_GENERIC_REDEMPTION_CODE = "genericRedemptionCode";
  @SerializedName(SERIALIZED_NAME_GENERIC_REDEMPTION_CODE)
  private String genericRedemptionCode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LONG_TITLE = "longTitle";
  @SerializedName(SERIALIZED_NAME_LONG_TITLE)
  private String longTitle;

  public static final String SERIALIZED_NAME_PRODUCT_APPLICABILITY = "productApplicability";
  @SerializedName(SERIALIZED_NAME_PRODUCT_APPLICABILITY)
  private String productApplicability;

  public static final String SERIALIZED_NAME_REDEMPTION_CHANNEL = "redemptionChannel";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_CHANNEL)
  private String redemptionChannel;

  public OrderLegacyPromotion() {
  }

  public OrderLegacyPromotion benefits(List<OrderLegacyPromotionBenefit> benefits) {
    this.benefits = benefits;
    return this;
  }

  public OrderLegacyPromotion addBenefitsItem(OrderLegacyPromotionBenefit benefitsItem) {
    if (this.benefits == null) {
      this.benefits = new ArrayList<>();
    }
    this.benefits.add(benefitsItem);
    return this;
  }

  /**
   * Get benefits
   * @return benefits
   */
  @javax.annotation.Nullable
  public List<OrderLegacyPromotionBenefit> getBenefits() {
    return benefits;
  }

  public void setBenefits(List<OrderLegacyPromotionBenefit> benefits) {
    this.benefits = benefits;
  }


  public OrderLegacyPromotion effectiveDates(String effectiveDates) {
    this.effectiveDates = effectiveDates;
    return this;
  }

  /**
   * The date and time frame when the promotion is active and ready for validation review. Note that the promotion live time may be delayed for a few hours due to the validation review. Start date and end date are separated by a forward slash (/). The start date is specified by the format (YYYY-MM-DD), followed by the letter ?T?, the time of the day when the sale starts (in Greenwich Mean Time, GMT), followed by an expression of the time zone for the sale. The end date is in the same format.
   * @return effectiveDates
   */
  @javax.annotation.Nullable
  public String getEffectiveDates() {
    return effectiveDates;
  }

  public void setEffectiveDates(String effectiveDates) {
    this.effectiveDates = effectiveDates;
  }


  public OrderLegacyPromotion genericRedemptionCode(String genericRedemptionCode) {
    this.genericRedemptionCode = genericRedemptionCode;
    return this;
  }

  /**
   * Optional. The text code that corresponds to the promotion when applied on the retailer?s website.
   * @return genericRedemptionCode
   */
  @javax.annotation.Nullable
  public String getGenericRedemptionCode() {
    return genericRedemptionCode;
  }

  public void setGenericRedemptionCode(String genericRedemptionCode) {
    this.genericRedemptionCode = genericRedemptionCode;
  }


  public OrderLegacyPromotion id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID of the promotion.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OrderLegacyPromotion longTitle(String longTitle) {
    this.longTitle = longTitle;
    return this;
  }

  /**
   * The full title of the promotion.
   * @return longTitle
   */
  @javax.annotation.Nullable
  public String getLongTitle() {
    return longTitle;
  }

  public void setLongTitle(String longTitle) {
    this.longTitle = longTitle;
  }


  public OrderLegacyPromotion productApplicability(String productApplicability) {
    this.productApplicability = productApplicability;
    return this;
  }

  /**
   * Whether the promotion is applicable to all products or only specific products. Acceptable values are: - \&quot;&#x60;allProducts&#x60;\&quot; - \&quot;&#x60;specificProducts&#x60;\&quot; 
   * @return productApplicability
   */
  @javax.annotation.Nullable
  public String getProductApplicability() {
    return productApplicability;
  }

  public void setProductApplicability(String productApplicability) {
    this.productApplicability = productApplicability;
  }


  public OrderLegacyPromotion redemptionChannel(String redemptionChannel) {
    this.redemptionChannel = redemptionChannel;
    return this;
  }

  /**
   * Indicates that the promotion is valid online. Acceptable values are: - \&quot;&#x60;online&#x60;\&quot; 
   * @return redemptionChannel
   */
  @javax.annotation.Nullable
  public String getRedemptionChannel() {
    return redemptionChannel;
  }

  public void setRedemptionChannel(String redemptionChannel) {
    this.redemptionChannel = redemptionChannel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLegacyPromotion orderLegacyPromotion = (OrderLegacyPromotion) o;
    return Objects.equals(this.benefits, orderLegacyPromotion.benefits) &&
        Objects.equals(this.effectiveDates, orderLegacyPromotion.effectiveDates) &&
        Objects.equals(this.genericRedemptionCode, orderLegacyPromotion.genericRedemptionCode) &&
        Objects.equals(this.id, orderLegacyPromotion.id) &&
        Objects.equals(this.longTitle, orderLegacyPromotion.longTitle) &&
        Objects.equals(this.productApplicability, orderLegacyPromotion.productApplicability) &&
        Objects.equals(this.redemptionChannel, orderLegacyPromotion.redemptionChannel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(benefits, effectiveDates, genericRedemptionCode, id, longTitle, productApplicability, redemptionChannel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLegacyPromotion {\n");
    sb.append("    benefits: ").append(toIndentedString(benefits)).append("\n");
    sb.append("    effectiveDates: ").append(toIndentedString(effectiveDates)).append("\n");
    sb.append("    genericRedemptionCode: ").append(toIndentedString(genericRedemptionCode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    longTitle: ").append(toIndentedString(longTitle)).append("\n");
    sb.append("    productApplicability: ").append(toIndentedString(productApplicability)).append("\n");
    sb.append("    redemptionChannel: ").append(toIndentedString(redemptionChannel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("benefits");
    openapiFields.add("effectiveDates");
    openapiFields.add("genericRedemptionCode");
    openapiFields.add("id");
    openapiFields.add("longTitle");
    openapiFields.add("productApplicability");
    openapiFields.add("redemptionChannel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderLegacyPromotion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderLegacyPromotion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLegacyPromotion is not found in the empty JSON string", OrderLegacyPromotion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderLegacyPromotion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderLegacyPromotion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("benefits") != null && !jsonObj.get("benefits").isJsonNull()) {
        JsonArray jsonArraybenefits = jsonObj.getAsJsonArray("benefits");
        if (jsonArraybenefits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("benefits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `benefits` to be an array in the JSON string but got `%s`", jsonObj.get("benefits").toString()));
          }

          // validate the optional field `benefits` (array)
          for (int i = 0; i < jsonArraybenefits.size(); i++) {
            OrderLegacyPromotionBenefit.validateJsonElement(jsonArraybenefits.get(i));
          };
        }
      }
      if ((jsonObj.get("effectiveDates") != null && !jsonObj.get("effectiveDates").isJsonNull()) && !jsonObj.get("effectiveDates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveDates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveDates").toString()));
      }
      if ((jsonObj.get("genericRedemptionCode") != null && !jsonObj.get("genericRedemptionCode").isJsonNull()) && !jsonObj.get("genericRedemptionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genericRedemptionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genericRedemptionCode").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("longTitle") != null && !jsonObj.get("longTitle").isJsonNull()) && !jsonObj.get("longTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longTitle").toString()));
      }
      if ((jsonObj.get("productApplicability") != null && !jsonObj.get("productApplicability").isJsonNull()) && !jsonObj.get("productApplicability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productApplicability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productApplicability").toString()));
      }
      if ((jsonObj.get("redemptionChannel") != null && !jsonObj.get("redemptionChannel").isJsonNull()) && !jsonObj.get("redemptionChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemptionChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redemptionChannel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLegacyPromotion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLegacyPromotion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLegacyPromotion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLegacyPromotion.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLegacyPromotion>() {
           @Override
           public void write(JsonWriter out, OrderLegacyPromotion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLegacyPromotion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderLegacyPromotion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderLegacyPromotion
   * @throws IOException if the JSON string is invalid with respect to OrderLegacyPromotion
   */
  public static OrderLegacyPromotion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLegacyPromotion.class);
  }

  /**
   * Convert an instance of OrderLegacyPromotion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

