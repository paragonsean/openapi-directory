/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BusinessDayConfig;
import org.openapitools.client.model.CutoffTime;
import org.openapitools.client.model.HolidayCutoff;
import org.openapitools.client.model.TransitTable;
import org.openapitools.client.model.WarehouseBasedDeliveryTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeliveryTime
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeliveryTime {
  public static final String SERIALIZED_NAME_CUTOFF_TIME = "cutoffTime";
  @SerializedName(SERIALIZED_NAME_CUTOFF_TIME)
  private CutoffTime cutoffTime;

  public static final String SERIALIZED_NAME_HANDLING_BUSINESS_DAY_CONFIG = "handlingBusinessDayConfig";
  @SerializedName(SERIALIZED_NAME_HANDLING_BUSINESS_DAY_CONFIG)
  private BusinessDayConfig handlingBusinessDayConfig;

  public static final String SERIALIZED_NAME_HOLIDAY_CUTOFFS = "holidayCutoffs";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_CUTOFFS)
  private List<HolidayCutoff> holidayCutoffs = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_HANDLING_TIME_IN_DAYS = "maxHandlingTimeInDays";
  @SerializedName(SERIALIZED_NAME_MAX_HANDLING_TIME_IN_DAYS)
  private Integer maxHandlingTimeInDays;

  public static final String SERIALIZED_NAME_MAX_TRANSIT_TIME_IN_DAYS = "maxTransitTimeInDays";
  @SerializedName(SERIALIZED_NAME_MAX_TRANSIT_TIME_IN_DAYS)
  private Integer maxTransitTimeInDays;

  public static final String SERIALIZED_NAME_MIN_HANDLING_TIME_IN_DAYS = "minHandlingTimeInDays";
  @SerializedName(SERIALIZED_NAME_MIN_HANDLING_TIME_IN_DAYS)
  private Integer minHandlingTimeInDays;

  public static final String SERIALIZED_NAME_MIN_TRANSIT_TIME_IN_DAYS = "minTransitTimeInDays";
  @SerializedName(SERIALIZED_NAME_MIN_TRANSIT_TIME_IN_DAYS)
  private Integer minTransitTimeInDays;

  public static final String SERIALIZED_NAME_TRANSIT_BUSINESS_DAY_CONFIG = "transitBusinessDayConfig";
  @SerializedName(SERIALIZED_NAME_TRANSIT_BUSINESS_DAY_CONFIG)
  private BusinessDayConfig transitBusinessDayConfig;

  public static final String SERIALIZED_NAME_TRANSIT_TIME_TABLE = "transitTimeTable";
  @SerializedName(SERIALIZED_NAME_TRANSIT_TIME_TABLE)
  private TransitTable transitTimeTable;

  public static final String SERIALIZED_NAME_WAREHOUSE_BASED_DELIVERY_TIMES = "warehouseBasedDeliveryTimes";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_BASED_DELIVERY_TIMES)
  private List<WarehouseBasedDeliveryTime> warehouseBasedDeliveryTimes = new ArrayList<>();

  public DeliveryTime() {
  }

  public DeliveryTime cutoffTime(CutoffTime cutoffTime) {
    this.cutoffTime = cutoffTime;
    return this;
  }

  /**
   * Get cutoffTime
   * @return cutoffTime
   */
  @javax.annotation.Nullable
  public CutoffTime getCutoffTime() {
    return cutoffTime;
  }

  public void setCutoffTime(CutoffTime cutoffTime) {
    this.cutoffTime = cutoffTime;
  }


  public DeliveryTime handlingBusinessDayConfig(BusinessDayConfig handlingBusinessDayConfig) {
    this.handlingBusinessDayConfig = handlingBusinessDayConfig;
    return this;
  }

  /**
   * Get handlingBusinessDayConfig
   * @return handlingBusinessDayConfig
   */
  @javax.annotation.Nullable
  public BusinessDayConfig getHandlingBusinessDayConfig() {
    return handlingBusinessDayConfig;
  }

  public void setHandlingBusinessDayConfig(BusinessDayConfig handlingBusinessDayConfig) {
    this.handlingBusinessDayConfig = handlingBusinessDayConfig;
  }


  public DeliveryTime holidayCutoffs(List<HolidayCutoff> holidayCutoffs) {
    this.holidayCutoffs = holidayCutoffs;
    return this;
  }

  public DeliveryTime addHolidayCutoffsItem(HolidayCutoff holidayCutoffsItem) {
    if (this.holidayCutoffs == null) {
      this.holidayCutoffs = new ArrayList<>();
    }
    this.holidayCutoffs.add(holidayCutoffsItem);
    return this;
  }

  /**
   * Holiday cutoff definitions. If configured, they specify order cutoff times for holiday-specific shipping.
   * @return holidayCutoffs
   */
  @javax.annotation.Nullable
  public List<HolidayCutoff> getHolidayCutoffs() {
    return holidayCutoffs;
  }

  public void setHolidayCutoffs(List<HolidayCutoff> holidayCutoffs) {
    this.holidayCutoffs = holidayCutoffs;
  }


  public DeliveryTime maxHandlingTimeInDays(Integer maxHandlingTimeInDays) {
    this.maxHandlingTimeInDays = maxHandlingTimeInDays;
    return this;
  }

  /**
   * Maximum number of business days spent before an order is shipped. 0 means same day shipped, 1 means next day shipped. Must be greater than or equal to &#x60;minHandlingTimeInDays&#x60;.
   * @return maxHandlingTimeInDays
   */
  @javax.annotation.Nullable
  public Integer getMaxHandlingTimeInDays() {
    return maxHandlingTimeInDays;
  }

  public void setMaxHandlingTimeInDays(Integer maxHandlingTimeInDays) {
    this.maxHandlingTimeInDays = maxHandlingTimeInDays;
  }


  public DeliveryTime maxTransitTimeInDays(Integer maxTransitTimeInDays) {
    this.maxTransitTimeInDays = maxTransitTimeInDays;
    return this;
  }

  /**
   * Maximum number of business days that is spent in transit. 0 means same day delivery, 1 means next day delivery. Must be greater than or equal to &#x60;minTransitTimeInDays&#x60;.
   * @return maxTransitTimeInDays
   */
  @javax.annotation.Nullable
  public Integer getMaxTransitTimeInDays() {
    return maxTransitTimeInDays;
  }

  public void setMaxTransitTimeInDays(Integer maxTransitTimeInDays) {
    this.maxTransitTimeInDays = maxTransitTimeInDays;
  }


  public DeliveryTime minHandlingTimeInDays(Integer minHandlingTimeInDays) {
    this.minHandlingTimeInDays = minHandlingTimeInDays;
    return this;
  }

  /**
   * Minimum number of business days spent before an order is shipped. 0 means same day shipped, 1 means next day shipped.
   * @return minHandlingTimeInDays
   */
  @javax.annotation.Nullable
  public Integer getMinHandlingTimeInDays() {
    return minHandlingTimeInDays;
  }

  public void setMinHandlingTimeInDays(Integer minHandlingTimeInDays) {
    this.minHandlingTimeInDays = minHandlingTimeInDays;
  }


  public DeliveryTime minTransitTimeInDays(Integer minTransitTimeInDays) {
    this.minTransitTimeInDays = minTransitTimeInDays;
    return this;
  }

  /**
   * Minimum number of business days that is spent in transit. 0 means same day delivery, 1 means next day delivery. Either &#x60;{min,max}TransitTimeInDays&#x60; or &#x60;transitTimeTable&#x60; must be set, but not both.
   * @return minTransitTimeInDays
   */
  @javax.annotation.Nullable
  public Integer getMinTransitTimeInDays() {
    return minTransitTimeInDays;
  }

  public void setMinTransitTimeInDays(Integer minTransitTimeInDays) {
    this.minTransitTimeInDays = minTransitTimeInDays;
  }


  public DeliveryTime transitBusinessDayConfig(BusinessDayConfig transitBusinessDayConfig) {
    this.transitBusinessDayConfig = transitBusinessDayConfig;
    return this;
  }

  /**
   * Get transitBusinessDayConfig
   * @return transitBusinessDayConfig
   */
  @javax.annotation.Nullable
  public BusinessDayConfig getTransitBusinessDayConfig() {
    return transitBusinessDayConfig;
  }

  public void setTransitBusinessDayConfig(BusinessDayConfig transitBusinessDayConfig) {
    this.transitBusinessDayConfig = transitBusinessDayConfig;
  }


  public DeliveryTime transitTimeTable(TransitTable transitTimeTable) {
    this.transitTimeTable = transitTimeTable;
    return this;
  }

  /**
   * Get transitTimeTable
   * @return transitTimeTable
   */
  @javax.annotation.Nullable
  public TransitTable getTransitTimeTable() {
    return transitTimeTable;
  }

  public void setTransitTimeTable(TransitTable transitTimeTable) {
    this.transitTimeTable = transitTimeTable;
  }


  public DeliveryTime warehouseBasedDeliveryTimes(List<WarehouseBasedDeliveryTime> warehouseBasedDeliveryTimes) {
    this.warehouseBasedDeliveryTimes = warehouseBasedDeliveryTimes;
    return this;
  }

  public DeliveryTime addWarehouseBasedDeliveryTimesItem(WarehouseBasedDeliveryTime warehouseBasedDeliveryTimesItem) {
    if (this.warehouseBasedDeliveryTimes == null) {
      this.warehouseBasedDeliveryTimes = new ArrayList<>();
    }
    this.warehouseBasedDeliveryTimes.add(warehouseBasedDeliveryTimesItem);
    return this;
  }

  /**
   * Indicates that the delivery time should be calculated per warehouse (shipping origin location) based on the settings of the selected carrier. When set, no other transit time related field in DeliveryTime should be set.
   * @return warehouseBasedDeliveryTimes
   */
  @javax.annotation.Nullable
  public List<WarehouseBasedDeliveryTime> getWarehouseBasedDeliveryTimes() {
    return warehouseBasedDeliveryTimes;
  }

  public void setWarehouseBasedDeliveryTimes(List<WarehouseBasedDeliveryTime> warehouseBasedDeliveryTimes) {
    this.warehouseBasedDeliveryTimes = warehouseBasedDeliveryTimes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryTime deliveryTime = (DeliveryTime) o;
    return Objects.equals(this.cutoffTime, deliveryTime.cutoffTime) &&
        Objects.equals(this.handlingBusinessDayConfig, deliveryTime.handlingBusinessDayConfig) &&
        Objects.equals(this.holidayCutoffs, deliveryTime.holidayCutoffs) &&
        Objects.equals(this.maxHandlingTimeInDays, deliveryTime.maxHandlingTimeInDays) &&
        Objects.equals(this.maxTransitTimeInDays, deliveryTime.maxTransitTimeInDays) &&
        Objects.equals(this.minHandlingTimeInDays, deliveryTime.minHandlingTimeInDays) &&
        Objects.equals(this.minTransitTimeInDays, deliveryTime.minTransitTimeInDays) &&
        Objects.equals(this.transitBusinessDayConfig, deliveryTime.transitBusinessDayConfig) &&
        Objects.equals(this.transitTimeTable, deliveryTime.transitTimeTable) &&
        Objects.equals(this.warehouseBasedDeliveryTimes, deliveryTime.warehouseBasedDeliveryTimes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cutoffTime, handlingBusinessDayConfig, holidayCutoffs, maxHandlingTimeInDays, maxTransitTimeInDays, minHandlingTimeInDays, minTransitTimeInDays, transitBusinessDayConfig, transitTimeTable, warehouseBasedDeliveryTimes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryTime {\n");
    sb.append("    cutoffTime: ").append(toIndentedString(cutoffTime)).append("\n");
    sb.append("    handlingBusinessDayConfig: ").append(toIndentedString(handlingBusinessDayConfig)).append("\n");
    sb.append("    holidayCutoffs: ").append(toIndentedString(holidayCutoffs)).append("\n");
    sb.append("    maxHandlingTimeInDays: ").append(toIndentedString(maxHandlingTimeInDays)).append("\n");
    sb.append("    maxTransitTimeInDays: ").append(toIndentedString(maxTransitTimeInDays)).append("\n");
    sb.append("    minHandlingTimeInDays: ").append(toIndentedString(minHandlingTimeInDays)).append("\n");
    sb.append("    minTransitTimeInDays: ").append(toIndentedString(minTransitTimeInDays)).append("\n");
    sb.append("    transitBusinessDayConfig: ").append(toIndentedString(transitBusinessDayConfig)).append("\n");
    sb.append("    transitTimeTable: ").append(toIndentedString(transitTimeTable)).append("\n");
    sb.append("    warehouseBasedDeliveryTimes: ").append(toIndentedString(warehouseBasedDeliveryTimes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cutoffTime");
    openapiFields.add("handlingBusinessDayConfig");
    openapiFields.add("holidayCutoffs");
    openapiFields.add("maxHandlingTimeInDays");
    openapiFields.add("maxTransitTimeInDays");
    openapiFields.add("minHandlingTimeInDays");
    openapiFields.add("minTransitTimeInDays");
    openapiFields.add("transitBusinessDayConfig");
    openapiFields.add("transitTimeTable");
    openapiFields.add("warehouseBasedDeliveryTimes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliveryTime
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeliveryTime.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryTime is not found in the empty JSON string", DeliveryTime.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeliveryTime.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliveryTime` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cutoffTime`
      if (jsonObj.get("cutoffTime") != null && !jsonObj.get("cutoffTime").isJsonNull()) {
        CutoffTime.validateJsonElement(jsonObj.get("cutoffTime"));
      }
      // validate the optional field `handlingBusinessDayConfig`
      if (jsonObj.get("handlingBusinessDayConfig") != null && !jsonObj.get("handlingBusinessDayConfig").isJsonNull()) {
        BusinessDayConfig.validateJsonElement(jsonObj.get("handlingBusinessDayConfig"));
      }
      if (jsonObj.get("holidayCutoffs") != null && !jsonObj.get("holidayCutoffs").isJsonNull()) {
        JsonArray jsonArrayholidayCutoffs = jsonObj.getAsJsonArray("holidayCutoffs");
        if (jsonArrayholidayCutoffs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("holidayCutoffs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `holidayCutoffs` to be an array in the JSON string but got `%s`", jsonObj.get("holidayCutoffs").toString()));
          }

          // validate the optional field `holidayCutoffs` (array)
          for (int i = 0; i < jsonArrayholidayCutoffs.size(); i++) {
            HolidayCutoff.validateJsonElement(jsonArrayholidayCutoffs.get(i));
          };
        }
      }
      // validate the optional field `transitBusinessDayConfig`
      if (jsonObj.get("transitBusinessDayConfig") != null && !jsonObj.get("transitBusinessDayConfig").isJsonNull()) {
        BusinessDayConfig.validateJsonElement(jsonObj.get("transitBusinessDayConfig"));
      }
      // validate the optional field `transitTimeTable`
      if (jsonObj.get("transitTimeTable") != null && !jsonObj.get("transitTimeTable").isJsonNull()) {
        TransitTable.validateJsonElement(jsonObj.get("transitTimeTable"));
      }
      if (jsonObj.get("warehouseBasedDeliveryTimes") != null && !jsonObj.get("warehouseBasedDeliveryTimes").isJsonNull()) {
        JsonArray jsonArraywarehouseBasedDeliveryTimes = jsonObj.getAsJsonArray("warehouseBasedDeliveryTimes");
        if (jsonArraywarehouseBasedDeliveryTimes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warehouseBasedDeliveryTimes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warehouseBasedDeliveryTimes` to be an array in the JSON string but got `%s`", jsonObj.get("warehouseBasedDeliveryTimes").toString()));
          }

          // validate the optional field `warehouseBasedDeliveryTimes` (array)
          for (int i = 0; i < jsonArraywarehouseBasedDeliveryTimes.size(); i++) {
            WarehouseBasedDeliveryTime.validateJsonElement(jsonArraywarehouseBasedDeliveryTimes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliveryTime.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliveryTime' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliveryTime> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliveryTime.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliveryTime>() {
           @Override
           public void write(JsonWriter out, DeliveryTime value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliveryTime read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeliveryTime given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliveryTime
   * @throws IOException if the JSON string is invalid with respect to DeliveryTime
   */
  public static DeliveryTime fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryTime.class);
  }

  /**
   * Convert an instance of DeliveryTime to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

