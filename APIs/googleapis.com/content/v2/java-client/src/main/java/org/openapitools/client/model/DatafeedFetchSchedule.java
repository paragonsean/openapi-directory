/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The required fields vary based on the frequency of fetching. For a monthly fetch schedule, day_of_month and hour are required. For a weekly fetch schedule, weekday and hour are required. For a daily fetch schedule, only hour is required.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatafeedFetchSchedule {
  public static final String SERIALIZED_NAME_DAY_OF_MONTH = "dayOfMonth";
  @SerializedName(SERIALIZED_NAME_DAY_OF_MONTH)
  private Integer dayOfMonth;

  public static final String SERIALIZED_NAME_FETCH_URL = "fetchUrl";
  @SerializedName(SERIALIZED_NAME_FETCH_URL)
  private String fetchUrl;

  public static final String SERIALIZED_NAME_HOUR = "hour";
  @SerializedName(SERIALIZED_NAME_HOUR)
  private Integer hour;

  public static final String SERIALIZED_NAME_MINUTE_OF_HOUR = "minuteOfHour";
  @SerializedName(SERIALIZED_NAME_MINUTE_OF_HOUR)
  private Integer minuteOfHour;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PAUSED = "paused";
  @SerializedName(SERIALIZED_NAME_PAUSED)
  private Boolean paused;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_WEEKDAY = "weekday";
  @SerializedName(SERIALIZED_NAME_WEEKDAY)
  private String weekday;

  public DatafeedFetchSchedule() {
  }

  public DatafeedFetchSchedule dayOfMonth(Integer dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
    return this;
  }

  /**
   * The day of the month the feed file should be fetched (1-31).
   * @return dayOfMonth
   */
  @javax.annotation.Nullable
  public Integer getDayOfMonth() {
    return dayOfMonth;
  }

  public void setDayOfMonth(Integer dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
  }


  public DatafeedFetchSchedule fetchUrl(String fetchUrl) {
    this.fetchUrl = fetchUrl;
    return this;
  }

  /**
   * The URL where the feed file can be fetched. Google Merchant Center will support automatic scheduled uploads using the HTTP, HTTPS, FTP, or SFTP protocols, so the value will need to be a valid link using one of those four protocols.
   * @return fetchUrl
   */
  @javax.annotation.Nullable
  public String getFetchUrl() {
    return fetchUrl;
  }

  public void setFetchUrl(String fetchUrl) {
    this.fetchUrl = fetchUrl;
  }


  public DatafeedFetchSchedule hour(Integer hour) {
    this.hour = hour;
    return this;
  }

  /**
   * The hour of the day the feed file should be fetched (0-23).
   * @return hour
   */
  @javax.annotation.Nullable
  public Integer getHour() {
    return hour;
  }

  public void setHour(Integer hour) {
    this.hour = hour;
  }


  public DatafeedFetchSchedule minuteOfHour(Integer minuteOfHour) {
    this.minuteOfHour = minuteOfHour;
    return this;
  }

  /**
   * The minute of the hour the feed file should be fetched (0-59). Read-only.
   * @return minuteOfHour
   */
  @javax.annotation.Nullable
  public Integer getMinuteOfHour() {
    return minuteOfHour;
  }

  public void setMinuteOfHour(Integer minuteOfHour) {
    this.minuteOfHour = minuteOfHour;
  }


  public DatafeedFetchSchedule password(String password) {
    this.password = password;
    return this;
  }

  /**
   * An optional password for fetch_url.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public DatafeedFetchSchedule paused(Boolean paused) {
    this.paused = paused;
    return this;
  }

  /**
   * Whether the scheduled fetch is paused or not.
   * @return paused
   */
  @javax.annotation.Nullable
  public Boolean getPaused() {
    return paused;
  }

  public void setPaused(Boolean paused) {
    this.paused = paused;
  }


  public DatafeedFetchSchedule timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Time zone used for schedule. UTC by default. E.g., \&quot;America/Los_Angeles\&quot;.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public DatafeedFetchSchedule username(String username) {
    this.username = username;
    return this;
  }

  /**
   * An optional user name for fetch_url.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public DatafeedFetchSchedule weekday(String weekday) {
    this.weekday = weekday;
    return this;
  }

  /**
   * The day of the week the feed file should be fetched. Acceptable values are: - \&quot;&#x60;monday&#x60;\&quot; - \&quot;&#x60;tuesday&#x60;\&quot; - \&quot;&#x60;wednesday&#x60;\&quot; - \&quot;&#x60;thursday&#x60;\&quot; - \&quot;&#x60;friday&#x60;\&quot; - \&quot;&#x60;saturday&#x60;\&quot; - \&quot;&#x60;sunday&#x60;\&quot; 
   * @return weekday
   */
  @javax.annotation.Nullable
  public String getWeekday() {
    return weekday;
  }

  public void setWeekday(String weekday) {
    this.weekday = weekday;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatafeedFetchSchedule datafeedFetchSchedule = (DatafeedFetchSchedule) o;
    return Objects.equals(this.dayOfMonth, datafeedFetchSchedule.dayOfMonth) &&
        Objects.equals(this.fetchUrl, datafeedFetchSchedule.fetchUrl) &&
        Objects.equals(this.hour, datafeedFetchSchedule.hour) &&
        Objects.equals(this.minuteOfHour, datafeedFetchSchedule.minuteOfHour) &&
        Objects.equals(this.password, datafeedFetchSchedule.password) &&
        Objects.equals(this.paused, datafeedFetchSchedule.paused) &&
        Objects.equals(this.timeZone, datafeedFetchSchedule.timeZone) &&
        Objects.equals(this.username, datafeedFetchSchedule.username) &&
        Objects.equals(this.weekday, datafeedFetchSchedule.weekday);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfMonth, fetchUrl, hour, minuteOfHour, password, paused, timeZone, username, weekday);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatafeedFetchSchedule {\n");
    sb.append("    dayOfMonth: ").append(toIndentedString(dayOfMonth)).append("\n");
    sb.append("    fetchUrl: ").append(toIndentedString(fetchUrl)).append("\n");
    sb.append("    hour: ").append(toIndentedString(hour)).append("\n");
    sb.append("    minuteOfHour: ").append(toIndentedString(minuteOfHour)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    weekday: ").append(toIndentedString(weekday)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dayOfMonth");
    openapiFields.add("fetchUrl");
    openapiFields.add("hour");
    openapiFields.add("minuteOfHour");
    openapiFields.add("password");
    openapiFields.add("paused");
    openapiFields.add("timeZone");
    openapiFields.add("username");
    openapiFields.add("weekday");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatafeedFetchSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatafeedFetchSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatafeedFetchSchedule is not found in the empty JSON string", DatafeedFetchSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatafeedFetchSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatafeedFetchSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fetchUrl") != null && !jsonObj.get("fetchUrl").isJsonNull()) && !jsonObj.get("fetchUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fetchUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fetchUrl").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("weekday") != null && !jsonObj.get("weekday").isJsonNull()) && !jsonObj.get("weekday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weekday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weekday").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatafeedFetchSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatafeedFetchSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatafeedFetchSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatafeedFetchSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<DatafeedFetchSchedule>() {
           @Override
           public void write(JsonWriter out, DatafeedFetchSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatafeedFetchSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatafeedFetchSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatafeedFetchSchedule
   * @throws IOException if the JSON string is invalid with respect to DatafeedFetchSchedule
   */
  public static DatafeedFetchSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatafeedFetchSchedule.class);
  }

  /**
   * Convert an instance of DatafeedFetchSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

