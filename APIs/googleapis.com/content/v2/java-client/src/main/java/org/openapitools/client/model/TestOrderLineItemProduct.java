/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderLineItemProductFee;
import org.openapitools.client.model.OrderLineItemProductVariantAttribute;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestOrderLineItemProduct
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:02.825653-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestOrderLineItemProduct {
  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_CONTENT_LANGUAGE = "contentLanguage";
  @SerializedName(SERIALIZED_NAME_CONTENT_LANGUAGE)
  private String contentLanguage;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private List<OrderLineItemProductFee> fees = new ArrayList<>();

  public static final String SERIALIZED_NAME_GTIN = "gtin";
  @SerializedName(SERIALIZED_NAME_GTIN)
  private String gtin;

  public static final String SERIALIZED_NAME_IMAGE_LINK = "imageLink";
  @SerializedName(SERIALIZED_NAME_IMAGE_LINK)
  private String imageLink;

  public static final String SERIALIZED_NAME_ITEM_GROUP_ID = "itemGroupId";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_ID)
  private String itemGroupId;

  public static final String SERIALIZED_NAME_MPN = "mpn";
  @SerializedName(SERIALIZED_NAME_MPN)
  private String mpn;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Price price;

  public static final String SERIALIZED_NAME_TARGET_COUNTRY = "targetCountry";
  @SerializedName(SERIALIZED_NAME_TARGET_COUNTRY)
  private String targetCountry;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VARIANT_ATTRIBUTES = "variantAttributes";
  @SerializedName(SERIALIZED_NAME_VARIANT_ATTRIBUTES)
  private List<OrderLineItemProductVariantAttribute> variantAttributes = new ArrayList<>();

  public TestOrderLineItemProduct() {
  }

  public TestOrderLineItemProduct brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Required. Brand of the item.
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public TestOrderLineItemProduct channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Deprecated. Acceptable values are: - \&quot;&#x60;online&#x60;\&quot; 
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public TestOrderLineItemProduct condition(String condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Required. Condition or state of the item. Acceptable values are: - \&quot;&#x60;new&#x60;\&quot; 
   * @return condition
   */
  @javax.annotation.Nullable
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }


  public TestOrderLineItemProduct contentLanguage(String contentLanguage) {
    this.contentLanguage = contentLanguage;
    return this;
  }

  /**
   * Required. The two-letter ISO 639-1 language code for the item. Acceptable values are: - \&quot;&#x60;en&#x60;\&quot; - \&quot;&#x60;fr&#x60;\&quot; 
   * @return contentLanguage
   */
  @javax.annotation.Nullable
  public String getContentLanguage() {
    return contentLanguage;
  }

  public void setContentLanguage(String contentLanguage) {
    this.contentLanguage = contentLanguage;
  }


  public TestOrderLineItemProduct fees(List<OrderLineItemProductFee> fees) {
    this.fees = fees;
    return this;
  }

  public TestOrderLineItemProduct addFeesItem(OrderLineItemProductFee feesItem) {
    if (this.fees == null) {
      this.fees = new ArrayList<>();
    }
    this.fees.add(feesItem);
    return this;
  }

  /**
   * Fees for the item. Optional.
   * @return fees
   */
  @javax.annotation.Nullable
  public List<OrderLineItemProductFee> getFees() {
    return fees;
  }

  public void setFees(List<OrderLineItemProductFee> fees) {
    this.fees = fees;
  }


  public TestOrderLineItemProduct gtin(String gtin) {
    this.gtin = gtin;
    return this;
  }

  /**
   * Global Trade Item Number (GTIN) of the item. Optional.
   * @return gtin
   */
  @javax.annotation.Nullable
  public String getGtin() {
    return gtin;
  }

  public void setGtin(String gtin) {
    this.gtin = gtin;
  }


  public TestOrderLineItemProduct imageLink(String imageLink) {
    this.imageLink = imageLink;
    return this;
  }

  /**
   * Required. URL of an image of the item.
   * @return imageLink
   */
  @javax.annotation.Nullable
  public String getImageLink() {
    return imageLink;
  }

  public void setImageLink(String imageLink) {
    this.imageLink = imageLink;
  }


  public TestOrderLineItemProduct itemGroupId(String itemGroupId) {
    this.itemGroupId = itemGroupId;
    return this;
  }

  /**
   * Shared identifier for all variants of the same product. Optional.
   * @return itemGroupId
   */
  @javax.annotation.Nullable
  public String getItemGroupId() {
    return itemGroupId;
  }

  public void setItemGroupId(String itemGroupId) {
    this.itemGroupId = itemGroupId;
  }


  public TestOrderLineItemProduct mpn(String mpn) {
    this.mpn = mpn;
    return this;
  }

  /**
   * Manufacturer Part Number (MPN) of the item. Optional.
   * @return mpn
   */
  @javax.annotation.Nullable
  public String getMpn() {
    return mpn;
  }

  public void setMpn(String mpn) {
    this.mpn = mpn;
  }


  public TestOrderLineItemProduct offerId(String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * Required. An identifier of the item.
   * @return offerId
   */
  @javax.annotation.Nullable
  public String getOfferId() {
    return offerId;
  }

  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }


  public TestOrderLineItemProduct price(Price price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Price getPrice() {
    return price;
  }

  public void setPrice(Price price) {
    this.price = price;
  }


  public TestOrderLineItemProduct targetCountry(String targetCountry) {
    this.targetCountry = targetCountry;
    return this;
  }

  /**
   * Required. The CLDR territory // code of the target country of the product.
   * @return targetCountry
   */
  @javax.annotation.Nullable
  public String getTargetCountry() {
    return targetCountry;
  }

  public void setTargetCountry(String targetCountry) {
    this.targetCountry = targetCountry;
  }


  public TestOrderLineItemProduct title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Required. The title of the product.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public TestOrderLineItemProduct variantAttributes(List<OrderLineItemProductVariantAttribute> variantAttributes) {
    this.variantAttributes = variantAttributes;
    return this;
  }

  public TestOrderLineItemProduct addVariantAttributesItem(OrderLineItemProductVariantAttribute variantAttributesItem) {
    if (this.variantAttributes == null) {
      this.variantAttributes = new ArrayList<>();
    }
    this.variantAttributes.add(variantAttributesItem);
    return this;
  }

  /**
   * Variant attributes for the item. Optional.
   * @return variantAttributes
   */
  @javax.annotation.Nullable
  public List<OrderLineItemProductVariantAttribute> getVariantAttributes() {
    return variantAttributes;
  }

  public void setVariantAttributes(List<OrderLineItemProductVariantAttribute> variantAttributes) {
    this.variantAttributes = variantAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestOrderLineItemProduct testOrderLineItemProduct = (TestOrderLineItemProduct) o;
    return Objects.equals(this.brand, testOrderLineItemProduct.brand) &&
        Objects.equals(this.channel, testOrderLineItemProduct.channel) &&
        Objects.equals(this.condition, testOrderLineItemProduct.condition) &&
        Objects.equals(this.contentLanguage, testOrderLineItemProduct.contentLanguage) &&
        Objects.equals(this.fees, testOrderLineItemProduct.fees) &&
        Objects.equals(this.gtin, testOrderLineItemProduct.gtin) &&
        Objects.equals(this.imageLink, testOrderLineItemProduct.imageLink) &&
        Objects.equals(this.itemGroupId, testOrderLineItemProduct.itemGroupId) &&
        Objects.equals(this.mpn, testOrderLineItemProduct.mpn) &&
        Objects.equals(this.offerId, testOrderLineItemProduct.offerId) &&
        Objects.equals(this.price, testOrderLineItemProduct.price) &&
        Objects.equals(this.targetCountry, testOrderLineItemProduct.targetCountry) &&
        Objects.equals(this.title, testOrderLineItemProduct.title) &&
        Objects.equals(this.variantAttributes, testOrderLineItemProduct.variantAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, channel, condition, contentLanguage, fees, gtin, imageLink, itemGroupId, mpn, offerId, price, targetCountry, title, variantAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestOrderLineItemProduct {\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    contentLanguage: ").append(toIndentedString(contentLanguage)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    imageLink: ").append(toIndentedString(imageLink)).append("\n");
    sb.append("    itemGroupId: ").append(toIndentedString(itemGroupId)).append("\n");
    sb.append("    mpn: ").append(toIndentedString(mpn)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    targetCountry: ").append(toIndentedString(targetCountry)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    variantAttributes: ").append(toIndentedString(variantAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand");
    openapiFields.add("channel");
    openapiFields.add("condition");
    openapiFields.add("contentLanguage");
    openapiFields.add("fees");
    openapiFields.add("gtin");
    openapiFields.add("imageLink");
    openapiFields.add("itemGroupId");
    openapiFields.add("mpn");
    openapiFields.add("offerId");
    openapiFields.add("price");
    openapiFields.add("targetCountry");
    openapiFields.add("title");
    openapiFields.add("variantAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestOrderLineItemProduct
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestOrderLineItemProduct.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestOrderLineItemProduct is not found in the empty JSON string", TestOrderLineItemProduct.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestOrderLineItemProduct.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestOrderLineItemProduct` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      if ((jsonObj.get("contentLanguage") != null && !jsonObj.get("contentLanguage").isJsonNull()) && !jsonObj.get("contentLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentLanguage").toString()));
      }
      if (jsonObj.get("fees") != null && !jsonObj.get("fees").isJsonNull()) {
        JsonArray jsonArrayfees = jsonObj.getAsJsonArray("fees");
        if (jsonArrayfees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fees` to be an array in the JSON string but got `%s`", jsonObj.get("fees").toString()));
          }

          // validate the optional field `fees` (array)
          for (int i = 0; i < jsonArrayfees.size(); i++) {
            OrderLineItemProductFee.validateJsonElement(jsonArrayfees.get(i));
          };
        }
      }
      if ((jsonObj.get("gtin") != null && !jsonObj.get("gtin").isJsonNull()) && !jsonObj.get("gtin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gtin").toString()));
      }
      if ((jsonObj.get("imageLink") != null && !jsonObj.get("imageLink").isJsonNull()) && !jsonObj.get("imageLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageLink").toString()));
      }
      if ((jsonObj.get("itemGroupId") != null && !jsonObj.get("itemGroupId").isJsonNull()) && !jsonObj.get("itemGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGroupId").toString()));
      }
      if ((jsonObj.get("mpn") != null && !jsonObj.get("mpn").isJsonNull()) && !jsonObj.get("mpn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mpn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mpn").toString()));
      }
      if ((jsonObj.get("offerId") != null && !jsonObj.get("offerId").isJsonNull()) && !jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("targetCountry") != null && !jsonObj.get("targetCountry").isJsonNull()) && !jsonObj.get("targetCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetCountry").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("variantAttributes") != null && !jsonObj.get("variantAttributes").isJsonNull()) {
        JsonArray jsonArrayvariantAttributes = jsonObj.getAsJsonArray("variantAttributes");
        if (jsonArrayvariantAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variantAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variantAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("variantAttributes").toString()));
          }

          // validate the optional field `variantAttributes` (array)
          for (int i = 0; i < jsonArrayvariantAttributes.size(); i++) {
            OrderLineItemProductVariantAttribute.validateJsonElement(jsonArrayvariantAttributes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestOrderLineItemProduct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestOrderLineItemProduct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestOrderLineItemProduct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestOrderLineItemProduct.class));

       return (TypeAdapter<T>) new TypeAdapter<TestOrderLineItemProduct>() {
           @Override
           public void write(JsonWriter out, TestOrderLineItemProduct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestOrderLineItemProduct read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestOrderLineItemProduct given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestOrderLineItemProduct
   * @throws IOException if the JSON string is invalid with respect to TestOrderLineItemProduct
   */
  public static TestOrderLineItemProduct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestOrderLineItemProduct.class);
  }

  /**
   * Convert an instance of TestOrderLineItemProduct to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

