/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOrder.h"
#include "OAIOrdersAcknowledgeRequest.h"
#include "OAIOrdersAcknowledgeResponse.h"
#include "OAIOrdersAdvanceTestOrderResponse.h"
#include "OAIOrdersCancelLineItemRequest.h"
#include "OAIOrdersCancelLineItemResponse.h"
#include "OAIOrdersCancelRequest.h"
#include "OAIOrdersCancelResponse.h"
#include "OAIOrdersCancelTestOrderByCustomerRequest.h"
#include "OAIOrdersCancelTestOrderByCustomerResponse.h"
#include "OAIOrdersCreateTestOrderRequest.h"
#include "OAIOrdersCreateTestOrderResponse.h"
#include "OAIOrdersCreateTestReturnRequest.h"
#include "OAIOrdersCreateTestReturnResponse.h"
#include "OAIOrdersCustomBatchRequest.h"
#include "OAIOrdersCustomBatchResponse.h"
#include "OAIOrdersGetByMerchantOrderIdResponse.h"
#include "OAIOrdersGetTestOrderTemplateResponse.h"
#include "OAIOrdersInStoreRefundLineItemRequest.h"
#include "OAIOrdersInStoreRefundLineItemResponse.h"
#include "OAIOrdersListResponse.h"
#include "OAIOrdersRefundRequest.h"
#include "OAIOrdersRefundResponse.h"
#include "OAIOrdersRejectReturnLineItemRequest.h"
#include "OAIOrdersRejectReturnLineItemResponse.h"
#include "OAIOrdersReturnLineItemRequest.h"
#include "OAIOrdersReturnLineItemResponse.h"
#include "OAIOrdersReturnRefundLineItemRequest.h"
#include "OAIOrdersReturnRefundLineItemResponse.h"
#include "OAIOrdersSetLineItemMetadataRequest.h"
#include "OAIOrdersSetLineItemMetadataResponse.h"
#include "OAIOrdersShipLineItemsRequest.h"
#include "OAIOrdersShipLineItemsResponse.h"
#include "OAIOrdersUpdateLineItemShippingDetailsRequest.h"
#include "OAIOrdersUpdateLineItemShippingDetailsResponse.h"
#include "OAIOrdersUpdateMerchantOrderIdRequest.h"
#include "OAIOrdersUpdateMerchantOrderIdResponse.h"
#include "OAIOrdersUpdateShipmentRequest.h"
#include "OAIOrdersUpdateShipmentResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_acknowledge_request OAIOrdersAcknowledgeRequest [optional]
    */
    virtual void content_orders_acknowledge(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersAcknowledgeRequest> &oai_orders_acknowledge_request = ::OpenAPI::OptionalParam<OAIOrdersAcknowledgeRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void content_orders_advancetestorder(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_cancel_request OAIOrdersCancelRequest [optional]
    */
    virtual void content_orders_cancel(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersCancelRequest> &oai_orders_cancel_request = ::OpenAPI::OptionalParam<OAIOrdersCancelRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_cancel_line_item_request OAIOrdersCancelLineItemRequest [optional]
    */
    virtual void content_orders_cancellineitem(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersCancelLineItemRequest> &oai_orders_cancel_line_item_request = ::OpenAPI::OptionalParam<OAIOrdersCancelLineItemRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_cancel_test_order_by_customer_request OAIOrdersCancelTestOrderByCustomerRequest [optional]
    */
    virtual void content_orders_canceltestorderbycustomer(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersCancelTestOrderByCustomerRequest> &oai_orders_cancel_test_order_by_customer_request = ::OpenAPI::OptionalParam<OAIOrdersCancelTestOrderByCustomerRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_create_test_order_request OAIOrdersCreateTestOrderRequest [optional]
    */
    virtual void content_orders_createtestorder(const QString &merchant_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersCreateTestOrderRequest> &oai_orders_create_test_order_request = ::OpenAPI::OptionalParam<OAIOrdersCreateTestOrderRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_create_test_return_request OAIOrdersCreateTestReturnRequest [optional]
    */
    virtual void content_orders_createtestreturn(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersCreateTestReturnRequest> &oai_orders_create_test_return_request = ::OpenAPI::OptionalParam<OAIOrdersCreateTestReturnRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_custom_batch_request OAIOrdersCustomBatchRequest [optional]
    */
    virtual void content_orders_custombatch(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersCustomBatchRequest> &oai_orders_custom_batch_request = ::OpenAPI::OptionalParam<OAIOrdersCustomBatchRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void content_orders_get(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  merchant_order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void content_orders_getbymerchantorderid(const QString &merchant_id, const QString &merchant_order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  template_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  country QString [optional]
    */
    virtual void content_orders_gettestordertemplate(const QString &merchant_id, const QString &template_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_in_store_refund_line_item_request OAIOrdersInStoreRefundLineItemRequest [optional]
    */
    virtual void content_orders_instorerefundlineitem(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersInStoreRefundLineItemRequest> &oai_orders_in_store_refund_line_item_request = ::OpenAPI::OptionalParam<OAIOrdersInStoreRefundLineItemRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  acknowledged bool [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  placed_date_end QString [optional]
    * @param[in]  placed_date_start QString [optional]
    * @param[in]  statuses QList<QString> [optional]
    */
    virtual void content_orders_list(const QString &merchant_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &acknowledged = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &placed_date_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &placed_date_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &statuses = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_refund_request OAIOrdersRefundRequest [optional]
    */
    virtual void content_orders_refund(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersRefundRequest> &oai_orders_refund_request = ::OpenAPI::OptionalParam<OAIOrdersRefundRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_reject_return_line_item_request OAIOrdersRejectReturnLineItemRequest [optional]
    */
    virtual void content_orders_rejectreturnlineitem(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersRejectReturnLineItemRequest> &oai_orders_reject_return_line_item_request = ::OpenAPI::OptionalParam<OAIOrdersRejectReturnLineItemRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_return_line_item_request OAIOrdersReturnLineItemRequest [optional]
    */
    virtual void content_orders_returnlineitem(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersReturnLineItemRequest> &oai_orders_return_line_item_request = ::OpenAPI::OptionalParam<OAIOrdersReturnLineItemRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_return_refund_line_item_request OAIOrdersReturnRefundLineItemRequest [optional]
    */
    virtual void content_orders_returnrefundlineitem(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersReturnRefundLineItemRequest> &oai_orders_return_refund_line_item_request = ::OpenAPI::OptionalParam<OAIOrdersReturnRefundLineItemRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_set_line_item_metadata_request OAIOrdersSetLineItemMetadataRequest [optional]
    */
    virtual void content_orders_setlineitemmetadata(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersSetLineItemMetadataRequest> &oai_orders_set_line_item_metadata_request = ::OpenAPI::OptionalParam<OAIOrdersSetLineItemMetadataRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_ship_line_items_request OAIOrdersShipLineItemsRequest [optional]
    */
    virtual void content_orders_shiplineitems(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersShipLineItemsRequest> &oai_orders_ship_line_items_request = ::OpenAPI::OptionalParam<OAIOrdersShipLineItemsRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_update_line_item_shipping_details_request OAIOrdersUpdateLineItemShippingDetailsRequest [optional]
    */
    virtual void content_orders_updatelineitemshippingdetails(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersUpdateLineItemShippingDetailsRequest> &oai_orders_update_line_item_shipping_details_request = ::OpenAPI::OptionalParam<OAIOrdersUpdateLineItemShippingDetailsRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_update_merchant_order_id_request OAIOrdersUpdateMerchantOrderIdRequest [optional]
    */
    virtual void content_orders_updatemerchantorderid(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersUpdateMerchantOrderIdRequest> &oai_orders_update_merchant_order_id_request = ::OpenAPI::OptionalParam<OAIOrdersUpdateMerchantOrderIdRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_orders_update_shipment_request OAIOrdersUpdateShipmentRequest [optional]
    */
    virtual void content_orders_updateshipment(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOrdersUpdateShipmentRequest> &oai_orders_update_shipment_request = ::OpenAPI::OptionalParam<OAIOrdersUpdateShipmentRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void content_orders_acknowledgeCallback(OAIHttpRequestWorker *worker);
    void content_orders_advancetestorderCallback(OAIHttpRequestWorker *worker);
    void content_orders_cancelCallback(OAIHttpRequestWorker *worker);
    void content_orders_cancellineitemCallback(OAIHttpRequestWorker *worker);
    void content_orders_canceltestorderbycustomerCallback(OAIHttpRequestWorker *worker);
    void content_orders_createtestorderCallback(OAIHttpRequestWorker *worker);
    void content_orders_createtestreturnCallback(OAIHttpRequestWorker *worker);
    void content_orders_custombatchCallback(OAIHttpRequestWorker *worker);
    void content_orders_getCallback(OAIHttpRequestWorker *worker);
    void content_orders_getbymerchantorderidCallback(OAIHttpRequestWorker *worker);
    void content_orders_gettestordertemplateCallback(OAIHttpRequestWorker *worker);
    void content_orders_instorerefundlineitemCallback(OAIHttpRequestWorker *worker);
    void content_orders_listCallback(OAIHttpRequestWorker *worker);
    void content_orders_refundCallback(OAIHttpRequestWorker *worker);
    void content_orders_rejectreturnlineitemCallback(OAIHttpRequestWorker *worker);
    void content_orders_returnlineitemCallback(OAIHttpRequestWorker *worker);
    void content_orders_returnrefundlineitemCallback(OAIHttpRequestWorker *worker);
    void content_orders_setlineitemmetadataCallback(OAIHttpRequestWorker *worker);
    void content_orders_shiplineitemsCallback(OAIHttpRequestWorker *worker);
    void content_orders_updatelineitemshippingdetailsCallback(OAIHttpRequestWorker *worker);
    void content_orders_updatemerchantorderidCallback(OAIHttpRequestWorker *worker);
    void content_orders_updateshipmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void content_orders_acknowledgeSignal(OAIOrdersAcknowledgeResponse summary);
    void content_orders_advancetestorderSignal(OAIOrdersAdvanceTestOrderResponse summary);
    void content_orders_cancelSignal(OAIOrdersCancelResponse summary);
    void content_orders_cancellineitemSignal(OAIOrdersCancelLineItemResponse summary);
    void content_orders_canceltestorderbycustomerSignal(OAIOrdersCancelTestOrderByCustomerResponse summary);
    void content_orders_createtestorderSignal(OAIOrdersCreateTestOrderResponse summary);
    void content_orders_createtestreturnSignal(OAIOrdersCreateTestReturnResponse summary);
    void content_orders_custombatchSignal(OAIOrdersCustomBatchResponse summary);
    void content_orders_getSignal(OAIOrder summary);
    void content_orders_getbymerchantorderidSignal(OAIOrdersGetByMerchantOrderIdResponse summary);
    void content_orders_gettestordertemplateSignal(OAIOrdersGetTestOrderTemplateResponse summary);
    void content_orders_instorerefundlineitemSignal(OAIOrdersInStoreRefundLineItemResponse summary);
    void content_orders_listSignal(OAIOrdersListResponse summary);
    void content_orders_refundSignal(OAIOrdersRefundResponse summary);
    void content_orders_rejectreturnlineitemSignal(OAIOrdersRejectReturnLineItemResponse summary);
    void content_orders_returnlineitemSignal(OAIOrdersReturnLineItemResponse summary);
    void content_orders_returnrefundlineitemSignal(OAIOrdersReturnRefundLineItemResponse summary);
    void content_orders_setlineitemmetadataSignal(OAIOrdersSetLineItemMetadataResponse summary);
    void content_orders_shiplineitemsSignal(OAIOrdersShipLineItemsResponse summary);
    void content_orders_updatelineitemshippingdetailsSignal(OAIOrdersUpdateLineItemShippingDetailsResponse summary);
    void content_orders_updatemerchantorderidSignal(OAIOrdersUpdateMerchantOrderIdResponse summary);
    void content_orders_updateshipmentSignal(OAIOrdersUpdateShipmentResponse summary);


    void content_orders_acknowledgeSignalFull(OAIHttpRequestWorker *worker, OAIOrdersAcknowledgeResponse summary);
    void content_orders_advancetestorderSignalFull(OAIHttpRequestWorker *worker, OAIOrdersAdvanceTestOrderResponse summary);
    void content_orders_cancelSignalFull(OAIHttpRequestWorker *worker, OAIOrdersCancelResponse summary);
    void content_orders_cancellineitemSignalFull(OAIHttpRequestWorker *worker, OAIOrdersCancelLineItemResponse summary);
    void content_orders_canceltestorderbycustomerSignalFull(OAIHttpRequestWorker *worker, OAIOrdersCancelTestOrderByCustomerResponse summary);
    void content_orders_createtestorderSignalFull(OAIHttpRequestWorker *worker, OAIOrdersCreateTestOrderResponse summary);
    void content_orders_createtestreturnSignalFull(OAIHttpRequestWorker *worker, OAIOrdersCreateTestReturnResponse summary);
    void content_orders_custombatchSignalFull(OAIHttpRequestWorker *worker, OAIOrdersCustomBatchResponse summary);
    void content_orders_getSignalFull(OAIHttpRequestWorker *worker, OAIOrder summary);
    void content_orders_getbymerchantorderidSignalFull(OAIHttpRequestWorker *worker, OAIOrdersGetByMerchantOrderIdResponse summary);
    void content_orders_gettestordertemplateSignalFull(OAIHttpRequestWorker *worker, OAIOrdersGetTestOrderTemplateResponse summary);
    void content_orders_instorerefundlineitemSignalFull(OAIHttpRequestWorker *worker, OAIOrdersInStoreRefundLineItemResponse summary);
    void content_orders_listSignalFull(OAIHttpRequestWorker *worker, OAIOrdersListResponse summary);
    void content_orders_refundSignalFull(OAIHttpRequestWorker *worker, OAIOrdersRefundResponse summary);
    void content_orders_rejectreturnlineitemSignalFull(OAIHttpRequestWorker *worker, OAIOrdersRejectReturnLineItemResponse summary);
    void content_orders_returnlineitemSignalFull(OAIHttpRequestWorker *worker, OAIOrdersReturnLineItemResponse summary);
    void content_orders_returnrefundlineitemSignalFull(OAIHttpRequestWorker *worker, OAIOrdersReturnRefundLineItemResponse summary);
    void content_orders_setlineitemmetadataSignalFull(OAIHttpRequestWorker *worker, OAIOrdersSetLineItemMetadataResponse summary);
    void content_orders_shiplineitemsSignalFull(OAIHttpRequestWorker *worker, OAIOrdersShipLineItemsResponse summary);
    void content_orders_updatelineitemshippingdetailsSignalFull(OAIHttpRequestWorker *worker, OAIOrdersUpdateLineItemShippingDetailsResponse summary);
    void content_orders_updatemerchantorderidSignalFull(OAIHttpRequestWorker *worker, OAIOrdersUpdateMerchantOrderIdResponse summary);
    void content_orders_updateshipmentSignalFull(OAIHttpRequestWorker *worker, OAIOrdersUpdateShipmentResponse summary);

    Q_DECL_DEPRECATED_X("Use content_orders_acknowledgeSignalError() instead")
    void content_orders_acknowledgeSignalE(OAIOrdersAcknowledgeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_acknowledgeSignalError(OAIOrdersAcknowledgeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_advancetestorderSignalError() instead")
    void content_orders_advancetestorderSignalE(OAIOrdersAdvanceTestOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_advancetestorderSignalError(OAIOrdersAdvanceTestOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_cancelSignalError() instead")
    void content_orders_cancelSignalE(OAIOrdersCancelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_cancelSignalError(OAIOrdersCancelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_cancellineitemSignalError() instead")
    void content_orders_cancellineitemSignalE(OAIOrdersCancelLineItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_cancellineitemSignalError(OAIOrdersCancelLineItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_canceltestorderbycustomerSignalError() instead")
    void content_orders_canceltestorderbycustomerSignalE(OAIOrdersCancelTestOrderByCustomerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_canceltestorderbycustomerSignalError(OAIOrdersCancelTestOrderByCustomerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_createtestorderSignalError() instead")
    void content_orders_createtestorderSignalE(OAIOrdersCreateTestOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_createtestorderSignalError(OAIOrdersCreateTestOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_createtestreturnSignalError() instead")
    void content_orders_createtestreturnSignalE(OAIOrdersCreateTestReturnResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_createtestreturnSignalError(OAIOrdersCreateTestReturnResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_custombatchSignalError() instead")
    void content_orders_custombatchSignalE(OAIOrdersCustomBatchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_custombatchSignalError(OAIOrdersCustomBatchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_getSignalError() instead")
    void content_orders_getSignalE(OAIOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_getSignalError(OAIOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_getbymerchantorderidSignalError() instead")
    void content_orders_getbymerchantorderidSignalE(OAIOrdersGetByMerchantOrderIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_getbymerchantorderidSignalError(OAIOrdersGetByMerchantOrderIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_gettestordertemplateSignalError() instead")
    void content_orders_gettestordertemplateSignalE(OAIOrdersGetTestOrderTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_gettestordertemplateSignalError(OAIOrdersGetTestOrderTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_instorerefundlineitemSignalError() instead")
    void content_orders_instorerefundlineitemSignalE(OAIOrdersInStoreRefundLineItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_instorerefundlineitemSignalError(OAIOrdersInStoreRefundLineItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_listSignalError() instead")
    void content_orders_listSignalE(OAIOrdersListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_listSignalError(OAIOrdersListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_refundSignalError() instead")
    void content_orders_refundSignalE(OAIOrdersRefundResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_refundSignalError(OAIOrdersRefundResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_rejectreturnlineitemSignalError() instead")
    void content_orders_rejectreturnlineitemSignalE(OAIOrdersRejectReturnLineItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_rejectreturnlineitemSignalError(OAIOrdersRejectReturnLineItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_returnlineitemSignalError() instead")
    void content_orders_returnlineitemSignalE(OAIOrdersReturnLineItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_returnlineitemSignalError(OAIOrdersReturnLineItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_returnrefundlineitemSignalError() instead")
    void content_orders_returnrefundlineitemSignalE(OAIOrdersReturnRefundLineItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_returnrefundlineitemSignalError(OAIOrdersReturnRefundLineItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_setlineitemmetadataSignalError() instead")
    void content_orders_setlineitemmetadataSignalE(OAIOrdersSetLineItemMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_setlineitemmetadataSignalError(OAIOrdersSetLineItemMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_shiplineitemsSignalError() instead")
    void content_orders_shiplineitemsSignalE(OAIOrdersShipLineItemsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_shiplineitemsSignalError(OAIOrdersShipLineItemsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_updatelineitemshippingdetailsSignalError() instead")
    void content_orders_updatelineitemshippingdetailsSignalE(OAIOrdersUpdateLineItemShippingDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_updatelineitemshippingdetailsSignalError(OAIOrdersUpdateLineItemShippingDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_updatemerchantorderidSignalError() instead")
    void content_orders_updatemerchantorderidSignalE(OAIOrdersUpdateMerchantOrderIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_updatemerchantorderidSignalError(OAIOrdersUpdateMerchantOrderIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_updateshipmentSignalError() instead")
    void content_orders_updateshipmentSignalE(OAIOrdersUpdateShipmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_updateshipmentSignalError(OAIOrdersUpdateShipmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use content_orders_acknowledgeSignalErrorFull() instead")
    void content_orders_acknowledgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_acknowledgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_advancetestorderSignalErrorFull() instead")
    void content_orders_advancetestorderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_advancetestorderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_cancelSignalErrorFull() instead")
    void content_orders_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_cancellineitemSignalErrorFull() instead")
    void content_orders_cancellineitemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_cancellineitemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_canceltestorderbycustomerSignalErrorFull() instead")
    void content_orders_canceltestorderbycustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_canceltestorderbycustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_createtestorderSignalErrorFull() instead")
    void content_orders_createtestorderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_createtestorderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_createtestreturnSignalErrorFull() instead")
    void content_orders_createtestreturnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_createtestreturnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_custombatchSignalErrorFull() instead")
    void content_orders_custombatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_custombatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_getSignalErrorFull() instead")
    void content_orders_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_getbymerchantorderidSignalErrorFull() instead")
    void content_orders_getbymerchantorderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_getbymerchantorderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_gettestordertemplateSignalErrorFull() instead")
    void content_orders_gettestordertemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_gettestordertemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_instorerefundlineitemSignalErrorFull() instead")
    void content_orders_instorerefundlineitemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_instorerefundlineitemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_listSignalErrorFull() instead")
    void content_orders_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_refundSignalErrorFull() instead")
    void content_orders_refundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_refundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_rejectreturnlineitemSignalErrorFull() instead")
    void content_orders_rejectreturnlineitemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_rejectreturnlineitemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_returnlineitemSignalErrorFull() instead")
    void content_orders_returnlineitemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_returnlineitemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_returnrefundlineitemSignalErrorFull() instead")
    void content_orders_returnrefundlineitemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_returnrefundlineitemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_setlineitemmetadataSignalErrorFull() instead")
    void content_orders_setlineitemmetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_setlineitemmetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_shiplineitemsSignalErrorFull() instead")
    void content_orders_shiplineitemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_shiplineitemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_updatelineitemshippingdetailsSignalErrorFull() instead")
    void content_orders_updatelineitemshippingdetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_updatelineitemshippingdetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_updatemerchantorderidSignalErrorFull() instead")
    void content_orders_updatemerchantorderidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_updatemerchantorderidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use content_orders_updateshipmentSignalErrorFull() instead")
    void content_orders_updateshipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void content_orders_updateshipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
