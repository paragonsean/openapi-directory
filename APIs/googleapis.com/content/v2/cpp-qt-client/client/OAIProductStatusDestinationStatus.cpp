/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductStatusDestinationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductStatusDestinationStatus::OAIProductStatusDestinationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductStatusDestinationStatus::OAIProductStatusDestinationStatus() {
    this->initializeModel();
}

OAIProductStatusDestinationStatus::~OAIProductStatusDestinationStatus() {}

void OAIProductStatusDestinationStatus::initializeModel() {

    m_approval_pending_isSet = false;
    m_approval_pending_isValid = false;

    m_approval_status_isSet = false;
    m_approval_status_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_intention_isSet = false;
    m_intention_isValid = false;
}

void OAIProductStatusDestinationStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductStatusDestinationStatus::fromJsonObject(QJsonObject json) {

    m_approval_pending_isValid = ::OpenAPI::fromJsonValue(m_approval_pending, json[QString("approvalPending")]);
    m_approval_pending_isSet = !json[QString("approvalPending")].isNull() && m_approval_pending_isValid;

    m_approval_status_isValid = ::OpenAPI::fromJsonValue(m_approval_status, json[QString("approvalStatus")]);
    m_approval_status_isSet = !json[QString("approvalStatus")].isNull() && m_approval_status_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_intention_isValid = ::OpenAPI::fromJsonValue(m_intention, json[QString("intention")]);
    m_intention_isSet = !json[QString("intention")].isNull() && m_intention_isValid;
}

QString OAIProductStatusDestinationStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductStatusDestinationStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_approval_pending_isSet) {
        obj.insert(QString("approvalPending"), ::OpenAPI::toJsonValue(m_approval_pending));
    }
    if (m_approval_status_isSet) {
        obj.insert(QString("approvalStatus"), ::OpenAPI::toJsonValue(m_approval_status));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_intention_isSet) {
        obj.insert(QString("intention"), ::OpenAPI::toJsonValue(m_intention));
    }
    return obj;
}

bool OAIProductStatusDestinationStatus::isApprovalPending() const {
    return m_approval_pending;
}
void OAIProductStatusDestinationStatus::setApprovalPending(const bool &approval_pending) {
    m_approval_pending = approval_pending;
    m_approval_pending_isSet = true;
}

bool OAIProductStatusDestinationStatus::is_approval_pending_Set() const{
    return m_approval_pending_isSet;
}

bool OAIProductStatusDestinationStatus::is_approval_pending_Valid() const{
    return m_approval_pending_isValid;
}

QString OAIProductStatusDestinationStatus::getApprovalStatus() const {
    return m_approval_status;
}
void OAIProductStatusDestinationStatus::setApprovalStatus(const QString &approval_status) {
    m_approval_status = approval_status;
    m_approval_status_isSet = true;
}

bool OAIProductStatusDestinationStatus::is_approval_status_Set() const{
    return m_approval_status_isSet;
}

bool OAIProductStatusDestinationStatus::is_approval_status_Valid() const{
    return m_approval_status_isValid;
}

QString OAIProductStatusDestinationStatus::getDestination() const {
    return m_destination;
}
void OAIProductStatusDestinationStatus::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIProductStatusDestinationStatus::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIProductStatusDestinationStatus::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIProductStatusDestinationStatus::getIntention() const {
    return m_intention;
}
void OAIProductStatusDestinationStatus::setIntention(const QString &intention) {
    m_intention = intention;
    m_intention_isSet = true;
}

bool OAIProductStatusDestinationStatus::is_intention_Set() const{
    return m_intention_isSet;
}

bool OAIProductStatusDestinationStatus::is_intention_Valid() const{
    return m_intention_isValid;
}

bool OAIProductStatusDestinationStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approval_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intention_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductStatusDestinationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
