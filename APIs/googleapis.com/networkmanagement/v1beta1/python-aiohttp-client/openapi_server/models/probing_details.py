# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.edge_location import EdgeLocation
from openapi_server.models.endpoint_info import EndpointInfo
from openapi_server.models.latency_distribution import LatencyDistribution
from openapi_server.models.status import Status
from openapi_server import util


class ProbingDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abort_cause: str=None, destination_egress_location: EdgeLocation=None, endpoint_info: EndpointInfo=None, error: Status=None, probing_latency: LatencyDistribution=None, result: str=None, sent_probe_count: int=None, successful_probe_count: int=None, verify_time: str=None):
        """ProbingDetails - a model defined in OpenAPI

        :param abort_cause: The abort_cause of this ProbingDetails.
        :param destination_egress_location: The destination_egress_location of this ProbingDetails.
        :param endpoint_info: The endpoint_info of this ProbingDetails.
        :param error: The error of this ProbingDetails.
        :param probing_latency: The probing_latency of this ProbingDetails.
        :param result: The result of this ProbingDetails.
        :param sent_probe_count: The sent_probe_count of this ProbingDetails.
        :param successful_probe_count: The successful_probe_count of this ProbingDetails.
        :param verify_time: The verify_time of this ProbingDetails.
        """
        self.openapi_types = {
            'abort_cause': str,
            'destination_egress_location': EdgeLocation,
            'endpoint_info': EndpointInfo,
            'error': Status,
            'probing_latency': LatencyDistribution,
            'result': str,
            'sent_probe_count': int,
            'successful_probe_count': int,
            'verify_time': str
        }

        self.attribute_map = {
            'abort_cause': 'abortCause',
            'destination_egress_location': 'destinationEgressLocation',
            'endpoint_info': 'endpointInfo',
            'error': 'error',
            'probing_latency': 'probingLatency',
            'result': 'result',
            'sent_probe_count': 'sentProbeCount',
            'successful_probe_count': 'successfulProbeCount',
            'verify_time': 'verifyTime'
        }

        self._abort_cause = abort_cause
        self._destination_egress_location = destination_egress_location
        self._endpoint_info = endpoint_info
        self._error = error
        self._probing_latency = probing_latency
        self._result = result
        self._sent_probe_count = sent_probe_count
        self._successful_probe_count = successful_probe_count
        self._verify_time = verify_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProbingDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProbingDetails of this ProbingDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abort_cause(self):
        """Gets the abort_cause of this ProbingDetails.

        The reason probing was aborted.

        :return: The abort_cause of this ProbingDetails.
        :rtype: str
        """
        return self._abort_cause

    @abort_cause.setter
    def abort_cause(self, abort_cause):
        """Sets the abort_cause of this ProbingDetails.

        The reason probing was aborted.

        :param abort_cause: The abort_cause of this ProbingDetails.
        :type abort_cause: str
        """
        allowed_values = ["PROBING_ABORT_CAUSE_UNSPECIFIED", "PERMISSION_DENIED", "NO_SOURCE_LOCATION"]  # noqa: E501
        if abort_cause not in allowed_values:
            raise ValueError(
                "Invalid value for `abort_cause` ({0}), must be one of {1}"
                .format(abort_cause, allowed_values)
            )

        self._abort_cause = abort_cause

    @property
    def destination_egress_location(self):
        """Gets the destination_egress_location of this ProbingDetails.


        :return: The destination_egress_location of this ProbingDetails.
        :rtype: EdgeLocation
        """
        return self._destination_egress_location

    @destination_egress_location.setter
    def destination_egress_location(self, destination_egress_location):
        """Sets the destination_egress_location of this ProbingDetails.


        :param destination_egress_location: The destination_egress_location of this ProbingDetails.
        :type destination_egress_location: EdgeLocation
        """

        self._destination_egress_location = destination_egress_location

    @property
    def endpoint_info(self):
        """Gets the endpoint_info of this ProbingDetails.


        :return: The endpoint_info of this ProbingDetails.
        :rtype: EndpointInfo
        """
        return self._endpoint_info

    @endpoint_info.setter
    def endpoint_info(self, endpoint_info):
        """Sets the endpoint_info of this ProbingDetails.


        :param endpoint_info: The endpoint_info of this ProbingDetails.
        :type endpoint_info: EndpointInfo
        """

        self._endpoint_info = endpoint_info

    @property
    def error(self):
        """Gets the error of this ProbingDetails.


        :return: The error of this ProbingDetails.
        :rtype: Status
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ProbingDetails.


        :param error: The error of this ProbingDetails.
        :type error: Status
        """

        self._error = error

    @property
    def probing_latency(self):
        """Gets the probing_latency of this ProbingDetails.


        :return: The probing_latency of this ProbingDetails.
        :rtype: LatencyDistribution
        """
        return self._probing_latency

    @probing_latency.setter
    def probing_latency(self, probing_latency):
        """Sets the probing_latency of this ProbingDetails.


        :param probing_latency: The probing_latency of this ProbingDetails.
        :type probing_latency: LatencyDistribution
        """

        self._probing_latency = probing_latency

    @property
    def result(self):
        """Gets the result of this ProbingDetails.

        The overall result of active probing.

        :return: The result of this ProbingDetails.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ProbingDetails.

        The overall result of active probing.

        :param result: The result of this ProbingDetails.
        :type result: str
        """
        allowed_values = ["PROBING_RESULT_UNSPECIFIED", "REACHABLE", "UNREACHABLE", "REACHABILITY_INCONSISTENT", "UNDETERMINED"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def sent_probe_count(self):
        """Gets the sent_probe_count of this ProbingDetails.

        Number of probes sent.

        :return: The sent_probe_count of this ProbingDetails.
        :rtype: int
        """
        return self._sent_probe_count

    @sent_probe_count.setter
    def sent_probe_count(self, sent_probe_count):
        """Sets the sent_probe_count of this ProbingDetails.

        Number of probes sent.

        :param sent_probe_count: The sent_probe_count of this ProbingDetails.
        :type sent_probe_count: int
        """

        self._sent_probe_count = sent_probe_count

    @property
    def successful_probe_count(self):
        """Gets the successful_probe_count of this ProbingDetails.

        Number of probes that reached the destination.

        :return: The successful_probe_count of this ProbingDetails.
        :rtype: int
        """
        return self._successful_probe_count

    @successful_probe_count.setter
    def successful_probe_count(self, successful_probe_count):
        """Sets the successful_probe_count of this ProbingDetails.

        Number of probes that reached the destination.

        :param successful_probe_count: The successful_probe_count of this ProbingDetails.
        :type successful_probe_count: int
        """

        self._successful_probe_count = successful_probe_count

    @property
    def verify_time(self):
        """Gets the verify_time of this ProbingDetails.

        The time that reachability was assessed through active probing.

        :return: The verify_time of this ProbingDetails.
        :rtype: str
        """
        return self._verify_time

    @verify_time.setter
    def verify_time(self, verify_time):
        """Sets the verify_time of this ProbingDetails.

        The time that reachability was assessed through active probing.

        :param verify_time: The verify_time of this ProbingDetails.
        :type verify_time: str
        """

        self._verify_time = verify_time
