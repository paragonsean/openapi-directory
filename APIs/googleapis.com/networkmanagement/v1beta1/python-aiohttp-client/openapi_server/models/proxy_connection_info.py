# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProxyConnectionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_uri: str=None, new_destination_ip: str=None, new_destination_port: int=None, new_source_ip: str=None, new_source_port: int=None, old_destination_ip: str=None, old_destination_port: int=None, old_source_ip: str=None, old_source_port: int=None, protocol: str=None, subnet_uri: str=None):
        """ProxyConnectionInfo - a model defined in OpenAPI

        :param network_uri: The network_uri of this ProxyConnectionInfo.
        :param new_destination_ip: The new_destination_ip of this ProxyConnectionInfo.
        :param new_destination_port: The new_destination_port of this ProxyConnectionInfo.
        :param new_source_ip: The new_source_ip of this ProxyConnectionInfo.
        :param new_source_port: The new_source_port of this ProxyConnectionInfo.
        :param old_destination_ip: The old_destination_ip of this ProxyConnectionInfo.
        :param old_destination_port: The old_destination_port of this ProxyConnectionInfo.
        :param old_source_ip: The old_source_ip of this ProxyConnectionInfo.
        :param old_source_port: The old_source_port of this ProxyConnectionInfo.
        :param protocol: The protocol of this ProxyConnectionInfo.
        :param subnet_uri: The subnet_uri of this ProxyConnectionInfo.
        """
        self.openapi_types = {
            'network_uri': str,
            'new_destination_ip': str,
            'new_destination_port': int,
            'new_source_ip': str,
            'new_source_port': int,
            'old_destination_ip': str,
            'old_destination_port': int,
            'old_source_ip': str,
            'old_source_port': int,
            'protocol': str,
            'subnet_uri': str
        }

        self.attribute_map = {
            'network_uri': 'networkUri',
            'new_destination_ip': 'newDestinationIp',
            'new_destination_port': 'newDestinationPort',
            'new_source_ip': 'newSourceIp',
            'new_source_port': 'newSourcePort',
            'old_destination_ip': 'oldDestinationIp',
            'old_destination_port': 'oldDestinationPort',
            'old_source_ip': 'oldSourceIp',
            'old_source_port': 'oldSourcePort',
            'protocol': 'protocol',
            'subnet_uri': 'subnetUri'
        }

        self._network_uri = network_uri
        self._new_destination_ip = new_destination_ip
        self._new_destination_port = new_destination_port
        self._new_source_ip = new_source_ip
        self._new_source_port = new_source_port
        self._old_destination_ip = old_destination_ip
        self._old_destination_port = old_destination_port
        self._old_source_ip = old_source_ip
        self._old_source_port = old_source_port
        self._protocol = protocol
        self._subnet_uri = subnet_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProxyConnectionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProxyConnectionInfo of this ProxyConnectionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_uri(self):
        """Gets the network_uri of this ProxyConnectionInfo.

        URI of the network where connection is proxied.

        :return: The network_uri of this ProxyConnectionInfo.
        :rtype: str
        """
        return self._network_uri

    @network_uri.setter
    def network_uri(self, network_uri):
        """Sets the network_uri of this ProxyConnectionInfo.

        URI of the network where connection is proxied.

        :param network_uri: The network_uri of this ProxyConnectionInfo.
        :type network_uri: str
        """

        self._network_uri = network_uri

    @property
    def new_destination_ip(self):
        """Gets the new_destination_ip of this ProxyConnectionInfo.

        Destination IP address of a new connection.

        :return: The new_destination_ip of this ProxyConnectionInfo.
        :rtype: str
        """
        return self._new_destination_ip

    @new_destination_ip.setter
    def new_destination_ip(self, new_destination_ip):
        """Sets the new_destination_ip of this ProxyConnectionInfo.

        Destination IP address of a new connection.

        :param new_destination_ip: The new_destination_ip of this ProxyConnectionInfo.
        :type new_destination_ip: str
        """

        self._new_destination_ip = new_destination_ip

    @property
    def new_destination_port(self):
        """Gets the new_destination_port of this ProxyConnectionInfo.

        Destination port of a new connection. Only valid when protocol is TCP or UDP.

        :return: The new_destination_port of this ProxyConnectionInfo.
        :rtype: int
        """
        return self._new_destination_port

    @new_destination_port.setter
    def new_destination_port(self, new_destination_port):
        """Sets the new_destination_port of this ProxyConnectionInfo.

        Destination port of a new connection. Only valid when protocol is TCP or UDP.

        :param new_destination_port: The new_destination_port of this ProxyConnectionInfo.
        :type new_destination_port: int
        """

        self._new_destination_port = new_destination_port

    @property
    def new_source_ip(self):
        """Gets the new_source_ip of this ProxyConnectionInfo.

        Source IP address of a new connection.

        :return: The new_source_ip of this ProxyConnectionInfo.
        :rtype: str
        """
        return self._new_source_ip

    @new_source_ip.setter
    def new_source_ip(self, new_source_ip):
        """Sets the new_source_ip of this ProxyConnectionInfo.

        Source IP address of a new connection.

        :param new_source_ip: The new_source_ip of this ProxyConnectionInfo.
        :type new_source_ip: str
        """

        self._new_source_ip = new_source_ip

    @property
    def new_source_port(self):
        """Gets the new_source_port of this ProxyConnectionInfo.

        Source port of a new connection. Only valid when protocol is TCP or UDP.

        :return: The new_source_port of this ProxyConnectionInfo.
        :rtype: int
        """
        return self._new_source_port

    @new_source_port.setter
    def new_source_port(self, new_source_port):
        """Sets the new_source_port of this ProxyConnectionInfo.

        Source port of a new connection. Only valid when protocol is TCP or UDP.

        :param new_source_port: The new_source_port of this ProxyConnectionInfo.
        :type new_source_port: int
        """

        self._new_source_port = new_source_port

    @property
    def old_destination_ip(self):
        """Gets the old_destination_ip of this ProxyConnectionInfo.

        Destination IP address of an original connection

        :return: The old_destination_ip of this ProxyConnectionInfo.
        :rtype: str
        """
        return self._old_destination_ip

    @old_destination_ip.setter
    def old_destination_ip(self, old_destination_ip):
        """Sets the old_destination_ip of this ProxyConnectionInfo.

        Destination IP address of an original connection

        :param old_destination_ip: The old_destination_ip of this ProxyConnectionInfo.
        :type old_destination_ip: str
        """

        self._old_destination_ip = old_destination_ip

    @property
    def old_destination_port(self):
        """Gets the old_destination_port of this ProxyConnectionInfo.

        Destination port of an original connection. Only valid when protocol is TCP or UDP.

        :return: The old_destination_port of this ProxyConnectionInfo.
        :rtype: int
        """
        return self._old_destination_port

    @old_destination_port.setter
    def old_destination_port(self, old_destination_port):
        """Sets the old_destination_port of this ProxyConnectionInfo.

        Destination port of an original connection. Only valid when protocol is TCP or UDP.

        :param old_destination_port: The old_destination_port of this ProxyConnectionInfo.
        :type old_destination_port: int
        """

        self._old_destination_port = old_destination_port

    @property
    def old_source_ip(self):
        """Gets the old_source_ip of this ProxyConnectionInfo.

        Source IP address of an original connection.

        :return: The old_source_ip of this ProxyConnectionInfo.
        :rtype: str
        """
        return self._old_source_ip

    @old_source_ip.setter
    def old_source_ip(self, old_source_ip):
        """Sets the old_source_ip of this ProxyConnectionInfo.

        Source IP address of an original connection.

        :param old_source_ip: The old_source_ip of this ProxyConnectionInfo.
        :type old_source_ip: str
        """

        self._old_source_ip = old_source_ip

    @property
    def old_source_port(self):
        """Gets the old_source_port of this ProxyConnectionInfo.

        Source port of an original connection. Only valid when protocol is TCP or UDP.

        :return: The old_source_port of this ProxyConnectionInfo.
        :rtype: int
        """
        return self._old_source_port

    @old_source_port.setter
    def old_source_port(self, old_source_port):
        """Sets the old_source_port of this ProxyConnectionInfo.

        Source port of an original connection. Only valid when protocol is TCP or UDP.

        :param old_source_port: The old_source_port of this ProxyConnectionInfo.
        :type old_source_port: int
        """

        self._old_source_port = old_source_port

    @property
    def protocol(self):
        """Gets the protocol of this ProxyConnectionInfo.

        IP protocol in string format, for example: \"TCP\", \"UDP\", \"ICMP\".

        :return: The protocol of this ProxyConnectionInfo.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ProxyConnectionInfo.

        IP protocol in string format, for example: \"TCP\", \"UDP\", \"ICMP\".

        :param protocol: The protocol of this ProxyConnectionInfo.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def subnet_uri(self):
        """Gets the subnet_uri of this ProxyConnectionInfo.

        Uri of proxy subnet.

        :return: The subnet_uri of this ProxyConnectionInfo.
        :rtype: str
        """
        return self._subnet_uri

    @subnet_uri.setter
    def subnet_uri(self, subnet_uri):
        """Sets the subnet_uri of this ProxyConnectionInfo.

        Uri of proxy subnet.

        :param subnet_uri: The subnet_uri of this ProxyConnectionInfo.
        :type subnet_uri: str
        """

        self._subnet_uri = subnet_uri
