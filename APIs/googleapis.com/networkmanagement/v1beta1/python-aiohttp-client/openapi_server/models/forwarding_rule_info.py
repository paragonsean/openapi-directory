# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ForwardingRuleInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, matched_port_range: str=None, matched_protocol: str=None, network_uri: str=None, target: str=None, uri: str=None, vip: str=None):
        """ForwardingRuleInfo - a model defined in OpenAPI

        :param display_name: The display_name of this ForwardingRuleInfo.
        :param matched_port_range: The matched_port_range of this ForwardingRuleInfo.
        :param matched_protocol: The matched_protocol of this ForwardingRuleInfo.
        :param network_uri: The network_uri of this ForwardingRuleInfo.
        :param target: The target of this ForwardingRuleInfo.
        :param uri: The uri of this ForwardingRuleInfo.
        :param vip: The vip of this ForwardingRuleInfo.
        """
        self.openapi_types = {
            'display_name': str,
            'matched_port_range': str,
            'matched_protocol': str,
            'network_uri': str,
            'target': str,
            'uri': str,
            'vip': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'matched_port_range': 'matchedPortRange',
            'matched_protocol': 'matchedProtocol',
            'network_uri': 'networkUri',
            'target': 'target',
            'uri': 'uri',
            'vip': 'vip'
        }

        self._display_name = display_name
        self._matched_port_range = matched_port_range
        self._matched_protocol = matched_protocol
        self._network_uri = network_uri
        self._target = target
        self._uri = uri
        self._vip = vip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForwardingRuleInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForwardingRuleInfo of this ForwardingRuleInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ForwardingRuleInfo.

        Name of a Compute Engine forwarding rule.

        :return: The display_name of this ForwardingRuleInfo.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ForwardingRuleInfo.

        Name of a Compute Engine forwarding rule.

        :param display_name: The display_name of this ForwardingRuleInfo.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def matched_port_range(self):
        """Gets the matched_port_range of this ForwardingRuleInfo.

        Port range defined in the forwarding rule that matches the test.

        :return: The matched_port_range of this ForwardingRuleInfo.
        :rtype: str
        """
        return self._matched_port_range

    @matched_port_range.setter
    def matched_port_range(self, matched_port_range):
        """Sets the matched_port_range of this ForwardingRuleInfo.

        Port range defined in the forwarding rule that matches the test.

        :param matched_port_range: The matched_port_range of this ForwardingRuleInfo.
        :type matched_port_range: str
        """

        self._matched_port_range = matched_port_range

    @property
    def matched_protocol(self):
        """Gets the matched_protocol of this ForwardingRuleInfo.

        Protocol defined in the forwarding rule that matches the test.

        :return: The matched_protocol of this ForwardingRuleInfo.
        :rtype: str
        """
        return self._matched_protocol

    @matched_protocol.setter
    def matched_protocol(self, matched_protocol):
        """Sets the matched_protocol of this ForwardingRuleInfo.

        Protocol defined in the forwarding rule that matches the test.

        :param matched_protocol: The matched_protocol of this ForwardingRuleInfo.
        :type matched_protocol: str
        """

        self._matched_protocol = matched_protocol

    @property
    def network_uri(self):
        """Gets the network_uri of this ForwardingRuleInfo.

        Network URI. Only valid for Internal Load Balancer.

        :return: The network_uri of this ForwardingRuleInfo.
        :rtype: str
        """
        return self._network_uri

    @network_uri.setter
    def network_uri(self, network_uri):
        """Sets the network_uri of this ForwardingRuleInfo.

        Network URI. Only valid for Internal Load Balancer.

        :param network_uri: The network_uri of this ForwardingRuleInfo.
        :type network_uri: str
        """

        self._network_uri = network_uri

    @property
    def target(self):
        """Gets the target of this ForwardingRuleInfo.

        Target type of the forwarding rule.

        :return: The target of this ForwardingRuleInfo.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ForwardingRuleInfo.

        Target type of the forwarding rule.

        :param target: The target of this ForwardingRuleInfo.
        :type target: str
        """

        self._target = target

    @property
    def uri(self):
        """Gets the uri of this ForwardingRuleInfo.

        URI of a Compute Engine forwarding rule.

        :return: The uri of this ForwardingRuleInfo.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ForwardingRuleInfo.

        URI of a Compute Engine forwarding rule.

        :param uri: The uri of this ForwardingRuleInfo.
        :type uri: str
        """

        self._uri = uri

    @property
    def vip(self):
        """Gets the vip of this ForwardingRuleInfo.

        VIP of the forwarding rule.

        :return: The vip of this ForwardingRuleInfo.
        :rtype: str
        """
        return self._vip

    @vip.setter
    def vip(self, vip):
        """Sets the vip of this ForwardingRuleInfo.

        VIP of the forwarding rule.

        :param vip: The vip of this ForwardingRuleInfo.
        :type vip: str
        """

        self._vip = vip
