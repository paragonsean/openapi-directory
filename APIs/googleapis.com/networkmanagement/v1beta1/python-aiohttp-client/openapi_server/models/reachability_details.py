# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server.models.trace import Trace
from openapi_server import util


class ReachabilityDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: Status=None, result: str=None, traces: List[Trace]=None, verify_time: str=None):
        """ReachabilityDetails - a model defined in OpenAPI

        :param error: The error of this ReachabilityDetails.
        :param result: The result of this ReachabilityDetails.
        :param traces: The traces of this ReachabilityDetails.
        :param verify_time: The verify_time of this ReachabilityDetails.
        """
        self.openapi_types = {
            'error': Status,
            'result': str,
            'traces': List[Trace],
            'verify_time': str
        }

        self.attribute_map = {
            'error': 'error',
            'result': 'result',
            'traces': 'traces',
            'verify_time': 'verifyTime'
        }

        self._error = error
        self._result = result
        self._traces = traces
        self._verify_time = verify_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReachabilityDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReachabilityDetails of this ReachabilityDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this ReachabilityDetails.


        :return: The error of this ReachabilityDetails.
        :rtype: Status
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ReachabilityDetails.


        :param error: The error of this ReachabilityDetails.
        :type error: Status
        """

        self._error = error

    @property
    def result(self):
        """Gets the result of this ReachabilityDetails.

        The overall result of the test's configuration analysis.

        :return: The result of this ReachabilityDetails.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ReachabilityDetails.

        The overall result of the test's configuration analysis.

        :param result: The result of this ReachabilityDetails.
        :type result: str
        """
        allowed_values = ["RESULT_UNSPECIFIED", "REACHABLE", "UNREACHABLE", "AMBIGUOUS", "UNDETERMINED"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def traces(self):
        """Gets the traces of this ReachabilityDetails.

        Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.

        :return: The traces of this ReachabilityDetails.
        :rtype: List[Trace]
        """
        return self._traces

    @traces.setter
    def traces(self, traces):
        """Sets the traces of this ReachabilityDetails.

        Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.

        :param traces: The traces of this ReachabilityDetails.
        :type traces: List[Trace]
        """

        self._traces = traces

    @property
    def verify_time(self):
        """Gets the verify_time of this ReachabilityDetails.

        The time of the configuration analysis.

        :return: The verify_time of this ReachabilityDetails.
        :rtype: str
        """
        return self._verify_time

    @verify_time.setter
    def verify_time(self, verify_time):
        """Sets the verify_time of this ReachabilityDetails.

        The time of the configuration analysis.

        :param verify_time: The verify_time of this ReachabilityDetails.
        :type verify_time: str
        """

        self._verify_time = verify_time
