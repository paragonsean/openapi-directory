# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_info import EndpointInfo
from openapi_server.models.step import Step
from openapi_server import util


class Trace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_info: EndpointInfo=None, forward_trace_id: int=None, steps: List[Step]=None):
        """Trace - a model defined in OpenAPI

        :param endpoint_info: The endpoint_info of this Trace.
        :param forward_trace_id: The forward_trace_id of this Trace.
        :param steps: The steps of this Trace.
        """
        self.openapi_types = {
            'endpoint_info': EndpointInfo,
            'forward_trace_id': int,
            'steps': List[Step]
        }

        self.attribute_map = {
            'endpoint_info': 'endpointInfo',
            'forward_trace_id': 'forwardTraceId',
            'steps': 'steps'
        }

        self._endpoint_info = endpoint_info
        self._forward_trace_id = forward_trace_id
        self._steps = steps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Trace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trace of this Trace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_info(self):
        """Gets the endpoint_info of this Trace.


        :return: The endpoint_info of this Trace.
        :rtype: EndpointInfo
        """
        return self._endpoint_info

    @endpoint_info.setter
    def endpoint_info(self, endpoint_info):
        """Sets the endpoint_info of this Trace.


        :param endpoint_info: The endpoint_info of this Trace.
        :type endpoint_info: EndpointInfo
        """

        self._endpoint_info = endpoint_info

    @property
    def forward_trace_id(self):
        """Gets the forward_trace_id of this Trace.

        ID of trace. For forward traces, this ID is unique for each trace. For return traces, it matches ID of associated forward trace. A single forward trace can be associated with none, one or more than one return trace.

        :return: The forward_trace_id of this Trace.
        :rtype: int
        """
        return self._forward_trace_id

    @forward_trace_id.setter
    def forward_trace_id(self, forward_trace_id):
        """Sets the forward_trace_id of this Trace.

        ID of trace. For forward traces, this ID is unique for each trace. For return traces, it matches ID of associated forward trace. A single forward trace can be associated with none, one or more than one return trace.

        :param forward_trace_id: The forward_trace_id of this Trace.
        :type forward_trace_id: int
        """

        self._forward_trace_id = forward_trace_id

    @property
    def steps(self):
        """Gets the steps of this Trace.

        A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.

        :return: The steps of this Trace.
        :rtype: List[Step]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this Trace.

        A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.

        :param steps: The steps of this Trace.
        :type steps: List[Step]
        """

        self._steps = steps
