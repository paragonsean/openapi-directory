# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoadBalancerBackendInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_bucket_uri: str=None, backend_service_uri: str=None, health_check_firewalls_config_state: str=None, health_check_uri: str=None, instance_group_uri: str=None, instance_uri: str=None, name: str=None, network_endpoint_group_uri: str=None, psc_google_api_target: str=None, psc_service_attachment_uri: str=None):
        """LoadBalancerBackendInfo - a model defined in OpenAPI

        :param backend_bucket_uri: The backend_bucket_uri of this LoadBalancerBackendInfo.
        :param backend_service_uri: The backend_service_uri of this LoadBalancerBackendInfo.
        :param health_check_firewalls_config_state: The health_check_firewalls_config_state of this LoadBalancerBackendInfo.
        :param health_check_uri: The health_check_uri of this LoadBalancerBackendInfo.
        :param instance_group_uri: The instance_group_uri of this LoadBalancerBackendInfo.
        :param instance_uri: The instance_uri of this LoadBalancerBackendInfo.
        :param name: The name of this LoadBalancerBackendInfo.
        :param network_endpoint_group_uri: The network_endpoint_group_uri of this LoadBalancerBackendInfo.
        :param psc_google_api_target: The psc_google_api_target of this LoadBalancerBackendInfo.
        :param psc_service_attachment_uri: The psc_service_attachment_uri of this LoadBalancerBackendInfo.
        """
        self.openapi_types = {
            'backend_bucket_uri': str,
            'backend_service_uri': str,
            'health_check_firewalls_config_state': str,
            'health_check_uri': str,
            'instance_group_uri': str,
            'instance_uri': str,
            'name': str,
            'network_endpoint_group_uri': str,
            'psc_google_api_target': str,
            'psc_service_attachment_uri': str
        }

        self.attribute_map = {
            'backend_bucket_uri': 'backendBucketUri',
            'backend_service_uri': 'backendServiceUri',
            'health_check_firewalls_config_state': 'healthCheckFirewallsConfigState',
            'health_check_uri': 'healthCheckUri',
            'instance_group_uri': 'instanceGroupUri',
            'instance_uri': 'instanceUri',
            'name': 'name',
            'network_endpoint_group_uri': 'networkEndpointGroupUri',
            'psc_google_api_target': 'pscGoogleApiTarget',
            'psc_service_attachment_uri': 'pscServiceAttachmentUri'
        }

        self._backend_bucket_uri = backend_bucket_uri
        self._backend_service_uri = backend_service_uri
        self._health_check_firewalls_config_state = health_check_firewalls_config_state
        self._health_check_uri = health_check_uri
        self._instance_group_uri = instance_group_uri
        self._instance_uri = instance_uri
        self._name = name
        self._network_endpoint_group_uri = network_endpoint_group_uri
        self._psc_google_api_target = psc_google_api_target
        self._psc_service_attachment_uri = psc_service_attachment_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancerBackendInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancerBackendInfo of this LoadBalancerBackendInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_bucket_uri(self):
        """Gets the backend_bucket_uri of this LoadBalancerBackendInfo.

        URI of the backend bucket this backend targets (if applicable).

        :return: The backend_bucket_uri of this LoadBalancerBackendInfo.
        :rtype: str
        """
        return self._backend_bucket_uri

    @backend_bucket_uri.setter
    def backend_bucket_uri(self, backend_bucket_uri):
        """Sets the backend_bucket_uri of this LoadBalancerBackendInfo.

        URI of the backend bucket this backend targets (if applicable).

        :param backend_bucket_uri: The backend_bucket_uri of this LoadBalancerBackendInfo.
        :type backend_bucket_uri: str
        """

        self._backend_bucket_uri = backend_bucket_uri

    @property
    def backend_service_uri(self):
        """Gets the backend_service_uri of this LoadBalancerBackendInfo.

        URI of the backend service this backend belongs to (if applicable).

        :return: The backend_service_uri of this LoadBalancerBackendInfo.
        :rtype: str
        """
        return self._backend_service_uri

    @backend_service_uri.setter
    def backend_service_uri(self, backend_service_uri):
        """Sets the backend_service_uri of this LoadBalancerBackendInfo.

        URI of the backend service this backend belongs to (if applicable).

        :param backend_service_uri: The backend_service_uri of this LoadBalancerBackendInfo.
        :type backend_service_uri: str
        """

        self._backend_service_uri = backend_service_uri

    @property
    def health_check_firewalls_config_state(self):
        """Gets the health_check_firewalls_config_state of this LoadBalancerBackendInfo.

        Output only. Health check firewalls configuration state for the backend. This is a result of the static firewall analysis (verifying that health check traffic from required IP ranges to the backend is allowed or not). The backend might still be unhealthy even if these firewalls are configured. Please refer to the documentation for more information: https://cloud.google.com/load-balancing/docs/firewall-rules

        :return: The health_check_firewalls_config_state of this LoadBalancerBackendInfo.
        :rtype: str
        """
        return self._health_check_firewalls_config_state

    @health_check_firewalls_config_state.setter
    def health_check_firewalls_config_state(self, health_check_firewalls_config_state):
        """Sets the health_check_firewalls_config_state of this LoadBalancerBackendInfo.

        Output only. Health check firewalls configuration state for the backend. This is a result of the static firewall analysis (verifying that health check traffic from required IP ranges to the backend is allowed or not). The backend might still be unhealthy even if these firewalls are configured. Please refer to the documentation for more information: https://cloud.google.com/load-balancing/docs/firewall-rules

        :param health_check_firewalls_config_state: The health_check_firewalls_config_state of this LoadBalancerBackendInfo.
        :type health_check_firewalls_config_state: str
        """
        allowed_values = ["HEALTH_CHECK_FIREWALLS_CONFIG_STATE_UNSPECIFIED", "FIREWALLS_CONFIGURED", "FIREWALLS_PARTIALLY_CONFIGURED", "FIREWALLS_NOT_CONFIGURED", "FIREWALLS_UNSUPPORTED"]  # noqa: E501
        if health_check_firewalls_config_state not in allowed_values:
            raise ValueError(
                "Invalid value for `health_check_firewalls_config_state` ({0}), must be one of {1}"
                .format(health_check_firewalls_config_state, allowed_values)
            )

        self._health_check_firewalls_config_state = health_check_firewalls_config_state

    @property
    def health_check_uri(self):
        """Gets the health_check_uri of this LoadBalancerBackendInfo.

        URI of the health check attached to this backend (if applicable).

        :return: The health_check_uri of this LoadBalancerBackendInfo.
        :rtype: str
        """
        return self._health_check_uri

    @health_check_uri.setter
    def health_check_uri(self, health_check_uri):
        """Sets the health_check_uri of this LoadBalancerBackendInfo.

        URI of the health check attached to this backend (if applicable).

        :param health_check_uri: The health_check_uri of this LoadBalancerBackendInfo.
        :type health_check_uri: str
        """

        self._health_check_uri = health_check_uri

    @property
    def instance_group_uri(self):
        """Gets the instance_group_uri of this LoadBalancerBackendInfo.

        URI of the instance group this backend belongs to (if applicable).

        :return: The instance_group_uri of this LoadBalancerBackendInfo.
        :rtype: str
        """
        return self._instance_group_uri

    @instance_group_uri.setter
    def instance_group_uri(self, instance_group_uri):
        """Sets the instance_group_uri of this LoadBalancerBackendInfo.

        URI of the instance group this backend belongs to (if applicable).

        :param instance_group_uri: The instance_group_uri of this LoadBalancerBackendInfo.
        :type instance_group_uri: str
        """

        self._instance_group_uri = instance_group_uri

    @property
    def instance_uri(self):
        """Gets the instance_uri of this LoadBalancerBackendInfo.

        URI of the backend instance (if applicable). Populated for instance group backends, and zonal NEG backends.

        :return: The instance_uri of this LoadBalancerBackendInfo.
        :rtype: str
        """
        return self._instance_uri

    @instance_uri.setter
    def instance_uri(self, instance_uri):
        """Sets the instance_uri of this LoadBalancerBackendInfo.

        URI of the backend instance (if applicable). Populated for instance group backends, and zonal NEG backends.

        :param instance_uri: The instance_uri of this LoadBalancerBackendInfo.
        :type instance_uri: str
        """

        self._instance_uri = instance_uri

    @property
    def name(self):
        """Gets the name of this LoadBalancerBackendInfo.

        Display name of the backend. For example, it might be an instance name for the instance group backends, or an IP address and port for zonal network endpoint group backends.

        :return: The name of this LoadBalancerBackendInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoadBalancerBackendInfo.

        Display name of the backend. For example, it might be an instance name for the instance group backends, or an IP address and port for zonal network endpoint group backends.

        :param name: The name of this LoadBalancerBackendInfo.
        :type name: str
        """

        self._name = name

    @property
    def network_endpoint_group_uri(self):
        """Gets the network_endpoint_group_uri of this LoadBalancerBackendInfo.

        URI of the network endpoint group this backend belongs to (if applicable).

        :return: The network_endpoint_group_uri of this LoadBalancerBackendInfo.
        :rtype: str
        """
        return self._network_endpoint_group_uri

    @network_endpoint_group_uri.setter
    def network_endpoint_group_uri(self, network_endpoint_group_uri):
        """Sets the network_endpoint_group_uri of this LoadBalancerBackendInfo.

        URI of the network endpoint group this backend belongs to (if applicable).

        :param network_endpoint_group_uri: The network_endpoint_group_uri of this LoadBalancerBackendInfo.
        :type network_endpoint_group_uri: str
        """

        self._network_endpoint_group_uri = network_endpoint_group_uri

    @property
    def psc_google_api_target(self):
        """Gets the psc_google_api_target of this LoadBalancerBackendInfo.

        PSC Google API target this PSC NEG backend targets (if applicable).

        :return: The psc_google_api_target of this LoadBalancerBackendInfo.
        :rtype: str
        """
        return self._psc_google_api_target

    @psc_google_api_target.setter
    def psc_google_api_target(self, psc_google_api_target):
        """Sets the psc_google_api_target of this LoadBalancerBackendInfo.

        PSC Google API target this PSC NEG backend targets (if applicable).

        :param psc_google_api_target: The psc_google_api_target of this LoadBalancerBackendInfo.
        :type psc_google_api_target: str
        """

        self._psc_google_api_target = psc_google_api_target

    @property
    def psc_service_attachment_uri(self):
        """Gets the psc_service_attachment_uri of this LoadBalancerBackendInfo.

        URI of the PSC service attachment this PSC NEG backend targets (if applicable).

        :return: The psc_service_attachment_uri of this LoadBalancerBackendInfo.
        :rtype: str
        """
        return self._psc_service_attachment_uri

    @psc_service_attachment_uri.setter
    def psc_service_attachment_uri(self, psc_service_attachment_uri):
        """Sets the psc_service_attachment_uri of this LoadBalancerBackendInfo.

        URI of the PSC service attachment this PSC NEG backend targets (if applicable).

        :param psc_service_attachment_uri: The psc_service_attachment_uri of this LoadBalancerBackendInfo.
        :type psc_service_attachment_uri: str
        """

        self._psc_service_attachment_uri = psc_service_attachment_uri
