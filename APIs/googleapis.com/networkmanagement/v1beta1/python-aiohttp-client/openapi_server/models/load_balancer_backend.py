# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoadBalancerBackend(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, health_check_allowing_firewall_rules: List[str]=None, health_check_blocking_firewall_rules: List[str]=None, health_check_firewall_state: str=None, uri: str=None):
        """LoadBalancerBackend - a model defined in OpenAPI

        :param display_name: The display_name of this LoadBalancerBackend.
        :param health_check_allowing_firewall_rules: The health_check_allowing_firewall_rules of this LoadBalancerBackend.
        :param health_check_blocking_firewall_rules: The health_check_blocking_firewall_rules of this LoadBalancerBackend.
        :param health_check_firewall_state: The health_check_firewall_state of this LoadBalancerBackend.
        :param uri: The uri of this LoadBalancerBackend.
        """
        self.openapi_types = {
            'display_name': str,
            'health_check_allowing_firewall_rules': List[str],
            'health_check_blocking_firewall_rules': List[str],
            'health_check_firewall_state': str,
            'uri': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'health_check_allowing_firewall_rules': 'healthCheckAllowingFirewallRules',
            'health_check_blocking_firewall_rules': 'healthCheckBlockingFirewallRules',
            'health_check_firewall_state': 'healthCheckFirewallState',
            'uri': 'uri'
        }

        self._display_name = display_name
        self._health_check_allowing_firewall_rules = health_check_allowing_firewall_rules
        self._health_check_blocking_firewall_rules = health_check_blocking_firewall_rules
        self._health_check_firewall_state = health_check_firewall_state
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancerBackend':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancerBackend of this LoadBalancerBackend.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this LoadBalancerBackend.

        Name of a Compute Engine instance or network endpoint.

        :return: The display_name of this LoadBalancerBackend.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LoadBalancerBackend.

        Name of a Compute Engine instance or network endpoint.

        :param display_name: The display_name of this LoadBalancerBackend.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def health_check_allowing_firewall_rules(self):
        """Gets the health_check_allowing_firewall_rules of this LoadBalancerBackend.

        A list of firewall rule URIs allowing probes from health check IP ranges.

        :return: The health_check_allowing_firewall_rules of this LoadBalancerBackend.
        :rtype: List[str]
        """
        return self._health_check_allowing_firewall_rules

    @health_check_allowing_firewall_rules.setter
    def health_check_allowing_firewall_rules(self, health_check_allowing_firewall_rules):
        """Sets the health_check_allowing_firewall_rules of this LoadBalancerBackend.

        A list of firewall rule URIs allowing probes from health check IP ranges.

        :param health_check_allowing_firewall_rules: The health_check_allowing_firewall_rules of this LoadBalancerBackend.
        :type health_check_allowing_firewall_rules: List[str]
        """

        self._health_check_allowing_firewall_rules = health_check_allowing_firewall_rules

    @property
    def health_check_blocking_firewall_rules(self):
        """Gets the health_check_blocking_firewall_rules of this LoadBalancerBackend.

        A list of firewall rule URIs blocking probes from health check IP ranges.

        :return: The health_check_blocking_firewall_rules of this LoadBalancerBackend.
        :rtype: List[str]
        """
        return self._health_check_blocking_firewall_rules

    @health_check_blocking_firewall_rules.setter
    def health_check_blocking_firewall_rules(self, health_check_blocking_firewall_rules):
        """Sets the health_check_blocking_firewall_rules of this LoadBalancerBackend.

        A list of firewall rule URIs blocking probes from health check IP ranges.

        :param health_check_blocking_firewall_rules: The health_check_blocking_firewall_rules of this LoadBalancerBackend.
        :type health_check_blocking_firewall_rules: List[str]
        """

        self._health_check_blocking_firewall_rules = health_check_blocking_firewall_rules

    @property
    def health_check_firewall_state(self):
        """Gets the health_check_firewall_state of this LoadBalancerBackend.

        State of the health check firewall configuration.

        :return: The health_check_firewall_state of this LoadBalancerBackend.
        :rtype: str
        """
        return self._health_check_firewall_state

    @health_check_firewall_state.setter
    def health_check_firewall_state(self, health_check_firewall_state):
        """Sets the health_check_firewall_state of this LoadBalancerBackend.

        State of the health check firewall configuration.

        :param health_check_firewall_state: The health_check_firewall_state of this LoadBalancerBackend.
        :type health_check_firewall_state: str
        """
        allowed_values = ["HEALTH_CHECK_FIREWALL_STATE_UNSPECIFIED", "CONFIGURED", "MISCONFIGURED"]  # noqa: E501
        if health_check_firewall_state not in allowed_values:
            raise ValueError(
                "Invalid value for `health_check_firewall_state` ({0}), must be one of {1}"
                .format(health_check_firewall_state, allowed_values)
            )

        self._health_check_firewall_state = health_check_firewall_state

    @property
    def uri(self):
        """Gets the uri of this LoadBalancerBackend.

        URI of a Compute Engine instance or network endpoint.

        :return: The uri of this LoadBalancerBackend.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this LoadBalancerBackend.

        URI of a Compute Engine instance or network endpoint.

        :param uri: The uri of this LoadBalancerBackend.
        :type uri: str
        """

        self._uri = uri
