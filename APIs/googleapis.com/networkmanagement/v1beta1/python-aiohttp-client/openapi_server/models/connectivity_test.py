# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint import Endpoint
from openapi_server.models.probing_details import ProbingDetails
from openapi_server.models.reachability_details import ReachabilityDetails
from openapi_server import util


class ConnectivityTest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, destination: Endpoint=None, display_name: str=None, labels: Dict[str, str]=None, name: str=None, probing_details: ProbingDetails=None, protocol: str=None, reachability_details: ReachabilityDetails=None, related_projects: List[str]=None, source: Endpoint=None, update_time: str=None):
        """ConnectivityTest - a model defined in OpenAPI

        :param create_time: The create_time of this ConnectivityTest.
        :param description: The description of this ConnectivityTest.
        :param destination: The destination of this ConnectivityTest.
        :param display_name: The display_name of this ConnectivityTest.
        :param labels: The labels of this ConnectivityTest.
        :param name: The name of this ConnectivityTest.
        :param probing_details: The probing_details of this ConnectivityTest.
        :param protocol: The protocol of this ConnectivityTest.
        :param reachability_details: The reachability_details of this ConnectivityTest.
        :param related_projects: The related_projects of this ConnectivityTest.
        :param source: The source of this ConnectivityTest.
        :param update_time: The update_time of this ConnectivityTest.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'destination': Endpoint,
            'display_name': str,
            'labels': Dict[str, str],
            'name': str,
            'probing_details': ProbingDetails,
            'protocol': str,
            'reachability_details': ReachabilityDetails,
            'related_projects': List[str],
            'source': Endpoint,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'destination': 'destination',
            'display_name': 'displayName',
            'labels': 'labels',
            'name': 'name',
            'probing_details': 'probingDetails',
            'protocol': 'protocol',
            'reachability_details': 'reachabilityDetails',
            'related_projects': 'relatedProjects',
            'source': 'source',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._destination = destination
        self._display_name = display_name
        self._labels = labels
        self._name = name
        self._probing_details = probing_details
        self._protocol = protocol
        self._reachability_details = reachability_details
        self._related_projects = related_projects
        self._source = source
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectivityTest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectivityTest of this ConnectivityTest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ConnectivityTest.

        Output only. The time the test was created.

        :return: The create_time of this ConnectivityTest.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ConnectivityTest.

        Output only. The time the test was created.

        :param create_time: The create_time of this ConnectivityTest.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ConnectivityTest.

        The user-supplied description of the Connectivity Test. Maximum of 512 characters.

        :return: The description of this ConnectivityTest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConnectivityTest.

        The user-supplied description of the Connectivity Test. Maximum of 512 characters.

        :param description: The description of this ConnectivityTest.
        :type description: str
        """

        self._description = description

    @property
    def destination(self):
        """Gets the destination of this ConnectivityTest.


        :return: The destination of this ConnectivityTest.
        :rtype: Endpoint
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ConnectivityTest.


        :param destination: The destination of this ConnectivityTest.
        :type destination: Endpoint
        """

        self._destination = destination

    @property
    def display_name(self):
        """Gets the display_name of this ConnectivityTest.

        Output only. The display name of a Connectivity Test.

        :return: The display_name of this ConnectivityTest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConnectivityTest.

        Output only. The display name of a Connectivity Test.

        :param display_name: The display_name of this ConnectivityTest.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def labels(self):
        """Gets the labels of this ConnectivityTest.

        Resource labels to represent user-provided metadata.

        :return: The labels of this ConnectivityTest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ConnectivityTest.

        Resource labels to represent user-provided metadata.

        :param labels: The labels of this ConnectivityTest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ConnectivityTest.

        Required. Unique name of the resource using the form: `projects/{project_id}/locations/global/connectivityTests/{test}`

        :return: The name of this ConnectivityTest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectivityTest.

        Required. Unique name of the resource using the form: `projects/{project_id}/locations/global/connectivityTests/{test}`

        :param name: The name of this ConnectivityTest.
        :type name: str
        """

        self._name = name

    @property
    def probing_details(self):
        """Gets the probing_details of this ConnectivityTest.


        :return: The probing_details of this ConnectivityTest.
        :rtype: ProbingDetails
        """
        return self._probing_details

    @probing_details.setter
    def probing_details(self, probing_details):
        """Sets the probing_details of this ConnectivityTest.


        :param probing_details: The probing_details of this ConnectivityTest.
        :type probing_details: ProbingDetails
        """

        self._probing_details = probing_details

    @property
    def protocol(self):
        """Gets the protocol of this ConnectivityTest.

        IP Protocol of the test. When not provided, \"TCP\" is assumed.

        :return: The protocol of this ConnectivityTest.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ConnectivityTest.

        IP Protocol of the test. When not provided, \"TCP\" is assumed.

        :param protocol: The protocol of this ConnectivityTest.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def reachability_details(self):
        """Gets the reachability_details of this ConnectivityTest.


        :return: The reachability_details of this ConnectivityTest.
        :rtype: ReachabilityDetails
        """
        return self._reachability_details

    @reachability_details.setter
    def reachability_details(self, reachability_details):
        """Sets the reachability_details of this ConnectivityTest.


        :param reachability_details: The reachability_details of this ConnectivityTest.
        :type reachability_details: ReachabilityDetails
        """

        self._reachability_details = reachability_details

    @property
    def related_projects(self):
        """Gets the related_projects of this ConnectivityTest.

        Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.

        :return: The related_projects of this ConnectivityTest.
        :rtype: List[str]
        """
        return self._related_projects

    @related_projects.setter
    def related_projects(self, related_projects):
        """Sets the related_projects of this ConnectivityTest.

        Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.

        :param related_projects: The related_projects of this ConnectivityTest.
        :type related_projects: List[str]
        """

        self._related_projects = related_projects

    @property
    def source(self):
        """Gets the source of this ConnectivityTest.


        :return: The source of this ConnectivityTest.
        :rtype: Endpoint
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ConnectivityTest.


        :param source: The source of this ConnectivityTest.
        :type source: Endpoint
        """

        self._source = source

    @property
    def update_time(self):
        """Gets the update_time of this ConnectivityTest.

        Output only. The time the test's configuration was updated.

        :return: The update_time of this ConnectivityTest.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ConnectivityTest.

        Output only. The time the test's configuration was updated.

        :param update_time: The update_time of this ConnectivityTest.
        :type update_time: str
        """

        self._update_time = update_time
