/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * For display only. Metadata associated with a Compute Engine forwarding rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:01.182928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ForwardingRuleInfo {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MATCHED_PORT_RANGE = "matchedPortRange";
  @SerializedName(SERIALIZED_NAME_MATCHED_PORT_RANGE)
  private String matchedPortRange;

  public static final String SERIALIZED_NAME_MATCHED_PROTOCOL = "matchedProtocol";
  @SerializedName(SERIALIZED_NAME_MATCHED_PROTOCOL)
  private String matchedProtocol;

  public static final String SERIALIZED_NAME_NETWORK_URI = "networkUri";
  @SerializedName(SERIALIZED_NAME_NETWORK_URI)
  private String networkUri;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_VIP = "vip";
  @SerializedName(SERIALIZED_NAME_VIP)
  private String vip;

  public ForwardingRuleInfo() {
  }

  public ForwardingRuleInfo displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Name of a Compute Engine forwarding rule.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ForwardingRuleInfo matchedPortRange(String matchedPortRange) {
    this.matchedPortRange = matchedPortRange;
    return this;
  }

  /**
   * Port range defined in the forwarding rule that matches the test.
   * @return matchedPortRange
   */
  @javax.annotation.Nullable
  public String getMatchedPortRange() {
    return matchedPortRange;
  }

  public void setMatchedPortRange(String matchedPortRange) {
    this.matchedPortRange = matchedPortRange;
  }


  public ForwardingRuleInfo matchedProtocol(String matchedProtocol) {
    this.matchedProtocol = matchedProtocol;
    return this;
  }

  /**
   * Protocol defined in the forwarding rule that matches the test.
   * @return matchedProtocol
   */
  @javax.annotation.Nullable
  public String getMatchedProtocol() {
    return matchedProtocol;
  }

  public void setMatchedProtocol(String matchedProtocol) {
    this.matchedProtocol = matchedProtocol;
  }


  public ForwardingRuleInfo networkUri(String networkUri) {
    this.networkUri = networkUri;
    return this;
  }

  /**
   * Network URI. Only valid for Internal Load Balancer.
   * @return networkUri
   */
  @javax.annotation.Nullable
  public String getNetworkUri() {
    return networkUri;
  }

  public void setNetworkUri(String networkUri) {
    this.networkUri = networkUri;
  }


  public ForwardingRuleInfo target(String target) {
    this.target = target;
    return this;
  }

  /**
   * Target type of the forwarding rule.
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public ForwardingRuleInfo uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * URI of a Compute Engine forwarding rule.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public ForwardingRuleInfo vip(String vip) {
    this.vip = vip;
    return this;
  }

  /**
   * VIP of the forwarding rule.
   * @return vip
   */
  @javax.annotation.Nullable
  public String getVip() {
    return vip;
  }

  public void setVip(String vip) {
    this.vip = vip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForwardingRuleInfo forwardingRuleInfo = (ForwardingRuleInfo) o;
    return Objects.equals(this.displayName, forwardingRuleInfo.displayName) &&
        Objects.equals(this.matchedPortRange, forwardingRuleInfo.matchedPortRange) &&
        Objects.equals(this.matchedProtocol, forwardingRuleInfo.matchedProtocol) &&
        Objects.equals(this.networkUri, forwardingRuleInfo.networkUri) &&
        Objects.equals(this.target, forwardingRuleInfo.target) &&
        Objects.equals(this.uri, forwardingRuleInfo.uri) &&
        Objects.equals(this.vip, forwardingRuleInfo.vip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, matchedPortRange, matchedProtocol, networkUri, target, uri, vip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForwardingRuleInfo {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    matchedPortRange: ").append(toIndentedString(matchedPortRange)).append("\n");
    sb.append("    matchedProtocol: ").append(toIndentedString(matchedProtocol)).append("\n");
    sb.append("    networkUri: ").append(toIndentedString(networkUri)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    vip: ").append(toIndentedString(vip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("matchedPortRange");
    openapiFields.add("matchedProtocol");
    openapiFields.add("networkUri");
    openapiFields.add("target");
    openapiFields.add("uri");
    openapiFields.add("vip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ForwardingRuleInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForwardingRuleInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForwardingRuleInfo is not found in the empty JSON string", ForwardingRuleInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForwardingRuleInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForwardingRuleInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("matchedPortRange") != null && !jsonObj.get("matchedPortRange").isJsonNull()) && !jsonObj.get("matchedPortRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchedPortRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchedPortRange").toString()));
      }
      if ((jsonObj.get("matchedProtocol") != null && !jsonObj.get("matchedProtocol").isJsonNull()) && !jsonObj.get("matchedProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchedProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchedProtocol").toString()));
      }
      if ((jsonObj.get("networkUri") != null && !jsonObj.get("networkUri").isJsonNull()) && !jsonObj.get("networkUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkUri").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("vip") != null && !jsonObj.get("vip").isJsonNull()) && !jsonObj.get("vip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForwardingRuleInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForwardingRuleInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForwardingRuleInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForwardingRuleInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ForwardingRuleInfo>() {
           @Override
           public void write(JsonWriter out, ForwardingRuleInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForwardingRuleInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ForwardingRuleInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ForwardingRuleInfo
   * @throws IOException if the JSON string is invalid with respect to ForwardingRuleInfo
   */
  public static ForwardingRuleInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForwardingRuleInfo.class);
  }

  /**
   * Convert an instance of ForwardingRuleInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

