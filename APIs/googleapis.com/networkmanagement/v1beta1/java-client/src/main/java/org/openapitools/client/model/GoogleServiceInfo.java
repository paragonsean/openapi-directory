/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * For display only. Details of a Google Service sending packets to a VPC network. Although the source IP might be a publicly routable address, some Google Services use special routes within Google production infrastructure to reach Compute Engine Instances. https://cloud.google.com/vpc/docs/routes#special_return_paths
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:01.182928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleServiceInfo {
  /**
   * Recognized type of a Google Service.
   */
  @JsonAdapter(GoogleServiceTypeEnum.Adapter.class)
  public enum GoogleServiceTypeEnum {
    GOOGLE_SERVICE_TYPE_UNSPECIFIED("GOOGLE_SERVICE_TYPE_UNSPECIFIED"),
    
    IAP("IAP"),
    
    GFE_PROXY_OR_HEALTH_CHECK_PROBER("GFE_PROXY_OR_HEALTH_CHECK_PROBER"),
    
    CLOUD_DNS("CLOUD_DNS"),
    
    GOOGLE_API("GOOGLE_API"),
    
    GOOGLE_API_PSC("GOOGLE_API_PSC"),
    
    GOOGLE_API_VPC_SC("GOOGLE_API_VPC_SC");

    private String value;

    GoogleServiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GoogleServiceTypeEnum fromValue(String value) {
      for (GoogleServiceTypeEnum b : GoogleServiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GoogleServiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GoogleServiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GoogleServiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GoogleServiceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GoogleServiceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GOOGLE_SERVICE_TYPE = "googleServiceType";
  @SerializedName(SERIALIZED_NAME_GOOGLE_SERVICE_TYPE)
  private GoogleServiceTypeEnum googleServiceType;

  public static final String SERIALIZED_NAME_SOURCE_IP = "sourceIp";
  @SerializedName(SERIALIZED_NAME_SOURCE_IP)
  private String sourceIp;

  public GoogleServiceInfo() {
  }

  public GoogleServiceInfo googleServiceType(GoogleServiceTypeEnum googleServiceType) {
    this.googleServiceType = googleServiceType;
    return this;
  }

  /**
   * Recognized type of a Google Service.
   * @return googleServiceType
   */
  @javax.annotation.Nullable
  public GoogleServiceTypeEnum getGoogleServiceType() {
    return googleServiceType;
  }

  public void setGoogleServiceType(GoogleServiceTypeEnum googleServiceType) {
    this.googleServiceType = googleServiceType;
  }


  public GoogleServiceInfo sourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
    return this;
  }

  /**
   * Source IP address.
   * @return sourceIp
   */
  @javax.annotation.Nullable
  public String getSourceIp() {
    return sourceIp;
  }

  public void setSourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleServiceInfo googleServiceInfo = (GoogleServiceInfo) o;
    return Objects.equals(this.googleServiceType, googleServiceInfo.googleServiceType) &&
        Objects.equals(this.sourceIp, googleServiceInfo.sourceIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(googleServiceType, sourceIp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleServiceInfo {\n");
    sb.append("    googleServiceType: ").append(toIndentedString(googleServiceType)).append("\n");
    sb.append("    sourceIp: ").append(toIndentedString(sourceIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("googleServiceType");
    openapiFields.add("sourceIp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleServiceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleServiceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleServiceInfo is not found in the empty JSON string", GoogleServiceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleServiceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleServiceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("googleServiceType") != null && !jsonObj.get("googleServiceType").isJsonNull()) && !jsonObj.get("googleServiceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleServiceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleServiceType").toString()));
      }
      // validate the optional field `googleServiceType`
      if (jsonObj.get("googleServiceType") != null && !jsonObj.get("googleServiceType").isJsonNull()) {
        GoogleServiceTypeEnum.validateJsonElement(jsonObj.get("googleServiceType"));
      }
      if ((jsonObj.get("sourceIp") != null && !jsonObj.get("sourceIp").isJsonNull()) && !jsonObj.get("sourceIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceIp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleServiceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleServiceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleServiceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleServiceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleServiceInfo>() {
           @Override
           public void write(JsonWriter out, GoogleServiceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleServiceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleServiceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleServiceInfo
   * @throws IOException if the JSON string is invalid with respect to GoogleServiceInfo
   */
  public static GoogleServiceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleServiceInfo.class);
  }

  /**
   * Convert an instance of GoogleServiceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

