/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * For display only. Metadata associated with a specific load balancer backend.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:01.182928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoadBalancerBackend {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_ALLOWING_FIREWALL_RULES = "healthCheckAllowingFirewallRules";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_ALLOWING_FIREWALL_RULES)
  private List<String> healthCheckAllowingFirewallRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEALTH_CHECK_BLOCKING_FIREWALL_RULES = "healthCheckBlockingFirewallRules";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_BLOCKING_FIREWALL_RULES)
  private List<String> healthCheckBlockingFirewallRules = new ArrayList<>();

  /**
   * State of the health check firewall configuration.
   */
  @JsonAdapter(HealthCheckFirewallStateEnum.Adapter.class)
  public enum HealthCheckFirewallStateEnum {
    HEALTH_CHECK_FIREWALL_STATE_UNSPECIFIED("HEALTH_CHECK_FIREWALL_STATE_UNSPECIFIED"),
    
    CONFIGURED("CONFIGURED"),
    
    MISCONFIGURED("MISCONFIGURED");

    private String value;

    HealthCheckFirewallStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HealthCheckFirewallStateEnum fromValue(String value) {
      for (HealthCheckFirewallStateEnum b : HealthCheckFirewallStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HealthCheckFirewallStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthCheckFirewallStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthCheckFirewallStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HealthCheckFirewallStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HealthCheckFirewallStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEALTH_CHECK_FIREWALL_STATE = "healthCheckFirewallState";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_FIREWALL_STATE)
  private HealthCheckFirewallStateEnum healthCheckFirewallState;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public LoadBalancerBackend() {
  }

  public LoadBalancerBackend displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Name of a Compute Engine instance or network endpoint.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public LoadBalancerBackend healthCheckAllowingFirewallRules(List<String> healthCheckAllowingFirewallRules) {
    this.healthCheckAllowingFirewallRules = healthCheckAllowingFirewallRules;
    return this;
  }

  public LoadBalancerBackend addHealthCheckAllowingFirewallRulesItem(String healthCheckAllowingFirewallRulesItem) {
    if (this.healthCheckAllowingFirewallRules == null) {
      this.healthCheckAllowingFirewallRules = new ArrayList<>();
    }
    this.healthCheckAllowingFirewallRules.add(healthCheckAllowingFirewallRulesItem);
    return this;
  }

  /**
   * A list of firewall rule URIs allowing probes from health check IP ranges.
   * @return healthCheckAllowingFirewallRules
   */
  @javax.annotation.Nullable
  public List<String> getHealthCheckAllowingFirewallRules() {
    return healthCheckAllowingFirewallRules;
  }

  public void setHealthCheckAllowingFirewallRules(List<String> healthCheckAllowingFirewallRules) {
    this.healthCheckAllowingFirewallRules = healthCheckAllowingFirewallRules;
  }


  public LoadBalancerBackend healthCheckBlockingFirewallRules(List<String> healthCheckBlockingFirewallRules) {
    this.healthCheckBlockingFirewallRules = healthCheckBlockingFirewallRules;
    return this;
  }

  public LoadBalancerBackend addHealthCheckBlockingFirewallRulesItem(String healthCheckBlockingFirewallRulesItem) {
    if (this.healthCheckBlockingFirewallRules == null) {
      this.healthCheckBlockingFirewallRules = new ArrayList<>();
    }
    this.healthCheckBlockingFirewallRules.add(healthCheckBlockingFirewallRulesItem);
    return this;
  }

  /**
   * A list of firewall rule URIs blocking probes from health check IP ranges.
   * @return healthCheckBlockingFirewallRules
   */
  @javax.annotation.Nullable
  public List<String> getHealthCheckBlockingFirewallRules() {
    return healthCheckBlockingFirewallRules;
  }

  public void setHealthCheckBlockingFirewallRules(List<String> healthCheckBlockingFirewallRules) {
    this.healthCheckBlockingFirewallRules = healthCheckBlockingFirewallRules;
  }


  public LoadBalancerBackend healthCheckFirewallState(HealthCheckFirewallStateEnum healthCheckFirewallState) {
    this.healthCheckFirewallState = healthCheckFirewallState;
    return this;
  }

  /**
   * State of the health check firewall configuration.
   * @return healthCheckFirewallState
   */
  @javax.annotation.Nullable
  public HealthCheckFirewallStateEnum getHealthCheckFirewallState() {
    return healthCheckFirewallState;
  }

  public void setHealthCheckFirewallState(HealthCheckFirewallStateEnum healthCheckFirewallState) {
    this.healthCheckFirewallState = healthCheckFirewallState;
  }


  public LoadBalancerBackend uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * URI of a Compute Engine instance or network endpoint.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadBalancerBackend loadBalancerBackend = (LoadBalancerBackend) o;
    return Objects.equals(this.displayName, loadBalancerBackend.displayName) &&
        Objects.equals(this.healthCheckAllowingFirewallRules, loadBalancerBackend.healthCheckAllowingFirewallRules) &&
        Objects.equals(this.healthCheckBlockingFirewallRules, loadBalancerBackend.healthCheckBlockingFirewallRules) &&
        Objects.equals(this.healthCheckFirewallState, loadBalancerBackend.healthCheckFirewallState) &&
        Objects.equals(this.uri, loadBalancerBackend.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, healthCheckAllowingFirewallRules, healthCheckBlockingFirewallRules, healthCheckFirewallState, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadBalancerBackend {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    healthCheckAllowingFirewallRules: ").append(toIndentedString(healthCheckAllowingFirewallRules)).append("\n");
    sb.append("    healthCheckBlockingFirewallRules: ").append(toIndentedString(healthCheckBlockingFirewallRules)).append("\n");
    sb.append("    healthCheckFirewallState: ").append(toIndentedString(healthCheckFirewallState)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("healthCheckAllowingFirewallRules");
    openapiFields.add("healthCheckBlockingFirewallRules");
    openapiFields.add("healthCheckFirewallState");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoadBalancerBackend
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadBalancerBackend.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadBalancerBackend is not found in the empty JSON string", LoadBalancerBackend.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadBalancerBackend.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadBalancerBackend` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("healthCheckAllowingFirewallRules") != null && !jsonObj.get("healthCheckAllowingFirewallRules").isJsonNull() && !jsonObj.get("healthCheckAllowingFirewallRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckAllowingFirewallRules` to be an array in the JSON string but got `%s`", jsonObj.get("healthCheckAllowingFirewallRules").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("healthCheckBlockingFirewallRules") != null && !jsonObj.get("healthCheckBlockingFirewallRules").isJsonNull() && !jsonObj.get("healthCheckBlockingFirewallRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckBlockingFirewallRules` to be an array in the JSON string but got `%s`", jsonObj.get("healthCheckBlockingFirewallRules").toString()));
      }
      if ((jsonObj.get("healthCheckFirewallState") != null && !jsonObj.get("healthCheckFirewallState").isJsonNull()) && !jsonObj.get("healthCheckFirewallState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckFirewallState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthCheckFirewallState").toString()));
      }
      // validate the optional field `healthCheckFirewallState`
      if (jsonObj.get("healthCheckFirewallState") != null && !jsonObj.get("healthCheckFirewallState").isJsonNull()) {
        HealthCheckFirewallStateEnum.validateJsonElement(jsonObj.get("healthCheckFirewallState"));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadBalancerBackend.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadBalancerBackend' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadBalancerBackend> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadBalancerBackend.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadBalancerBackend>() {
           @Override
           public void write(JsonWriter out, LoadBalancerBackend value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadBalancerBackend read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoadBalancerBackend given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoadBalancerBackend
   * @throws IOException if the JSON string is invalid with respect to LoadBalancerBackend
   */
  public static LoadBalancerBackend fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadBalancerBackend.class);
  }

  /**
   * Convert an instance of LoadBalancerBackend to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

