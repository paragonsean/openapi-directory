/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * For display only. Metadata associated with NAT.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:01.182928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NatInfo {
  public static final String SERIALIZED_NAME_NAT_GATEWAY_NAME = "natGatewayName";
  @SerializedName(SERIALIZED_NAME_NAT_GATEWAY_NAME)
  private String natGatewayName;

  public static final String SERIALIZED_NAME_NETWORK_URI = "networkUri";
  @SerializedName(SERIALIZED_NAME_NETWORK_URI)
  private String networkUri;

  public static final String SERIALIZED_NAME_NEW_DESTINATION_IP = "newDestinationIp";
  @SerializedName(SERIALIZED_NAME_NEW_DESTINATION_IP)
  private String newDestinationIp;

  public static final String SERIALIZED_NAME_NEW_DESTINATION_PORT = "newDestinationPort";
  @SerializedName(SERIALIZED_NAME_NEW_DESTINATION_PORT)
  private Integer newDestinationPort;

  public static final String SERIALIZED_NAME_NEW_SOURCE_IP = "newSourceIp";
  @SerializedName(SERIALIZED_NAME_NEW_SOURCE_IP)
  private String newSourceIp;

  public static final String SERIALIZED_NAME_NEW_SOURCE_PORT = "newSourcePort";
  @SerializedName(SERIALIZED_NAME_NEW_SOURCE_PORT)
  private Integer newSourcePort;

  public static final String SERIALIZED_NAME_OLD_DESTINATION_IP = "oldDestinationIp";
  @SerializedName(SERIALIZED_NAME_OLD_DESTINATION_IP)
  private String oldDestinationIp;

  public static final String SERIALIZED_NAME_OLD_DESTINATION_PORT = "oldDestinationPort";
  @SerializedName(SERIALIZED_NAME_OLD_DESTINATION_PORT)
  private Integer oldDestinationPort;

  public static final String SERIALIZED_NAME_OLD_SOURCE_IP = "oldSourceIp";
  @SerializedName(SERIALIZED_NAME_OLD_SOURCE_IP)
  private String oldSourceIp;

  public static final String SERIALIZED_NAME_OLD_SOURCE_PORT = "oldSourcePort";
  @SerializedName(SERIALIZED_NAME_OLD_SOURCE_PORT)
  private Integer oldSourcePort;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_ROUTER_URI = "routerUri";
  @SerializedName(SERIALIZED_NAME_ROUTER_URI)
  private String routerUri;

  /**
   * Type of NAT.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    INTERNAL_TO_EXTERNAL("INTERNAL_TO_EXTERNAL"),
    
    EXTERNAL_TO_INTERNAL("EXTERNAL_TO_INTERNAL"),
    
    CLOUD_NAT("CLOUD_NAT"),
    
    PRIVATE_SERVICE_CONNECT("PRIVATE_SERVICE_CONNECT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public NatInfo() {
  }

  public NatInfo natGatewayName(String natGatewayName) {
    this.natGatewayName = natGatewayName;
    return this;
  }

  /**
   * The name of Cloud NAT Gateway. Only valid when type is CLOUD_NAT.
   * @return natGatewayName
   */
  @javax.annotation.Nullable
  public String getNatGatewayName() {
    return natGatewayName;
  }

  public void setNatGatewayName(String natGatewayName) {
    this.natGatewayName = natGatewayName;
  }


  public NatInfo networkUri(String networkUri) {
    this.networkUri = networkUri;
    return this;
  }

  /**
   * URI of the network where NAT translation takes place.
   * @return networkUri
   */
  @javax.annotation.Nullable
  public String getNetworkUri() {
    return networkUri;
  }

  public void setNetworkUri(String networkUri) {
    this.networkUri = networkUri;
  }


  public NatInfo newDestinationIp(String newDestinationIp) {
    this.newDestinationIp = newDestinationIp;
    return this;
  }

  /**
   * Destination IP address after NAT translation.
   * @return newDestinationIp
   */
  @javax.annotation.Nullable
  public String getNewDestinationIp() {
    return newDestinationIp;
  }

  public void setNewDestinationIp(String newDestinationIp) {
    this.newDestinationIp = newDestinationIp;
  }


  public NatInfo newDestinationPort(Integer newDestinationPort) {
    this.newDestinationPort = newDestinationPort;
    return this;
  }

  /**
   * Destination port after NAT translation. Only valid when protocol is TCP or UDP.
   * @return newDestinationPort
   */
  @javax.annotation.Nullable
  public Integer getNewDestinationPort() {
    return newDestinationPort;
  }

  public void setNewDestinationPort(Integer newDestinationPort) {
    this.newDestinationPort = newDestinationPort;
  }


  public NatInfo newSourceIp(String newSourceIp) {
    this.newSourceIp = newSourceIp;
    return this;
  }

  /**
   * Source IP address after NAT translation.
   * @return newSourceIp
   */
  @javax.annotation.Nullable
  public String getNewSourceIp() {
    return newSourceIp;
  }

  public void setNewSourceIp(String newSourceIp) {
    this.newSourceIp = newSourceIp;
  }


  public NatInfo newSourcePort(Integer newSourcePort) {
    this.newSourcePort = newSourcePort;
    return this;
  }

  /**
   * Source port after NAT translation. Only valid when protocol is TCP or UDP.
   * @return newSourcePort
   */
  @javax.annotation.Nullable
  public Integer getNewSourcePort() {
    return newSourcePort;
  }

  public void setNewSourcePort(Integer newSourcePort) {
    this.newSourcePort = newSourcePort;
  }


  public NatInfo oldDestinationIp(String oldDestinationIp) {
    this.oldDestinationIp = oldDestinationIp;
    return this;
  }

  /**
   * Destination IP address before NAT translation.
   * @return oldDestinationIp
   */
  @javax.annotation.Nullable
  public String getOldDestinationIp() {
    return oldDestinationIp;
  }

  public void setOldDestinationIp(String oldDestinationIp) {
    this.oldDestinationIp = oldDestinationIp;
  }


  public NatInfo oldDestinationPort(Integer oldDestinationPort) {
    this.oldDestinationPort = oldDestinationPort;
    return this;
  }

  /**
   * Destination port before NAT translation. Only valid when protocol is TCP or UDP.
   * @return oldDestinationPort
   */
  @javax.annotation.Nullable
  public Integer getOldDestinationPort() {
    return oldDestinationPort;
  }

  public void setOldDestinationPort(Integer oldDestinationPort) {
    this.oldDestinationPort = oldDestinationPort;
  }


  public NatInfo oldSourceIp(String oldSourceIp) {
    this.oldSourceIp = oldSourceIp;
    return this;
  }

  /**
   * Source IP address before NAT translation.
   * @return oldSourceIp
   */
  @javax.annotation.Nullable
  public String getOldSourceIp() {
    return oldSourceIp;
  }

  public void setOldSourceIp(String oldSourceIp) {
    this.oldSourceIp = oldSourceIp;
  }


  public NatInfo oldSourcePort(Integer oldSourcePort) {
    this.oldSourcePort = oldSourcePort;
    return this;
  }

  /**
   * Source port before NAT translation. Only valid when protocol is TCP or UDP.
   * @return oldSourcePort
   */
  @javax.annotation.Nullable
  public Integer getOldSourcePort() {
    return oldSourcePort;
  }

  public void setOldSourcePort(Integer oldSourcePort) {
    this.oldSourcePort = oldSourcePort;
  }


  public NatInfo protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * IP protocol in string format, for example: \&quot;TCP\&quot;, \&quot;UDP\&quot;, \&quot;ICMP\&quot;.
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public NatInfo routerUri(String routerUri) {
    this.routerUri = routerUri;
    return this;
  }

  /**
   * Uri of the Cloud Router. Only valid when type is CLOUD_NAT.
   * @return routerUri
   */
  @javax.annotation.Nullable
  public String getRouterUri() {
    return routerUri;
  }

  public void setRouterUri(String routerUri) {
    this.routerUri = routerUri;
  }


  public NatInfo type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of NAT.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NatInfo natInfo = (NatInfo) o;
    return Objects.equals(this.natGatewayName, natInfo.natGatewayName) &&
        Objects.equals(this.networkUri, natInfo.networkUri) &&
        Objects.equals(this.newDestinationIp, natInfo.newDestinationIp) &&
        Objects.equals(this.newDestinationPort, natInfo.newDestinationPort) &&
        Objects.equals(this.newSourceIp, natInfo.newSourceIp) &&
        Objects.equals(this.newSourcePort, natInfo.newSourcePort) &&
        Objects.equals(this.oldDestinationIp, natInfo.oldDestinationIp) &&
        Objects.equals(this.oldDestinationPort, natInfo.oldDestinationPort) &&
        Objects.equals(this.oldSourceIp, natInfo.oldSourceIp) &&
        Objects.equals(this.oldSourcePort, natInfo.oldSourcePort) &&
        Objects.equals(this.protocol, natInfo.protocol) &&
        Objects.equals(this.routerUri, natInfo.routerUri) &&
        Objects.equals(this.type, natInfo.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(natGatewayName, networkUri, newDestinationIp, newDestinationPort, newSourceIp, newSourcePort, oldDestinationIp, oldDestinationPort, oldSourceIp, oldSourcePort, protocol, routerUri, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NatInfo {\n");
    sb.append("    natGatewayName: ").append(toIndentedString(natGatewayName)).append("\n");
    sb.append("    networkUri: ").append(toIndentedString(networkUri)).append("\n");
    sb.append("    newDestinationIp: ").append(toIndentedString(newDestinationIp)).append("\n");
    sb.append("    newDestinationPort: ").append(toIndentedString(newDestinationPort)).append("\n");
    sb.append("    newSourceIp: ").append(toIndentedString(newSourceIp)).append("\n");
    sb.append("    newSourcePort: ").append(toIndentedString(newSourcePort)).append("\n");
    sb.append("    oldDestinationIp: ").append(toIndentedString(oldDestinationIp)).append("\n");
    sb.append("    oldDestinationPort: ").append(toIndentedString(oldDestinationPort)).append("\n");
    sb.append("    oldSourceIp: ").append(toIndentedString(oldSourceIp)).append("\n");
    sb.append("    oldSourcePort: ").append(toIndentedString(oldSourcePort)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    routerUri: ").append(toIndentedString(routerUri)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("natGatewayName");
    openapiFields.add("networkUri");
    openapiFields.add("newDestinationIp");
    openapiFields.add("newDestinationPort");
    openapiFields.add("newSourceIp");
    openapiFields.add("newSourcePort");
    openapiFields.add("oldDestinationIp");
    openapiFields.add("oldDestinationPort");
    openapiFields.add("oldSourceIp");
    openapiFields.add("oldSourcePort");
    openapiFields.add("protocol");
    openapiFields.add("routerUri");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NatInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NatInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NatInfo is not found in the empty JSON string", NatInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NatInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NatInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("natGatewayName") != null && !jsonObj.get("natGatewayName").isJsonNull()) && !jsonObj.get("natGatewayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `natGatewayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("natGatewayName").toString()));
      }
      if ((jsonObj.get("networkUri") != null && !jsonObj.get("networkUri").isJsonNull()) && !jsonObj.get("networkUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkUri").toString()));
      }
      if ((jsonObj.get("newDestinationIp") != null && !jsonObj.get("newDestinationIp").isJsonNull()) && !jsonObj.get("newDestinationIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newDestinationIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newDestinationIp").toString()));
      }
      if ((jsonObj.get("newSourceIp") != null && !jsonObj.get("newSourceIp").isJsonNull()) && !jsonObj.get("newSourceIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newSourceIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newSourceIp").toString()));
      }
      if ((jsonObj.get("oldDestinationIp") != null && !jsonObj.get("oldDestinationIp").isJsonNull()) && !jsonObj.get("oldDestinationIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldDestinationIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldDestinationIp").toString()));
      }
      if ((jsonObj.get("oldSourceIp") != null && !jsonObj.get("oldSourceIp").isJsonNull()) && !jsonObj.get("oldSourceIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldSourceIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldSourceIp").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("routerUri") != null && !jsonObj.get("routerUri").isJsonNull()) && !jsonObj.get("routerUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routerUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routerUri").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NatInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NatInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NatInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NatInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<NatInfo>() {
           @Override
           public void write(JsonWriter out, NatInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NatInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NatInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NatInfo
   * @throws IOException if the JSON string is invalid with respect to NatInfo
   */
  public static NatInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NatInfo.class);
  }

  /**
   * Convert an instance of NatInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

