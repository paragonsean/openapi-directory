/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * For display only. Metadata associated with a Compute Engine route.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:01.182928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RouteInfo {
  public static final String SERIALIZED_NAME_DEST_IP_RANGE = "destIpRange";
  @SerializedName(SERIALIZED_NAME_DEST_IP_RANGE)
  private String destIpRange;

  public static final String SERIALIZED_NAME_DEST_PORT_RANGES = "destPortRanges";
  @SerializedName(SERIALIZED_NAME_DEST_PORT_RANGES)
  private List<String> destPortRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_INSTANCE_TAGS = "instanceTags";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TAGS)
  private List<String> instanceTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_NCC_HUB_URI = "nccHubUri";
  @SerializedName(SERIALIZED_NAME_NCC_HUB_URI)
  private String nccHubUri;

  public static final String SERIALIZED_NAME_NCC_SPOKE_URI = "nccSpokeUri";
  @SerializedName(SERIALIZED_NAME_NCC_SPOKE_URI)
  private String nccSpokeUri;

  public static final String SERIALIZED_NAME_NETWORK_URI = "networkUri";
  @SerializedName(SERIALIZED_NAME_NETWORK_URI)
  private String networkUri;

  public static final String SERIALIZED_NAME_NEXT_HOP = "nextHop";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP)
  private String nextHop;

  /**
   * Type of next hop.
   */
  @JsonAdapter(NextHopTypeEnum.Adapter.class)
  public enum NextHopTypeEnum {
    TYPE_UNSPECIFIED("NEXT_HOP_TYPE_UNSPECIFIED"),
    
    IP("NEXT_HOP_IP"),
    
    INSTANCE("NEXT_HOP_INSTANCE"),
    
    NETWORK("NEXT_HOP_NETWORK"),
    
    PEERING("NEXT_HOP_PEERING"),
    
    INTERCONNECT("NEXT_HOP_INTERCONNECT"),
    
    VPN_TUNNEL("NEXT_HOP_VPN_TUNNEL"),
    
    VPN_GATEWAY("NEXT_HOP_VPN_GATEWAY"),
    
    INTERNET_GATEWAY("NEXT_HOP_INTERNET_GATEWAY"),
    
    BLACKHOLE("NEXT_HOP_BLACKHOLE"),
    
    ILB("NEXT_HOP_ILB"),
    
    ROUTER_APPLIANCE("NEXT_HOP_ROUTER_APPLIANCE"),
    
    NCC_HUB("NEXT_HOP_NCC_HUB");

    private String value;

    NextHopTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NextHopTypeEnum fromValue(String value) {
      for (NextHopTypeEnum b : NextHopTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NextHopTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NextHopTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NextHopTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NextHopTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NextHopTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NEXT_HOP_TYPE = "nextHopType";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_TYPE)
  private NextHopTypeEnum nextHopType;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_PROTOCOLS = "protocols";
  @SerializedName(SERIALIZED_NAME_PROTOCOLS)
  private List<String> protocols = new ArrayList<>();

  /**
   * Indicates where route is applicable.
   */
  @JsonAdapter(RouteScopeEnum.Adapter.class)
  public enum RouteScopeEnum {
    ROUTE_SCOPE_UNSPECIFIED("ROUTE_SCOPE_UNSPECIFIED"),
    
    NETWORK("NETWORK"),
    
    NCC_HUB("NCC_HUB");

    private String value;

    RouteScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RouteScopeEnum fromValue(String value) {
      for (RouteScopeEnum b : RouteScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RouteScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouteScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RouteScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RouteScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROUTE_SCOPE = "routeScope";
  @SerializedName(SERIALIZED_NAME_ROUTE_SCOPE)
  private RouteScopeEnum routeScope;

  /**
   * Type of route.
   */
  @JsonAdapter(RouteTypeEnum.Adapter.class)
  public enum RouteTypeEnum {
    ROUTE_TYPE_UNSPECIFIED("ROUTE_TYPE_UNSPECIFIED"),
    
    SUBNET("SUBNET"),
    
    STATIC("STATIC"),
    
    DYNAMIC("DYNAMIC"),
    
    PEERING_SUBNET("PEERING_SUBNET"),
    
    PEERING_STATIC("PEERING_STATIC"),
    
    PEERING_DYNAMIC("PEERING_DYNAMIC"),
    
    POLICY_BASED("POLICY_BASED");

    private String value;

    RouteTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RouteTypeEnum fromValue(String value) {
      for (RouteTypeEnum b : RouteTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RouteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouteTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RouteTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RouteTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROUTE_TYPE = "routeType";
  @SerializedName(SERIALIZED_NAME_ROUTE_TYPE)
  private RouteTypeEnum routeType;

  public static final String SERIALIZED_NAME_SRC_IP_RANGE = "srcIpRange";
  @SerializedName(SERIALIZED_NAME_SRC_IP_RANGE)
  private String srcIpRange;

  public static final String SERIALIZED_NAME_SRC_PORT_RANGES = "srcPortRanges";
  @SerializedName(SERIALIZED_NAME_SRC_PORT_RANGES)
  private List<String> srcPortRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public RouteInfo() {
  }

  public RouteInfo destIpRange(String destIpRange) {
    this.destIpRange = destIpRange;
    return this;
  }

  /**
   * Destination IP range of the route.
   * @return destIpRange
   */
  @javax.annotation.Nullable
  public String getDestIpRange() {
    return destIpRange;
  }

  public void setDestIpRange(String destIpRange) {
    this.destIpRange = destIpRange;
  }


  public RouteInfo destPortRanges(List<String> destPortRanges) {
    this.destPortRanges = destPortRanges;
    return this;
  }

  public RouteInfo addDestPortRangesItem(String destPortRangesItem) {
    if (this.destPortRanges == null) {
      this.destPortRanges = new ArrayList<>();
    }
    this.destPortRanges.add(destPortRangesItem);
    return this;
  }

  /**
   * Destination port ranges of the route. Policy based routes only.
   * @return destPortRanges
   */
  @javax.annotation.Nullable
  public List<String> getDestPortRanges() {
    return destPortRanges;
  }

  public void setDestPortRanges(List<String> destPortRanges) {
    this.destPortRanges = destPortRanges;
  }


  public RouteInfo displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Name of a route.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public RouteInfo instanceTags(List<String> instanceTags) {
    this.instanceTags = instanceTags;
    return this;
  }

  public RouteInfo addInstanceTagsItem(String instanceTagsItem) {
    if (this.instanceTags == null) {
      this.instanceTags = new ArrayList<>();
    }
    this.instanceTags.add(instanceTagsItem);
    return this;
  }

  /**
   * Instance tags of the route.
   * @return instanceTags
   */
  @javax.annotation.Nullable
  public List<String> getInstanceTags() {
    return instanceTags;
  }

  public void setInstanceTags(List<String> instanceTags) {
    this.instanceTags = instanceTags;
  }


  public RouteInfo nccHubUri(String nccHubUri) {
    this.nccHubUri = nccHubUri;
    return this;
  }

  /**
   * URI of a NCC Hub. NCC_HUB routes only.
   * @return nccHubUri
   */
  @javax.annotation.Nullable
  public String getNccHubUri() {
    return nccHubUri;
  }

  public void setNccHubUri(String nccHubUri) {
    this.nccHubUri = nccHubUri;
  }


  public RouteInfo nccSpokeUri(String nccSpokeUri) {
    this.nccSpokeUri = nccSpokeUri;
    return this;
  }

  /**
   * URI of a NCC Spoke. NCC_HUB routes only.
   * @return nccSpokeUri
   */
  @javax.annotation.Nullable
  public String getNccSpokeUri() {
    return nccSpokeUri;
  }

  public void setNccSpokeUri(String nccSpokeUri) {
    this.nccSpokeUri = nccSpokeUri;
  }


  public RouteInfo networkUri(String networkUri) {
    this.networkUri = networkUri;
    return this;
  }

  /**
   * URI of a Compute Engine network. NETWORK routes only.
   * @return networkUri
   */
  @javax.annotation.Nullable
  public String getNetworkUri() {
    return networkUri;
  }

  public void setNetworkUri(String networkUri) {
    this.networkUri = networkUri;
  }


  public RouteInfo nextHop(String nextHop) {
    this.nextHop = nextHop;
    return this;
  }

  /**
   * Next hop of the route.
   * @return nextHop
   */
  @javax.annotation.Nullable
  public String getNextHop() {
    return nextHop;
  }

  public void setNextHop(String nextHop) {
    this.nextHop = nextHop;
  }


  public RouteInfo nextHopType(NextHopTypeEnum nextHopType) {
    this.nextHopType = nextHopType;
    return this;
  }

  /**
   * Type of next hop.
   * @return nextHopType
   */
  @javax.annotation.Nullable
  public NextHopTypeEnum getNextHopType() {
    return nextHopType;
  }

  public void setNextHopType(NextHopTypeEnum nextHopType) {
    this.nextHopType = nextHopType;
  }


  public RouteInfo priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Priority of the route.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public RouteInfo protocols(List<String> protocols) {
    this.protocols = protocols;
    return this;
  }

  public RouteInfo addProtocolsItem(String protocolsItem) {
    if (this.protocols == null) {
      this.protocols = new ArrayList<>();
    }
    this.protocols.add(protocolsItem);
    return this;
  }

  /**
   * Protocols of the route. Policy based routes only.
   * @return protocols
   */
  @javax.annotation.Nullable
  public List<String> getProtocols() {
    return protocols;
  }

  public void setProtocols(List<String> protocols) {
    this.protocols = protocols;
  }


  public RouteInfo routeScope(RouteScopeEnum routeScope) {
    this.routeScope = routeScope;
    return this;
  }

  /**
   * Indicates where route is applicable.
   * @return routeScope
   */
  @javax.annotation.Nullable
  public RouteScopeEnum getRouteScope() {
    return routeScope;
  }

  public void setRouteScope(RouteScopeEnum routeScope) {
    this.routeScope = routeScope;
  }


  public RouteInfo routeType(RouteTypeEnum routeType) {
    this.routeType = routeType;
    return this;
  }

  /**
   * Type of route.
   * @return routeType
   */
  @javax.annotation.Nullable
  public RouteTypeEnum getRouteType() {
    return routeType;
  }

  public void setRouteType(RouteTypeEnum routeType) {
    this.routeType = routeType;
  }


  public RouteInfo srcIpRange(String srcIpRange) {
    this.srcIpRange = srcIpRange;
    return this;
  }

  /**
   * Source IP address range of the route. Policy based routes only.
   * @return srcIpRange
   */
  @javax.annotation.Nullable
  public String getSrcIpRange() {
    return srcIpRange;
  }

  public void setSrcIpRange(String srcIpRange) {
    this.srcIpRange = srcIpRange;
  }


  public RouteInfo srcPortRanges(List<String> srcPortRanges) {
    this.srcPortRanges = srcPortRanges;
    return this;
  }

  public RouteInfo addSrcPortRangesItem(String srcPortRangesItem) {
    if (this.srcPortRanges == null) {
      this.srcPortRanges = new ArrayList<>();
    }
    this.srcPortRanges.add(srcPortRangesItem);
    return this;
  }

  /**
   * Source port ranges of the route. Policy based routes only.
   * @return srcPortRanges
   */
  @javax.annotation.Nullable
  public List<String> getSrcPortRanges() {
    return srcPortRanges;
  }

  public void setSrcPortRanges(List<String> srcPortRanges) {
    this.srcPortRanges = srcPortRanges;
  }


  public RouteInfo uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * URI of a route. Dynamic, peering static and peering dynamic routes do not have an URI. Advertised route from Google Cloud VPC to on-premises network also does not have an URI.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteInfo routeInfo = (RouteInfo) o;
    return Objects.equals(this.destIpRange, routeInfo.destIpRange) &&
        Objects.equals(this.destPortRanges, routeInfo.destPortRanges) &&
        Objects.equals(this.displayName, routeInfo.displayName) &&
        Objects.equals(this.instanceTags, routeInfo.instanceTags) &&
        Objects.equals(this.nccHubUri, routeInfo.nccHubUri) &&
        Objects.equals(this.nccSpokeUri, routeInfo.nccSpokeUri) &&
        Objects.equals(this.networkUri, routeInfo.networkUri) &&
        Objects.equals(this.nextHop, routeInfo.nextHop) &&
        Objects.equals(this.nextHopType, routeInfo.nextHopType) &&
        Objects.equals(this.priority, routeInfo.priority) &&
        Objects.equals(this.protocols, routeInfo.protocols) &&
        Objects.equals(this.routeScope, routeInfo.routeScope) &&
        Objects.equals(this.routeType, routeInfo.routeType) &&
        Objects.equals(this.srcIpRange, routeInfo.srcIpRange) &&
        Objects.equals(this.srcPortRanges, routeInfo.srcPortRanges) &&
        Objects.equals(this.uri, routeInfo.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destIpRange, destPortRanges, displayName, instanceTags, nccHubUri, nccSpokeUri, networkUri, nextHop, nextHopType, priority, protocols, routeScope, routeType, srcIpRange, srcPortRanges, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteInfo {\n");
    sb.append("    destIpRange: ").append(toIndentedString(destIpRange)).append("\n");
    sb.append("    destPortRanges: ").append(toIndentedString(destPortRanges)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    instanceTags: ").append(toIndentedString(instanceTags)).append("\n");
    sb.append("    nccHubUri: ").append(toIndentedString(nccHubUri)).append("\n");
    sb.append("    nccSpokeUri: ").append(toIndentedString(nccSpokeUri)).append("\n");
    sb.append("    networkUri: ").append(toIndentedString(networkUri)).append("\n");
    sb.append("    nextHop: ").append(toIndentedString(nextHop)).append("\n");
    sb.append("    nextHopType: ").append(toIndentedString(nextHopType)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("    routeScope: ").append(toIndentedString(routeScope)).append("\n");
    sb.append("    routeType: ").append(toIndentedString(routeType)).append("\n");
    sb.append("    srcIpRange: ").append(toIndentedString(srcIpRange)).append("\n");
    sb.append("    srcPortRanges: ").append(toIndentedString(srcPortRanges)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destIpRange");
    openapiFields.add("destPortRanges");
    openapiFields.add("displayName");
    openapiFields.add("instanceTags");
    openapiFields.add("nccHubUri");
    openapiFields.add("nccSpokeUri");
    openapiFields.add("networkUri");
    openapiFields.add("nextHop");
    openapiFields.add("nextHopType");
    openapiFields.add("priority");
    openapiFields.add("protocols");
    openapiFields.add("routeScope");
    openapiFields.add("routeType");
    openapiFields.add("srcIpRange");
    openapiFields.add("srcPortRanges");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RouteInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RouteInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RouteInfo is not found in the empty JSON string", RouteInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RouteInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RouteInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destIpRange") != null && !jsonObj.get("destIpRange").isJsonNull()) && !jsonObj.get("destIpRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destIpRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destIpRange").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destPortRanges") != null && !jsonObj.get("destPortRanges").isJsonNull() && !jsonObj.get("destPortRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destPortRanges` to be an array in the JSON string but got `%s`", jsonObj.get("destPortRanges").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instanceTags") != null && !jsonObj.get("instanceTags").isJsonNull() && !jsonObj.get("instanceTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceTags` to be an array in the JSON string but got `%s`", jsonObj.get("instanceTags").toString()));
      }
      if ((jsonObj.get("nccHubUri") != null && !jsonObj.get("nccHubUri").isJsonNull()) && !jsonObj.get("nccHubUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nccHubUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nccHubUri").toString()));
      }
      if ((jsonObj.get("nccSpokeUri") != null && !jsonObj.get("nccSpokeUri").isJsonNull()) && !jsonObj.get("nccSpokeUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nccSpokeUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nccSpokeUri").toString()));
      }
      if ((jsonObj.get("networkUri") != null && !jsonObj.get("networkUri").isJsonNull()) && !jsonObj.get("networkUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkUri").toString()));
      }
      if ((jsonObj.get("nextHop") != null && !jsonObj.get("nextHop").isJsonNull()) && !jsonObj.get("nextHop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHop").toString()));
      }
      if ((jsonObj.get("nextHopType") != null && !jsonObj.get("nextHopType").isJsonNull()) && !jsonObj.get("nextHopType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHopType").toString()));
      }
      // validate the optional field `nextHopType`
      if (jsonObj.get("nextHopType") != null && !jsonObj.get("nextHopType").isJsonNull()) {
        NextHopTypeEnum.validateJsonElement(jsonObj.get("nextHopType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("protocols") != null && !jsonObj.get("protocols").isJsonNull() && !jsonObj.get("protocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocols` to be an array in the JSON string but got `%s`", jsonObj.get("protocols").toString()));
      }
      if ((jsonObj.get("routeScope") != null && !jsonObj.get("routeScope").isJsonNull()) && !jsonObj.get("routeScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeScope").toString()));
      }
      // validate the optional field `routeScope`
      if (jsonObj.get("routeScope") != null && !jsonObj.get("routeScope").isJsonNull()) {
        RouteScopeEnum.validateJsonElement(jsonObj.get("routeScope"));
      }
      if ((jsonObj.get("routeType") != null && !jsonObj.get("routeType").isJsonNull()) && !jsonObj.get("routeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeType").toString()));
      }
      // validate the optional field `routeType`
      if (jsonObj.get("routeType") != null && !jsonObj.get("routeType").isJsonNull()) {
        RouteTypeEnum.validateJsonElement(jsonObj.get("routeType"));
      }
      if ((jsonObj.get("srcIpRange") != null && !jsonObj.get("srcIpRange").isJsonNull()) && !jsonObj.get("srcIpRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcIpRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcIpRange").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("srcPortRanges") != null && !jsonObj.get("srcPortRanges").isJsonNull() && !jsonObj.get("srcPortRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcPortRanges` to be an array in the JSON string but got `%s`", jsonObj.get("srcPortRanges").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RouteInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RouteInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RouteInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RouteInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<RouteInfo>() {
           @Override
           public void write(JsonWriter out, RouteInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RouteInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RouteInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RouteInfo
   * @throws IOException if the JSON string is invalid with respect to RouteInfo
   */
  public static RouteInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RouteInfo.class);
  }

  /**
   * Convert an instance of RouteInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

