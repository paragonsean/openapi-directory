/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EdgeLocation;
import org.openapitools.client.model.EndpointInfo;
import org.openapitools.client.model.LatencyDistribution;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Results of active probing from the last run of the test.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:01.182928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProbingDetails {
  /**
   * The reason probing was aborted.
   */
  @JsonAdapter(AbortCauseEnum.Adapter.class)
  public enum AbortCauseEnum {
    PROBING_ABORT_CAUSE_UNSPECIFIED("PROBING_ABORT_CAUSE_UNSPECIFIED"),
    
    PERMISSION_DENIED("PERMISSION_DENIED"),
    
    NO_SOURCE_LOCATION("NO_SOURCE_LOCATION");

    private String value;

    AbortCauseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AbortCauseEnum fromValue(String value) {
      for (AbortCauseEnum b : AbortCauseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AbortCauseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AbortCauseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AbortCauseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AbortCauseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AbortCauseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ABORT_CAUSE = "abortCause";
  @SerializedName(SERIALIZED_NAME_ABORT_CAUSE)
  private AbortCauseEnum abortCause;

  public static final String SERIALIZED_NAME_DESTINATION_EGRESS_LOCATION = "destinationEgressLocation";
  @SerializedName(SERIALIZED_NAME_DESTINATION_EGRESS_LOCATION)
  private EdgeLocation destinationEgressLocation;

  public static final String SERIALIZED_NAME_ENDPOINT_INFO = "endpointInfo";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_INFO)
  private EndpointInfo endpointInfo;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Status error;

  public static final String SERIALIZED_NAME_PROBING_LATENCY = "probingLatency";
  @SerializedName(SERIALIZED_NAME_PROBING_LATENCY)
  private LatencyDistribution probingLatency;

  /**
   * The overall result of active probing.
   */
  @JsonAdapter(ResultEnum.Adapter.class)
  public enum ResultEnum {
    PROBING_RESULT_UNSPECIFIED("PROBING_RESULT_UNSPECIFIED"),
    
    REACHABLE("REACHABLE"),
    
    UNREACHABLE("UNREACHABLE"),
    
    REACHABILITY_INCONSISTENT("REACHABILITY_INCONSISTENT"),
    
    UNDETERMINED("UNDETERMINED");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultEnum fromValue(String value) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ResultEnum result;

  public static final String SERIALIZED_NAME_SENT_PROBE_COUNT = "sentProbeCount";
  @SerializedName(SERIALIZED_NAME_SENT_PROBE_COUNT)
  private Integer sentProbeCount;

  public static final String SERIALIZED_NAME_SUCCESSFUL_PROBE_COUNT = "successfulProbeCount";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_PROBE_COUNT)
  private Integer successfulProbeCount;

  public static final String SERIALIZED_NAME_VERIFY_TIME = "verifyTime";
  @SerializedName(SERIALIZED_NAME_VERIFY_TIME)
  private String verifyTime;

  public ProbingDetails() {
  }

  public ProbingDetails abortCause(AbortCauseEnum abortCause) {
    this.abortCause = abortCause;
    return this;
  }

  /**
   * The reason probing was aborted.
   * @return abortCause
   */
  @javax.annotation.Nullable
  public AbortCauseEnum getAbortCause() {
    return abortCause;
  }

  public void setAbortCause(AbortCauseEnum abortCause) {
    this.abortCause = abortCause;
  }


  public ProbingDetails destinationEgressLocation(EdgeLocation destinationEgressLocation) {
    this.destinationEgressLocation = destinationEgressLocation;
    return this;
  }

  /**
   * Get destinationEgressLocation
   * @return destinationEgressLocation
   */
  @javax.annotation.Nullable
  public EdgeLocation getDestinationEgressLocation() {
    return destinationEgressLocation;
  }

  public void setDestinationEgressLocation(EdgeLocation destinationEgressLocation) {
    this.destinationEgressLocation = destinationEgressLocation;
  }


  public ProbingDetails endpointInfo(EndpointInfo endpointInfo) {
    this.endpointInfo = endpointInfo;
    return this;
  }

  /**
   * Get endpointInfo
   * @return endpointInfo
   */
  @javax.annotation.Nullable
  public EndpointInfo getEndpointInfo() {
    return endpointInfo;
  }

  public void setEndpointInfo(EndpointInfo endpointInfo) {
    this.endpointInfo = endpointInfo;
  }


  public ProbingDetails error(Status error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Status getError() {
    return error;
  }

  public void setError(Status error) {
    this.error = error;
  }


  public ProbingDetails probingLatency(LatencyDistribution probingLatency) {
    this.probingLatency = probingLatency;
    return this;
  }

  /**
   * Get probingLatency
   * @return probingLatency
   */
  @javax.annotation.Nullable
  public LatencyDistribution getProbingLatency() {
    return probingLatency;
  }

  public void setProbingLatency(LatencyDistribution probingLatency) {
    this.probingLatency = probingLatency;
  }


  public ProbingDetails result(ResultEnum result) {
    this.result = result;
    return this;
  }

  /**
   * The overall result of active probing.
   * @return result
   */
  @javax.annotation.Nullable
  public ResultEnum getResult() {
    return result;
  }

  public void setResult(ResultEnum result) {
    this.result = result;
  }


  public ProbingDetails sentProbeCount(Integer sentProbeCount) {
    this.sentProbeCount = sentProbeCount;
    return this;
  }

  /**
   * Number of probes sent.
   * @return sentProbeCount
   */
  @javax.annotation.Nullable
  public Integer getSentProbeCount() {
    return sentProbeCount;
  }

  public void setSentProbeCount(Integer sentProbeCount) {
    this.sentProbeCount = sentProbeCount;
  }


  public ProbingDetails successfulProbeCount(Integer successfulProbeCount) {
    this.successfulProbeCount = successfulProbeCount;
    return this;
  }

  /**
   * Number of probes that reached the destination.
   * @return successfulProbeCount
   */
  @javax.annotation.Nullable
  public Integer getSuccessfulProbeCount() {
    return successfulProbeCount;
  }

  public void setSuccessfulProbeCount(Integer successfulProbeCount) {
    this.successfulProbeCount = successfulProbeCount;
  }


  public ProbingDetails verifyTime(String verifyTime) {
    this.verifyTime = verifyTime;
    return this;
  }

  /**
   * The time that reachability was assessed through active probing.
   * @return verifyTime
   */
  @javax.annotation.Nullable
  public String getVerifyTime() {
    return verifyTime;
  }

  public void setVerifyTime(String verifyTime) {
    this.verifyTime = verifyTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProbingDetails probingDetails = (ProbingDetails) o;
    return Objects.equals(this.abortCause, probingDetails.abortCause) &&
        Objects.equals(this.destinationEgressLocation, probingDetails.destinationEgressLocation) &&
        Objects.equals(this.endpointInfo, probingDetails.endpointInfo) &&
        Objects.equals(this.error, probingDetails.error) &&
        Objects.equals(this.probingLatency, probingDetails.probingLatency) &&
        Objects.equals(this.result, probingDetails.result) &&
        Objects.equals(this.sentProbeCount, probingDetails.sentProbeCount) &&
        Objects.equals(this.successfulProbeCount, probingDetails.successfulProbeCount) &&
        Objects.equals(this.verifyTime, probingDetails.verifyTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abortCause, destinationEgressLocation, endpointInfo, error, probingLatency, result, sentProbeCount, successfulProbeCount, verifyTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProbingDetails {\n");
    sb.append("    abortCause: ").append(toIndentedString(abortCause)).append("\n");
    sb.append("    destinationEgressLocation: ").append(toIndentedString(destinationEgressLocation)).append("\n");
    sb.append("    endpointInfo: ").append(toIndentedString(endpointInfo)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    probingLatency: ").append(toIndentedString(probingLatency)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    sentProbeCount: ").append(toIndentedString(sentProbeCount)).append("\n");
    sb.append("    successfulProbeCount: ").append(toIndentedString(successfulProbeCount)).append("\n");
    sb.append("    verifyTime: ").append(toIndentedString(verifyTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abortCause");
    openapiFields.add("destinationEgressLocation");
    openapiFields.add("endpointInfo");
    openapiFields.add("error");
    openapiFields.add("probingLatency");
    openapiFields.add("result");
    openapiFields.add("sentProbeCount");
    openapiFields.add("successfulProbeCount");
    openapiFields.add("verifyTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProbingDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProbingDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProbingDetails is not found in the empty JSON string", ProbingDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProbingDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProbingDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("abortCause") != null && !jsonObj.get("abortCause").isJsonNull()) && !jsonObj.get("abortCause").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abortCause` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abortCause").toString()));
      }
      // validate the optional field `abortCause`
      if (jsonObj.get("abortCause") != null && !jsonObj.get("abortCause").isJsonNull()) {
        AbortCauseEnum.validateJsonElement(jsonObj.get("abortCause"));
      }
      // validate the optional field `destinationEgressLocation`
      if (jsonObj.get("destinationEgressLocation") != null && !jsonObj.get("destinationEgressLocation").isJsonNull()) {
        EdgeLocation.validateJsonElement(jsonObj.get("destinationEgressLocation"));
      }
      // validate the optional field `endpointInfo`
      if (jsonObj.get("endpointInfo") != null && !jsonObj.get("endpointInfo").isJsonNull()) {
        EndpointInfo.validateJsonElement(jsonObj.get("endpointInfo"));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("error"));
      }
      // validate the optional field `probingLatency`
      if (jsonObj.get("probingLatency") != null && !jsonObj.get("probingLatency").isJsonNull()) {
        LatencyDistribution.validateJsonElement(jsonObj.get("probingLatency"));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        ResultEnum.validateJsonElement(jsonObj.get("result"));
      }
      if ((jsonObj.get("verifyTime") != null && !jsonObj.get("verifyTime").isJsonNull()) && !jsonObj.get("verifyTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifyTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verifyTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProbingDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProbingDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProbingDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProbingDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ProbingDetails>() {
           @Override
           public void write(JsonWriter out, ProbingDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProbingDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProbingDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProbingDetails
   * @throws IOException if the JSON string is invalid with respect to ProbingDetails
   */
  public static ProbingDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProbingDetails.class);
  }

  /**
   * Convert an instance of ProbingDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

