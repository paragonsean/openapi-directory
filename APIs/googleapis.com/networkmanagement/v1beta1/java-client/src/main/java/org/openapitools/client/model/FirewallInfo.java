/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * For display only. Metadata associated with a VPC firewall rule, an implied VPC firewall rule, or a hierarchical firewall policy rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:01.182928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FirewallInfo {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * The firewall rule&#39;s type.
   */
  @JsonAdapter(FirewallRuleTypeEnum.Adapter.class)
  public enum FirewallRuleTypeEnum {
    FIREWALL_RULE_TYPE_UNSPECIFIED("FIREWALL_RULE_TYPE_UNSPECIFIED"),
    
    HIERARCHICAL_FIREWALL_POLICY_RULE("HIERARCHICAL_FIREWALL_POLICY_RULE"),
    
    VPC_FIREWALL_RULE("VPC_FIREWALL_RULE"),
    
    IMPLIED_VPC_FIREWALL_RULE("IMPLIED_VPC_FIREWALL_RULE"),
    
    SERVERLESS_VPC_ACCESS_MANAGED_FIREWALL_RULE("SERVERLESS_VPC_ACCESS_MANAGED_FIREWALL_RULE"),
    
    NETWORK_FIREWALL_POLICY_RULE("NETWORK_FIREWALL_POLICY_RULE"),
    
    NETWORK_REGIONAL_FIREWALL_POLICY_RULE("NETWORK_REGIONAL_FIREWALL_POLICY_RULE"),
    
    UNSUPPORTED_FIREWALL_POLICY_RULE("UNSUPPORTED_FIREWALL_POLICY_RULE"),
    
    TRACKING_STATE("TRACKING_STATE");

    private String value;

    FirewallRuleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FirewallRuleTypeEnum fromValue(String value) {
      for (FirewallRuleTypeEnum b : FirewallRuleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FirewallRuleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FirewallRuleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FirewallRuleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FirewallRuleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FirewallRuleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIREWALL_RULE_TYPE = "firewallRuleType";
  @SerializedName(SERIALIZED_NAME_FIREWALL_RULE_TYPE)
  private FirewallRuleTypeEnum firewallRuleType;

  public static final String SERIALIZED_NAME_NETWORK_URI = "networkUri";
  @SerializedName(SERIALIZED_NAME_NETWORK_URI)
  private String networkUri;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private String policy;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_TARGET_SERVICE_ACCOUNTS = "targetServiceAccounts";
  @SerializedName(SERIALIZED_NAME_TARGET_SERVICE_ACCOUNTS)
  private List<String> targetServiceAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_TAGS = "targetTags";
  @SerializedName(SERIALIZED_NAME_TARGET_TAGS)
  private List<String> targetTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public FirewallInfo() {
  }

  public FirewallInfo action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Possible values: ALLOW, DENY, APPLY_SECURITY_PROFILE_GROUP
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public FirewallInfo direction(String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Possible values: INGRESS, EGRESS
   * @return direction
   */
  @javax.annotation.Nullable
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }


  public FirewallInfo displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public FirewallInfo firewallRuleType(FirewallRuleTypeEnum firewallRuleType) {
    this.firewallRuleType = firewallRuleType;
    return this;
  }

  /**
   * The firewall rule&#39;s type.
   * @return firewallRuleType
   */
  @javax.annotation.Nullable
  public FirewallRuleTypeEnum getFirewallRuleType() {
    return firewallRuleType;
  }

  public void setFirewallRuleType(FirewallRuleTypeEnum firewallRuleType) {
    this.firewallRuleType = firewallRuleType;
  }


  public FirewallInfo networkUri(String networkUri) {
    this.networkUri = networkUri;
    return this;
  }

  /**
   * The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.
   * @return networkUri
   */
  @javax.annotation.Nullable
  public String getNetworkUri() {
    return networkUri;
  }

  public void setNetworkUri(String networkUri) {
    this.networkUri = networkUri;
  }


  public FirewallInfo policy(String policy) {
    this.policy = policy;
    return this;
  }

  /**
   * The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.
   * @return policy
   */
  @javax.annotation.Nullable
  public String getPolicy() {
    return policy;
  }

  public void setPolicy(String policy) {
    this.policy = policy;
  }


  public FirewallInfo priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * The priority of the firewall rule.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public FirewallInfo targetServiceAccounts(List<String> targetServiceAccounts) {
    this.targetServiceAccounts = targetServiceAccounts;
    return this;
  }

  public FirewallInfo addTargetServiceAccountsItem(String targetServiceAccountsItem) {
    if (this.targetServiceAccounts == null) {
      this.targetServiceAccounts = new ArrayList<>();
    }
    this.targetServiceAccounts.add(targetServiceAccountsItem);
    return this;
  }

  /**
   * The target service accounts specified by the firewall rule.
   * @return targetServiceAccounts
   */
  @javax.annotation.Nullable
  public List<String> getTargetServiceAccounts() {
    return targetServiceAccounts;
  }

  public void setTargetServiceAccounts(List<String> targetServiceAccounts) {
    this.targetServiceAccounts = targetServiceAccounts;
  }


  public FirewallInfo targetTags(List<String> targetTags) {
    this.targetTags = targetTags;
    return this;
  }

  public FirewallInfo addTargetTagsItem(String targetTagsItem) {
    if (this.targetTags == null) {
      this.targetTags = new ArrayList<>();
    }
    this.targetTags.add(targetTagsItem);
    return this;
  }

  /**
   * The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.
   * @return targetTags
   */
  @javax.annotation.Nullable
  public List<String> getTargetTags() {
    return targetTags;
  }

  public void setTargetTags(List<String> targetTags) {
    this.targetTags = targetTags;
  }


  public FirewallInfo uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirewallInfo firewallInfo = (FirewallInfo) o;
    return Objects.equals(this.action, firewallInfo.action) &&
        Objects.equals(this.direction, firewallInfo.direction) &&
        Objects.equals(this.displayName, firewallInfo.displayName) &&
        Objects.equals(this.firewallRuleType, firewallInfo.firewallRuleType) &&
        Objects.equals(this.networkUri, firewallInfo.networkUri) &&
        Objects.equals(this.policy, firewallInfo.policy) &&
        Objects.equals(this.priority, firewallInfo.priority) &&
        Objects.equals(this.targetServiceAccounts, firewallInfo.targetServiceAccounts) &&
        Objects.equals(this.targetTags, firewallInfo.targetTags) &&
        Objects.equals(this.uri, firewallInfo.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, direction, displayName, firewallRuleType, networkUri, policy, priority, targetServiceAccounts, targetTags, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirewallInfo {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    firewallRuleType: ").append(toIndentedString(firewallRuleType)).append("\n");
    sb.append("    networkUri: ").append(toIndentedString(networkUri)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    targetServiceAccounts: ").append(toIndentedString(targetServiceAccounts)).append("\n");
    sb.append("    targetTags: ").append(toIndentedString(targetTags)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("direction");
    openapiFields.add("displayName");
    openapiFields.add("firewallRuleType");
    openapiFields.add("networkUri");
    openapiFields.add("policy");
    openapiFields.add("priority");
    openapiFields.add("targetServiceAccounts");
    openapiFields.add("targetTags");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FirewallInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirewallInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirewallInfo is not found in the empty JSON string", FirewallInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirewallInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirewallInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("firewallRuleType") != null && !jsonObj.get("firewallRuleType").isJsonNull()) && !jsonObj.get("firewallRuleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firewallRuleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firewallRuleType").toString()));
      }
      // validate the optional field `firewallRuleType`
      if (jsonObj.get("firewallRuleType") != null && !jsonObj.get("firewallRuleType").isJsonNull()) {
        FirewallRuleTypeEnum.validateJsonElement(jsonObj.get("firewallRuleType"));
      }
      if ((jsonObj.get("networkUri") != null && !jsonObj.get("networkUri").isJsonNull()) && !jsonObj.get("networkUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkUri").toString()));
      }
      if ((jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) && !jsonObj.get("policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetServiceAccounts") != null && !jsonObj.get("targetServiceAccounts").isJsonNull() && !jsonObj.get("targetServiceAccounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetServiceAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("targetServiceAccounts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetTags") != null && !jsonObj.get("targetTags").isJsonNull() && !jsonObj.get("targetTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetTags` to be an array in the JSON string but got `%s`", jsonObj.get("targetTags").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirewallInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirewallInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirewallInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirewallInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<FirewallInfo>() {
           @Override
           public void write(JsonWriter out, FirewallInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirewallInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FirewallInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FirewallInfo
   * @throws IOException if the JSON string is invalid with respect to FirewallInfo
   */
  public static FirewallInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirewallInfo.class);
  }

  /**
   * Convert an instance of FirewallInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

