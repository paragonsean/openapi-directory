/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceInfo::OAIInstanceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceInfo::OAIInstanceInfo() {
    this->initializeModel();
}

OAIInstanceInfo::~OAIInstanceInfo() {}

void OAIInstanceInfo::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_external_ip_isSet = false;
    m_external_ip_isValid = false;

    m_interface_isSet = false;
    m_interface_isValid = false;

    m_internal_ip_isSet = false;
    m_internal_ip_isValid = false;

    m_network_tags_isSet = false;
    m_network_tags_isValid = false;

    m_network_uri_isSet = false;
    m_network_uri_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIInstanceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceInfo::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_external_ip_isValid = ::OpenAPI::fromJsonValue(m_external_ip, json[QString("externalIp")]);
    m_external_ip_isSet = !json[QString("externalIp")].isNull() && m_external_ip_isValid;

    m_interface_isValid = ::OpenAPI::fromJsonValue(m_interface, json[QString("interface")]);
    m_interface_isSet = !json[QString("interface")].isNull() && m_interface_isValid;

    m_internal_ip_isValid = ::OpenAPI::fromJsonValue(m_internal_ip, json[QString("internalIp")]);
    m_internal_ip_isSet = !json[QString("internalIp")].isNull() && m_internal_ip_isValid;

    m_network_tags_isValid = ::OpenAPI::fromJsonValue(m_network_tags, json[QString("networkTags")]);
    m_network_tags_isSet = !json[QString("networkTags")].isNull() && m_network_tags_isValid;

    m_network_uri_isValid = ::OpenAPI::fromJsonValue(m_network_uri, json[QString("networkUri")]);
    m_network_uri_isSet = !json[QString("networkUri")].isNull() && m_network_uri_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIInstanceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_external_ip_isSet) {
        obj.insert(QString("externalIp"), ::OpenAPI::toJsonValue(m_external_ip));
    }
    if (m_interface_isSet) {
        obj.insert(QString("interface"), ::OpenAPI::toJsonValue(m_interface));
    }
    if (m_internal_ip_isSet) {
        obj.insert(QString("internalIp"), ::OpenAPI::toJsonValue(m_internal_ip));
    }
    if (m_network_tags.size() > 0) {
        obj.insert(QString("networkTags"), ::OpenAPI::toJsonValue(m_network_tags));
    }
    if (m_network_uri_isSet) {
        obj.insert(QString("networkUri"), ::OpenAPI::toJsonValue(m_network_uri));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIInstanceInfo::getDisplayName() const {
    return m_display_name;
}
void OAIInstanceInfo::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIInstanceInfo::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIInstanceInfo::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIInstanceInfo::getExternalIp() const {
    return m_external_ip;
}
void OAIInstanceInfo::setExternalIp(const QString &external_ip) {
    m_external_ip = external_ip;
    m_external_ip_isSet = true;
}

bool OAIInstanceInfo::is_external_ip_Set() const{
    return m_external_ip_isSet;
}

bool OAIInstanceInfo::is_external_ip_Valid() const{
    return m_external_ip_isValid;
}

QString OAIInstanceInfo::getInterface() const {
    return m_interface;
}
void OAIInstanceInfo::setInterface(const QString &interface) {
    m_interface = interface;
    m_interface_isSet = true;
}

bool OAIInstanceInfo::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAIInstanceInfo::is_interface_Valid() const{
    return m_interface_isValid;
}

QString OAIInstanceInfo::getInternalIp() const {
    return m_internal_ip;
}
void OAIInstanceInfo::setInternalIp(const QString &internal_ip) {
    m_internal_ip = internal_ip;
    m_internal_ip_isSet = true;
}

bool OAIInstanceInfo::is_internal_ip_Set() const{
    return m_internal_ip_isSet;
}

bool OAIInstanceInfo::is_internal_ip_Valid() const{
    return m_internal_ip_isValid;
}

QList<QString> OAIInstanceInfo::getNetworkTags() const {
    return m_network_tags;
}
void OAIInstanceInfo::setNetworkTags(const QList<QString> &network_tags) {
    m_network_tags = network_tags;
    m_network_tags_isSet = true;
}

bool OAIInstanceInfo::is_network_tags_Set() const{
    return m_network_tags_isSet;
}

bool OAIInstanceInfo::is_network_tags_Valid() const{
    return m_network_tags_isValid;
}

QString OAIInstanceInfo::getNetworkUri() const {
    return m_network_uri;
}
void OAIInstanceInfo::setNetworkUri(const QString &network_uri) {
    m_network_uri = network_uri;
    m_network_uri_isSet = true;
}

bool OAIInstanceInfo::is_network_uri_Set() const{
    return m_network_uri_isSet;
}

bool OAIInstanceInfo::is_network_uri_Valid() const{
    return m_network_uri_isValid;
}

QString OAIInstanceInfo::getServiceAccount() const {
    return m_service_account;
}
void OAIInstanceInfo::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIInstanceInfo::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIInstanceInfo::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAIInstanceInfo::getUri() const {
    return m_uri;
}
void OAIInstanceInfo::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIInstanceInfo::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIInstanceInfo::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIInstanceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
