/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectivityTest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectivityTest::OAIConnectivityTest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectivityTest::OAIConnectivityTest() {
    this->initializeModel();
}

OAIConnectivityTest::~OAIConnectivityTest() {}

void OAIConnectivityTest::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_probing_details_isSet = false;
    m_probing_details_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_reachability_details_isSet = false;
    m_reachability_details_isValid = false;

    m_related_projects_isSet = false;
    m_related_projects_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIConnectivityTest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectivityTest::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_probing_details_isValid = ::OpenAPI::fromJsonValue(m_probing_details, json[QString("probingDetails")]);
    m_probing_details_isSet = !json[QString("probingDetails")].isNull() && m_probing_details_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_reachability_details_isValid = ::OpenAPI::fromJsonValue(m_reachability_details, json[QString("reachabilityDetails")]);
    m_reachability_details_isSet = !json[QString("reachabilityDetails")].isNull() && m_reachability_details_isValid;

    m_related_projects_isValid = ::OpenAPI::fromJsonValue(m_related_projects, json[QString("relatedProjects")]);
    m_related_projects_isSet = !json[QString("relatedProjects")].isNull() && m_related_projects_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIConnectivityTest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectivityTest::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_probing_details.isSet()) {
        obj.insert(QString("probingDetails"), ::OpenAPI::toJsonValue(m_probing_details));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_reachability_details.isSet()) {
        obj.insert(QString("reachabilityDetails"), ::OpenAPI::toJsonValue(m_reachability_details));
    }
    if (m_related_projects.size() > 0) {
        obj.insert(QString("relatedProjects"), ::OpenAPI::toJsonValue(m_related_projects));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIConnectivityTest::getCreateTime() const {
    return m_create_time;
}
void OAIConnectivityTest::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIConnectivityTest::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIConnectivityTest::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIConnectivityTest::getDescription() const {
    return m_description;
}
void OAIConnectivityTest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConnectivityTest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConnectivityTest::is_description_Valid() const{
    return m_description_isValid;
}

OAIEndpoint OAIConnectivityTest::getDestination() const {
    return m_destination;
}
void OAIConnectivityTest::setDestination(const OAIEndpoint &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIConnectivityTest::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIConnectivityTest::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIConnectivityTest::getDisplayName() const {
    return m_display_name;
}
void OAIConnectivityTest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIConnectivityTest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIConnectivityTest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QMap<QString, QString> OAIConnectivityTest::getLabels() const {
    return m_labels;
}
void OAIConnectivityTest::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIConnectivityTest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIConnectivityTest::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIConnectivityTest::getName() const {
    return m_name;
}
void OAIConnectivityTest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnectivityTest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnectivityTest::is_name_Valid() const{
    return m_name_isValid;
}

OAIProbingDetails OAIConnectivityTest::getProbingDetails() const {
    return m_probing_details;
}
void OAIConnectivityTest::setProbingDetails(const OAIProbingDetails &probing_details) {
    m_probing_details = probing_details;
    m_probing_details_isSet = true;
}

bool OAIConnectivityTest::is_probing_details_Set() const{
    return m_probing_details_isSet;
}

bool OAIConnectivityTest::is_probing_details_Valid() const{
    return m_probing_details_isValid;
}

QString OAIConnectivityTest::getProtocol() const {
    return m_protocol;
}
void OAIConnectivityTest::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIConnectivityTest::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIConnectivityTest::is_protocol_Valid() const{
    return m_protocol_isValid;
}

OAIReachabilityDetails OAIConnectivityTest::getReachabilityDetails() const {
    return m_reachability_details;
}
void OAIConnectivityTest::setReachabilityDetails(const OAIReachabilityDetails &reachability_details) {
    m_reachability_details = reachability_details;
    m_reachability_details_isSet = true;
}

bool OAIConnectivityTest::is_reachability_details_Set() const{
    return m_reachability_details_isSet;
}

bool OAIConnectivityTest::is_reachability_details_Valid() const{
    return m_reachability_details_isValid;
}

QList<QString> OAIConnectivityTest::getRelatedProjects() const {
    return m_related_projects;
}
void OAIConnectivityTest::setRelatedProjects(const QList<QString> &related_projects) {
    m_related_projects = related_projects;
    m_related_projects_isSet = true;
}

bool OAIConnectivityTest::is_related_projects_Set() const{
    return m_related_projects_isSet;
}

bool OAIConnectivityTest::is_related_projects_Valid() const{
    return m_related_projects_isValid;
}

OAIEndpoint OAIConnectivityTest::getSource() const {
    return m_source;
}
void OAIConnectivityTest::setSource(const OAIEndpoint &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIConnectivityTest::is_source_Set() const{
    return m_source_isSet;
}

bool OAIConnectivityTest::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIConnectivityTest::getUpdateTime() const {
    return m_update_time;
}
void OAIConnectivityTest::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIConnectivityTest::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIConnectivityTest::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIConnectivityTest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probing_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reachability_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectivityTest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
