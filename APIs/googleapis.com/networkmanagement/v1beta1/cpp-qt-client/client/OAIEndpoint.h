/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEndpoint.h
 *
 * Source or destination of the Connectivity Test.
 */

#ifndef OAIEndpoint_H
#define OAIEndpoint_H

#include <QJsonObject>

#include "OAIAppEngineVersionEndpoint.h"
#include "OAICloudFunctionEndpoint.h"
#include "OAICloudRunRevisionEndpoint.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAppEngineVersionEndpoint;
class OAICloudFunctionEndpoint;
class OAICloudRunRevisionEndpoint;

class OAIEndpoint : public OAIObject {
public:
    OAIEndpoint();
    OAIEndpoint(QString json);
    ~OAIEndpoint() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAppEngineVersionEndpoint getAppEngineVersion() const;
    void setAppEngineVersion(const OAIAppEngineVersionEndpoint &app_engine_version);
    bool is_app_engine_version_Set() const;
    bool is_app_engine_version_Valid() const;

    OAICloudFunctionEndpoint getCloudFunction() const;
    void setCloudFunction(const OAICloudFunctionEndpoint &cloud_function);
    bool is_cloud_function_Set() const;
    bool is_cloud_function_Valid() const;

    OAICloudRunRevisionEndpoint getCloudRunRevision() const;
    void setCloudRunRevision(const OAICloudRunRevisionEndpoint &cloud_run_revision);
    bool is_cloud_run_revision_Set() const;
    bool is_cloud_run_revision_Valid() const;

    QString getCloudSqlInstance() const;
    void setCloudSqlInstance(const QString &cloud_sql_instance);
    bool is_cloud_sql_instance_Set() const;
    bool is_cloud_sql_instance_Valid() const;

    QString getForwardingRule() const;
    void setForwardingRule(const QString &forwarding_rule);
    bool is_forwarding_rule_Set() const;
    bool is_forwarding_rule_Valid() const;

    QString getForwardingRuleTarget() const;
    void setForwardingRuleTarget(const QString &forwarding_rule_target);
    bool is_forwarding_rule_target_Set() const;
    bool is_forwarding_rule_target_Valid() const;

    QString getGkeMasterCluster() const;
    void setGkeMasterCluster(const QString &gke_master_cluster);
    bool is_gke_master_cluster_Set() const;
    bool is_gke_master_cluster_Valid() const;

    QString getInstance() const;
    void setInstance(const QString &instance);
    bool is_instance_Set() const;
    bool is_instance_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QString getLoadBalancerId() const;
    void setLoadBalancerId(const QString &load_balancer_id);
    bool is_load_balancer_id_Set() const;
    bool is_load_balancer_id_Valid() const;

    QString getLoadBalancerType() const;
    void setLoadBalancerType(const QString &load_balancer_type);
    bool is_load_balancer_type_Set() const;
    bool is_load_balancer_type_Valid() const;

    QString getNetwork() const;
    void setNetwork(const QString &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    QString getNetworkType() const;
    void setNetworkType(const QString &network_type);
    bool is_network_type_Set() const;
    bool is_network_type_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getProjectId() const;
    void setProjectId(const QString &project_id);
    bool is_project_id_Set() const;
    bool is_project_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAppEngineVersionEndpoint m_app_engine_version;
    bool m_app_engine_version_isSet;
    bool m_app_engine_version_isValid;

    OAICloudFunctionEndpoint m_cloud_function;
    bool m_cloud_function_isSet;
    bool m_cloud_function_isValid;

    OAICloudRunRevisionEndpoint m_cloud_run_revision;
    bool m_cloud_run_revision_isSet;
    bool m_cloud_run_revision_isValid;

    QString m_cloud_sql_instance;
    bool m_cloud_sql_instance_isSet;
    bool m_cloud_sql_instance_isValid;

    QString m_forwarding_rule;
    bool m_forwarding_rule_isSet;
    bool m_forwarding_rule_isValid;

    QString m_forwarding_rule_target;
    bool m_forwarding_rule_target_isSet;
    bool m_forwarding_rule_target_isValid;

    QString m_gke_master_cluster;
    bool m_gke_master_cluster_isSet;
    bool m_gke_master_cluster_isValid;

    QString m_instance;
    bool m_instance_isSet;
    bool m_instance_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QString m_load_balancer_id;
    bool m_load_balancer_id_isSet;
    bool m_load_balancer_id_isValid;

    QString m_load_balancer_type;
    bool m_load_balancer_type_isSet;
    bool m_load_balancer_type_isValid;

    QString m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    QString m_network_type;
    bool m_network_type_isSet;
    bool m_network_type_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_project_id;
    bool m_project_id_isSet;
    bool m_project_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEndpoint)

#endif // OAIEndpoint_H
