/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReachabilityDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReachabilityDetails::OAIReachabilityDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReachabilityDetails::OAIReachabilityDetails() {
    this->initializeModel();
}

OAIReachabilityDetails::~OAIReachabilityDetails() {}

void OAIReachabilityDetails::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_traces_isSet = false;
    m_traces_isValid = false;

    m_verify_time_isSet = false;
    m_verify_time_isValid = false;
}

void OAIReachabilityDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReachabilityDetails::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_traces_isValid = ::OpenAPI::fromJsonValue(m_traces, json[QString("traces")]);
    m_traces_isSet = !json[QString("traces")].isNull() && m_traces_isValid;

    m_verify_time_isValid = ::OpenAPI::fromJsonValue(m_verify_time, json[QString("verifyTime")]);
    m_verify_time_isSet = !json[QString("verifyTime")].isNull() && m_verify_time_isValid;
}

QString OAIReachabilityDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReachabilityDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_traces.size() > 0) {
        obj.insert(QString("traces"), ::OpenAPI::toJsonValue(m_traces));
    }
    if (m_verify_time_isSet) {
        obj.insert(QString("verifyTime"), ::OpenAPI::toJsonValue(m_verify_time));
    }
    return obj;
}

OAIStatus OAIReachabilityDetails::getError() const {
    return m_error;
}
void OAIReachabilityDetails::setError(const OAIStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIReachabilityDetails::is_error_Set() const{
    return m_error_isSet;
}

bool OAIReachabilityDetails::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIReachabilityDetails::getResult() const {
    return m_result;
}
void OAIReachabilityDetails::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIReachabilityDetails::is_result_Set() const{
    return m_result_isSet;
}

bool OAIReachabilityDetails::is_result_Valid() const{
    return m_result_isValid;
}

QList<OAITrace> OAIReachabilityDetails::getTraces() const {
    return m_traces;
}
void OAIReachabilityDetails::setTraces(const QList<OAITrace> &traces) {
    m_traces = traces;
    m_traces_isSet = true;
}

bool OAIReachabilityDetails::is_traces_Set() const{
    return m_traces_isSet;
}

bool OAIReachabilityDetails::is_traces_Valid() const{
    return m_traces_isValid;
}

QString OAIReachabilityDetails::getVerifyTime() const {
    return m_verify_time;
}
void OAIReachabilityDetails::setVerifyTime(const QString &verify_time) {
    m_verify_time = verify_time;
    m_verify_time_isSet = true;
}

bool OAIReachabilityDetails::is_verify_time_Set() const{
    return m_verify_time_isSet;
}

bool OAIReachabilityDetails::is_verify_time_Valid() const{
    return m_verify_time_isValid;
}

bool OAIReachabilityDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReachabilityDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
