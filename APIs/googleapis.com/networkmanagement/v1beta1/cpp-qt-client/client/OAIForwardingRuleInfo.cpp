/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForwardingRuleInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForwardingRuleInfo::OAIForwardingRuleInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForwardingRuleInfo::OAIForwardingRuleInfo() {
    this->initializeModel();
}

OAIForwardingRuleInfo::~OAIForwardingRuleInfo() {}

void OAIForwardingRuleInfo::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_matched_port_range_isSet = false;
    m_matched_port_range_isValid = false;

    m_matched_protocol_isSet = false;
    m_matched_protocol_isValid = false;

    m_network_uri_isSet = false;
    m_network_uri_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_vip_isSet = false;
    m_vip_isValid = false;
}

void OAIForwardingRuleInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForwardingRuleInfo::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_matched_port_range_isValid = ::OpenAPI::fromJsonValue(m_matched_port_range, json[QString("matchedPortRange")]);
    m_matched_port_range_isSet = !json[QString("matchedPortRange")].isNull() && m_matched_port_range_isValid;

    m_matched_protocol_isValid = ::OpenAPI::fromJsonValue(m_matched_protocol, json[QString("matchedProtocol")]);
    m_matched_protocol_isSet = !json[QString("matchedProtocol")].isNull() && m_matched_protocol_isValid;

    m_network_uri_isValid = ::OpenAPI::fromJsonValue(m_network_uri, json[QString("networkUri")]);
    m_network_uri_isSet = !json[QString("networkUri")].isNull() && m_network_uri_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_vip_isValid = ::OpenAPI::fromJsonValue(m_vip, json[QString("vip")]);
    m_vip_isSet = !json[QString("vip")].isNull() && m_vip_isValid;
}

QString OAIForwardingRuleInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForwardingRuleInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_matched_port_range_isSet) {
        obj.insert(QString("matchedPortRange"), ::OpenAPI::toJsonValue(m_matched_port_range));
    }
    if (m_matched_protocol_isSet) {
        obj.insert(QString("matchedProtocol"), ::OpenAPI::toJsonValue(m_matched_protocol));
    }
    if (m_network_uri_isSet) {
        obj.insert(QString("networkUri"), ::OpenAPI::toJsonValue(m_network_uri));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_vip_isSet) {
        obj.insert(QString("vip"), ::OpenAPI::toJsonValue(m_vip));
    }
    return obj;
}

QString OAIForwardingRuleInfo::getDisplayName() const {
    return m_display_name;
}
void OAIForwardingRuleInfo::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIForwardingRuleInfo::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIForwardingRuleInfo::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIForwardingRuleInfo::getMatchedPortRange() const {
    return m_matched_port_range;
}
void OAIForwardingRuleInfo::setMatchedPortRange(const QString &matched_port_range) {
    m_matched_port_range = matched_port_range;
    m_matched_port_range_isSet = true;
}

bool OAIForwardingRuleInfo::is_matched_port_range_Set() const{
    return m_matched_port_range_isSet;
}

bool OAIForwardingRuleInfo::is_matched_port_range_Valid() const{
    return m_matched_port_range_isValid;
}

QString OAIForwardingRuleInfo::getMatchedProtocol() const {
    return m_matched_protocol;
}
void OAIForwardingRuleInfo::setMatchedProtocol(const QString &matched_protocol) {
    m_matched_protocol = matched_protocol;
    m_matched_protocol_isSet = true;
}

bool OAIForwardingRuleInfo::is_matched_protocol_Set() const{
    return m_matched_protocol_isSet;
}

bool OAIForwardingRuleInfo::is_matched_protocol_Valid() const{
    return m_matched_protocol_isValid;
}

QString OAIForwardingRuleInfo::getNetworkUri() const {
    return m_network_uri;
}
void OAIForwardingRuleInfo::setNetworkUri(const QString &network_uri) {
    m_network_uri = network_uri;
    m_network_uri_isSet = true;
}

bool OAIForwardingRuleInfo::is_network_uri_Set() const{
    return m_network_uri_isSet;
}

bool OAIForwardingRuleInfo::is_network_uri_Valid() const{
    return m_network_uri_isValid;
}

QString OAIForwardingRuleInfo::getTarget() const {
    return m_target;
}
void OAIForwardingRuleInfo::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIForwardingRuleInfo::is_target_Set() const{
    return m_target_isSet;
}

bool OAIForwardingRuleInfo::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIForwardingRuleInfo::getUri() const {
    return m_uri;
}
void OAIForwardingRuleInfo::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIForwardingRuleInfo::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIForwardingRuleInfo::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIForwardingRuleInfo::getVip() const {
    return m_vip;
}
void OAIForwardingRuleInfo::setVip(const QString &vip) {
    m_vip = vip;
    m_vip_isSet = true;
}

bool OAIForwardingRuleInfo::is_vip_Set() const{
    return m_vip_isSet;
}

bool OAIForwardingRuleInfo::is_vip_Valid() const{
    return m_vip_isValid;
}

bool OAIForwardingRuleInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_port_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForwardingRuleInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
