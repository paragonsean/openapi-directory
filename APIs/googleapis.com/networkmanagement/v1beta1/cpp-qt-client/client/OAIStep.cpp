/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStep::OAIStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStep::OAIStep() {
    this->initializeModel();
}

OAIStep::~OAIStep() {}

void OAIStep::initializeModel() {

    m_abort_isSet = false;
    m_abort_isValid = false;

    m_app_engine_version_isSet = false;
    m_app_engine_version_isValid = false;

    m_causes_drop_isSet = false;
    m_causes_drop_isValid = false;

    m_cloud_function_isSet = false;
    m_cloud_function_isValid = false;

    m_cloud_run_revision_isSet = false;
    m_cloud_run_revision_isValid = false;

    m_cloud_sql_instance_isSet = false;
    m_cloud_sql_instance_isValid = false;

    m_deliver_isSet = false;
    m_deliver_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_drop_isSet = false;
    m_drop_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_firewall_isSet = false;
    m_firewall_isValid = false;

    m_forward_isSet = false;
    m_forward_isValid = false;

    m_forwarding_rule_isSet = false;
    m_forwarding_rule_isValid = false;

    m_gke_master_isSet = false;
    m_gke_master_isValid = false;

    m_google_service_isSet = false;
    m_google_service_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_load_balancer_isSet = false;
    m_load_balancer_isValid = false;

    m_load_balancer_backend_info_isSet = false;
    m_load_balancer_backend_info_isValid = false;

    m_nat_isSet = false;
    m_nat_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_proxy_connection_isSet = false;
    m_proxy_connection_isValid = false;

    m_route_isSet = false;
    m_route_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_bucket_isSet = false;
    m_storage_bucket_isValid = false;

    m_vpc_connector_isSet = false;
    m_vpc_connector_isValid = false;

    m_vpn_gateway_isSet = false;
    m_vpn_gateway_isValid = false;

    m_vpn_tunnel_isSet = false;
    m_vpn_tunnel_isValid = false;
}

void OAIStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStep::fromJsonObject(QJsonObject json) {

    m_abort_isValid = ::OpenAPI::fromJsonValue(m_abort, json[QString("abort")]);
    m_abort_isSet = !json[QString("abort")].isNull() && m_abort_isValid;

    m_app_engine_version_isValid = ::OpenAPI::fromJsonValue(m_app_engine_version, json[QString("appEngineVersion")]);
    m_app_engine_version_isSet = !json[QString("appEngineVersion")].isNull() && m_app_engine_version_isValid;

    m_causes_drop_isValid = ::OpenAPI::fromJsonValue(m_causes_drop, json[QString("causesDrop")]);
    m_causes_drop_isSet = !json[QString("causesDrop")].isNull() && m_causes_drop_isValid;

    m_cloud_function_isValid = ::OpenAPI::fromJsonValue(m_cloud_function, json[QString("cloudFunction")]);
    m_cloud_function_isSet = !json[QString("cloudFunction")].isNull() && m_cloud_function_isValid;

    m_cloud_run_revision_isValid = ::OpenAPI::fromJsonValue(m_cloud_run_revision, json[QString("cloudRunRevision")]);
    m_cloud_run_revision_isSet = !json[QString("cloudRunRevision")].isNull() && m_cloud_run_revision_isValid;

    m_cloud_sql_instance_isValid = ::OpenAPI::fromJsonValue(m_cloud_sql_instance, json[QString("cloudSqlInstance")]);
    m_cloud_sql_instance_isSet = !json[QString("cloudSqlInstance")].isNull() && m_cloud_sql_instance_isValid;

    m_deliver_isValid = ::OpenAPI::fromJsonValue(m_deliver, json[QString("deliver")]);
    m_deliver_isSet = !json[QString("deliver")].isNull() && m_deliver_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_drop_isValid = ::OpenAPI::fromJsonValue(m_drop, json[QString("drop")]);
    m_drop_isSet = !json[QString("drop")].isNull() && m_drop_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_firewall_isValid = ::OpenAPI::fromJsonValue(m_firewall, json[QString("firewall")]);
    m_firewall_isSet = !json[QString("firewall")].isNull() && m_firewall_isValid;

    m_forward_isValid = ::OpenAPI::fromJsonValue(m_forward, json[QString("forward")]);
    m_forward_isSet = !json[QString("forward")].isNull() && m_forward_isValid;

    m_forwarding_rule_isValid = ::OpenAPI::fromJsonValue(m_forwarding_rule, json[QString("forwardingRule")]);
    m_forwarding_rule_isSet = !json[QString("forwardingRule")].isNull() && m_forwarding_rule_isValid;

    m_gke_master_isValid = ::OpenAPI::fromJsonValue(m_gke_master, json[QString("gkeMaster")]);
    m_gke_master_isSet = !json[QString("gkeMaster")].isNull() && m_gke_master_isValid;

    m_google_service_isValid = ::OpenAPI::fromJsonValue(m_google_service, json[QString("googleService")]);
    m_google_service_isSet = !json[QString("googleService")].isNull() && m_google_service_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_load_balancer_isValid = ::OpenAPI::fromJsonValue(m_load_balancer, json[QString("loadBalancer")]);
    m_load_balancer_isSet = !json[QString("loadBalancer")].isNull() && m_load_balancer_isValid;

    m_load_balancer_backend_info_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_backend_info, json[QString("loadBalancerBackendInfo")]);
    m_load_balancer_backend_info_isSet = !json[QString("loadBalancerBackendInfo")].isNull() && m_load_balancer_backend_info_isValid;

    m_nat_isValid = ::OpenAPI::fromJsonValue(m_nat, json[QString("nat")]);
    m_nat_isSet = !json[QString("nat")].isNull() && m_nat_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_proxy_connection_isValid = ::OpenAPI::fromJsonValue(m_proxy_connection, json[QString("proxyConnection")]);
    m_proxy_connection_isSet = !json[QString("proxyConnection")].isNull() && m_proxy_connection_isValid;

    m_route_isValid = ::OpenAPI::fromJsonValue(m_route, json[QString("route")]);
    m_route_isSet = !json[QString("route")].isNull() && m_route_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_bucket_isValid = ::OpenAPI::fromJsonValue(m_storage_bucket, json[QString("storageBucket")]);
    m_storage_bucket_isSet = !json[QString("storageBucket")].isNull() && m_storage_bucket_isValid;

    m_vpc_connector_isValid = ::OpenAPI::fromJsonValue(m_vpc_connector, json[QString("vpcConnector")]);
    m_vpc_connector_isSet = !json[QString("vpcConnector")].isNull() && m_vpc_connector_isValid;

    m_vpn_gateway_isValid = ::OpenAPI::fromJsonValue(m_vpn_gateway, json[QString("vpnGateway")]);
    m_vpn_gateway_isSet = !json[QString("vpnGateway")].isNull() && m_vpn_gateway_isValid;

    m_vpn_tunnel_isValid = ::OpenAPI::fromJsonValue(m_vpn_tunnel, json[QString("vpnTunnel")]);
    m_vpn_tunnel_isSet = !json[QString("vpnTunnel")].isNull() && m_vpn_tunnel_isValid;
}

QString OAIStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStep::asJsonObject() const {
    QJsonObject obj;
    if (m_abort.isSet()) {
        obj.insert(QString("abort"), ::OpenAPI::toJsonValue(m_abort));
    }
    if (m_app_engine_version.isSet()) {
        obj.insert(QString("appEngineVersion"), ::OpenAPI::toJsonValue(m_app_engine_version));
    }
    if (m_causes_drop_isSet) {
        obj.insert(QString("causesDrop"), ::OpenAPI::toJsonValue(m_causes_drop));
    }
    if (m_cloud_function.isSet()) {
        obj.insert(QString("cloudFunction"), ::OpenAPI::toJsonValue(m_cloud_function));
    }
    if (m_cloud_run_revision.isSet()) {
        obj.insert(QString("cloudRunRevision"), ::OpenAPI::toJsonValue(m_cloud_run_revision));
    }
    if (m_cloud_sql_instance.isSet()) {
        obj.insert(QString("cloudSqlInstance"), ::OpenAPI::toJsonValue(m_cloud_sql_instance));
    }
    if (m_deliver.isSet()) {
        obj.insert(QString("deliver"), ::OpenAPI::toJsonValue(m_deliver));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_drop.isSet()) {
        obj.insert(QString("drop"), ::OpenAPI::toJsonValue(m_drop));
    }
    if (m_endpoint.isSet()) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_firewall.isSet()) {
        obj.insert(QString("firewall"), ::OpenAPI::toJsonValue(m_firewall));
    }
    if (m_forward.isSet()) {
        obj.insert(QString("forward"), ::OpenAPI::toJsonValue(m_forward));
    }
    if (m_forwarding_rule.isSet()) {
        obj.insert(QString("forwardingRule"), ::OpenAPI::toJsonValue(m_forwarding_rule));
    }
    if (m_gke_master.isSet()) {
        obj.insert(QString("gkeMaster"), ::OpenAPI::toJsonValue(m_gke_master));
    }
    if (m_google_service.isSet()) {
        obj.insert(QString("googleService"), ::OpenAPI::toJsonValue(m_google_service));
    }
    if (m_instance.isSet()) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_load_balancer.isSet()) {
        obj.insert(QString("loadBalancer"), ::OpenAPI::toJsonValue(m_load_balancer));
    }
    if (m_load_balancer_backend_info.isSet()) {
        obj.insert(QString("loadBalancerBackendInfo"), ::OpenAPI::toJsonValue(m_load_balancer_backend_info));
    }
    if (m_nat.isSet()) {
        obj.insert(QString("nat"), ::OpenAPI::toJsonValue(m_nat));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_proxy_connection.isSet()) {
        obj.insert(QString("proxyConnection"), ::OpenAPI::toJsonValue(m_proxy_connection));
    }
    if (m_route.isSet()) {
        obj.insert(QString("route"), ::OpenAPI::toJsonValue(m_route));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_bucket.isSet()) {
        obj.insert(QString("storageBucket"), ::OpenAPI::toJsonValue(m_storage_bucket));
    }
    if (m_vpc_connector.isSet()) {
        obj.insert(QString("vpcConnector"), ::OpenAPI::toJsonValue(m_vpc_connector));
    }
    if (m_vpn_gateway.isSet()) {
        obj.insert(QString("vpnGateway"), ::OpenAPI::toJsonValue(m_vpn_gateway));
    }
    if (m_vpn_tunnel.isSet()) {
        obj.insert(QString("vpnTunnel"), ::OpenAPI::toJsonValue(m_vpn_tunnel));
    }
    return obj;
}

OAIAbortInfo OAIStep::getAbort() const {
    return m_abort;
}
void OAIStep::setAbort(const OAIAbortInfo &abort) {
    m_abort = abort;
    m_abort_isSet = true;
}

bool OAIStep::is_abort_Set() const{
    return m_abort_isSet;
}

bool OAIStep::is_abort_Valid() const{
    return m_abort_isValid;
}

OAIAppEngineVersionInfo OAIStep::getAppEngineVersion() const {
    return m_app_engine_version;
}
void OAIStep::setAppEngineVersion(const OAIAppEngineVersionInfo &app_engine_version) {
    m_app_engine_version = app_engine_version;
    m_app_engine_version_isSet = true;
}

bool OAIStep::is_app_engine_version_Set() const{
    return m_app_engine_version_isSet;
}

bool OAIStep::is_app_engine_version_Valid() const{
    return m_app_engine_version_isValid;
}

bool OAIStep::isCausesDrop() const {
    return m_causes_drop;
}
void OAIStep::setCausesDrop(const bool &causes_drop) {
    m_causes_drop = causes_drop;
    m_causes_drop_isSet = true;
}

bool OAIStep::is_causes_drop_Set() const{
    return m_causes_drop_isSet;
}

bool OAIStep::is_causes_drop_Valid() const{
    return m_causes_drop_isValid;
}

OAICloudFunctionInfo OAIStep::getCloudFunction() const {
    return m_cloud_function;
}
void OAIStep::setCloudFunction(const OAICloudFunctionInfo &cloud_function) {
    m_cloud_function = cloud_function;
    m_cloud_function_isSet = true;
}

bool OAIStep::is_cloud_function_Set() const{
    return m_cloud_function_isSet;
}

bool OAIStep::is_cloud_function_Valid() const{
    return m_cloud_function_isValid;
}

OAICloudRunRevisionInfo OAIStep::getCloudRunRevision() const {
    return m_cloud_run_revision;
}
void OAIStep::setCloudRunRevision(const OAICloudRunRevisionInfo &cloud_run_revision) {
    m_cloud_run_revision = cloud_run_revision;
    m_cloud_run_revision_isSet = true;
}

bool OAIStep::is_cloud_run_revision_Set() const{
    return m_cloud_run_revision_isSet;
}

bool OAIStep::is_cloud_run_revision_Valid() const{
    return m_cloud_run_revision_isValid;
}

OAICloudSQLInstanceInfo OAIStep::getCloudSqlInstance() const {
    return m_cloud_sql_instance;
}
void OAIStep::setCloudSqlInstance(const OAICloudSQLInstanceInfo &cloud_sql_instance) {
    m_cloud_sql_instance = cloud_sql_instance;
    m_cloud_sql_instance_isSet = true;
}

bool OAIStep::is_cloud_sql_instance_Set() const{
    return m_cloud_sql_instance_isSet;
}

bool OAIStep::is_cloud_sql_instance_Valid() const{
    return m_cloud_sql_instance_isValid;
}

OAIDeliverInfo OAIStep::getDeliver() const {
    return m_deliver;
}
void OAIStep::setDeliver(const OAIDeliverInfo &deliver) {
    m_deliver = deliver;
    m_deliver_isSet = true;
}

bool OAIStep::is_deliver_Set() const{
    return m_deliver_isSet;
}

bool OAIStep::is_deliver_Valid() const{
    return m_deliver_isValid;
}

QString OAIStep::getDescription() const {
    return m_description;
}
void OAIStep::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStep::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStep::is_description_Valid() const{
    return m_description_isValid;
}

OAIDropInfo OAIStep::getDrop() const {
    return m_drop;
}
void OAIStep::setDrop(const OAIDropInfo &drop) {
    m_drop = drop;
    m_drop_isSet = true;
}

bool OAIStep::is_drop_Set() const{
    return m_drop_isSet;
}

bool OAIStep::is_drop_Valid() const{
    return m_drop_isValid;
}

OAIEndpointInfo OAIStep::getEndpoint() const {
    return m_endpoint;
}
void OAIStep::setEndpoint(const OAIEndpointInfo &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIStep::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIStep::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

OAIFirewallInfo OAIStep::getFirewall() const {
    return m_firewall;
}
void OAIStep::setFirewall(const OAIFirewallInfo &firewall) {
    m_firewall = firewall;
    m_firewall_isSet = true;
}

bool OAIStep::is_firewall_Set() const{
    return m_firewall_isSet;
}

bool OAIStep::is_firewall_Valid() const{
    return m_firewall_isValid;
}

OAIForwardInfo OAIStep::getForward() const {
    return m_forward;
}
void OAIStep::setForward(const OAIForwardInfo &forward) {
    m_forward = forward;
    m_forward_isSet = true;
}

bool OAIStep::is_forward_Set() const{
    return m_forward_isSet;
}

bool OAIStep::is_forward_Valid() const{
    return m_forward_isValid;
}

OAIForwardingRuleInfo OAIStep::getForwardingRule() const {
    return m_forwarding_rule;
}
void OAIStep::setForwardingRule(const OAIForwardingRuleInfo &forwarding_rule) {
    m_forwarding_rule = forwarding_rule;
    m_forwarding_rule_isSet = true;
}

bool OAIStep::is_forwarding_rule_Set() const{
    return m_forwarding_rule_isSet;
}

bool OAIStep::is_forwarding_rule_Valid() const{
    return m_forwarding_rule_isValid;
}

OAIGKEMasterInfo OAIStep::getGkeMaster() const {
    return m_gke_master;
}
void OAIStep::setGkeMaster(const OAIGKEMasterInfo &gke_master) {
    m_gke_master = gke_master;
    m_gke_master_isSet = true;
}

bool OAIStep::is_gke_master_Set() const{
    return m_gke_master_isSet;
}

bool OAIStep::is_gke_master_Valid() const{
    return m_gke_master_isValid;
}

OAIGoogleServiceInfo OAIStep::getGoogleService() const {
    return m_google_service;
}
void OAIStep::setGoogleService(const OAIGoogleServiceInfo &google_service) {
    m_google_service = google_service;
    m_google_service_isSet = true;
}

bool OAIStep::is_google_service_Set() const{
    return m_google_service_isSet;
}

bool OAIStep::is_google_service_Valid() const{
    return m_google_service_isValid;
}

OAIInstanceInfo OAIStep::getInstance() const {
    return m_instance;
}
void OAIStep::setInstance(const OAIInstanceInfo &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIStep::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIStep::is_instance_Valid() const{
    return m_instance_isValid;
}

OAILoadBalancerInfo OAIStep::getLoadBalancer() const {
    return m_load_balancer;
}
void OAIStep::setLoadBalancer(const OAILoadBalancerInfo &load_balancer) {
    m_load_balancer = load_balancer;
    m_load_balancer_isSet = true;
}

bool OAIStep::is_load_balancer_Set() const{
    return m_load_balancer_isSet;
}

bool OAIStep::is_load_balancer_Valid() const{
    return m_load_balancer_isValid;
}

OAILoadBalancerBackendInfo OAIStep::getLoadBalancerBackendInfo() const {
    return m_load_balancer_backend_info;
}
void OAIStep::setLoadBalancerBackendInfo(const OAILoadBalancerBackendInfo &load_balancer_backend_info) {
    m_load_balancer_backend_info = load_balancer_backend_info;
    m_load_balancer_backend_info_isSet = true;
}

bool OAIStep::is_load_balancer_backend_info_Set() const{
    return m_load_balancer_backend_info_isSet;
}

bool OAIStep::is_load_balancer_backend_info_Valid() const{
    return m_load_balancer_backend_info_isValid;
}

OAINatInfo OAIStep::getNat() const {
    return m_nat;
}
void OAIStep::setNat(const OAINatInfo &nat) {
    m_nat = nat;
    m_nat_isSet = true;
}

bool OAIStep::is_nat_Set() const{
    return m_nat_isSet;
}

bool OAIStep::is_nat_Valid() const{
    return m_nat_isValid;
}

OAINetworkInfo OAIStep::getNetwork() const {
    return m_network;
}
void OAIStep::setNetwork(const OAINetworkInfo &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIStep::is_network_Set() const{
    return m_network_isSet;
}

bool OAIStep::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIStep::getProjectId() const {
    return m_project_id;
}
void OAIStep::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIStep::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIStep::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAIProxyConnectionInfo OAIStep::getProxyConnection() const {
    return m_proxy_connection;
}
void OAIStep::setProxyConnection(const OAIProxyConnectionInfo &proxy_connection) {
    m_proxy_connection = proxy_connection;
    m_proxy_connection_isSet = true;
}

bool OAIStep::is_proxy_connection_Set() const{
    return m_proxy_connection_isSet;
}

bool OAIStep::is_proxy_connection_Valid() const{
    return m_proxy_connection_isValid;
}

OAIRouteInfo OAIStep::getRoute() const {
    return m_route;
}
void OAIStep::setRoute(const OAIRouteInfo &route) {
    m_route = route;
    m_route_isSet = true;
}

bool OAIStep::is_route_Set() const{
    return m_route_isSet;
}

bool OAIStep::is_route_Valid() const{
    return m_route_isValid;
}

QString OAIStep::getState() const {
    return m_state;
}
void OAIStep::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStep::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStep::is_state_Valid() const{
    return m_state_isValid;
}

OAIStorageBucketInfo OAIStep::getStorageBucket() const {
    return m_storage_bucket;
}
void OAIStep::setStorageBucket(const OAIStorageBucketInfo &storage_bucket) {
    m_storage_bucket = storage_bucket;
    m_storage_bucket_isSet = true;
}

bool OAIStep::is_storage_bucket_Set() const{
    return m_storage_bucket_isSet;
}

bool OAIStep::is_storage_bucket_Valid() const{
    return m_storage_bucket_isValid;
}

OAIVpcConnectorInfo OAIStep::getVpcConnector() const {
    return m_vpc_connector;
}
void OAIStep::setVpcConnector(const OAIVpcConnectorInfo &vpc_connector) {
    m_vpc_connector = vpc_connector;
    m_vpc_connector_isSet = true;
}

bool OAIStep::is_vpc_connector_Set() const{
    return m_vpc_connector_isSet;
}

bool OAIStep::is_vpc_connector_Valid() const{
    return m_vpc_connector_isValid;
}

OAIVpnGatewayInfo OAIStep::getVpnGateway() const {
    return m_vpn_gateway;
}
void OAIStep::setVpnGateway(const OAIVpnGatewayInfo &vpn_gateway) {
    m_vpn_gateway = vpn_gateway;
    m_vpn_gateway_isSet = true;
}

bool OAIStep::is_vpn_gateway_Set() const{
    return m_vpn_gateway_isSet;
}

bool OAIStep::is_vpn_gateway_Valid() const{
    return m_vpn_gateway_isValid;
}

OAIVpnTunnelInfo OAIStep::getVpnTunnel() const {
    return m_vpn_tunnel;
}
void OAIStep::setVpnTunnel(const OAIVpnTunnelInfo &vpn_tunnel) {
    m_vpn_tunnel = vpn_tunnel;
    m_vpn_tunnel_isSet = true;
}

bool OAIStep::is_vpn_tunnel_Set() const{
    return m_vpn_tunnel_isSet;
}

bool OAIStep::is_vpn_tunnel_Valid() const{
    return m_vpn_tunnel_isValid;
}

bool OAIStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_engine_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_causes_drop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_run_revision.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_sql_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deliver.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewall.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_master.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_backend_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_connection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_route.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_bucket.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_connector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_gateway.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_tunnel.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
