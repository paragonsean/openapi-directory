/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINatInfo.h
 *
 * For display only. Metadata associated with NAT.
 */

#ifndef OAINatInfo_H
#define OAINatInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINatInfo : public OAIObject {
public:
    OAINatInfo();
    OAINatInfo(QString json);
    ~OAINatInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNatGatewayName() const;
    void setNatGatewayName(const QString &nat_gateway_name);
    bool is_nat_gateway_name_Set() const;
    bool is_nat_gateway_name_Valid() const;

    QString getNetworkUri() const;
    void setNetworkUri(const QString &network_uri);
    bool is_network_uri_Set() const;
    bool is_network_uri_Valid() const;

    QString getNewDestinationIp() const;
    void setNewDestinationIp(const QString &new_destination_ip);
    bool is_new_destination_ip_Set() const;
    bool is_new_destination_ip_Valid() const;

    qint32 getNewDestinationPort() const;
    void setNewDestinationPort(const qint32 &new_destination_port);
    bool is_new_destination_port_Set() const;
    bool is_new_destination_port_Valid() const;

    QString getNewSourceIp() const;
    void setNewSourceIp(const QString &new_source_ip);
    bool is_new_source_ip_Set() const;
    bool is_new_source_ip_Valid() const;

    qint32 getNewSourcePort() const;
    void setNewSourcePort(const qint32 &new_source_port);
    bool is_new_source_port_Set() const;
    bool is_new_source_port_Valid() const;

    QString getOldDestinationIp() const;
    void setOldDestinationIp(const QString &old_destination_ip);
    bool is_old_destination_ip_Set() const;
    bool is_old_destination_ip_Valid() const;

    qint32 getOldDestinationPort() const;
    void setOldDestinationPort(const qint32 &old_destination_port);
    bool is_old_destination_port_Set() const;
    bool is_old_destination_port_Valid() const;

    QString getOldSourceIp() const;
    void setOldSourceIp(const QString &old_source_ip);
    bool is_old_source_ip_Set() const;
    bool is_old_source_ip_Valid() const;

    qint32 getOldSourcePort() const;
    void setOldSourcePort(const qint32 &old_source_port);
    bool is_old_source_port_Set() const;
    bool is_old_source_port_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getRouterUri() const;
    void setRouterUri(const QString &router_uri);
    bool is_router_uri_Set() const;
    bool is_router_uri_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_nat_gateway_name;
    bool m_nat_gateway_name_isSet;
    bool m_nat_gateway_name_isValid;

    QString m_network_uri;
    bool m_network_uri_isSet;
    bool m_network_uri_isValid;

    QString m_new_destination_ip;
    bool m_new_destination_ip_isSet;
    bool m_new_destination_ip_isValid;

    qint32 m_new_destination_port;
    bool m_new_destination_port_isSet;
    bool m_new_destination_port_isValid;

    QString m_new_source_ip;
    bool m_new_source_ip_isSet;
    bool m_new_source_ip_isValid;

    qint32 m_new_source_port;
    bool m_new_source_port_isSet;
    bool m_new_source_port_isValid;

    QString m_old_destination_ip;
    bool m_old_destination_ip_isSet;
    bool m_old_destination_ip_isValid;

    qint32 m_old_destination_port;
    bool m_old_destination_port_isSet;
    bool m_old_destination_port_isValid;

    QString m_old_source_ip;
    bool m_old_source_ip_isSet;
    bool m_old_source_ip_isValid;

    qint32 m_old_source_port;
    bool m_old_source_port_isSet;
    bool m_old_source_port_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_router_uri;
    bool m_router_uri_isSet;
    bool m_router_uri_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINatInfo)

#endif // OAINatInfo_H
