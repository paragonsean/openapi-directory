/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDropInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDropInfo::OAIDropInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDropInfo::OAIDropInfo() {
    this->initializeModel();
}

OAIDropInfo::~OAIDropInfo() {}

void OAIDropInfo::initializeModel() {

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_destination_ip_isSet = false;
    m_destination_ip_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;

    m_source_ip_isSet = false;
    m_source_ip_isValid = false;
}

void OAIDropInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDropInfo::fromJsonObject(QJsonObject json) {

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_destination_ip_isValid = ::OpenAPI::fromJsonValue(m_destination_ip, json[QString("destinationIp")]);
    m_destination_ip_isSet = !json[QString("destinationIp")].isNull() && m_destination_ip_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;

    m_source_ip_isValid = ::OpenAPI::fromJsonValue(m_source_ip, json[QString("sourceIp")]);
    m_source_ip_isSet = !json[QString("sourceIp")].isNull() && m_source_ip_isValid;
}

QString OAIDropInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDropInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_cause_isSet) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_destination_ip_isSet) {
        obj.insert(QString("destinationIp"), ::OpenAPI::toJsonValue(m_destination_ip));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_resource_uri_isSet) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    if (m_source_ip_isSet) {
        obj.insert(QString("sourceIp"), ::OpenAPI::toJsonValue(m_source_ip));
    }
    return obj;
}

QString OAIDropInfo::getCause() const {
    return m_cause;
}
void OAIDropInfo::setCause(const QString &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAIDropInfo::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIDropInfo::is_cause_Valid() const{
    return m_cause_isValid;
}

QString OAIDropInfo::getDestinationIp() const {
    return m_destination_ip;
}
void OAIDropInfo::setDestinationIp(const QString &destination_ip) {
    m_destination_ip = destination_ip;
    m_destination_ip_isSet = true;
}

bool OAIDropInfo::is_destination_ip_Set() const{
    return m_destination_ip_isSet;
}

bool OAIDropInfo::is_destination_ip_Valid() const{
    return m_destination_ip_isValid;
}

QString OAIDropInfo::getRegion() const {
    return m_region;
}
void OAIDropInfo::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIDropInfo::is_region_Set() const{
    return m_region_isSet;
}

bool OAIDropInfo::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIDropInfo::getResourceUri() const {
    return m_resource_uri;
}
void OAIDropInfo::setResourceUri(const QString &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAIDropInfo::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAIDropInfo::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

QString OAIDropInfo::getSourceIp() const {
    return m_source_ip;
}
void OAIDropInfo::setSourceIp(const QString &source_ip) {
    m_source_ip = source_ip;
    m_source_ip_isSet = true;
}

bool OAIDropInfo::is_source_ip_Set() const{
    return m_source_ip_isSet;
}

bool OAIDropInfo::is_source_ip_Valid() const{
    return m_source_ip_isValid;
}

bool OAIDropInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDropInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
