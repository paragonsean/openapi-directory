/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRouteInfo.h
 *
 * For display only. Metadata associated with a Compute Engine route.
 */

#ifndef OAIRouteInfo_H
#define OAIRouteInfo_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRouteInfo : public OAIObject {
public:
    OAIRouteInfo();
    OAIRouteInfo(QString json);
    ~OAIRouteInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDestIpRange() const;
    void setDestIpRange(const QString &dest_ip_range);
    bool is_dest_ip_range_Set() const;
    bool is_dest_ip_range_Valid() const;

    QList<QString> getDestPortRanges() const;
    void setDestPortRanges(const QList<QString> &dest_port_ranges);
    bool is_dest_port_ranges_Set() const;
    bool is_dest_port_ranges_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QList<QString> getInstanceTags() const;
    void setInstanceTags(const QList<QString> &instance_tags);
    bool is_instance_tags_Set() const;
    bool is_instance_tags_Valid() const;

    QString getNccHubUri() const;
    void setNccHubUri(const QString &ncc_hub_uri);
    bool is_ncc_hub_uri_Set() const;
    bool is_ncc_hub_uri_Valid() const;

    QString getNccSpokeUri() const;
    void setNccSpokeUri(const QString &ncc_spoke_uri);
    bool is_ncc_spoke_uri_Set() const;
    bool is_ncc_spoke_uri_Valid() const;

    QString getNetworkUri() const;
    void setNetworkUri(const QString &network_uri);
    bool is_network_uri_Set() const;
    bool is_network_uri_Valid() const;

    QString getNextHop() const;
    void setNextHop(const QString &next_hop);
    bool is_next_hop_Set() const;
    bool is_next_hop_Valid() const;

    QString getNextHopType() const;
    void setNextHopType(const QString &next_hop_type);
    bool is_next_hop_type_Set() const;
    bool is_next_hop_type_Valid() const;

    qint32 getPriority() const;
    void setPriority(const qint32 &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    QList<QString> getProtocols() const;
    void setProtocols(const QList<QString> &protocols);
    bool is_protocols_Set() const;
    bool is_protocols_Valid() const;

    QString getRouteScope() const;
    void setRouteScope(const QString &route_scope);
    bool is_route_scope_Set() const;
    bool is_route_scope_Valid() const;

    QString getRouteType() const;
    void setRouteType(const QString &route_type);
    bool is_route_type_Set() const;
    bool is_route_type_Valid() const;

    QString getSrcIpRange() const;
    void setSrcIpRange(const QString &src_ip_range);
    bool is_src_ip_range_Set() const;
    bool is_src_ip_range_Valid() const;

    QList<QString> getSrcPortRanges() const;
    void setSrcPortRanges(const QList<QString> &src_port_ranges);
    bool is_src_port_ranges_Set() const;
    bool is_src_port_ranges_Valid() const;

    QString getUri() const;
    void setUri(const QString &uri);
    bool is_uri_Set() const;
    bool is_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dest_ip_range;
    bool m_dest_ip_range_isSet;
    bool m_dest_ip_range_isValid;

    QList<QString> m_dest_port_ranges;
    bool m_dest_port_ranges_isSet;
    bool m_dest_port_ranges_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QList<QString> m_instance_tags;
    bool m_instance_tags_isSet;
    bool m_instance_tags_isValid;

    QString m_ncc_hub_uri;
    bool m_ncc_hub_uri_isSet;
    bool m_ncc_hub_uri_isValid;

    QString m_ncc_spoke_uri;
    bool m_ncc_spoke_uri_isSet;
    bool m_ncc_spoke_uri_isValid;

    QString m_network_uri;
    bool m_network_uri_isSet;
    bool m_network_uri_isValid;

    QString m_next_hop;
    bool m_next_hop_isSet;
    bool m_next_hop_isValid;

    QString m_next_hop_type;
    bool m_next_hop_type_isSet;
    bool m_next_hop_type_isValid;

    qint32 m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    QList<QString> m_protocols;
    bool m_protocols_isSet;
    bool m_protocols_isValid;

    QString m_route_scope;
    bool m_route_scope_isSet;
    bool m_route_scope_isValid;

    QString m_route_type;
    bool m_route_type_isSet;
    bool m_route_type_isValid;

    QString m_src_ip_range;
    bool m_src_ip_range_isSet;
    bool m_src_ip_range_isValid;

    QList<QString> m_src_port_ranges;
    bool m_src_port_ranges_isSet;
    bool m_src_port_ranges_isValid;

    QString m_uri;
    bool m_uri_isSet;
    bool m_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRouteInfo)

#endif // OAIRouteInfo_H
