/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointInfo::OAIEndpointInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointInfo::OAIEndpointInfo() {
    this->initializeModel();
}

OAIEndpointInfo::~OAIEndpointInfo() {}

void OAIEndpointInfo::initializeModel() {

    m_destination_ip_isSet = false;
    m_destination_ip_isValid = false;

    m_destination_network_uri_isSet = false;
    m_destination_network_uri_isValid = false;

    m_destination_port_isSet = false;
    m_destination_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_source_agent_uri_isSet = false;
    m_source_agent_uri_isValid = false;

    m_source_ip_isSet = false;
    m_source_ip_isValid = false;

    m_source_network_uri_isSet = false;
    m_source_network_uri_isValid = false;

    m_source_port_isSet = false;
    m_source_port_isValid = false;
}

void OAIEndpointInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointInfo::fromJsonObject(QJsonObject json) {

    m_destination_ip_isValid = ::OpenAPI::fromJsonValue(m_destination_ip, json[QString("destinationIp")]);
    m_destination_ip_isSet = !json[QString("destinationIp")].isNull() && m_destination_ip_isValid;

    m_destination_network_uri_isValid = ::OpenAPI::fromJsonValue(m_destination_network_uri, json[QString("destinationNetworkUri")]);
    m_destination_network_uri_isSet = !json[QString("destinationNetworkUri")].isNull() && m_destination_network_uri_isValid;

    m_destination_port_isValid = ::OpenAPI::fromJsonValue(m_destination_port, json[QString("destinationPort")]);
    m_destination_port_isSet = !json[QString("destinationPort")].isNull() && m_destination_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_source_agent_uri_isValid = ::OpenAPI::fromJsonValue(m_source_agent_uri, json[QString("sourceAgentUri")]);
    m_source_agent_uri_isSet = !json[QString("sourceAgentUri")].isNull() && m_source_agent_uri_isValid;

    m_source_ip_isValid = ::OpenAPI::fromJsonValue(m_source_ip, json[QString("sourceIp")]);
    m_source_ip_isSet = !json[QString("sourceIp")].isNull() && m_source_ip_isValid;

    m_source_network_uri_isValid = ::OpenAPI::fromJsonValue(m_source_network_uri, json[QString("sourceNetworkUri")]);
    m_source_network_uri_isSet = !json[QString("sourceNetworkUri")].isNull() && m_source_network_uri_isValid;

    m_source_port_isValid = ::OpenAPI::fromJsonValue(m_source_port, json[QString("sourcePort")]);
    m_source_port_isSet = !json[QString("sourcePort")].isNull() && m_source_port_isValid;
}

QString OAIEndpointInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_ip_isSet) {
        obj.insert(QString("destinationIp"), ::OpenAPI::toJsonValue(m_destination_ip));
    }
    if (m_destination_network_uri_isSet) {
        obj.insert(QString("destinationNetworkUri"), ::OpenAPI::toJsonValue(m_destination_network_uri));
    }
    if (m_destination_port_isSet) {
        obj.insert(QString("destinationPort"), ::OpenAPI::toJsonValue(m_destination_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_source_agent_uri_isSet) {
        obj.insert(QString("sourceAgentUri"), ::OpenAPI::toJsonValue(m_source_agent_uri));
    }
    if (m_source_ip_isSet) {
        obj.insert(QString("sourceIp"), ::OpenAPI::toJsonValue(m_source_ip));
    }
    if (m_source_network_uri_isSet) {
        obj.insert(QString("sourceNetworkUri"), ::OpenAPI::toJsonValue(m_source_network_uri));
    }
    if (m_source_port_isSet) {
        obj.insert(QString("sourcePort"), ::OpenAPI::toJsonValue(m_source_port));
    }
    return obj;
}

QString OAIEndpointInfo::getDestinationIp() const {
    return m_destination_ip;
}
void OAIEndpointInfo::setDestinationIp(const QString &destination_ip) {
    m_destination_ip = destination_ip;
    m_destination_ip_isSet = true;
}

bool OAIEndpointInfo::is_destination_ip_Set() const{
    return m_destination_ip_isSet;
}

bool OAIEndpointInfo::is_destination_ip_Valid() const{
    return m_destination_ip_isValid;
}

QString OAIEndpointInfo::getDestinationNetworkUri() const {
    return m_destination_network_uri;
}
void OAIEndpointInfo::setDestinationNetworkUri(const QString &destination_network_uri) {
    m_destination_network_uri = destination_network_uri;
    m_destination_network_uri_isSet = true;
}

bool OAIEndpointInfo::is_destination_network_uri_Set() const{
    return m_destination_network_uri_isSet;
}

bool OAIEndpointInfo::is_destination_network_uri_Valid() const{
    return m_destination_network_uri_isValid;
}

qint32 OAIEndpointInfo::getDestinationPort() const {
    return m_destination_port;
}
void OAIEndpointInfo::setDestinationPort(const qint32 &destination_port) {
    m_destination_port = destination_port;
    m_destination_port_isSet = true;
}

bool OAIEndpointInfo::is_destination_port_Set() const{
    return m_destination_port_isSet;
}

bool OAIEndpointInfo::is_destination_port_Valid() const{
    return m_destination_port_isValid;
}

QString OAIEndpointInfo::getProtocol() const {
    return m_protocol;
}
void OAIEndpointInfo::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIEndpointInfo::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIEndpointInfo::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIEndpointInfo::getSourceAgentUri() const {
    return m_source_agent_uri;
}
void OAIEndpointInfo::setSourceAgentUri(const QString &source_agent_uri) {
    m_source_agent_uri = source_agent_uri;
    m_source_agent_uri_isSet = true;
}

bool OAIEndpointInfo::is_source_agent_uri_Set() const{
    return m_source_agent_uri_isSet;
}

bool OAIEndpointInfo::is_source_agent_uri_Valid() const{
    return m_source_agent_uri_isValid;
}

QString OAIEndpointInfo::getSourceIp() const {
    return m_source_ip;
}
void OAIEndpointInfo::setSourceIp(const QString &source_ip) {
    m_source_ip = source_ip;
    m_source_ip_isSet = true;
}

bool OAIEndpointInfo::is_source_ip_Set() const{
    return m_source_ip_isSet;
}

bool OAIEndpointInfo::is_source_ip_Valid() const{
    return m_source_ip_isValid;
}

QString OAIEndpointInfo::getSourceNetworkUri() const {
    return m_source_network_uri;
}
void OAIEndpointInfo::setSourceNetworkUri(const QString &source_network_uri) {
    m_source_network_uri = source_network_uri;
    m_source_network_uri_isSet = true;
}

bool OAIEndpointInfo::is_source_network_uri_Set() const{
    return m_source_network_uri_isSet;
}

bool OAIEndpointInfo::is_source_network_uri_Valid() const{
    return m_source_network_uri_isValid;
}

qint32 OAIEndpointInfo::getSourcePort() const {
    return m_source_port;
}
void OAIEndpointInfo::setSourcePort(const qint32 &source_port) {
    m_source_port = source_port;
    m_source_port_isSet = true;
}

bool OAIEndpointInfo::is_source_port_Set() const{
    return m_source_port_isSet;
}

bool OAIEndpointInfo::is_source_port_Valid() const{
    return m_source_port_isValid;
}

bool OAIEndpointInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_network_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_agent_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_network_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
