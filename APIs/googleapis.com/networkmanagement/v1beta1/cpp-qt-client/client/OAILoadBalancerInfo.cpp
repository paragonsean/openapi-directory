/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadBalancerInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadBalancerInfo::OAILoadBalancerInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadBalancerInfo::OAILoadBalancerInfo() {
    this->initializeModel();
}

OAILoadBalancerInfo::~OAILoadBalancerInfo() {}

void OAILoadBalancerInfo::initializeModel() {

    m_backend_type_isSet = false;
    m_backend_type_isValid = false;

    m_backend_uri_isSet = false;
    m_backend_uri_isValid = false;

    m_backends_isSet = false;
    m_backends_isValid = false;

    m_health_check_uri_isSet = false;
    m_health_check_uri_isValid = false;

    m_load_balancer_type_isSet = false;
    m_load_balancer_type_isValid = false;
}

void OAILoadBalancerInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadBalancerInfo::fromJsonObject(QJsonObject json) {

    m_backend_type_isValid = ::OpenAPI::fromJsonValue(m_backend_type, json[QString("backendType")]);
    m_backend_type_isSet = !json[QString("backendType")].isNull() && m_backend_type_isValid;

    m_backend_uri_isValid = ::OpenAPI::fromJsonValue(m_backend_uri, json[QString("backendUri")]);
    m_backend_uri_isSet = !json[QString("backendUri")].isNull() && m_backend_uri_isValid;

    m_backends_isValid = ::OpenAPI::fromJsonValue(m_backends, json[QString("backends")]);
    m_backends_isSet = !json[QString("backends")].isNull() && m_backends_isValid;

    m_health_check_uri_isValid = ::OpenAPI::fromJsonValue(m_health_check_uri, json[QString("healthCheckUri")]);
    m_health_check_uri_isSet = !json[QString("healthCheckUri")].isNull() && m_health_check_uri_isValid;

    m_load_balancer_type_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_type, json[QString("loadBalancerType")]);
    m_load_balancer_type_isSet = !json[QString("loadBalancerType")].isNull() && m_load_balancer_type_isValid;
}

QString OAILoadBalancerInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadBalancerInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_type_isSet) {
        obj.insert(QString("backendType"), ::OpenAPI::toJsonValue(m_backend_type));
    }
    if (m_backend_uri_isSet) {
        obj.insert(QString("backendUri"), ::OpenAPI::toJsonValue(m_backend_uri));
    }
    if (m_backends.size() > 0) {
        obj.insert(QString("backends"), ::OpenAPI::toJsonValue(m_backends));
    }
    if (m_health_check_uri_isSet) {
        obj.insert(QString("healthCheckUri"), ::OpenAPI::toJsonValue(m_health_check_uri));
    }
    if (m_load_balancer_type_isSet) {
        obj.insert(QString("loadBalancerType"), ::OpenAPI::toJsonValue(m_load_balancer_type));
    }
    return obj;
}

QString OAILoadBalancerInfo::getBackendType() const {
    return m_backend_type;
}
void OAILoadBalancerInfo::setBackendType(const QString &backend_type) {
    m_backend_type = backend_type;
    m_backend_type_isSet = true;
}

bool OAILoadBalancerInfo::is_backend_type_Set() const{
    return m_backend_type_isSet;
}

bool OAILoadBalancerInfo::is_backend_type_Valid() const{
    return m_backend_type_isValid;
}

QString OAILoadBalancerInfo::getBackendUri() const {
    return m_backend_uri;
}
void OAILoadBalancerInfo::setBackendUri(const QString &backend_uri) {
    m_backend_uri = backend_uri;
    m_backend_uri_isSet = true;
}

bool OAILoadBalancerInfo::is_backend_uri_Set() const{
    return m_backend_uri_isSet;
}

bool OAILoadBalancerInfo::is_backend_uri_Valid() const{
    return m_backend_uri_isValid;
}

QList<OAILoadBalancerBackend> OAILoadBalancerInfo::getBackends() const {
    return m_backends;
}
void OAILoadBalancerInfo::setBackends(const QList<OAILoadBalancerBackend> &backends) {
    m_backends = backends;
    m_backends_isSet = true;
}

bool OAILoadBalancerInfo::is_backends_Set() const{
    return m_backends_isSet;
}

bool OAILoadBalancerInfo::is_backends_Valid() const{
    return m_backends_isValid;
}

QString OAILoadBalancerInfo::getHealthCheckUri() const {
    return m_health_check_uri;
}
void OAILoadBalancerInfo::setHealthCheckUri(const QString &health_check_uri) {
    m_health_check_uri = health_check_uri;
    m_health_check_uri_isSet = true;
}

bool OAILoadBalancerInfo::is_health_check_uri_Set() const{
    return m_health_check_uri_isSet;
}

bool OAILoadBalancerInfo::is_health_check_uri_Valid() const{
    return m_health_check_uri_isValid;
}

QString OAILoadBalancerInfo::getLoadBalancerType() const {
    return m_load_balancer_type;
}
void OAILoadBalancerInfo::setLoadBalancerType(const QString &load_balancer_type) {
    m_load_balancer_type = load_balancer_type;
    m_load_balancer_type_isSet = true;
}

bool OAILoadBalancerInfo::is_load_balancer_type_Set() const{
    return m_load_balancer_type_isSet;
}

bool OAILoadBalancerInfo::is_load_balancer_type_Valid() const{
    return m_load_balancer_type_isValid;
}

bool OAILoadBalancerInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backends.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadBalancerInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
