/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadBalancerBackend.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadBalancerBackend::OAILoadBalancerBackend(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadBalancerBackend::OAILoadBalancerBackend() {
    this->initializeModel();
}

OAILoadBalancerBackend::~OAILoadBalancerBackend() {}

void OAILoadBalancerBackend::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_health_check_allowing_firewall_rules_isSet = false;
    m_health_check_allowing_firewall_rules_isValid = false;

    m_health_check_blocking_firewall_rules_isSet = false;
    m_health_check_blocking_firewall_rules_isValid = false;

    m_health_check_firewall_state_isSet = false;
    m_health_check_firewall_state_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAILoadBalancerBackend::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadBalancerBackend::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_health_check_allowing_firewall_rules_isValid = ::OpenAPI::fromJsonValue(m_health_check_allowing_firewall_rules, json[QString("healthCheckAllowingFirewallRules")]);
    m_health_check_allowing_firewall_rules_isSet = !json[QString("healthCheckAllowingFirewallRules")].isNull() && m_health_check_allowing_firewall_rules_isValid;

    m_health_check_blocking_firewall_rules_isValid = ::OpenAPI::fromJsonValue(m_health_check_blocking_firewall_rules, json[QString("healthCheckBlockingFirewallRules")]);
    m_health_check_blocking_firewall_rules_isSet = !json[QString("healthCheckBlockingFirewallRules")].isNull() && m_health_check_blocking_firewall_rules_isValid;

    m_health_check_firewall_state_isValid = ::OpenAPI::fromJsonValue(m_health_check_firewall_state, json[QString("healthCheckFirewallState")]);
    m_health_check_firewall_state_isSet = !json[QString("healthCheckFirewallState")].isNull() && m_health_check_firewall_state_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAILoadBalancerBackend::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadBalancerBackend::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_health_check_allowing_firewall_rules.size() > 0) {
        obj.insert(QString("healthCheckAllowingFirewallRules"), ::OpenAPI::toJsonValue(m_health_check_allowing_firewall_rules));
    }
    if (m_health_check_blocking_firewall_rules.size() > 0) {
        obj.insert(QString("healthCheckBlockingFirewallRules"), ::OpenAPI::toJsonValue(m_health_check_blocking_firewall_rules));
    }
    if (m_health_check_firewall_state_isSet) {
        obj.insert(QString("healthCheckFirewallState"), ::OpenAPI::toJsonValue(m_health_check_firewall_state));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAILoadBalancerBackend::getDisplayName() const {
    return m_display_name;
}
void OAILoadBalancerBackend::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAILoadBalancerBackend::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAILoadBalancerBackend::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAILoadBalancerBackend::getHealthCheckAllowingFirewallRules() const {
    return m_health_check_allowing_firewall_rules;
}
void OAILoadBalancerBackend::setHealthCheckAllowingFirewallRules(const QList<QString> &health_check_allowing_firewall_rules) {
    m_health_check_allowing_firewall_rules = health_check_allowing_firewall_rules;
    m_health_check_allowing_firewall_rules_isSet = true;
}

bool OAILoadBalancerBackend::is_health_check_allowing_firewall_rules_Set() const{
    return m_health_check_allowing_firewall_rules_isSet;
}

bool OAILoadBalancerBackend::is_health_check_allowing_firewall_rules_Valid() const{
    return m_health_check_allowing_firewall_rules_isValid;
}

QList<QString> OAILoadBalancerBackend::getHealthCheckBlockingFirewallRules() const {
    return m_health_check_blocking_firewall_rules;
}
void OAILoadBalancerBackend::setHealthCheckBlockingFirewallRules(const QList<QString> &health_check_blocking_firewall_rules) {
    m_health_check_blocking_firewall_rules = health_check_blocking_firewall_rules;
    m_health_check_blocking_firewall_rules_isSet = true;
}

bool OAILoadBalancerBackend::is_health_check_blocking_firewall_rules_Set() const{
    return m_health_check_blocking_firewall_rules_isSet;
}

bool OAILoadBalancerBackend::is_health_check_blocking_firewall_rules_Valid() const{
    return m_health_check_blocking_firewall_rules_isValid;
}

QString OAILoadBalancerBackend::getHealthCheckFirewallState() const {
    return m_health_check_firewall_state;
}
void OAILoadBalancerBackend::setHealthCheckFirewallState(const QString &health_check_firewall_state) {
    m_health_check_firewall_state = health_check_firewall_state;
    m_health_check_firewall_state_isSet = true;
}

bool OAILoadBalancerBackend::is_health_check_firewall_state_Set() const{
    return m_health_check_firewall_state_isSet;
}

bool OAILoadBalancerBackend::is_health_check_firewall_state_Valid() const{
    return m_health_check_firewall_state_isValid;
}

QString OAILoadBalancerBackend::getUri() const {
    return m_uri;
}
void OAILoadBalancerBackend::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAILoadBalancerBackend::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAILoadBalancerBackend::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAILoadBalancerBackend::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_allowing_firewall_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_blocking_firewall_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_firewall_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadBalancerBackend::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
