/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrace::OAITrace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrace::OAITrace() {
    this->initializeModel();
}

OAITrace::~OAITrace() {}

void OAITrace::initializeModel() {

    m_endpoint_info_isSet = false;
    m_endpoint_info_isValid = false;

    m_forward_trace_id_isSet = false;
    m_forward_trace_id_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;
}

void OAITrace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrace::fromJsonObject(QJsonObject json) {

    m_endpoint_info_isValid = ::OpenAPI::fromJsonValue(m_endpoint_info, json[QString("endpointInfo")]);
    m_endpoint_info_isSet = !json[QString("endpointInfo")].isNull() && m_endpoint_info_isValid;

    m_forward_trace_id_isValid = ::OpenAPI::fromJsonValue(m_forward_trace_id, json[QString("forwardTraceId")]);
    m_forward_trace_id_isSet = !json[QString("forwardTraceId")].isNull() && m_forward_trace_id_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;
}

QString OAITrace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrace::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_info.isSet()) {
        obj.insert(QString("endpointInfo"), ::OpenAPI::toJsonValue(m_endpoint_info));
    }
    if (m_forward_trace_id_isSet) {
        obj.insert(QString("forwardTraceId"), ::OpenAPI::toJsonValue(m_forward_trace_id));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    return obj;
}

OAIEndpointInfo OAITrace::getEndpointInfo() const {
    return m_endpoint_info;
}
void OAITrace::setEndpointInfo(const OAIEndpointInfo &endpoint_info) {
    m_endpoint_info = endpoint_info;
    m_endpoint_info_isSet = true;
}

bool OAITrace::is_endpoint_info_Set() const{
    return m_endpoint_info_isSet;
}

bool OAITrace::is_endpoint_info_Valid() const{
    return m_endpoint_info_isValid;
}

qint32 OAITrace::getForwardTraceId() const {
    return m_forward_trace_id;
}
void OAITrace::setForwardTraceId(const qint32 &forward_trace_id) {
    m_forward_trace_id = forward_trace_id;
    m_forward_trace_id_isSet = true;
}

bool OAITrace::is_forward_trace_id_Set() const{
    return m_forward_trace_id_isSet;
}

bool OAITrace::is_forward_trace_id_Valid() const{
    return m_forward_trace_id_isValid;
}

QList<OAIStep> OAITrace::getSteps() const {
    return m_steps;
}
void OAITrace::setSteps(const QList<OAIStep> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAITrace::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAITrace::is_steps_Valid() const{
    return m_steps_isValid;
}

bool OAITrace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_trace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
