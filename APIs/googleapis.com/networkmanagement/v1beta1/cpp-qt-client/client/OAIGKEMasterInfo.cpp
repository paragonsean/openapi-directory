/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGKEMasterInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGKEMasterInfo::OAIGKEMasterInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGKEMasterInfo::OAIGKEMasterInfo() {
    this->initializeModel();
}

OAIGKEMasterInfo::~OAIGKEMasterInfo() {}

void OAIGKEMasterInfo::initializeModel() {

    m_cluster_network_uri_isSet = false;
    m_cluster_network_uri_isValid = false;

    m_cluster_uri_isSet = false;
    m_cluster_uri_isValid = false;

    m_external_ip_isSet = false;
    m_external_ip_isValid = false;

    m_internal_ip_isSet = false;
    m_internal_ip_isValid = false;
}

void OAIGKEMasterInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGKEMasterInfo::fromJsonObject(QJsonObject json) {

    m_cluster_network_uri_isValid = ::OpenAPI::fromJsonValue(m_cluster_network_uri, json[QString("clusterNetworkUri")]);
    m_cluster_network_uri_isSet = !json[QString("clusterNetworkUri")].isNull() && m_cluster_network_uri_isValid;

    m_cluster_uri_isValid = ::OpenAPI::fromJsonValue(m_cluster_uri, json[QString("clusterUri")]);
    m_cluster_uri_isSet = !json[QString("clusterUri")].isNull() && m_cluster_uri_isValid;

    m_external_ip_isValid = ::OpenAPI::fromJsonValue(m_external_ip, json[QString("externalIp")]);
    m_external_ip_isSet = !json[QString("externalIp")].isNull() && m_external_ip_isValid;

    m_internal_ip_isValid = ::OpenAPI::fromJsonValue(m_internal_ip, json[QString("internalIp")]);
    m_internal_ip_isSet = !json[QString("internalIp")].isNull() && m_internal_ip_isValid;
}

QString OAIGKEMasterInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGKEMasterInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_network_uri_isSet) {
        obj.insert(QString("clusterNetworkUri"), ::OpenAPI::toJsonValue(m_cluster_network_uri));
    }
    if (m_cluster_uri_isSet) {
        obj.insert(QString("clusterUri"), ::OpenAPI::toJsonValue(m_cluster_uri));
    }
    if (m_external_ip_isSet) {
        obj.insert(QString("externalIp"), ::OpenAPI::toJsonValue(m_external_ip));
    }
    if (m_internal_ip_isSet) {
        obj.insert(QString("internalIp"), ::OpenAPI::toJsonValue(m_internal_ip));
    }
    return obj;
}

QString OAIGKEMasterInfo::getClusterNetworkUri() const {
    return m_cluster_network_uri;
}
void OAIGKEMasterInfo::setClusterNetworkUri(const QString &cluster_network_uri) {
    m_cluster_network_uri = cluster_network_uri;
    m_cluster_network_uri_isSet = true;
}

bool OAIGKEMasterInfo::is_cluster_network_uri_Set() const{
    return m_cluster_network_uri_isSet;
}

bool OAIGKEMasterInfo::is_cluster_network_uri_Valid() const{
    return m_cluster_network_uri_isValid;
}

QString OAIGKEMasterInfo::getClusterUri() const {
    return m_cluster_uri;
}
void OAIGKEMasterInfo::setClusterUri(const QString &cluster_uri) {
    m_cluster_uri = cluster_uri;
    m_cluster_uri_isSet = true;
}

bool OAIGKEMasterInfo::is_cluster_uri_Set() const{
    return m_cluster_uri_isSet;
}

bool OAIGKEMasterInfo::is_cluster_uri_Valid() const{
    return m_cluster_uri_isValid;
}

QString OAIGKEMasterInfo::getExternalIp() const {
    return m_external_ip;
}
void OAIGKEMasterInfo::setExternalIp(const QString &external_ip) {
    m_external_ip = external_ip;
    m_external_ip_isSet = true;
}

bool OAIGKEMasterInfo::is_external_ip_Set() const{
    return m_external_ip_isSet;
}

bool OAIGKEMasterInfo::is_external_ip_Valid() const{
    return m_external_ip_isValid;
}

QString OAIGKEMasterInfo::getInternalIp() const {
    return m_internal_ip;
}
void OAIGKEMasterInfo::setInternalIp(const QString &internal_ip) {
    m_internal_ip = internal_ip;
    m_internal_ip_isSet = true;
}

bool OAIGKEMasterInfo::is_internal_ip_Set() const{
    return m_internal_ip_isSet;
}

bool OAIGKEMasterInfo::is_internal_ip_Valid() const{
    return m_internal_ip_isValid;
}

bool OAIGKEMasterInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_network_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGKEMasterInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
