/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetworkManagementApi);
  }
}(this, function(expect, NetworkManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetworkManagementApi.NatInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NatInfo', function() {
    it('should create an instance of NatInfo', function() {
      // uncomment below and update the code to test NatInfo
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be.a(NetworkManagementApi.NatInfo);
    });

    it('should have the property natGatewayName (base name: "natGatewayName")', function() {
      // uncomment below and update the code to test the property natGatewayName
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

    it('should have the property networkUri (base name: "networkUri")', function() {
      // uncomment below and update the code to test the property networkUri
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

    it('should have the property newDestinationIp (base name: "newDestinationIp")', function() {
      // uncomment below and update the code to test the property newDestinationIp
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

    it('should have the property newDestinationPort (base name: "newDestinationPort")', function() {
      // uncomment below and update the code to test the property newDestinationPort
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

    it('should have the property newSourceIp (base name: "newSourceIp")', function() {
      // uncomment below and update the code to test the property newSourceIp
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

    it('should have the property newSourcePort (base name: "newSourcePort")', function() {
      // uncomment below and update the code to test the property newSourcePort
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

    it('should have the property oldDestinationIp (base name: "oldDestinationIp")', function() {
      // uncomment below and update the code to test the property oldDestinationIp
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

    it('should have the property oldDestinationPort (base name: "oldDestinationPort")', function() {
      // uncomment below and update the code to test the property oldDestinationPort
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

    it('should have the property oldSourceIp (base name: "oldSourceIp")', function() {
      // uncomment below and update the code to test the property oldSourceIp
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

    it('should have the property oldSourcePort (base name: "oldSourcePort")', function() {
      // uncomment below and update the code to test the property oldSourcePort
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

    it('should have the property protocol (base name: "protocol")', function() {
      // uncomment below and update the code to test the property protocol
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

    it('should have the property routerUri (base name: "routerUri")', function() {
      // uncomment below and update the code to test the property routerUri
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new NetworkManagementApi.NatInfo();
      //expect(instance).to.be();
    });

  });

}));
