/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Endpoint from './Endpoint';
import ProbingDetails from './ProbingDetails';
import ReachabilityDetails from './ReachabilityDetails';

/**
 * The ConnectivityTest model module.
 * @module model/ConnectivityTest
 * @version v1beta1
 */
class ConnectivityTest {
    /**
     * Constructs a new <code>ConnectivityTest</code>.
     * A Connectivity Test for a network reachability analysis.
     * @alias module:model/ConnectivityTest
     */
    constructor() { 
        
        ConnectivityTest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectivityTest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectivityTest} obj Optional instance to populate.
     * @return {module:model/ConnectivityTest} The populated <code>ConnectivityTest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectivityTest();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = Endpoint.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('probingDetails')) {
                obj['probingDetails'] = ProbingDetails.constructFromObject(data['probingDetails']);
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('reachabilityDetails')) {
                obj['reachabilityDetails'] = ReachabilityDetails.constructFromObject(data['reachabilityDetails']);
            }
            if (data.hasOwnProperty('relatedProjects')) {
                obj['relatedProjects'] = ApiClient.convertToType(data['relatedProjects'], ['String']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Endpoint.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectivityTest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectivityTest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          Endpoint.validateJSON(data['destination']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `probingDetails`
        if (data['probingDetails']) { // data not null
          ProbingDetails.validateJSON(data['probingDetails']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // validate the optional field `reachabilityDetails`
        if (data['reachabilityDetails']) { // data not null
          ReachabilityDetails.validateJSON(data['reachabilityDetails']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['relatedProjects'])) {
            throw new Error("Expected the field `relatedProjects` to be an array in the JSON data but got " + data['relatedProjects']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Endpoint.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The time the test was created.
 * @member {String} createTime
 */
ConnectivityTest.prototype['createTime'] = undefined;

/**
 * The user-supplied description of the Connectivity Test. Maximum of 512 characters.
 * @member {String} description
 */
ConnectivityTest.prototype['description'] = undefined;

/**
 * @member {module:model/Endpoint} destination
 */
ConnectivityTest.prototype['destination'] = undefined;

/**
 * Output only. The display name of a Connectivity Test.
 * @member {String} displayName
 */
ConnectivityTest.prototype['displayName'] = undefined;

/**
 * Resource labels to represent user-provided metadata.
 * @member {Object.<String, String>} labels
 */
ConnectivityTest.prototype['labels'] = undefined;

/**
 * Required. Unique name of the resource using the form: `projects/{project_id}/locations/global/connectivityTests/{test}`
 * @member {String} name
 */
ConnectivityTest.prototype['name'] = undefined;

/**
 * @member {module:model/ProbingDetails} probingDetails
 */
ConnectivityTest.prototype['probingDetails'] = undefined;

/**
 * IP Protocol of the test. When not provided, \"TCP\" is assumed.
 * @member {String} protocol
 */
ConnectivityTest.prototype['protocol'] = undefined;

/**
 * @member {module:model/ReachabilityDetails} reachabilityDetails
 */
ConnectivityTest.prototype['reachabilityDetails'] = undefined;

/**
 * Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.
 * @member {Array.<String>} relatedProjects
 */
ConnectivityTest.prototype['relatedProjects'] = undefined;

/**
 * @member {module:model/Endpoint} source
 */
ConnectivityTest.prototype['source'] = undefined;

/**
 * Output only. The time the test's configuration was updated.
 * @member {String} updateTime
 */
ConnectivityTest.prototype['updateTime'] = undefined;






export default ConnectivityTest;

