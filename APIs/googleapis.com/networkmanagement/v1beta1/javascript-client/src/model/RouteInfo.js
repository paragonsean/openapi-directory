/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RouteInfo model module.
 * @module model/RouteInfo
 * @version v1beta1
 */
class RouteInfo {
    /**
     * Constructs a new <code>RouteInfo</code>.
     * For display only. Metadata associated with a Compute Engine route.
     * @alias module:model/RouteInfo
     */
    constructor() { 
        
        RouteInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RouteInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RouteInfo} obj Optional instance to populate.
     * @return {module:model/RouteInfo} The populated <code>RouteInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RouteInfo();

            if (data.hasOwnProperty('destIpRange')) {
                obj['destIpRange'] = ApiClient.convertToType(data['destIpRange'], 'String');
            }
            if (data.hasOwnProperty('destPortRanges')) {
                obj['destPortRanges'] = ApiClient.convertToType(data['destPortRanges'], ['String']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('instanceTags')) {
                obj['instanceTags'] = ApiClient.convertToType(data['instanceTags'], ['String']);
            }
            if (data.hasOwnProperty('nccHubUri')) {
                obj['nccHubUri'] = ApiClient.convertToType(data['nccHubUri'], 'String');
            }
            if (data.hasOwnProperty('nccSpokeUri')) {
                obj['nccSpokeUri'] = ApiClient.convertToType(data['nccSpokeUri'], 'String');
            }
            if (data.hasOwnProperty('networkUri')) {
                obj['networkUri'] = ApiClient.convertToType(data['networkUri'], 'String');
            }
            if (data.hasOwnProperty('nextHop')) {
                obj['nextHop'] = ApiClient.convertToType(data['nextHop'], 'String');
            }
            if (data.hasOwnProperty('nextHopType')) {
                obj['nextHopType'] = ApiClient.convertToType(data['nextHopType'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('protocols')) {
                obj['protocols'] = ApiClient.convertToType(data['protocols'], ['String']);
            }
            if (data.hasOwnProperty('routeScope')) {
                obj['routeScope'] = ApiClient.convertToType(data['routeScope'], 'String');
            }
            if (data.hasOwnProperty('routeType')) {
                obj['routeType'] = ApiClient.convertToType(data['routeType'], 'String');
            }
            if (data.hasOwnProperty('srcIpRange')) {
                obj['srcIpRange'] = ApiClient.convertToType(data['srcIpRange'], 'String');
            }
            if (data.hasOwnProperty('srcPortRanges')) {
                obj['srcPortRanges'] = ApiClient.convertToType(data['srcPortRanges'], ['String']);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RouteInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RouteInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['destIpRange'] && !(typeof data['destIpRange'] === 'string' || data['destIpRange'] instanceof String)) {
            throw new Error("Expected the field `destIpRange` to be a primitive type in the JSON string but got " + data['destIpRange']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['destPortRanges'])) {
            throw new Error("Expected the field `destPortRanges` to be an array in the JSON data but got " + data['destPortRanges']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instanceTags'])) {
            throw new Error("Expected the field `instanceTags` to be an array in the JSON data but got " + data['instanceTags']);
        }
        // ensure the json data is a string
        if (data['nccHubUri'] && !(typeof data['nccHubUri'] === 'string' || data['nccHubUri'] instanceof String)) {
            throw new Error("Expected the field `nccHubUri` to be a primitive type in the JSON string but got " + data['nccHubUri']);
        }
        // ensure the json data is a string
        if (data['nccSpokeUri'] && !(typeof data['nccSpokeUri'] === 'string' || data['nccSpokeUri'] instanceof String)) {
            throw new Error("Expected the field `nccSpokeUri` to be a primitive type in the JSON string but got " + data['nccSpokeUri']);
        }
        // ensure the json data is a string
        if (data['networkUri'] && !(typeof data['networkUri'] === 'string' || data['networkUri'] instanceof String)) {
            throw new Error("Expected the field `networkUri` to be a primitive type in the JSON string but got " + data['networkUri']);
        }
        // ensure the json data is a string
        if (data['nextHop'] && !(typeof data['nextHop'] === 'string' || data['nextHop'] instanceof String)) {
            throw new Error("Expected the field `nextHop` to be a primitive type in the JSON string but got " + data['nextHop']);
        }
        // ensure the json data is a string
        if (data['nextHopType'] && !(typeof data['nextHopType'] === 'string' || data['nextHopType'] instanceof String)) {
            throw new Error("Expected the field `nextHopType` to be a primitive type in the JSON string but got " + data['nextHopType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['protocols'])) {
            throw new Error("Expected the field `protocols` to be an array in the JSON data but got " + data['protocols']);
        }
        // ensure the json data is a string
        if (data['routeScope'] && !(typeof data['routeScope'] === 'string' || data['routeScope'] instanceof String)) {
            throw new Error("Expected the field `routeScope` to be a primitive type in the JSON string but got " + data['routeScope']);
        }
        // ensure the json data is a string
        if (data['routeType'] && !(typeof data['routeType'] === 'string' || data['routeType'] instanceof String)) {
            throw new Error("Expected the field `routeType` to be a primitive type in the JSON string but got " + data['routeType']);
        }
        // ensure the json data is a string
        if (data['srcIpRange'] && !(typeof data['srcIpRange'] === 'string' || data['srcIpRange'] instanceof String)) {
            throw new Error("Expected the field `srcIpRange` to be a primitive type in the JSON string but got " + data['srcIpRange']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['srcPortRanges'])) {
            throw new Error("Expected the field `srcPortRanges` to be an array in the JSON data but got " + data['srcPortRanges']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * Destination IP range of the route.
 * @member {String} destIpRange
 */
RouteInfo.prototype['destIpRange'] = undefined;

/**
 * Destination port ranges of the route. Policy based routes only.
 * @member {Array.<String>} destPortRanges
 */
RouteInfo.prototype['destPortRanges'] = undefined;

/**
 * Name of a route.
 * @member {String} displayName
 */
RouteInfo.prototype['displayName'] = undefined;

/**
 * Instance tags of the route.
 * @member {Array.<String>} instanceTags
 */
RouteInfo.prototype['instanceTags'] = undefined;

/**
 * URI of a NCC Hub. NCC_HUB routes only.
 * @member {String} nccHubUri
 */
RouteInfo.prototype['nccHubUri'] = undefined;

/**
 * URI of a NCC Spoke. NCC_HUB routes only.
 * @member {String} nccSpokeUri
 */
RouteInfo.prototype['nccSpokeUri'] = undefined;

/**
 * URI of a Compute Engine network. NETWORK routes only.
 * @member {String} networkUri
 */
RouteInfo.prototype['networkUri'] = undefined;

/**
 * Next hop of the route.
 * @member {String} nextHop
 */
RouteInfo.prototype['nextHop'] = undefined;

/**
 * Type of next hop.
 * @member {module:model/RouteInfo.NextHopTypeEnum} nextHopType
 */
RouteInfo.prototype['nextHopType'] = undefined;

/**
 * Priority of the route.
 * @member {Number} priority
 */
RouteInfo.prototype['priority'] = undefined;

/**
 * Protocols of the route. Policy based routes only.
 * @member {Array.<String>} protocols
 */
RouteInfo.prototype['protocols'] = undefined;

/**
 * Indicates where route is applicable.
 * @member {module:model/RouteInfo.RouteScopeEnum} routeScope
 */
RouteInfo.prototype['routeScope'] = undefined;

/**
 * Type of route.
 * @member {module:model/RouteInfo.RouteTypeEnum} routeType
 */
RouteInfo.prototype['routeType'] = undefined;

/**
 * Source IP address range of the route. Policy based routes only.
 * @member {String} srcIpRange
 */
RouteInfo.prototype['srcIpRange'] = undefined;

/**
 * Source port ranges of the route. Policy based routes only.
 * @member {Array.<String>} srcPortRanges
 */
RouteInfo.prototype['srcPortRanges'] = undefined;

/**
 * URI of a route. Dynamic, peering static and peering dynamic routes do not have an URI. Advertised route from Google Cloud VPC to on-premises network also does not have an URI.
 * @member {String} uri
 */
RouteInfo.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>nextHopType</code> property.
 * @enum {String}
 * @readonly
 */
RouteInfo['NextHopTypeEnum'] = {

    /**
     * value: "NEXT_HOP_TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "NEXT_HOP_TYPE_UNSPECIFIED",

    /**
     * value: "NEXT_HOP_IP"
     * @const
     */
    "IP": "NEXT_HOP_IP",

    /**
     * value: "NEXT_HOP_INSTANCE"
     * @const
     */
    "INSTANCE": "NEXT_HOP_INSTANCE",

    /**
     * value: "NEXT_HOP_NETWORK"
     * @const
     */
    "NETWORK": "NEXT_HOP_NETWORK",

    /**
     * value: "NEXT_HOP_PEERING"
     * @const
     */
    "PEERING": "NEXT_HOP_PEERING",

    /**
     * value: "NEXT_HOP_INTERCONNECT"
     * @const
     */
    "INTERCONNECT": "NEXT_HOP_INTERCONNECT",

    /**
     * value: "NEXT_HOP_VPN_TUNNEL"
     * @const
     */
    "VPN_TUNNEL": "NEXT_HOP_VPN_TUNNEL",

    /**
     * value: "NEXT_HOP_VPN_GATEWAY"
     * @const
     */
    "VPN_GATEWAY": "NEXT_HOP_VPN_GATEWAY",

    /**
     * value: "NEXT_HOP_INTERNET_GATEWAY"
     * @const
     */
    "INTERNET_GATEWAY": "NEXT_HOP_INTERNET_GATEWAY",

    /**
     * value: "NEXT_HOP_BLACKHOLE"
     * @const
     */
    "BLACKHOLE": "NEXT_HOP_BLACKHOLE",

    /**
     * value: "NEXT_HOP_ILB"
     * @const
     */
    "ILB": "NEXT_HOP_ILB",

    /**
     * value: "NEXT_HOP_ROUTER_APPLIANCE"
     * @const
     */
    "ROUTER_APPLIANCE": "NEXT_HOP_ROUTER_APPLIANCE",

    /**
     * value: "NEXT_HOP_NCC_HUB"
     * @const
     */
    "NCC_HUB": "NEXT_HOP_NCC_HUB"
};


/**
 * Allowed values for the <code>routeScope</code> property.
 * @enum {String}
 * @readonly
 */
RouteInfo['RouteScopeEnum'] = {

    /**
     * value: "ROUTE_SCOPE_UNSPECIFIED"
     * @const
     */
    "ROUTE_SCOPE_UNSPECIFIED": "ROUTE_SCOPE_UNSPECIFIED",

    /**
     * value: "NETWORK"
     * @const
     */
    "NETWORK": "NETWORK",

    /**
     * value: "NCC_HUB"
     * @const
     */
    "NCC_HUB": "NCC_HUB"
};


/**
 * Allowed values for the <code>routeType</code> property.
 * @enum {String}
 * @readonly
 */
RouteInfo['RouteTypeEnum'] = {

    /**
     * value: "ROUTE_TYPE_UNSPECIFIED"
     * @const
     */
    "ROUTE_TYPE_UNSPECIFIED": "ROUTE_TYPE_UNSPECIFIED",

    /**
     * value: "SUBNET"
     * @const
     */
    "SUBNET": "SUBNET",

    /**
     * value: "STATIC"
     * @const
     */
    "STATIC": "STATIC",

    /**
     * value: "DYNAMIC"
     * @const
     */
    "DYNAMIC": "DYNAMIC",

    /**
     * value: "PEERING_SUBNET"
     * @const
     */
    "PEERING_SUBNET": "PEERING_SUBNET",

    /**
     * value: "PEERING_STATIC"
     * @const
     */
    "PEERING_STATIC": "PEERING_STATIC",

    /**
     * value: "PEERING_DYNAMIC"
     * @const
     */
    "PEERING_DYNAMIC": "PEERING_DYNAMIC",

    /**
     * value: "POLICY_BASED"
     * @const
     */
    "POLICY_BASED": "POLICY_BASED"
};



export default RouteInfo;

