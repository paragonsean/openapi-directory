/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoadBalancerBackendInfo model module.
 * @module model/LoadBalancerBackendInfo
 * @version v1beta1
 */
class LoadBalancerBackendInfo {
    /**
     * Constructs a new <code>LoadBalancerBackendInfo</code>.
     * For display only. Metadata associated with the load balancer backend.
     * @alias module:model/LoadBalancerBackendInfo
     */
    constructor() { 
        
        LoadBalancerBackendInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoadBalancerBackendInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoadBalancerBackendInfo} obj Optional instance to populate.
     * @return {module:model/LoadBalancerBackendInfo} The populated <code>LoadBalancerBackendInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoadBalancerBackendInfo();

            if (data.hasOwnProperty('backendBucketUri')) {
                obj['backendBucketUri'] = ApiClient.convertToType(data['backendBucketUri'], 'String');
            }
            if (data.hasOwnProperty('backendServiceUri')) {
                obj['backendServiceUri'] = ApiClient.convertToType(data['backendServiceUri'], 'String');
            }
            if (data.hasOwnProperty('healthCheckFirewallsConfigState')) {
                obj['healthCheckFirewallsConfigState'] = ApiClient.convertToType(data['healthCheckFirewallsConfigState'], 'String');
            }
            if (data.hasOwnProperty('healthCheckUri')) {
                obj['healthCheckUri'] = ApiClient.convertToType(data['healthCheckUri'], 'String');
            }
            if (data.hasOwnProperty('instanceGroupUri')) {
                obj['instanceGroupUri'] = ApiClient.convertToType(data['instanceGroupUri'], 'String');
            }
            if (data.hasOwnProperty('instanceUri')) {
                obj['instanceUri'] = ApiClient.convertToType(data['instanceUri'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkEndpointGroupUri')) {
                obj['networkEndpointGroupUri'] = ApiClient.convertToType(data['networkEndpointGroupUri'], 'String');
            }
            if (data.hasOwnProperty('pscGoogleApiTarget')) {
                obj['pscGoogleApiTarget'] = ApiClient.convertToType(data['pscGoogleApiTarget'], 'String');
            }
            if (data.hasOwnProperty('pscServiceAttachmentUri')) {
                obj['pscServiceAttachmentUri'] = ApiClient.convertToType(data['pscServiceAttachmentUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoadBalancerBackendInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoadBalancerBackendInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backendBucketUri'] && !(typeof data['backendBucketUri'] === 'string' || data['backendBucketUri'] instanceof String)) {
            throw new Error("Expected the field `backendBucketUri` to be a primitive type in the JSON string but got " + data['backendBucketUri']);
        }
        // ensure the json data is a string
        if (data['backendServiceUri'] && !(typeof data['backendServiceUri'] === 'string' || data['backendServiceUri'] instanceof String)) {
            throw new Error("Expected the field `backendServiceUri` to be a primitive type in the JSON string but got " + data['backendServiceUri']);
        }
        // ensure the json data is a string
        if (data['healthCheckFirewallsConfigState'] && !(typeof data['healthCheckFirewallsConfigState'] === 'string' || data['healthCheckFirewallsConfigState'] instanceof String)) {
            throw new Error("Expected the field `healthCheckFirewallsConfigState` to be a primitive type in the JSON string but got " + data['healthCheckFirewallsConfigState']);
        }
        // ensure the json data is a string
        if (data['healthCheckUri'] && !(typeof data['healthCheckUri'] === 'string' || data['healthCheckUri'] instanceof String)) {
            throw new Error("Expected the field `healthCheckUri` to be a primitive type in the JSON string but got " + data['healthCheckUri']);
        }
        // ensure the json data is a string
        if (data['instanceGroupUri'] && !(typeof data['instanceGroupUri'] === 'string' || data['instanceGroupUri'] instanceof String)) {
            throw new Error("Expected the field `instanceGroupUri` to be a primitive type in the JSON string but got " + data['instanceGroupUri']);
        }
        // ensure the json data is a string
        if (data['instanceUri'] && !(typeof data['instanceUri'] === 'string' || data['instanceUri'] instanceof String)) {
            throw new Error("Expected the field `instanceUri` to be a primitive type in the JSON string but got " + data['instanceUri']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['networkEndpointGroupUri'] && !(typeof data['networkEndpointGroupUri'] === 'string' || data['networkEndpointGroupUri'] instanceof String)) {
            throw new Error("Expected the field `networkEndpointGroupUri` to be a primitive type in the JSON string but got " + data['networkEndpointGroupUri']);
        }
        // ensure the json data is a string
        if (data['pscGoogleApiTarget'] && !(typeof data['pscGoogleApiTarget'] === 'string' || data['pscGoogleApiTarget'] instanceof String)) {
            throw new Error("Expected the field `pscGoogleApiTarget` to be a primitive type in the JSON string but got " + data['pscGoogleApiTarget']);
        }
        // ensure the json data is a string
        if (data['pscServiceAttachmentUri'] && !(typeof data['pscServiceAttachmentUri'] === 'string' || data['pscServiceAttachmentUri'] instanceof String)) {
            throw new Error("Expected the field `pscServiceAttachmentUri` to be a primitive type in the JSON string but got " + data['pscServiceAttachmentUri']);
        }

        return true;
    }


}



/**
 * URI of the backend bucket this backend targets (if applicable).
 * @member {String} backendBucketUri
 */
LoadBalancerBackendInfo.prototype['backendBucketUri'] = undefined;

/**
 * URI of the backend service this backend belongs to (if applicable).
 * @member {String} backendServiceUri
 */
LoadBalancerBackendInfo.prototype['backendServiceUri'] = undefined;

/**
 * Output only. Health check firewalls configuration state for the backend. This is a result of the static firewall analysis (verifying that health check traffic from required IP ranges to the backend is allowed or not). The backend might still be unhealthy even if these firewalls are configured. Please refer to the documentation for more information: https://cloud.google.com/load-balancing/docs/firewall-rules
 * @member {module:model/LoadBalancerBackendInfo.HealthCheckFirewallsConfigStateEnum} healthCheckFirewallsConfigState
 */
LoadBalancerBackendInfo.prototype['healthCheckFirewallsConfigState'] = undefined;

/**
 * URI of the health check attached to this backend (if applicable).
 * @member {String} healthCheckUri
 */
LoadBalancerBackendInfo.prototype['healthCheckUri'] = undefined;

/**
 * URI of the instance group this backend belongs to (if applicable).
 * @member {String} instanceGroupUri
 */
LoadBalancerBackendInfo.prototype['instanceGroupUri'] = undefined;

/**
 * URI of the backend instance (if applicable). Populated for instance group backends, and zonal NEG backends.
 * @member {String} instanceUri
 */
LoadBalancerBackendInfo.prototype['instanceUri'] = undefined;

/**
 * Display name of the backend. For example, it might be an instance name for the instance group backends, or an IP address and port for zonal network endpoint group backends.
 * @member {String} name
 */
LoadBalancerBackendInfo.prototype['name'] = undefined;

/**
 * URI of the network endpoint group this backend belongs to (if applicable).
 * @member {String} networkEndpointGroupUri
 */
LoadBalancerBackendInfo.prototype['networkEndpointGroupUri'] = undefined;

/**
 * PSC Google API target this PSC NEG backend targets (if applicable).
 * @member {String} pscGoogleApiTarget
 */
LoadBalancerBackendInfo.prototype['pscGoogleApiTarget'] = undefined;

/**
 * URI of the PSC service attachment this PSC NEG backend targets (if applicable).
 * @member {String} pscServiceAttachmentUri
 */
LoadBalancerBackendInfo.prototype['pscServiceAttachmentUri'] = undefined;





/**
 * Allowed values for the <code>healthCheckFirewallsConfigState</code> property.
 * @enum {String}
 * @readonly
 */
LoadBalancerBackendInfo['HealthCheckFirewallsConfigStateEnum'] = {

    /**
     * value: "HEALTH_CHECK_FIREWALLS_CONFIG_STATE_UNSPECIFIED"
     * @const
     */
    "HEALTH_CHECK_FIREWALLS_CONFIG_STATE_UNSPECIFIED": "HEALTH_CHECK_FIREWALLS_CONFIG_STATE_UNSPECIFIED",

    /**
     * value: "FIREWALLS_CONFIGURED"
     * @const
     */
    "FIREWALLS_CONFIGURED": "FIREWALLS_CONFIGURED",

    /**
     * value: "FIREWALLS_PARTIALLY_CONFIGURED"
     * @const
     */
    "FIREWALLS_PARTIALLY_CONFIGURED": "FIREWALLS_PARTIALLY_CONFIGURED",

    /**
     * value: "FIREWALLS_NOT_CONFIGURED"
     * @const
     */
    "FIREWALLS_NOT_CONFIGURED": "FIREWALLS_NOT_CONFIGURED",

    /**
     * value: "FIREWALLS_UNSUPPORTED"
     * @const
     */
    "FIREWALLS_UNSUPPORTED": "FIREWALLS_UNSUPPORTED"
};



export default LoadBalancerBackendInfo;

