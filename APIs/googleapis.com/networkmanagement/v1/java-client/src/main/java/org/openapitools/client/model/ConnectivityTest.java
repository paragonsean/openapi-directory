/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Endpoint;
import org.openapitools.client.model.ProbingDetails;
import org.openapitools.client.model.ReachabilityDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Connectivity Test for a network reachability analysis.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:04.582710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectivityTest {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private Endpoint destination;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROBING_DETAILS = "probingDetails";
  @SerializedName(SERIALIZED_NAME_PROBING_DETAILS)
  private ProbingDetails probingDetails;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_REACHABILITY_DETAILS = "reachabilityDetails";
  @SerializedName(SERIALIZED_NAME_REACHABILITY_DETAILS)
  private ReachabilityDetails reachabilityDetails;

  public static final String SERIALIZED_NAME_RELATED_PROJECTS = "relatedProjects";
  @SerializedName(SERIALIZED_NAME_RELATED_PROJECTS)
  private List<String> relatedProjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Endpoint source;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public ConnectivityTest() {
  }

  public ConnectivityTest(
     String createTime, 
     String displayName, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.displayName = displayName;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The time the test was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public ConnectivityTest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The user-supplied description of the Connectivity Test. Maximum of 512 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ConnectivityTest destination(Endpoint destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public Endpoint getDestination() {
    return destination;
  }

  public void setDestination(Endpoint destination) {
    this.destination = destination;
  }


  /**
   * Output only. The display name of a Connectivity Test.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  public ConnectivityTest labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ConnectivityTest putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Resource labels to represent user-provided metadata.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ConnectivityTest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Unique name of the resource using the form: &#x60;projects/{project_id}/locations/global/connectivityTests/{test_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConnectivityTest probingDetails(ProbingDetails probingDetails) {
    this.probingDetails = probingDetails;
    return this;
  }

  /**
   * Get probingDetails
   * @return probingDetails
   */
  @javax.annotation.Nullable
  public ProbingDetails getProbingDetails() {
    return probingDetails;
  }

  public void setProbingDetails(ProbingDetails probingDetails) {
    this.probingDetails = probingDetails;
  }


  public ConnectivityTest protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * IP Protocol of the test. When not provided, \&quot;TCP\&quot; is assumed.
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public ConnectivityTest reachabilityDetails(ReachabilityDetails reachabilityDetails) {
    this.reachabilityDetails = reachabilityDetails;
    return this;
  }

  /**
   * Get reachabilityDetails
   * @return reachabilityDetails
   */
  @javax.annotation.Nullable
  public ReachabilityDetails getReachabilityDetails() {
    return reachabilityDetails;
  }

  public void setReachabilityDetails(ReachabilityDetails reachabilityDetails) {
    this.reachabilityDetails = reachabilityDetails;
  }


  public ConnectivityTest relatedProjects(List<String> relatedProjects) {
    this.relatedProjects = relatedProjects;
    return this;
  }

  public ConnectivityTest addRelatedProjectsItem(String relatedProjectsItem) {
    if (this.relatedProjects == null) {
      this.relatedProjects = new ArrayList<>();
    }
    this.relatedProjects.add(relatedProjectsItem);
    return this;
  }

  /**
   * Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.
   * @return relatedProjects
   */
  @javax.annotation.Nullable
  public List<String> getRelatedProjects() {
    return relatedProjects;
  }

  public void setRelatedProjects(List<String> relatedProjects) {
    this.relatedProjects = relatedProjects;
  }


  public ConnectivityTest source(Endpoint source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public Endpoint getSource() {
    return source;
  }

  public void setSource(Endpoint source) {
    this.source = source;
  }


  /**
   * Output only. The time the test&#39;s configuration was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectivityTest connectivityTest = (ConnectivityTest) o;
    return Objects.equals(this.createTime, connectivityTest.createTime) &&
        Objects.equals(this.description, connectivityTest.description) &&
        Objects.equals(this.destination, connectivityTest.destination) &&
        Objects.equals(this.displayName, connectivityTest.displayName) &&
        Objects.equals(this.labels, connectivityTest.labels) &&
        Objects.equals(this.name, connectivityTest.name) &&
        Objects.equals(this.probingDetails, connectivityTest.probingDetails) &&
        Objects.equals(this.protocol, connectivityTest.protocol) &&
        Objects.equals(this.reachabilityDetails, connectivityTest.reachabilityDetails) &&
        Objects.equals(this.relatedProjects, connectivityTest.relatedProjects) &&
        Objects.equals(this.source, connectivityTest.source) &&
        Objects.equals(this.updateTime, connectivityTest.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, destination, displayName, labels, name, probingDetails, protocol, reachabilityDetails, relatedProjects, source, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectivityTest {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    probingDetails: ").append(toIndentedString(probingDetails)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    reachabilityDetails: ").append(toIndentedString(reachabilityDetails)).append("\n");
    sb.append("    relatedProjects: ").append(toIndentedString(relatedProjects)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("destination");
    openapiFields.add("displayName");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("probingDetails");
    openapiFields.add("protocol");
    openapiFields.add("reachabilityDetails");
    openapiFields.add("relatedProjects");
    openapiFields.add("source");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectivityTest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectivityTest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectivityTest is not found in the empty JSON string", ConnectivityTest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectivityTest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectivityTest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        Endpoint.validateJsonElement(jsonObj.get("destination"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `probingDetails`
      if (jsonObj.get("probingDetails") != null && !jsonObj.get("probingDetails").isJsonNull()) {
        ProbingDetails.validateJsonElement(jsonObj.get("probingDetails"));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `reachabilityDetails`
      if (jsonObj.get("reachabilityDetails") != null && !jsonObj.get("reachabilityDetails").isJsonNull()) {
        ReachabilityDetails.validateJsonElement(jsonObj.get("reachabilityDetails"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("relatedProjects") != null && !jsonObj.get("relatedProjects").isJsonNull() && !jsonObj.get("relatedProjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedProjects` to be an array in the JSON string but got `%s`", jsonObj.get("relatedProjects").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        Endpoint.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectivityTest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectivityTest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectivityTest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectivityTest.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectivityTest>() {
           @Override
           public void write(JsonWriter out, ConnectivityTest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectivityTest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectivityTest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectivityTest
   * @throws IOException if the JSON string is invalid with respect to ConnectivityTest
   */
  public static ConnectivityTest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectivityTest.class);
  }

  /**
   * Convert an instance of ConnectivityTest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

