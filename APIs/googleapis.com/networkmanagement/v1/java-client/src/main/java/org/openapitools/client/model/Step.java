/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AbortInfo;
import org.openapitools.client.model.AppEngineVersionInfo;
import org.openapitools.client.model.CloudFunctionInfo;
import org.openapitools.client.model.CloudRunRevisionInfo;
import org.openapitools.client.model.CloudSQLInstanceInfo;
import org.openapitools.client.model.DeliverInfo;
import org.openapitools.client.model.DropInfo;
import org.openapitools.client.model.EndpointInfo;
import org.openapitools.client.model.FirewallInfo;
import org.openapitools.client.model.ForwardInfo;
import org.openapitools.client.model.ForwardingRuleInfo;
import org.openapitools.client.model.GKEMasterInfo;
import org.openapitools.client.model.GoogleServiceInfo;
import org.openapitools.client.model.InstanceInfo;
import org.openapitools.client.model.LoadBalancerBackendInfo;
import org.openapitools.client.model.LoadBalancerInfo;
import org.openapitools.client.model.NatInfo;
import org.openapitools.client.model.NetworkInfo;
import org.openapitools.client.model.ProxyConnectionInfo;
import org.openapitools.client.model.RouteInfo;
import org.openapitools.client.model.StorageBucketInfo;
import org.openapitools.client.model.VpcConnectorInfo;
import org.openapitools.client.model.VpnGatewayInfo;
import org.openapitools.client.model.VpnTunnelInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A simulated forwarding path is composed of multiple steps. Each step has a well-defined state and an associated configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:04.582710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Step {
  public static final String SERIALIZED_NAME_ABORT = "abort";
  @SerializedName(SERIALIZED_NAME_ABORT)
  private AbortInfo abort;

  public static final String SERIALIZED_NAME_APP_ENGINE_VERSION = "appEngineVersion";
  @SerializedName(SERIALIZED_NAME_APP_ENGINE_VERSION)
  private AppEngineVersionInfo appEngineVersion;

  public static final String SERIALIZED_NAME_CAUSES_DROP = "causesDrop";
  @SerializedName(SERIALIZED_NAME_CAUSES_DROP)
  private Boolean causesDrop;

  public static final String SERIALIZED_NAME_CLOUD_FUNCTION = "cloudFunction";
  @SerializedName(SERIALIZED_NAME_CLOUD_FUNCTION)
  private CloudFunctionInfo cloudFunction;

  public static final String SERIALIZED_NAME_CLOUD_RUN_REVISION = "cloudRunRevision";
  @SerializedName(SERIALIZED_NAME_CLOUD_RUN_REVISION)
  private CloudRunRevisionInfo cloudRunRevision;

  public static final String SERIALIZED_NAME_CLOUD_SQL_INSTANCE = "cloudSqlInstance";
  @SerializedName(SERIALIZED_NAME_CLOUD_SQL_INSTANCE)
  private CloudSQLInstanceInfo cloudSqlInstance;

  public static final String SERIALIZED_NAME_DELIVER = "deliver";
  @SerializedName(SERIALIZED_NAME_DELIVER)
  private DeliverInfo deliver;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DROP = "drop";
  @SerializedName(SERIALIZED_NAME_DROP)
  private DropInfo drop;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private EndpointInfo endpoint;

  public static final String SERIALIZED_NAME_FIREWALL = "firewall";
  @SerializedName(SERIALIZED_NAME_FIREWALL)
  private FirewallInfo firewall;

  public static final String SERIALIZED_NAME_FORWARD = "forward";
  @SerializedName(SERIALIZED_NAME_FORWARD)
  private ForwardInfo forward;

  public static final String SERIALIZED_NAME_FORWARDING_RULE = "forwardingRule";
  @SerializedName(SERIALIZED_NAME_FORWARDING_RULE)
  private ForwardingRuleInfo forwardingRule;

  public static final String SERIALIZED_NAME_GKE_MASTER = "gkeMaster";
  @SerializedName(SERIALIZED_NAME_GKE_MASTER)
  private GKEMasterInfo gkeMaster;

  public static final String SERIALIZED_NAME_GOOGLE_SERVICE = "googleService";
  @SerializedName(SERIALIZED_NAME_GOOGLE_SERVICE)
  private GoogleServiceInfo googleService;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private InstanceInfo instance;

  public static final String SERIALIZED_NAME_LOAD_BALANCER = "loadBalancer";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER)
  private LoadBalancerInfo loadBalancer;

  public static final String SERIALIZED_NAME_LOAD_BALANCER_BACKEND_INFO = "loadBalancerBackendInfo";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_BACKEND_INFO)
  private LoadBalancerBackendInfo loadBalancerBackendInfo;

  public static final String SERIALIZED_NAME_NAT = "nat";
  @SerializedName(SERIALIZED_NAME_NAT)
  private NatInfo nat;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private NetworkInfo network;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_PROXY_CONNECTION = "proxyConnection";
  @SerializedName(SERIALIZED_NAME_PROXY_CONNECTION)
  private ProxyConnectionInfo proxyConnection;

  public static final String SERIALIZED_NAME_ROUTE = "route";
  @SerializedName(SERIALIZED_NAME_ROUTE)
  private RouteInfo route;

  /**
   * Each step is in one of the pre-defined states.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    START_FROM_INSTANCE("START_FROM_INSTANCE"),
    
    START_FROM_INTERNET("START_FROM_INTERNET"),
    
    START_FROM_GOOGLE_SERVICE("START_FROM_GOOGLE_SERVICE"),
    
    START_FROM_PRIVATE_NETWORK("START_FROM_PRIVATE_NETWORK"),
    
    START_FROM_GKE_MASTER("START_FROM_GKE_MASTER"),
    
    START_FROM_CLOUD_SQL_INSTANCE("START_FROM_CLOUD_SQL_INSTANCE"),
    
    START_FROM_CLOUD_FUNCTION("START_FROM_CLOUD_FUNCTION"),
    
    START_FROM_APP_ENGINE_VERSION("START_FROM_APP_ENGINE_VERSION"),
    
    START_FROM_CLOUD_RUN_REVISION("START_FROM_CLOUD_RUN_REVISION"),
    
    START_FROM_STORAGE_BUCKET("START_FROM_STORAGE_BUCKET"),
    
    START_FROM_PSC_PUBLISHED_SERVICE("START_FROM_PSC_PUBLISHED_SERVICE"),
    
    APPLY_INGRESS_FIREWALL_RULE("APPLY_INGRESS_FIREWALL_RULE"),
    
    APPLY_EGRESS_FIREWALL_RULE("APPLY_EGRESS_FIREWALL_RULE"),
    
    APPLY_ROUTE("APPLY_ROUTE"),
    
    APPLY_FORWARDING_RULE("APPLY_FORWARDING_RULE"),
    
    ANALYZE_LOAD_BALANCER_BACKEND("ANALYZE_LOAD_BALANCER_BACKEND"),
    
    SPOOFING_APPROVED("SPOOFING_APPROVED"),
    
    ARRIVE_AT_INSTANCE("ARRIVE_AT_INSTANCE"),
    
    ARRIVE_AT_INTERNAL_LOAD_BALANCER("ARRIVE_AT_INTERNAL_LOAD_BALANCER"),
    
    ARRIVE_AT_EXTERNAL_LOAD_BALANCER("ARRIVE_AT_EXTERNAL_LOAD_BALANCER"),
    
    ARRIVE_AT_VPN_GATEWAY("ARRIVE_AT_VPN_GATEWAY"),
    
    ARRIVE_AT_VPN_TUNNEL("ARRIVE_AT_VPN_TUNNEL"),
    
    ARRIVE_AT_VPC_CONNECTOR("ARRIVE_AT_VPC_CONNECTOR"),
    
    NAT("NAT"),
    
    PROXY_CONNECTION("PROXY_CONNECTION"),
    
    DELIVER("DELIVER"),
    
    DROP("DROP"),
    
    FORWARD("FORWARD"),
    
    ABORT("ABORT"),
    
    VIEWER_PERMISSION_MISSING("VIEWER_PERMISSION_MISSING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STORAGE_BUCKET = "storageBucket";
  @SerializedName(SERIALIZED_NAME_STORAGE_BUCKET)
  private StorageBucketInfo storageBucket;

  public static final String SERIALIZED_NAME_VPC_CONNECTOR = "vpcConnector";
  @SerializedName(SERIALIZED_NAME_VPC_CONNECTOR)
  private VpcConnectorInfo vpcConnector;

  public static final String SERIALIZED_NAME_VPN_GATEWAY = "vpnGateway";
  @SerializedName(SERIALIZED_NAME_VPN_GATEWAY)
  private VpnGatewayInfo vpnGateway;

  public static final String SERIALIZED_NAME_VPN_TUNNEL = "vpnTunnel";
  @SerializedName(SERIALIZED_NAME_VPN_TUNNEL)
  private VpnTunnelInfo vpnTunnel;

  public Step() {
  }

  public Step abort(AbortInfo abort) {
    this.abort = abort;
    return this;
  }

  /**
   * Get abort
   * @return abort
   */
  @javax.annotation.Nullable
  public AbortInfo getAbort() {
    return abort;
  }

  public void setAbort(AbortInfo abort) {
    this.abort = abort;
  }


  public Step appEngineVersion(AppEngineVersionInfo appEngineVersion) {
    this.appEngineVersion = appEngineVersion;
    return this;
  }

  /**
   * Get appEngineVersion
   * @return appEngineVersion
   */
  @javax.annotation.Nullable
  public AppEngineVersionInfo getAppEngineVersion() {
    return appEngineVersion;
  }

  public void setAppEngineVersion(AppEngineVersionInfo appEngineVersion) {
    this.appEngineVersion = appEngineVersion;
  }


  public Step causesDrop(Boolean causesDrop) {
    this.causesDrop = causesDrop;
    return this;
  }

  /**
   * This is a step that leads to the final state Drop.
   * @return causesDrop
   */
  @javax.annotation.Nullable
  public Boolean getCausesDrop() {
    return causesDrop;
  }

  public void setCausesDrop(Boolean causesDrop) {
    this.causesDrop = causesDrop;
  }


  public Step cloudFunction(CloudFunctionInfo cloudFunction) {
    this.cloudFunction = cloudFunction;
    return this;
  }

  /**
   * Get cloudFunction
   * @return cloudFunction
   */
  @javax.annotation.Nullable
  public CloudFunctionInfo getCloudFunction() {
    return cloudFunction;
  }

  public void setCloudFunction(CloudFunctionInfo cloudFunction) {
    this.cloudFunction = cloudFunction;
  }


  public Step cloudRunRevision(CloudRunRevisionInfo cloudRunRevision) {
    this.cloudRunRevision = cloudRunRevision;
    return this;
  }

  /**
   * Get cloudRunRevision
   * @return cloudRunRevision
   */
  @javax.annotation.Nullable
  public CloudRunRevisionInfo getCloudRunRevision() {
    return cloudRunRevision;
  }

  public void setCloudRunRevision(CloudRunRevisionInfo cloudRunRevision) {
    this.cloudRunRevision = cloudRunRevision;
  }


  public Step cloudSqlInstance(CloudSQLInstanceInfo cloudSqlInstance) {
    this.cloudSqlInstance = cloudSqlInstance;
    return this;
  }

  /**
   * Get cloudSqlInstance
   * @return cloudSqlInstance
   */
  @javax.annotation.Nullable
  public CloudSQLInstanceInfo getCloudSqlInstance() {
    return cloudSqlInstance;
  }

  public void setCloudSqlInstance(CloudSQLInstanceInfo cloudSqlInstance) {
    this.cloudSqlInstance = cloudSqlInstance;
  }


  public Step deliver(DeliverInfo deliver) {
    this.deliver = deliver;
    return this;
  }

  /**
   * Get deliver
   * @return deliver
   */
  @javax.annotation.Nullable
  public DeliverInfo getDeliver() {
    return deliver;
  }

  public void setDeliver(DeliverInfo deliver) {
    this.deliver = deliver;
  }


  public Step description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the step. Usually this is a summary of the state.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Step drop(DropInfo drop) {
    this.drop = drop;
    return this;
  }

  /**
   * Get drop
   * @return drop
   */
  @javax.annotation.Nullable
  public DropInfo getDrop() {
    return drop;
  }

  public void setDrop(DropInfo drop) {
    this.drop = drop;
  }


  public Step endpoint(EndpointInfo endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Get endpoint
   * @return endpoint
   */
  @javax.annotation.Nullable
  public EndpointInfo getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(EndpointInfo endpoint) {
    this.endpoint = endpoint;
  }


  public Step firewall(FirewallInfo firewall) {
    this.firewall = firewall;
    return this;
  }

  /**
   * Get firewall
   * @return firewall
   */
  @javax.annotation.Nullable
  public FirewallInfo getFirewall() {
    return firewall;
  }

  public void setFirewall(FirewallInfo firewall) {
    this.firewall = firewall;
  }


  public Step forward(ForwardInfo forward) {
    this.forward = forward;
    return this;
  }

  /**
   * Get forward
   * @return forward
   */
  @javax.annotation.Nullable
  public ForwardInfo getForward() {
    return forward;
  }

  public void setForward(ForwardInfo forward) {
    this.forward = forward;
  }


  public Step forwardingRule(ForwardingRuleInfo forwardingRule) {
    this.forwardingRule = forwardingRule;
    return this;
  }

  /**
   * Get forwardingRule
   * @return forwardingRule
   */
  @javax.annotation.Nullable
  public ForwardingRuleInfo getForwardingRule() {
    return forwardingRule;
  }

  public void setForwardingRule(ForwardingRuleInfo forwardingRule) {
    this.forwardingRule = forwardingRule;
  }


  public Step gkeMaster(GKEMasterInfo gkeMaster) {
    this.gkeMaster = gkeMaster;
    return this;
  }

  /**
   * Get gkeMaster
   * @return gkeMaster
   */
  @javax.annotation.Nullable
  public GKEMasterInfo getGkeMaster() {
    return gkeMaster;
  }

  public void setGkeMaster(GKEMasterInfo gkeMaster) {
    this.gkeMaster = gkeMaster;
  }


  public Step googleService(GoogleServiceInfo googleService) {
    this.googleService = googleService;
    return this;
  }

  /**
   * Get googleService
   * @return googleService
   */
  @javax.annotation.Nullable
  public GoogleServiceInfo getGoogleService() {
    return googleService;
  }

  public void setGoogleService(GoogleServiceInfo googleService) {
    this.googleService = googleService;
  }


  public Step instance(InstanceInfo instance) {
    this.instance = instance;
    return this;
  }

  /**
   * Get instance
   * @return instance
   */
  @javax.annotation.Nullable
  public InstanceInfo getInstance() {
    return instance;
  }

  public void setInstance(InstanceInfo instance) {
    this.instance = instance;
  }


  public Step loadBalancer(LoadBalancerInfo loadBalancer) {
    this.loadBalancer = loadBalancer;
    return this;
  }

  /**
   * Get loadBalancer
   * @return loadBalancer
   */
  @javax.annotation.Nullable
  public LoadBalancerInfo getLoadBalancer() {
    return loadBalancer;
  }

  public void setLoadBalancer(LoadBalancerInfo loadBalancer) {
    this.loadBalancer = loadBalancer;
  }


  public Step loadBalancerBackendInfo(LoadBalancerBackendInfo loadBalancerBackendInfo) {
    this.loadBalancerBackendInfo = loadBalancerBackendInfo;
    return this;
  }

  /**
   * Get loadBalancerBackendInfo
   * @return loadBalancerBackendInfo
   */
  @javax.annotation.Nullable
  public LoadBalancerBackendInfo getLoadBalancerBackendInfo() {
    return loadBalancerBackendInfo;
  }

  public void setLoadBalancerBackendInfo(LoadBalancerBackendInfo loadBalancerBackendInfo) {
    this.loadBalancerBackendInfo = loadBalancerBackendInfo;
  }


  public Step nat(NatInfo nat) {
    this.nat = nat;
    return this;
  }

  /**
   * Get nat
   * @return nat
   */
  @javax.annotation.Nullable
  public NatInfo getNat() {
    return nat;
  }

  public void setNat(NatInfo nat) {
    this.nat = nat;
  }


  public Step network(NetworkInfo network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public NetworkInfo getNetwork() {
    return network;
  }

  public void setNetwork(NetworkInfo network) {
    this.network = network;
  }


  public Step projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Project ID that contains the configuration this step is validating.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public Step proxyConnection(ProxyConnectionInfo proxyConnection) {
    this.proxyConnection = proxyConnection;
    return this;
  }

  /**
   * Get proxyConnection
   * @return proxyConnection
   */
  @javax.annotation.Nullable
  public ProxyConnectionInfo getProxyConnection() {
    return proxyConnection;
  }

  public void setProxyConnection(ProxyConnectionInfo proxyConnection) {
    this.proxyConnection = proxyConnection;
  }


  public Step route(RouteInfo route) {
    this.route = route;
    return this;
  }

  /**
   * Get route
   * @return route
   */
  @javax.annotation.Nullable
  public RouteInfo getRoute() {
    return route;
  }

  public void setRoute(RouteInfo route) {
    this.route = route;
  }


  public Step state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Each step is in one of the pre-defined states.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Step storageBucket(StorageBucketInfo storageBucket) {
    this.storageBucket = storageBucket;
    return this;
  }

  /**
   * Get storageBucket
   * @return storageBucket
   */
  @javax.annotation.Nullable
  public StorageBucketInfo getStorageBucket() {
    return storageBucket;
  }

  public void setStorageBucket(StorageBucketInfo storageBucket) {
    this.storageBucket = storageBucket;
  }


  public Step vpcConnector(VpcConnectorInfo vpcConnector) {
    this.vpcConnector = vpcConnector;
    return this;
  }

  /**
   * Get vpcConnector
   * @return vpcConnector
   */
  @javax.annotation.Nullable
  public VpcConnectorInfo getVpcConnector() {
    return vpcConnector;
  }

  public void setVpcConnector(VpcConnectorInfo vpcConnector) {
    this.vpcConnector = vpcConnector;
  }


  public Step vpnGateway(VpnGatewayInfo vpnGateway) {
    this.vpnGateway = vpnGateway;
    return this;
  }

  /**
   * Get vpnGateway
   * @return vpnGateway
   */
  @javax.annotation.Nullable
  public VpnGatewayInfo getVpnGateway() {
    return vpnGateway;
  }

  public void setVpnGateway(VpnGatewayInfo vpnGateway) {
    this.vpnGateway = vpnGateway;
  }


  public Step vpnTunnel(VpnTunnelInfo vpnTunnel) {
    this.vpnTunnel = vpnTunnel;
    return this;
  }

  /**
   * Get vpnTunnel
   * @return vpnTunnel
   */
  @javax.annotation.Nullable
  public VpnTunnelInfo getVpnTunnel() {
    return vpnTunnel;
  }

  public void setVpnTunnel(VpnTunnelInfo vpnTunnel) {
    this.vpnTunnel = vpnTunnel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Step step = (Step) o;
    return Objects.equals(this.abort, step.abort) &&
        Objects.equals(this.appEngineVersion, step.appEngineVersion) &&
        Objects.equals(this.causesDrop, step.causesDrop) &&
        Objects.equals(this.cloudFunction, step.cloudFunction) &&
        Objects.equals(this.cloudRunRevision, step.cloudRunRevision) &&
        Objects.equals(this.cloudSqlInstance, step.cloudSqlInstance) &&
        Objects.equals(this.deliver, step.deliver) &&
        Objects.equals(this.description, step.description) &&
        Objects.equals(this.drop, step.drop) &&
        Objects.equals(this.endpoint, step.endpoint) &&
        Objects.equals(this.firewall, step.firewall) &&
        Objects.equals(this.forward, step.forward) &&
        Objects.equals(this.forwardingRule, step.forwardingRule) &&
        Objects.equals(this.gkeMaster, step.gkeMaster) &&
        Objects.equals(this.googleService, step.googleService) &&
        Objects.equals(this.instance, step.instance) &&
        Objects.equals(this.loadBalancer, step.loadBalancer) &&
        Objects.equals(this.loadBalancerBackendInfo, step.loadBalancerBackendInfo) &&
        Objects.equals(this.nat, step.nat) &&
        Objects.equals(this.network, step.network) &&
        Objects.equals(this.projectId, step.projectId) &&
        Objects.equals(this.proxyConnection, step.proxyConnection) &&
        Objects.equals(this.route, step.route) &&
        Objects.equals(this.state, step.state) &&
        Objects.equals(this.storageBucket, step.storageBucket) &&
        Objects.equals(this.vpcConnector, step.vpcConnector) &&
        Objects.equals(this.vpnGateway, step.vpnGateway) &&
        Objects.equals(this.vpnTunnel, step.vpnTunnel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abort, appEngineVersion, causesDrop, cloudFunction, cloudRunRevision, cloudSqlInstance, deliver, description, drop, endpoint, firewall, forward, forwardingRule, gkeMaster, googleService, instance, loadBalancer, loadBalancerBackendInfo, nat, network, projectId, proxyConnection, route, state, storageBucket, vpcConnector, vpnGateway, vpnTunnel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Step {\n");
    sb.append("    abort: ").append(toIndentedString(abort)).append("\n");
    sb.append("    appEngineVersion: ").append(toIndentedString(appEngineVersion)).append("\n");
    sb.append("    causesDrop: ").append(toIndentedString(causesDrop)).append("\n");
    sb.append("    cloudFunction: ").append(toIndentedString(cloudFunction)).append("\n");
    sb.append("    cloudRunRevision: ").append(toIndentedString(cloudRunRevision)).append("\n");
    sb.append("    cloudSqlInstance: ").append(toIndentedString(cloudSqlInstance)).append("\n");
    sb.append("    deliver: ").append(toIndentedString(deliver)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    drop: ").append(toIndentedString(drop)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    firewall: ").append(toIndentedString(firewall)).append("\n");
    sb.append("    forward: ").append(toIndentedString(forward)).append("\n");
    sb.append("    forwardingRule: ").append(toIndentedString(forwardingRule)).append("\n");
    sb.append("    gkeMaster: ").append(toIndentedString(gkeMaster)).append("\n");
    sb.append("    googleService: ").append(toIndentedString(googleService)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    loadBalancer: ").append(toIndentedString(loadBalancer)).append("\n");
    sb.append("    loadBalancerBackendInfo: ").append(toIndentedString(loadBalancerBackendInfo)).append("\n");
    sb.append("    nat: ").append(toIndentedString(nat)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    proxyConnection: ").append(toIndentedString(proxyConnection)).append("\n");
    sb.append("    route: ").append(toIndentedString(route)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storageBucket: ").append(toIndentedString(storageBucket)).append("\n");
    sb.append("    vpcConnector: ").append(toIndentedString(vpcConnector)).append("\n");
    sb.append("    vpnGateway: ").append(toIndentedString(vpnGateway)).append("\n");
    sb.append("    vpnTunnel: ").append(toIndentedString(vpnTunnel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abort");
    openapiFields.add("appEngineVersion");
    openapiFields.add("causesDrop");
    openapiFields.add("cloudFunction");
    openapiFields.add("cloudRunRevision");
    openapiFields.add("cloudSqlInstance");
    openapiFields.add("deliver");
    openapiFields.add("description");
    openapiFields.add("drop");
    openapiFields.add("endpoint");
    openapiFields.add("firewall");
    openapiFields.add("forward");
    openapiFields.add("forwardingRule");
    openapiFields.add("gkeMaster");
    openapiFields.add("googleService");
    openapiFields.add("instance");
    openapiFields.add("loadBalancer");
    openapiFields.add("loadBalancerBackendInfo");
    openapiFields.add("nat");
    openapiFields.add("network");
    openapiFields.add("projectId");
    openapiFields.add("proxyConnection");
    openapiFields.add("route");
    openapiFields.add("state");
    openapiFields.add("storageBucket");
    openapiFields.add("vpcConnector");
    openapiFields.add("vpnGateway");
    openapiFields.add("vpnTunnel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Step
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Step.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Step is not found in the empty JSON string", Step.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Step.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Step` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `abort`
      if (jsonObj.get("abort") != null && !jsonObj.get("abort").isJsonNull()) {
        AbortInfo.validateJsonElement(jsonObj.get("abort"));
      }
      // validate the optional field `appEngineVersion`
      if (jsonObj.get("appEngineVersion") != null && !jsonObj.get("appEngineVersion").isJsonNull()) {
        AppEngineVersionInfo.validateJsonElement(jsonObj.get("appEngineVersion"));
      }
      // validate the optional field `cloudFunction`
      if (jsonObj.get("cloudFunction") != null && !jsonObj.get("cloudFunction").isJsonNull()) {
        CloudFunctionInfo.validateJsonElement(jsonObj.get("cloudFunction"));
      }
      // validate the optional field `cloudRunRevision`
      if (jsonObj.get("cloudRunRevision") != null && !jsonObj.get("cloudRunRevision").isJsonNull()) {
        CloudRunRevisionInfo.validateJsonElement(jsonObj.get("cloudRunRevision"));
      }
      // validate the optional field `cloudSqlInstance`
      if (jsonObj.get("cloudSqlInstance") != null && !jsonObj.get("cloudSqlInstance").isJsonNull()) {
        CloudSQLInstanceInfo.validateJsonElement(jsonObj.get("cloudSqlInstance"));
      }
      // validate the optional field `deliver`
      if (jsonObj.get("deliver") != null && !jsonObj.get("deliver").isJsonNull()) {
        DeliverInfo.validateJsonElement(jsonObj.get("deliver"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `drop`
      if (jsonObj.get("drop") != null && !jsonObj.get("drop").isJsonNull()) {
        DropInfo.validateJsonElement(jsonObj.get("drop"));
      }
      // validate the optional field `endpoint`
      if (jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) {
        EndpointInfo.validateJsonElement(jsonObj.get("endpoint"));
      }
      // validate the optional field `firewall`
      if (jsonObj.get("firewall") != null && !jsonObj.get("firewall").isJsonNull()) {
        FirewallInfo.validateJsonElement(jsonObj.get("firewall"));
      }
      // validate the optional field `forward`
      if (jsonObj.get("forward") != null && !jsonObj.get("forward").isJsonNull()) {
        ForwardInfo.validateJsonElement(jsonObj.get("forward"));
      }
      // validate the optional field `forwardingRule`
      if (jsonObj.get("forwardingRule") != null && !jsonObj.get("forwardingRule").isJsonNull()) {
        ForwardingRuleInfo.validateJsonElement(jsonObj.get("forwardingRule"));
      }
      // validate the optional field `gkeMaster`
      if (jsonObj.get("gkeMaster") != null && !jsonObj.get("gkeMaster").isJsonNull()) {
        GKEMasterInfo.validateJsonElement(jsonObj.get("gkeMaster"));
      }
      // validate the optional field `googleService`
      if (jsonObj.get("googleService") != null && !jsonObj.get("googleService").isJsonNull()) {
        GoogleServiceInfo.validateJsonElement(jsonObj.get("googleService"));
      }
      // validate the optional field `instance`
      if (jsonObj.get("instance") != null && !jsonObj.get("instance").isJsonNull()) {
        InstanceInfo.validateJsonElement(jsonObj.get("instance"));
      }
      // validate the optional field `loadBalancer`
      if (jsonObj.get("loadBalancer") != null && !jsonObj.get("loadBalancer").isJsonNull()) {
        LoadBalancerInfo.validateJsonElement(jsonObj.get("loadBalancer"));
      }
      // validate the optional field `loadBalancerBackendInfo`
      if (jsonObj.get("loadBalancerBackendInfo") != null && !jsonObj.get("loadBalancerBackendInfo").isJsonNull()) {
        LoadBalancerBackendInfo.validateJsonElement(jsonObj.get("loadBalancerBackendInfo"));
      }
      // validate the optional field `nat`
      if (jsonObj.get("nat") != null && !jsonObj.get("nat").isJsonNull()) {
        NatInfo.validateJsonElement(jsonObj.get("nat"));
      }
      // validate the optional field `network`
      if (jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) {
        NetworkInfo.validateJsonElement(jsonObj.get("network"));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      // validate the optional field `proxyConnection`
      if (jsonObj.get("proxyConnection") != null && !jsonObj.get("proxyConnection").isJsonNull()) {
        ProxyConnectionInfo.validateJsonElement(jsonObj.get("proxyConnection"));
      }
      // validate the optional field `route`
      if (jsonObj.get("route") != null && !jsonObj.get("route").isJsonNull()) {
        RouteInfo.validateJsonElement(jsonObj.get("route"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `storageBucket`
      if (jsonObj.get("storageBucket") != null && !jsonObj.get("storageBucket").isJsonNull()) {
        StorageBucketInfo.validateJsonElement(jsonObj.get("storageBucket"));
      }
      // validate the optional field `vpcConnector`
      if (jsonObj.get("vpcConnector") != null && !jsonObj.get("vpcConnector").isJsonNull()) {
        VpcConnectorInfo.validateJsonElement(jsonObj.get("vpcConnector"));
      }
      // validate the optional field `vpnGateway`
      if (jsonObj.get("vpnGateway") != null && !jsonObj.get("vpnGateway").isJsonNull()) {
        VpnGatewayInfo.validateJsonElement(jsonObj.get("vpnGateway"));
      }
      // validate the optional field `vpnTunnel`
      if (jsonObj.get("vpnTunnel") != null && !jsonObj.get("vpnTunnel").isJsonNull()) {
        VpnTunnelInfo.validateJsonElement(jsonObj.get("vpnTunnel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Step.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Step' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Step> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Step.class));

       return (TypeAdapter<T>) new TypeAdapter<Step>() {
           @Override
           public void write(JsonWriter out, Step value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Step read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Step given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Step
   * @throws IOException if the JSON string is invalid with respect to Step
   */
  public static Step fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Step.class);
  }

  /**
   * Convert an instance of Step to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

