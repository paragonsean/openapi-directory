/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.Trace;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Results of the configuration analysis from the last run of the test.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:04.582710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReachabilityDetails {
  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Status error;

  /**
   * The overall result of the test&#39;s configuration analysis.
   */
  @JsonAdapter(ResultEnum.Adapter.class)
  public enum ResultEnum {
    RESULT_UNSPECIFIED("RESULT_UNSPECIFIED"),
    
    REACHABLE("REACHABLE"),
    
    UNREACHABLE("UNREACHABLE"),
    
    AMBIGUOUS("AMBIGUOUS"),
    
    UNDETERMINED("UNDETERMINED");

    private String value;

    ResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultEnum fromValue(String value) {
      for (ResultEnum b : ResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ResultEnum result;

  public static final String SERIALIZED_NAME_TRACES = "traces";
  @SerializedName(SERIALIZED_NAME_TRACES)
  private List<Trace> traces = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERIFY_TIME = "verifyTime";
  @SerializedName(SERIALIZED_NAME_VERIFY_TIME)
  private String verifyTime;

  public ReachabilityDetails() {
  }

  public ReachabilityDetails error(Status error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Status getError() {
    return error;
  }

  public void setError(Status error) {
    this.error = error;
  }


  public ReachabilityDetails result(ResultEnum result) {
    this.result = result;
    return this;
  }

  /**
   * The overall result of the test&#39;s configuration analysis.
   * @return result
   */
  @javax.annotation.Nullable
  public ResultEnum getResult() {
    return result;
  }

  public void setResult(ResultEnum result) {
    this.result = result;
  }


  public ReachabilityDetails traces(List<Trace> traces) {
    this.traces = traces;
    return this;
  }

  public ReachabilityDetails addTracesItem(Trace tracesItem) {
    if (this.traces == null) {
      this.traces = new ArrayList<>();
    }
    this.traces.add(tracesItem);
    return this;
  }

  /**
   * Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
   * @return traces
   */
  @javax.annotation.Nullable
  public List<Trace> getTraces() {
    return traces;
  }

  public void setTraces(List<Trace> traces) {
    this.traces = traces;
  }


  public ReachabilityDetails verifyTime(String verifyTime) {
    this.verifyTime = verifyTime;
    return this;
  }

  /**
   * The time of the configuration analysis.
   * @return verifyTime
   */
  @javax.annotation.Nullable
  public String getVerifyTime() {
    return verifyTime;
  }

  public void setVerifyTime(String verifyTime) {
    this.verifyTime = verifyTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReachabilityDetails reachabilityDetails = (ReachabilityDetails) o;
    return Objects.equals(this.error, reachabilityDetails.error) &&
        Objects.equals(this.result, reachabilityDetails.result) &&
        Objects.equals(this.traces, reachabilityDetails.traces) &&
        Objects.equals(this.verifyTime, reachabilityDetails.verifyTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, result, traces, verifyTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReachabilityDetails {\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    traces: ").append(toIndentedString(traces)).append("\n");
    sb.append("    verifyTime: ").append(toIndentedString(verifyTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error");
    openapiFields.add("result");
    openapiFields.add("traces");
    openapiFields.add("verifyTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReachabilityDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReachabilityDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReachabilityDetails is not found in the empty JSON string", ReachabilityDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReachabilityDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReachabilityDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        ResultEnum.validateJsonElement(jsonObj.get("result"));
      }
      if (jsonObj.get("traces") != null && !jsonObj.get("traces").isJsonNull()) {
        JsonArray jsonArraytraces = jsonObj.getAsJsonArray("traces");
        if (jsonArraytraces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("traces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `traces` to be an array in the JSON string but got `%s`", jsonObj.get("traces").toString()));
          }

          // validate the optional field `traces` (array)
          for (int i = 0; i < jsonArraytraces.size(); i++) {
            Trace.validateJsonElement(jsonArraytraces.get(i));
          };
        }
      }
      if ((jsonObj.get("verifyTime") != null && !jsonObj.get("verifyTime").isJsonNull()) && !jsonObj.get("verifyTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifyTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verifyTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReachabilityDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReachabilityDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReachabilityDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReachabilityDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ReachabilityDetails>() {
           @Override
           public void write(JsonWriter out, ReachabilityDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReachabilityDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReachabilityDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReachabilityDetails
   * @throws IOException if the JSON string is invalid with respect to ReachabilityDetails
   */
  public static ReachabilityDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReachabilityDetails.class);
  }

  /**
   * Convert an instance of ReachabilityDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

