/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LoadBalancerBackend;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * For display only. Metadata associated with a load balancer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:04.582710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoadBalancerInfo {
  /**
   * Type of load balancer&#39;s backend configuration.
   */
  @JsonAdapter(BackendTypeEnum.Adapter.class)
  public enum BackendTypeEnum {
    BACKEND_TYPE_UNSPECIFIED("BACKEND_TYPE_UNSPECIFIED"),
    
    BACKEND_SERVICE("BACKEND_SERVICE"),
    
    TARGET_POOL("TARGET_POOL"),
    
    TARGET_INSTANCE("TARGET_INSTANCE");

    private String value;

    BackendTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackendTypeEnum fromValue(String value) {
      for (BackendTypeEnum b : BackendTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackendTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackendTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackendTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackendTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackendTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKEND_TYPE = "backendType";
  @SerializedName(SERIALIZED_NAME_BACKEND_TYPE)
  private BackendTypeEnum backendType;

  public static final String SERIALIZED_NAME_BACKEND_URI = "backendUri";
  @SerializedName(SERIALIZED_NAME_BACKEND_URI)
  private String backendUri;

  public static final String SERIALIZED_NAME_BACKENDS = "backends";
  @SerializedName(SERIALIZED_NAME_BACKENDS)
  private List<LoadBalancerBackend> backends = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEALTH_CHECK_URI = "healthCheckUri";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_URI)
  private String healthCheckUri;

  /**
   * Type of the load balancer.
   */
  @JsonAdapter(LoadBalancerTypeEnum.Adapter.class)
  public enum LoadBalancerTypeEnum {
    LOAD_BALANCER_TYPE_UNSPECIFIED("LOAD_BALANCER_TYPE_UNSPECIFIED"),
    
    INTERNAL_TCP_UDP("INTERNAL_TCP_UDP"),
    
    NETWORK_TCP_UDP("NETWORK_TCP_UDP"),
    
    HTTP_PROXY("HTTP_PROXY"),
    
    TCP_PROXY("TCP_PROXY"),
    
    SSL_PROXY("SSL_PROXY");

    private String value;

    LoadBalancerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoadBalancerTypeEnum fromValue(String value) {
      for (LoadBalancerTypeEnum b : LoadBalancerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoadBalancerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoadBalancerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoadBalancerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoadBalancerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoadBalancerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOAD_BALANCER_TYPE = "loadBalancerType";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_TYPE)
  private LoadBalancerTypeEnum loadBalancerType;

  public LoadBalancerInfo() {
  }

  public LoadBalancerInfo backendType(BackendTypeEnum backendType) {
    this.backendType = backendType;
    return this;
  }

  /**
   * Type of load balancer&#39;s backend configuration.
   * @return backendType
   */
  @javax.annotation.Nullable
  public BackendTypeEnum getBackendType() {
    return backendType;
  }

  public void setBackendType(BackendTypeEnum backendType) {
    this.backendType = backendType;
  }


  public LoadBalancerInfo backendUri(String backendUri) {
    this.backendUri = backendUri;
    return this;
  }

  /**
   * Backend configuration URI.
   * @return backendUri
   */
  @javax.annotation.Nullable
  public String getBackendUri() {
    return backendUri;
  }

  public void setBackendUri(String backendUri) {
    this.backendUri = backendUri;
  }


  public LoadBalancerInfo backends(List<LoadBalancerBackend> backends) {
    this.backends = backends;
    return this;
  }

  public LoadBalancerInfo addBackendsItem(LoadBalancerBackend backendsItem) {
    if (this.backends == null) {
      this.backends = new ArrayList<>();
    }
    this.backends.add(backendsItem);
    return this;
  }

  /**
   * Information for the loadbalancer backends.
   * @return backends
   */
  @javax.annotation.Nullable
  public List<LoadBalancerBackend> getBackends() {
    return backends;
  }

  public void setBackends(List<LoadBalancerBackend> backends) {
    this.backends = backends;
  }


  @Deprecated
  public LoadBalancerInfo healthCheckUri(String healthCheckUri) {
    this.healthCheckUri = healthCheckUri;
    return this;
  }

  /**
   * URI of the health check for the load balancer. Deprecated and no longer populated as different load balancer backends might have different health checks.
   * @return healthCheckUri
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getHealthCheckUri() {
    return healthCheckUri;
  }

  @Deprecated
  public void setHealthCheckUri(String healthCheckUri) {
    this.healthCheckUri = healthCheckUri;
  }


  public LoadBalancerInfo loadBalancerType(LoadBalancerTypeEnum loadBalancerType) {
    this.loadBalancerType = loadBalancerType;
    return this;
  }

  /**
   * Type of the load balancer.
   * @return loadBalancerType
   */
  @javax.annotation.Nullable
  public LoadBalancerTypeEnum getLoadBalancerType() {
    return loadBalancerType;
  }

  public void setLoadBalancerType(LoadBalancerTypeEnum loadBalancerType) {
    this.loadBalancerType = loadBalancerType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadBalancerInfo loadBalancerInfo = (LoadBalancerInfo) o;
    return Objects.equals(this.backendType, loadBalancerInfo.backendType) &&
        Objects.equals(this.backendUri, loadBalancerInfo.backendUri) &&
        Objects.equals(this.backends, loadBalancerInfo.backends) &&
        Objects.equals(this.healthCheckUri, loadBalancerInfo.healthCheckUri) &&
        Objects.equals(this.loadBalancerType, loadBalancerInfo.loadBalancerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendType, backendUri, backends, healthCheckUri, loadBalancerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadBalancerInfo {\n");
    sb.append("    backendType: ").append(toIndentedString(backendType)).append("\n");
    sb.append("    backendUri: ").append(toIndentedString(backendUri)).append("\n");
    sb.append("    backends: ").append(toIndentedString(backends)).append("\n");
    sb.append("    healthCheckUri: ").append(toIndentedString(healthCheckUri)).append("\n");
    sb.append("    loadBalancerType: ").append(toIndentedString(loadBalancerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendType");
    openapiFields.add("backendUri");
    openapiFields.add("backends");
    openapiFields.add("healthCheckUri");
    openapiFields.add("loadBalancerType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoadBalancerInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadBalancerInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadBalancerInfo is not found in the empty JSON string", LoadBalancerInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadBalancerInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadBalancerInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backendType") != null && !jsonObj.get("backendType").isJsonNull()) && !jsonObj.get("backendType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendType").toString()));
      }
      // validate the optional field `backendType`
      if (jsonObj.get("backendType") != null && !jsonObj.get("backendType").isJsonNull()) {
        BackendTypeEnum.validateJsonElement(jsonObj.get("backendType"));
      }
      if ((jsonObj.get("backendUri") != null && !jsonObj.get("backendUri").isJsonNull()) && !jsonObj.get("backendUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendUri").toString()));
      }
      if (jsonObj.get("backends") != null && !jsonObj.get("backends").isJsonNull()) {
        JsonArray jsonArraybackends = jsonObj.getAsJsonArray("backends");
        if (jsonArraybackends != null) {
          // ensure the json data is an array
          if (!jsonObj.get("backends").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `backends` to be an array in the JSON string but got `%s`", jsonObj.get("backends").toString()));
          }

          // validate the optional field `backends` (array)
          for (int i = 0; i < jsonArraybackends.size(); i++) {
            LoadBalancerBackend.validateJsonElement(jsonArraybackends.get(i));
          };
        }
      }
      if ((jsonObj.get("healthCheckUri") != null && !jsonObj.get("healthCheckUri").isJsonNull()) && !jsonObj.get("healthCheckUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthCheckUri").toString()));
      }
      if ((jsonObj.get("loadBalancerType") != null && !jsonObj.get("loadBalancerType").isJsonNull()) && !jsonObj.get("loadBalancerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadBalancerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loadBalancerType").toString()));
      }
      // validate the optional field `loadBalancerType`
      if (jsonObj.get("loadBalancerType") != null && !jsonObj.get("loadBalancerType").isJsonNull()) {
        LoadBalancerTypeEnum.validateJsonElement(jsonObj.get("loadBalancerType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadBalancerInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadBalancerInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadBalancerInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadBalancerInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadBalancerInfo>() {
           @Override
           public void write(JsonWriter out, LoadBalancerInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadBalancerInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoadBalancerInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoadBalancerInfo
   * @throws IOException if the JSON string is invalid with respect to LoadBalancerInfo
   */
  public static LoadBalancerInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadBalancerInfo.class);
  }

  /**
   * Convert an instance of LoadBalancerInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

