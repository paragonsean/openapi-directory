/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:04.582710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointInfo {
  public static final String SERIALIZED_NAME_DESTINATION_IP = "destinationIp";
  @SerializedName(SERIALIZED_NAME_DESTINATION_IP)
  private String destinationIp;

  public static final String SERIALIZED_NAME_DESTINATION_NETWORK_URI = "destinationNetworkUri";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NETWORK_URI)
  private String destinationNetworkUri;

  public static final String SERIALIZED_NAME_DESTINATION_PORT = "destinationPort";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PORT)
  private Integer destinationPort;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_SOURCE_AGENT_URI = "sourceAgentUri";
  @SerializedName(SERIALIZED_NAME_SOURCE_AGENT_URI)
  private String sourceAgentUri;

  public static final String SERIALIZED_NAME_SOURCE_IP = "sourceIp";
  @SerializedName(SERIALIZED_NAME_SOURCE_IP)
  private String sourceIp;

  public static final String SERIALIZED_NAME_SOURCE_NETWORK_URI = "sourceNetworkUri";
  @SerializedName(SERIALIZED_NAME_SOURCE_NETWORK_URI)
  private String sourceNetworkUri;

  public static final String SERIALIZED_NAME_SOURCE_PORT = "sourcePort";
  @SerializedName(SERIALIZED_NAME_SOURCE_PORT)
  private Integer sourcePort;

  public EndpointInfo() {
  }

  public EndpointInfo destinationIp(String destinationIp) {
    this.destinationIp = destinationIp;
    return this;
  }

  /**
   * Destination IP address.
   * @return destinationIp
   */
  @javax.annotation.Nullable
  public String getDestinationIp() {
    return destinationIp;
  }

  public void setDestinationIp(String destinationIp) {
    this.destinationIp = destinationIp;
  }


  public EndpointInfo destinationNetworkUri(String destinationNetworkUri) {
    this.destinationNetworkUri = destinationNetworkUri;
    return this;
  }

  /**
   * URI of the network where this packet is sent to.
   * @return destinationNetworkUri
   */
  @javax.annotation.Nullable
  public String getDestinationNetworkUri() {
    return destinationNetworkUri;
  }

  public void setDestinationNetworkUri(String destinationNetworkUri) {
    this.destinationNetworkUri = destinationNetworkUri;
  }


  public EndpointInfo destinationPort(Integer destinationPort) {
    this.destinationPort = destinationPort;
    return this;
  }

  /**
   * Destination port. Only valid when protocol is TCP or UDP.
   * @return destinationPort
   */
  @javax.annotation.Nullable
  public Integer getDestinationPort() {
    return destinationPort;
  }

  public void setDestinationPort(Integer destinationPort) {
    this.destinationPort = destinationPort;
  }


  public EndpointInfo protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * IP protocol in string format, for example: \&quot;TCP\&quot;, \&quot;UDP\&quot;, \&quot;ICMP\&quot;.
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public EndpointInfo sourceAgentUri(String sourceAgentUri) {
    this.sourceAgentUri = sourceAgentUri;
    return this;
  }

  /**
   * URI of the source telemetry agent this packet originates from.
   * @return sourceAgentUri
   */
  @javax.annotation.Nullable
  public String getSourceAgentUri() {
    return sourceAgentUri;
  }

  public void setSourceAgentUri(String sourceAgentUri) {
    this.sourceAgentUri = sourceAgentUri;
  }


  public EndpointInfo sourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
    return this;
  }

  /**
   * Source IP address.
   * @return sourceIp
   */
  @javax.annotation.Nullable
  public String getSourceIp() {
    return sourceIp;
  }

  public void setSourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
  }


  public EndpointInfo sourceNetworkUri(String sourceNetworkUri) {
    this.sourceNetworkUri = sourceNetworkUri;
    return this;
  }

  /**
   * URI of the network where this packet originates from.
   * @return sourceNetworkUri
   */
  @javax.annotation.Nullable
  public String getSourceNetworkUri() {
    return sourceNetworkUri;
  }

  public void setSourceNetworkUri(String sourceNetworkUri) {
    this.sourceNetworkUri = sourceNetworkUri;
  }


  public EndpointInfo sourcePort(Integer sourcePort) {
    this.sourcePort = sourcePort;
    return this;
  }

  /**
   * Source port. Only valid when protocol is TCP or UDP.
   * @return sourcePort
   */
  @javax.annotation.Nullable
  public Integer getSourcePort() {
    return sourcePort;
  }

  public void setSourcePort(Integer sourcePort) {
    this.sourcePort = sourcePort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointInfo endpointInfo = (EndpointInfo) o;
    return Objects.equals(this.destinationIp, endpointInfo.destinationIp) &&
        Objects.equals(this.destinationNetworkUri, endpointInfo.destinationNetworkUri) &&
        Objects.equals(this.destinationPort, endpointInfo.destinationPort) &&
        Objects.equals(this.protocol, endpointInfo.protocol) &&
        Objects.equals(this.sourceAgentUri, endpointInfo.sourceAgentUri) &&
        Objects.equals(this.sourceIp, endpointInfo.sourceIp) &&
        Objects.equals(this.sourceNetworkUri, endpointInfo.sourceNetworkUri) &&
        Objects.equals(this.sourcePort, endpointInfo.sourcePort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationIp, destinationNetworkUri, destinationPort, protocol, sourceAgentUri, sourceIp, sourceNetworkUri, sourcePort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointInfo {\n");
    sb.append("    destinationIp: ").append(toIndentedString(destinationIp)).append("\n");
    sb.append("    destinationNetworkUri: ").append(toIndentedString(destinationNetworkUri)).append("\n");
    sb.append("    destinationPort: ").append(toIndentedString(destinationPort)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    sourceAgentUri: ").append(toIndentedString(sourceAgentUri)).append("\n");
    sb.append("    sourceIp: ").append(toIndentedString(sourceIp)).append("\n");
    sb.append("    sourceNetworkUri: ").append(toIndentedString(sourceNetworkUri)).append("\n");
    sb.append("    sourcePort: ").append(toIndentedString(sourcePort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationIp");
    openapiFields.add("destinationNetworkUri");
    openapiFields.add("destinationPort");
    openapiFields.add("protocol");
    openapiFields.add("sourceAgentUri");
    openapiFields.add("sourceIp");
    openapiFields.add("sourceNetworkUri");
    openapiFields.add("sourcePort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointInfo is not found in the empty JSON string", EndpointInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destinationIp") != null && !jsonObj.get("destinationIp").isJsonNull()) && !jsonObj.get("destinationIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationIp").toString()));
      }
      if ((jsonObj.get("destinationNetworkUri") != null && !jsonObj.get("destinationNetworkUri").isJsonNull()) && !jsonObj.get("destinationNetworkUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationNetworkUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationNetworkUri").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("sourceAgentUri") != null && !jsonObj.get("sourceAgentUri").isJsonNull()) && !jsonObj.get("sourceAgentUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAgentUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAgentUri").toString()));
      }
      if ((jsonObj.get("sourceIp") != null && !jsonObj.get("sourceIp").isJsonNull()) && !jsonObj.get("sourceIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceIp").toString()));
      }
      if ((jsonObj.get("sourceNetworkUri") != null && !jsonObj.get("sourceNetworkUri").isJsonNull()) && !jsonObj.get("sourceNetworkUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceNetworkUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceNetworkUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointInfo>() {
           @Override
           public void write(JsonWriter out, EndpointInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointInfo
   * @throws IOException if the JSON string is invalid with respect to EndpointInfo
   */
  public static EndpointInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointInfo.class);
  }

  /**
   * Convert an instance of EndpointInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

