/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the final state \&quot;drop\&quot; and associated resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:04.582710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DropInfo {
  /**
   * Cause that the packet is dropped.
   */
  @JsonAdapter(CauseEnum.Adapter.class)
  public enum CauseEnum {
    CAUSE_UNSPECIFIED("CAUSE_UNSPECIFIED"),
    
    UNKNOWN_EXTERNAL_ADDRESS("UNKNOWN_EXTERNAL_ADDRESS"),
    
    FOREIGN_IP_DISALLOWED("FOREIGN_IP_DISALLOWED"),
    
    FIREWALL_RULE("FIREWALL_RULE"),
    
    NO_ROUTE("NO_ROUTE"),
    
    ROUTE_BLACKHOLE("ROUTE_BLACKHOLE"),
    
    ROUTE_WRONG_NETWORK("ROUTE_WRONG_NETWORK"),
    
    ROUTE_NEXT_HOP_IP_ADDRESS_NOT_RESOLVED("ROUTE_NEXT_HOP_IP_ADDRESS_NOT_RESOLVED"),
    
    ROUTE_NEXT_HOP_RESOURCE_NOT_FOUND("ROUTE_NEXT_HOP_RESOURCE_NOT_FOUND"),
    
    ROUTE_NEXT_HOP_INSTANCE_WRONG_NETWORK("ROUTE_NEXT_HOP_INSTANCE_WRONG_NETWORK"),
    
    ROUTE_NEXT_HOP_INSTANCE_NON_PRIMARY_IP("ROUTE_NEXT_HOP_INSTANCE_NON_PRIMARY_IP"),
    
    ROUTE_NEXT_HOP_FORWARDING_RULE_IP_MISMATCH("ROUTE_NEXT_HOP_FORWARDING_RULE_IP_MISMATCH"),
    
    ROUTE_NEXT_HOP_VPN_TUNNEL_NOT_ESTABLISHED("ROUTE_NEXT_HOP_VPN_TUNNEL_NOT_ESTABLISHED"),
    
    ROUTE_NEXT_HOP_FORWARDING_RULE_TYPE_INVALID("ROUTE_NEXT_HOP_FORWARDING_RULE_TYPE_INVALID"),
    
    NO_ROUTE_FROM_INTERNET_TO_PRIVATE_IPV6_ADDRESS("NO_ROUTE_FROM_INTERNET_TO_PRIVATE_IPV6_ADDRESS"),
    
    VPN_TUNNEL_LOCAL_SELECTOR_MISMATCH("VPN_TUNNEL_LOCAL_SELECTOR_MISMATCH"),
    
    VPN_TUNNEL_REMOTE_SELECTOR_MISMATCH("VPN_TUNNEL_REMOTE_SELECTOR_MISMATCH"),
    
    PRIVATE_TRAFFIC_TO_INTERNET("PRIVATE_TRAFFIC_TO_INTERNET"),
    
    PRIVATE_GOOGLE_ACCESS_DISALLOWED("PRIVATE_GOOGLE_ACCESS_DISALLOWED"),
    
    PRIVATE_GOOGLE_ACCESS_VIA_VPN_TUNNEL_UNSUPPORTED("PRIVATE_GOOGLE_ACCESS_VIA_VPN_TUNNEL_UNSUPPORTED"),
    
    NO_EXTERNAL_ADDRESS("NO_EXTERNAL_ADDRESS"),
    
    UNKNOWN_INTERNAL_ADDRESS("UNKNOWN_INTERNAL_ADDRESS"),
    
    FORWARDING_RULE_MISMATCH("FORWARDING_RULE_MISMATCH"),
    
    FORWARDING_RULE_NO_INSTANCES("FORWARDING_RULE_NO_INSTANCES"),
    
    FIREWALL_BLOCKING_LOAD_BALANCER_BACKEND_HEALTH_CHECK("FIREWALL_BLOCKING_LOAD_BALANCER_BACKEND_HEALTH_CHECK"),
    
    INSTANCE_NOT_RUNNING("INSTANCE_NOT_RUNNING"),
    
    GKE_CLUSTER_NOT_RUNNING("GKE_CLUSTER_NOT_RUNNING"),
    
    CLOUD_SQL_INSTANCE_NOT_RUNNING("CLOUD_SQL_INSTANCE_NOT_RUNNING"),
    
    TRAFFIC_TYPE_BLOCKED("TRAFFIC_TYPE_BLOCKED"),
    
    GKE_MASTER_UNAUTHORIZED_ACCESS("GKE_MASTER_UNAUTHORIZED_ACCESS"),
    
    CLOUD_SQL_INSTANCE_UNAUTHORIZED_ACCESS("CLOUD_SQL_INSTANCE_UNAUTHORIZED_ACCESS"),
    
    DROPPED_INSIDE_GKE_SERVICE("DROPPED_INSIDE_GKE_SERVICE"),
    
    DROPPED_INSIDE_CLOUD_SQL_SERVICE("DROPPED_INSIDE_CLOUD_SQL_SERVICE"),
    
    GOOGLE_MANAGED_SERVICE_NO_PEERING("GOOGLE_MANAGED_SERVICE_NO_PEERING"),
    
    GOOGLE_MANAGED_SERVICE_NO_PSC_ENDPOINT("GOOGLE_MANAGED_SERVICE_NO_PSC_ENDPOINT"),
    
    GKE_PSC_ENDPOINT_MISSING("GKE_PSC_ENDPOINT_MISSING"),
    
    CLOUD_SQL_INSTANCE_NO_IP_ADDRESS("CLOUD_SQL_INSTANCE_NO_IP_ADDRESS"),
    
    GKE_CONTROL_PLANE_REGION_MISMATCH("GKE_CONTROL_PLANE_REGION_MISMATCH"),
    
    PUBLIC_GKE_CONTROL_PLANE_TO_PRIVATE_DESTINATION("PUBLIC_GKE_CONTROL_PLANE_TO_PRIVATE_DESTINATION"),
    
    GKE_CONTROL_PLANE_NO_ROUTE("GKE_CONTROL_PLANE_NO_ROUTE"),
    
    CLOUD_SQL_INSTANCE_NOT_CONFIGURED_FOR_EXTERNAL_TRAFFIC("CLOUD_SQL_INSTANCE_NOT_CONFIGURED_FOR_EXTERNAL_TRAFFIC"),
    
    PUBLIC_CLOUD_SQL_INSTANCE_TO_PRIVATE_DESTINATION("PUBLIC_CLOUD_SQL_INSTANCE_TO_PRIVATE_DESTINATION"),
    
    CLOUD_SQL_INSTANCE_NO_ROUTE("CLOUD_SQL_INSTANCE_NO_ROUTE"),
    
    CLOUD_FUNCTION_NOT_ACTIVE("CLOUD_FUNCTION_NOT_ACTIVE"),
    
    VPC_CONNECTOR_NOT_SET("VPC_CONNECTOR_NOT_SET"),
    
    VPC_CONNECTOR_NOT_RUNNING("VPC_CONNECTOR_NOT_RUNNING"),
    
    FORWARDING_RULE_REGION_MISMATCH("FORWARDING_RULE_REGION_MISMATCH"),
    
    PSC_CONNECTION_NOT_ACCEPTED("PSC_CONNECTION_NOT_ACCEPTED"),
    
    PSC_ENDPOINT_ACCESSED_FROM_PEERED_NETWORK("PSC_ENDPOINT_ACCESSED_FROM_PEERED_NETWORK"),
    
    PSC_NEG_PRODUCER_ENDPOINT_NO_GLOBAL_ACCESS("PSC_NEG_PRODUCER_ENDPOINT_NO_GLOBAL_ACCESS"),
    
    PSC_NEG_PRODUCER_FORWARDING_RULE_MULTIPLE_PORTS("PSC_NEG_PRODUCER_FORWARDING_RULE_MULTIPLE_PORTS"),
    
    NO_NAT_SUBNETS_FOR_PSC_SERVICE_ATTACHMENT("NO_NAT_SUBNETS_FOR_PSC_SERVICE_ATTACHMENT"),
    
    HYBRID_NEG_NON_DYNAMIC_ROUTE_MATCHED("HYBRID_NEG_NON_DYNAMIC_ROUTE_MATCHED"),
    
    HYBRID_NEG_NON_LOCAL_DYNAMIC_ROUTE_MATCHED("HYBRID_NEG_NON_LOCAL_DYNAMIC_ROUTE_MATCHED"),
    
    CLOUD_RUN_REVISION_NOT_READY("CLOUD_RUN_REVISION_NOT_READY"),
    
    DROPPED_INSIDE_PSC_SERVICE_PRODUCER("DROPPED_INSIDE_PSC_SERVICE_PRODUCER"),
    
    LOAD_BALANCER_HAS_NO_PROXY_SUBNET("LOAD_BALANCER_HAS_NO_PROXY_SUBNET"),
    
    CLOUD_NAT_NO_ADDRESSES("CLOUD_NAT_NO_ADDRESSES");

    private String value;

    CauseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CauseEnum fromValue(String value) {
      for (CauseEnum b : CauseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CauseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CauseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CauseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CauseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CauseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CAUSE = "cause";
  @SerializedName(SERIALIZED_NAME_CAUSE)
  private CauseEnum cause;

  public static final String SERIALIZED_NAME_DESTINATION_IP = "destinationIp";
  @SerializedName(SERIALIZED_NAME_DESTINATION_IP)
  private String destinationIp;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_RESOURCE_URI = "resourceUri";
  @SerializedName(SERIALIZED_NAME_RESOURCE_URI)
  private String resourceUri;

  public static final String SERIALIZED_NAME_SOURCE_IP = "sourceIp";
  @SerializedName(SERIALIZED_NAME_SOURCE_IP)
  private String sourceIp;

  public DropInfo() {
  }

  public DropInfo cause(CauseEnum cause) {
    this.cause = cause;
    return this;
  }

  /**
   * Cause that the packet is dropped.
   * @return cause
   */
  @javax.annotation.Nullable
  public CauseEnum getCause() {
    return cause;
  }

  public void setCause(CauseEnum cause) {
    this.cause = cause;
  }


  public DropInfo destinationIp(String destinationIp) {
    this.destinationIp = destinationIp;
    return this;
  }

  /**
   * Destination IP address of the dropped packet (if relevant).
   * @return destinationIp
   */
  @javax.annotation.Nullable
  public String getDestinationIp() {
    return destinationIp;
  }

  public void setDestinationIp(String destinationIp) {
    this.destinationIp = destinationIp;
  }


  public DropInfo region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Region of the dropped packet (if relevant).
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public DropInfo resourceUri(String resourceUri) {
    this.resourceUri = resourceUri;
    return this;
  }

  /**
   * URI of the resource that caused the drop.
   * @return resourceUri
   */
  @javax.annotation.Nullable
  public String getResourceUri() {
    return resourceUri;
  }

  public void setResourceUri(String resourceUri) {
    this.resourceUri = resourceUri;
  }


  public DropInfo sourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
    return this;
  }

  /**
   * Source IP address of the dropped packet (if relevant).
   * @return sourceIp
   */
  @javax.annotation.Nullable
  public String getSourceIp() {
    return sourceIp;
  }

  public void setSourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DropInfo dropInfo = (DropInfo) o;
    return Objects.equals(this.cause, dropInfo.cause) &&
        Objects.equals(this.destinationIp, dropInfo.destinationIp) &&
        Objects.equals(this.region, dropInfo.region) &&
        Objects.equals(this.resourceUri, dropInfo.resourceUri) &&
        Objects.equals(this.sourceIp, dropInfo.sourceIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cause, destinationIp, region, resourceUri, sourceIp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DropInfo {\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    destinationIp: ").append(toIndentedString(destinationIp)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    resourceUri: ").append(toIndentedString(resourceUri)).append("\n");
    sb.append("    sourceIp: ").append(toIndentedString(sourceIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cause");
    openapiFields.add("destinationIp");
    openapiFields.add("region");
    openapiFields.add("resourceUri");
    openapiFields.add("sourceIp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DropInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DropInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DropInfo is not found in the empty JSON string", DropInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DropInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DropInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cause") != null && !jsonObj.get("cause").isJsonNull()) && !jsonObj.get("cause").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cause` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cause").toString()));
      }
      // validate the optional field `cause`
      if (jsonObj.get("cause") != null && !jsonObj.get("cause").isJsonNull()) {
        CauseEnum.validateJsonElement(jsonObj.get("cause"));
      }
      if ((jsonObj.get("destinationIp") != null && !jsonObj.get("destinationIp").isJsonNull()) && !jsonObj.get("destinationIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationIp").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("resourceUri") != null && !jsonObj.get("resourceUri").isJsonNull()) && !jsonObj.get("resourceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceUri").toString()));
      }
      if ((jsonObj.get("sourceIp") != null && !jsonObj.get("sourceIp").isJsonNull()) && !jsonObj.get("sourceIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceIp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DropInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DropInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DropInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DropInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DropInfo>() {
           @Override
           public void write(JsonWriter out, DropInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DropInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DropInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DropInfo
   * @throws IOException if the JSON string is invalid with respect to DropInfo
   */
  public static DropInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DropInfo.class);
  }

  /**
   * Convert an instance of DropInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

