/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * For display only. Metadata associated with the load balancer backend.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:04.582710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoadBalancerBackendInfo {
  public static final String SERIALIZED_NAME_BACKEND_BUCKET_URI = "backendBucketUri";
  @SerializedName(SERIALIZED_NAME_BACKEND_BUCKET_URI)
  private String backendBucketUri;

  public static final String SERIALIZED_NAME_BACKEND_SERVICE_URI = "backendServiceUri";
  @SerializedName(SERIALIZED_NAME_BACKEND_SERVICE_URI)
  private String backendServiceUri;

  /**
   * Output only. Health check firewalls configuration state for the backend. This is a result of the static firewall analysis (verifying that health check traffic from required IP ranges to the backend is allowed or not). The backend might still be unhealthy even if these firewalls are configured. Please refer to the documentation for more information: https://cloud.google.com/load-balancing/docs/firewall-rules
   */
  @JsonAdapter(HealthCheckFirewallsConfigStateEnum.Adapter.class)
  public enum HealthCheckFirewallsConfigStateEnum {
    HEALTH_CHECK_FIREWALLS_CONFIG_STATE_UNSPECIFIED("HEALTH_CHECK_FIREWALLS_CONFIG_STATE_UNSPECIFIED"),
    
    FIREWALLS_CONFIGURED("FIREWALLS_CONFIGURED"),
    
    FIREWALLS_PARTIALLY_CONFIGURED("FIREWALLS_PARTIALLY_CONFIGURED"),
    
    FIREWALLS_NOT_CONFIGURED("FIREWALLS_NOT_CONFIGURED"),
    
    FIREWALLS_UNSUPPORTED("FIREWALLS_UNSUPPORTED");

    private String value;

    HealthCheckFirewallsConfigStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HealthCheckFirewallsConfigStateEnum fromValue(String value) {
      for (HealthCheckFirewallsConfigStateEnum b : HealthCheckFirewallsConfigStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HealthCheckFirewallsConfigStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthCheckFirewallsConfigStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthCheckFirewallsConfigStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HealthCheckFirewallsConfigStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HealthCheckFirewallsConfigStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEALTH_CHECK_FIREWALLS_CONFIG_STATE = "healthCheckFirewallsConfigState";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_FIREWALLS_CONFIG_STATE)
  private HealthCheckFirewallsConfigStateEnum healthCheckFirewallsConfigState;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_URI = "healthCheckUri";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_URI)
  private String healthCheckUri;

  public static final String SERIALIZED_NAME_INSTANCE_GROUP_URI = "instanceGroupUri";
  @SerializedName(SERIALIZED_NAME_INSTANCE_GROUP_URI)
  private String instanceGroupUri;

  public static final String SERIALIZED_NAME_INSTANCE_URI = "instanceUri";
  @SerializedName(SERIALIZED_NAME_INSTANCE_URI)
  private String instanceUri;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_ENDPOINT_GROUP_URI = "networkEndpointGroupUri";
  @SerializedName(SERIALIZED_NAME_NETWORK_ENDPOINT_GROUP_URI)
  private String networkEndpointGroupUri;

  public static final String SERIALIZED_NAME_PSC_GOOGLE_API_TARGET = "pscGoogleApiTarget";
  @SerializedName(SERIALIZED_NAME_PSC_GOOGLE_API_TARGET)
  private String pscGoogleApiTarget;

  public static final String SERIALIZED_NAME_PSC_SERVICE_ATTACHMENT_URI = "pscServiceAttachmentUri";
  @SerializedName(SERIALIZED_NAME_PSC_SERVICE_ATTACHMENT_URI)
  private String pscServiceAttachmentUri;

  public LoadBalancerBackendInfo() {
  }

  public LoadBalancerBackendInfo(
     HealthCheckFirewallsConfigStateEnum healthCheckFirewallsConfigState
  ) {
    this();
    this.healthCheckFirewallsConfigState = healthCheckFirewallsConfigState;
  }

  public LoadBalancerBackendInfo backendBucketUri(String backendBucketUri) {
    this.backendBucketUri = backendBucketUri;
    return this;
  }

  /**
   * URI of the backend bucket this backend targets (if applicable).
   * @return backendBucketUri
   */
  @javax.annotation.Nullable
  public String getBackendBucketUri() {
    return backendBucketUri;
  }

  public void setBackendBucketUri(String backendBucketUri) {
    this.backendBucketUri = backendBucketUri;
  }


  public LoadBalancerBackendInfo backendServiceUri(String backendServiceUri) {
    this.backendServiceUri = backendServiceUri;
    return this;
  }

  /**
   * URI of the backend service this backend belongs to (if applicable).
   * @return backendServiceUri
   */
  @javax.annotation.Nullable
  public String getBackendServiceUri() {
    return backendServiceUri;
  }

  public void setBackendServiceUri(String backendServiceUri) {
    this.backendServiceUri = backendServiceUri;
  }


  /**
   * Output only. Health check firewalls configuration state for the backend. This is a result of the static firewall analysis (verifying that health check traffic from required IP ranges to the backend is allowed or not). The backend might still be unhealthy even if these firewalls are configured. Please refer to the documentation for more information: https://cloud.google.com/load-balancing/docs/firewall-rules
   * @return healthCheckFirewallsConfigState
   */
  @javax.annotation.Nullable
  public HealthCheckFirewallsConfigStateEnum getHealthCheckFirewallsConfigState() {
    return healthCheckFirewallsConfigState;
  }



  public LoadBalancerBackendInfo healthCheckUri(String healthCheckUri) {
    this.healthCheckUri = healthCheckUri;
    return this;
  }

  /**
   * URI of the health check attached to this backend (if applicable).
   * @return healthCheckUri
   */
  @javax.annotation.Nullable
  public String getHealthCheckUri() {
    return healthCheckUri;
  }

  public void setHealthCheckUri(String healthCheckUri) {
    this.healthCheckUri = healthCheckUri;
  }


  public LoadBalancerBackendInfo instanceGroupUri(String instanceGroupUri) {
    this.instanceGroupUri = instanceGroupUri;
    return this;
  }

  /**
   * URI of the instance group this backend belongs to (if applicable).
   * @return instanceGroupUri
   */
  @javax.annotation.Nullable
  public String getInstanceGroupUri() {
    return instanceGroupUri;
  }

  public void setInstanceGroupUri(String instanceGroupUri) {
    this.instanceGroupUri = instanceGroupUri;
  }


  public LoadBalancerBackendInfo instanceUri(String instanceUri) {
    this.instanceUri = instanceUri;
    return this;
  }

  /**
   * URI of the backend instance (if applicable). Populated for instance group backends, and zonal NEG backends.
   * @return instanceUri
   */
  @javax.annotation.Nullable
  public String getInstanceUri() {
    return instanceUri;
  }

  public void setInstanceUri(String instanceUri) {
    this.instanceUri = instanceUri;
  }


  public LoadBalancerBackendInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Display name of the backend. For example, it might be an instance name for the instance group backends, or an IP address and port for zonal network endpoint group backends.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LoadBalancerBackendInfo networkEndpointGroupUri(String networkEndpointGroupUri) {
    this.networkEndpointGroupUri = networkEndpointGroupUri;
    return this;
  }

  /**
   * URI of the network endpoint group this backend belongs to (if applicable).
   * @return networkEndpointGroupUri
   */
  @javax.annotation.Nullable
  public String getNetworkEndpointGroupUri() {
    return networkEndpointGroupUri;
  }

  public void setNetworkEndpointGroupUri(String networkEndpointGroupUri) {
    this.networkEndpointGroupUri = networkEndpointGroupUri;
  }


  public LoadBalancerBackendInfo pscGoogleApiTarget(String pscGoogleApiTarget) {
    this.pscGoogleApiTarget = pscGoogleApiTarget;
    return this;
  }

  /**
   * PSC Google API target this PSC NEG backend targets (if applicable).
   * @return pscGoogleApiTarget
   */
  @javax.annotation.Nullable
  public String getPscGoogleApiTarget() {
    return pscGoogleApiTarget;
  }

  public void setPscGoogleApiTarget(String pscGoogleApiTarget) {
    this.pscGoogleApiTarget = pscGoogleApiTarget;
  }


  public LoadBalancerBackendInfo pscServiceAttachmentUri(String pscServiceAttachmentUri) {
    this.pscServiceAttachmentUri = pscServiceAttachmentUri;
    return this;
  }

  /**
   * URI of the PSC service attachment this PSC NEG backend targets (if applicable).
   * @return pscServiceAttachmentUri
   */
  @javax.annotation.Nullable
  public String getPscServiceAttachmentUri() {
    return pscServiceAttachmentUri;
  }

  public void setPscServiceAttachmentUri(String pscServiceAttachmentUri) {
    this.pscServiceAttachmentUri = pscServiceAttachmentUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadBalancerBackendInfo loadBalancerBackendInfo = (LoadBalancerBackendInfo) o;
    return Objects.equals(this.backendBucketUri, loadBalancerBackendInfo.backendBucketUri) &&
        Objects.equals(this.backendServiceUri, loadBalancerBackendInfo.backendServiceUri) &&
        Objects.equals(this.healthCheckFirewallsConfigState, loadBalancerBackendInfo.healthCheckFirewallsConfigState) &&
        Objects.equals(this.healthCheckUri, loadBalancerBackendInfo.healthCheckUri) &&
        Objects.equals(this.instanceGroupUri, loadBalancerBackendInfo.instanceGroupUri) &&
        Objects.equals(this.instanceUri, loadBalancerBackendInfo.instanceUri) &&
        Objects.equals(this.name, loadBalancerBackendInfo.name) &&
        Objects.equals(this.networkEndpointGroupUri, loadBalancerBackendInfo.networkEndpointGroupUri) &&
        Objects.equals(this.pscGoogleApiTarget, loadBalancerBackendInfo.pscGoogleApiTarget) &&
        Objects.equals(this.pscServiceAttachmentUri, loadBalancerBackendInfo.pscServiceAttachmentUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendBucketUri, backendServiceUri, healthCheckFirewallsConfigState, healthCheckUri, instanceGroupUri, instanceUri, name, networkEndpointGroupUri, pscGoogleApiTarget, pscServiceAttachmentUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadBalancerBackendInfo {\n");
    sb.append("    backendBucketUri: ").append(toIndentedString(backendBucketUri)).append("\n");
    sb.append("    backendServiceUri: ").append(toIndentedString(backendServiceUri)).append("\n");
    sb.append("    healthCheckFirewallsConfigState: ").append(toIndentedString(healthCheckFirewallsConfigState)).append("\n");
    sb.append("    healthCheckUri: ").append(toIndentedString(healthCheckUri)).append("\n");
    sb.append("    instanceGroupUri: ").append(toIndentedString(instanceGroupUri)).append("\n");
    sb.append("    instanceUri: ").append(toIndentedString(instanceUri)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkEndpointGroupUri: ").append(toIndentedString(networkEndpointGroupUri)).append("\n");
    sb.append("    pscGoogleApiTarget: ").append(toIndentedString(pscGoogleApiTarget)).append("\n");
    sb.append("    pscServiceAttachmentUri: ").append(toIndentedString(pscServiceAttachmentUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendBucketUri");
    openapiFields.add("backendServiceUri");
    openapiFields.add("healthCheckFirewallsConfigState");
    openapiFields.add("healthCheckUri");
    openapiFields.add("instanceGroupUri");
    openapiFields.add("instanceUri");
    openapiFields.add("name");
    openapiFields.add("networkEndpointGroupUri");
    openapiFields.add("pscGoogleApiTarget");
    openapiFields.add("pscServiceAttachmentUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoadBalancerBackendInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadBalancerBackendInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadBalancerBackendInfo is not found in the empty JSON string", LoadBalancerBackendInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadBalancerBackendInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadBalancerBackendInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backendBucketUri") != null && !jsonObj.get("backendBucketUri").isJsonNull()) && !jsonObj.get("backendBucketUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendBucketUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendBucketUri").toString()));
      }
      if ((jsonObj.get("backendServiceUri") != null && !jsonObj.get("backendServiceUri").isJsonNull()) && !jsonObj.get("backendServiceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendServiceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendServiceUri").toString()));
      }
      if ((jsonObj.get("healthCheckFirewallsConfigState") != null && !jsonObj.get("healthCheckFirewallsConfigState").isJsonNull()) && !jsonObj.get("healthCheckFirewallsConfigState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckFirewallsConfigState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthCheckFirewallsConfigState").toString()));
      }
      // validate the optional field `healthCheckFirewallsConfigState`
      if (jsonObj.get("healthCheckFirewallsConfigState") != null && !jsonObj.get("healthCheckFirewallsConfigState").isJsonNull()) {
        HealthCheckFirewallsConfigStateEnum.validateJsonElement(jsonObj.get("healthCheckFirewallsConfigState"));
      }
      if ((jsonObj.get("healthCheckUri") != null && !jsonObj.get("healthCheckUri").isJsonNull()) && !jsonObj.get("healthCheckUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthCheckUri").toString()));
      }
      if ((jsonObj.get("instanceGroupUri") != null && !jsonObj.get("instanceGroupUri").isJsonNull()) && !jsonObj.get("instanceGroupUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceGroupUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceGroupUri").toString()));
      }
      if ((jsonObj.get("instanceUri") != null && !jsonObj.get("instanceUri").isJsonNull()) && !jsonObj.get("instanceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceUri").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("networkEndpointGroupUri") != null && !jsonObj.get("networkEndpointGroupUri").isJsonNull()) && !jsonObj.get("networkEndpointGroupUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkEndpointGroupUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkEndpointGroupUri").toString()));
      }
      if ((jsonObj.get("pscGoogleApiTarget") != null && !jsonObj.get("pscGoogleApiTarget").isJsonNull()) && !jsonObj.get("pscGoogleApiTarget").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pscGoogleApiTarget` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pscGoogleApiTarget").toString()));
      }
      if ((jsonObj.get("pscServiceAttachmentUri") != null && !jsonObj.get("pscServiceAttachmentUri").isJsonNull()) && !jsonObj.get("pscServiceAttachmentUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pscServiceAttachmentUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pscServiceAttachmentUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadBalancerBackendInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadBalancerBackendInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadBalancerBackendInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadBalancerBackendInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadBalancerBackendInfo>() {
           @Override
           public void write(JsonWriter out, LoadBalancerBackendInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadBalancerBackendInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoadBalancerBackendInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoadBalancerBackendInfo
   * @throws IOException if the JSON string is invalid with respect to LoadBalancerBackendInfo
   */
  public static LoadBalancerBackendInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadBalancerBackendInfo.class);
  }

  /**
   * Convert an instance of LoadBalancerBackendInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

