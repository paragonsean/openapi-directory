/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EndpointInfo;
import org.openapitools.client.model.Step;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Trace represents one simulated packet forwarding path. * Each trace contains multiple ordered steps. * Each step is in a particular state with associated configuration. * State is categorized as final or non-final states. * Each final state has a reason associated. * Each trace must end with a final state (the last step). &#x60;&#x60;&#x60; |---------------------Trace----------------------| Step1(State) Step2(State) --- StepN(State(final)) &#x60;&#x60;&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:04.582710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Trace {
  public static final String SERIALIZED_NAME_ENDPOINT_INFO = "endpointInfo";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_INFO)
  private EndpointInfo endpointInfo;

  public static final String SERIALIZED_NAME_FORWARD_TRACE_ID = "forwardTraceId";
  @SerializedName(SERIALIZED_NAME_FORWARD_TRACE_ID)
  private Integer forwardTraceId;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<Step> steps = new ArrayList<>();

  public Trace() {
  }

  public Trace endpointInfo(EndpointInfo endpointInfo) {
    this.endpointInfo = endpointInfo;
    return this;
  }

  /**
   * Get endpointInfo
   * @return endpointInfo
   */
  @javax.annotation.Nullable
  public EndpointInfo getEndpointInfo() {
    return endpointInfo;
  }

  public void setEndpointInfo(EndpointInfo endpointInfo) {
    this.endpointInfo = endpointInfo;
  }


  public Trace forwardTraceId(Integer forwardTraceId) {
    this.forwardTraceId = forwardTraceId;
    return this;
  }

  /**
   * ID of trace. For forward traces, this ID is unique for each trace. For return traces, it matches ID of associated forward trace. A single forward trace can be associated with none, one or more than one return trace.
   * @return forwardTraceId
   */
  @javax.annotation.Nullable
  public Integer getForwardTraceId() {
    return forwardTraceId;
  }

  public void setForwardTraceId(Integer forwardTraceId) {
    this.forwardTraceId = forwardTraceId;
  }


  public Trace steps(List<Step> steps) {
    this.steps = steps;
    return this;
  }

  public Trace addStepsItem(Step stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

  /**
   * A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
   * @return steps
   */
  @javax.annotation.Nullable
  public List<Step> getSteps() {
    return steps;
  }

  public void setSteps(List<Step> steps) {
    this.steps = steps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trace trace = (Trace) o;
    return Objects.equals(this.endpointInfo, trace.endpointInfo) &&
        Objects.equals(this.forwardTraceId, trace.forwardTraceId) &&
        Objects.equals(this.steps, trace.steps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointInfo, forwardTraceId, steps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trace {\n");
    sb.append("    endpointInfo: ").append(toIndentedString(endpointInfo)).append("\n");
    sb.append("    forwardTraceId: ").append(toIndentedString(forwardTraceId)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpointInfo");
    openapiFields.add("forwardTraceId");
    openapiFields.add("steps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Trace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Trace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Trace is not found in the empty JSON string", Trace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Trace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Trace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `endpointInfo`
      if (jsonObj.get("endpointInfo") != null && !jsonObj.get("endpointInfo").isJsonNull()) {
        EndpointInfo.validateJsonElement(jsonObj.get("endpointInfo"));
      }
      if (jsonObj.get("steps") != null && !jsonObj.get("steps").isJsonNull()) {
        JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
        if (jsonArraysteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("steps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
          }

          // validate the optional field `steps` (array)
          for (int i = 0; i < jsonArraysteps.size(); i++) {
            Step.validateJsonElement(jsonArraysteps.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Trace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Trace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Trace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Trace.class));

       return (TypeAdapter<T>) new TypeAdapter<Trace>() {
           @Override
           public void write(JsonWriter out, Trace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Trace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Trace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Trace
   * @throws IOException if the JSON string is invalid with respect to Trace
   */
  public static Trace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Trace.class);
  }

  /**
   * Convert an instance of Trace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

