/*
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the final state \&quot;abort\&quot; and associated resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:04.582710-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AbortInfo {
  /**
   * Causes that the analysis is aborted.
   */
  @JsonAdapter(CauseEnum.Adapter.class)
  public enum CauseEnum {
    CAUSE_UNSPECIFIED("CAUSE_UNSPECIFIED"),
    
    UNKNOWN_NETWORK("UNKNOWN_NETWORK"),
    
    UNKNOWN_PROJECT("UNKNOWN_PROJECT"),
    
    NO_EXTERNAL_IP("NO_EXTERNAL_IP"),
    
    UNINTENDED_DESTINATION("UNINTENDED_DESTINATION"),
    
    SOURCE_ENDPOINT_NOT_FOUND("SOURCE_ENDPOINT_NOT_FOUND"),
    
    MISMATCHED_SOURCE_NETWORK("MISMATCHED_SOURCE_NETWORK"),
    
    DESTINATION_ENDPOINT_NOT_FOUND("DESTINATION_ENDPOINT_NOT_FOUND"),
    
    MISMATCHED_DESTINATION_NETWORK("MISMATCHED_DESTINATION_NETWORK"),
    
    UNKNOWN_IP("UNKNOWN_IP"),
    
    SOURCE_IP_ADDRESS_NOT_IN_SOURCE_NETWORK("SOURCE_IP_ADDRESS_NOT_IN_SOURCE_NETWORK"),
    
    PERMISSION_DENIED("PERMISSION_DENIED"),
    
    PERMISSION_DENIED_NO_CLOUD_NAT_CONFIGS("PERMISSION_DENIED_NO_CLOUD_NAT_CONFIGS"),
    
    PERMISSION_DENIED_NO_NEG_ENDPOINT_CONFIGS("PERMISSION_DENIED_NO_NEG_ENDPOINT_CONFIGS"),
    
    NO_SOURCE_LOCATION("NO_SOURCE_LOCATION"),
    
    INVALID_ARGUMENT("INVALID_ARGUMENT"),
    
    TRACE_TOO_LONG("TRACE_TOO_LONG"),
    
    INTERNAL_ERROR("INTERNAL_ERROR"),
    
    UNSUPPORTED("UNSUPPORTED"),
    
    MISMATCHED_IP_VERSION("MISMATCHED_IP_VERSION"),
    
    GKE_KONNECTIVITY_PROXY_UNSUPPORTED("GKE_KONNECTIVITY_PROXY_UNSUPPORTED"),
    
    RESOURCE_CONFIG_NOT_FOUND("RESOURCE_CONFIG_NOT_FOUND"),
    
    VM_INSTANCE_CONFIG_NOT_FOUND("VM_INSTANCE_CONFIG_NOT_FOUND"),
    
    NETWORK_CONFIG_NOT_FOUND("NETWORK_CONFIG_NOT_FOUND"),
    
    FIREWALL_CONFIG_NOT_FOUND("FIREWALL_CONFIG_NOT_FOUND"),
    
    ROUTE_CONFIG_NOT_FOUND("ROUTE_CONFIG_NOT_FOUND"),
    
    GOOGLE_MANAGED_SERVICE_AMBIGUOUS_PSC_ENDPOINT("GOOGLE_MANAGED_SERVICE_AMBIGUOUS_PSC_ENDPOINT"),
    
    SOURCE_PSC_CLOUD_SQL_UNSUPPORTED("SOURCE_PSC_CLOUD_SQL_UNSUPPORTED"),
    
    SOURCE_FORWARDING_RULE_UNSUPPORTED("SOURCE_FORWARDING_RULE_UNSUPPORTED"),
    
    NON_ROUTABLE_IP_ADDRESS("NON_ROUTABLE_IP_ADDRESS");

    private String value;

    CauseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CauseEnum fromValue(String value) {
      for (CauseEnum b : CauseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CauseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CauseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CauseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CauseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CauseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CAUSE = "cause";
  @SerializedName(SERIALIZED_NAME_CAUSE)
  private CauseEnum cause;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_PROJECTS_MISSING_PERMISSION = "projectsMissingPermission";
  @SerializedName(SERIALIZED_NAME_PROJECTS_MISSING_PERMISSION)
  private List<String> projectsMissingPermission = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_URI = "resourceUri";
  @SerializedName(SERIALIZED_NAME_RESOURCE_URI)
  private String resourceUri;

  public AbortInfo() {
  }

  public AbortInfo cause(CauseEnum cause) {
    this.cause = cause;
    return this;
  }

  /**
   * Causes that the analysis is aborted.
   * @return cause
   */
  @javax.annotation.Nullable
  public CauseEnum getCause() {
    return cause;
  }

  public void setCause(CauseEnum cause) {
    this.cause = cause;
  }


  public AbortInfo ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * IP address that caused the abort.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public AbortInfo projectsMissingPermission(List<String> projectsMissingPermission) {
    this.projectsMissingPermission = projectsMissingPermission;
    return this;
  }

  public AbortInfo addProjectsMissingPermissionItem(String projectsMissingPermissionItem) {
    if (this.projectsMissingPermission == null) {
      this.projectsMissingPermission = new ArrayList<>();
    }
    this.projectsMissingPermission.add(projectsMissingPermissionItem);
    return this;
  }

  /**
   * List of project IDs the user specified in the request but lacks access to. In this case, analysis is aborted with the PERMISSION_DENIED cause.
   * @return projectsMissingPermission
   */
  @javax.annotation.Nullable
  public List<String> getProjectsMissingPermission() {
    return projectsMissingPermission;
  }

  public void setProjectsMissingPermission(List<String> projectsMissingPermission) {
    this.projectsMissingPermission = projectsMissingPermission;
  }


  public AbortInfo resourceUri(String resourceUri) {
    this.resourceUri = resourceUri;
    return this;
  }

  /**
   * URI of the resource that caused the abort.
   * @return resourceUri
   */
  @javax.annotation.Nullable
  public String getResourceUri() {
    return resourceUri;
  }

  public void setResourceUri(String resourceUri) {
    this.resourceUri = resourceUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbortInfo abortInfo = (AbortInfo) o;
    return Objects.equals(this.cause, abortInfo.cause) &&
        Objects.equals(this.ipAddress, abortInfo.ipAddress) &&
        Objects.equals(this.projectsMissingPermission, abortInfo.projectsMissingPermission) &&
        Objects.equals(this.resourceUri, abortInfo.resourceUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cause, ipAddress, projectsMissingPermission, resourceUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbortInfo {\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    projectsMissingPermission: ").append(toIndentedString(projectsMissingPermission)).append("\n");
    sb.append("    resourceUri: ").append(toIndentedString(resourceUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cause");
    openapiFields.add("ipAddress");
    openapiFields.add("projectsMissingPermission");
    openapiFields.add("resourceUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbortInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbortInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbortInfo is not found in the empty JSON string", AbortInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbortInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbortInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cause") != null && !jsonObj.get("cause").isJsonNull()) && !jsonObj.get("cause").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cause` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cause").toString()));
      }
      // validate the optional field `cause`
      if (jsonObj.get("cause") != null && !jsonObj.get("cause").isJsonNull()) {
        CauseEnum.validateJsonElement(jsonObj.get("cause"));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("projectsMissingPermission") != null && !jsonObj.get("projectsMissingPermission").isJsonNull() && !jsonObj.get("projectsMissingPermission").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectsMissingPermission` to be an array in the JSON string but got `%s`", jsonObj.get("projectsMissingPermission").toString()));
      }
      if ((jsonObj.get("resourceUri") != null && !jsonObj.get("resourceUri").isJsonNull()) && !jsonObj.get("resourceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbortInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbortInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbortInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbortInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AbortInfo>() {
           @Override
           public void write(JsonWriter out, AbortInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbortInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbortInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbortInfo
   * @throws IOException if the JSON string is invalid with respect to AbortInfo
   */
  public static AbortInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbortInfo.class);
  }

  /**
   * Convert an instance of AbortInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

