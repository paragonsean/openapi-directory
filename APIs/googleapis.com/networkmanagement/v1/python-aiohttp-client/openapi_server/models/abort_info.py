# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AbortInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cause: str=None, ip_address: str=None, projects_missing_permission: List[str]=None, resource_uri: str=None):
        """AbortInfo - a model defined in OpenAPI

        :param cause: The cause of this AbortInfo.
        :param ip_address: The ip_address of this AbortInfo.
        :param projects_missing_permission: The projects_missing_permission of this AbortInfo.
        :param resource_uri: The resource_uri of this AbortInfo.
        """
        self.openapi_types = {
            'cause': str,
            'ip_address': str,
            'projects_missing_permission': List[str],
            'resource_uri': str
        }

        self.attribute_map = {
            'cause': 'cause',
            'ip_address': 'ipAddress',
            'projects_missing_permission': 'projectsMissingPermission',
            'resource_uri': 'resourceUri'
        }

        self._cause = cause
        self._ip_address = ip_address
        self._projects_missing_permission = projects_missing_permission
        self._resource_uri = resource_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AbortInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AbortInfo of this AbortInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cause(self):
        """Gets the cause of this AbortInfo.

        Causes that the analysis is aborted.

        :return: The cause of this AbortInfo.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this AbortInfo.

        Causes that the analysis is aborted.

        :param cause: The cause of this AbortInfo.
        :type cause: str
        """
        allowed_values = ["CAUSE_UNSPECIFIED", "UNKNOWN_NETWORK", "UNKNOWN_PROJECT", "NO_EXTERNAL_IP", "UNINTENDED_DESTINATION", "SOURCE_ENDPOINT_NOT_FOUND", "MISMATCHED_SOURCE_NETWORK", "DESTINATION_ENDPOINT_NOT_FOUND", "MISMATCHED_DESTINATION_NETWORK", "UNKNOWN_IP", "SOURCE_IP_ADDRESS_NOT_IN_SOURCE_NETWORK", "PERMISSION_DENIED", "PERMISSION_DENIED_NO_CLOUD_NAT_CONFIGS", "PERMISSION_DENIED_NO_NEG_ENDPOINT_CONFIGS", "NO_SOURCE_LOCATION", "INVALID_ARGUMENT", "TRACE_TOO_LONG", "INTERNAL_ERROR", "UNSUPPORTED", "MISMATCHED_IP_VERSION", "GKE_KONNECTIVITY_PROXY_UNSUPPORTED", "RESOURCE_CONFIG_NOT_FOUND", "VM_INSTANCE_CONFIG_NOT_FOUND", "NETWORK_CONFIG_NOT_FOUND", "FIREWALL_CONFIG_NOT_FOUND", "ROUTE_CONFIG_NOT_FOUND", "GOOGLE_MANAGED_SERVICE_AMBIGUOUS_PSC_ENDPOINT", "SOURCE_PSC_CLOUD_SQL_UNSUPPORTED", "SOURCE_FORWARDING_RULE_UNSUPPORTED", "NON_ROUTABLE_IP_ADDRESS"]  # noqa: E501
        if cause not in allowed_values:
            raise ValueError(
                "Invalid value for `cause` ({0}), must be one of {1}"
                .format(cause, allowed_values)
            )

        self._cause = cause

    @property
    def ip_address(self):
        """Gets the ip_address of this AbortInfo.

        IP address that caused the abort.

        :return: The ip_address of this AbortInfo.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this AbortInfo.

        IP address that caused the abort.

        :param ip_address: The ip_address of this AbortInfo.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def projects_missing_permission(self):
        """Gets the projects_missing_permission of this AbortInfo.

        List of project IDs the user specified in the request but lacks access to. In this case, analysis is aborted with the PERMISSION_DENIED cause.

        :return: The projects_missing_permission of this AbortInfo.
        :rtype: List[str]
        """
        return self._projects_missing_permission

    @projects_missing_permission.setter
    def projects_missing_permission(self, projects_missing_permission):
        """Sets the projects_missing_permission of this AbortInfo.

        List of project IDs the user specified in the request but lacks access to. In this case, analysis is aborted with the PERMISSION_DENIED cause.

        :param projects_missing_permission: The projects_missing_permission of this AbortInfo.
        :type projects_missing_permission: List[str]
        """

        self._projects_missing_permission = projects_missing_permission

    @property
    def resource_uri(self):
        """Gets the resource_uri of this AbortInfo.

        URI of the resource that caused the abort.

        :return: The resource_uri of this AbortInfo.
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this AbortInfo.

        URI of the resource that caused the abort.

        :param resource_uri: The resource_uri of this AbortInfo.
        :type resource_uri: str
        """

        self._resource_uri = resource_uri
