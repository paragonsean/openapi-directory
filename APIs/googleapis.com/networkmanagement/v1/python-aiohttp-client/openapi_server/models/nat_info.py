# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NatInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nat_gateway_name: str=None, network_uri: str=None, new_destination_ip: str=None, new_destination_port: int=None, new_source_ip: str=None, new_source_port: int=None, old_destination_ip: str=None, old_destination_port: int=None, old_source_ip: str=None, old_source_port: int=None, protocol: str=None, router_uri: str=None, type: str=None):
        """NatInfo - a model defined in OpenAPI

        :param nat_gateway_name: The nat_gateway_name of this NatInfo.
        :param network_uri: The network_uri of this NatInfo.
        :param new_destination_ip: The new_destination_ip of this NatInfo.
        :param new_destination_port: The new_destination_port of this NatInfo.
        :param new_source_ip: The new_source_ip of this NatInfo.
        :param new_source_port: The new_source_port of this NatInfo.
        :param old_destination_ip: The old_destination_ip of this NatInfo.
        :param old_destination_port: The old_destination_port of this NatInfo.
        :param old_source_ip: The old_source_ip of this NatInfo.
        :param old_source_port: The old_source_port of this NatInfo.
        :param protocol: The protocol of this NatInfo.
        :param router_uri: The router_uri of this NatInfo.
        :param type: The type of this NatInfo.
        """
        self.openapi_types = {
            'nat_gateway_name': str,
            'network_uri': str,
            'new_destination_ip': str,
            'new_destination_port': int,
            'new_source_ip': str,
            'new_source_port': int,
            'old_destination_ip': str,
            'old_destination_port': int,
            'old_source_ip': str,
            'old_source_port': int,
            'protocol': str,
            'router_uri': str,
            'type': str
        }

        self.attribute_map = {
            'nat_gateway_name': 'natGatewayName',
            'network_uri': 'networkUri',
            'new_destination_ip': 'newDestinationIp',
            'new_destination_port': 'newDestinationPort',
            'new_source_ip': 'newSourceIp',
            'new_source_port': 'newSourcePort',
            'old_destination_ip': 'oldDestinationIp',
            'old_destination_port': 'oldDestinationPort',
            'old_source_ip': 'oldSourceIp',
            'old_source_port': 'oldSourcePort',
            'protocol': 'protocol',
            'router_uri': 'routerUri',
            'type': 'type'
        }

        self._nat_gateway_name = nat_gateway_name
        self._network_uri = network_uri
        self._new_destination_ip = new_destination_ip
        self._new_destination_port = new_destination_port
        self._new_source_ip = new_source_ip
        self._new_source_port = new_source_port
        self._old_destination_ip = old_destination_ip
        self._old_destination_port = old_destination_port
        self._old_source_ip = old_source_ip
        self._old_source_port = old_source_port
        self._protocol = protocol
        self._router_uri = router_uri
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NatInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NatInfo of this NatInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nat_gateway_name(self):
        """Gets the nat_gateway_name of this NatInfo.

        The name of Cloud NAT Gateway. Only valid when type is CLOUD_NAT.

        :return: The nat_gateway_name of this NatInfo.
        :rtype: str
        """
        return self._nat_gateway_name

    @nat_gateway_name.setter
    def nat_gateway_name(self, nat_gateway_name):
        """Sets the nat_gateway_name of this NatInfo.

        The name of Cloud NAT Gateway. Only valid when type is CLOUD_NAT.

        :param nat_gateway_name: The nat_gateway_name of this NatInfo.
        :type nat_gateway_name: str
        """

        self._nat_gateway_name = nat_gateway_name

    @property
    def network_uri(self):
        """Gets the network_uri of this NatInfo.

        URI of the network where NAT translation takes place.

        :return: The network_uri of this NatInfo.
        :rtype: str
        """
        return self._network_uri

    @network_uri.setter
    def network_uri(self, network_uri):
        """Sets the network_uri of this NatInfo.

        URI of the network where NAT translation takes place.

        :param network_uri: The network_uri of this NatInfo.
        :type network_uri: str
        """

        self._network_uri = network_uri

    @property
    def new_destination_ip(self):
        """Gets the new_destination_ip of this NatInfo.

        Destination IP address after NAT translation.

        :return: The new_destination_ip of this NatInfo.
        :rtype: str
        """
        return self._new_destination_ip

    @new_destination_ip.setter
    def new_destination_ip(self, new_destination_ip):
        """Sets the new_destination_ip of this NatInfo.

        Destination IP address after NAT translation.

        :param new_destination_ip: The new_destination_ip of this NatInfo.
        :type new_destination_ip: str
        """

        self._new_destination_ip = new_destination_ip

    @property
    def new_destination_port(self):
        """Gets the new_destination_port of this NatInfo.

        Destination port after NAT translation. Only valid when protocol is TCP or UDP.

        :return: The new_destination_port of this NatInfo.
        :rtype: int
        """
        return self._new_destination_port

    @new_destination_port.setter
    def new_destination_port(self, new_destination_port):
        """Sets the new_destination_port of this NatInfo.

        Destination port after NAT translation. Only valid when protocol is TCP or UDP.

        :param new_destination_port: The new_destination_port of this NatInfo.
        :type new_destination_port: int
        """

        self._new_destination_port = new_destination_port

    @property
    def new_source_ip(self):
        """Gets the new_source_ip of this NatInfo.

        Source IP address after NAT translation.

        :return: The new_source_ip of this NatInfo.
        :rtype: str
        """
        return self._new_source_ip

    @new_source_ip.setter
    def new_source_ip(self, new_source_ip):
        """Sets the new_source_ip of this NatInfo.

        Source IP address after NAT translation.

        :param new_source_ip: The new_source_ip of this NatInfo.
        :type new_source_ip: str
        """

        self._new_source_ip = new_source_ip

    @property
    def new_source_port(self):
        """Gets the new_source_port of this NatInfo.

        Source port after NAT translation. Only valid when protocol is TCP or UDP.

        :return: The new_source_port of this NatInfo.
        :rtype: int
        """
        return self._new_source_port

    @new_source_port.setter
    def new_source_port(self, new_source_port):
        """Sets the new_source_port of this NatInfo.

        Source port after NAT translation. Only valid when protocol is TCP or UDP.

        :param new_source_port: The new_source_port of this NatInfo.
        :type new_source_port: int
        """

        self._new_source_port = new_source_port

    @property
    def old_destination_ip(self):
        """Gets the old_destination_ip of this NatInfo.

        Destination IP address before NAT translation.

        :return: The old_destination_ip of this NatInfo.
        :rtype: str
        """
        return self._old_destination_ip

    @old_destination_ip.setter
    def old_destination_ip(self, old_destination_ip):
        """Sets the old_destination_ip of this NatInfo.

        Destination IP address before NAT translation.

        :param old_destination_ip: The old_destination_ip of this NatInfo.
        :type old_destination_ip: str
        """

        self._old_destination_ip = old_destination_ip

    @property
    def old_destination_port(self):
        """Gets the old_destination_port of this NatInfo.

        Destination port before NAT translation. Only valid when protocol is TCP or UDP.

        :return: The old_destination_port of this NatInfo.
        :rtype: int
        """
        return self._old_destination_port

    @old_destination_port.setter
    def old_destination_port(self, old_destination_port):
        """Sets the old_destination_port of this NatInfo.

        Destination port before NAT translation. Only valid when protocol is TCP or UDP.

        :param old_destination_port: The old_destination_port of this NatInfo.
        :type old_destination_port: int
        """

        self._old_destination_port = old_destination_port

    @property
    def old_source_ip(self):
        """Gets the old_source_ip of this NatInfo.

        Source IP address before NAT translation.

        :return: The old_source_ip of this NatInfo.
        :rtype: str
        """
        return self._old_source_ip

    @old_source_ip.setter
    def old_source_ip(self, old_source_ip):
        """Sets the old_source_ip of this NatInfo.

        Source IP address before NAT translation.

        :param old_source_ip: The old_source_ip of this NatInfo.
        :type old_source_ip: str
        """

        self._old_source_ip = old_source_ip

    @property
    def old_source_port(self):
        """Gets the old_source_port of this NatInfo.

        Source port before NAT translation. Only valid when protocol is TCP or UDP.

        :return: The old_source_port of this NatInfo.
        :rtype: int
        """
        return self._old_source_port

    @old_source_port.setter
    def old_source_port(self, old_source_port):
        """Sets the old_source_port of this NatInfo.

        Source port before NAT translation. Only valid when protocol is TCP or UDP.

        :param old_source_port: The old_source_port of this NatInfo.
        :type old_source_port: int
        """

        self._old_source_port = old_source_port

    @property
    def protocol(self):
        """Gets the protocol of this NatInfo.

        IP protocol in string format, for example: \"TCP\", \"UDP\", \"ICMP\".

        :return: The protocol of this NatInfo.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this NatInfo.

        IP protocol in string format, for example: \"TCP\", \"UDP\", \"ICMP\".

        :param protocol: The protocol of this NatInfo.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def router_uri(self):
        """Gets the router_uri of this NatInfo.

        Uri of the Cloud Router. Only valid when type is CLOUD_NAT.

        :return: The router_uri of this NatInfo.
        :rtype: str
        """
        return self._router_uri

    @router_uri.setter
    def router_uri(self, router_uri):
        """Sets the router_uri of this NatInfo.

        Uri of the Cloud Router. Only valid when type is CLOUD_NAT.

        :param router_uri: The router_uri of this NatInfo.
        :type router_uri: str
        """

        self._router_uri = router_uri

    @property
    def type(self):
        """Gets the type of this NatInfo.

        Type of NAT.

        :return: The type of this NatInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NatInfo.

        Type of NAT.

        :param type: The type of this NatInfo.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "INTERNAL_TO_EXTERNAL", "EXTERNAL_TO_INTERNAL", "CLOUD_NAT", "PRIVATE_SERVICE_CONNECT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
