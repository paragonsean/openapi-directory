# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_engine_version_endpoint import AppEngineVersionEndpoint
from openapi_server.models.cloud_function_endpoint import CloudFunctionEndpoint
from openapi_server.models.cloud_run_revision_endpoint import CloudRunRevisionEndpoint
from openapi_server import util


class Endpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_engine_version: AppEngineVersionEndpoint=None, cloud_function: CloudFunctionEndpoint=None, cloud_run_revision: CloudRunRevisionEndpoint=None, cloud_sql_instance: str=None, forwarding_rule: str=None, forwarding_rule_target: str=None, gke_master_cluster: str=None, instance: str=None, ip_address: str=None, load_balancer_id: str=None, load_balancer_type: str=None, network: str=None, network_type: str=None, port: int=None, project_id: str=None):
        """Endpoint - a model defined in OpenAPI

        :param app_engine_version: The app_engine_version of this Endpoint.
        :param cloud_function: The cloud_function of this Endpoint.
        :param cloud_run_revision: The cloud_run_revision of this Endpoint.
        :param cloud_sql_instance: The cloud_sql_instance of this Endpoint.
        :param forwarding_rule: The forwarding_rule of this Endpoint.
        :param forwarding_rule_target: The forwarding_rule_target of this Endpoint.
        :param gke_master_cluster: The gke_master_cluster of this Endpoint.
        :param instance: The instance of this Endpoint.
        :param ip_address: The ip_address of this Endpoint.
        :param load_balancer_id: The load_balancer_id of this Endpoint.
        :param load_balancer_type: The load_balancer_type of this Endpoint.
        :param network: The network of this Endpoint.
        :param network_type: The network_type of this Endpoint.
        :param port: The port of this Endpoint.
        :param project_id: The project_id of this Endpoint.
        """
        self.openapi_types = {
            'app_engine_version': AppEngineVersionEndpoint,
            'cloud_function': CloudFunctionEndpoint,
            'cloud_run_revision': CloudRunRevisionEndpoint,
            'cloud_sql_instance': str,
            'forwarding_rule': str,
            'forwarding_rule_target': str,
            'gke_master_cluster': str,
            'instance': str,
            'ip_address': str,
            'load_balancer_id': str,
            'load_balancer_type': str,
            'network': str,
            'network_type': str,
            'port': int,
            'project_id': str
        }

        self.attribute_map = {
            'app_engine_version': 'appEngineVersion',
            'cloud_function': 'cloudFunction',
            'cloud_run_revision': 'cloudRunRevision',
            'cloud_sql_instance': 'cloudSqlInstance',
            'forwarding_rule': 'forwardingRule',
            'forwarding_rule_target': 'forwardingRuleTarget',
            'gke_master_cluster': 'gkeMasterCluster',
            'instance': 'instance',
            'ip_address': 'ipAddress',
            'load_balancer_id': 'loadBalancerId',
            'load_balancer_type': 'loadBalancerType',
            'network': 'network',
            'network_type': 'networkType',
            'port': 'port',
            'project_id': 'projectId'
        }

        self._app_engine_version = app_engine_version
        self._cloud_function = cloud_function
        self._cloud_run_revision = cloud_run_revision
        self._cloud_sql_instance = cloud_sql_instance
        self._forwarding_rule = forwarding_rule
        self._forwarding_rule_target = forwarding_rule_target
        self._gke_master_cluster = gke_master_cluster
        self._instance = instance
        self._ip_address = ip_address
        self._load_balancer_id = load_balancer_id
        self._load_balancer_type = load_balancer_type
        self._network = network
        self._network_type = network_type
        self._port = port
        self._project_id = project_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Endpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Endpoint of this Endpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_engine_version(self):
        """Gets the app_engine_version of this Endpoint.


        :return: The app_engine_version of this Endpoint.
        :rtype: AppEngineVersionEndpoint
        """
        return self._app_engine_version

    @app_engine_version.setter
    def app_engine_version(self, app_engine_version):
        """Sets the app_engine_version of this Endpoint.


        :param app_engine_version: The app_engine_version of this Endpoint.
        :type app_engine_version: AppEngineVersionEndpoint
        """

        self._app_engine_version = app_engine_version

    @property
    def cloud_function(self):
        """Gets the cloud_function of this Endpoint.


        :return: The cloud_function of this Endpoint.
        :rtype: CloudFunctionEndpoint
        """
        return self._cloud_function

    @cloud_function.setter
    def cloud_function(self, cloud_function):
        """Sets the cloud_function of this Endpoint.


        :param cloud_function: The cloud_function of this Endpoint.
        :type cloud_function: CloudFunctionEndpoint
        """

        self._cloud_function = cloud_function

    @property
    def cloud_run_revision(self):
        """Gets the cloud_run_revision of this Endpoint.


        :return: The cloud_run_revision of this Endpoint.
        :rtype: CloudRunRevisionEndpoint
        """
        return self._cloud_run_revision

    @cloud_run_revision.setter
    def cloud_run_revision(self, cloud_run_revision):
        """Sets the cloud_run_revision of this Endpoint.


        :param cloud_run_revision: The cloud_run_revision of this Endpoint.
        :type cloud_run_revision: CloudRunRevisionEndpoint
        """

        self._cloud_run_revision = cloud_run_revision

    @property
    def cloud_sql_instance(self):
        """Gets the cloud_sql_instance of this Endpoint.

        A [Cloud SQL](https://cloud.google.com/sql) instance URI.

        :return: The cloud_sql_instance of this Endpoint.
        :rtype: str
        """
        return self._cloud_sql_instance

    @cloud_sql_instance.setter
    def cloud_sql_instance(self, cloud_sql_instance):
        """Sets the cloud_sql_instance of this Endpoint.

        A [Cloud SQL](https://cloud.google.com/sql) instance URI.

        :param cloud_sql_instance: The cloud_sql_instance of this Endpoint.
        :type cloud_sql_instance: str
        """

        self._cloud_sql_instance = cloud_sql_instance

    @property
    def forwarding_rule(self):
        """Gets the forwarding_rule of this Endpoint.

        A forwarding rule and its corresponding IP address represent the frontend configuration of a Google Cloud load balancer. Forwarding rules are also used for protocol forwarding, Private Service Connect and other network services to provide forwarding information in the control plane. Format: projects/{project}/global/forwardingRules/{id} or projects/{project}/regions/{region}/forwardingRules/{id}

        :return: The forwarding_rule of this Endpoint.
        :rtype: str
        """
        return self._forwarding_rule

    @forwarding_rule.setter
    def forwarding_rule(self, forwarding_rule):
        """Sets the forwarding_rule of this Endpoint.

        A forwarding rule and its corresponding IP address represent the frontend configuration of a Google Cloud load balancer. Forwarding rules are also used for protocol forwarding, Private Service Connect and other network services to provide forwarding information in the control plane. Format: projects/{project}/global/forwardingRules/{id} or projects/{project}/regions/{region}/forwardingRules/{id}

        :param forwarding_rule: The forwarding_rule of this Endpoint.
        :type forwarding_rule: str
        """

        self._forwarding_rule = forwarding_rule

    @property
    def forwarding_rule_target(self):
        """Gets the forwarding_rule_target of this Endpoint.

        Output only. Specifies the type of the target of the forwarding rule.

        :return: The forwarding_rule_target of this Endpoint.
        :rtype: str
        """
        return self._forwarding_rule_target

    @forwarding_rule_target.setter
    def forwarding_rule_target(self, forwarding_rule_target):
        """Sets the forwarding_rule_target of this Endpoint.

        Output only. Specifies the type of the target of the forwarding rule.

        :param forwarding_rule_target: The forwarding_rule_target of this Endpoint.
        :type forwarding_rule_target: str
        """
        allowed_values = ["FORWARDING_RULE_TARGET_UNSPECIFIED", "INSTANCE", "LOAD_BALANCER", "VPN_GATEWAY", "PSC"]  # noqa: E501
        if forwarding_rule_target not in allowed_values:
            raise ValueError(
                "Invalid value for `forwarding_rule_target` ({0}), must be one of {1}"
                .format(forwarding_rule_target, allowed_values)
            )

        self._forwarding_rule_target = forwarding_rule_target

    @property
    def gke_master_cluster(self):
        """Gets the gke_master_cluster of this Endpoint.

        A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).

        :return: The gke_master_cluster of this Endpoint.
        :rtype: str
        """
        return self._gke_master_cluster

    @gke_master_cluster.setter
    def gke_master_cluster(self, gke_master_cluster):
        """Sets the gke_master_cluster of this Endpoint.

        A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).

        :param gke_master_cluster: The gke_master_cluster of this Endpoint.
        :type gke_master_cluster: str
        """

        self._gke_master_cluster = gke_master_cluster

    @property
    def instance(self):
        """Gets the instance of this Endpoint.

        A Compute Engine instance URI.

        :return: The instance of this Endpoint.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this Endpoint.

        A Compute Engine instance URI.

        :param instance: The instance of this Endpoint.
        :type instance: str
        """

        self._instance = instance

    @property
    def ip_address(self):
        """Gets the ip_address of this Endpoint.

        The IP address of the endpoint, which can be an external or internal IP.

        :return: The ip_address of this Endpoint.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Endpoint.

        The IP address of the endpoint, which can be an external or internal IP.

        :param ip_address: The ip_address of this Endpoint.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def load_balancer_id(self):
        """Gets the load_balancer_id of this Endpoint.

        Output only. ID of the load balancer the forwarding rule points to. Empty for forwarding rules not related to load balancers.

        :return: The load_balancer_id of this Endpoint.
        :rtype: str
        """
        return self._load_balancer_id

    @load_balancer_id.setter
    def load_balancer_id(self, load_balancer_id):
        """Sets the load_balancer_id of this Endpoint.

        Output only. ID of the load balancer the forwarding rule points to. Empty for forwarding rules not related to load balancers.

        :param load_balancer_id: The load_balancer_id of this Endpoint.
        :type load_balancer_id: str
        """

        self._load_balancer_id = load_balancer_id

    @property
    def load_balancer_type(self):
        """Gets the load_balancer_type of this Endpoint.

        Output only. Type of the load balancer the forwarding rule points to.

        :return: The load_balancer_type of this Endpoint.
        :rtype: str
        """
        return self._load_balancer_type

    @load_balancer_type.setter
    def load_balancer_type(self, load_balancer_type):
        """Sets the load_balancer_type of this Endpoint.

        Output only. Type of the load balancer the forwarding rule points to.

        :param load_balancer_type: The load_balancer_type of this Endpoint.
        :type load_balancer_type: str
        """
        allowed_values = ["LOAD_BALANCER_TYPE_UNSPECIFIED", "HTTPS_ADVANCED_LOAD_BALANCER", "HTTPS_LOAD_BALANCER", "REGIONAL_HTTPS_LOAD_BALANCER", "INTERNAL_HTTPS_LOAD_BALANCER", "SSL_PROXY_LOAD_BALANCER", "TCP_PROXY_LOAD_BALANCER", "INTERNAL_TCP_PROXY_LOAD_BALANCER", "NETWORK_LOAD_BALANCER", "LEGACY_NETWORK_LOAD_BALANCER", "TCP_UDP_INTERNAL_LOAD_BALANCER"]  # noqa: E501
        if load_balancer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `load_balancer_type` ({0}), must be one of {1}"
                .format(load_balancer_type, allowed_values)
            )

        self._load_balancer_type = load_balancer_type

    @property
    def network(self):
        """Gets the network of this Endpoint.

        A Compute Engine network URI.

        :return: The network of this Endpoint.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Endpoint.

        A Compute Engine network URI.

        :param network: The network of this Endpoint.
        :type network: str
        """

        self._network = network

    @property
    def network_type(self):
        """Gets the network_type of this Endpoint.

        Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.

        :return: The network_type of this Endpoint.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this Endpoint.

        Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.

        :param network_type: The network_type of this Endpoint.
        :type network_type: str
        """
        allowed_values = ["NETWORK_TYPE_UNSPECIFIED", "GCP_NETWORK", "NON_GCP_NETWORK"]  # noqa: E501
        if network_type not in allowed_values:
            raise ValueError(
                "Invalid value for `network_type` ({0}), must be one of {1}"
                .format(network_type, allowed_values)
            )

        self._network_type = network_type

    @property
    def port(self):
        """Gets the port of this Endpoint.

        The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.

        :return: The port of this Endpoint.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Endpoint.

        The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.

        :param port: The port of this Endpoint.
        :type port: int
        """

        self._port = port

    @property
    def project_id(self):
        """Gets the project_id of this Endpoint.

        Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a Google Cloud project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.

        :return: The project_id of this Endpoint.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Endpoint.

        Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a Google Cloud project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.

        :param project_id: The project_id of this Endpoint.
        :type project_id: str
        """

        self._project_id = project_id
