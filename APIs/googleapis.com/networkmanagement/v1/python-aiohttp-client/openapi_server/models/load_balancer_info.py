# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.load_balancer_backend import LoadBalancerBackend
from openapi_server import util


class LoadBalancerInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_type: str=None, backend_uri: str=None, backends: List[LoadBalancerBackend]=None, health_check_uri: str=None, load_balancer_type: str=None):
        """LoadBalancerInfo - a model defined in OpenAPI

        :param backend_type: The backend_type of this LoadBalancerInfo.
        :param backend_uri: The backend_uri of this LoadBalancerInfo.
        :param backends: The backends of this LoadBalancerInfo.
        :param health_check_uri: The health_check_uri of this LoadBalancerInfo.
        :param load_balancer_type: The load_balancer_type of this LoadBalancerInfo.
        """
        self.openapi_types = {
            'backend_type': str,
            'backend_uri': str,
            'backends': List[LoadBalancerBackend],
            'health_check_uri': str,
            'load_balancer_type': str
        }

        self.attribute_map = {
            'backend_type': 'backendType',
            'backend_uri': 'backendUri',
            'backends': 'backends',
            'health_check_uri': 'healthCheckUri',
            'load_balancer_type': 'loadBalancerType'
        }

        self._backend_type = backend_type
        self._backend_uri = backend_uri
        self._backends = backends
        self._health_check_uri = health_check_uri
        self._load_balancer_type = load_balancer_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancerInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancerInfo of this LoadBalancerInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_type(self):
        """Gets the backend_type of this LoadBalancerInfo.

        Type of load balancer's backend configuration.

        :return: The backend_type of this LoadBalancerInfo.
        :rtype: str
        """
        return self._backend_type

    @backend_type.setter
    def backend_type(self, backend_type):
        """Sets the backend_type of this LoadBalancerInfo.

        Type of load balancer's backend configuration.

        :param backend_type: The backend_type of this LoadBalancerInfo.
        :type backend_type: str
        """
        allowed_values = ["BACKEND_TYPE_UNSPECIFIED", "BACKEND_SERVICE", "TARGET_POOL", "TARGET_INSTANCE"]  # noqa: E501
        if backend_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backend_type` ({0}), must be one of {1}"
                .format(backend_type, allowed_values)
            )

        self._backend_type = backend_type

    @property
    def backend_uri(self):
        """Gets the backend_uri of this LoadBalancerInfo.

        Backend configuration URI.

        :return: The backend_uri of this LoadBalancerInfo.
        :rtype: str
        """
        return self._backend_uri

    @backend_uri.setter
    def backend_uri(self, backend_uri):
        """Sets the backend_uri of this LoadBalancerInfo.

        Backend configuration URI.

        :param backend_uri: The backend_uri of this LoadBalancerInfo.
        :type backend_uri: str
        """

        self._backend_uri = backend_uri

    @property
    def backends(self):
        """Gets the backends of this LoadBalancerInfo.

        Information for the loadbalancer backends.

        :return: The backends of this LoadBalancerInfo.
        :rtype: List[LoadBalancerBackend]
        """
        return self._backends

    @backends.setter
    def backends(self, backends):
        """Sets the backends of this LoadBalancerInfo.

        Information for the loadbalancer backends.

        :param backends: The backends of this LoadBalancerInfo.
        :type backends: List[LoadBalancerBackend]
        """

        self._backends = backends

    @property
    def health_check_uri(self):
        """Gets the health_check_uri of this LoadBalancerInfo.

        URI of the health check for the load balancer. Deprecated and no longer populated as different load balancer backends might have different health checks.

        :return: The health_check_uri of this LoadBalancerInfo.
        :rtype: str
        """
        return self._health_check_uri

    @health_check_uri.setter
    def health_check_uri(self, health_check_uri):
        """Sets the health_check_uri of this LoadBalancerInfo.

        URI of the health check for the load balancer. Deprecated and no longer populated as different load balancer backends might have different health checks.

        :param health_check_uri: The health_check_uri of this LoadBalancerInfo.
        :type health_check_uri: str
        """

        self._health_check_uri = health_check_uri

    @property
    def load_balancer_type(self):
        """Gets the load_balancer_type of this LoadBalancerInfo.

        Type of the load balancer.

        :return: The load_balancer_type of this LoadBalancerInfo.
        :rtype: str
        """
        return self._load_balancer_type

    @load_balancer_type.setter
    def load_balancer_type(self, load_balancer_type):
        """Sets the load_balancer_type of this LoadBalancerInfo.

        Type of the load balancer.

        :param load_balancer_type: The load_balancer_type of this LoadBalancerInfo.
        :type load_balancer_type: str
        """
        allowed_values = ["LOAD_BALANCER_TYPE_UNSPECIFIED", "INTERNAL_TCP_UDP", "NETWORK_TCP_UDP", "HTTP_PROXY", "TCP_PROXY", "SSL_PROXY"]  # noqa: E501
        if load_balancer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `load_balancer_type` ({0}), must be one of {1}"
                .format(load_balancer_type, allowed_values)
            )

        self._load_balancer_type = load_balancer_type
