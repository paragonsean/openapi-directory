# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RouteInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dest_ip_range: str=None, dest_port_ranges: List[str]=None, display_name: str=None, instance_tags: List[str]=None, ncc_hub_uri: str=None, ncc_spoke_uri: str=None, network_uri: str=None, next_hop: str=None, next_hop_type: str=None, priority: int=None, protocols: List[str]=None, route_scope: str=None, route_type: str=None, src_ip_range: str=None, src_port_ranges: List[str]=None, uri: str=None):
        """RouteInfo - a model defined in OpenAPI

        :param dest_ip_range: The dest_ip_range of this RouteInfo.
        :param dest_port_ranges: The dest_port_ranges of this RouteInfo.
        :param display_name: The display_name of this RouteInfo.
        :param instance_tags: The instance_tags of this RouteInfo.
        :param ncc_hub_uri: The ncc_hub_uri of this RouteInfo.
        :param ncc_spoke_uri: The ncc_spoke_uri of this RouteInfo.
        :param network_uri: The network_uri of this RouteInfo.
        :param next_hop: The next_hop of this RouteInfo.
        :param next_hop_type: The next_hop_type of this RouteInfo.
        :param priority: The priority of this RouteInfo.
        :param protocols: The protocols of this RouteInfo.
        :param route_scope: The route_scope of this RouteInfo.
        :param route_type: The route_type of this RouteInfo.
        :param src_ip_range: The src_ip_range of this RouteInfo.
        :param src_port_ranges: The src_port_ranges of this RouteInfo.
        :param uri: The uri of this RouteInfo.
        """
        self.openapi_types = {
            'dest_ip_range': str,
            'dest_port_ranges': List[str],
            'display_name': str,
            'instance_tags': List[str],
            'ncc_hub_uri': str,
            'ncc_spoke_uri': str,
            'network_uri': str,
            'next_hop': str,
            'next_hop_type': str,
            'priority': int,
            'protocols': List[str],
            'route_scope': str,
            'route_type': str,
            'src_ip_range': str,
            'src_port_ranges': List[str],
            'uri': str
        }

        self.attribute_map = {
            'dest_ip_range': 'destIpRange',
            'dest_port_ranges': 'destPortRanges',
            'display_name': 'displayName',
            'instance_tags': 'instanceTags',
            'ncc_hub_uri': 'nccHubUri',
            'ncc_spoke_uri': 'nccSpokeUri',
            'network_uri': 'networkUri',
            'next_hop': 'nextHop',
            'next_hop_type': 'nextHopType',
            'priority': 'priority',
            'protocols': 'protocols',
            'route_scope': 'routeScope',
            'route_type': 'routeType',
            'src_ip_range': 'srcIpRange',
            'src_port_ranges': 'srcPortRanges',
            'uri': 'uri'
        }

        self._dest_ip_range = dest_ip_range
        self._dest_port_ranges = dest_port_ranges
        self._display_name = display_name
        self._instance_tags = instance_tags
        self._ncc_hub_uri = ncc_hub_uri
        self._ncc_spoke_uri = ncc_spoke_uri
        self._network_uri = network_uri
        self._next_hop = next_hop
        self._next_hop_type = next_hop_type
        self._priority = priority
        self._protocols = protocols
        self._route_scope = route_scope
        self._route_type = route_type
        self._src_ip_range = src_ip_range
        self._src_port_ranges = src_port_ranges
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RouteInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RouteInfo of this RouteInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dest_ip_range(self):
        """Gets the dest_ip_range of this RouteInfo.

        Destination IP range of the route.

        :return: The dest_ip_range of this RouteInfo.
        :rtype: str
        """
        return self._dest_ip_range

    @dest_ip_range.setter
    def dest_ip_range(self, dest_ip_range):
        """Sets the dest_ip_range of this RouteInfo.

        Destination IP range of the route.

        :param dest_ip_range: The dest_ip_range of this RouteInfo.
        :type dest_ip_range: str
        """

        self._dest_ip_range = dest_ip_range

    @property
    def dest_port_ranges(self):
        """Gets the dest_port_ranges of this RouteInfo.

        Destination port ranges of the route. Policy based routes only.

        :return: The dest_port_ranges of this RouteInfo.
        :rtype: List[str]
        """
        return self._dest_port_ranges

    @dest_port_ranges.setter
    def dest_port_ranges(self, dest_port_ranges):
        """Sets the dest_port_ranges of this RouteInfo.

        Destination port ranges of the route. Policy based routes only.

        :param dest_port_ranges: The dest_port_ranges of this RouteInfo.
        :type dest_port_ranges: List[str]
        """

        self._dest_port_ranges = dest_port_ranges

    @property
    def display_name(self):
        """Gets the display_name of this RouteInfo.

        Name of a route.

        :return: The display_name of this RouteInfo.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RouteInfo.

        Name of a route.

        :param display_name: The display_name of this RouteInfo.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def instance_tags(self):
        """Gets the instance_tags of this RouteInfo.

        Instance tags of the route.

        :return: The instance_tags of this RouteInfo.
        :rtype: List[str]
        """
        return self._instance_tags

    @instance_tags.setter
    def instance_tags(self, instance_tags):
        """Sets the instance_tags of this RouteInfo.

        Instance tags of the route.

        :param instance_tags: The instance_tags of this RouteInfo.
        :type instance_tags: List[str]
        """

        self._instance_tags = instance_tags

    @property
    def ncc_hub_uri(self):
        """Gets the ncc_hub_uri of this RouteInfo.

        URI of a NCC Hub. NCC_HUB routes only.

        :return: The ncc_hub_uri of this RouteInfo.
        :rtype: str
        """
        return self._ncc_hub_uri

    @ncc_hub_uri.setter
    def ncc_hub_uri(self, ncc_hub_uri):
        """Sets the ncc_hub_uri of this RouteInfo.

        URI of a NCC Hub. NCC_HUB routes only.

        :param ncc_hub_uri: The ncc_hub_uri of this RouteInfo.
        :type ncc_hub_uri: str
        """

        self._ncc_hub_uri = ncc_hub_uri

    @property
    def ncc_spoke_uri(self):
        """Gets the ncc_spoke_uri of this RouteInfo.

        URI of a NCC Spoke. NCC_HUB routes only.

        :return: The ncc_spoke_uri of this RouteInfo.
        :rtype: str
        """
        return self._ncc_spoke_uri

    @ncc_spoke_uri.setter
    def ncc_spoke_uri(self, ncc_spoke_uri):
        """Sets the ncc_spoke_uri of this RouteInfo.

        URI of a NCC Spoke. NCC_HUB routes only.

        :param ncc_spoke_uri: The ncc_spoke_uri of this RouteInfo.
        :type ncc_spoke_uri: str
        """

        self._ncc_spoke_uri = ncc_spoke_uri

    @property
    def network_uri(self):
        """Gets the network_uri of this RouteInfo.

        URI of a Compute Engine network. NETWORK routes only.

        :return: The network_uri of this RouteInfo.
        :rtype: str
        """
        return self._network_uri

    @network_uri.setter
    def network_uri(self, network_uri):
        """Sets the network_uri of this RouteInfo.

        URI of a Compute Engine network. NETWORK routes only.

        :param network_uri: The network_uri of this RouteInfo.
        :type network_uri: str
        """

        self._network_uri = network_uri

    @property
    def next_hop(self):
        """Gets the next_hop of this RouteInfo.

        Next hop of the route.

        :return: The next_hop of this RouteInfo.
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this RouteInfo.

        Next hop of the route.

        :param next_hop: The next_hop of this RouteInfo.
        :type next_hop: str
        """

        self._next_hop = next_hop

    @property
    def next_hop_type(self):
        """Gets the next_hop_type of this RouteInfo.

        Type of next hop.

        :return: The next_hop_type of this RouteInfo.
        :rtype: str
        """
        return self._next_hop_type

    @next_hop_type.setter
    def next_hop_type(self, next_hop_type):
        """Sets the next_hop_type of this RouteInfo.

        Type of next hop.

        :param next_hop_type: The next_hop_type of this RouteInfo.
        :type next_hop_type: str
        """
        allowed_values = ["NEXT_HOP_TYPE_UNSPECIFIED", "NEXT_HOP_IP", "NEXT_HOP_INSTANCE", "NEXT_HOP_NETWORK", "NEXT_HOP_PEERING", "NEXT_HOP_INTERCONNECT", "NEXT_HOP_VPN_TUNNEL", "NEXT_HOP_VPN_GATEWAY", "NEXT_HOP_INTERNET_GATEWAY", "NEXT_HOP_BLACKHOLE", "NEXT_HOP_ILB", "NEXT_HOP_ROUTER_APPLIANCE", "NEXT_HOP_NCC_HUB"]  # noqa: E501
        if next_hop_type not in allowed_values:
            raise ValueError(
                "Invalid value for `next_hop_type` ({0}), must be one of {1}"
                .format(next_hop_type, allowed_values)
            )

        self._next_hop_type = next_hop_type

    @property
    def priority(self):
        """Gets the priority of this RouteInfo.

        Priority of the route.

        :return: The priority of this RouteInfo.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this RouteInfo.

        Priority of the route.

        :param priority: The priority of this RouteInfo.
        :type priority: int
        """

        self._priority = priority

    @property
    def protocols(self):
        """Gets the protocols of this RouteInfo.

        Protocols of the route. Policy based routes only.

        :return: The protocols of this RouteInfo.
        :rtype: List[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this RouteInfo.

        Protocols of the route. Policy based routes only.

        :param protocols: The protocols of this RouteInfo.
        :type protocols: List[str]
        """

        self._protocols = protocols

    @property
    def route_scope(self):
        """Gets the route_scope of this RouteInfo.

        Indicates where route is applicable.

        :return: The route_scope of this RouteInfo.
        :rtype: str
        """
        return self._route_scope

    @route_scope.setter
    def route_scope(self, route_scope):
        """Sets the route_scope of this RouteInfo.

        Indicates where route is applicable.

        :param route_scope: The route_scope of this RouteInfo.
        :type route_scope: str
        """
        allowed_values = ["ROUTE_SCOPE_UNSPECIFIED", "NETWORK", "NCC_HUB"]  # noqa: E501
        if route_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `route_scope` ({0}), must be one of {1}"
                .format(route_scope, allowed_values)
            )

        self._route_scope = route_scope

    @property
    def route_type(self):
        """Gets the route_type of this RouteInfo.

        Type of route.

        :return: The route_type of this RouteInfo.
        :rtype: str
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this RouteInfo.

        Type of route.

        :param route_type: The route_type of this RouteInfo.
        :type route_type: str
        """
        allowed_values = ["ROUTE_TYPE_UNSPECIFIED", "SUBNET", "STATIC", "DYNAMIC", "PEERING_SUBNET", "PEERING_STATIC", "PEERING_DYNAMIC", "POLICY_BASED"]  # noqa: E501
        if route_type not in allowed_values:
            raise ValueError(
                "Invalid value for `route_type` ({0}), must be one of {1}"
                .format(route_type, allowed_values)
            )

        self._route_type = route_type

    @property
    def src_ip_range(self):
        """Gets the src_ip_range of this RouteInfo.

        Source IP address range of the route. Policy based routes only.

        :return: The src_ip_range of this RouteInfo.
        :rtype: str
        """
        return self._src_ip_range

    @src_ip_range.setter
    def src_ip_range(self, src_ip_range):
        """Sets the src_ip_range of this RouteInfo.

        Source IP address range of the route. Policy based routes only.

        :param src_ip_range: The src_ip_range of this RouteInfo.
        :type src_ip_range: str
        """

        self._src_ip_range = src_ip_range

    @property
    def src_port_ranges(self):
        """Gets the src_port_ranges of this RouteInfo.

        Source port ranges of the route. Policy based routes only.

        :return: The src_port_ranges of this RouteInfo.
        :rtype: List[str]
        """
        return self._src_port_ranges

    @src_port_ranges.setter
    def src_port_ranges(self, src_port_ranges):
        """Sets the src_port_ranges of this RouteInfo.

        Source port ranges of the route. Policy based routes only.

        :param src_port_ranges: The src_port_ranges of this RouteInfo.
        :type src_port_ranges: List[str]
        """

        self._src_port_ranges = src_port_ranges

    @property
    def uri(self):
        """Gets the uri of this RouteInfo.

        URI of a route. Dynamic, peering static and peering dynamic routes do not have an URI. Advertised route from Google Cloud VPC to on-premises network also does not have an URI.

        :return: The uri of this RouteInfo.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this RouteInfo.

        URI of a route. Dynamic, peering static and peering dynamic routes do not have an URI. Advertised route from Google Cloud VPC to on-premises network also does not have an URI.

        :param uri: The uri of this RouteInfo.
        :type uri: str
        """

        self._uri = uri
