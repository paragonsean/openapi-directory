# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.abort_info import AbortInfo
from openapi_server.models.app_engine_version_info import AppEngineVersionInfo
from openapi_server.models.cloud_function_info import CloudFunctionInfo
from openapi_server.models.cloud_run_revision_info import CloudRunRevisionInfo
from openapi_server.models.cloud_sql_instance_info import CloudSQLInstanceInfo
from openapi_server.models.deliver_info import DeliverInfo
from openapi_server.models.drop_info import DropInfo
from openapi_server.models.endpoint_info import EndpointInfo
from openapi_server.models.firewall_info import FirewallInfo
from openapi_server.models.forward_info import ForwardInfo
from openapi_server.models.forwarding_rule_info import ForwardingRuleInfo
from openapi_server.models.gke_master_info import GKEMasterInfo
from openapi_server.models.google_service_info import GoogleServiceInfo
from openapi_server.models.instance_info import InstanceInfo
from openapi_server.models.load_balancer_backend_info import LoadBalancerBackendInfo
from openapi_server.models.load_balancer_info import LoadBalancerInfo
from openapi_server.models.nat_info import NatInfo
from openapi_server.models.network_info import NetworkInfo
from openapi_server.models.proxy_connection_info import ProxyConnectionInfo
from openapi_server.models.route_info import RouteInfo
from openapi_server.models.storage_bucket_info import StorageBucketInfo
from openapi_server.models.vpc_connector_info import VpcConnectorInfo
from openapi_server.models.vpn_gateway_info import VpnGatewayInfo
from openapi_server.models.vpn_tunnel_info import VpnTunnelInfo
from openapi_server import util


class Step(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abort: AbortInfo=None, app_engine_version: AppEngineVersionInfo=None, causes_drop: bool=None, cloud_function: CloudFunctionInfo=None, cloud_run_revision: CloudRunRevisionInfo=None, cloud_sql_instance: CloudSQLInstanceInfo=None, deliver: DeliverInfo=None, description: str=None, drop: DropInfo=None, endpoint: EndpointInfo=None, firewall: FirewallInfo=None, forward: ForwardInfo=None, forwarding_rule: ForwardingRuleInfo=None, gke_master: GKEMasterInfo=None, google_service: GoogleServiceInfo=None, instance: InstanceInfo=None, load_balancer: LoadBalancerInfo=None, load_balancer_backend_info: LoadBalancerBackendInfo=None, nat: NatInfo=None, network: NetworkInfo=None, project_id: str=None, proxy_connection: ProxyConnectionInfo=None, route: RouteInfo=None, state: str=None, storage_bucket: StorageBucketInfo=None, vpc_connector: VpcConnectorInfo=None, vpn_gateway: VpnGatewayInfo=None, vpn_tunnel: VpnTunnelInfo=None):
        """Step - a model defined in OpenAPI

        :param abort: The abort of this Step.
        :param app_engine_version: The app_engine_version of this Step.
        :param causes_drop: The causes_drop of this Step.
        :param cloud_function: The cloud_function of this Step.
        :param cloud_run_revision: The cloud_run_revision of this Step.
        :param cloud_sql_instance: The cloud_sql_instance of this Step.
        :param deliver: The deliver of this Step.
        :param description: The description of this Step.
        :param drop: The drop of this Step.
        :param endpoint: The endpoint of this Step.
        :param firewall: The firewall of this Step.
        :param forward: The forward of this Step.
        :param forwarding_rule: The forwarding_rule of this Step.
        :param gke_master: The gke_master of this Step.
        :param google_service: The google_service of this Step.
        :param instance: The instance of this Step.
        :param load_balancer: The load_balancer of this Step.
        :param load_balancer_backend_info: The load_balancer_backend_info of this Step.
        :param nat: The nat of this Step.
        :param network: The network of this Step.
        :param project_id: The project_id of this Step.
        :param proxy_connection: The proxy_connection of this Step.
        :param route: The route of this Step.
        :param state: The state of this Step.
        :param storage_bucket: The storage_bucket of this Step.
        :param vpc_connector: The vpc_connector of this Step.
        :param vpn_gateway: The vpn_gateway of this Step.
        :param vpn_tunnel: The vpn_tunnel of this Step.
        """
        self.openapi_types = {
            'abort': AbortInfo,
            'app_engine_version': AppEngineVersionInfo,
            'causes_drop': bool,
            'cloud_function': CloudFunctionInfo,
            'cloud_run_revision': CloudRunRevisionInfo,
            'cloud_sql_instance': CloudSQLInstanceInfo,
            'deliver': DeliverInfo,
            'description': str,
            'drop': DropInfo,
            'endpoint': EndpointInfo,
            'firewall': FirewallInfo,
            'forward': ForwardInfo,
            'forwarding_rule': ForwardingRuleInfo,
            'gke_master': GKEMasterInfo,
            'google_service': GoogleServiceInfo,
            'instance': InstanceInfo,
            'load_balancer': LoadBalancerInfo,
            'load_balancer_backend_info': LoadBalancerBackendInfo,
            'nat': NatInfo,
            'network': NetworkInfo,
            'project_id': str,
            'proxy_connection': ProxyConnectionInfo,
            'route': RouteInfo,
            'state': str,
            'storage_bucket': StorageBucketInfo,
            'vpc_connector': VpcConnectorInfo,
            'vpn_gateway': VpnGatewayInfo,
            'vpn_tunnel': VpnTunnelInfo
        }

        self.attribute_map = {
            'abort': 'abort',
            'app_engine_version': 'appEngineVersion',
            'causes_drop': 'causesDrop',
            'cloud_function': 'cloudFunction',
            'cloud_run_revision': 'cloudRunRevision',
            'cloud_sql_instance': 'cloudSqlInstance',
            'deliver': 'deliver',
            'description': 'description',
            'drop': 'drop',
            'endpoint': 'endpoint',
            'firewall': 'firewall',
            'forward': 'forward',
            'forwarding_rule': 'forwardingRule',
            'gke_master': 'gkeMaster',
            'google_service': 'googleService',
            'instance': 'instance',
            'load_balancer': 'loadBalancer',
            'load_balancer_backend_info': 'loadBalancerBackendInfo',
            'nat': 'nat',
            'network': 'network',
            'project_id': 'projectId',
            'proxy_connection': 'proxyConnection',
            'route': 'route',
            'state': 'state',
            'storage_bucket': 'storageBucket',
            'vpc_connector': 'vpcConnector',
            'vpn_gateway': 'vpnGateway',
            'vpn_tunnel': 'vpnTunnel'
        }

        self._abort = abort
        self._app_engine_version = app_engine_version
        self._causes_drop = causes_drop
        self._cloud_function = cloud_function
        self._cloud_run_revision = cloud_run_revision
        self._cloud_sql_instance = cloud_sql_instance
        self._deliver = deliver
        self._description = description
        self._drop = drop
        self._endpoint = endpoint
        self._firewall = firewall
        self._forward = forward
        self._forwarding_rule = forwarding_rule
        self._gke_master = gke_master
        self._google_service = google_service
        self._instance = instance
        self._load_balancer = load_balancer
        self._load_balancer_backend_info = load_balancer_backend_info
        self._nat = nat
        self._network = network
        self._project_id = project_id
        self._proxy_connection = proxy_connection
        self._route = route
        self._state = state
        self._storage_bucket = storage_bucket
        self._vpc_connector = vpc_connector
        self._vpn_gateway = vpn_gateway
        self._vpn_tunnel = vpn_tunnel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Step':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Step of this Step.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abort(self):
        """Gets the abort of this Step.


        :return: The abort of this Step.
        :rtype: AbortInfo
        """
        return self._abort

    @abort.setter
    def abort(self, abort):
        """Sets the abort of this Step.


        :param abort: The abort of this Step.
        :type abort: AbortInfo
        """

        self._abort = abort

    @property
    def app_engine_version(self):
        """Gets the app_engine_version of this Step.


        :return: The app_engine_version of this Step.
        :rtype: AppEngineVersionInfo
        """
        return self._app_engine_version

    @app_engine_version.setter
    def app_engine_version(self, app_engine_version):
        """Sets the app_engine_version of this Step.


        :param app_engine_version: The app_engine_version of this Step.
        :type app_engine_version: AppEngineVersionInfo
        """

        self._app_engine_version = app_engine_version

    @property
    def causes_drop(self):
        """Gets the causes_drop of this Step.

        This is a step that leads to the final state Drop.

        :return: The causes_drop of this Step.
        :rtype: bool
        """
        return self._causes_drop

    @causes_drop.setter
    def causes_drop(self, causes_drop):
        """Sets the causes_drop of this Step.

        This is a step that leads to the final state Drop.

        :param causes_drop: The causes_drop of this Step.
        :type causes_drop: bool
        """

        self._causes_drop = causes_drop

    @property
    def cloud_function(self):
        """Gets the cloud_function of this Step.


        :return: The cloud_function of this Step.
        :rtype: CloudFunctionInfo
        """
        return self._cloud_function

    @cloud_function.setter
    def cloud_function(self, cloud_function):
        """Sets the cloud_function of this Step.


        :param cloud_function: The cloud_function of this Step.
        :type cloud_function: CloudFunctionInfo
        """

        self._cloud_function = cloud_function

    @property
    def cloud_run_revision(self):
        """Gets the cloud_run_revision of this Step.


        :return: The cloud_run_revision of this Step.
        :rtype: CloudRunRevisionInfo
        """
        return self._cloud_run_revision

    @cloud_run_revision.setter
    def cloud_run_revision(self, cloud_run_revision):
        """Sets the cloud_run_revision of this Step.


        :param cloud_run_revision: The cloud_run_revision of this Step.
        :type cloud_run_revision: CloudRunRevisionInfo
        """

        self._cloud_run_revision = cloud_run_revision

    @property
    def cloud_sql_instance(self):
        """Gets the cloud_sql_instance of this Step.


        :return: The cloud_sql_instance of this Step.
        :rtype: CloudSQLInstanceInfo
        """
        return self._cloud_sql_instance

    @cloud_sql_instance.setter
    def cloud_sql_instance(self, cloud_sql_instance):
        """Sets the cloud_sql_instance of this Step.


        :param cloud_sql_instance: The cloud_sql_instance of this Step.
        :type cloud_sql_instance: CloudSQLInstanceInfo
        """

        self._cloud_sql_instance = cloud_sql_instance

    @property
    def deliver(self):
        """Gets the deliver of this Step.


        :return: The deliver of this Step.
        :rtype: DeliverInfo
        """
        return self._deliver

    @deliver.setter
    def deliver(self, deliver):
        """Sets the deliver of this Step.


        :param deliver: The deliver of this Step.
        :type deliver: DeliverInfo
        """

        self._deliver = deliver

    @property
    def description(self):
        """Gets the description of this Step.

        A description of the step. Usually this is a summary of the state.

        :return: The description of this Step.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Step.

        A description of the step. Usually this is a summary of the state.

        :param description: The description of this Step.
        :type description: str
        """

        self._description = description

    @property
    def drop(self):
        """Gets the drop of this Step.


        :return: The drop of this Step.
        :rtype: DropInfo
        """
        return self._drop

    @drop.setter
    def drop(self, drop):
        """Sets the drop of this Step.


        :param drop: The drop of this Step.
        :type drop: DropInfo
        """

        self._drop = drop

    @property
    def endpoint(self):
        """Gets the endpoint of this Step.


        :return: The endpoint of this Step.
        :rtype: EndpointInfo
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Step.


        :param endpoint: The endpoint of this Step.
        :type endpoint: EndpointInfo
        """

        self._endpoint = endpoint

    @property
    def firewall(self):
        """Gets the firewall of this Step.


        :return: The firewall of this Step.
        :rtype: FirewallInfo
        """
        return self._firewall

    @firewall.setter
    def firewall(self, firewall):
        """Sets the firewall of this Step.


        :param firewall: The firewall of this Step.
        :type firewall: FirewallInfo
        """

        self._firewall = firewall

    @property
    def forward(self):
        """Gets the forward of this Step.


        :return: The forward of this Step.
        :rtype: ForwardInfo
        """
        return self._forward

    @forward.setter
    def forward(self, forward):
        """Sets the forward of this Step.


        :param forward: The forward of this Step.
        :type forward: ForwardInfo
        """

        self._forward = forward

    @property
    def forwarding_rule(self):
        """Gets the forwarding_rule of this Step.


        :return: The forwarding_rule of this Step.
        :rtype: ForwardingRuleInfo
        """
        return self._forwarding_rule

    @forwarding_rule.setter
    def forwarding_rule(self, forwarding_rule):
        """Sets the forwarding_rule of this Step.


        :param forwarding_rule: The forwarding_rule of this Step.
        :type forwarding_rule: ForwardingRuleInfo
        """

        self._forwarding_rule = forwarding_rule

    @property
    def gke_master(self):
        """Gets the gke_master of this Step.


        :return: The gke_master of this Step.
        :rtype: GKEMasterInfo
        """
        return self._gke_master

    @gke_master.setter
    def gke_master(self, gke_master):
        """Sets the gke_master of this Step.


        :param gke_master: The gke_master of this Step.
        :type gke_master: GKEMasterInfo
        """

        self._gke_master = gke_master

    @property
    def google_service(self):
        """Gets the google_service of this Step.


        :return: The google_service of this Step.
        :rtype: GoogleServiceInfo
        """
        return self._google_service

    @google_service.setter
    def google_service(self, google_service):
        """Sets the google_service of this Step.


        :param google_service: The google_service of this Step.
        :type google_service: GoogleServiceInfo
        """

        self._google_service = google_service

    @property
    def instance(self):
        """Gets the instance of this Step.


        :return: The instance of this Step.
        :rtype: InstanceInfo
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this Step.


        :param instance: The instance of this Step.
        :type instance: InstanceInfo
        """

        self._instance = instance

    @property
    def load_balancer(self):
        """Gets the load_balancer of this Step.


        :return: The load_balancer of this Step.
        :rtype: LoadBalancerInfo
        """
        return self._load_balancer

    @load_balancer.setter
    def load_balancer(self, load_balancer):
        """Sets the load_balancer of this Step.


        :param load_balancer: The load_balancer of this Step.
        :type load_balancer: LoadBalancerInfo
        """

        self._load_balancer = load_balancer

    @property
    def load_balancer_backend_info(self):
        """Gets the load_balancer_backend_info of this Step.


        :return: The load_balancer_backend_info of this Step.
        :rtype: LoadBalancerBackendInfo
        """
        return self._load_balancer_backend_info

    @load_balancer_backend_info.setter
    def load_balancer_backend_info(self, load_balancer_backend_info):
        """Sets the load_balancer_backend_info of this Step.


        :param load_balancer_backend_info: The load_balancer_backend_info of this Step.
        :type load_balancer_backend_info: LoadBalancerBackendInfo
        """

        self._load_balancer_backend_info = load_balancer_backend_info

    @property
    def nat(self):
        """Gets the nat of this Step.


        :return: The nat of this Step.
        :rtype: NatInfo
        """
        return self._nat

    @nat.setter
    def nat(self, nat):
        """Sets the nat of this Step.


        :param nat: The nat of this Step.
        :type nat: NatInfo
        """

        self._nat = nat

    @property
    def network(self):
        """Gets the network of this Step.


        :return: The network of this Step.
        :rtype: NetworkInfo
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Step.


        :param network: The network of this Step.
        :type network: NetworkInfo
        """

        self._network = network

    @property
    def project_id(self):
        """Gets the project_id of this Step.

        Project ID that contains the configuration this step is validating.

        :return: The project_id of this Step.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Step.

        Project ID that contains the configuration this step is validating.

        :param project_id: The project_id of this Step.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def proxy_connection(self):
        """Gets the proxy_connection of this Step.


        :return: The proxy_connection of this Step.
        :rtype: ProxyConnectionInfo
        """
        return self._proxy_connection

    @proxy_connection.setter
    def proxy_connection(self, proxy_connection):
        """Sets the proxy_connection of this Step.


        :param proxy_connection: The proxy_connection of this Step.
        :type proxy_connection: ProxyConnectionInfo
        """

        self._proxy_connection = proxy_connection

    @property
    def route(self):
        """Gets the route of this Step.


        :return: The route of this Step.
        :rtype: RouteInfo
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this Step.


        :param route: The route of this Step.
        :type route: RouteInfo
        """

        self._route = route

    @property
    def state(self):
        """Gets the state of this Step.

        Each step is in one of the pre-defined states.

        :return: The state of this Step.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Step.

        Each step is in one of the pre-defined states.

        :param state: The state of this Step.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "START_FROM_INSTANCE", "START_FROM_INTERNET", "START_FROM_GOOGLE_SERVICE", "START_FROM_PRIVATE_NETWORK", "START_FROM_GKE_MASTER", "START_FROM_CLOUD_SQL_INSTANCE", "START_FROM_CLOUD_FUNCTION", "START_FROM_APP_ENGINE_VERSION", "START_FROM_CLOUD_RUN_REVISION", "START_FROM_STORAGE_BUCKET", "START_FROM_PSC_PUBLISHED_SERVICE", "APPLY_INGRESS_FIREWALL_RULE", "APPLY_EGRESS_FIREWALL_RULE", "APPLY_ROUTE", "APPLY_FORWARDING_RULE", "ANALYZE_LOAD_BALANCER_BACKEND", "SPOOFING_APPROVED", "ARRIVE_AT_INSTANCE", "ARRIVE_AT_INTERNAL_LOAD_BALANCER", "ARRIVE_AT_EXTERNAL_LOAD_BALANCER", "ARRIVE_AT_VPN_GATEWAY", "ARRIVE_AT_VPN_TUNNEL", "ARRIVE_AT_VPC_CONNECTOR", "NAT", "PROXY_CONNECTION", "DELIVER", "DROP", "FORWARD", "ABORT", "VIEWER_PERMISSION_MISSING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def storage_bucket(self):
        """Gets the storage_bucket of this Step.


        :return: The storage_bucket of this Step.
        :rtype: StorageBucketInfo
        """
        return self._storage_bucket

    @storage_bucket.setter
    def storage_bucket(self, storage_bucket):
        """Sets the storage_bucket of this Step.


        :param storage_bucket: The storage_bucket of this Step.
        :type storage_bucket: StorageBucketInfo
        """

        self._storage_bucket = storage_bucket

    @property
    def vpc_connector(self):
        """Gets the vpc_connector of this Step.


        :return: The vpc_connector of this Step.
        :rtype: VpcConnectorInfo
        """
        return self._vpc_connector

    @vpc_connector.setter
    def vpc_connector(self, vpc_connector):
        """Sets the vpc_connector of this Step.


        :param vpc_connector: The vpc_connector of this Step.
        :type vpc_connector: VpcConnectorInfo
        """

        self._vpc_connector = vpc_connector

    @property
    def vpn_gateway(self):
        """Gets the vpn_gateway of this Step.


        :return: The vpn_gateway of this Step.
        :rtype: VpnGatewayInfo
        """
        return self._vpn_gateway

    @vpn_gateway.setter
    def vpn_gateway(self, vpn_gateway):
        """Sets the vpn_gateway of this Step.


        :param vpn_gateway: The vpn_gateway of this Step.
        :type vpn_gateway: VpnGatewayInfo
        """

        self._vpn_gateway = vpn_gateway

    @property
    def vpn_tunnel(self):
        """Gets the vpn_tunnel of this Step.


        :return: The vpn_tunnel of this Step.
        :rtype: VpnTunnelInfo
        """
        return self._vpn_tunnel

    @vpn_tunnel.setter
    def vpn_tunnel(self, vpn_tunnel):
        """Sets the vpn_tunnel of this Step.


        :param vpn_tunnel: The vpn_tunnel of this Step.
        :type vpn_tunnel: VpnTunnelInfo
        """

        self._vpn_tunnel = vpn_tunnel
