# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LatencyPercentile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, latency_micros: str=None, percent: int=None):
        """LatencyPercentile - a model defined in OpenAPI

        :param latency_micros: The latency_micros of this LatencyPercentile.
        :param percent: The percent of this LatencyPercentile.
        """
        self.openapi_types = {
            'latency_micros': str,
            'percent': int
        }

        self.attribute_map = {
            'latency_micros': 'latencyMicros',
            'percent': 'percent'
        }

        self._latency_micros = latency_micros
        self._percent = percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LatencyPercentile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LatencyPercentile of this LatencyPercentile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def latency_micros(self):
        """Gets the latency_micros of this LatencyPercentile.

        percent-th percentile of latency observed, in microseconds. Fraction of percent/100 of samples have latency lower or equal to the value of this field.

        :return: The latency_micros of this LatencyPercentile.
        :rtype: str
        """
        return self._latency_micros

    @latency_micros.setter
    def latency_micros(self, latency_micros):
        """Sets the latency_micros of this LatencyPercentile.

        percent-th percentile of latency observed, in microseconds. Fraction of percent/100 of samples have latency lower or equal to the value of this field.

        :param latency_micros: The latency_micros of this LatencyPercentile.
        :type latency_micros: str
        """

        self._latency_micros = latency_micros

    @property
    def percent(self):
        """Gets the percent of this LatencyPercentile.

        Percentage of samples this data point applies to.

        :return: The percent of this LatencyPercentile.
        :rtype: int
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this LatencyPercentile.

        Percentage of samples this data point applies to.

        :param percent: The percent of this LatencyPercentile.
        :type percent: int
        """

        self._percent = percent
