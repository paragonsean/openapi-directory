/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEndpointInfo.h
 *
 * For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
 */

#ifndef OAIEndpointInfo_H
#define OAIEndpointInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEndpointInfo : public OAIObject {
public:
    OAIEndpointInfo();
    OAIEndpointInfo(QString json);
    ~OAIEndpointInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDestinationIp() const;
    void setDestinationIp(const QString &destination_ip);
    bool is_destination_ip_Set() const;
    bool is_destination_ip_Valid() const;

    QString getDestinationNetworkUri() const;
    void setDestinationNetworkUri(const QString &destination_network_uri);
    bool is_destination_network_uri_Set() const;
    bool is_destination_network_uri_Valid() const;

    qint32 getDestinationPort() const;
    void setDestinationPort(const qint32 &destination_port);
    bool is_destination_port_Set() const;
    bool is_destination_port_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getSourceAgentUri() const;
    void setSourceAgentUri(const QString &source_agent_uri);
    bool is_source_agent_uri_Set() const;
    bool is_source_agent_uri_Valid() const;

    QString getSourceIp() const;
    void setSourceIp(const QString &source_ip);
    bool is_source_ip_Set() const;
    bool is_source_ip_Valid() const;

    QString getSourceNetworkUri() const;
    void setSourceNetworkUri(const QString &source_network_uri);
    bool is_source_network_uri_Set() const;
    bool is_source_network_uri_Valid() const;

    qint32 getSourcePort() const;
    void setSourcePort(const qint32 &source_port);
    bool is_source_port_Set() const;
    bool is_source_port_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_destination_ip;
    bool m_destination_ip_isSet;
    bool m_destination_ip_isValid;

    QString m_destination_network_uri;
    bool m_destination_network_uri_isSet;
    bool m_destination_network_uri_isValid;

    qint32 m_destination_port;
    bool m_destination_port_isSet;
    bool m_destination_port_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_source_agent_uri;
    bool m_source_agent_uri_isSet;
    bool m_source_agent_uri_isValid;

    QString m_source_ip;
    bool m_source_ip_isSet;
    bool m_source_ip_isValid;

    QString m_source_network_uri;
    bool m_source_network_uri_isSet;
    bool m_source_network_uri_isValid;

    qint32 m_source_port;
    bool m_source_port_isSet;
    bool m_source_port_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEndpointInfo)

#endif // OAIEndpointInfo_H
