/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirewallInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirewallInfo::OAIFirewallInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirewallInfo::OAIFirewallInfo() {
    this->initializeModel();
}

OAIFirewallInfo::~OAIFirewallInfo() {}

void OAIFirewallInfo::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_firewall_rule_type_isSet = false;
    m_firewall_rule_type_isValid = false;

    m_network_uri_isSet = false;
    m_network_uri_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_target_service_accounts_isSet = false;
    m_target_service_accounts_isValid = false;

    m_target_tags_isSet = false;
    m_target_tags_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIFirewallInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirewallInfo::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_firewall_rule_type_isValid = ::OpenAPI::fromJsonValue(m_firewall_rule_type, json[QString("firewallRuleType")]);
    m_firewall_rule_type_isSet = !json[QString("firewallRuleType")].isNull() && m_firewall_rule_type_isValid;

    m_network_uri_isValid = ::OpenAPI::fromJsonValue(m_network_uri, json[QString("networkUri")]);
    m_network_uri_isSet = !json[QString("networkUri")].isNull() && m_network_uri_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_target_service_accounts_isValid = ::OpenAPI::fromJsonValue(m_target_service_accounts, json[QString("targetServiceAccounts")]);
    m_target_service_accounts_isSet = !json[QString("targetServiceAccounts")].isNull() && m_target_service_accounts_isValid;

    m_target_tags_isValid = ::OpenAPI::fromJsonValue(m_target_tags, json[QString("targetTags")]);
    m_target_tags_isSet = !json[QString("targetTags")].isNull() && m_target_tags_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIFirewallInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirewallInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_firewall_rule_type_isSet) {
        obj.insert(QString("firewallRuleType"), ::OpenAPI::toJsonValue(m_firewall_rule_type));
    }
    if (m_network_uri_isSet) {
        obj.insert(QString("networkUri"), ::OpenAPI::toJsonValue(m_network_uri));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_target_service_accounts.size() > 0) {
        obj.insert(QString("targetServiceAccounts"), ::OpenAPI::toJsonValue(m_target_service_accounts));
    }
    if (m_target_tags.size() > 0) {
        obj.insert(QString("targetTags"), ::OpenAPI::toJsonValue(m_target_tags));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIFirewallInfo::getAction() const {
    return m_action;
}
void OAIFirewallInfo::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIFirewallInfo::is_action_Set() const{
    return m_action_isSet;
}

bool OAIFirewallInfo::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIFirewallInfo::getDirection() const {
    return m_direction;
}
void OAIFirewallInfo::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIFirewallInfo::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIFirewallInfo::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIFirewallInfo::getDisplayName() const {
    return m_display_name;
}
void OAIFirewallInfo::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIFirewallInfo::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIFirewallInfo::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIFirewallInfo::getFirewallRuleType() const {
    return m_firewall_rule_type;
}
void OAIFirewallInfo::setFirewallRuleType(const QString &firewall_rule_type) {
    m_firewall_rule_type = firewall_rule_type;
    m_firewall_rule_type_isSet = true;
}

bool OAIFirewallInfo::is_firewall_rule_type_Set() const{
    return m_firewall_rule_type_isSet;
}

bool OAIFirewallInfo::is_firewall_rule_type_Valid() const{
    return m_firewall_rule_type_isValid;
}

QString OAIFirewallInfo::getNetworkUri() const {
    return m_network_uri;
}
void OAIFirewallInfo::setNetworkUri(const QString &network_uri) {
    m_network_uri = network_uri;
    m_network_uri_isSet = true;
}

bool OAIFirewallInfo::is_network_uri_Set() const{
    return m_network_uri_isSet;
}

bool OAIFirewallInfo::is_network_uri_Valid() const{
    return m_network_uri_isValid;
}

QString OAIFirewallInfo::getPolicy() const {
    return m_policy;
}
void OAIFirewallInfo::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIFirewallInfo::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIFirewallInfo::is_policy_Valid() const{
    return m_policy_isValid;
}

qint32 OAIFirewallInfo::getPriority() const {
    return m_priority;
}
void OAIFirewallInfo::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIFirewallInfo::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIFirewallInfo::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<QString> OAIFirewallInfo::getTargetServiceAccounts() const {
    return m_target_service_accounts;
}
void OAIFirewallInfo::setTargetServiceAccounts(const QList<QString> &target_service_accounts) {
    m_target_service_accounts = target_service_accounts;
    m_target_service_accounts_isSet = true;
}

bool OAIFirewallInfo::is_target_service_accounts_Set() const{
    return m_target_service_accounts_isSet;
}

bool OAIFirewallInfo::is_target_service_accounts_Valid() const{
    return m_target_service_accounts_isValid;
}

QList<QString> OAIFirewallInfo::getTargetTags() const {
    return m_target_tags;
}
void OAIFirewallInfo::setTargetTags(const QList<QString> &target_tags) {
    m_target_tags = target_tags;
    m_target_tags_isSet = true;
}

bool OAIFirewallInfo::is_target_tags_Set() const{
    return m_target_tags_isSet;
}

bool OAIFirewallInfo::is_target_tags_Valid() const{
    return m_target_tags_isValid;
}

QString OAIFirewallInfo::getUri() const {
    return m_uri;
}
void OAIFirewallInfo::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIFirewallInfo::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIFirewallInfo::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIFirewallInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewall_rule_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_service_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirewallInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
