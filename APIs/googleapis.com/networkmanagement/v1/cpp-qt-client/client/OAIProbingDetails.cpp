/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProbingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProbingDetails::OAIProbingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProbingDetails::OAIProbingDetails() {
    this->initializeModel();
}

OAIProbingDetails::~OAIProbingDetails() {}

void OAIProbingDetails::initializeModel() {

    m_abort_cause_isSet = false;
    m_abort_cause_isValid = false;

    m_destination_egress_location_isSet = false;
    m_destination_egress_location_isValid = false;

    m_endpoint_info_isSet = false;
    m_endpoint_info_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_probing_latency_isSet = false;
    m_probing_latency_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_sent_probe_count_isSet = false;
    m_sent_probe_count_isValid = false;

    m_successful_probe_count_isSet = false;
    m_successful_probe_count_isValid = false;

    m_verify_time_isSet = false;
    m_verify_time_isValid = false;
}

void OAIProbingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProbingDetails::fromJsonObject(QJsonObject json) {

    m_abort_cause_isValid = ::OpenAPI::fromJsonValue(m_abort_cause, json[QString("abortCause")]);
    m_abort_cause_isSet = !json[QString("abortCause")].isNull() && m_abort_cause_isValid;

    m_destination_egress_location_isValid = ::OpenAPI::fromJsonValue(m_destination_egress_location, json[QString("destinationEgressLocation")]);
    m_destination_egress_location_isSet = !json[QString("destinationEgressLocation")].isNull() && m_destination_egress_location_isValid;

    m_endpoint_info_isValid = ::OpenAPI::fromJsonValue(m_endpoint_info, json[QString("endpointInfo")]);
    m_endpoint_info_isSet = !json[QString("endpointInfo")].isNull() && m_endpoint_info_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_probing_latency_isValid = ::OpenAPI::fromJsonValue(m_probing_latency, json[QString("probingLatency")]);
    m_probing_latency_isSet = !json[QString("probingLatency")].isNull() && m_probing_latency_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_sent_probe_count_isValid = ::OpenAPI::fromJsonValue(m_sent_probe_count, json[QString("sentProbeCount")]);
    m_sent_probe_count_isSet = !json[QString("sentProbeCount")].isNull() && m_sent_probe_count_isValid;

    m_successful_probe_count_isValid = ::OpenAPI::fromJsonValue(m_successful_probe_count, json[QString("successfulProbeCount")]);
    m_successful_probe_count_isSet = !json[QString("successfulProbeCount")].isNull() && m_successful_probe_count_isValid;

    m_verify_time_isValid = ::OpenAPI::fromJsonValue(m_verify_time, json[QString("verifyTime")]);
    m_verify_time_isSet = !json[QString("verifyTime")].isNull() && m_verify_time_isValid;
}

QString OAIProbingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProbingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_abort_cause_isSet) {
        obj.insert(QString("abortCause"), ::OpenAPI::toJsonValue(m_abort_cause));
    }
    if (m_destination_egress_location.isSet()) {
        obj.insert(QString("destinationEgressLocation"), ::OpenAPI::toJsonValue(m_destination_egress_location));
    }
    if (m_endpoint_info.isSet()) {
        obj.insert(QString("endpointInfo"), ::OpenAPI::toJsonValue(m_endpoint_info));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_probing_latency.isSet()) {
        obj.insert(QString("probingLatency"), ::OpenAPI::toJsonValue(m_probing_latency));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_sent_probe_count_isSet) {
        obj.insert(QString("sentProbeCount"), ::OpenAPI::toJsonValue(m_sent_probe_count));
    }
    if (m_successful_probe_count_isSet) {
        obj.insert(QString("successfulProbeCount"), ::OpenAPI::toJsonValue(m_successful_probe_count));
    }
    if (m_verify_time_isSet) {
        obj.insert(QString("verifyTime"), ::OpenAPI::toJsonValue(m_verify_time));
    }
    return obj;
}

QString OAIProbingDetails::getAbortCause() const {
    return m_abort_cause;
}
void OAIProbingDetails::setAbortCause(const QString &abort_cause) {
    m_abort_cause = abort_cause;
    m_abort_cause_isSet = true;
}

bool OAIProbingDetails::is_abort_cause_Set() const{
    return m_abort_cause_isSet;
}

bool OAIProbingDetails::is_abort_cause_Valid() const{
    return m_abort_cause_isValid;
}

OAIEdgeLocation OAIProbingDetails::getDestinationEgressLocation() const {
    return m_destination_egress_location;
}
void OAIProbingDetails::setDestinationEgressLocation(const OAIEdgeLocation &destination_egress_location) {
    m_destination_egress_location = destination_egress_location;
    m_destination_egress_location_isSet = true;
}

bool OAIProbingDetails::is_destination_egress_location_Set() const{
    return m_destination_egress_location_isSet;
}

bool OAIProbingDetails::is_destination_egress_location_Valid() const{
    return m_destination_egress_location_isValid;
}

OAIEndpointInfo OAIProbingDetails::getEndpointInfo() const {
    return m_endpoint_info;
}
void OAIProbingDetails::setEndpointInfo(const OAIEndpointInfo &endpoint_info) {
    m_endpoint_info = endpoint_info;
    m_endpoint_info_isSet = true;
}

bool OAIProbingDetails::is_endpoint_info_Set() const{
    return m_endpoint_info_isSet;
}

bool OAIProbingDetails::is_endpoint_info_Valid() const{
    return m_endpoint_info_isValid;
}

OAIStatus OAIProbingDetails::getError() const {
    return m_error;
}
void OAIProbingDetails::setError(const OAIStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIProbingDetails::is_error_Set() const{
    return m_error_isSet;
}

bool OAIProbingDetails::is_error_Valid() const{
    return m_error_isValid;
}

OAILatencyDistribution OAIProbingDetails::getProbingLatency() const {
    return m_probing_latency;
}
void OAIProbingDetails::setProbingLatency(const OAILatencyDistribution &probing_latency) {
    m_probing_latency = probing_latency;
    m_probing_latency_isSet = true;
}

bool OAIProbingDetails::is_probing_latency_Set() const{
    return m_probing_latency_isSet;
}

bool OAIProbingDetails::is_probing_latency_Valid() const{
    return m_probing_latency_isValid;
}

QString OAIProbingDetails::getResult() const {
    return m_result;
}
void OAIProbingDetails::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIProbingDetails::is_result_Set() const{
    return m_result_isSet;
}

bool OAIProbingDetails::is_result_Valid() const{
    return m_result_isValid;
}

qint32 OAIProbingDetails::getSentProbeCount() const {
    return m_sent_probe_count;
}
void OAIProbingDetails::setSentProbeCount(const qint32 &sent_probe_count) {
    m_sent_probe_count = sent_probe_count;
    m_sent_probe_count_isSet = true;
}

bool OAIProbingDetails::is_sent_probe_count_Set() const{
    return m_sent_probe_count_isSet;
}

bool OAIProbingDetails::is_sent_probe_count_Valid() const{
    return m_sent_probe_count_isValid;
}

qint32 OAIProbingDetails::getSuccessfulProbeCount() const {
    return m_successful_probe_count;
}
void OAIProbingDetails::setSuccessfulProbeCount(const qint32 &successful_probe_count) {
    m_successful_probe_count = successful_probe_count;
    m_successful_probe_count_isSet = true;
}

bool OAIProbingDetails::is_successful_probe_count_Set() const{
    return m_successful_probe_count_isSet;
}

bool OAIProbingDetails::is_successful_probe_count_Valid() const{
    return m_successful_probe_count_isValid;
}

QString OAIProbingDetails::getVerifyTime() const {
    return m_verify_time;
}
void OAIProbingDetails::setVerifyTime(const QString &verify_time) {
    m_verify_time = verify_time;
    m_verify_time_isSet = true;
}

bool OAIProbingDetails::is_verify_time_Set() const{
    return m_verify_time_isSet;
}

bool OAIProbingDetails::is_verify_time_Valid() const{
    return m_verify_time_isValid;
}

bool OAIProbingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abort_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_egress_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_probing_latency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_probe_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_probe_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProbingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
