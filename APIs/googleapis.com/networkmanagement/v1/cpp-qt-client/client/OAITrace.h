/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITrace.h
 *
 * Trace represents one simulated packet forwarding path. * Each trace contains multiple ordered steps. * Each step is in a particular state with associated configuration. * State is categorized as final or non-final states. * Each final state has a reason associated. * Each trace must end with a final state (the last step). &#x60;&#x60;&#x60; |---------------------Trace----------------------| Step1(State) Step2(State) --- StepN(State(final)) &#x60;&#x60;&#x60;
 */

#ifndef OAITrace_H
#define OAITrace_H

#include <QJsonObject>

#include "OAIEndpointInfo.h"
#include "OAIStep.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEndpointInfo;
class OAIStep;

class OAITrace : public OAIObject {
public:
    OAITrace();
    OAITrace(QString json);
    ~OAITrace() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEndpointInfo getEndpointInfo() const;
    void setEndpointInfo(const OAIEndpointInfo &endpoint_info);
    bool is_endpoint_info_Set() const;
    bool is_endpoint_info_Valid() const;

    qint32 getForwardTraceId() const;
    void setForwardTraceId(const qint32 &forward_trace_id);
    bool is_forward_trace_id_Set() const;
    bool is_forward_trace_id_Valid() const;

    QList<OAIStep> getSteps() const;
    void setSteps(const QList<OAIStep> &steps);
    bool is_steps_Set() const;
    bool is_steps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEndpointInfo m_endpoint_info;
    bool m_endpoint_info_isSet;
    bool m_endpoint_info_isValid;

    qint32 m_forward_trace_id;
    bool m_forward_trace_id_isSet;
    bool m_forward_trace_id_isValid;

    QList<OAIStep> m_steps;
    bool m_steps_isSet;
    bool m_steps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITrace)

#endif // OAITrace_H
