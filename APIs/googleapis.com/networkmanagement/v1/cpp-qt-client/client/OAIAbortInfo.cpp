/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbortInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbortInfo::OAIAbortInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbortInfo::OAIAbortInfo() {
    this->initializeModel();
}

OAIAbortInfo::~OAIAbortInfo() {}

void OAIAbortInfo::initializeModel() {

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_projects_missing_permission_isSet = false;
    m_projects_missing_permission_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;
}

void OAIAbortInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbortInfo::fromJsonObject(QJsonObject json) {

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_projects_missing_permission_isValid = ::OpenAPI::fromJsonValue(m_projects_missing_permission, json[QString("projectsMissingPermission")]);
    m_projects_missing_permission_isSet = !json[QString("projectsMissingPermission")].isNull() && m_projects_missing_permission_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;
}

QString OAIAbortInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbortInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_cause_isSet) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_projects_missing_permission.size() > 0) {
        obj.insert(QString("projectsMissingPermission"), ::OpenAPI::toJsonValue(m_projects_missing_permission));
    }
    if (m_resource_uri_isSet) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    return obj;
}

QString OAIAbortInfo::getCause() const {
    return m_cause;
}
void OAIAbortInfo::setCause(const QString &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAIAbortInfo::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIAbortInfo::is_cause_Valid() const{
    return m_cause_isValid;
}

QString OAIAbortInfo::getIpAddress() const {
    return m_ip_address;
}
void OAIAbortInfo::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIAbortInfo::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIAbortInfo::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QList<QString> OAIAbortInfo::getProjectsMissingPermission() const {
    return m_projects_missing_permission;
}
void OAIAbortInfo::setProjectsMissingPermission(const QList<QString> &projects_missing_permission) {
    m_projects_missing_permission = projects_missing_permission;
    m_projects_missing_permission_isSet = true;
}

bool OAIAbortInfo::is_projects_missing_permission_Set() const{
    return m_projects_missing_permission_isSet;
}

bool OAIAbortInfo::is_projects_missing_permission_Valid() const{
    return m_projects_missing_permission_isValid;
}

QString OAIAbortInfo::getResourceUri() const {
    return m_resource_uri;
}
void OAIAbortInfo::setResourceUri(const QString &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAIAbortInfo::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAIAbortInfo::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

bool OAIAbortInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects_missing_permission.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbortInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
