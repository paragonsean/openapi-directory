/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProbingDetails.h
 *
 * Results of active probing from the last run of the test.
 */

#ifndef OAIProbingDetails_H
#define OAIProbingDetails_H

#include <QJsonObject>

#include "OAIEdgeLocation.h"
#include "OAIEndpointInfo.h"
#include "OAILatencyDistribution.h"
#include "OAIStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEdgeLocation;
class OAIEndpointInfo;
class OAIStatus;
class OAILatencyDistribution;

class OAIProbingDetails : public OAIObject {
public:
    OAIProbingDetails();
    OAIProbingDetails(QString json);
    ~OAIProbingDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAbortCause() const;
    void setAbortCause(const QString &abort_cause);
    bool is_abort_cause_Set() const;
    bool is_abort_cause_Valid() const;

    OAIEdgeLocation getDestinationEgressLocation() const;
    void setDestinationEgressLocation(const OAIEdgeLocation &destination_egress_location);
    bool is_destination_egress_location_Set() const;
    bool is_destination_egress_location_Valid() const;

    OAIEndpointInfo getEndpointInfo() const;
    void setEndpointInfo(const OAIEndpointInfo &endpoint_info);
    bool is_endpoint_info_Set() const;
    bool is_endpoint_info_Valid() const;

    OAIStatus getError() const;
    void setError(const OAIStatus &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    OAILatencyDistribution getProbingLatency() const;
    void setProbingLatency(const OAILatencyDistribution &probing_latency);
    bool is_probing_latency_Set() const;
    bool is_probing_latency_Valid() const;

    QString getResult() const;
    void setResult(const QString &result);
    bool is_result_Set() const;
    bool is_result_Valid() const;

    qint32 getSentProbeCount() const;
    void setSentProbeCount(const qint32 &sent_probe_count);
    bool is_sent_probe_count_Set() const;
    bool is_sent_probe_count_Valid() const;

    qint32 getSuccessfulProbeCount() const;
    void setSuccessfulProbeCount(const qint32 &successful_probe_count);
    bool is_successful_probe_count_Set() const;
    bool is_successful_probe_count_Valid() const;

    QString getVerifyTime() const;
    void setVerifyTime(const QString &verify_time);
    bool is_verify_time_Set() const;
    bool is_verify_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_abort_cause;
    bool m_abort_cause_isSet;
    bool m_abort_cause_isValid;

    OAIEdgeLocation m_destination_egress_location;
    bool m_destination_egress_location_isSet;
    bool m_destination_egress_location_isValid;

    OAIEndpointInfo m_endpoint_info;
    bool m_endpoint_info_isSet;
    bool m_endpoint_info_isValid;

    OAIStatus m_error;
    bool m_error_isSet;
    bool m_error_isValid;

    OAILatencyDistribution m_probing_latency;
    bool m_probing_latency_isSet;
    bool m_probing_latency_isValid;

    QString m_result;
    bool m_result_isSet;
    bool m_result_isValid;

    qint32 m_sent_probe_count;
    bool m_sent_probe_count_isSet;
    bool m_sent_probe_count_isValid;

    qint32 m_successful_probe_count;
    bool m_successful_probe_count_isSet;
    bool m_successful_probe_count_isValid;

    QString m_verify_time;
    bool m_verify_time_isSet;
    bool m_verify_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProbingDetails)

#endif // OAIProbingDetails_H
