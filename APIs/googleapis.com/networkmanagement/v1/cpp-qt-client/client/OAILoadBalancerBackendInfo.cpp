/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadBalancerBackendInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadBalancerBackendInfo::OAILoadBalancerBackendInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadBalancerBackendInfo::OAILoadBalancerBackendInfo() {
    this->initializeModel();
}

OAILoadBalancerBackendInfo::~OAILoadBalancerBackendInfo() {}

void OAILoadBalancerBackendInfo::initializeModel() {

    m_backend_bucket_uri_isSet = false;
    m_backend_bucket_uri_isValid = false;

    m_backend_service_uri_isSet = false;
    m_backend_service_uri_isValid = false;

    m_health_check_firewalls_config_state_isSet = false;
    m_health_check_firewalls_config_state_isValid = false;

    m_health_check_uri_isSet = false;
    m_health_check_uri_isValid = false;

    m_instance_group_uri_isSet = false;
    m_instance_group_uri_isValid = false;

    m_instance_uri_isSet = false;
    m_instance_uri_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_endpoint_group_uri_isSet = false;
    m_network_endpoint_group_uri_isValid = false;

    m_psc_google_api_target_isSet = false;
    m_psc_google_api_target_isValid = false;

    m_psc_service_attachment_uri_isSet = false;
    m_psc_service_attachment_uri_isValid = false;
}

void OAILoadBalancerBackendInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadBalancerBackendInfo::fromJsonObject(QJsonObject json) {

    m_backend_bucket_uri_isValid = ::OpenAPI::fromJsonValue(m_backend_bucket_uri, json[QString("backendBucketUri")]);
    m_backend_bucket_uri_isSet = !json[QString("backendBucketUri")].isNull() && m_backend_bucket_uri_isValid;

    m_backend_service_uri_isValid = ::OpenAPI::fromJsonValue(m_backend_service_uri, json[QString("backendServiceUri")]);
    m_backend_service_uri_isSet = !json[QString("backendServiceUri")].isNull() && m_backend_service_uri_isValid;

    m_health_check_firewalls_config_state_isValid = ::OpenAPI::fromJsonValue(m_health_check_firewalls_config_state, json[QString("healthCheckFirewallsConfigState")]);
    m_health_check_firewalls_config_state_isSet = !json[QString("healthCheckFirewallsConfigState")].isNull() && m_health_check_firewalls_config_state_isValid;

    m_health_check_uri_isValid = ::OpenAPI::fromJsonValue(m_health_check_uri, json[QString("healthCheckUri")]);
    m_health_check_uri_isSet = !json[QString("healthCheckUri")].isNull() && m_health_check_uri_isValid;

    m_instance_group_uri_isValid = ::OpenAPI::fromJsonValue(m_instance_group_uri, json[QString("instanceGroupUri")]);
    m_instance_group_uri_isSet = !json[QString("instanceGroupUri")].isNull() && m_instance_group_uri_isValid;

    m_instance_uri_isValid = ::OpenAPI::fromJsonValue(m_instance_uri, json[QString("instanceUri")]);
    m_instance_uri_isSet = !json[QString("instanceUri")].isNull() && m_instance_uri_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_endpoint_group_uri_isValid = ::OpenAPI::fromJsonValue(m_network_endpoint_group_uri, json[QString("networkEndpointGroupUri")]);
    m_network_endpoint_group_uri_isSet = !json[QString("networkEndpointGroupUri")].isNull() && m_network_endpoint_group_uri_isValid;

    m_psc_google_api_target_isValid = ::OpenAPI::fromJsonValue(m_psc_google_api_target, json[QString("pscGoogleApiTarget")]);
    m_psc_google_api_target_isSet = !json[QString("pscGoogleApiTarget")].isNull() && m_psc_google_api_target_isValid;

    m_psc_service_attachment_uri_isValid = ::OpenAPI::fromJsonValue(m_psc_service_attachment_uri, json[QString("pscServiceAttachmentUri")]);
    m_psc_service_attachment_uri_isSet = !json[QString("pscServiceAttachmentUri")].isNull() && m_psc_service_attachment_uri_isValid;
}

QString OAILoadBalancerBackendInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadBalancerBackendInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_bucket_uri_isSet) {
        obj.insert(QString("backendBucketUri"), ::OpenAPI::toJsonValue(m_backend_bucket_uri));
    }
    if (m_backend_service_uri_isSet) {
        obj.insert(QString("backendServiceUri"), ::OpenAPI::toJsonValue(m_backend_service_uri));
    }
    if (m_health_check_firewalls_config_state_isSet) {
        obj.insert(QString("healthCheckFirewallsConfigState"), ::OpenAPI::toJsonValue(m_health_check_firewalls_config_state));
    }
    if (m_health_check_uri_isSet) {
        obj.insert(QString("healthCheckUri"), ::OpenAPI::toJsonValue(m_health_check_uri));
    }
    if (m_instance_group_uri_isSet) {
        obj.insert(QString("instanceGroupUri"), ::OpenAPI::toJsonValue(m_instance_group_uri));
    }
    if (m_instance_uri_isSet) {
        obj.insert(QString("instanceUri"), ::OpenAPI::toJsonValue(m_instance_uri));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_endpoint_group_uri_isSet) {
        obj.insert(QString("networkEndpointGroupUri"), ::OpenAPI::toJsonValue(m_network_endpoint_group_uri));
    }
    if (m_psc_google_api_target_isSet) {
        obj.insert(QString("pscGoogleApiTarget"), ::OpenAPI::toJsonValue(m_psc_google_api_target));
    }
    if (m_psc_service_attachment_uri_isSet) {
        obj.insert(QString("pscServiceAttachmentUri"), ::OpenAPI::toJsonValue(m_psc_service_attachment_uri));
    }
    return obj;
}

QString OAILoadBalancerBackendInfo::getBackendBucketUri() const {
    return m_backend_bucket_uri;
}
void OAILoadBalancerBackendInfo::setBackendBucketUri(const QString &backend_bucket_uri) {
    m_backend_bucket_uri = backend_bucket_uri;
    m_backend_bucket_uri_isSet = true;
}

bool OAILoadBalancerBackendInfo::is_backend_bucket_uri_Set() const{
    return m_backend_bucket_uri_isSet;
}

bool OAILoadBalancerBackendInfo::is_backend_bucket_uri_Valid() const{
    return m_backend_bucket_uri_isValid;
}

QString OAILoadBalancerBackendInfo::getBackendServiceUri() const {
    return m_backend_service_uri;
}
void OAILoadBalancerBackendInfo::setBackendServiceUri(const QString &backend_service_uri) {
    m_backend_service_uri = backend_service_uri;
    m_backend_service_uri_isSet = true;
}

bool OAILoadBalancerBackendInfo::is_backend_service_uri_Set() const{
    return m_backend_service_uri_isSet;
}

bool OAILoadBalancerBackendInfo::is_backend_service_uri_Valid() const{
    return m_backend_service_uri_isValid;
}

QString OAILoadBalancerBackendInfo::getHealthCheckFirewallsConfigState() const {
    return m_health_check_firewalls_config_state;
}
void OAILoadBalancerBackendInfo::setHealthCheckFirewallsConfigState(const QString &health_check_firewalls_config_state) {
    m_health_check_firewalls_config_state = health_check_firewalls_config_state;
    m_health_check_firewalls_config_state_isSet = true;
}

bool OAILoadBalancerBackendInfo::is_health_check_firewalls_config_state_Set() const{
    return m_health_check_firewalls_config_state_isSet;
}

bool OAILoadBalancerBackendInfo::is_health_check_firewalls_config_state_Valid() const{
    return m_health_check_firewalls_config_state_isValid;
}

QString OAILoadBalancerBackendInfo::getHealthCheckUri() const {
    return m_health_check_uri;
}
void OAILoadBalancerBackendInfo::setHealthCheckUri(const QString &health_check_uri) {
    m_health_check_uri = health_check_uri;
    m_health_check_uri_isSet = true;
}

bool OAILoadBalancerBackendInfo::is_health_check_uri_Set() const{
    return m_health_check_uri_isSet;
}

bool OAILoadBalancerBackendInfo::is_health_check_uri_Valid() const{
    return m_health_check_uri_isValid;
}

QString OAILoadBalancerBackendInfo::getInstanceGroupUri() const {
    return m_instance_group_uri;
}
void OAILoadBalancerBackendInfo::setInstanceGroupUri(const QString &instance_group_uri) {
    m_instance_group_uri = instance_group_uri;
    m_instance_group_uri_isSet = true;
}

bool OAILoadBalancerBackendInfo::is_instance_group_uri_Set() const{
    return m_instance_group_uri_isSet;
}

bool OAILoadBalancerBackendInfo::is_instance_group_uri_Valid() const{
    return m_instance_group_uri_isValid;
}

QString OAILoadBalancerBackendInfo::getInstanceUri() const {
    return m_instance_uri;
}
void OAILoadBalancerBackendInfo::setInstanceUri(const QString &instance_uri) {
    m_instance_uri = instance_uri;
    m_instance_uri_isSet = true;
}

bool OAILoadBalancerBackendInfo::is_instance_uri_Set() const{
    return m_instance_uri_isSet;
}

bool OAILoadBalancerBackendInfo::is_instance_uri_Valid() const{
    return m_instance_uri_isValid;
}

QString OAILoadBalancerBackendInfo::getName() const {
    return m_name;
}
void OAILoadBalancerBackendInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILoadBalancerBackendInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAILoadBalancerBackendInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILoadBalancerBackendInfo::getNetworkEndpointGroupUri() const {
    return m_network_endpoint_group_uri;
}
void OAILoadBalancerBackendInfo::setNetworkEndpointGroupUri(const QString &network_endpoint_group_uri) {
    m_network_endpoint_group_uri = network_endpoint_group_uri;
    m_network_endpoint_group_uri_isSet = true;
}

bool OAILoadBalancerBackendInfo::is_network_endpoint_group_uri_Set() const{
    return m_network_endpoint_group_uri_isSet;
}

bool OAILoadBalancerBackendInfo::is_network_endpoint_group_uri_Valid() const{
    return m_network_endpoint_group_uri_isValid;
}

QString OAILoadBalancerBackendInfo::getPscGoogleApiTarget() const {
    return m_psc_google_api_target;
}
void OAILoadBalancerBackendInfo::setPscGoogleApiTarget(const QString &psc_google_api_target) {
    m_psc_google_api_target = psc_google_api_target;
    m_psc_google_api_target_isSet = true;
}

bool OAILoadBalancerBackendInfo::is_psc_google_api_target_Set() const{
    return m_psc_google_api_target_isSet;
}

bool OAILoadBalancerBackendInfo::is_psc_google_api_target_Valid() const{
    return m_psc_google_api_target_isValid;
}

QString OAILoadBalancerBackendInfo::getPscServiceAttachmentUri() const {
    return m_psc_service_attachment_uri;
}
void OAILoadBalancerBackendInfo::setPscServiceAttachmentUri(const QString &psc_service_attachment_uri) {
    m_psc_service_attachment_uri = psc_service_attachment_uri;
    m_psc_service_attachment_uri_isSet = true;
}

bool OAILoadBalancerBackendInfo::is_psc_service_attachment_uri_Set() const{
    return m_psc_service_attachment_uri_isSet;
}

bool OAILoadBalancerBackendInfo::is_psc_service_attachment_uri_Valid() const{
    return m_psc_service_attachment_uri_isValid;
}

bool OAILoadBalancerBackendInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_bucket_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_service_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_firewalls_config_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_group_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_endpoint_group_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_google_api_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_service_attachment_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadBalancerBackendInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
