/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpnGatewayInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpnGatewayInfo::OAIVpnGatewayInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpnGatewayInfo::OAIVpnGatewayInfo() {
    this->initializeModel();
}

OAIVpnGatewayInfo::~OAIVpnGatewayInfo() {}

void OAIVpnGatewayInfo::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_network_uri_isSet = false;
    m_network_uri_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_vpn_tunnel_uri_isSet = false;
    m_vpn_tunnel_uri_isValid = false;
}

void OAIVpnGatewayInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpnGatewayInfo::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_network_uri_isValid = ::OpenAPI::fromJsonValue(m_network_uri, json[QString("networkUri")]);
    m_network_uri_isSet = !json[QString("networkUri")].isNull() && m_network_uri_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_vpn_tunnel_uri_isValid = ::OpenAPI::fromJsonValue(m_vpn_tunnel_uri, json[QString("vpnTunnelUri")]);
    m_vpn_tunnel_uri_isSet = !json[QString("vpnTunnelUri")].isNull() && m_vpn_tunnel_uri_isValid;
}

QString OAIVpnGatewayInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpnGatewayInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_network_uri_isSet) {
        obj.insert(QString("networkUri"), ::OpenAPI::toJsonValue(m_network_uri));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_vpn_tunnel_uri_isSet) {
        obj.insert(QString("vpnTunnelUri"), ::OpenAPI::toJsonValue(m_vpn_tunnel_uri));
    }
    return obj;
}

QString OAIVpnGatewayInfo::getDisplayName() const {
    return m_display_name;
}
void OAIVpnGatewayInfo::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIVpnGatewayInfo::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIVpnGatewayInfo::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIVpnGatewayInfo::getIpAddress() const {
    return m_ip_address;
}
void OAIVpnGatewayInfo::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIVpnGatewayInfo::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIVpnGatewayInfo::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIVpnGatewayInfo::getNetworkUri() const {
    return m_network_uri;
}
void OAIVpnGatewayInfo::setNetworkUri(const QString &network_uri) {
    m_network_uri = network_uri;
    m_network_uri_isSet = true;
}

bool OAIVpnGatewayInfo::is_network_uri_Set() const{
    return m_network_uri_isSet;
}

bool OAIVpnGatewayInfo::is_network_uri_Valid() const{
    return m_network_uri_isValid;
}

QString OAIVpnGatewayInfo::getRegion() const {
    return m_region;
}
void OAIVpnGatewayInfo::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIVpnGatewayInfo::is_region_Set() const{
    return m_region_isSet;
}

bool OAIVpnGatewayInfo::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIVpnGatewayInfo::getUri() const {
    return m_uri;
}
void OAIVpnGatewayInfo::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIVpnGatewayInfo::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIVpnGatewayInfo::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIVpnGatewayInfo::getVpnTunnelUri() const {
    return m_vpn_tunnel_uri;
}
void OAIVpnGatewayInfo::setVpnTunnelUri(const QString &vpn_tunnel_uri) {
    m_vpn_tunnel_uri = vpn_tunnel_uri;
    m_vpn_tunnel_uri_isSet = true;
}

bool OAIVpnGatewayInfo::is_vpn_tunnel_uri_Set() const{
    return m_vpn_tunnel_uri_isSet;
}

bool OAIVpnGatewayInfo::is_vpn_tunnel_uri_Valid() const{
    return m_vpn_tunnel_uri_isValid;
}

bool OAIVpnGatewayInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_tunnel_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpnGatewayInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
