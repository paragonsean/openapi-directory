/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForwardInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForwardInfo::OAIForwardInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForwardInfo::OAIForwardInfo() {
    this->initializeModel();
}

OAIForwardInfo::~OAIForwardInfo() {}

void OAIForwardInfo::initializeModel() {

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIForwardInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForwardInfo::fromJsonObject(QJsonObject json) {

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIForwardInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForwardInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_resource_uri_isSet) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAIForwardInfo::getIpAddress() const {
    return m_ip_address;
}
void OAIForwardInfo::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIForwardInfo::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIForwardInfo::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIForwardInfo::getResourceUri() const {
    return m_resource_uri;
}
void OAIForwardInfo::setResourceUri(const QString &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAIForwardInfo::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAIForwardInfo::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

QString OAIForwardInfo::getTarget() const {
    return m_target;
}
void OAIForwardInfo::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIForwardInfo::is_target_Set() const{
    return m_target_isSet;
}

bool OAIForwardInfo::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIForwardInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForwardInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
