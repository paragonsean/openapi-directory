/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProxyConnectionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProxyConnectionInfo::OAIProxyConnectionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProxyConnectionInfo::OAIProxyConnectionInfo() {
    this->initializeModel();
}

OAIProxyConnectionInfo::~OAIProxyConnectionInfo() {}

void OAIProxyConnectionInfo::initializeModel() {

    m_network_uri_isSet = false;
    m_network_uri_isValid = false;

    m_new_destination_ip_isSet = false;
    m_new_destination_ip_isValid = false;

    m_new_destination_port_isSet = false;
    m_new_destination_port_isValid = false;

    m_new_source_ip_isSet = false;
    m_new_source_ip_isValid = false;

    m_new_source_port_isSet = false;
    m_new_source_port_isValid = false;

    m_old_destination_ip_isSet = false;
    m_old_destination_ip_isValid = false;

    m_old_destination_port_isSet = false;
    m_old_destination_port_isValid = false;

    m_old_source_ip_isSet = false;
    m_old_source_ip_isValid = false;

    m_old_source_port_isSet = false;
    m_old_source_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_subnet_uri_isSet = false;
    m_subnet_uri_isValid = false;
}

void OAIProxyConnectionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProxyConnectionInfo::fromJsonObject(QJsonObject json) {

    m_network_uri_isValid = ::OpenAPI::fromJsonValue(m_network_uri, json[QString("networkUri")]);
    m_network_uri_isSet = !json[QString("networkUri")].isNull() && m_network_uri_isValid;

    m_new_destination_ip_isValid = ::OpenAPI::fromJsonValue(m_new_destination_ip, json[QString("newDestinationIp")]);
    m_new_destination_ip_isSet = !json[QString("newDestinationIp")].isNull() && m_new_destination_ip_isValid;

    m_new_destination_port_isValid = ::OpenAPI::fromJsonValue(m_new_destination_port, json[QString("newDestinationPort")]);
    m_new_destination_port_isSet = !json[QString("newDestinationPort")].isNull() && m_new_destination_port_isValid;

    m_new_source_ip_isValid = ::OpenAPI::fromJsonValue(m_new_source_ip, json[QString("newSourceIp")]);
    m_new_source_ip_isSet = !json[QString("newSourceIp")].isNull() && m_new_source_ip_isValid;

    m_new_source_port_isValid = ::OpenAPI::fromJsonValue(m_new_source_port, json[QString("newSourcePort")]);
    m_new_source_port_isSet = !json[QString("newSourcePort")].isNull() && m_new_source_port_isValid;

    m_old_destination_ip_isValid = ::OpenAPI::fromJsonValue(m_old_destination_ip, json[QString("oldDestinationIp")]);
    m_old_destination_ip_isSet = !json[QString("oldDestinationIp")].isNull() && m_old_destination_ip_isValid;

    m_old_destination_port_isValid = ::OpenAPI::fromJsonValue(m_old_destination_port, json[QString("oldDestinationPort")]);
    m_old_destination_port_isSet = !json[QString("oldDestinationPort")].isNull() && m_old_destination_port_isValid;

    m_old_source_ip_isValid = ::OpenAPI::fromJsonValue(m_old_source_ip, json[QString("oldSourceIp")]);
    m_old_source_ip_isSet = !json[QString("oldSourceIp")].isNull() && m_old_source_ip_isValid;

    m_old_source_port_isValid = ::OpenAPI::fromJsonValue(m_old_source_port, json[QString("oldSourcePort")]);
    m_old_source_port_isSet = !json[QString("oldSourcePort")].isNull() && m_old_source_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_subnet_uri_isValid = ::OpenAPI::fromJsonValue(m_subnet_uri, json[QString("subnetUri")]);
    m_subnet_uri_isSet = !json[QString("subnetUri")].isNull() && m_subnet_uri_isValid;
}

QString OAIProxyConnectionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProxyConnectionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_network_uri_isSet) {
        obj.insert(QString("networkUri"), ::OpenAPI::toJsonValue(m_network_uri));
    }
    if (m_new_destination_ip_isSet) {
        obj.insert(QString("newDestinationIp"), ::OpenAPI::toJsonValue(m_new_destination_ip));
    }
    if (m_new_destination_port_isSet) {
        obj.insert(QString("newDestinationPort"), ::OpenAPI::toJsonValue(m_new_destination_port));
    }
    if (m_new_source_ip_isSet) {
        obj.insert(QString("newSourceIp"), ::OpenAPI::toJsonValue(m_new_source_ip));
    }
    if (m_new_source_port_isSet) {
        obj.insert(QString("newSourcePort"), ::OpenAPI::toJsonValue(m_new_source_port));
    }
    if (m_old_destination_ip_isSet) {
        obj.insert(QString("oldDestinationIp"), ::OpenAPI::toJsonValue(m_old_destination_ip));
    }
    if (m_old_destination_port_isSet) {
        obj.insert(QString("oldDestinationPort"), ::OpenAPI::toJsonValue(m_old_destination_port));
    }
    if (m_old_source_ip_isSet) {
        obj.insert(QString("oldSourceIp"), ::OpenAPI::toJsonValue(m_old_source_ip));
    }
    if (m_old_source_port_isSet) {
        obj.insert(QString("oldSourcePort"), ::OpenAPI::toJsonValue(m_old_source_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_subnet_uri_isSet) {
        obj.insert(QString("subnetUri"), ::OpenAPI::toJsonValue(m_subnet_uri));
    }
    return obj;
}

QString OAIProxyConnectionInfo::getNetworkUri() const {
    return m_network_uri;
}
void OAIProxyConnectionInfo::setNetworkUri(const QString &network_uri) {
    m_network_uri = network_uri;
    m_network_uri_isSet = true;
}

bool OAIProxyConnectionInfo::is_network_uri_Set() const{
    return m_network_uri_isSet;
}

bool OAIProxyConnectionInfo::is_network_uri_Valid() const{
    return m_network_uri_isValid;
}

QString OAIProxyConnectionInfo::getNewDestinationIp() const {
    return m_new_destination_ip;
}
void OAIProxyConnectionInfo::setNewDestinationIp(const QString &new_destination_ip) {
    m_new_destination_ip = new_destination_ip;
    m_new_destination_ip_isSet = true;
}

bool OAIProxyConnectionInfo::is_new_destination_ip_Set() const{
    return m_new_destination_ip_isSet;
}

bool OAIProxyConnectionInfo::is_new_destination_ip_Valid() const{
    return m_new_destination_ip_isValid;
}

qint32 OAIProxyConnectionInfo::getNewDestinationPort() const {
    return m_new_destination_port;
}
void OAIProxyConnectionInfo::setNewDestinationPort(const qint32 &new_destination_port) {
    m_new_destination_port = new_destination_port;
    m_new_destination_port_isSet = true;
}

bool OAIProxyConnectionInfo::is_new_destination_port_Set() const{
    return m_new_destination_port_isSet;
}

bool OAIProxyConnectionInfo::is_new_destination_port_Valid() const{
    return m_new_destination_port_isValid;
}

QString OAIProxyConnectionInfo::getNewSourceIp() const {
    return m_new_source_ip;
}
void OAIProxyConnectionInfo::setNewSourceIp(const QString &new_source_ip) {
    m_new_source_ip = new_source_ip;
    m_new_source_ip_isSet = true;
}

bool OAIProxyConnectionInfo::is_new_source_ip_Set() const{
    return m_new_source_ip_isSet;
}

bool OAIProxyConnectionInfo::is_new_source_ip_Valid() const{
    return m_new_source_ip_isValid;
}

qint32 OAIProxyConnectionInfo::getNewSourcePort() const {
    return m_new_source_port;
}
void OAIProxyConnectionInfo::setNewSourcePort(const qint32 &new_source_port) {
    m_new_source_port = new_source_port;
    m_new_source_port_isSet = true;
}

bool OAIProxyConnectionInfo::is_new_source_port_Set() const{
    return m_new_source_port_isSet;
}

bool OAIProxyConnectionInfo::is_new_source_port_Valid() const{
    return m_new_source_port_isValid;
}

QString OAIProxyConnectionInfo::getOldDestinationIp() const {
    return m_old_destination_ip;
}
void OAIProxyConnectionInfo::setOldDestinationIp(const QString &old_destination_ip) {
    m_old_destination_ip = old_destination_ip;
    m_old_destination_ip_isSet = true;
}

bool OAIProxyConnectionInfo::is_old_destination_ip_Set() const{
    return m_old_destination_ip_isSet;
}

bool OAIProxyConnectionInfo::is_old_destination_ip_Valid() const{
    return m_old_destination_ip_isValid;
}

qint32 OAIProxyConnectionInfo::getOldDestinationPort() const {
    return m_old_destination_port;
}
void OAIProxyConnectionInfo::setOldDestinationPort(const qint32 &old_destination_port) {
    m_old_destination_port = old_destination_port;
    m_old_destination_port_isSet = true;
}

bool OAIProxyConnectionInfo::is_old_destination_port_Set() const{
    return m_old_destination_port_isSet;
}

bool OAIProxyConnectionInfo::is_old_destination_port_Valid() const{
    return m_old_destination_port_isValid;
}

QString OAIProxyConnectionInfo::getOldSourceIp() const {
    return m_old_source_ip;
}
void OAIProxyConnectionInfo::setOldSourceIp(const QString &old_source_ip) {
    m_old_source_ip = old_source_ip;
    m_old_source_ip_isSet = true;
}

bool OAIProxyConnectionInfo::is_old_source_ip_Set() const{
    return m_old_source_ip_isSet;
}

bool OAIProxyConnectionInfo::is_old_source_ip_Valid() const{
    return m_old_source_ip_isValid;
}

qint32 OAIProxyConnectionInfo::getOldSourcePort() const {
    return m_old_source_port;
}
void OAIProxyConnectionInfo::setOldSourcePort(const qint32 &old_source_port) {
    m_old_source_port = old_source_port;
    m_old_source_port_isSet = true;
}

bool OAIProxyConnectionInfo::is_old_source_port_Set() const{
    return m_old_source_port_isSet;
}

bool OAIProxyConnectionInfo::is_old_source_port_Valid() const{
    return m_old_source_port_isValid;
}

QString OAIProxyConnectionInfo::getProtocol() const {
    return m_protocol;
}
void OAIProxyConnectionInfo::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIProxyConnectionInfo::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIProxyConnectionInfo::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIProxyConnectionInfo::getSubnetUri() const {
    return m_subnet_uri;
}
void OAIProxyConnectionInfo::setSubnetUri(const QString &subnet_uri) {
    m_subnet_uri = subnet_uri;
    m_subnet_uri_isSet = true;
}

bool OAIProxyConnectionInfo::is_subnet_uri_Set() const{
    return m_subnet_uri_isSet;
}

bool OAIProxyConnectionInfo::is_subnet_uri_Valid() const{
    return m_subnet_uri_isValid;
}

bool OAIProxyConnectionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_destination_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_destination_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_source_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_source_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_destination_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_destination_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_source_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_source_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProxyConnectionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
