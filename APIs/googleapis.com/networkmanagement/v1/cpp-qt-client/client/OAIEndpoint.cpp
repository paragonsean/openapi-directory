/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoint::OAIEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoint::OAIEndpoint() {
    this->initializeModel();
}

OAIEndpoint::~OAIEndpoint() {}

void OAIEndpoint::initializeModel() {

    m_app_engine_version_isSet = false;
    m_app_engine_version_isValid = false;

    m_cloud_function_isSet = false;
    m_cloud_function_isValid = false;

    m_cloud_run_revision_isSet = false;
    m_cloud_run_revision_isValid = false;

    m_cloud_sql_instance_isSet = false;
    m_cloud_sql_instance_isValid = false;

    m_forwarding_rule_isSet = false;
    m_forwarding_rule_isValid = false;

    m_forwarding_rule_target_isSet = false;
    m_forwarding_rule_target_isValid = false;

    m_gke_master_cluster_isSet = false;
    m_gke_master_cluster_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_load_balancer_id_isSet = false;
    m_load_balancer_id_isValid = false;

    m_load_balancer_type_isSet = false;
    m_load_balancer_type_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_network_type_isSet = false;
    m_network_type_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;
}

void OAIEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoint::fromJsonObject(QJsonObject json) {

    m_app_engine_version_isValid = ::OpenAPI::fromJsonValue(m_app_engine_version, json[QString("appEngineVersion")]);
    m_app_engine_version_isSet = !json[QString("appEngineVersion")].isNull() && m_app_engine_version_isValid;

    m_cloud_function_isValid = ::OpenAPI::fromJsonValue(m_cloud_function, json[QString("cloudFunction")]);
    m_cloud_function_isSet = !json[QString("cloudFunction")].isNull() && m_cloud_function_isValid;

    m_cloud_run_revision_isValid = ::OpenAPI::fromJsonValue(m_cloud_run_revision, json[QString("cloudRunRevision")]);
    m_cloud_run_revision_isSet = !json[QString("cloudRunRevision")].isNull() && m_cloud_run_revision_isValid;

    m_cloud_sql_instance_isValid = ::OpenAPI::fromJsonValue(m_cloud_sql_instance, json[QString("cloudSqlInstance")]);
    m_cloud_sql_instance_isSet = !json[QString("cloudSqlInstance")].isNull() && m_cloud_sql_instance_isValid;

    m_forwarding_rule_isValid = ::OpenAPI::fromJsonValue(m_forwarding_rule, json[QString("forwardingRule")]);
    m_forwarding_rule_isSet = !json[QString("forwardingRule")].isNull() && m_forwarding_rule_isValid;

    m_forwarding_rule_target_isValid = ::OpenAPI::fromJsonValue(m_forwarding_rule_target, json[QString("forwardingRuleTarget")]);
    m_forwarding_rule_target_isSet = !json[QString("forwardingRuleTarget")].isNull() && m_forwarding_rule_target_isValid;

    m_gke_master_cluster_isValid = ::OpenAPI::fromJsonValue(m_gke_master_cluster, json[QString("gkeMasterCluster")]);
    m_gke_master_cluster_isSet = !json[QString("gkeMasterCluster")].isNull() && m_gke_master_cluster_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_load_balancer_id_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_id, json[QString("loadBalancerId")]);
    m_load_balancer_id_isSet = !json[QString("loadBalancerId")].isNull() && m_load_balancer_id_isValid;

    m_load_balancer_type_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_type, json[QString("loadBalancerType")]);
    m_load_balancer_type_isSet = !json[QString("loadBalancerType")].isNull() && m_load_balancer_type_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_network_type_isValid = ::OpenAPI::fromJsonValue(m_network_type, json[QString("networkType")]);
    m_network_type_isSet = !json[QString("networkType")].isNull() && m_network_type_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;
}

QString OAIEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_app_engine_version.isSet()) {
        obj.insert(QString("appEngineVersion"), ::OpenAPI::toJsonValue(m_app_engine_version));
    }
    if (m_cloud_function.isSet()) {
        obj.insert(QString("cloudFunction"), ::OpenAPI::toJsonValue(m_cloud_function));
    }
    if (m_cloud_run_revision.isSet()) {
        obj.insert(QString("cloudRunRevision"), ::OpenAPI::toJsonValue(m_cloud_run_revision));
    }
    if (m_cloud_sql_instance_isSet) {
        obj.insert(QString("cloudSqlInstance"), ::OpenAPI::toJsonValue(m_cloud_sql_instance));
    }
    if (m_forwarding_rule_isSet) {
        obj.insert(QString("forwardingRule"), ::OpenAPI::toJsonValue(m_forwarding_rule));
    }
    if (m_forwarding_rule_target_isSet) {
        obj.insert(QString("forwardingRuleTarget"), ::OpenAPI::toJsonValue(m_forwarding_rule_target));
    }
    if (m_gke_master_cluster_isSet) {
        obj.insert(QString("gkeMasterCluster"), ::OpenAPI::toJsonValue(m_gke_master_cluster));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_load_balancer_id_isSet) {
        obj.insert(QString("loadBalancerId"), ::OpenAPI::toJsonValue(m_load_balancer_id));
    }
    if (m_load_balancer_type_isSet) {
        obj.insert(QString("loadBalancerType"), ::OpenAPI::toJsonValue(m_load_balancer_type));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_network_type_isSet) {
        obj.insert(QString("networkType"), ::OpenAPI::toJsonValue(m_network_type));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    return obj;
}

OAIAppEngineVersionEndpoint OAIEndpoint::getAppEngineVersion() const {
    return m_app_engine_version;
}
void OAIEndpoint::setAppEngineVersion(const OAIAppEngineVersionEndpoint &app_engine_version) {
    m_app_engine_version = app_engine_version;
    m_app_engine_version_isSet = true;
}

bool OAIEndpoint::is_app_engine_version_Set() const{
    return m_app_engine_version_isSet;
}

bool OAIEndpoint::is_app_engine_version_Valid() const{
    return m_app_engine_version_isValid;
}

OAICloudFunctionEndpoint OAIEndpoint::getCloudFunction() const {
    return m_cloud_function;
}
void OAIEndpoint::setCloudFunction(const OAICloudFunctionEndpoint &cloud_function) {
    m_cloud_function = cloud_function;
    m_cloud_function_isSet = true;
}

bool OAIEndpoint::is_cloud_function_Set() const{
    return m_cloud_function_isSet;
}

bool OAIEndpoint::is_cloud_function_Valid() const{
    return m_cloud_function_isValid;
}

OAICloudRunRevisionEndpoint OAIEndpoint::getCloudRunRevision() const {
    return m_cloud_run_revision;
}
void OAIEndpoint::setCloudRunRevision(const OAICloudRunRevisionEndpoint &cloud_run_revision) {
    m_cloud_run_revision = cloud_run_revision;
    m_cloud_run_revision_isSet = true;
}

bool OAIEndpoint::is_cloud_run_revision_Set() const{
    return m_cloud_run_revision_isSet;
}

bool OAIEndpoint::is_cloud_run_revision_Valid() const{
    return m_cloud_run_revision_isValid;
}

QString OAIEndpoint::getCloudSqlInstance() const {
    return m_cloud_sql_instance;
}
void OAIEndpoint::setCloudSqlInstance(const QString &cloud_sql_instance) {
    m_cloud_sql_instance = cloud_sql_instance;
    m_cloud_sql_instance_isSet = true;
}

bool OAIEndpoint::is_cloud_sql_instance_Set() const{
    return m_cloud_sql_instance_isSet;
}

bool OAIEndpoint::is_cloud_sql_instance_Valid() const{
    return m_cloud_sql_instance_isValid;
}

QString OAIEndpoint::getForwardingRule() const {
    return m_forwarding_rule;
}
void OAIEndpoint::setForwardingRule(const QString &forwarding_rule) {
    m_forwarding_rule = forwarding_rule;
    m_forwarding_rule_isSet = true;
}

bool OAIEndpoint::is_forwarding_rule_Set() const{
    return m_forwarding_rule_isSet;
}

bool OAIEndpoint::is_forwarding_rule_Valid() const{
    return m_forwarding_rule_isValid;
}

QString OAIEndpoint::getForwardingRuleTarget() const {
    return m_forwarding_rule_target;
}
void OAIEndpoint::setForwardingRuleTarget(const QString &forwarding_rule_target) {
    m_forwarding_rule_target = forwarding_rule_target;
    m_forwarding_rule_target_isSet = true;
}

bool OAIEndpoint::is_forwarding_rule_target_Set() const{
    return m_forwarding_rule_target_isSet;
}

bool OAIEndpoint::is_forwarding_rule_target_Valid() const{
    return m_forwarding_rule_target_isValid;
}

QString OAIEndpoint::getGkeMasterCluster() const {
    return m_gke_master_cluster;
}
void OAIEndpoint::setGkeMasterCluster(const QString &gke_master_cluster) {
    m_gke_master_cluster = gke_master_cluster;
    m_gke_master_cluster_isSet = true;
}

bool OAIEndpoint::is_gke_master_cluster_Set() const{
    return m_gke_master_cluster_isSet;
}

bool OAIEndpoint::is_gke_master_cluster_Valid() const{
    return m_gke_master_cluster_isValid;
}

QString OAIEndpoint::getInstance() const {
    return m_instance;
}
void OAIEndpoint::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIEndpoint::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIEndpoint::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIEndpoint::getIpAddress() const {
    return m_ip_address;
}
void OAIEndpoint::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIEndpoint::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIEndpoint::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIEndpoint::getLoadBalancerId() const {
    return m_load_balancer_id;
}
void OAIEndpoint::setLoadBalancerId(const QString &load_balancer_id) {
    m_load_balancer_id = load_balancer_id;
    m_load_balancer_id_isSet = true;
}

bool OAIEndpoint::is_load_balancer_id_Set() const{
    return m_load_balancer_id_isSet;
}

bool OAIEndpoint::is_load_balancer_id_Valid() const{
    return m_load_balancer_id_isValid;
}

QString OAIEndpoint::getLoadBalancerType() const {
    return m_load_balancer_type;
}
void OAIEndpoint::setLoadBalancerType(const QString &load_balancer_type) {
    m_load_balancer_type = load_balancer_type;
    m_load_balancer_type_isSet = true;
}

bool OAIEndpoint::is_load_balancer_type_Set() const{
    return m_load_balancer_type_isSet;
}

bool OAIEndpoint::is_load_balancer_type_Valid() const{
    return m_load_balancer_type_isValid;
}

QString OAIEndpoint::getNetwork() const {
    return m_network;
}
void OAIEndpoint::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIEndpoint::is_network_Set() const{
    return m_network_isSet;
}

bool OAIEndpoint::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIEndpoint::getNetworkType() const {
    return m_network_type;
}
void OAIEndpoint::setNetworkType(const QString &network_type) {
    m_network_type = network_type;
    m_network_type_isSet = true;
}

bool OAIEndpoint::is_network_type_Set() const{
    return m_network_type_isSet;
}

bool OAIEndpoint::is_network_type_Valid() const{
    return m_network_type_isValid;
}

qint32 OAIEndpoint::getPort() const {
    return m_port;
}
void OAIEndpoint::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIEndpoint::is_port_Set() const{
    return m_port_isSet;
}

bool OAIEndpoint::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIEndpoint::getProjectId() const {
    return m_project_id;
}
void OAIEndpoint::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIEndpoint::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIEndpoint::is_project_id_Valid() const{
    return m_project_id_isValid;
}

bool OAIEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_engine_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_run_revision.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_sql_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_rule_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_master_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
