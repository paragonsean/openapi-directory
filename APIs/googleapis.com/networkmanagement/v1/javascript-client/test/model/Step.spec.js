/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetworkManagementApi);
  }
}(this, function(expect, NetworkManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetworkManagementApi.Step();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Step', function() {
    it('should create an instance of Step', function() {
      // uncomment below and update the code to test Step
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be.a(NetworkManagementApi.Step);
    });

    it('should have the property abort (base name: "abort")', function() {
      // uncomment below and update the code to test the property abort
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property appEngineVersion (base name: "appEngineVersion")', function() {
      // uncomment below and update the code to test the property appEngineVersion
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property causesDrop (base name: "causesDrop")', function() {
      // uncomment below and update the code to test the property causesDrop
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property cloudFunction (base name: "cloudFunction")', function() {
      // uncomment below and update the code to test the property cloudFunction
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property cloudRunRevision (base name: "cloudRunRevision")', function() {
      // uncomment below and update the code to test the property cloudRunRevision
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property cloudSqlInstance (base name: "cloudSqlInstance")', function() {
      // uncomment below and update the code to test the property cloudSqlInstance
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property deliver (base name: "deliver")', function() {
      // uncomment below and update the code to test the property deliver
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property drop (base name: "drop")', function() {
      // uncomment below and update the code to test the property drop
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property endpoint (base name: "endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property firewall (base name: "firewall")', function() {
      // uncomment below and update the code to test the property firewall
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property forward (base name: "forward")', function() {
      // uncomment below and update the code to test the property forward
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property forwardingRule (base name: "forwardingRule")', function() {
      // uncomment below and update the code to test the property forwardingRule
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property gkeMaster (base name: "gkeMaster")', function() {
      // uncomment below and update the code to test the property gkeMaster
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property googleService (base name: "googleService")', function() {
      // uncomment below and update the code to test the property googleService
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property instance (base name: "instance")', function() {
      // uncomment below and update the code to test the property instance
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancer (base name: "loadBalancer")', function() {
      // uncomment below and update the code to test the property loadBalancer
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property loadBalancerBackendInfo (base name: "loadBalancerBackendInfo")', function() {
      // uncomment below and update the code to test the property loadBalancerBackendInfo
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property nat (base name: "nat")', function() {
      // uncomment below and update the code to test the property nat
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property network (base name: "network")', function() {
      // uncomment below and update the code to test the property network
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property projectId (base name: "projectId")', function() {
      // uncomment below and update the code to test the property projectId
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property proxyConnection (base name: "proxyConnection")', function() {
      // uncomment below and update the code to test the property proxyConnection
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property route (base name: "route")', function() {
      // uncomment below and update the code to test the property route
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property storageBucket (base name: "storageBucket")', function() {
      // uncomment below and update the code to test the property storageBucket
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property vpcConnector (base name: "vpcConnector")', function() {
      // uncomment below and update the code to test the property vpcConnector
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property vpnGateway (base name: "vpnGateway")', function() {
      // uncomment below and update the code to test the property vpnGateway
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

    it('should have the property vpnTunnel (base name: "vpnTunnel")', function() {
      // uncomment below and update the code to test the property vpnTunnel
      //var instance = new NetworkManagementApi.Step();
      //expect(instance).to.be();
    });

  });

}));
