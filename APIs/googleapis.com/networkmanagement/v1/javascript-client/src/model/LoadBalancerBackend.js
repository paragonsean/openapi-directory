/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoadBalancerBackend model module.
 * @module model/LoadBalancerBackend
 * @version v1
 */
class LoadBalancerBackend {
    /**
     * Constructs a new <code>LoadBalancerBackend</code>.
     * For display only. Metadata associated with a specific load balancer backend.
     * @alias module:model/LoadBalancerBackend
     */
    constructor() { 
        
        LoadBalancerBackend.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoadBalancerBackend</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoadBalancerBackend} obj Optional instance to populate.
     * @return {module:model/LoadBalancerBackend} The populated <code>LoadBalancerBackend</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoadBalancerBackend();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('healthCheckAllowingFirewallRules')) {
                obj['healthCheckAllowingFirewallRules'] = ApiClient.convertToType(data['healthCheckAllowingFirewallRules'], ['String']);
            }
            if (data.hasOwnProperty('healthCheckBlockingFirewallRules')) {
                obj['healthCheckBlockingFirewallRules'] = ApiClient.convertToType(data['healthCheckBlockingFirewallRules'], ['String']);
            }
            if (data.hasOwnProperty('healthCheckFirewallState')) {
                obj['healthCheckFirewallState'] = ApiClient.convertToType(data['healthCheckFirewallState'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoadBalancerBackend</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoadBalancerBackend</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['healthCheckAllowingFirewallRules'])) {
            throw new Error("Expected the field `healthCheckAllowingFirewallRules` to be an array in the JSON data but got " + data['healthCheckAllowingFirewallRules']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['healthCheckBlockingFirewallRules'])) {
            throw new Error("Expected the field `healthCheckBlockingFirewallRules` to be an array in the JSON data but got " + data['healthCheckBlockingFirewallRules']);
        }
        // ensure the json data is a string
        if (data['healthCheckFirewallState'] && !(typeof data['healthCheckFirewallState'] === 'string' || data['healthCheckFirewallState'] instanceof String)) {
            throw new Error("Expected the field `healthCheckFirewallState` to be a primitive type in the JSON string but got " + data['healthCheckFirewallState']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * Name of a Compute Engine instance or network endpoint.
 * @member {String} displayName
 */
LoadBalancerBackend.prototype['displayName'] = undefined;

/**
 * A list of firewall rule URIs allowing probes from health check IP ranges.
 * @member {Array.<String>} healthCheckAllowingFirewallRules
 */
LoadBalancerBackend.prototype['healthCheckAllowingFirewallRules'] = undefined;

/**
 * A list of firewall rule URIs blocking probes from health check IP ranges.
 * @member {Array.<String>} healthCheckBlockingFirewallRules
 */
LoadBalancerBackend.prototype['healthCheckBlockingFirewallRules'] = undefined;

/**
 * State of the health check firewall configuration.
 * @member {module:model/LoadBalancerBackend.HealthCheckFirewallStateEnum} healthCheckFirewallState
 */
LoadBalancerBackend.prototype['healthCheckFirewallState'] = undefined;

/**
 * URI of a Compute Engine instance or network endpoint.
 * @member {String} uri
 */
LoadBalancerBackend.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>healthCheckFirewallState</code> property.
 * @enum {String}
 * @readonly
 */
LoadBalancerBackend['HealthCheckFirewallStateEnum'] = {

    /**
     * value: "HEALTH_CHECK_FIREWALL_STATE_UNSPECIFIED"
     * @const
     */
    "HEALTH_CHECK_FIREWALL_STATE_UNSPECIFIED": "HEALTH_CHECK_FIREWALL_STATE_UNSPECIFIED",

    /**
     * value: "CONFIGURED"
     * @const
     */
    "CONFIGURED": "CONFIGURED",

    /**
     * value: "MISCONFIGURED"
     * @const
     */
    "MISCONFIGURED": "MISCONFIGURED"
};



export default LoadBalancerBackend;

