/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';
import Trace from './Trace';

/**
 * The ReachabilityDetails model module.
 * @module model/ReachabilityDetails
 * @version v1
 */
class ReachabilityDetails {
    /**
     * Constructs a new <code>ReachabilityDetails</code>.
     * Results of the configuration analysis from the last run of the test.
     * @alias module:model/ReachabilityDetails
     */
    constructor() { 
        
        ReachabilityDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReachabilityDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReachabilityDetails} obj Optional instance to populate.
     * @return {module:model/ReachabilityDetails} The populated <code>ReachabilityDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReachabilityDetails();

            if (data.hasOwnProperty('error')) {
                obj['error'] = Status.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('traces')) {
                obj['traces'] = ApiClient.convertToType(data['traces'], [Trace]);
            }
            if (data.hasOwnProperty('verifyTime')) {
                obj['verifyTime'] = ApiClient.convertToType(data['verifyTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReachabilityDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReachabilityDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `error`
        if (data['error']) { // data not null
          Status.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        if (data['traces']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['traces'])) {
                throw new Error("Expected the field `traces` to be an array in the JSON data but got " + data['traces']);
            }
            // validate the optional field `traces` (array)
            for (const item of data['traces']) {
                Trace.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['verifyTime'] && !(typeof data['verifyTime'] === 'string' || data['verifyTime'] instanceof String)) {
            throw new Error("Expected the field `verifyTime` to be a primitive type in the JSON string but got " + data['verifyTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/Status} error
 */
ReachabilityDetails.prototype['error'] = undefined;

/**
 * The overall result of the test's configuration analysis.
 * @member {module:model/ReachabilityDetails.ResultEnum} result
 */
ReachabilityDetails.prototype['result'] = undefined;

/**
 * Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.
 * @member {Array.<module:model/Trace>} traces
 */
ReachabilityDetails.prototype['traces'] = undefined;

/**
 * The time of the configuration analysis.
 * @member {String} verifyTime
 */
ReachabilityDetails.prototype['verifyTime'] = undefined;





/**
 * Allowed values for the <code>result</code> property.
 * @enum {String}
 * @readonly
 */
ReachabilityDetails['ResultEnum'] = {

    /**
     * value: "RESULT_UNSPECIFIED"
     * @const
     */
    "RESULT_UNSPECIFIED": "RESULT_UNSPECIFIED",

    /**
     * value: "REACHABLE"
     * @const
     */
    "REACHABLE": "REACHABLE",

    /**
     * value: "UNREACHABLE"
     * @const
     */
    "UNREACHABLE": "UNREACHABLE",

    /**
     * value: "AMBIGUOUS"
     * @const
     */
    "AMBIGUOUS": "AMBIGUOUS",

    /**
     * value: "UNDETERMINED"
     * @const
     */
    "UNDETERMINED": "UNDETERMINED"
};



export default ReachabilityDetails;

