/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EndpointInfo model module.
 * @module model/EndpointInfo
 * @version v1
 */
class EndpointInfo {
    /**
     * Constructs a new <code>EndpointInfo</code>.
     * For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model.
     * @alias module:model/EndpointInfo
     */
    constructor() { 
        
        EndpointInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EndpointInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EndpointInfo} obj Optional instance to populate.
     * @return {module:model/EndpointInfo} The populated <code>EndpointInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EndpointInfo();

            if (data.hasOwnProperty('destinationIp')) {
                obj['destinationIp'] = ApiClient.convertToType(data['destinationIp'], 'String');
            }
            if (data.hasOwnProperty('destinationNetworkUri')) {
                obj['destinationNetworkUri'] = ApiClient.convertToType(data['destinationNetworkUri'], 'String');
            }
            if (data.hasOwnProperty('destinationPort')) {
                obj['destinationPort'] = ApiClient.convertToType(data['destinationPort'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('sourceAgentUri')) {
                obj['sourceAgentUri'] = ApiClient.convertToType(data['sourceAgentUri'], 'String');
            }
            if (data.hasOwnProperty('sourceIp')) {
                obj['sourceIp'] = ApiClient.convertToType(data['sourceIp'], 'String');
            }
            if (data.hasOwnProperty('sourceNetworkUri')) {
                obj['sourceNetworkUri'] = ApiClient.convertToType(data['sourceNetworkUri'], 'String');
            }
            if (data.hasOwnProperty('sourcePort')) {
                obj['sourcePort'] = ApiClient.convertToType(data['sourcePort'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EndpointInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EndpointInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['destinationIp'] && !(typeof data['destinationIp'] === 'string' || data['destinationIp'] instanceof String)) {
            throw new Error("Expected the field `destinationIp` to be a primitive type in the JSON string but got " + data['destinationIp']);
        }
        // ensure the json data is a string
        if (data['destinationNetworkUri'] && !(typeof data['destinationNetworkUri'] === 'string' || data['destinationNetworkUri'] instanceof String)) {
            throw new Error("Expected the field `destinationNetworkUri` to be a primitive type in the JSON string but got " + data['destinationNetworkUri']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['sourceAgentUri'] && !(typeof data['sourceAgentUri'] === 'string' || data['sourceAgentUri'] instanceof String)) {
            throw new Error("Expected the field `sourceAgentUri` to be a primitive type in the JSON string but got " + data['sourceAgentUri']);
        }
        // ensure the json data is a string
        if (data['sourceIp'] && !(typeof data['sourceIp'] === 'string' || data['sourceIp'] instanceof String)) {
            throw new Error("Expected the field `sourceIp` to be a primitive type in the JSON string but got " + data['sourceIp']);
        }
        // ensure the json data is a string
        if (data['sourceNetworkUri'] && !(typeof data['sourceNetworkUri'] === 'string' || data['sourceNetworkUri'] instanceof String)) {
            throw new Error("Expected the field `sourceNetworkUri` to be a primitive type in the JSON string but got " + data['sourceNetworkUri']);
        }

        return true;
    }


}



/**
 * Destination IP address.
 * @member {String} destinationIp
 */
EndpointInfo.prototype['destinationIp'] = undefined;

/**
 * URI of the network where this packet is sent to.
 * @member {String} destinationNetworkUri
 */
EndpointInfo.prototype['destinationNetworkUri'] = undefined;

/**
 * Destination port. Only valid when protocol is TCP or UDP.
 * @member {Number} destinationPort
 */
EndpointInfo.prototype['destinationPort'] = undefined;

/**
 * IP protocol in string format, for example: \"TCP\", \"UDP\", \"ICMP\".
 * @member {String} protocol
 */
EndpointInfo.prototype['protocol'] = undefined;

/**
 * URI of the source telemetry agent this packet originates from.
 * @member {String} sourceAgentUri
 */
EndpointInfo.prototype['sourceAgentUri'] = undefined;

/**
 * Source IP address.
 * @member {String} sourceIp
 */
EndpointInfo.prototype['sourceIp'] = undefined;

/**
 * URI of the network where this packet originates from.
 * @member {String} sourceNetworkUri
 */
EndpointInfo.prototype['sourceNetworkUri'] = undefined;

/**
 * Source port. Only valid when protocol is TCP or UDP.
 * @member {Number} sourcePort
 */
EndpointInfo.prototype['sourcePort'] = undefined;






export default EndpointInfo;

