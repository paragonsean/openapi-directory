/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoadBalancerBackend from './LoadBalancerBackend';

/**
 * The LoadBalancerInfo model module.
 * @module model/LoadBalancerInfo
 * @version v1
 */
class LoadBalancerInfo {
    /**
     * Constructs a new <code>LoadBalancerInfo</code>.
     * For display only. Metadata associated with a load balancer.
     * @alias module:model/LoadBalancerInfo
     */
    constructor() { 
        
        LoadBalancerInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoadBalancerInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoadBalancerInfo} obj Optional instance to populate.
     * @return {module:model/LoadBalancerInfo} The populated <code>LoadBalancerInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoadBalancerInfo();

            if (data.hasOwnProperty('backendType')) {
                obj['backendType'] = ApiClient.convertToType(data['backendType'], 'String');
            }
            if (data.hasOwnProperty('backendUri')) {
                obj['backendUri'] = ApiClient.convertToType(data['backendUri'], 'String');
            }
            if (data.hasOwnProperty('backends')) {
                obj['backends'] = ApiClient.convertToType(data['backends'], [LoadBalancerBackend]);
            }
            if (data.hasOwnProperty('healthCheckUri')) {
                obj['healthCheckUri'] = ApiClient.convertToType(data['healthCheckUri'], 'String');
            }
            if (data.hasOwnProperty('loadBalancerType')) {
                obj['loadBalancerType'] = ApiClient.convertToType(data['loadBalancerType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoadBalancerInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoadBalancerInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backendType'] && !(typeof data['backendType'] === 'string' || data['backendType'] instanceof String)) {
            throw new Error("Expected the field `backendType` to be a primitive type in the JSON string but got " + data['backendType']);
        }
        // ensure the json data is a string
        if (data['backendUri'] && !(typeof data['backendUri'] === 'string' || data['backendUri'] instanceof String)) {
            throw new Error("Expected the field `backendUri` to be a primitive type in the JSON string but got " + data['backendUri']);
        }
        if (data['backends']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['backends'])) {
                throw new Error("Expected the field `backends` to be an array in the JSON data but got " + data['backends']);
            }
            // validate the optional field `backends` (array)
            for (const item of data['backends']) {
                LoadBalancerBackend.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['healthCheckUri'] && !(typeof data['healthCheckUri'] === 'string' || data['healthCheckUri'] instanceof String)) {
            throw new Error("Expected the field `healthCheckUri` to be a primitive type in the JSON string but got " + data['healthCheckUri']);
        }
        // ensure the json data is a string
        if (data['loadBalancerType'] && !(typeof data['loadBalancerType'] === 'string' || data['loadBalancerType'] instanceof String)) {
            throw new Error("Expected the field `loadBalancerType` to be a primitive type in the JSON string but got " + data['loadBalancerType']);
        }

        return true;
    }


}



/**
 * Type of load balancer's backend configuration.
 * @member {module:model/LoadBalancerInfo.BackendTypeEnum} backendType
 */
LoadBalancerInfo.prototype['backendType'] = undefined;

/**
 * Backend configuration URI.
 * @member {String} backendUri
 */
LoadBalancerInfo.prototype['backendUri'] = undefined;

/**
 * Information for the loadbalancer backends.
 * @member {Array.<module:model/LoadBalancerBackend>} backends
 */
LoadBalancerInfo.prototype['backends'] = undefined;

/**
 * URI of the health check for the load balancer. Deprecated and no longer populated as different load balancer backends might have different health checks.
 * @member {String} healthCheckUri
 */
LoadBalancerInfo.prototype['healthCheckUri'] = undefined;

/**
 * Type of the load balancer.
 * @member {module:model/LoadBalancerInfo.LoadBalancerTypeEnum} loadBalancerType
 */
LoadBalancerInfo.prototype['loadBalancerType'] = undefined;





/**
 * Allowed values for the <code>backendType</code> property.
 * @enum {String}
 * @readonly
 */
LoadBalancerInfo['BackendTypeEnum'] = {

    /**
     * value: "BACKEND_TYPE_UNSPECIFIED"
     * @const
     */
    "BACKEND_TYPE_UNSPECIFIED": "BACKEND_TYPE_UNSPECIFIED",

    /**
     * value: "BACKEND_SERVICE"
     * @const
     */
    "BACKEND_SERVICE": "BACKEND_SERVICE",

    /**
     * value: "TARGET_POOL"
     * @const
     */
    "TARGET_POOL": "TARGET_POOL",

    /**
     * value: "TARGET_INSTANCE"
     * @const
     */
    "TARGET_INSTANCE": "TARGET_INSTANCE"
};


/**
 * Allowed values for the <code>loadBalancerType</code> property.
 * @enum {String}
 * @readonly
 */
LoadBalancerInfo['LoadBalancerTypeEnum'] = {

    /**
     * value: "LOAD_BALANCER_TYPE_UNSPECIFIED"
     * @const
     */
    "LOAD_BALANCER_TYPE_UNSPECIFIED": "LOAD_BALANCER_TYPE_UNSPECIFIED",

    /**
     * value: "INTERNAL_TCP_UDP"
     * @const
     */
    "INTERNAL_TCP_UDP": "INTERNAL_TCP_UDP",

    /**
     * value: "NETWORK_TCP_UDP"
     * @const
     */
    "NETWORK_TCP_UDP": "NETWORK_TCP_UDP",

    /**
     * value: "HTTP_PROXY"
     * @const
     */
    "HTTP_PROXY": "HTTP_PROXY",

    /**
     * value: "TCP_PROXY"
     * @const
     */
    "TCP_PROXY": "TCP_PROXY",

    /**
     * value: "SSL_PROXY"
     * @const
     */
    "SSL_PROXY": "SSL_PROXY"
};



export default LoadBalancerInfo;

