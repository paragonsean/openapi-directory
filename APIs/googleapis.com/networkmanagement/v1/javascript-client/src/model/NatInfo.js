/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NatInfo model module.
 * @module model/NatInfo
 * @version v1
 */
class NatInfo {
    /**
     * Constructs a new <code>NatInfo</code>.
     * For display only. Metadata associated with NAT.
     * @alias module:model/NatInfo
     */
    constructor() { 
        
        NatInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NatInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NatInfo} obj Optional instance to populate.
     * @return {module:model/NatInfo} The populated <code>NatInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NatInfo();

            if (data.hasOwnProperty('natGatewayName')) {
                obj['natGatewayName'] = ApiClient.convertToType(data['natGatewayName'], 'String');
            }
            if (data.hasOwnProperty('networkUri')) {
                obj['networkUri'] = ApiClient.convertToType(data['networkUri'], 'String');
            }
            if (data.hasOwnProperty('newDestinationIp')) {
                obj['newDestinationIp'] = ApiClient.convertToType(data['newDestinationIp'], 'String');
            }
            if (data.hasOwnProperty('newDestinationPort')) {
                obj['newDestinationPort'] = ApiClient.convertToType(data['newDestinationPort'], 'Number');
            }
            if (data.hasOwnProperty('newSourceIp')) {
                obj['newSourceIp'] = ApiClient.convertToType(data['newSourceIp'], 'String');
            }
            if (data.hasOwnProperty('newSourcePort')) {
                obj['newSourcePort'] = ApiClient.convertToType(data['newSourcePort'], 'Number');
            }
            if (data.hasOwnProperty('oldDestinationIp')) {
                obj['oldDestinationIp'] = ApiClient.convertToType(data['oldDestinationIp'], 'String');
            }
            if (data.hasOwnProperty('oldDestinationPort')) {
                obj['oldDestinationPort'] = ApiClient.convertToType(data['oldDestinationPort'], 'Number');
            }
            if (data.hasOwnProperty('oldSourceIp')) {
                obj['oldSourceIp'] = ApiClient.convertToType(data['oldSourceIp'], 'String');
            }
            if (data.hasOwnProperty('oldSourcePort')) {
                obj['oldSourcePort'] = ApiClient.convertToType(data['oldSourcePort'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('routerUri')) {
                obj['routerUri'] = ApiClient.convertToType(data['routerUri'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NatInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NatInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['natGatewayName'] && !(typeof data['natGatewayName'] === 'string' || data['natGatewayName'] instanceof String)) {
            throw new Error("Expected the field `natGatewayName` to be a primitive type in the JSON string but got " + data['natGatewayName']);
        }
        // ensure the json data is a string
        if (data['networkUri'] && !(typeof data['networkUri'] === 'string' || data['networkUri'] instanceof String)) {
            throw new Error("Expected the field `networkUri` to be a primitive type in the JSON string but got " + data['networkUri']);
        }
        // ensure the json data is a string
        if (data['newDestinationIp'] && !(typeof data['newDestinationIp'] === 'string' || data['newDestinationIp'] instanceof String)) {
            throw new Error("Expected the field `newDestinationIp` to be a primitive type in the JSON string but got " + data['newDestinationIp']);
        }
        // ensure the json data is a string
        if (data['newSourceIp'] && !(typeof data['newSourceIp'] === 'string' || data['newSourceIp'] instanceof String)) {
            throw new Error("Expected the field `newSourceIp` to be a primitive type in the JSON string but got " + data['newSourceIp']);
        }
        // ensure the json data is a string
        if (data['oldDestinationIp'] && !(typeof data['oldDestinationIp'] === 'string' || data['oldDestinationIp'] instanceof String)) {
            throw new Error("Expected the field `oldDestinationIp` to be a primitive type in the JSON string but got " + data['oldDestinationIp']);
        }
        // ensure the json data is a string
        if (data['oldSourceIp'] && !(typeof data['oldSourceIp'] === 'string' || data['oldSourceIp'] instanceof String)) {
            throw new Error("Expected the field `oldSourceIp` to be a primitive type in the JSON string but got " + data['oldSourceIp']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['routerUri'] && !(typeof data['routerUri'] === 'string' || data['routerUri'] instanceof String)) {
            throw new Error("Expected the field `routerUri` to be a primitive type in the JSON string but got " + data['routerUri']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The name of Cloud NAT Gateway. Only valid when type is CLOUD_NAT.
 * @member {String} natGatewayName
 */
NatInfo.prototype['natGatewayName'] = undefined;

/**
 * URI of the network where NAT translation takes place.
 * @member {String} networkUri
 */
NatInfo.prototype['networkUri'] = undefined;

/**
 * Destination IP address after NAT translation.
 * @member {String} newDestinationIp
 */
NatInfo.prototype['newDestinationIp'] = undefined;

/**
 * Destination port after NAT translation. Only valid when protocol is TCP or UDP.
 * @member {Number} newDestinationPort
 */
NatInfo.prototype['newDestinationPort'] = undefined;

/**
 * Source IP address after NAT translation.
 * @member {String} newSourceIp
 */
NatInfo.prototype['newSourceIp'] = undefined;

/**
 * Source port after NAT translation. Only valid when protocol is TCP or UDP.
 * @member {Number} newSourcePort
 */
NatInfo.prototype['newSourcePort'] = undefined;

/**
 * Destination IP address before NAT translation.
 * @member {String} oldDestinationIp
 */
NatInfo.prototype['oldDestinationIp'] = undefined;

/**
 * Destination port before NAT translation. Only valid when protocol is TCP or UDP.
 * @member {Number} oldDestinationPort
 */
NatInfo.prototype['oldDestinationPort'] = undefined;

/**
 * Source IP address before NAT translation.
 * @member {String} oldSourceIp
 */
NatInfo.prototype['oldSourceIp'] = undefined;

/**
 * Source port before NAT translation. Only valid when protocol is TCP or UDP.
 * @member {Number} oldSourcePort
 */
NatInfo.prototype['oldSourcePort'] = undefined;

/**
 * IP protocol in string format, for example: \"TCP\", \"UDP\", \"ICMP\".
 * @member {String} protocol
 */
NatInfo.prototype['protocol'] = undefined;

/**
 * Uri of the Cloud Router. Only valid when type is CLOUD_NAT.
 * @member {String} routerUri
 */
NatInfo.prototype['routerUri'] = undefined;

/**
 * Type of NAT.
 * @member {module:model/NatInfo.TypeEnum} type
 */
NatInfo.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
NatInfo['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "INTERNAL_TO_EXTERNAL"
     * @const
     */
    "INTERNAL_TO_EXTERNAL": "INTERNAL_TO_EXTERNAL",

    /**
     * value: "EXTERNAL_TO_INTERNAL"
     * @const
     */
    "EXTERNAL_TO_INTERNAL": "EXTERNAL_TO_INTERNAL",

    /**
     * value: "CLOUD_NAT"
     * @const
     */
    "CLOUD_NAT": "CLOUD_NAT",

    /**
     * value: "PRIVATE_SERVICE_CONNECT"
     * @const
     */
    "PRIVATE_SERVICE_CONNECT": "PRIVATE_SERVICE_CONNECT"
};



export default NatInfo;

