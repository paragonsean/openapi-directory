/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProxyConnectionInfo model module.
 * @module model/ProxyConnectionInfo
 * @version v1
 */
class ProxyConnectionInfo {
    /**
     * Constructs a new <code>ProxyConnectionInfo</code>.
     * For display only. Metadata associated with ProxyConnection.
     * @alias module:model/ProxyConnectionInfo
     */
    constructor() { 
        
        ProxyConnectionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProxyConnectionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProxyConnectionInfo} obj Optional instance to populate.
     * @return {module:model/ProxyConnectionInfo} The populated <code>ProxyConnectionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProxyConnectionInfo();

            if (data.hasOwnProperty('networkUri')) {
                obj['networkUri'] = ApiClient.convertToType(data['networkUri'], 'String');
            }
            if (data.hasOwnProperty('newDestinationIp')) {
                obj['newDestinationIp'] = ApiClient.convertToType(data['newDestinationIp'], 'String');
            }
            if (data.hasOwnProperty('newDestinationPort')) {
                obj['newDestinationPort'] = ApiClient.convertToType(data['newDestinationPort'], 'Number');
            }
            if (data.hasOwnProperty('newSourceIp')) {
                obj['newSourceIp'] = ApiClient.convertToType(data['newSourceIp'], 'String');
            }
            if (data.hasOwnProperty('newSourcePort')) {
                obj['newSourcePort'] = ApiClient.convertToType(data['newSourcePort'], 'Number');
            }
            if (data.hasOwnProperty('oldDestinationIp')) {
                obj['oldDestinationIp'] = ApiClient.convertToType(data['oldDestinationIp'], 'String');
            }
            if (data.hasOwnProperty('oldDestinationPort')) {
                obj['oldDestinationPort'] = ApiClient.convertToType(data['oldDestinationPort'], 'Number');
            }
            if (data.hasOwnProperty('oldSourceIp')) {
                obj['oldSourceIp'] = ApiClient.convertToType(data['oldSourceIp'], 'String');
            }
            if (data.hasOwnProperty('oldSourcePort')) {
                obj['oldSourcePort'] = ApiClient.convertToType(data['oldSourcePort'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('subnetUri')) {
                obj['subnetUri'] = ApiClient.convertToType(data['subnetUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProxyConnectionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProxyConnectionInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['networkUri'] && !(typeof data['networkUri'] === 'string' || data['networkUri'] instanceof String)) {
            throw new Error("Expected the field `networkUri` to be a primitive type in the JSON string but got " + data['networkUri']);
        }
        // ensure the json data is a string
        if (data['newDestinationIp'] && !(typeof data['newDestinationIp'] === 'string' || data['newDestinationIp'] instanceof String)) {
            throw new Error("Expected the field `newDestinationIp` to be a primitive type in the JSON string but got " + data['newDestinationIp']);
        }
        // ensure the json data is a string
        if (data['newSourceIp'] && !(typeof data['newSourceIp'] === 'string' || data['newSourceIp'] instanceof String)) {
            throw new Error("Expected the field `newSourceIp` to be a primitive type in the JSON string but got " + data['newSourceIp']);
        }
        // ensure the json data is a string
        if (data['oldDestinationIp'] && !(typeof data['oldDestinationIp'] === 'string' || data['oldDestinationIp'] instanceof String)) {
            throw new Error("Expected the field `oldDestinationIp` to be a primitive type in the JSON string but got " + data['oldDestinationIp']);
        }
        // ensure the json data is a string
        if (data['oldSourceIp'] && !(typeof data['oldSourceIp'] === 'string' || data['oldSourceIp'] instanceof String)) {
            throw new Error("Expected the field `oldSourceIp` to be a primitive type in the JSON string but got " + data['oldSourceIp']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['subnetUri'] && !(typeof data['subnetUri'] === 'string' || data['subnetUri'] instanceof String)) {
            throw new Error("Expected the field `subnetUri` to be a primitive type in the JSON string but got " + data['subnetUri']);
        }

        return true;
    }


}



/**
 * URI of the network where connection is proxied.
 * @member {String} networkUri
 */
ProxyConnectionInfo.prototype['networkUri'] = undefined;

/**
 * Destination IP address of a new connection.
 * @member {String} newDestinationIp
 */
ProxyConnectionInfo.prototype['newDestinationIp'] = undefined;

/**
 * Destination port of a new connection. Only valid when protocol is TCP or UDP.
 * @member {Number} newDestinationPort
 */
ProxyConnectionInfo.prototype['newDestinationPort'] = undefined;

/**
 * Source IP address of a new connection.
 * @member {String} newSourceIp
 */
ProxyConnectionInfo.prototype['newSourceIp'] = undefined;

/**
 * Source port of a new connection. Only valid when protocol is TCP or UDP.
 * @member {Number} newSourcePort
 */
ProxyConnectionInfo.prototype['newSourcePort'] = undefined;

/**
 * Destination IP address of an original connection
 * @member {String} oldDestinationIp
 */
ProxyConnectionInfo.prototype['oldDestinationIp'] = undefined;

/**
 * Destination port of an original connection. Only valid when protocol is TCP or UDP.
 * @member {Number} oldDestinationPort
 */
ProxyConnectionInfo.prototype['oldDestinationPort'] = undefined;

/**
 * Source IP address of an original connection.
 * @member {String} oldSourceIp
 */
ProxyConnectionInfo.prototype['oldSourceIp'] = undefined;

/**
 * Source port of an original connection. Only valid when protocol is TCP or UDP.
 * @member {Number} oldSourcePort
 */
ProxyConnectionInfo.prototype['oldSourcePort'] = undefined;

/**
 * IP protocol in string format, for example: \"TCP\", \"UDP\", \"ICMP\".
 * @member {String} protocol
 */
ProxyConnectionInfo.prototype['protocol'] = undefined;

/**
 * Uri of proxy subnet.
 * @member {String} subnetUri
 */
ProxyConnectionInfo.prototype['subnetUri'] = undefined;






export default ProxyConnectionInfo;

