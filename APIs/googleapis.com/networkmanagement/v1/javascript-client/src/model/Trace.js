/**
 * Network Management API
 * The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EndpointInfo from './EndpointInfo';
import Step from './Step';

/**
 * The Trace model module.
 * @module model/Trace
 * @version v1
 */
class Trace {
    /**
     * Constructs a new <code>Trace</code>.
     * Trace represents one simulated packet forwarding path. * Each trace contains multiple ordered steps. * Each step is in a particular state with associated configuration. * State is categorized as final or non-final states. * Each final state has a reason associated. * Each trace must end with a final state (the last step). &#x60;&#x60;&#x60; |---------------------Trace----------------------| Step1(State) Step2(State) --- StepN(State(final)) &#x60;&#x60;&#x60;
     * @alias module:model/Trace
     */
    constructor() { 
        
        Trace.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Trace</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Trace} obj Optional instance to populate.
     * @return {module:model/Trace} The populated <code>Trace</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trace();

            if (data.hasOwnProperty('endpointInfo')) {
                obj['endpointInfo'] = EndpointInfo.constructFromObject(data['endpointInfo']);
            }
            if (data.hasOwnProperty('forwardTraceId')) {
                obj['forwardTraceId'] = ApiClient.convertToType(data['forwardTraceId'], 'Number');
            }
            if (data.hasOwnProperty('steps')) {
                obj['steps'] = ApiClient.convertToType(data['steps'], [Step]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Trace</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Trace</code>.
     */
    static validateJSON(data) {
        // validate the optional field `endpointInfo`
        if (data['endpointInfo']) { // data not null
          EndpointInfo.validateJSON(data['endpointInfo']);
        }
        if (data['steps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['steps'])) {
                throw new Error("Expected the field `steps` to be an array in the JSON data but got " + data['steps']);
            }
            // validate the optional field `steps` (array)
            for (const item of data['steps']) {
                Step.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/EndpointInfo} endpointInfo
 */
Trace.prototype['endpointInfo'] = undefined;

/**
 * ID of trace. For forward traces, this ID is unique for each trace. For return traces, it matches ID of associated forward trace. A single forward trace can be associated with none, one or more than one return trace.
 * @member {Number} forwardTraceId
 */
Trace.prototype['forwardTraceId'] = undefined;

/**
 * A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.
 * @member {Array.<module:model/Step>} steps
 */
Trace.prototype['steps'] = undefined;






export default Trace;

