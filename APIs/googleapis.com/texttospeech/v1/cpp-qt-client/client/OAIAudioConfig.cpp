/**
 * Cloud Text-to-Speech API
 * Synthesizes natural-sounding speech by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioConfig::OAIAudioConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioConfig::OAIAudioConfig() {
    this->initializeModel();
}

OAIAudioConfig::~OAIAudioConfig() {}

void OAIAudioConfig::initializeModel() {

    m_audio_encoding_isSet = false;
    m_audio_encoding_isValid = false;

    m_effects_profile_id_isSet = false;
    m_effects_profile_id_isValid = false;

    m_pitch_isSet = false;
    m_pitch_isValid = false;

    m_sample_rate_hertz_isSet = false;
    m_sample_rate_hertz_isValid = false;

    m_speaking_rate_isSet = false;
    m_speaking_rate_isValid = false;

    m_volume_gain_db_isSet = false;
    m_volume_gain_db_isValid = false;
}

void OAIAudioConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioConfig::fromJsonObject(QJsonObject json) {

    m_audio_encoding_isValid = ::OpenAPI::fromJsonValue(m_audio_encoding, json[QString("audioEncoding")]);
    m_audio_encoding_isSet = !json[QString("audioEncoding")].isNull() && m_audio_encoding_isValid;

    m_effects_profile_id_isValid = ::OpenAPI::fromJsonValue(m_effects_profile_id, json[QString("effectsProfileId")]);
    m_effects_profile_id_isSet = !json[QString("effectsProfileId")].isNull() && m_effects_profile_id_isValid;

    m_pitch_isValid = ::OpenAPI::fromJsonValue(m_pitch, json[QString("pitch")]);
    m_pitch_isSet = !json[QString("pitch")].isNull() && m_pitch_isValid;

    m_sample_rate_hertz_isValid = ::OpenAPI::fromJsonValue(m_sample_rate_hertz, json[QString("sampleRateHertz")]);
    m_sample_rate_hertz_isSet = !json[QString("sampleRateHertz")].isNull() && m_sample_rate_hertz_isValid;

    m_speaking_rate_isValid = ::OpenAPI::fromJsonValue(m_speaking_rate, json[QString("speakingRate")]);
    m_speaking_rate_isSet = !json[QString("speakingRate")].isNull() && m_speaking_rate_isValid;

    m_volume_gain_db_isValid = ::OpenAPI::fromJsonValue(m_volume_gain_db, json[QString("volumeGainDb")]);
    m_volume_gain_db_isSet = !json[QString("volumeGainDb")].isNull() && m_volume_gain_db_isValid;
}

QString OAIAudioConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_encoding_isSet) {
        obj.insert(QString("audioEncoding"), ::OpenAPI::toJsonValue(m_audio_encoding));
    }
    if (m_effects_profile_id.size() > 0) {
        obj.insert(QString("effectsProfileId"), ::OpenAPI::toJsonValue(m_effects_profile_id));
    }
    if (m_pitch_isSet) {
        obj.insert(QString("pitch"), ::OpenAPI::toJsonValue(m_pitch));
    }
    if (m_sample_rate_hertz_isSet) {
        obj.insert(QString("sampleRateHertz"), ::OpenAPI::toJsonValue(m_sample_rate_hertz));
    }
    if (m_speaking_rate_isSet) {
        obj.insert(QString("speakingRate"), ::OpenAPI::toJsonValue(m_speaking_rate));
    }
    if (m_volume_gain_db_isSet) {
        obj.insert(QString("volumeGainDb"), ::OpenAPI::toJsonValue(m_volume_gain_db));
    }
    return obj;
}

QString OAIAudioConfig::getAudioEncoding() const {
    return m_audio_encoding;
}
void OAIAudioConfig::setAudioEncoding(const QString &audio_encoding) {
    m_audio_encoding = audio_encoding;
    m_audio_encoding_isSet = true;
}

bool OAIAudioConfig::is_audio_encoding_Set() const{
    return m_audio_encoding_isSet;
}

bool OAIAudioConfig::is_audio_encoding_Valid() const{
    return m_audio_encoding_isValid;
}

QList<QString> OAIAudioConfig::getEffectsProfileId() const {
    return m_effects_profile_id;
}
void OAIAudioConfig::setEffectsProfileId(const QList<QString> &effects_profile_id) {
    m_effects_profile_id = effects_profile_id;
    m_effects_profile_id_isSet = true;
}

bool OAIAudioConfig::is_effects_profile_id_Set() const{
    return m_effects_profile_id_isSet;
}

bool OAIAudioConfig::is_effects_profile_id_Valid() const{
    return m_effects_profile_id_isValid;
}

double OAIAudioConfig::getPitch() const {
    return m_pitch;
}
void OAIAudioConfig::setPitch(const double &pitch) {
    m_pitch = pitch;
    m_pitch_isSet = true;
}

bool OAIAudioConfig::is_pitch_Set() const{
    return m_pitch_isSet;
}

bool OAIAudioConfig::is_pitch_Valid() const{
    return m_pitch_isValid;
}

qint32 OAIAudioConfig::getSampleRateHertz() const {
    return m_sample_rate_hertz;
}
void OAIAudioConfig::setSampleRateHertz(const qint32 &sample_rate_hertz) {
    m_sample_rate_hertz = sample_rate_hertz;
    m_sample_rate_hertz_isSet = true;
}

bool OAIAudioConfig::is_sample_rate_hertz_Set() const{
    return m_sample_rate_hertz_isSet;
}

bool OAIAudioConfig::is_sample_rate_hertz_Valid() const{
    return m_sample_rate_hertz_isValid;
}

double OAIAudioConfig::getSpeakingRate() const {
    return m_speaking_rate;
}
void OAIAudioConfig::setSpeakingRate(const double &speaking_rate) {
    m_speaking_rate = speaking_rate;
    m_speaking_rate_isSet = true;
}

bool OAIAudioConfig::is_speaking_rate_Set() const{
    return m_speaking_rate_isSet;
}

bool OAIAudioConfig::is_speaking_rate_Valid() const{
    return m_speaking_rate_isValid;
}

double OAIAudioConfig::getVolumeGainDb() const {
    return m_volume_gain_db;
}
void OAIAudioConfig::setVolumeGainDb(const double &volume_gain_db) {
    m_volume_gain_db = volume_gain_db;
    m_volume_gain_db_isSet = true;
}

bool OAIAudioConfig::is_volume_gain_db_Set() const{
    return m_volume_gain_db_isSet;
}

bool OAIAudioConfig::is_volume_gain_db_Valid() const{
    return m_volume_gain_db_isValid;
}

bool OAIAudioConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effects_profile_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_hertz_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speaking_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_gain_db_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
