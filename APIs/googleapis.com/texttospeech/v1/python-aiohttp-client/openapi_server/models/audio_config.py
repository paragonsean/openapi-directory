# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_encoding: str=None, effects_profile_id: List[str]=None, pitch: float=None, sample_rate_hertz: int=None, speaking_rate: float=None, volume_gain_db: float=None):
        """AudioConfig - a model defined in OpenAPI

        :param audio_encoding: The audio_encoding of this AudioConfig.
        :param effects_profile_id: The effects_profile_id of this AudioConfig.
        :param pitch: The pitch of this AudioConfig.
        :param sample_rate_hertz: The sample_rate_hertz of this AudioConfig.
        :param speaking_rate: The speaking_rate of this AudioConfig.
        :param volume_gain_db: The volume_gain_db of this AudioConfig.
        """
        self.openapi_types = {
            'audio_encoding': str,
            'effects_profile_id': List[str],
            'pitch': float,
            'sample_rate_hertz': int,
            'speaking_rate': float,
            'volume_gain_db': float
        }

        self.attribute_map = {
            'audio_encoding': 'audioEncoding',
            'effects_profile_id': 'effectsProfileId',
            'pitch': 'pitch',
            'sample_rate_hertz': 'sampleRateHertz',
            'speaking_rate': 'speakingRate',
            'volume_gain_db': 'volumeGainDb'
        }

        self._audio_encoding = audio_encoding
        self._effects_profile_id = effects_profile_id
        self._pitch = pitch
        self._sample_rate_hertz = sample_rate_hertz
        self._speaking_rate = speaking_rate
        self._volume_gain_db = volume_gain_db

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioConfig of this AudioConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_encoding(self):
        """Gets the audio_encoding of this AudioConfig.

        Required. The format of the audio byte stream.

        :return: The audio_encoding of this AudioConfig.
        :rtype: str
        """
        return self._audio_encoding

    @audio_encoding.setter
    def audio_encoding(self, audio_encoding):
        """Sets the audio_encoding of this AudioConfig.

        Required. The format of the audio byte stream.

        :param audio_encoding: The audio_encoding of this AudioConfig.
        :type audio_encoding: str
        """
        allowed_values = ["AUDIO_ENCODING_UNSPECIFIED", "LINEAR16", "MP3", "OGG_OPUS", "MULAW", "ALAW"]  # noqa: E501
        if audio_encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `audio_encoding` ({0}), must be one of {1}"
                .format(audio_encoding, allowed_values)
            )

        self._audio_encoding = audio_encoding

    @property
    def effects_profile_id(self):
        """Gets the effects_profile_id of this AudioConfig.

        Optional. Input only. An identifier which selects 'audio effects' profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given. See [audio profiles](https://cloud.google.com/text-to-speech/docs/audio-profiles) for current supported profile ids.

        :return: The effects_profile_id of this AudioConfig.
        :rtype: List[str]
        """
        return self._effects_profile_id

    @effects_profile_id.setter
    def effects_profile_id(self, effects_profile_id):
        """Sets the effects_profile_id of this AudioConfig.

        Optional. Input only. An identifier which selects 'audio effects' profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given. See [audio profiles](https://cloud.google.com/text-to-speech/docs/audio-profiles) for current supported profile ids.

        :param effects_profile_id: The effects_profile_id of this AudioConfig.
        :type effects_profile_id: List[str]
        """

        self._effects_profile_id = effects_profile_id

    @property
    def pitch(self):
        """Gets the pitch of this AudioConfig.

        Optional. Input only. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.

        :return: The pitch of this AudioConfig.
        :rtype: float
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this AudioConfig.

        Optional. Input only. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.

        :param pitch: The pitch of this AudioConfig.
        :type pitch: float
        """

        self._pitch = pitch

    @property
    def sample_rate_hertz(self):
        """Gets the sample_rate_hertz of this AudioConfig.

        Optional. The synthesis sample rate (in hertz) for this audio. When this is specified in SynthesizeSpeechRequest, if this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen, in which case it will fail the request and return google.rpc.Code.INVALID_ARGUMENT.

        :return: The sample_rate_hertz of this AudioConfig.
        :rtype: int
        """
        return self._sample_rate_hertz

    @sample_rate_hertz.setter
    def sample_rate_hertz(self, sample_rate_hertz):
        """Sets the sample_rate_hertz of this AudioConfig.

        Optional. The synthesis sample rate (in hertz) for this audio. When this is specified in SynthesizeSpeechRequest, if this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen, in which case it will fail the request and return google.rpc.Code.INVALID_ARGUMENT.

        :param sample_rate_hertz: The sample_rate_hertz of this AudioConfig.
        :type sample_rate_hertz: int
        """

        self._sample_rate_hertz = sample_rate_hertz

    @property
    def speaking_rate(self):
        """Gets the speaking_rate of this AudioConfig.

        Optional. Input only. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal native speed supported by the specific voice. 2.0 is twice as fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other values < 0.25 or > 4.0 will return an error.

        :return: The speaking_rate of this AudioConfig.
        :rtype: float
        """
        return self._speaking_rate

    @speaking_rate.setter
    def speaking_rate(self, speaking_rate):
        """Sets the speaking_rate of this AudioConfig.

        Optional. Input only. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal native speed supported by the specific voice. 2.0 is twice as fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other values < 0.25 or > 4.0 will return an error.

        :param speaking_rate: The speaking_rate of this AudioConfig.
        :type speaking_rate: float
        """

        self._speaking_rate = speaking_rate

    @property
    def volume_gain_db(self):
        """Gets the volume_gain_db of this AudioConfig.

        Optional. Input only. Volume gain (in dB) of the normal native volume supported by the specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB) will play at approximately half the amplitude of the normal native signal amplitude. A value of +6.0 (dB) will play at approximately twice the amplitude of the normal native signal amplitude. Strongly recommend not to exceed +10 (dB) as there's usually no effective increase in loudness for any value greater than that.

        :return: The volume_gain_db of this AudioConfig.
        :rtype: float
        """
        return self._volume_gain_db

    @volume_gain_db.setter
    def volume_gain_db(self, volume_gain_db):
        """Sets the volume_gain_db of this AudioConfig.

        Optional. Input only. Volume gain (in dB) of the normal native volume supported by the specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB) will play at approximately half the amplitude of the normal native signal amplitude. A value of +6.0 (dB) will play at approximately twice the amplitude of the normal native signal amplitude. Strongly recommend not to exceed +10 (dB) as there's usually no effective increase in loudness for any value greater than that.

        :param volume_gain_db: The volume_gain_db of this AudioConfig.
        :type volume_gain_db: float
        """

        self._volume_gain_db = volume_gain_db
