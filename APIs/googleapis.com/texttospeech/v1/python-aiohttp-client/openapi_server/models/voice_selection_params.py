# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_voice_params import CustomVoiceParams
from openapi_server import util


class VoiceSelectionParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_voice: CustomVoiceParams=None, language_code: str=None, name: str=None, ssml_gender: str=None):
        """VoiceSelectionParams - a model defined in OpenAPI

        :param custom_voice: The custom_voice of this VoiceSelectionParams.
        :param language_code: The language_code of this VoiceSelectionParams.
        :param name: The name of this VoiceSelectionParams.
        :param ssml_gender: The ssml_gender of this VoiceSelectionParams.
        """
        self.openapi_types = {
            'custom_voice': CustomVoiceParams,
            'language_code': str,
            'name': str,
            'ssml_gender': str
        }

        self.attribute_map = {
            'custom_voice': 'customVoice',
            'language_code': 'languageCode',
            'name': 'name',
            'ssml_gender': 'ssmlGender'
        }

        self._custom_voice = custom_voice
        self._language_code = language_code
        self._name = name
        self._ssml_gender = ssml_gender

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VoiceSelectionParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VoiceSelectionParams of this VoiceSelectionParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_voice(self):
        """Gets the custom_voice of this VoiceSelectionParams.


        :return: The custom_voice of this VoiceSelectionParams.
        :rtype: CustomVoiceParams
        """
        return self._custom_voice

    @custom_voice.setter
    def custom_voice(self, custom_voice):
        """Sets the custom_voice of this VoiceSelectionParams.


        :param custom_voice: The custom_voice of this VoiceSelectionParams.
        :type custom_voice: CustomVoiceParams
        """

        self._custom_voice = custom_voice

    @property
    def language_code(self):
        """Gets the language_code of this VoiceSelectionParams.

        Required. The language (and potentially also the region) of the voice expressed as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag, e.g. \"en-US\". This should not include a script tag (e.g. use \"cmn-cn\" rather than \"cmn-Hant-cn\"), because the script will be inferred from the input provided in the SynthesisInput. The TTS service will use this parameter to help choose an appropriate voice. Note that the TTS service may choose a voice with a slightly different language code than the one selected; it may substitute a different region (e.g. using en-US rather than en-CA if there isn't a Canadian voice available), or even a different language, e.g. using \"nb\" (Norwegian Bokmal) instead of \"no\" (Norwegian)\".

        :return: The language_code of this VoiceSelectionParams.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this VoiceSelectionParams.

        Required. The language (and potentially also the region) of the voice expressed as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag, e.g. \"en-US\". This should not include a script tag (e.g. use \"cmn-cn\" rather than \"cmn-Hant-cn\"), because the script will be inferred from the input provided in the SynthesisInput. The TTS service will use this parameter to help choose an appropriate voice. Note that the TTS service may choose a voice with a slightly different language code than the one selected; it may substitute a different region (e.g. using en-US rather than en-CA if there isn't a Canadian voice available), or even a different language, e.g. using \"nb\" (Norwegian Bokmal) instead of \"no\" (Norwegian)\".

        :param language_code: The language_code of this VoiceSelectionParams.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def name(self):
        """Gets the name of this VoiceSelectionParams.

        The name of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and gender.

        :return: The name of this VoiceSelectionParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VoiceSelectionParams.

        The name of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and gender.

        :param name: The name of this VoiceSelectionParams.
        :type name: str
        """

        self._name = name

    @property
    def ssml_gender(self):
        """Gets the ssml_gender of this VoiceSelectionParams.

        The preferred gender of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and name. Note that this is only a preference, not requirement; if a voice of the appropriate gender is not available, the synthesizer should substitute a voice with a different gender rather than failing the request.

        :return: The ssml_gender of this VoiceSelectionParams.
        :rtype: str
        """
        return self._ssml_gender

    @ssml_gender.setter
    def ssml_gender(self, ssml_gender):
        """Sets the ssml_gender of this VoiceSelectionParams.

        The preferred gender of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and name. Note that this is only a preference, not requirement; if a voice of the appropriate gender is not available, the synthesizer should substitute a voice with a different gender rather than failing the request.

        :param ssml_gender: The ssml_gender of this VoiceSelectionParams.
        :type ssml_gender: str
        """
        allowed_values = ["SSML_VOICE_GENDER_UNSPECIFIED", "MALE", "FEMALE", "NEUTRAL"]  # noqa: E501
        if ssml_gender not in allowed_values:
            raise ValueError(
                "Invalid value for `ssml_gender` ({0}), must be one of {1}"
                .format(ssml_gender, allowed_values)
            )

        self._ssml_gender = ssml_gender
