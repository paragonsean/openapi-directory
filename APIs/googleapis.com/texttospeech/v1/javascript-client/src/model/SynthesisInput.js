/**
 * Cloud Text-to-Speech API
 * Synthesizes natural-sounding speech by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SynthesisInput model module.
 * @module model/SynthesisInput
 * @version v1
 */
class SynthesisInput {
    /**
     * Constructs a new <code>SynthesisInput</code>.
     * Contains text input to be synthesized. Either &#x60;text&#x60; or &#x60;ssml&#x60; must be supplied. Supplying both or neither returns google.rpc.Code.INVALID_ARGUMENT. The input size is limited to 5000 bytes.
     * @alias module:model/SynthesisInput
     */
    constructor() { 
        
        SynthesisInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SynthesisInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SynthesisInput} obj Optional instance to populate.
     * @return {module:model/SynthesisInput} The populated <code>SynthesisInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SynthesisInput();

            if (data.hasOwnProperty('ssml')) {
                obj['ssml'] = ApiClient.convertToType(data['ssml'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SynthesisInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SynthesisInput</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ssml'] && !(typeof data['ssml'] === 'string' || data['ssml'] instanceof String)) {
            throw new Error("Expected the field `ssml` to be a primitive type in the JSON string but got " + data['ssml']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * The SSML document to be synthesized. The SSML document must be valid and well-formed. Otherwise the RPC will fail and return google.rpc.Code.INVALID_ARGUMENT. For more information, see [SSML](https://cloud.google.com/text-to-speech/docs/ssml).
 * @member {String} ssml
 */
SynthesisInput.prototype['ssml'] = undefined;

/**
 * The raw text to be synthesized.
 * @member {String} text
 */
SynthesisInput.prototype['text'] = undefined;






export default SynthesisInput;

