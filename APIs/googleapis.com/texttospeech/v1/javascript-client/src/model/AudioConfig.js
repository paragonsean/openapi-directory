/**
 * Cloud Text-to-Speech API
 * Synthesizes natural-sounding speech by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AudioConfig model module.
 * @module model/AudioConfig
 * @version v1
 */
class AudioConfig {
    /**
     * Constructs a new <code>AudioConfig</code>.
     * Description of audio data to be synthesized.
     * @alias module:model/AudioConfig
     */
    constructor() { 
        
        AudioConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioConfig} obj Optional instance to populate.
     * @return {module:model/AudioConfig} The populated <code>AudioConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioConfig();

            if (data.hasOwnProperty('audioEncoding')) {
                obj['audioEncoding'] = ApiClient.convertToType(data['audioEncoding'], 'String');
            }
            if (data.hasOwnProperty('effectsProfileId')) {
                obj['effectsProfileId'] = ApiClient.convertToType(data['effectsProfileId'], ['String']);
            }
            if (data.hasOwnProperty('pitch')) {
                obj['pitch'] = ApiClient.convertToType(data['pitch'], 'Number');
            }
            if (data.hasOwnProperty('sampleRateHertz')) {
                obj['sampleRateHertz'] = ApiClient.convertToType(data['sampleRateHertz'], 'Number');
            }
            if (data.hasOwnProperty('speakingRate')) {
                obj['speakingRate'] = ApiClient.convertToType(data['speakingRate'], 'Number');
            }
            if (data.hasOwnProperty('volumeGainDb')) {
                obj['volumeGainDb'] = ApiClient.convertToType(data['volumeGainDb'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['audioEncoding'] && !(typeof data['audioEncoding'] === 'string' || data['audioEncoding'] instanceof String)) {
            throw new Error("Expected the field `audioEncoding` to be a primitive type in the JSON string but got " + data['audioEncoding']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['effectsProfileId'])) {
            throw new Error("Expected the field `effectsProfileId` to be an array in the JSON data but got " + data['effectsProfileId']);
        }

        return true;
    }


}



/**
 * Required. The format of the audio byte stream.
 * @member {module:model/AudioConfig.AudioEncodingEnum} audioEncoding
 */
AudioConfig.prototype['audioEncoding'] = undefined;

/**
 * Optional. Input only. An identifier which selects 'audio effects' profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given. See [audio profiles](https://cloud.google.com/text-to-speech/docs/audio-profiles) for current supported profile ids.
 * @member {Array.<String>} effectsProfileId
 */
AudioConfig.prototype['effectsProfileId'] = undefined;

/**
 * Optional. Input only. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.
 * @member {Number} pitch
 */
AudioConfig.prototype['pitch'] = undefined;

/**
 * Optional. The synthesis sample rate (in hertz) for this audio. When this is specified in SynthesizeSpeechRequest, if this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen, in which case it will fail the request and return google.rpc.Code.INVALID_ARGUMENT.
 * @member {Number} sampleRateHertz
 */
AudioConfig.prototype['sampleRateHertz'] = undefined;

/**
 * Optional. Input only. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal native speed supported by the specific voice. 2.0 is twice as fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other values < 0.25 or > 4.0 will return an error.
 * @member {Number} speakingRate
 */
AudioConfig.prototype['speakingRate'] = undefined;

/**
 * Optional. Input only. Volume gain (in dB) of the normal native volume supported by the specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB) will play at approximately half the amplitude of the normal native signal amplitude. A value of +6.0 (dB) will play at approximately twice the amplitude of the normal native signal amplitude. Strongly recommend not to exceed +10 (dB) as there's usually no effective increase in loudness for any value greater than that.
 * @member {Number} volumeGainDb
 */
AudioConfig.prototype['volumeGainDb'] = undefined;





/**
 * Allowed values for the <code>audioEncoding</code> property.
 * @enum {String}
 * @readonly
 */
AudioConfig['AudioEncodingEnum'] = {

    /**
     * value: "AUDIO_ENCODING_UNSPECIFIED"
     * @const
     */
    "AUDIO_ENCODING_UNSPECIFIED": "AUDIO_ENCODING_UNSPECIFIED",

    /**
     * value: "LINEAR16"
     * @const
     */
    "LINEAR16": "LINEAR16",

    /**
     * value: "MP3"
     * @const
     */
    "MP3": "MP3",

    /**
     * value: "OGG_OPUS"
     * @const
     */
    "OGG_OPUS": "OGG_OPUS",

    /**
     * value: "MULAW"
     * @const
     */
    "MULAW": "MULAW",

    /**
     * value: "ALAW"
     * @const
     */
    "ALAW": "ALAW"
};



export default AudioConfig;

