# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomVoiceParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model: str=None, reported_usage: str=None):
        """CustomVoiceParams - a model defined in OpenAPI

        :param model: The model of this CustomVoiceParams.
        :param reported_usage: The reported_usage of this CustomVoiceParams.
        """
        self.openapi_types = {
            'model': str,
            'reported_usage': str
        }

        self.attribute_map = {
            'model': 'model',
            'reported_usage': 'reportedUsage'
        }

        self._model = model
        self._reported_usage = reported_usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomVoiceParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomVoiceParams of this CustomVoiceParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self):
        """Gets the model of this CustomVoiceParams.

        Required. The name of the AutoML model that synthesizes the custom voice.

        :return: The model of this CustomVoiceParams.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CustomVoiceParams.

        Required. The name of the AutoML model that synthesizes the custom voice.

        :param model: The model of this CustomVoiceParams.
        :type model: str
        """

        self._model = model

    @property
    def reported_usage(self):
        """Gets the reported_usage of this CustomVoiceParams.

        Optional. Deprecated. The usage of the synthesized audio to be reported.

        :return: The reported_usage of this CustomVoiceParams.
        :rtype: str
        """
        return self._reported_usage

    @reported_usage.setter
    def reported_usage(self, reported_usage):
        """Sets the reported_usage of this CustomVoiceParams.

        Optional. Deprecated. The usage of the synthesized audio to be reported.

        :param reported_usage: The reported_usage of this CustomVoiceParams.
        :type reported_usage: str
        """
        allowed_values = ["REPORTED_USAGE_UNSPECIFIED", "REALTIME", "OFFLINE"]  # noqa: E501
        if reported_usage not in allowed_values:
            raise ValueError(
                "Invalid value for `reported_usage` ({0}), must be one of {1}"
                .format(reported_usage, allowed_values)
            )

        self._reported_usage = reported_usage
