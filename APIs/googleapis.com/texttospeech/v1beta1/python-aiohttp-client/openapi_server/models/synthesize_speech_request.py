# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_config import AudioConfig
from openapi_server.models.synthesis_input import SynthesisInput
from openapi_server.models.voice_selection_params import VoiceSelectionParams
from openapi_server import util


class SynthesizeSpeechRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_config: AudioConfig=None, enable_time_pointing: List[str]=None, input: SynthesisInput=None, voice: VoiceSelectionParams=None):
        """SynthesizeSpeechRequest - a model defined in OpenAPI

        :param audio_config: The audio_config of this SynthesizeSpeechRequest.
        :param enable_time_pointing: The enable_time_pointing of this SynthesizeSpeechRequest.
        :param input: The input of this SynthesizeSpeechRequest.
        :param voice: The voice of this SynthesizeSpeechRequest.
        """
        self.openapi_types = {
            'audio_config': AudioConfig,
            'enable_time_pointing': List[str],
            'input': SynthesisInput,
            'voice': VoiceSelectionParams
        }

        self.attribute_map = {
            'audio_config': 'audioConfig',
            'enable_time_pointing': 'enableTimePointing',
            'input': 'input',
            'voice': 'voice'
        }

        self._audio_config = audio_config
        self._enable_time_pointing = enable_time_pointing
        self._input = input
        self._voice = voice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SynthesizeSpeechRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SynthesizeSpeechRequest of this SynthesizeSpeechRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_config(self):
        """Gets the audio_config of this SynthesizeSpeechRequest.


        :return: The audio_config of this SynthesizeSpeechRequest.
        :rtype: AudioConfig
        """
        return self._audio_config

    @audio_config.setter
    def audio_config(self, audio_config):
        """Sets the audio_config of this SynthesizeSpeechRequest.


        :param audio_config: The audio_config of this SynthesizeSpeechRequest.
        :type audio_config: AudioConfig
        """

        self._audio_config = audio_config

    @property
    def enable_time_pointing(self):
        """Gets the enable_time_pointing of this SynthesizeSpeechRequest.

        Whether and what timepoints are returned in the response.

        :return: The enable_time_pointing of this SynthesizeSpeechRequest.
        :rtype: List[str]
        """
        return self._enable_time_pointing

    @enable_time_pointing.setter
    def enable_time_pointing(self, enable_time_pointing):
        """Sets the enable_time_pointing of this SynthesizeSpeechRequest.

        Whether and what timepoints are returned in the response.

        :param enable_time_pointing: The enable_time_pointing of this SynthesizeSpeechRequest.
        :type enable_time_pointing: List[str]
        """
        allowed_values = ["TIMEPOINT_TYPE_UNSPECIFIED", "SSML_MARK"]  # noqa: E501
        if not set(enable_time_pointing).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `enable_time_pointing` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(enable_time_pointing) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._enable_time_pointing = enable_time_pointing

    @property
    def input(self):
        """Gets the input of this SynthesizeSpeechRequest.


        :return: The input of this SynthesizeSpeechRequest.
        :rtype: SynthesisInput
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this SynthesizeSpeechRequest.


        :param input: The input of this SynthesizeSpeechRequest.
        :type input: SynthesisInput
        """

        self._input = input

    @property
    def voice(self):
        """Gets the voice of this SynthesizeSpeechRequest.


        :return: The voice of this SynthesizeSpeechRequest.
        :rtype: VoiceSelectionParams
        """
        return self._voice

    @voice.setter
    def voice(self, voice):
        """Sets the voice of this SynthesizeSpeechRequest.


        :param voice: The voice of this SynthesizeSpeechRequest.
        :type voice: VoiceSelectionParams
        """

        self._voice = voice
