# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Voice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_codes: List[str]=None, name: str=None, natural_sample_rate_hertz: int=None, ssml_gender: str=None):
        """Voice - a model defined in OpenAPI

        :param language_codes: The language_codes of this Voice.
        :param name: The name of this Voice.
        :param natural_sample_rate_hertz: The natural_sample_rate_hertz of this Voice.
        :param ssml_gender: The ssml_gender of this Voice.
        """
        self.openapi_types = {
            'language_codes': List[str],
            'name': str,
            'natural_sample_rate_hertz': int,
            'ssml_gender': str
        }

        self.attribute_map = {
            'language_codes': 'languageCodes',
            'name': 'name',
            'natural_sample_rate_hertz': 'naturalSampleRateHertz',
            'ssml_gender': 'ssmlGender'
        }

        self._language_codes = language_codes
        self._name = name
        self._natural_sample_rate_hertz = natural_sample_rate_hertz
        self._ssml_gender = ssml_gender

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Voice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Voice of this Voice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_codes(self):
        """Gets the language_codes of this Voice.

        The languages that this voice supports, expressed as [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tags (e.g. \"en-US\", \"es-419\", \"cmn-tw\").

        :return: The language_codes of this Voice.
        :rtype: List[str]
        """
        return self._language_codes

    @language_codes.setter
    def language_codes(self, language_codes):
        """Sets the language_codes of this Voice.

        The languages that this voice supports, expressed as [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tags (e.g. \"en-US\", \"es-419\", \"cmn-tw\").

        :param language_codes: The language_codes of this Voice.
        :type language_codes: List[str]
        """

        self._language_codes = language_codes

    @property
    def name(self):
        """Gets the name of this Voice.

        The name of this voice. Each distinct voice has a unique name.

        :return: The name of this Voice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Voice.

        The name of this voice. Each distinct voice has a unique name.

        :param name: The name of this Voice.
        :type name: str
        """

        self._name = name

    @property
    def natural_sample_rate_hertz(self):
        """Gets the natural_sample_rate_hertz of this Voice.

        The natural sample rate (in hertz) for this voice.

        :return: The natural_sample_rate_hertz of this Voice.
        :rtype: int
        """
        return self._natural_sample_rate_hertz

    @natural_sample_rate_hertz.setter
    def natural_sample_rate_hertz(self, natural_sample_rate_hertz):
        """Sets the natural_sample_rate_hertz of this Voice.

        The natural sample rate (in hertz) for this voice.

        :param natural_sample_rate_hertz: The natural_sample_rate_hertz of this Voice.
        :type natural_sample_rate_hertz: int
        """

        self._natural_sample_rate_hertz = natural_sample_rate_hertz

    @property
    def ssml_gender(self):
        """Gets the ssml_gender of this Voice.

        The gender of this voice.

        :return: The ssml_gender of this Voice.
        :rtype: str
        """
        return self._ssml_gender

    @ssml_gender.setter
    def ssml_gender(self, ssml_gender):
        """Sets the ssml_gender of this Voice.

        The gender of this voice.

        :param ssml_gender: The ssml_gender of this Voice.
        :type ssml_gender: str
        """
        allowed_values = ["SSML_VOICE_GENDER_UNSPECIFIED", "MALE", "FEMALE", "NEUTRAL"]  # noqa: E501
        if ssml_gender not in allowed_values:
            raise ValueError(
                "Invalid value for `ssml_gender` ({0}), must be one of {1}"
                .format(ssml_gender, allowed_values)
            )

        self._ssml_gender = ssml_gender
