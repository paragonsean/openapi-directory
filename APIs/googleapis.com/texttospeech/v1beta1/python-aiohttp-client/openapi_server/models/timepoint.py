# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Timepoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mark_name: str=None, time_seconds: float=None):
        """Timepoint - a model defined in OpenAPI

        :param mark_name: The mark_name of this Timepoint.
        :param time_seconds: The time_seconds of this Timepoint.
        """
        self.openapi_types = {
            'mark_name': str,
            'time_seconds': float
        }

        self.attribute_map = {
            'mark_name': 'markName',
            'time_seconds': 'timeSeconds'
        }

        self._mark_name = mark_name
        self._time_seconds = time_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Timepoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Timepoint of this Timepoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mark_name(self):
        """Gets the mark_name of this Timepoint.

        Timepoint name as received from the client within `` tag.

        :return: The mark_name of this Timepoint.
        :rtype: str
        """
        return self._mark_name

    @mark_name.setter
    def mark_name(self, mark_name):
        """Sets the mark_name of this Timepoint.

        Timepoint name as received from the client within `` tag.

        :param mark_name: The mark_name of this Timepoint.
        :type mark_name: str
        """

        self._mark_name = mark_name

    @property
    def time_seconds(self):
        """Gets the time_seconds of this Timepoint.

        Time offset in seconds from the start of the synthesized audio.

        :return: The time_seconds of this Timepoint.
        :rtype: float
        """
        return self._time_seconds

    @time_seconds.setter
    def time_seconds(self, time_seconds):
        """Sets the time_seconds of this Timepoint.

        Time offset in seconds from the start of the synthesized audio.

        :param time_seconds: The time_seconds of this Timepoint.
        :type time_seconds: float
        """

        self._time_seconds = time_seconds
