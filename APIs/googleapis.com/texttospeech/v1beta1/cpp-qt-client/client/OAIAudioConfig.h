/**
 * Cloud Text-to-Speech API
 * Synthesizes natural-sounding speech by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAudioConfig.h
 *
 * Description of audio data to be synthesized.
 */

#ifndef OAIAudioConfig_H
#define OAIAudioConfig_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAudioConfig : public OAIObject {
public:
    OAIAudioConfig();
    OAIAudioConfig(QString json);
    ~OAIAudioConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAudioEncoding() const;
    void setAudioEncoding(const QString &audio_encoding);
    bool is_audio_encoding_Set() const;
    bool is_audio_encoding_Valid() const;

    QList<QString> getEffectsProfileId() const;
    void setEffectsProfileId(const QList<QString> &effects_profile_id);
    bool is_effects_profile_id_Set() const;
    bool is_effects_profile_id_Valid() const;

    double getPitch() const;
    void setPitch(const double &pitch);
    bool is_pitch_Set() const;
    bool is_pitch_Valid() const;

    qint32 getSampleRateHertz() const;
    void setSampleRateHertz(const qint32 &sample_rate_hertz);
    bool is_sample_rate_hertz_Set() const;
    bool is_sample_rate_hertz_Valid() const;

    double getSpeakingRate() const;
    void setSpeakingRate(const double &speaking_rate);
    bool is_speaking_rate_Set() const;
    bool is_speaking_rate_Valid() const;

    double getVolumeGainDb() const;
    void setVolumeGainDb(const double &volume_gain_db);
    bool is_volume_gain_db_Set() const;
    bool is_volume_gain_db_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_audio_encoding;
    bool m_audio_encoding_isSet;
    bool m_audio_encoding_isValid;

    QList<QString> m_effects_profile_id;
    bool m_effects_profile_id_isSet;
    bool m_effects_profile_id_isValid;

    double m_pitch;
    bool m_pitch_isSet;
    bool m_pitch_isValid;

    qint32 m_sample_rate_hertz;
    bool m_sample_rate_hertz_isSet;
    bool m_sample_rate_hertz_isValid;

    double m_speaking_rate;
    bool m_speaking_rate_isSet;
    bool m_speaking_rate_isValid;

    double m_volume_gain_db;
    bool m_volume_gain_db_isSet;
    bool m_volume_gain_db_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAudioConfig)

#endif // OAIAudioConfig_H
