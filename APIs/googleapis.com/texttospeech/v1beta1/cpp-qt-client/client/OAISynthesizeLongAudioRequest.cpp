/**
 * Cloud Text-to-Speech API
 * Synthesizes natural-sounding speech by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISynthesizeLongAudioRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISynthesizeLongAudioRequest::OAISynthesizeLongAudioRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISynthesizeLongAudioRequest::OAISynthesizeLongAudioRequest() {
    this->initializeModel();
}

OAISynthesizeLongAudioRequest::~OAISynthesizeLongAudioRequest() {}

void OAISynthesizeLongAudioRequest::initializeModel() {

    m_audio_config_isSet = false;
    m_audio_config_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_output_gcs_uri_isSet = false;
    m_output_gcs_uri_isValid = false;

    m_voice_isSet = false;
    m_voice_isValid = false;
}

void OAISynthesizeLongAudioRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISynthesizeLongAudioRequest::fromJsonObject(QJsonObject json) {

    m_audio_config_isValid = ::OpenAPI::fromJsonValue(m_audio_config, json[QString("audioConfig")]);
    m_audio_config_isSet = !json[QString("audioConfig")].isNull() && m_audio_config_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_output_gcs_uri_isValid = ::OpenAPI::fromJsonValue(m_output_gcs_uri, json[QString("outputGcsUri")]);
    m_output_gcs_uri_isSet = !json[QString("outputGcsUri")].isNull() && m_output_gcs_uri_isValid;

    m_voice_isValid = ::OpenAPI::fromJsonValue(m_voice, json[QString("voice")]);
    m_voice_isSet = !json[QString("voice")].isNull() && m_voice_isValid;
}

QString OAISynthesizeLongAudioRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISynthesizeLongAudioRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_config.isSet()) {
        obj.insert(QString("audioConfig"), ::OpenAPI::toJsonValue(m_audio_config));
    }
    if (m_input.isSet()) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_output_gcs_uri_isSet) {
        obj.insert(QString("outputGcsUri"), ::OpenAPI::toJsonValue(m_output_gcs_uri));
    }
    if (m_voice.isSet()) {
        obj.insert(QString("voice"), ::OpenAPI::toJsonValue(m_voice));
    }
    return obj;
}

OAIAudioConfig OAISynthesizeLongAudioRequest::getAudioConfig() const {
    return m_audio_config;
}
void OAISynthesizeLongAudioRequest::setAudioConfig(const OAIAudioConfig &audio_config) {
    m_audio_config = audio_config;
    m_audio_config_isSet = true;
}

bool OAISynthesizeLongAudioRequest::is_audio_config_Set() const{
    return m_audio_config_isSet;
}

bool OAISynthesizeLongAudioRequest::is_audio_config_Valid() const{
    return m_audio_config_isValid;
}

OAISynthesisInput OAISynthesizeLongAudioRequest::getInput() const {
    return m_input;
}
void OAISynthesizeLongAudioRequest::setInput(const OAISynthesisInput &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAISynthesizeLongAudioRequest::is_input_Set() const{
    return m_input_isSet;
}

bool OAISynthesizeLongAudioRequest::is_input_Valid() const{
    return m_input_isValid;
}

QString OAISynthesizeLongAudioRequest::getOutputGcsUri() const {
    return m_output_gcs_uri;
}
void OAISynthesizeLongAudioRequest::setOutputGcsUri(const QString &output_gcs_uri) {
    m_output_gcs_uri = output_gcs_uri;
    m_output_gcs_uri_isSet = true;
}

bool OAISynthesizeLongAudioRequest::is_output_gcs_uri_Set() const{
    return m_output_gcs_uri_isSet;
}

bool OAISynthesizeLongAudioRequest::is_output_gcs_uri_Valid() const{
    return m_output_gcs_uri_isValid;
}

OAIVoiceSelectionParams OAISynthesizeLongAudioRequest::getVoice() const {
    return m_voice;
}
void OAISynthesizeLongAudioRequest::setVoice(const OAIVoiceSelectionParams &voice) {
    m_voice = voice;
    m_voice_isSet = true;
}

bool OAISynthesizeLongAudioRequest::is_voice_Set() const{
    return m_voice_isSet;
}

bool OAISynthesizeLongAudioRequest::is_voice_Valid() const{
    return m_voice_isValid;
}

bool OAISynthesizeLongAudioRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_gcs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISynthesizeLongAudioRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
