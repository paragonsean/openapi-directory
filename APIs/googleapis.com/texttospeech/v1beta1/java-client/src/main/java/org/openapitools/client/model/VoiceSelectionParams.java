/*
 * Cloud Text-to-Speech API
 * Synthesizes natural-sounding speech by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CustomVoiceParams;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of which voice to use for a synthesis request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:11.482940-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VoiceSelectionParams {
  public static final String SERIALIZED_NAME_CUSTOM_VOICE = "customVoice";
  @SerializedName(SERIALIZED_NAME_CUSTOM_VOICE)
  private CustomVoiceParams customVoice;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The preferred gender of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and name. Note that this is only a preference, not requirement; if a voice of the appropriate gender is not available, the synthesizer should substitute a voice with a different gender rather than failing the request.
   */
  @JsonAdapter(SsmlGenderEnum.Adapter.class)
  public enum SsmlGenderEnum {
    SSML_VOICE_GENDER_UNSPECIFIED("SSML_VOICE_GENDER_UNSPECIFIED"),
    
    MALE("MALE"),
    
    FEMALE("FEMALE"),
    
    NEUTRAL("NEUTRAL");

    private String value;

    SsmlGenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SsmlGenderEnum fromValue(String value) {
      for (SsmlGenderEnum b : SsmlGenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SsmlGenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SsmlGenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SsmlGenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SsmlGenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SsmlGenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SSML_GENDER = "ssmlGender";
  @SerializedName(SERIALIZED_NAME_SSML_GENDER)
  private SsmlGenderEnum ssmlGender;

  public VoiceSelectionParams() {
  }

  public VoiceSelectionParams customVoice(CustomVoiceParams customVoice) {
    this.customVoice = customVoice;
    return this;
  }

  /**
   * Get customVoice
   * @return customVoice
   */
  @javax.annotation.Nullable
  public CustomVoiceParams getCustomVoice() {
    return customVoice;
  }

  public void setCustomVoice(CustomVoiceParams customVoice) {
    this.customVoice = customVoice;
  }


  public VoiceSelectionParams languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Required. The language (and potentially also the region) of the voice expressed as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag, e.g. \&quot;en-US\&quot;. This should not include a script tag (e.g. use \&quot;cmn-cn\&quot; rather than \&quot;cmn-Hant-cn\&quot;), because the script will be inferred from the input provided in the SynthesisInput. The TTS service will use this parameter to help choose an appropriate voice. Note that the TTS service may choose a voice with a slightly different language code than the one selected; it may substitute a different region (e.g. using en-US rather than en-CA if there isn&#39;t a Canadian voice available), or even a different language, e.g. using \&quot;nb\&quot; (Norwegian Bokmal) instead of \&quot;no\&quot; (Norwegian)\&quot;.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public VoiceSelectionParams name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and gender.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VoiceSelectionParams ssmlGender(SsmlGenderEnum ssmlGender) {
    this.ssmlGender = ssmlGender;
    return this;
  }

  /**
   * The preferred gender of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and name. Note that this is only a preference, not requirement; if a voice of the appropriate gender is not available, the synthesizer should substitute a voice with a different gender rather than failing the request.
   * @return ssmlGender
   */
  @javax.annotation.Nullable
  public SsmlGenderEnum getSsmlGender() {
    return ssmlGender;
  }

  public void setSsmlGender(SsmlGenderEnum ssmlGender) {
    this.ssmlGender = ssmlGender;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VoiceSelectionParams voiceSelectionParams = (VoiceSelectionParams) o;
    return Objects.equals(this.customVoice, voiceSelectionParams.customVoice) &&
        Objects.equals(this.languageCode, voiceSelectionParams.languageCode) &&
        Objects.equals(this.name, voiceSelectionParams.name) &&
        Objects.equals(this.ssmlGender, voiceSelectionParams.ssmlGender);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customVoice, languageCode, name, ssmlGender);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VoiceSelectionParams {\n");
    sb.append("    customVoice: ").append(toIndentedString(customVoice)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ssmlGender: ").append(toIndentedString(ssmlGender)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customVoice");
    openapiFields.add("languageCode");
    openapiFields.add("name");
    openapiFields.add("ssmlGender");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VoiceSelectionParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VoiceSelectionParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VoiceSelectionParams is not found in the empty JSON string", VoiceSelectionParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VoiceSelectionParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VoiceSelectionParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customVoice`
      if (jsonObj.get("customVoice") != null && !jsonObj.get("customVoice").isJsonNull()) {
        CustomVoiceParams.validateJsonElement(jsonObj.get("customVoice"));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ssmlGender") != null && !jsonObj.get("ssmlGender").isJsonNull()) && !jsonObj.get("ssmlGender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssmlGender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssmlGender").toString()));
      }
      // validate the optional field `ssmlGender`
      if (jsonObj.get("ssmlGender") != null && !jsonObj.get("ssmlGender").isJsonNull()) {
        SsmlGenderEnum.validateJsonElement(jsonObj.get("ssmlGender"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VoiceSelectionParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VoiceSelectionParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VoiceSelectionParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VoiceSelectionParams.class));

       return (TypeAdapter<T>) new TypeAdapter<VoiceSelectionParams>() {
           @Override
           public void write(JsonWriter out, VoiceSelectionParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VoiceSelectionParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VoiceSelectionParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VoiceSelectionParams
   * @throws IOException if the JSON string is invalid with respect to VoiceSelectionParams
   */
  public static VoiceSelectionParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VoiceSelectionParams.class);
  }

  /**
   * Convert an instance of VoiceSelectionParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

