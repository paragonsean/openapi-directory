/*
 * Cloud Text-to-Speech API
 * Synthesizes natural-sounding speech by applying powerful neural network models.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of audio data to be synthesized.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:11.482940-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioConfig {
  /**
   * Required. The format of the audio byte stream.
   */
  @JsonAdapter(AudioEncodingEnum.Adapter.class)
  public enum AudioEncodingEnum {
    AUDIO_ENCODING_UNSPECIFIED("AUDIO_ENCODING_UNSPECIFIED"),
    
    LINEAR16("LINEAR16"),
    
    MP3("MP3"),
    
    MP3_64_KBPS("MP3_64_KBPS"),
    
    OGG_OPUS("OGG_OPUS"),
    
    MULAW("MULAW"),
    
    ALAW("ALAW");

    private String value;

    AudioEncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioEncodingEnum fromValue(String value) {
      for (AudioEncodingEnum b : AudioEncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudioEncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioEncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioEncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudioEncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AudioEncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUDIO_ENCODING = "audioEncoding";
  @SerializedName(SERIALIZED_NAME_AUDIO_ENCODING)
  private AudioEncodingEnum audioEncoding;

  public static final String SERIALIZED_NAME_EFFECTS_PROFILE_ID = "effectsProfileId";
  @SerializedName(SERIALIZED_NAME_EFFECTS_PROFILE_ID)
  private List<String> effectsProfileId = new ArrayList<>();

  public static final String SERIALIZED_NAME_PITCH = "pitch";
  @SerializedName(SERIALIZED_NAME_PITCH)
  private Double pitch;

  public static final String SERIALIZED_NAME_SAMPLE_RATE_HERTZ = "sampleRateHertz";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RATE_HERTZ)
  private Integer sampleRateHertz;

  public static final String SERIALIZED_NAME_SPEAKING_RATE = "speakingRate";
  @SerializedName(SERIALIZED_NAME_SPEAKING_RATE)
  private Double speakingRate;

  public static final String SERIALIZED_NAME_VOLUME_GAIN_DB = "volumeGainDb";
  @SerializedName(SERIALIZED_NAME_VOLUME_GAIN_DB)
  private Double volumeGainDb;

  public AudioConfig() {
  }

  public AudioConfig audioEncoding(AudioEncodingEnum audioEncoding) {
    this.audioEncoding = audioEncoding;
    return this;
  }

  /**
   * Required. The format of the audio byte stream.
   * @return audioEncoding
   */
  @javax.annotation.Nullable
  public AudioEncodingEnum getAudioEncoding() {
    return audioEncoding;
  }

  public void setAudioEncoding(AudioEncodingEnum audioEncoding) {
    this.audioEncoding = audioEncoding;
  }


  public AudioConfig effectsProfileId(List<String> effectsProfileId) {
    this.effectsProfileId = effectsProfileId;
    return this;
  }

  public AudioConfig addEffectsProfileIdItem(String effectsProfileIdItem) {
    if (this.effectsProfileId == null) {
      this.effectsProfileId = new ArrayList<>();
    }
    this.effectsProfileId.add(effectsProfileIdItem);
    return this;
  }

  /**
   * Optional. Input only. An identifier which selects &#39;audio effects&#39; profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given. See [audio profiles](https://cloud.google.com/text-to-speech/docs/audio-profiles) for current supported profile ids.
   * @return effectsProfileId
   */
  @javax.annotation.Nullable
  public List<String> getEffectsProfileId() {
    return effectsProfileId;
  }

  public void setEffectsProfileId(List<String> effectsProfileId) {
    this.effectsProfileId = effectsProfileId;
  }


  public AudioConfig pitch(Double pitch) {
    this.pitch = pitch;
    return this;
  }

  /**
   * Optional. Input only. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.
   * @return pitch
   */
  @javax.annotation.Nullable
  public Double getPitch() {
    return pitch;
  }

  public void setPitch(Double pitch) {
    this.pitch = pitch;
  }


  public AudioConfig sampleRateHertz(Integer sampleRateHertz) {
    this.sampleRateHertz = sampleRateHertz;
    return this;
  }

  /**
   * Optional. The synthesis sample rate (in hertz) for this audio. When this is specified in SynthesizeSpeechRequest, if this is different from the voice&#39;s natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen, in which case it will fail the request and return google.rpc.Code.INVALID_ARGUMENT.
   * @return sampleRateHertz
   */
  @javax.annotation.Nullable
  public Integer getSampleRateHertz() {
    return sampleRateHertz;
  }

  public void setSampleRateHertz(Integer sampleRateHertz) {
    this.sampleRateHertz = sampleRateHertz;
  }


  public AudioConfig speakingRate(Double speakingRate) {
    this.speakingRate = speakingRate;
    return this;
  }

  /**
   * Optional. Input only. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal native speed supported by the specific voice. 2.0 is twice as fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other values &lt; 0.25 or &gt; 4.0 will return an error.
   * @return speakingRate
   */
  @javax.annotation.Nullable
  public Double getSpeakingRate() {
    return speakingRate;
  }

  public void setSpeakingRate(Double speakingRate) {
    this.speakingRate = speakingRate;
  }


  public AudioConfig volumeGainDb(Double volumeGainDb) {
    this.volumeGainDb = volumeGainDb;
    return this;
  }

  /**
   * Optional. Input only. Volume gain (in dB) of the normal native volume supported by the specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB) will play at approximately half the amplitude of the normal native signal amplitude. A value of +6.0 (dB) will play at approximately twice the amplitude of the normal native signal amplitude. Strongly recommend not to exceed +10 (dB) as there&#39;s usually no effective increase in loudness for any value greater than that.
   * @return volumeGainDb
   */
  @javax.annotation.Nullable
  public Double getVolumeGainDb() {
    return volumeGainDb;
  }

  public void setVolumeGainDb(Double volumeGainDb) {
    this.volumeGainDb = volumeGainDb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioConfig audioConfig = (AudioConfig) o;
    return Objects.equals(this.audioEncoding, audioConfig.audioEncoding) &&
        Objects.equals(this.effectsProfileId, audioConfig.effectsProfileId) &&
        Objects.equals(this.pitch, audioConfig.pitch) &&
        Objects.equals(this.sampleRateHertz, audioConfig.sampleRateHertz) &&
        Objects.equals(this.speakingRate, audioConfig.speakingRate) &&
        Objects.equals(this.volumeGainDb, audioConfig.volumeGainDb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioEncoding, effectsProfileId, pitch, sampleRateHertz, speakingRate, volumeGainDb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioConfig {\n");
    sb.append("    audioEncoding: ").append(toIndentedString(audioEncoding)).append("\n");
    sb.append("    effectsProfileId: ").append(toIndentedString(effectsProfileId)).append("\n");
    sb.append("    pitch: ").append(toIndentedString(pitch)).append("\n");
    sb.append("    sampleRateHertz: ").append(toIndentedString(sampleRateHertz)).append("\n");
    sb.append("    speakingRate: ").append(toIndentedString(speakingRate)).append("\n");
    sb.append("    volumeGainDb: ").append(toIndentedString(volumeGainDb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audioEncoding");
    openapiFields.add("effectsProfileId");
    openapiFields.add("pitch");
    openapiFields.add("sampleRateHertz");
    openapiFields.add("speakingRate");
    openapiFields.add("volumeGainDb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioConfig is not found in the empty JSON string", AudioConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audioEncoding") != null && !jsonObj.get("audioEncoding").isJsonNull()) && !jsonObj.get("audioEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioEncoding").toString()));
      }
      // validate the optional field `audioEncoding`
      if (jsonObj.get("audioEncoding") != null && !jsonObj.get("audioEncoding").isJsonNull()) {
        AudioEncodingEnum.validateJsonElement(jsonObj.get("audioEncoding"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("effectsProfileId") != null && !jsonObj.get("effectsProfileId").isJsonNull() && !jsonObj.get("effectsProfileId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectsProfileId` to be an array in the JSON string but got `%s`", jsonObj.get("effectsProfileId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioConfig>() {
           @Override
           public void write(JsonWriter out, AudioConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioConfig
   * @throws IOException if the JSON string is invalid with respect to AudioConfig
   */
  public static AudioConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioConfig.class);
  }

  /**
   * Convert an instance of AudioConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

