/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AutoForwarding;
import org.openapitools.client.model.BatchDeleteMessagesRequest;
import org.openapitools.client.model.BatchModifyMessagesRequest;
import org.openapitools.client.model.CseIdentity;
import org.openapitools.client.model.CseKeyPair;
import org.openapitools.client.model.Delegate;
import org.openapitools.client.model.Draft;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.ForwardingAddress;
import org.openapitools.client.model.ImapSettings;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.LanguageSettings;
import org.openapitools.client.model.ListCseIdentitiesResponse;
import org.openapitools.client.model.ListCseKeyPairsResponse;
import org.openapitools.client.model.ListDelegatesResponse;
import org.openapitools.client.model.ListDraftsResponse;
import org.openapitools.client.model.ListFiltersResponse;
import org.openapitools.client.model.ListForwardingAddressesResponse;
import org.openapitools.client.model.ListHistoryResponse;
import org.openapitools.client.model.ListLabelsResponse;
import org.openapitools.client.model.ListMessagesResponse;
import org.openapitools.client.model.ListSendAsResponse;
import org.openapitools.client.model.ListSmimeInfoResponse;
import org.openapitools.client.model.ListThreadsResponse;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.MessagePartBody;
import org.openapitools.client.model.ModifyMessageRequest;
import org.openapitools.client.model.ModifyThreadRequest;
import org.openapitools.client.model.PopSettings;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.SendAs;
import org.openapitools.client.model.SmimeInfo;
import org.openapitools.client.model.Thread;
import org.openapitools.client.model.VacationSettings;
import org.openapitools.client.model.WatchRequest;
import org.openapitools.client.model.WatchResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Creates a new draft with the &#x60;DRAFT&#x60; label.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersDraftsCreateTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Draft draft = null;
        Draft response = api.gmailUsersDraftsCreate(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, draft);
        // TODO: test validations
    }

    /**
     * Immediately and permanently deletes the specified draft. Does not simply trash it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersDraftsDeleteTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersDraftsDelete(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the specified draft.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersDraftsGetTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String format = null;
        Draft response = api.gmailUsersDraftsGet(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, format);
        // TODO: test validations
    }

    /**
     * Lists the drafts in the user&#39;s mailbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersDraftsListTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeSpamTrash = null;
        Integer maxResults = null;
        String pageToken = null;
        String q = null;
        ListDraftsResponse response = api.gmailUsersDraftsList(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeSpamTrash, maxResults, pageToken, q);
        // TODO: test validations
    }

    /**
     * Sends the specified, existing draft to the recipients in the &#x60;To&#x60;, &#x60;Cc&#x60;, and &#x60;Bcc&#x60; headers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersDraftsSendTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Draft draft = null;
        Message response = api.gmailUsersDraftsSend(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, draft);
        // TODO: test validations
    }

    /**
     * Replaces a draft&#39;s content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersDraftsUpdateTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Draft draft = null;
        Draft response = api.gmailUsersDraftsUpdate(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, draft);
        // TODO: test validations
    }

    /**
     * Gets the current user&#39;s Gmail profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersGetProfileTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Profile response = api.gmailUsersGetProfile(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing &#x60;historyId&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersHistoryListTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> historyTypes = null;
        String labelId = null;
        Integer maxResults = null;
        String pageToken = null;
        String startHistoryId = null;
        ListHistoryResponse response = api.gmailUsersHistoryList(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, historyTypes, labelId, maxResults, pageToken, startHistoryId);
        // TODO: test validations
    }

    /**
     * Creates a new label.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersLabelsCreateTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Label label = null;
        Label response = api.gmailUsersLabelsCreate(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, label);
        // TODO: test validations
    }

    /**
     * Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersLabelsDeleteTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersLabelsDelete(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the specified label.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersLabelsGetTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Label response = api.gmailUsersLabelsGet(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all labels in the user&#39;s mailbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersLabelsListTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListLabelsResponse response = api.gmailUsersLabelsList(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Patch the specified label.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersLabelsPatchTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Label label = null;
        Label response = api.gmailUsersLabelsPatch(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, label);
        // TODO: test validations
    }

    /**
     * Updates the specified label.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersLabelsUpdateTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Label label = null;
        Label response = api.gmailUsersLabelsUpdate(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, label);
        // TODO: test validations
    }

    /**
     * Gets the specified message attachment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersMessagesAttachmentsGetTest() throws ApiException {
        String userId = null;
        String messageId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        MessagePartBody response = api.gmailUsersMessagesAttachmentsGet(userId, messageId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersMessagesBatchDeleteTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchDeleteMessagesRequest batchDeleteMessagesRequest = null;
        api.gmailUsersMessagesBatchDelete(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchDeleteMessagesRequest);
        // TODO: test validations
    }

    /**
     * Modifies the labels on the specified messages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersMessagesBatchModifyTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchModifyMessagesRequest batchModifyMessagesRequest = null;
        api.gmailUsersMessagesBatchModify(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchModifyMessagesRequest);
        // TODO: test validations
    }

    /**
     * Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer &#x60;messages.trash&#x60; instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersMessagesDeleteTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersMessagesDelete(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the specified message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersMessagesGetTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String format = null;
        List<String> metadataHeaders = null;
        Message response = api.gmailUsersMessagesGet(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, format, metadataHeaders);
        // TODO: test validations
    }

    /**
     * Imports a message into only this user&#39;s mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. This method doesn&#39;t perform SPF checks, so it might not work for some spam messages, such as those attempting to perform domain spoofing. This method does not send a message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersMessagesImportTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean deleted = null;
        String internalDateSource = null;
        Boolean neverMarkSpam = null;
        Boolean processForCalendar = null;
        Message message = null;
        Message response = api.gmailUsersMessagesImport(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, deleted, internalDateSource, neverMarkSpam, processForCalendar, message);
        // TODO: test validations
    }

    /**
     * Directly inserts a message into only this user&#39;s mailbox similar to &#x60;IMAP APPEND&#x60;, bypassing most scanning and classification. Does not send a message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersMessagesInsertTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean deleted = null;
        String internalDateSource = null;
        Message message = null;
        Message response = api.gmailUsersMessagesInsert(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, deleted, internalDateSource, message);
        // TODO: test validations
    }

    /**
     * Lists the messages in the user&#39;s mailbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersMessagesListTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeSpamTrash = null;
        List<String> labelIds = null;
        Integer maxResults = null;
        String pageToken = null;
        String q = null;
        ListMessagesResponse response = api.gmailUsersMessagesList(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeSpamTrash, labelIds, maxResults, pageToken, q);
        // TODO: test validations
    }

    /**
     * Modifies the labels on the specified message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersMessagesModifyTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ModifyMessageRequest modifyMessageRequest = null;
        Message response = api.gmailUsersMessagesModify(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyMessageRequest);
        // TODO: test validations
    }

    /**
     * Sends the specified message to the recipients in the &#x60;To&#x60;, &#x60;Cc&#x60;, and &#x60;Bcc&#x60; headers. For example usage, see [Sending email](https://developers.google.com/gmail/api/guides/sending).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersMessagesSendTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Message message = null;
        Message response = api.gmailUsersMessagesSend(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, message);
        // TODO: test validations
    }

    /**
     * Moves the specified message to the trash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersMessagesTrashTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Message response = api.gmailUsersMessagesTrash(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Removes the specified message from the trash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersMessagesUntrashTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Message response = api.gmailUsersMessagesUntrash(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates and configures a client-side encryption identity that&#39;s authorized to send mail from the user account. Google publishes the S/MIME certificate to a shared domain-wide directory so that people within a Google Workspace organization can encrypt and send mail to the identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsCseIdentitiesCreateTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CseIdentity cseIdentity = null;
        CseIdentity response = api.gmailUsersSettingsCseIdentitiesCreate(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, cseIdentity);
        // TODO: test validations
    }

    /**
     * Deletes a client-side encryption identity. The authenticated user can no longer use the identity to send encrypted messages. You cannot restore the identity after you delete it. Instead, use the CreateCseIdentity method to create another identity with the same configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsCseIdentitiesDeleteTest() throws ApiException {
        String userId = null;
        String cseEmailAddress = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersSettingsCseIdentitiesDelete(userId, cseEmailAddress, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves a client-side encryption identity configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsCseIdentitiesGetTest() throws ApiException {
        String userId = null;
        String cseEmailAddress = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CseIdentity response = api.gmailUsersSettingsCseIdentitiesGet(userId, cseEmailAddress, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the client-side encrypted identities for an authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsCseIdentitiesListTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCseIdentitiesResponse response = api.gmailUsersSettingsCseIdentitiesList(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Associates a different key pair with an existing client-side encryption identity. The updated key pair must validate against Google&#39;s [S/MIME certificate profiles](https://support.google.com/a/answer/7300887).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsCseIdentitiesPatchTest() throws ApiException {
        String userId = null;
        String emailAddress = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CseIdentity cseIdentity = null;
        CseIdentity response = api.gmailUsersSettingsCseIdentitiesPatch(userId, emailAddress, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, cseIdentity);
        // TODO: test validations
    }

    /**
     * Creates and uploads a client-side encryption S/MIME public key certificate chain and private key metadata for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsCseKeypairsCreateTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CseKeyPair cseKeyPair = null;
        CseKeyPair response = api.gmailUsersSettingsCseKeypairsCreate(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, cseKeyPair);
        // TODO: test validations
    }

    /**
     * Turns off a client-side encryption key pair. The authenticated user can no longer use the key pair to decrypt incoming CSE message texts or sign outgoing CSE mail. To regain access, use the EnableCseKeyPair to turn on the key pair. After 30 days, you can permanently delete the key pair by using the ObliterateCseKeyPair method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsCseKeypairsDisableTest() throws ApiException {
        String userId = null;
        String keyPairId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        CseKeyPair response = api.gmailUsersSettingsCseKeypairsDisable(userId, keyPairId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Turns on a client-side encryption key pair that was turned off. The key pair becomes active again for any associated client-side encryption identities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsCseKeypairsEnableTest() throws ApiException {
        String userId = null;
        String keyPairId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        CseKeyPair response = api.gmailUsersSettingsCseKeypairsEnable(userId, keyPairId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Retrieves an existing client-side encryption key pair.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsCseKeypairsGetTest() throws ApiException {
        String userId = null;
        String keyPairId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CseKeyPair response = api.gmailUsersSettingsCseKeypairsGet(userId, keyPairId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists client-side encryption key pairs for an authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsCseKeypairsListTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCseKeyPairsResponse response = api.gmailUsersSettingsCseKeypairsList(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Deletes a client-side encryption key pair permanently and immediately. You can only permanently delete key pairs that have been turned off for more than 30 days. To turn off a key pair, use the DisableCseKeyPair method. Gmail can&#39;t restore or decrypt any messages that were encrypted by an obliterated key. Authenticated users and Google Workspace administrators lose access to reading the encrypted messages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsCseKeypairsObliterateTest() throws ApiException {
        String userId = null;
        String keyPairId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        api.gmailUsersSettingsCseKeypairsObliterate(userId, keyPairId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Adds a delegate with its verification status set directly to &#x60;accepted&#x60;, without sending any verification email. The delegate user must be a member of the same Google Workspace organization as the delegator user. Gmail imposes limitations on the number of delegates and delegators each user in a Google Workspace organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be referred to by their primary email address, and not an email alias. Also note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use. This method is only available to service account clients that have been delegated domain-wide authority.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsDelegatesCreateTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Delegate delegate = null;
        Delegate response = api.gmailUsersSettingsDelegatesCreate(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, delegate);
        // TODO: test validations
    }

    /**
     * Removes the specified delegate (which can be of any verification status), and revokes any verification that may have been required for using it. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsDelegatesDeleteTest() throws ApiException {
        String userId = null;
        String delegateEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersSettingsDelegatesDelete(userId, delegateEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the specified delegate. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsDelegatesGetTest() throws ApiException {
        String userId = null;
        String delegateEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Delegate response = api.gmailUsersSettingsDelegatesGet(userId, delegateEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the delegates for the specified account. This method is only available to service account clients that have been delegated domain-wide authority.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsDelegatesListTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListDelegatesResponse response = api.gmailUsersSettingsDelegatesList(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a filter. Note: you can only create a maximum of 1,000 filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsFiltersCreateTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Filter filter = null;
        Filter response = api.gmailUsersSettingsFiltersCreate(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter);
        // TODO: test validations
    }

    /**
     * Immediately and permanently deletes the specified filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsFiltersDeleteTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersSettingsFiltersDelete(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsFiltersGetTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Filter response = api.gmailUsersSettingsFiltersGet(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the message filters of a Gmail user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsFiltersListTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListFiltersResponse response = api.gmailUsersSettingsFiltersList(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource&#39;s verification status will be set to &#x60;pending&#x60;; otherwise, the resource will be created with verification status set to &#x60;accepted&#x60;. This method is only available to service account clients that have been delegated domain-wide authority.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsForwardingAddressesCreateTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ForwardingAddress forwardingAddress = null;
        ForwardingAddress response = api.gmailUsersSettingsForwardingAddressesCreate(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, forwardingAddress);
        // TODO: test validations
    }

    /**
     * Deletes the specified forwarding address and revokes any verification that may have been required. This method is only available to service account clients that have been delegated domain-wide authority.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsForwardingAddressesDeleteTest() throws ApiException {
        String userId = null;
        String forwardingEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersSettingsForwardingAddressesDelete(userId, forwardingEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the specified forwarding address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsForwardingAddressesGetTest() throws ApiException {
        String userId = null;
        String forwardingEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ForwardingAddress response = api.gmailUsersSettingsForwardingAddressesGet(userId, forwardingEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the forwarding addresses for the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsForwardingAddressesListTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListForwardingAddressesResponse response = api.gmailUsersSettingsForwardingAddressesList(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the auto-forwarding setting for the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsGetAutoForwardingTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AutoForwarding response = api.gmailUsersSettingsGetAutoForwarding(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets IMAP settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsGetImapTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ImapSettings response = api.gmailUsersSettingsGetImap(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets language settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsGetLanguageTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LanguageSettings response = api.gmailUsersSettingsGetLanguage(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets POP settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsGetPopTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PopSettings response = api.gmailUsersSettingsGetPop(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets vacation responder settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsGetVacationTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        VacationSettings response = api.gmailUsersSettingsGetVacation(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a custom \&quot;from\&quot; send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource&#39;s verification status will be set to &#x60;pending&#x60;; otherwise, the resource will be created with verification status set to &#x60;accepted&#x60;. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. This method is only available to service account clients that have been delegated domain-wide authority.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsSendAsCreateTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SendAs sendAs = null;
        SendAs response = api.gmailUsersSettingsSendAsCreate(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sendAs);
        // TODO: test validations
    }

    /**
     * Deletes the specified send-as alias. Revokes any verification that may have been required for using it. This method is only available to service account clients that have been delegated domain-wide authority.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsSendAsDeleteTest() throws ApiException {
        String userId = null;
        String sendAsEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersSettingsSendAsDelete(userId, sendAsEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsSendAsGetTest() throws ApiException {
        String userId = null;
        String sendAsEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SendAs response = api.gmailUsersSettingsSendAsGet(userId, sendAsEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom \&quot;from\&quot; aliases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsSendAsListTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListSendAsResponse response = api.gmailUsersSettingsSendAsList(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Patch the specified send-as alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsSendAsPatchTest() throws ApiException {
        String userId = null;
        String sendAsEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SendAs sendAs = null;
        SendAs response = api.gmailUsersSettingsSendAsPatch(userId, sendAsEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sendAs);
        // TODO: test validations
    }

    /**
     * Deletes the specified S/MIME config for the specified send-as alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsSendAsSmimeInfoDeleteTest() throws ApiException {
        String userId = null;
        String sendAsEmail = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersSettingsSendAsSmimeInfoDelete(userId, sendAsEmail, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the specified S/MIME config for the specified send-as alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsSendAsSmimeInfoGetTest() throws ApiException {
        String userId = null;
        String sendAsEmail = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SmimeInfo response = api.gmailUsersSettingsSendAsSmimeInfoGet(userId, sendAsEmail, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsSendAsSmimeInfoInsertTest() throws ApiException {
        String userId = null;
        String sendAsEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SmimeInfo smimeInfo = null;
        SmimeInfo response = api.gmailUsersSettingsSendAsSmimeInfoInsert(userId, sendAsEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, smimeInfo);
        // TODO: test validations
    }

    /**
     * Lists S/MIME configs for the specified send-as alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsSendAsSmimeInfoListTest() throws ApiException {
        String userId = null;
        String sendAsEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListSmimeInfoResponse response = api.gmailUsersSettingsSendAsSmimeInfoList(userId, sendAsEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Sets the default S/MIME config for the specified send-as alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsSendAsSmimeInfoSetDefaultTest() throws ApiException {
        String userId = null;
        String sendAsEmail = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersSettingsSendAsSmimeInfoSetDefault(userId, sendAsEmail, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsSendAsUpdateTest() throws ApiException {
        String userId = null;
        String sendAsEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SendAs sendAs = null;
        SendAs response = api.gmailUsersSettingsSendAsUpdate(userId, sendAsEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sendAs);
        // TODO: test validations
    }

    /**
     * Sends a verification email to the specified send-as alias address. The verification status must be &#x60;pending&#x60;. This method is only available to service account clients that have been delegated domain-wide authority.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsSendAsVerifyTest() throws ApiException {
        String userId = null;
        String sendAsEmail = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersSettingsSendAsVerify(userId, sendAsEmail, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled. This method is only available to service account clients that have been delegated domain-wide authority.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsUpdateAutoForwardingTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AutoForwarding autoForwarding = null;
        AutoForwarding response = api.gmailUsersSettingsUpdateAutoForwarding(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, autoForwarding);
        // TODO: test validations
    }

    /**
     * Updates IMAP settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsUpdateImapTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ImapSettings imapSettings = null;
        ImapSettings response = api.gmailUsersSettingsUpdateImap(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, imapSettings);
        // TODO: test validations
    }

    /**
     * Updates language settings. If successful, the return object contains the &#x60;displayLanguage&#x60; that was saved for the user, which may differ from the value passed into the request. This is because the requested &#x60;displayLanguage&#x60; may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsUpdateLanguageTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LanguageSettings languageSettings = null;
        LanguageSettings response = api.gmailUsersSettingsUpdateLanguage(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, languageSettings);
        // TODO: test validations
    }

    /**
     * Updates POP settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsUpdatePopTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PopSettings popSettings = null;
        PopSettings response = api.gmailUsersSettingsUpdatePop(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, popSettings);
        // TODO: test validations
    }

    /**
     * Updates vacation responder settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersSettingsUpdateVacationTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        VacationSettings vacationSettings = null;
        VacationSettings response = api.gmailUsersSettingsUpdateVacation(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, vacationSettings);
        // TODO: test validations
    }

    /**
     * Stop receiving push notifications for the given user mailbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersStopTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersStop(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Immediately and permanently deletes the specified thread. Any messages that belong to the thread are also deleted. This operation cannot be undone. Prefer &#x60;threads.trash&#x60; instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersThreadsDeleteTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gmailUsersThreadsDelete(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the specified thread.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersThreadsGetTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String format = null;
        List<String> metadataHeaders = null;
        Thread response = api.gmailUsersThreadsGet(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, format, metadataHeaders);
        // TODO: test validations
    }

    /**
     * Lists the threads in the user&#39;s mailbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersThreadsListTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeSpamTrash = null;
        List<String> labelIds = null;
        Integer maxResults = null;
        String pageToken = null;
        String q = null;
        ListThreadsResponse response = api.gmailUsersThreadsList(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeSpamTrash, labelIds, maxResults, pageToken, q);
        // TODO: test validations
    }

    /**
     * Modifies the labels applied to the thread. This applies to all messages in the thread.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersThreadsModifyTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ModifyThreadRequest modifyThreadRequest = null;
        Thread response = api.gmailUsersThreadsModify(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, modifyThreadRequest);
        // TODO: test validations
    }

    /**
     * Moves the specified thread to the trash. Any messages that belong to the thread are also moved to the trash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersThreadsTrashTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Thread response = api.gmailUsersThreadsTrash(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Removes the specified thread from the trash. Any messages that belong to the thread are also removed from the trash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersThreadsUntrashTest() throws ApiException {
        String userId = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Thread response = api.gmailUsersThreadsUntrash(userId, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Set up or update a push notification watch on the given user mailbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gmailUsersWatchTest() throws ApiException {
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        WatchRequest watchRequest = null;
        WatchResponse response = api.gmailUsersWatch(userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, watchRequest);
        // TODO: test validations
    }

}
