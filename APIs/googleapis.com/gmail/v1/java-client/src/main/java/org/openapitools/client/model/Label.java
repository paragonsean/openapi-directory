/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LabelColor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Labels are used to categorize messages and threads within the user&#39;s mailbox. The maximum number of labels supported for a user&#39;s mailbox is 10,000.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:29.920230-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Label {
  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private LabelColor color;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The visibility of the label in the label list in the Gmail web interface.
   */
  @JsonAdapter(LabelListVisibilityEnum.Adapter.class)
  public enum LabelListVisibilityEnum {
    LABEL_SHOW("labelShow"),
    
    LABEL_SHOW_IF_UNREAD("labelShowIfUnread"),
    
    LABEL_HIDE("labelHide");

    private String value;

    LabelListVisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LabelListVisibilityEnum fromValue(String value) {
      for (LabelListVisibilityEnum b : LabelListVisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LabelListVisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabelListVisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LabelListVisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LabelListVisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LabelListVisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LABEL_LIST_VISIBILITY = "labelListVisibility";
  @SerializedName(SERIALIZED_NAME_LABEL_LIST_VISIBILITY)
  private LabelListVisibilityEnum labelListVisibility;

  /**
   * The visibility of messages with this label in the message list in the Gmail web interface.
   */
  @JsonAdapter(MessageListVisibilityEnum.Adapter.class)
  public enum MessageListVisibilityEnum {
    SHOW("show"),
    
    HIDE("hide");

    private String value;

    MessageListVisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageListVisibilityEnum fromValue(String value) {
      for (MessageListVisibilityEnum b : MessageListVisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageListVisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageListVisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageListVisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageListVisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessageListVisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_LIST_VISIBILITY = "messageListVisibility";
  @SerializedName(SERIALIZED_NAME_MESSAGE_LIST_VISIBILITY)
  private MessageListVisibilityEnum messageListVisibility;

  public static final String SERIALIZED_NAME_MESSAGES_TOTAL = "messagesTotal";
  @SerializedName(SERIALIZED_NAME_MESSAGES_TOTAL)
  private Integer messagesTotal;

  public static final String SERIALIZED_NAME_MESSAGES_UNREAD = "messagesUnread";
  @SerializedName(SERIALIZED_NAME_MESSAGES_UNREAD)
  private Integer messagesUnread;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_THREADS_TOTAL = "threadsTotal";
  @SerializedName(SERIALIZED_NAME_THREADS_TOTAL)
  private Integer threadsTotal;

  public static final String SERIALIZED_NAME_THREADS_UNREAD = "threadsUnread";
  @SerializedName(SERIALIZED_NAME_THREADS_UNREAD)
  private Integer threadsUnread;

  /**
   * The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the &#x60;INBOX&#x60; and &#x60;UNREAD&#x60; labels from messages and threads, but cannot apply or remove the &#x60;DRAFTS&#x60; or &#x60;SENT&#x60; labels from messages or threads.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SYSTEM("system"),
    
    USER("user");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Label() {
  }

  public Label color(LabelColor color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public LabelColor getColor() {
    return color;
  }

  public void setColor(LabelColor color) {
    this.color = color;
  }


  public Label id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The immutable ID of the label.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Label labelListVisibility(LabelListVisibilityEnum labelListVisibility) {
    this.labelListVisibility = labelListVisibility;
    return this;
  }

  /**
   * The visibility of the label in the label list in the Gmail web interface.
   * @return labelListVisibility
   */
  @javax.annotation.Nullable
  public LabelListVisibilityEnum getLabelListVisibility() {
    return labelListVisibility;
  }

  public void setLabelListVisibility(LabelListVisibilityEnum labelListVisibility) {
    this.labelListVisibility = labelListVisibility;
  }


  public Label messageListVisibility(MessageListVisibilityEnum messageListVisibility) {
    this.messageListVisibility = messageListVisibility;
    return this;
  }

  /**
   * The visibility of messages with this label in the message list in the Gmail web interface.
   * @return messageListVisibility
   */
  @javax.annotation.Nullable
  public MessageListVisibilityEnum getMessageListVisibility() {
    return messageListVisibility;
  }

  public void setMessageListVisibility(MessageListVisibilityEnum messageListVisibility) {
    this.messageListVisibility = messageListVisibility;
  }


  public Label messagesTotal(Integer messagesTotal) {
    this.messagesTotal = messagesTotal;
    return this;
  }

  /**
   * The total number of messages with the label.
   * @return messagesTotal
   */
  @javax.annotation.Nullable
  public Integer getMessagesTotal() {
    return messagesTotal;
  }

  public void setMessagesTotal(Integer messagesTotal) {
    this.messagesTotal = messagesTotal;
  }


  public Label messagesUnread(Integer messagesUnread) {
    this.messagesUnread = messagesUnread;
    return this;
  }

  /**
   * The number of unread messages with the label.
   * @return messagesUnread
   */
  @javax.annotation.Nullable
  public Integer getMessagesUnread() {
    return messagesUnread;
  }

  public void setMessagesUnread(Integer messagesUnread) {
    this.messagesUnread = messagesUnread;
  }


  public Label name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The display name of the label.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Label threadsTotal(Integer threadsTotal) {
    this.threadsTotal = threadsTotal;
    return this;
  }

  /**
   * The total number of threads with the label.
   * @return threadsTotal
   */
  @javax.annotation.Nullable
  public Integer getThreadsTotal() {
    return threadsTotal;
  }

  public void setThreadsTotal(Integer threadsTotal) {
    this.threadsTotal = threadsTotal;
  }


  public Label threadsUnread(Integer threadsUnread) {
    this.threadsUnread = threadsUnread;
    return this;
  }

  /**
   * The number of unread threads with the label.
   * @return threadsUnread
   */
  @javax.annotation.Nullable
  public Integer getThreadsUnread() {
    return threadsUnread;
  }

  public void setThreadsUnread(Integer threadsUnread) {
    this.threadsUnread = threadsUnread;
  }


  public Label type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the &#x60;INBOX&#x60; and &#x60;UNREAD&#x60; labels from messages and threads, but cannot apply or remove the &#x60;DRAFTS&#x60; or &#x60;SENT&#x60; labels from messages or threads.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Label label = (Label) o;
    return Objects.equals(this.color, label.color) &&
        Objects.equals(this.id, label.id) &&
        Objects.equals(this.labelListVisibility, label.labelListVisibility) &&
        Objects.equals(this.messageListVisibility, label.messageListVisibility) &&
        Objects.equals(this.messagesTotal, label.messagesTotal) &&
        Objects.equals(this.messagesUnread, label.messagesUnread) &&
        Objects.equals(this.name, label.name) &&
        Objects.equals(this.threadsTotal, label.threadsTotal) &&
        Objects.equals(this.threadsUnread, label.threadsUnread) &&
        Objects.equals(this.type, label.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, id, labelListVisibility, messageListVisibility, messagesTotal, messagesUnread, name, threadsTotal, threadsUnread, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Label {\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labelListVisibility: ").append(toIndentedString(labelListVisibility)).append("\n");
    sb.append("    messageListVisibility: ").append(toIndentedString(messageListVisibility)).append("\n");
    sb.append("    messagesTotal: ").append(toIndentedString(messagesTotal)).append("\n");
    sb.append("    messagesUnread: ").append(toIndentedString(messagesUnread)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    threadsTotal: ").append(toIndentedString(threadsTotal)).append("\n");
    sb.append("    threadsUnread: ").append(toIndentedString(threadsUnread)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("color");
    openapiFields.add("id");
    openapiFields.add("labelListVisibility");
    openapiFields.add("messageListVisibility");
    openapiFields.add("messagesTotal");
    openapiFields.add("messagesUnread");
    openapiFields.add("name");
    openapiFields.add("threadsTotal");
    openapiFields.add("threadsUnread");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Label
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Label.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Label is not found in the empty JSON string", Label.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Label.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Label` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        LabelColor.validateJsonElement(jsonObj.get("color"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("labelListVisibility") != null && !jsonObj.get("labelListVisibility").isJsonNull()) && !jsonObj.get("labelListVisibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelListVisibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelListVisibility").toString()));
      }
      // validate the optional field `labelListVisibility`
      if (jsonObj.get("labelListVisibility") != null && !jsonObj.get("labelListVisibility").isJsonNull()) {
        LabelListVisibilityEnum.validateJsonElement(jsonObj.get("labelListVisibility"));
      }
      if ((jsonObj.get("messageListVisibility") != null && !jsonObj.get("messageListVisibility").isJsonNull()) && !jsonObj.get("messageListVisibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageListVisibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageListVisibility").toString()));
      }
      // validate the optional field `messageListVisibility`
      if (jsonObj.get("messageListVisibility") != null && !jsonObj.get("messageListVisibility").isJsonNull()) {
        MessageListVisibilityEnum.validateJsonElement(jsonObj.get("messageListVisibility"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Label.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Label' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Label> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Label.class));

       return (TypeAdapter<T>) new TypeAdapter<Label>() {
           @Override
           public void write(JsonWriter out, Label value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Label read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Label given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Label
   * @throws IOException if the JSON string is invalid with respect to Label
   */
  public static Label fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Label.class);
  }

  /**
   * Convert an instance of Label to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

