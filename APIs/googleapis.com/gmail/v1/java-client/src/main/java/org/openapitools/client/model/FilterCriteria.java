/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message matching criteria.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:29.920230-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FilterCriteria {
  public static final String SERIALIZED_NAME_EXCLUDE_CHATS = "excludeChats";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_CHATS)
  private Boolean excludeChats;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENT = "hasAttachment";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENT)
  private Boolean hasAttachment;

  public static final String SERIALIZED_NAME_NEGATED_QUERY = "negatedQuery";
  @SerializedName(SERIALIZED_NAME_NEGATED_QUERY)
  private String negatedQuery;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  /**
   * How the message size in bytes should be in relation to the size field.
   */
  @JsonAdapter(SizeComparisonEnum.Adapter.class)
  public enum SizeComparisonEnum {
    UNSPECIFIED("unspecified"),
    
    SMALLER("smaller"),
    
    LARGER("larger");

    private String value;

    SizeComparisonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeComparisonEnum fromValue(String value) {
      for (SizeComparisonEnum b : SizeComparisonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeComparisonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeComparisonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeComparisonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeComparisonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SizeComparisonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIZE_COMPARISON = "sizeComparison";
  @SerializedName(SERIALIZED_NAME_SIZE_COMPARISON)
  private SizeComparisonEnum sizeComparison;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public FilterCriteria() {
  }

  public FilterCriteria excludeChats(Boolean excludeChats) {
    this.excludeChats = excludeChats;
    return this;
  }

  /**
   * Whether the response should exclude chats.
   * @return excludeChats
   */
  @javax.annotation.Nullable
  public Boolean getExcludeChats() {
    return excludeChats;
  }

  public void setExcludeChats(Boolean excludeChats) {
    this.excludeChats = excludeChats;
  }


  public FilterCriteria from(String from) {
    this.from = from;
    return this;
  }

  /**
   * The sender&#39;s display name or email address.
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public FilterCriteria hasAttachment(Boolean hasAttachment) {
    this.hasAttachment = hasAttachment;
    return this;
  }

  /**
   * Whether the message has any attachment.
   * @return hasAttachment
   */
  @javax.annotation.Nullable
  public Boolean getHasAttachment() {
    return hasAttachment;
  }

  public void setHasAttachment(Boolean hasAttachment) {
    this.hasAttachment = hasAttachment;
  }


  public FilterCriteria negatedQuery(String negatedQuery) {
    this.negatedQuery = negatedQuery;
    return this;
  }

  /**
   * Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, &#x60;\&quot;from:someuser@example.com rfc822msgid: is:unread\&quot;&#x60;.
   * @return negatedQuery
   */
  @javax.annotation.Nullable
  public String getNegatedQuery() {
    return negatedQuery;
  }

  public void setNegatedQuery(String negatedQuery) {
    this.negatedQuery = negatedQuery;
  }


  public FilterCriteria query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, &#x60;\&quot;from:someuser@example.com rfc822msgid: is:unread\&quot;&#x60;.
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public FilterCriteria size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * The size of the entire RFC822 message in bytes, including all headers and attachments.
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public FilterCriteria sizeComparison(SizeComparisonEnum sizeComparison) {
    this.sizeComparison = sizeComparison;
    return this;
  }

  /**
   * How the message size in bytes should be in relation to the size field.
   * @return sizeComparison
   */
  @javax.annotation.Nullable
  public SizeComparisonEnum getSizeComparison() {
    return sizeComparison;
  }

  public void setSizeComparison(SizeComparisonEnum sizeComparison) {
    this.sizeComparison = sizeComparison;
  }


  public FilterCriteria subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Case-insensitive phrase found in the message&#39;s subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public FilterCriteria to(String to) {
    this.to = to;
    return this;
  }

  /**
   * The recipient&#39;s display name or email address. Includes recipients in the \&quot;to\&quot;, \&quot;cc\&quot;, and \&quot;bcc\&quot; header fields. You can use simply the local part of the email address. For example, \&quot;example\&quot; and \&quot;example@\&quot; both match \&quot;example@gmail.com\&quot;. This field is case-insensitive.
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterCriteria filterCriteria = (FilterCriteria) o;
    return Objects.equals(this.excludeChats, filterCriteria.excludeChats) &&
        Objects.equals(this.from, filterCriteria.from) &&
        Objects.equals(this.hasAttachment, filterCriteria.hasAttachment) &&
        Objects.equals(this.negatedQuery, filterCriteria.negatedQuery) &&
        Objects.equals(this.query, filterCriteria.query) &&
        Objects.equals(this.size, filterCriteria.size) &&
        Objects.equals(this.sizeComparison, filterCriteria.sizeComparison) &&
        Objects.equals(this.subject, filterCriteria.subject) &&
        Objects.equals(this.to, filterCriteria.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludeChats, from, hasAttachment, negatedQuery, query, size, sizeComparison, subject, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterCriteria {\n");
    sb.append("    excludeChats: ").append(toIndentedString(excludeChats)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    hasAttachment: ").append(toIndentedString(hasAttachment)).append("\n");
    sb.append("    negatedQuery: ").append(toIndentedString(negatedQuery)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sizeComparison: ").append(toIndentedString(sizeComparison)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excludeChats");
    openapiFields.add("from");
    openapiFields.add("hasAttachment");
    openapiFields.add("negatedQuery");
    openapiFields.add("query");
    openapiFields.add("size");
    openapiFields.add("sizeComparison");
    openapiFields.add("subject");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FilterCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FilterCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilterCriteria is not found in the empty JSON string", FilterCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FilterCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FilterCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("negatedQuery") != null && !jsonObj.get("negatedQuery").isJsonNull()) && !jsonObj.get("negatedQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negatedQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negatedQuery").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("sizeComparison") != null && !jsonObj.get("sizeComparison").isJsonNull()) && !jsonObj.get("sizeComparison").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeComparison` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeComparison").toString()));
      }
      // validate the optional field `sizeComparison`
      if (jsonObj.get("sizeComparison") != null && !jsonObj.get("sizeComparison").isJsonNull()) {
        SizeComparisonEnum.validateJsonElement(jsonObj.get("sizeComparison"));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilterCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilterCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilterCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilterCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<FilterCriteria>() {
           @Override
           public void write(JsonWriter out, FilterCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FilterCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FilterCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FilterCriteria
   * @throws IOException if the JSON string is invalid with respect to FilterCriteria
   */
  public static FilterCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilterCriteria.class);
  }

  /**
   * Convert an instance of FilterCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

