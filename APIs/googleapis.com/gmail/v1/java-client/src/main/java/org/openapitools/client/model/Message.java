/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MessagePart;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An email message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:29.920230-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Message {
  public static final String SERIALIZED_NAME_HISTORY_ID = "historyId";
  @SerializedName(SERIALIZED_NAME_HISTORY_ID)
  private String historyId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERNAL_DATE = "internalDate";
  @SerializedName(SERIALIZED_NAME_INTERNAL_DATE)
  private String internalDate;

  public static final String SERIALIZED_NAME_LABEL_IDS = "labelIds";
  @SerializedName(SERIALIZED_NAME_LABEL_IDS)
  private List<String> labelIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private MessagePart payload;

  public static final String SERIALIZED_NAME_RAW = "raw";
  @SerializedName(SERIALIZED_NAME_RAW)
  private byte[] raw;

  public static final String SERIALIZED_NAME_SIZE_ESTIMATE = "sizeEstimate";
  @SerializedName(SERIALIZED_NAME_SIZE_ESTIMATE)
  private Integer sizeEstimate;

  public static final String SERIALIZED_NAME_SNIPPET = "snippet";
  @SerializedName(SERIALIZED_NAME_SNIPPET)
  private String snippet;

  public static final String SERIALIZED_NAME_THREAD_ID = "threadId";
  @SerializedName(SERIALIZED_NAME_THREAD_ID)
  private String threadId;

  public Message() {
  }

  public Message historyId(String historyId) {
    this.historyId = historyId;
    return this;
  }

  /**
   * The ID of the last history record that modified this message.
   * @return historyId
   */
  @javax.annotation.Nullable
  public String getHistoryId() {
    return historyId;
  }

  public void setHistoryId(String historyId) {
    this.historyId = historyId;
  }


  public Message id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The immutable ID of the message.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Message internalDate(String internalDate) {
    this.internalDate = internalDate;
    return this;
  }

  /**
   * The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the &#x60;Date&#x60; header. However, for API-migrated mail, it can be configured by client to be based on the &#x60;Date&#x60; header.
   * @return internalDate
   */
  @javax.annotation.Nullable
  public String getInternalDate() {
    return internalDate;
  }

  public void setInternalDate(String internalDate) {
    this.internalDate = internalDate;
  }


  public Message labelIds(List<String> labelIds) {
    this.labelIds = labelIds;
    return this;
  }

  public Message addLabelIdsItem(String labelIdsItem) {
    if (this.labelIds == null) {
      this.labelIds = new ArrayList<>();
    }
    this.labelIds.add(labelIdsItem);
    return this;
  }

  /**
   * List of IDs of labels applied to this message.
   * @return labelIds
   */
  @javax.annotation.Nullable
  public List<String> getLabelIds() {
    return labelIds;
  }

  public void setLabelIds(List<String> labelIds) {
    this.labelIds = labelIds;
  }


  public Message payload(MessagePart payload) {
    this.payload = payload;
    return this;
  }

  /**
   * Get payload
   * @return payload
   */
  @javax.annotation.Nullable
  public MessagePart getPayload() {
    return payload;
  }

  public void setPayload(MessagePart payload) {
    this.payload = payload;
  }


  public Message raw(byte[] raw) {
    this.raw = raw;
    return this;
  }

  /**
   * The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in &#x60;messages.get&#x60; and &#x60;drafts.get&#x60; responses when the &#x60;format&#x3D;RAW&#x60; parameter is supplied.
   * @return raw
   */
  @javax.annotation.Nullable
  public byte[] getRaw() {
    return raw;
  }

  public void setRaw(byte[] raw) {
    this.raw = raw;
  }


  public Message sizeEstimate(Integer sizeEstimate) {
    this.sizeEstimate = sizeEstimate;
    return this;
  }

  /**
   * Estimated size in bytes of the message.
   * @return sizeEstimate
   */
  @javax.annotation.Nullable
  public Integer getSizeEstimate() {
    return sizeEstimate;
  }

  public void setSizeEstimate(Integer sizeEstimate) {
    this.sizeEstimate = sizeEstimate;
  }


  public Message snippet(String snippet) {
    this.snippet = snippet;
    return this;
  }

  /**
   * A short part of the message text.
   * @return snippet
   */
  @javax.annotation.Nullable
  public String getSnippet() {
    return snippet;
  }

  public void setSnippet(String snippet) {
    this.snippet = snippet;
  }


  public Message threadId(String threadId) {
    this.threadId = threadId;
    return this;
  }

  /**
   * The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested &#x60;threadId&#x60; must be specified on the &#x60;Message&#x60; or &#x60;Draft.Message&#x60; you supply with your request. 2. The &#x60;References&#x60; and &#x60;In-Reply-To&#x60; headers must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3. The &#x60;Subject&#x60; headers must match. 
   * @return threadId
   */
  @javax.annotation.Nullable
  public String getThreadId() {
    return threadId;
  }

  public void setThreadId(String threadId) {
    this.threadId = threadId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.historyId, message.historyId) &&
        Objects.equals(this.id, message.id) &&
        Objects.equals(this.internalDate, message.internalDate) &&
        Objects.equals(this.labelIds, message.labelIds) &&
        Objects.equals(this.payload, message.payload) &&
        Arrays.equals(this.raw, message.raw) &&
        Objects.equals(this.sizeEstimate, message.sizeEstimate) &&
        Objects.equals(this.snippet, message.snippet) &&
        Objects.equals(this.threadId, message.threadId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(historyId, id, internalDate, labelIds, payload, Arrays.hashCode(raw), sizeEstimate, snippet, threadId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    sb.append("    historyId: ").append(toIndentedString(historyId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    internalDate: ").append(toIndentedString(internalDate)).append("\n");
    sb.append("    labelIds: ").append(toIndentedString(labelIds)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("    sizeEstimate: ").append(toIndentedString(sizeEstimate)).append("\n");
    sb.append("    snippet: ").append(toIndentedString(snippet)).append("\n");
    sb.append("    threadId: ").append(toIndentedString(threadId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("historyId");
    openapiFields.add("id");
    openapiFields.add("internalDate");
    openapiFields.add("labelIds");
    openapiFields.add("payload");
    openapiFields.add("raw");
    openapiFields.add("sizeEstimate");
    openapiFields.add("snippet");
    openapiFields.add("threadId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Message
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Message.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Message is not found in the empty JSON string", Message.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Message.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Message` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("historyId") != null && !jsonObj.get("historyId").isJsonNull()) && !jsonObj.get("historyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `historyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("historyId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("internalDate") != null && !jsonObj.get("internalDate").isJsonNull()) && !jsonObj.get("internalDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalDate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labelIds") != null && !jsonObj.get("labelIds").isJsonNull() && !jsonObj.get("labelIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelIds` to be an array in the JSON string but got `%s`", jsonObj.get("labelIds").toString()));
      }
      // validate the optional field `payload`
      if (jsonObj.get("payload") != null && !jsonObj.get("payload").isJsonNull()) {
        MessagePart.validateJsonElement(jsonObj.get("payload"));
      }
      if ((jsonObj.get("snippet") != null && !jsonObj.get("snippet").isJsonNull()) && !jsonObj.get("snippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snippet").toString()));
      }
      if ((jsonObj.get("threadId") != null && !jsonObj.get("threadId").isJsonNull()) && !jsonObj.get("threadId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threadId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threadId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Message.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Message' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Message> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Message.class));

       return (TypeAdapter<T>) new TypeAdapter<Message>() {
           @Override
           public void write(JsonWriter out, Message value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Message read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Message given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Message
   * @throws IOException if the JSON string is invalid with respect to Message
   */
  public static Message fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Message.class);
  }

  /**
   * Convert an instance of Message to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

