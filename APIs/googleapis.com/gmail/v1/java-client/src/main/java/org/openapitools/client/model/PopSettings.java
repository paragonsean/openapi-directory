/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * POP settings for an account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:29.920230-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PopSettings {
  /**
   * The range of messages which are accessible via POP.
   */
  @JsonAdapter(AccessWindowEnum.Adapter.class)
  public enum AccessWindowEnum {
    ACCESS_WINDOW_UNSPECIFIED("accessWindowUnspecified"),
    
    DISABLED("disabled"),
    
    FROM_NOW_ON("fromNowOn"),
    
    ALL_MAIL("allMail");

    private String value;

    AccessWindowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessWindowEnum fromValue(String value) {
      for (AccessWindowEnum b : AccessWindowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessWindowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessWindowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessWindowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessWindowEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessWindowEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_WINDOW = "accessWindow";
  @SerializedName(SERIALIZED_NAME_ACCESS_WINDOW)
  private AccessWindowEnum accessWindow;

  /**
   * The action that will be executed on a message after it has been fetched via POP.
   */
  @JsonAdapter(DispositionEnum.Adapter.class)
  public enum DispositionEnum {
    DISPOSITION_UNSPECIFIED("dispositionUnspecified"),
    
    LEAVE_IN_INBOX("leaveInInbox"),
    
    ARCHIVE("archive"),
    
    TRASH("trash"),
    
    MARK_READ("markRead");

    private String value;

    DispositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DispositionEnum fromValue(String value) {
      for (DispositionEnum b : DispositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DispositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DispositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DispositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DispositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DispositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPOSITION = "disposition";
  @SerializedName(SERIALIZED_NAME_DISPOSITION)
  private DispositionEnum disposition;

  public PopSettings() {
  }

  public PopSettings accessWindow(AccessWindowEnum accessWindow) {
    this.accessWindow = accessWindow;
    return this;
  }

  /**
   * The range of messages which are accessible via POP.
   * @return accessWindow
   */
  @javax.annotation.Nullable
  public AccessWindowEnum getAccessWindow() {
    return accessWindow;
  }

  public void setAccessWindow(AccessWindowEnum accessWindow) {
    this.accessWindow = accessWindow;
  }


  public PopSettings disposition(DispositionEnum disposition) {
    this.disposition = disposition;
    return this;
  }

  /**
   * The action that will be executed on a message after it has been fetched via POP.
   * @return disposition
   */
  @javax.annotation.Nullable
  public DispositionEnum getDisposition() {
    return disposition;
  }

  public void setDisposition(DispositionEnum disposition) {
    this.disposition = disposition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PopSettings popSettings = (PopSettings) o;
    return Objects.equals(this.accessWindow, popSettings.accessWindow) &&
        Objects.equals(this.disposition, popSettings.disposition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessWindow, disposition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PopSettings {\n");
    sb.append("    accessWindow: ").append(toIndentedString(accessWindow)).append("\n");
    sb.append("    disposition: ").append(toIndentedString(disposition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessWindow");
    openapiFields.add("disposition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PopSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PopSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PopSettings is not found in the empty JSON string", PopSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PopSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PopSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessWindow") != null && !jsonObj.get("accessWindow").isJsonNull()) && !jsonObj.get("accessWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessWindow").toString()));
      }
      // validate the optional field `accessWindow`
      if (jsonObj.get("accessWindow") != null && !jsonObj.get("accessWindow").isJsonNull()) {
        AccessWindowEnum.validateJsonElement(jsonObj.get("accessWindow"));
      }
      if ((jsonObj.get("disposition") != null && !jsonObj.get("disposition").isJsonNull()) && !jsonObj.get("disposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disposition").toString()));
      }
      // validate the optional field `disposition`
      if (jsonObj.get("disposition") != null && !jsonObj.get("disposition").isJsonNull()) {
        DispositionEnum.validateJsonElement(jsonObj.get("disposition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PopSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PopSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PopSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PopSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<PopSettings>() {
           @Override
           public void write(JsonWriter out, PopSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PopSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PopSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PopSettings
   * @throws IOException if the JSON string is invalid with respect to PopSettings
   */
  public static PopSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PopSettings.class);
  }

  /**
   * Convert an instance of PopSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

