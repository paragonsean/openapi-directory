/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IMAP settings for an account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:29.920230-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImapSettings {
  public static final String SERIALIZED_NAME_AUTO_EXPUNGE = "autoExpunge";
  @SerializedName(SERIALIZED_NAME_AUTO_EXPUNGE)
  private Boolean autoExpunge;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  /**
   * The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.
   */
  @JsonAdapter(ExpungeBehaviorEnum.Adapter.class)
  public enum ExpungeBehaviorEnum {
    EXPUNGE_BEHAVIOR_UNSPECIFIED("expungeBehaviorUnspecified"),
    
    ARCHIVE("archive"),
    
    TRASH("trash"),
    
    DELETE_FOREVER("deleteForever");

    private String value;

    ExpungeBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpungeBehaviorEnum fromValue(String value) {
      for (ExpungeBehaviorEnum b : ExpungeBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpungeBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpungeBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpungeBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpungeBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpungeBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPUNGE_BEHAVIOR = "expungeBehavior";
  @SerializedName(SERIALIZED_NAME_EXPUNGE_BEHAVIOR)
  private ExpungeBehaviorEnum expungeBehavior;

  public static final String SERIALIZED_NAME_MAX_FOLDER_SIZE = "maxFolderSize";
  @SerializedName(SERIALIZED_NAME_MAX_FOLDER_SIZE)
  private Integer maxFolderSize;

  public ImapSettings() {
  }

  public ImapSettings autoExpunge(Boolean autoExpunge) {
    this.autoExpunge = autoExpunge;
    return this;
  }

  /**
   * If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted.
   * @return autoExpunge
   */
  @javax.annotation.Nullable
  public Boolean getAutoExpunge() {
    return autoExpunge;
  }

  public void setAutoExpunge(Boolean autoExpunge) {
    this.autoExpunge = autoExpunge;
  }


  public ImapSettings enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether IMAP is enabled for the account.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ImapSettings expungeBehavior(ExpungeBehaviorEnum expungeBehavior) {
    this.expungeBehavior = expungeBehavior;
    return this;
  }

  /**
   * The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.
   * @return expungeBehavior
   */
  @javax.annotation.Nullable
  public ExpungeBehaviorEnum getExpungeBehavior() {
    return expungeBehavior;
  }

  public void setExpungeBehavior(ExpungeBehaviorEnum expungeBehavior) {
    this.expungeBehavior = expungeBehavior;
  }


  public ImapSettings maxFolderSize(Integer maxFolderSize) {
    this.maxFolderSize = maxFolderSize;
    return this;
  }

  /**
   * An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.
   * @return maxFolderSize
   */
  @javax.annotation.Nullable
  public Integer getMaxFolderSize() {
    return maxFolderSize;
  }

  public void setMaxFolderSize(Integer maxFolderSize) {
    this.maxFolderSize = maxFolderSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImapSettings imapSettings = (ImapSettings) o;
    return Objects.equals(this.autoExpunge, imapSettings.autoExpunge) &&
        Objects.equals(this.enabled, imapSettings.enabled) &&
        Objects.equals(this.expungeBehavior, imapSettings.expungeBehavior) &&
        Objects.equals(this.maxFolderSize, imapSettings.maxFolderSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoExpunge, enabled, expungeBehavior, maxFolderSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImapSettings {\n");
    sb.append("    autoExpunge: ").append(toIndentedString(autoExpunge)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    expungeBehavior: ").append(toIndentedString(expungeBehavior)).append("\n");
    sb.append("    maxFolderSize: ").append(toIndentedString(maxFolderSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoExpunge");
    openapiFields.add("enabled");
    openapiFields.add("expungeBehavior");
    openapiFields.add("maxFolderSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImapSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImapSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImapSettings is not found in the empty JSON string", ImapSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImapSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImapSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expungeBehavior") != null && !jsonObj.get("expungeBehavior").isJsonNull()) && !jsonObj.get("expungeBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expungeBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expungeBehavior").toString()));
      }
      // validate the optional field `expungeBehavior`
      if (jsonObj.get("expungeBehavior") != null && !jsonObj.get("expungeBehavior").isJsonNull()) {
        ExpungeBehaviorEnum.validateJsonElement(jsonObj.get("expungeBehavior"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImapSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImapSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImapSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImapSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ImapSettings>() {
           @Override
           public void write(JsonWriter out, ImapSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImapSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImapSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImapSettings
   * @throws IOException if the JSON string is invalid with respect to ImapSettings
   */
  public static ImapSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImapSettings.class);
  }

  /**
   * Convert an instance of ImapSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

