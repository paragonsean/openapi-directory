/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Set up or update a new push notification watch on this user&#39;s mailbox.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:29.920230-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WatchRequest {
  /**
   * Filtering behavior of &#x60;labelIds list&#x60; specified. This field is deprecated because it caused incorrect behavior in some cases; use &#x60;label_filter_behavior&#x60; instead.
   */
  @JsonAdapter(LabelFilterActionEnum.Adapter.class)
  public enum LabelFilterActionEnum {
    INCLUDE("include"),
    
    EXCLUDE("exclude");

    private String value;

    LabelFilterActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LabelFilterActionEnum fromValue(String value) {
      for (LabelFilterActionEnum b : LabelFilterActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LabelFilterActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabelFilterActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LabelFilterActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LabelFilterActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LabelFilterActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LABEL_FILTER_ACTION = "labelFilterAction";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LABEL_FILTER_ACTION)
  private LabelFilterActionEnum labelFilterAction;

  /**
   * Filtering behavior of &#x60;labelIds list&#x60; specified. This field replaces &#x60;label_filter_action&#x60;; if set, &#x60;label_filter_action&#x60; is ignored.
   */
  @JsonAdapter(LabelFilterBehaviorEnum.Adapter.class)
  public enum LabelFilterBehaviorEnum {
    INCLUDE("include"),
    
    EXCLUDE("exclude");

    private String value;

    LabelFilterBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LabelFilterBehaviorEnum fromValue(String value) {
      for (LabelFilterBehaviorEnum b : LabelFilterBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LabelFilterBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabelFilterBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LabelFilterBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LabelFilterBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LabelFilterBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LABEL_FILTER_BEHAVIOR = "labelFilterBehavior";
  @SerializedName(SERIALIZED_NAME_LABEL_FILTER_BEHAVIOR)
  private LabelFilterBehaviorEnum labelFilterBehavior;

  public static final String SERIALIZED_NAME_LABEL_IDS = "labelIds";
  @SerializedName(SERIALIZED_NAME_LABEL_IDS)
  private List<String> labelIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOPIC_NAME = "topicName";
  @SerializedName(SERIALIZED_NAME_TOPIC_NAME)
  private String topicName;

  public WatchRequest() {
  }

  @Deprecated
  public WatchRequest labelFilterAction(LabelFilterActionEnum labelFilterAction) {
    this.labelFilterAction = labelFilterAction;
    return this;
  }

  /**
   * Filtering behavior of &#x60;labelIds list&#x60; specified. This field is deprecated because it caused incorrect behavior in some cases; use &#x60;label_filter_behavior&#x60; instead.
   * @return labelFilterAction
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public LabelFilterActionEnum getLabelFilterAction() {
    return labelFilterAction;
  }

  @Deprecated
  public void setLabelFilterAction(LabelFilterActionEnum labelFilterAction) {
    this.labelFilterAction = labelFilterAction;
  }


  public WatchRequest labelFilterBehavior(LabelFilterBehaviorEnum labelFilterBehavior) {
    this.labelFilterBehavior = labelFilterBehavior;
    return this;
  }

  /**
   * Filtering behavior of &#x60;labelIds list&#x60; specified. This field replaces &#x60;label_filter_action&#x60;; if set, &#x60;label_filter_action&#x60; is ignored.
   * @return labelFilterBehavior
   */
  @javax.annotation.Nullable
  public LabelFilterBehaviorEnum getLabelFilterBehavior() {
    return labelFilterBehavior;
  }

  public void setLabelFilterBehavior(LabelFilterBehaviorEnum labelFilterBehavior) {
    this.labelFilterBehavior = labelFilterBehavior;
  }


  public WatchRequest labelIds(List<String> labelIds) {
    this.labelIds = labelIds;
    return this;
  }

  public WatchRequest addLabelIdsItem(String labelIdsItem) {
    if (this.labelIds == null) {
      this.labelIds = new ArrayList<>();
    }
    this.labelIds.add(labelIdsItem);
    return this;
  }

  /**
   * List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.
   * @return labelIds
   */
  @javax.annotation.Nullable
  public List<String> getLabelIds() {
    return labelIds;
  }

  public void setLabelIds(List<String> labelIds) {
    this.labelIds = labelIds;
  }


  public WatchRequest topicName(String topicName) {
    this.topicName = topicName;
    return this;
  }

  /**
   * A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail \&quot;publish\&quot; permission on it. For example, \&quot;projects/my-project-identifier/topics/my-topic-name\&quot; (using the Cloud Pub/Sub \&quot;v1\&quot; topic naming format). Note that the \&quot;my-project-identifier\&quot; portion must exactly match your Google developer project id (the one executing this watch request).
   * @return topicName
   */
  @javax.annotation.Nullable
  public String getTopicName() {
    return topicName;
  }

  public void setTopicName(String topicName) {
    this.topicName = topicName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WatchRequest watchRequest = (WatchRequest) o;
    return Objects.equals(this.labelFilterAction, watchRequest.labelFilterAction) &&
        Objects.equals(this.labelFilterBehavior, watchRequest.labelFilterBehavior) &&
        Objects.equals(this.labelIds, watchRequest.labelIds) &&
        Objects.equals(this.topicName, watchRequest.topicName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labelFilterAction, labelFilterBehavior, labelIds, topicName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WatchRequest {\n");
    sb.append("    labelFilterAction: ").append(toIndentedString(labelFilterAction)).append("\n");
    sb.append("    labelFilterBehavior: ").append(toIndentedString(labelFilterBehavior)).append("\n");
    sb.append("    labelIds: ").append(toIndentedString(labelIds)).append("\n");
    sb.append("    topicName: ").append(toIndentedString(topicName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("labelFilterAction");
    openapiFields.add("labelFilterBehavior");
    openapiFields.add("labelIds");
    openapiFields.add("topicName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WatchRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WatchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WatchRequest is not found in the empty JSON string", WatchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WatchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WatchRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("labelFilterAction") != null && !jsonObj.get("labelFilterAction").isJsonNull()) && !jsonObj.get("labelFilterAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelFilterAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelFilterAction").toString()));
      }
      // validate the optional field `labelFilterAction`
      if (jsonObj.get("labelFilterAction") != null && !jsonObj.get("labelFilterAction").isJsonNull()) {
        LabelFilterActionEnum.validateJsonElement(jsonObj.get("labelFilterAction"));
      }
      if ((jsonObj.get("labelFilterBehavior") != null && !jsonObj.get("labelFilterBehavior").isJsonNull()) && !jsonObj.get("labelFilterBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelFilterBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelFilterBehavior").toString()));
      }
      // validate the optional field `labelFilterBehavior`
      if (jsonObj.get("labelFilterBehavior") != null && !jsonObj.get("labelFilterBehavior").isJsonNull()) {
        LabelFilterBehaviorEnum.validateJsonElement(jsonObj.get("labelFilterBehavior"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labelIds") != null && !jsonObj.get("labelIds").isJsonNull() && !jsonObj.get("labelIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelIds` to be an array in the JSON string but got `%s`", jsonObj.get("labelIds").toString()));
      }
      if ((jsonObj.get("topicName") != null && !jsonObj.get("topicName").isJsonNull()) && !jsonObj.get("topicName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topicName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topicName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WatchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WatchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WatchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WatchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WatchRequest>() {
           @Override
           public void write(JsonWriter out, WatchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WatchRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WatchRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WatchRequest
   * @throws IOException if the JSON string is invalid with respect to WatchRequest
   */
  public static WatchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WatchRequest.class);
  }

  /**
   * Convert an instance of WatchRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

