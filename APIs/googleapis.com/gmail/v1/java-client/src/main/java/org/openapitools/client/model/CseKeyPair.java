/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CsePrivateKeyMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A client-side encryption S/MIME key pair, which is comprised of a public key, its certificate chain, and metadata for its paired private key. Gmail uses the key pair to complete the following tasks: - Sign outgoing client-side encrypted messages. - Save and reopen drafts of client-side encrypted messages. - Save and reopen sent messages. - Decrypt incoming or archived S/MIME messages.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:29.920230-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CseKeyPair {
  public static final String SERIALIZED_NAME_DISABLE_TIME = "disableTime";
  @SerializedName(SERIALIZED_NAME_DISABLE_TIME)
  private String disableTime;

  /**
   * Output only. The current state of the key pair.
   */
  @JsonAdapter(EnablementStateEnum.Adapter.class)
  public enum EnablementStateEnum {
    STATE_UNSPECIFIED("stateUnspecified"),
    
    ENABLED("enabled"),
    
    DISABLED("disabled");

    private String value;

    EnablementStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnablementStateEnum fromValue(String value) {
      for (EnablementStateEnum b : EnablementStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnablementStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnablementStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnablementStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnablementStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnablementStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENABLEMENT_STATE = "enablementState";
  @SerializedName(SERIALIZED_NAME_ENABLEMENT_STATE)
  private EnablementStateEnum enablementState;

  public static final String SERIALIZED_NAME_KEY_PAIR_ID = "keyPairId";
  @SerializedName(SERIALIZED_NAME_KEY_PAIR_ID)
  private String keyPairId;

  public static final String SERIALIZED_NAME_PEM = "pem";
  @SerializedName(SERIALIZED_NAME_PEM)
  private String pem;

  public static final String SERIALIZED_NAME_PKCS7 = "pkcs7";
  @SerializedName(SERIALIZED_NAME_PKCS7)
  private String pkcs7;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_METADATA = "privateKeyMetadata";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_METADATA)
  private List<CsePrivateKeyMetadata> privateKeyMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECT_EMAIL_ADDRESSES = "subjectEmailAddresses";
  @SerializedName(SERIALIZED_NAME_SUBJECT_EMAIL_ADDRESSES)
  private List<String> subjectEmailAddresses = new ArrayList<>();

  public CseKeyPair() {
  }

  public CseKeyPair(
     String disableTime, 
     EnablementStateEnum enablementState, 
     String keyPairId, 
     String pem, 
     List<String> subjectEmailAddresses
  ) {
    this();
    this.disableTime = disableTime;
    this.enablementState = enablementState;
    this.keyPairId = keyPairId;
    this.pem = pem;
    this.subjectEmailAddresses = subjectEmailAddresses;
  }

  /**
   * Output only. If a key pair is set to &#x60;DISABLED&#x60;, the time that the key pair&#39;s state changed from &#x60;ENABLED&#x60; to &#x60;DISABLED&#x60;. This field is present only when the key pair is in state &#x60;DISABLED&#x60;.
   * @return disableTime
   */
  @javax.annotation.Nullable
  public String getDisableTime() {
    return disableTime;
  }



  /**
   * Output only. The current state of the key pair.
   * @return enablementState
   */
  @javax.annotation.Nullable
  public EnablementStateEnum getEnablementState() {
    return enablementState;
  }



  /**
   * Output only. The immutable ID for the client-side encryption S/MIME key pair.
   * @return keyPairId
   */
  @javax.annotation.Nullable
  public String getKeyPairId() {
    return keyPairId;
  }



  /**
   * Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.
   * @return pem
   */
  @javax.annotation.Nullable
  public String getPem() {
    return pem;
  }



  public CseKeyPair pkcs7(String pkcs7) {
    this.pkcs7 = pkcs7;
    return this;
  }

  /**
   * Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.
   * @return pkcs7
   */
  @javax.annotation.Nullable
  public String getPkcs7() {
    return pkcs7;
  }

  public void setPkcs7(String pkcs7) {
    this.pkcs7 = pkcs7;
  }


  public CseKeyPair privateKeyMetadata(List<CsePrivateKeyMetadata> privateKeyMetadata) {
    this.privateKeyMetadata = privateKeyMetadata;
    return this;
  }

  public CseKeyPair addPrivateKeyMetadataItem(CsePrivateKeyMetadata privateKeyMetadataItem) {
    if (this.privateKeyMetadata == null) {
      this.privateKeyMetadata = new ArrayList<>();
    }
    this.privateKeyMetadata.add(privateKeyMetadataItem);
    return this;
  }

  /**
   * Metadata for instances of this key pair&#39;s private key.
   * @return privateKeyMetadata
   */
  @javax.annotation.Nullable
  public List<CsePrivateKeyMetadata> getPrivateKeyMetadata() {
    return privateKeyMetadata;
  }

  public void setPrivateKeyMetadata(List<CsePrivateKeyMetadata> privateKeyMetadata) {
    this.privateKeyMetadata = privateKeyMetadata;
  }


  /**
   * Output only. The email address identities that are specified on the leaf certificate.
   * @return subjectEmailAddresses
   */
  @javax.annotation.Nullable
  public List<String> getSubjectEmailAddresses() {
    return subjectEmailAddresses;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CseKeyPair cseKeyPair = (CseKeyPair) o;
    return Objects.equals(this.disableTime, cseKeyPair.disableTime) &&
        Objects.equals(this.enablementState, cseKeyPair.enablementState) &&
        Objects.equals(this.keyPairId, cseKeyPair.keyPairId) &&
        Objects.equals(this.pem, cseKeyPair.pem) &&
        Objects.equals(this.pkcs7, cseKeyPair.pkcs7) &&
        Objects.equals(this.privateKeyMetadata, cseKeyPair.privateKeyMetadata) &&
        Objects.equals(this.subjectEmailAddresses, cseKeyPair.subjectEmailAddresses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disableTime, enablementState, keyPairId, pem, pkcs7, privateKeyMetadata, subjectEmailAddresses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CseKeyPair {\n");
    sb.append("    disableTime: ").append(toIndentedString(disableTime)).append("\n");
    sb.append("    enablementState: ").append(toIndentedString(enablementState)).append("\n");
    sb.append("    keyPairId: ").append(toIndentedString(keyPairId)).append("\n");
    sb.append("    pem: ").append(toIndentedString(pem)).append("\n");
    sb.append("    pkcs7: ").append(toIndentedString(pkcs7)).append("\n");
    sb.append("    privateKeyMetadata: ").append(toIndentedString(privateKeyMetadata)).append("\n");
    sb.append("    subjectEmailAddresses: ").append(toIndentedString(subjectEmailAddresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disableTime");
    openapiFields.add("enablementState");
    openapiFields.add("keyPairId");
    openapiFields.add("pem");
    openapiFields.add("pkcs7");
    openapiFields.add("privateKeyMetadata");
    openapiFields.add("subjectEmailAddresses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CseKeyPair
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CseKeyPair.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CseKeyPair is not found in the empty JSON string", CseKeyPair.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CseKeyPair.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CseKeyPair` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("disableTime") != null && !jsonObj.get("disableTime").isJsonNull()) && !jsonObj.get("disableTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disableTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disableTime").toString()));
      }
      if ((jsonObj.get("enablementState") != null && !jsonObj.get("enablementState").isJsonNull()) && !jsonObj.get("enablementState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enablementState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enablementState").toString()));
      }
      // validate the optional field `enablementState`
      if (jsonObj.get("enablementState") != null && !jsonObj.get("enablementState").isJsonNull()) {
        EnablementStateEnum.validateJsonElement(jsonObj.get("enablementState"));
      }
      if ((jsonObj.get("keyPairId") != null && !jsonObj.get("keyPairId").isJsonNull()) && !jsonObj.get("keyPairId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyPairId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyPairId").toString()));
      }
      if ((jsonObj.get("pem") != null && !jsonObj.get("pem").isJsonNull()) && !jsonObj.get("pem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pem").toString()));
      }
      if ((jsonObj.get("pkcs7") != null && !jsonObj.get("pkcs7").isJsonNull()) && !jsonObj.get("pkcs7").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pkcs7` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pkcs7").toString()));
      }
      if (jsonObj.get("privateKeyMetadata") != null && !jsonObj.get("privateKeyMetadata").isJsonNull()) {
        JsonArray jsonArrayprivateKeyMetadata = jsonObj.getAsJsonArray("privateKeyMetadata");
        if (jsonArrayprivateKeyMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("privateKeyMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `privateKeyMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("privateKeyMetadata").toString()));
          }

          // validate the optional field `privateKeyMetadata` (array)
          for (int i = 0; i < jsonArrayprivateKeyMetadata.size(); i++) {
            CsePrivateKeyMetadata.validateJsonElement(jsonArrayprivateKeyMetadata.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjectEmailAddresses") != null && !jsonObj.get("subjectEmailAddresses").isJsonNull() && !jsonObj.get("subjectEmailAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectEmailAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("subjectEmailAddresses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CseKeyPair.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CseKeyPair' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CseKeyPair> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CseKeyPair.class));

       return (TypeAdapter<T>) new TypeAdapter<CseKeyPair>() {
           @Override
           public void write(JsonWriter out, CseKeyPair value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CseKeyPair read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CseKeyPair given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CseKeyPair
   * @throws IOException if the JSON string is invalid with respect to CseKeyPair
   */
  public static CseKeyPair fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CseKeyPair.class);
  }

  /**
   * Convert an instance of CseKeyPair to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

