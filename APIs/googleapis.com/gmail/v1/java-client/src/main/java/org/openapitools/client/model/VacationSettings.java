/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Vacation auto-reply settings for an account. These settings correspond to the \&quot;Vacation responder\&quot; feature in the web interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:29.920230-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VacationSettings {
  public static final String SERIALIZED_NAME_ENABLE_AUTO_REPLY = "enableAutoReply";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUTO_REPLY)
  private Boolean enableAutoReply;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_RESPONSE_BODY_HTML = "responseBodyHtml";
  @SerializedName(SERIALIZED_NAME_RESPONSE_BODY_HTML)
  private String responseBodyHtml;

  public static final String SERIALIZED_NAME_RESPONSE_BODY_PLAIN_TEXT = "responseBodyPlainText";
  @SerializedName(SERIALIZED_NAME_RESPONSE_BODY_PLAIN_TEXT)
  private String responseBodyPlainText;

  public static final String SERIALIZED_NAME_RESPONSE_SUBJECT = "responseSubject";
  @SerializedName(SERIALIZED_NAME_RESPONSE_SUBJECT)
  private String responseSubject;

  public static final String SERIALIZED_NAME_RESTRICT_TO_CONTACTS = "restrictToContacts";
  @SerializedName(SERIALIZED_NAME_RESTRICT_TO_CONTACTS)
  private Boolean restrictToContacts;

  public static final String SERIALIZED_NAME_RESTRICT_TO_DOMAIN = "restrictToDomain";
  @SerializedName(SERIALIZED_NAME_RESTRICT_TO_DOMAIN)
  private Boolean restrictToDomain;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public VacationSettings() {
  }

  public VacationSettings enableAutoReply(Boolean enableAutoReply) {
    this.enableAutoReply = enableAutoReply;
    return this;
  }

  /**
   * Flag that controls whether Gmail automatically replies to messages.
   * @return enableAutoReply
   */
  @javax.annotation.Nullable
  public Boolean getEnableAutoReply() {
    return enableAutoReply;
  }

  public void setEnableAutoReply(Boolean enableAutoReply) {
    this.enableAutoReply = enableAutoReply;
  }


  public VacationSettings endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both &#x60;startTime&#x60; and &#x60;endTime&#x60; are specified, &#x60;startTime&#x60; must precede &#x60;endTime&#x60;.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public VacationSettings responseBodyHtml(String responseBodyHtml) {
    this.responseBodyHtml = responseBodyHtml;
    return this;
  }

  /**
   * Response body in HTML format. Gmail will sanitize the HTML before storing it. If both &#x60;response_body_plain_text&#x60; and &#x60;response_body_html&#x60; are specified, &#x60;response_body_html&#x60; will be used.
   * @return responseBodyHtml
   */
  @javax.annotation.Nullable
  public String getResponseBodyHtml() {
    return responseBodyHtml;
  }

  public void setResponseBodyHtml(String responseBodyHtml) {
    this.responseBodyHtml = responseBodyHtml;
  }


  public VacationSettings responseBodyPlainText(String responseBodyPlainText) {
    this.responseBodyPlainText = responseBodyPlainText;
    return this;
  }

  /**
   * Response body in plain text format. If both &#x60;response_body_plain_text&#x60; and &#x60;response_body_html&#x60; are specified, &#x60;response_body_html&#x60; will be used.
   * @return responseBodyPlainText
   */
  @javax.annotation.Nullable
  public String getResponseBodyPlainText() {
    return responseBodyPlainText;
  }

  public void setResponseBodyPlainText(String responseBodyPlainText) {
    this.responseBodyPlainText = responseBodyPlainText;
  }


  public VacationSettings responseSubject(String responseSubject) {
    this.responseSubject = responseSubject;
    return this;
  }

  /**
   * Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty.
   * @return responseSubject
   */
  @javax.annotation.Nullable
  public String getResponseSubject() {
    return responseSubject;
  }

  public void setResponseSubject(String responseSubject) {
    this.responseSubject = responseSubject;
  }


  public VacationSettings restrictToContacts(Boolean restrictToContacts) {
    this.restrictToContacts = restrictToContacts;
    return this;
  }

  /**
   * Flag that determines whether responses are sent to recipients who are not in the user&#39;s list of contacts.
   * @return restrictToContacts
   */
  @javax.annotation.Nullable
  public Boolean getRestrictToContacts() {
    return restrictToContacts;
  }

  public void setRestrictToContacts(Boolean restrictToContacts) {
    this.restrictToContacts = restrictToContacts;
  }


  public VacationSettings restrictToDomain(Boolean restrictToDomain) {
    this.restrictToDomain = restrictToDomain;
    return this;
  }

  /**
   * Flag that determines whether responses are sent to recipients who are outside of the user&#39;s domain. This feature is only available for Google Workspace users.
   * @return restrictToDomain
   */
  @javax.annotation.Nullable
  public Boolean getRestrictToDomain() {
    return restrictToDomain;
  }

  public void setRestrictToDomain(Boolean restrictToDomain) {
    this.restrictToDomain = restrictToDomain;
  }


  public VacationSettings startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both &#x60;startTime&#x60; and &#x60;endTime&#x60; are specified, &#x60;startTime&#x60; must precede &#x60;endTime&#x60;.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VacationSettings vacationSettings = (VacationSettings) o;
    return Objects.equals(this.enableAutoReply, vacationSettings.enableAutoReply) &&
        Objects.equals(this.endTime, vacationSettings.endTime) &&
        Objects.equals(this.responseBodyHtml, vacationSettings.responseBodyHtml) &&
        Objects.equals(this.responseBodyPlainText, vacationSettings.responseBodyPlainText) &&
        Objects.equals(this.responseSubject, vacationSettings.responseSubject) &&
        Objects.equals(this.restrictToContacts, vacationSettings.restrictToContacts) &&
        Objects.equals(this.restrictToDomain, vacationSettings.restrictToDomain) &&
        Objects.equals(this.startTime, vacationSettings.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableAutoReply, endTime, responseBodyHtml, responseBodyPlainText, responseSubject, restrictToContacts, restrictToDomain, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VacationSettings {\n");
    sb.append("    enableAutoReply: ").append(toIndentedString(enableAutoReply)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    responseBodyHtml: ").append(toIndentedString(responseBodyHtml)).append("\n");
    sb.append("    responseBodyPlainText: ").append(toIndentedString(responseBodyPlainText)).append("\n");
    sb.append("    responseSubject: ").append(toIndentedString(responseSubject)).append("\n");
    sb.append("    restrictToContacts: ").append(toIndentedString(restrictToContacts)).append("\n");
    sb.append("    restrictToDomain: ").append(toIndentedString(restrictToDomain)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableAutoReply");
    openapiFields.add("endTime");
    openapiFields.add("responseBodyHtml");
    openapiFields.add("responseBodyPlainText");
    openapiFields.add("responseSubject");
    openapiFields.add("restrictToContacts");
    openapiFields.add("restrictToDomain");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VacationSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VacationSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VacationSettings is not found in the empty JSON string", VacationSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VacationSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VacationSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("responseBodyHtml") != null && !jsonObj.get("responseBodyHtml").isJsonNull()) && !jsonObj.get("responseBodyHtml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseBodyHtml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseBodyHtml").toString()));
      }
      if ((jsonObj.get("responseBodyPlainText") != null && !jsonObj.get("responseBodyPlainText").isJsonNull()) && !jsonObj.get("responseBodyPlainText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseBodyPlainText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseBodyPlainText").toString()));
      }
      if ((jsonObj.get("responseSubject") != null && !jsonObj.get("responseSubject").isJsonNull()) && !jsonObj.get("responseSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseSubject").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VacationSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VacationSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VacationSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VacationSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<VacationSettings>() {
           @Override
           public void write(JsonWriter out, VacationSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VacationSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VacationSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VacationSettings
   * @throws IOException if the JSON string is invalid with respect to VacationSettings
   */
  public static VacationSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VacationSettings.class);
  }

  /**
   * Convert an instance of VacationSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

