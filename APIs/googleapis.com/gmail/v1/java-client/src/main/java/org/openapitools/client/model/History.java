/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HistoryLabelAdded;
import org.openapitools.client.model.HistoryLabelRemoved;
import org.openapitools.client.model.HistoryMessageAdded;
import org.openapitools.client.model.HistoryMessageDeleted;
import org.openapitools.client.model.Message;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A record of a change to the user&#39;s mailbox. Each history change may affect multiple messages in multiple ways.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:29.920230-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class History {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABELS_ADDED = "labelsAdded";
  @SerializedName(SERIALIZED_NAME_LABELS_ADDED)
  private List<HistoryLabelAdded> labelsAdded = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS_REMOVED = "labelsRemoved";
  @SerializedName(SERIALIZED_NAME_LABELS_REMOVED)
  private List<HistoryLabelRemoved> labelsRemoved = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<Message> messages = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGES_ADDED = "messagesAdded";
  @SerializedName(SERIALIZED_NAME_MESSAGES_ADDED)
  private List<HistoryMessageAdded> messagesAdded = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGES_DELETED = "messagesDeleted";
  @SerializedName(SERIALIZED_NAME_MESSAGES_DELETED)
  private List<HistoryMessageDeleted> messagesDeleted = new ArrayList<>();

  public History() {
  }

  public History id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The mailbox sequence ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public History labelsAdded(List<HistoryLabelAdded> labelsAdded) {
    this.labelsAdded = labelsAdded;
    return this;
  }

  public History addLabelsAddedItem(HistoryLabelAdded labelsAddedItem) {
    if (this.labelsAdded == null) {
      this.labelsAdded = new ArrayList<>();
    }
    this.labelsAdded.add(labelsAddedItem);
    return this;
  }

  /**
   * Labels added to messages in this history record.
   * @return labelsAdded
   */
  @javax.annotation.Nullable
  public List<HistoryLabelAdded> getLabelsAdded() {
    return labelsAdded;
  }

  public void setLabelsAdded(List<HistoryLabelAdded> labelsAdded) {
    this.labelsAdded = labelsAdded;
  }


  public History labelsRemoved(List<HistoryLabelRemoved> labelsRemoved) {
    this.labelsRemoved = labelsRemoved;
    return this;
  }

  public History addLabelsRemovedItem(HistoryLabelRemoved labelsRemovedItem) {
    if (this.labelsRemoved == null) {
      this.labelsRemoved = new ArrayList<>();
    }
    this.labelsRemoved.add(labelsRemovedItem);
    return this;
  }

  /**
   * Labels removed from messages in this history record.
   * @return labelsRemoved
   */
  @javax.annotation.Nullable
  public List<HistoryLabelRemoved> getLabelsRemoved() {
    return labelsRemoved;
  }

  public void setLabelsRemoved(List<HistoryLabelRemoved> labelsRemoved) {
    this.labelsRemoved = labelsRemoved;
  }


  public History messages(List<Message> messages) {
    this.messages = messages;
    return this;
  }

  public History addMessagesItem(Message messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * List of messages changed in this history record. The fields for specific change types, such as &#x60;messagesAdded&#x60; may duplicate messages in this field. We recommend using the specific change-type fields instead of this.
   * @return messages
   */
  @javax.annotation.Nullable
  public List<Message> getMessages() {
    return messages;
  }

  public void setMessages(List<Message> messages) {
    this.messages = messages;
  }


  public History messagesAdded(List<HistoryMessageAdded> messagesAdded) {
    this.messagesAdded = messagesAdded;
    return this;
  }

  public History addMessagesAddedItem(HistoryMessageAdded messagesAddedItem) {
    if (this.messagesAdded == null) {
      this.messagesAdded = new ArrayList<>();
    }
    this.messagesAdded.add(messagesAddedItem);
    return this;
  }

  /**
   * Messages added to the mailbox in this history record.
   * @return messagesAdded
   */
  @javax.annotation.Nullable
  public List<HistoryMessageAdded> getMessagesAdded() {
    return messagesAdded;
  }

  public void setMessagesAdded(List<HistoryMessageAdded> messagesAdded) {
    this.messagesAdded = messagesAdded;
  }


  public History messagesDeleted(List<HistoryMessageDeleted> messagesDeleted) {
    this.messagesDeleted = messagesDeleted;
    return this;
  }

  public History addMessagesDeletedItem(HistoryMessageDeleted messagesDeletedItem) {
    if (this.messagesDeleted == null) {
      this.messagesDeleted = new ArrayList<>();
    }
    this.messagesDeleted.add(messagesDeletedItem);
    return this;
  }

  /**
   * Messages deleted (not Trashed) from the mailbox in this history record.
   * @return messagesDeleted
   */
  @javax.annotation.Nullable
  public List<HistoryMessageDeleted> getMessagesDeleted() {
    return messagesDeleted;
  }

  public void setMessagesDeleted(List<HistoryMessageDeleted> messagesDeleted) {
    this.messagesDeleted = messagesDeleted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    History history = (History) o;
    return Objects.equals(this.id, history.id) &&
        Objects.equals(this.labelsAdded, history.labelsAdded) &&
        Objects.equals(this.labelsRemoved, history.labelsRemoved) &&
        Objects.equals(this.messages, history.messages) &&
        Objects.equals(this.messagesAdded, history.messagesAdded) &&
        Objects.equals(this.messagesDeleted, history.messagesDeleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, labelsAdded, labelsRemoved, messages, messagesAdded, messagesDeleted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class History {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labelsAdded: ").append(toIndentedString(labelsAdded)).append("\n");
    sb.append("    labelsRemoved: ").append(toIndentedString(labelsRemoved)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    messagesAdded: ").append(toIndentedString(messagesAdded)).append("\n");
    sb.append("    messagesDeleted: ").append(toIndentedString(messagesDeleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("labelsAdded");
    openapiFields.add("labelsRemoved");
    openapiFields.add("messages");
    openapiFields.add("messagesAdded");
    openapiFields.add("messagesDeleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to History
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!History.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in History is not found in the empty JSON string", History.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!History.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `History` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("labelsAdded") != null && !jsonObj.get("labelsAdded").isJsonNull()) {
        JsonArray jsonArraylabelsAdded = jsonObj.getAsJsonArray("labelsAdded");
        if (jsonArraylabelsAdded != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labelsAdded").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labelsAdded` to be an array in the JSON string but got `%s`", jsonObj.get("labelsAdded").toString()));
          }

          // validate the optional field `labelsAdded` (array)
          for (int i = 0; i < jsonArraylabelsAdded.size(); i++) {
            HistoryLabelAdded.validateJsonElement(jsonArraylabelsAdded.get(i));
          };
        }
      }
      if (jsonObj.get("labelsRemoved") != null && !jsonObj.get("labelsRemoved").isJsonNull()) {
        JsonArray jsonArraylabelsRemoved = jsonObj.getAsJsonArray("labelsRemoved");
        if (jsonArraylabelsRemoved != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labelsRemoved").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labelsRemoved` to be an array in the JSON string but got `%s`", jsonObj.get("labelsRemoved").toString()));
          }

          // validate the optional field `labelsRemoved` (array)
          for (int i = 0; i < jsonArraylabelsRemoved.size(); i++) {
            HistoryLabelRemoved.validateJsonElement(jsonArraylabelsRemoved.get(i));
          };
        }
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            Message.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      if (jsonObj.get("messagesAdded") != null && !jsonObj.get("messagesAdded").isJsonNull()) {
        JsonArray jsonArraymessagesAdded = jsonObj.getAsJsonArray("messagesAdded");
        if (jsonArraymessagesAdded != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messagesAdded").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messagesAdded` to be an array in the JSON string but got `%s`", jsonObj.get("messagesAdded").toString()));
          }

          // validate the optional field `messagesAdded` (array)
          for (int i = 0; i < jsonArraymessagesAdded.size(); i++) {
            HistoryMessageAdded.validateJsonElement(jsonArraymessagesAdded.get(i));
          };
        }
      }
      if (jsonObj.get("messagesDeleted") != null && !jsonObj.get("messagesDeleted").isJsonNull()) {
        JsonArray jsonArraymessagesDeleted = jsonObj.getAsJsonArray("messagesDeleted");
        if (jsonArraymessagesDeleted != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messagesDeleted").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messagesDeleted` to be an array in the JSON string but got `%s`", jsonObj.get("messagesDeleted").toString()));
          }

          // validate the optional field `messagesDeleted` (array)
          for (int i = 0; i < jsonArraymessagesDeleted.size(); i++) {
            HistoryMessageDeleted.validateJsonElement(jsonArraymessagesDeleted.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!History.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'History' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<History> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(History.class));

       return (TypeAdapter<T>) new TypeAdapter<History>() {
           @Override
           public void write(JsonWriter out, History value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public History read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of History given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of History
   * @throws IOException if the JSON string is invalid with respect to History
   */
  public static History fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, History.class);
  }

  /**
   * Convert an instance of History to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

