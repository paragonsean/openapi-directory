/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An S/MIME email config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:29.920230-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SmimeInfo {
  public static final String SERIALIZED_NAME_ENCRYPTED_KEY_PASSWORD = "encryptedKeyPassword";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_KEY_PASSWORD)
  private String encryptedKeyPassword;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private String expiration;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_ISSUER_CN = "issuerCn";
  @SerializedName(SERIALIZED_NAME_ISSUER_CN)
  private String issuerCn;

  public static final String SERIALIZED_NAME_PEM = "pem";
  @SerializedName(SERIALIZED_NAME_PEM)
  private String pem;

  public static final String SERIALIZED_NAME_PKCS12 = "pkcs12";
  @SerializedName(SERIALIZED_NAME_PKCS12)
  private byte[] pkcs12;

  public SmimeInfo() {
  }

  public SmimeInfo encryptedKeyPassword(String encryptedKeyPassword) {
    this.encryptedKeyPassword = encryptedKeyPassword;
    return this;
  }

  /**
   * Encrypted key password, when key is encrypted.
   * @return encryptedKeyPassword
   */
  @javax.annotation.Nullable
  public String getEncryptedKeyPassword() {
    return encryptedKeyPassword;
  }

  public void setEncryptedKeyPassword(String encryptedKeyPassword) {
    this.encryptedKeyPassword = encryptedKeyPassword;
  }


  public SmimeInfo expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * When the certificate expires (in milliseconds since epoch).
   * @return expiration
   */
  @javax.annotation.Nullable
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }


  public SmimeInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The immutable ID for the SmimeInfo.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SmimeInfo isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Whether this SmimeInfo is the default one for this user&#39;s send-as address.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public SmimeInfo issuerCn(String issuerCn) {
    this.issuerCn = issuerCn;
    return this;
  }

  /**
   * The S/MIME certificate issuer&#39;s common name.
   * @return issuerCn
   */
  @javax.annotation.Nullable
  public String getIssuerCn() {
    return issuerCn;
  }

  public void setIssuerCn(String issuerCn) {
    this.issuerCn = issuerCn;
  }


  public SmimeInfo pem(String pem) {
    this.pem = pem;
    return this;
  }

  /**
   * PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key).
   * @return pem
   */
  @javax.annotation.Nullable
  public String getPem() {
    return pem;
  }

  public void setPem(String pem) {
    this.pem = pem;
  }


  public SmimeInfo pkcs12(byte[] pkcs12) {
    this.pkcs12 = pkcs12;
    return this;
  }

  /**
   * PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.
   * @return pkcs12
   */
  @javax.annotation.Nullable
  public byte[] getPkcs12() {
    return pkcs12;
  }

  public void setPkcs12(byte[] pkcs12) {
    this.pkcs12 = pkcs12;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmimeInfo smimeInfo = (SmimeInfo) o;
    return Objects.equals(this.encryptedKeyPassword, smimeInfo.encryptedKeyPassword) &&
        Objects.equals(this.expiration, smimeInfo.expiration) &&
        Objects.equals(this.id, smimeInfo.id) &&
        Objects.equals(this.isDefault, smimeInfo.isDefault) &&
        Objects.equals(this.issuerCn, smimeInfo.issuerCn) &&
        Objects.equals(this.pem, smimeInfo.pem) &&
        Arrays.equals(this.pkcs12, smimeInfo.pkcs12);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptedKeyPassword, expiration, id, isDefault, issuerCn, pem, Arrays.hashCode(pkcs12));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmimeInfo {\n");
    sb.append("    encryptedKeyPassword: ").append(toIndentedString(encryptedKeyPassword)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    issuerCn: ").append(toIndentedString(issuerCn)).append("\n");
    sb.append("    pem: ").append(toIndentedString(pem)).append("\n");
    sb.append("    pkcs12: ").append(toIndentedString(pkcs12)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptedKeyPassword");
    openapiFields.add("expiration");
    openapiFields.add("id");
    openapiFields.add("isDefault");
    openapiFields.add("issuerCn");
    openapiFields.add("pem");
    openapiFields.add("pkcs12");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SmimeInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SmimeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SmimeInfo is not found in the empty JSON string", SmimeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SmimeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SmimeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("encryptedKeyPassword") != null && !jsonObj.get("encryptedKeyPassword").isJsonNull()) && !jsonObj.get("encryptedKeyPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptedKeyPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptedKeyPassword").toString()));
      }
      if ((jsonObj.get("expiration") != null && !jsonObj.get("expiration").isJsonNull()) && !jsonObj.get("expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("issuerCn") != null && !jsonObj.get("issuerCn").isJsonNull()) && !jsonObj.get("issuerCn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerCn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerCn").toString()));
      }
      if ((jsonObj.get("pem") != null && !jsonObj.get("pem").isJsonNull()) && !jsonObj.get("pem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pem").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SmimeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SmimeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SmimeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SmimeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SmimeInfo>() {
           @Override
           public void write(JsonWriter out, SmimeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SmimeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SmimeInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SmimeInfo
   * @throws IOException if the JSON string is invalid with respect to SmimeInfo
   */
  public static SmimeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SmimeInfo.class);
  }

  /**
   * Convert an instance of SmimeInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

