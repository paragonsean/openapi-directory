/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MessagePartBody;
import org.openapitools.client.model.MessagePartHeader;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single MIME message part.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:29.920230-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessagePart {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private MessagePartBody body;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<MessagePartHeader> headers = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_PART_ID = "partId";
  @SerializedName(SERIALIZED_NAME_PART_ID)
  private String partId;

  public static final String SERIALIZED_NAME_PARTS = "parts";
  @SerializedName(SERIALIZED_NAME_PARTS)
  private List<MessagePart> parts = new ArrayList<>();

  public MessagePart() {
  }

  public MessagePart body(MessagePartBody body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public MessagePartBody getBody() {
    return body;
  }

  public void setBody(MessagePartBody body) {
    this.body = body;
  }


  public MessagePart filename(String filename) {
    this.filename = filename;
    return this;
  }

  /**
   * The filename of the attachment. Only present if this message part represents an attachment.
   * @return filename
   */
  @javax.annotation.Nullable
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public MessagePart headers(List<MessagePartHeader> headers) {
    this.headers = headers;
    return this;
  }

  public MessagePart addHeadersItem(MessagePartHeader headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

  /**
   * List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as &#x60;To&#x60;, &#x60;From&#x60;, and &#x60;Subject&#x60;.
   * @return headers
   */
  @javax.annotation.Nullable
  public List<MessagePartHeader> getHeaders() {
    return headers;
  }

  public void setHeaders(List<MessagePartHeader> headers) {
    this.headers = headers;
  }


  public MessagePart mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * The MIME type of the message part.
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public MessagePart partId(String partId) {
    this.partId = partId;
    return this;
  }

  /**
   * The immutable ID of the message part.
   * @return partId
   */
  @javax.annotation.Nullable
  public String getPartId() {
    return partId;
  }

  public void setPartId(String partId) {
    this.partId = partId;
  }


  public MessagePart parts(List<MessagePart> parts) {
    this.parts = parts;
    return this;
  }

  public MessagePart addPartsItem(MessagePart partsItem) {
    if (this.parts == null) {
      this.parts = new ArrayList<>();
    }
    this.parts.add(partsItem);
    return this;
  }

  /**
   * The child MIME message parts of this part. This only applies to container MIME message parts, for example &#x60;multipart/_*&#x60;. For non- container MIME message part types, such as &#x60;text/plain&#x60;, this field is empty. For more information, see RFC 1521.
   * @return parts
   */
  @javax.annotation.Nullable
  public List<MessagePart> getParts() {
    return parts;
  }

  public void setParts(List<MessagePart> parts) {
    this.parts = parts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagePart messagePart = (MessagePart) o;
    return Objects.equals(this.body, messagePart.body) &&
        Objects.equals(this.filename, messagePart.filename) &&
        Objects.equals(this.headers, messagePart.headers) &&
        Objects.equals(this.mimeType, messagePart.mimeType) &&
        Objects.equals(this.partId, messagePart.partId) &&
        Objects.equals(this.parts, messagePart.parts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, filename, headers, mimeType, partId, parts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagePart {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    partId: ").append(toIndentedString(partId)).append("\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("filename");
    openapiFields.add("headers");
    openapiFields.add("mimeType");
    openapiFields.add("partId");
    openapiFields.add("parts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessagePart
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessagePart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessagePart is not found in the empty JSON string", MessagePart.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessagePart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessagePart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `body`
      if (jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) {
        MessagePartBody.validateJsonElement(jsonObj.get("body"));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) {
        JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("headers");
        if (jsonArrayheaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `headers` to be an array in the JSON string but got `%s`", jsonObj.get("headers").toString()));
          }

          // validate the optional field `headers` (array)
          for (int i = 0; i < jsonArrayheaders.size(); i++) {
            MessagePartHeader.validateJsonElement(jsonArrayheaders.get(i));
          };
        }
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if ((jsonObj.get("partId") != null && !jsonObj.get("partId").isJsonNull()) && !jsonObj.get("partId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partId").toString()));
      }
      if (jsonObj.get("parts") != null && !jsonObj.get("parts").isJsonNull()) {
        JsonArray jsonArrayparts = jsonObj.getAsJsonArray("parts");
        if (jsonArrayparts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parts` to be an array in the JSON string but got `%s`", jsonObj.get("parts").toString()));
          }

          // validate the optional field `parts` (array)
          for (int i = 0; i < jsonArrayparts.size(); i++) {
            MessagePart.validateJsonElement(jsonArrayparts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessagePart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessagePart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessagePart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessagePart.class));

       return (TypeAdapter<T>) new TypeAdapter<MessagePart>() {
           @Override
           public void write(JsonWriter out, MessagePart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessagePart read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessagePart given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessagePart
   * @throws IOException if the JSON string is invalid with respect to MessagePart
   */
  public static MessagePart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessagePart.class);
  }

  /**
   * Convert an instance of MessagePart to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

