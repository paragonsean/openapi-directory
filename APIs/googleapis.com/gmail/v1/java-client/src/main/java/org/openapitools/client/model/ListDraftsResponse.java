/*
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Draft;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListDraftsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:29.920230-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListDraftsResponse {
  public static final String SERIALIZED_NAME_DRAFTS = "drafts";
  @SerializedName(SERIALIZED_NAME_DRAFTS)
  private List<Draft> drafts = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_RESULT_SIZE_ESTIMATE = "resultSizeEstimate";
  @SerializedName(SERIALIZED_NAME_RESULT_SIZE_ESTIMATE)
  private Integer resultSizeEstimate;

  public ListDraftsResponse() {
  }

  public ListDraftsResponse drafts(List<Draft> drafts) {
    this.drafts = drafts;
    return this;
  }

  public ListDraftsResponse addDraftsItem(Draft draftsItem) {
    if (this.drafts == null) {
      this.drafts = new ArrayList<>();
    }
    this.drafts.add(draftsItem);
    return this;
  }

  /**
   * List of drafts. Note that the &#x60;Message&#x60; property in each &#x60;Draft&#x60; resource only contains an &#x60;id&#x60; and a &#x60;threadId&#x60;. The messages.get method can fetch additional message details.
   * @return drafts
   */
  @javax.annotation.Nullable
  public List<Draft> getDrafts() {
    return drafts;
  }

  public void setDrafts(List<Draft> drafts) {
    this.drafts = drafts;
  }


  public ListDraftsResponse nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * Token to retrieve the next page of results in the list.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public ListDraftsResponse resultSizeEstimate(Integer resultSizeEstimate) {
    this.resultSizeEstimate = resultSizeEstimate;
    return this;
  }

  /**
   * Estimated total number of results.
   * @return resultSizeEstimate
   */
  @javax.annotation.Nullable
  public Integer getResultSizeEstimate() {
    return resultSizeEstimate;
  }

  public void setResultSizeEstimate(Integer resultSizeEstimate) {
    this.resultSizeEstimate = resultSizeEstimate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListDraftsResponse listDraftsResponse = (ListDraftsResponse) o;
    return Objects.equals(this.drafts, listDraftsResponse.drafts) &&
        Objects.equals(this.nextPageToken, listDraftsResponse.nextPageToken) &&
        Objects.equals(this.resultSizeEstimate, listDraftsResponse.resultSizeEstimate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(drafts, nextPageToken, resultSizeEstimate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListDraftsResponse {\n");
    sb.append("    drafts: ").append(toIndentedString(drafts)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    resultSizeEstimate: ").append(toIndentedString(resultSizeEstimate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("drafts");
    openapiFields.add("nextPageToken");
    openapiFields.add("resultSizeEstimate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListDraftsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListDraftsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListDraftsResponse is not found in the empty JSON string", ListDraftsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListDraftsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListDraftsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("drafts") != null && !jsonObj.get("drafts").isJsonNull()) {
        JsonArray jsonArraydrafts = jsonObj.getAsJsonArray("drafts");
        if (jsonArraydrafts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("drafts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `drafts` to be an array in the JSON string but got `%s`", jsonObj.get("drafts").toString()));
          }

          // validate the optional field `drafts` (array)
          for (int i = 0; i < jsonArraydrafts.size(); i++) {
            Draft.validateJsonElement(jsonArraydrafts.get(i));
          };
        }
      }
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListDraftsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListDraftsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListDraftsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListDraftsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListDraftsResponse>() {
           @Override
           public void write(JsonWriter out, ListDraftsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListDraftsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListDraftsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListDraftsResponse
   * @throws IOException if the JSON string is invalid with respect to ListDraftsResponse
   */
  public static ListDraftsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListDraftsResponse.class);
  }

  /**
   * Convert an instance of ListDraftsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

