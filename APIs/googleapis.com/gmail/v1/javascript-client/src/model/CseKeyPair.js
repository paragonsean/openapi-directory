/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CsePrivateKeyMetadata from './CsePrivateKeyMetadata';

/**
 * The CseKeyPair model module.
 * @module model/CseKeyPair
 * @version v1
 */
class CseKeyPair {
    /**
     * Constructs a new <code>CseKeyPair</code>.
     * A client-side encryption S/MIME key pair, which is comprised of a public key, its certificate chain, and metadata for its paired private key. Gmail uses the key pair to complete the following tasks: - Sign outgoing client-side encrypted messages. - Save and reopen drafts of client-side encrypted messages. - Save and reopen sent messages. - Decrypt incoming or archived S/MIME messages.
     * @alias module:model/CseKeyPair
     */
    constructor() { 
        
        CseKeyPair.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CseKeyPair</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CseKeyPair} obj Optional instance to populate.
     * @return {module:model/CseKeyPair} The populated <code>CseKeyPair</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CseKeyPair();

            if (data.hasOwnProperty('disableTime')) {
                obj['disableTime'] = ApiClient.convertToType(data['disableTime'], 'String');
            }
            if (data.hasOwnProperty('enablementState')) {
                obj['enablementState'] = ApiClient.convertToType(data['enablementState'], 'String');
            }
            if (data.hasOwnProperty('keyPairId')) {
                obj['keyPairId'] = ApiClient.convertToType(data['keyPairId'], 'String');
            }
            if (data.hasOwnProperty('pem')) {
                obj['pem'] = ApiClient.convertToType(data['pem'], 'String');
            }
            if (data.hasOwnProperty('pkcs7')) {
                obj['pkcs7'] = ApiClient.convertToType(data['pkcs7'], 'String');
            }
            if (data.hasOwnProperty('privateKeyMetadata')) {
                obj['privateKeyMetadata'] = ApiClient.convertToType(data['privateKeyMetadata'], [CsePrivateKeyMetadata]);
            }
            if (data.hasOwnProperty('subjectEmailAddresses')) {
                obj['subjectEmailAddresses'] = ApiClient.convertToType(data['subjectEmailAddresses'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CseKeyPair</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CseKeyPair</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['disableTime'] && !(typeof data['disableTime'] === 'string' || data['disableTime'] instanceof String)) {
            throw new Error("Expected the field `disableTime` to be a primitive type in the JSON string but got " + data['disableTime']);
        }
        // ensure the json data is a string
        if (data['enablementState'] && !(typeof data['enablementState'] === 'string' || data['enablementState'] instanceof String)) {
            throw new Error("Expected the field `enablementState` to be a primitive type in the JSON string but got " + data['enablementState']);
        }
        // ensure the json data is a string
        if (data['keyPairId'] && !(typeof data['keyPairId'] === 'string' || data['keyPairId'] instanceof String)) {
            throw new Error("Expected the field `keyPairId` to be a primitive type in the JSON string but got " + data['keyPairId']);
        }
        // ensure the json data is a string
        if (data['pem'] && !(typeof data['pem'] === 'string' || data['pem'] instanceof String)) {
            throw new Error("Expected the field `pem` to be a primitive type in the JSON string but got " + data['pem']);
        }
        // ensure the json data is a string
        if (data['pkcs7'] && !(typeof data['pkcs7'] === 'string' || data['pkcs7'] instanceof String)) {
            throw new Error("Expected the field `pkcs7` to be a primitive type in the JSON string but got " + data['pkcs7']);
        }
        if (data['privateKeyMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['privateKeyMetadata'])) {
                throw new Error("Expected the field `privateKeyMetadata` to be an array in the JSON data but got " + data['privateKeyMetadata']);
            }
            // validate the optional field `privateKeyMetadata` (array)
            for (const item of data['privateKeyMetadata']) {
                CsePrivateKeyMetadata.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subjectEmailAddresses'])) {
            throw new Error("Expected the field `subjectEmailAddresses` to be an array in the JSON data but got " + data['subjectEmailAddresses']);
        }

        return true;
    }


}



/**
 * Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.
 * @member {String} disableTime
 */
CseKeyPair.prototype['disableTime'] = undefined;

/**
 * Output only. The current state of the key pair.
 * @member {module:model/CseKeyPair.EnablementStateEnum} enablementState
 */
CseKeyPair.prototype['enablementState'] = undefined;

/**
 * Output only. The immutable ID for the client-side encryption S/MIME key pair.
 * @member {String} keyPairId
 */
CseKeyPair.prototype['keyPairId'] = undefined;

/**
 * Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.
 * @member {String} pem
 */
CseKeyPair.prototype['pem'] = undefined;

/**
 * Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.
 * @member {String} pkcs7
 */
CseKeyPair.prototype['pkcs7'] = undefined;

/**
 * Metadata for instances of this key pair's private key.
 * @member {Array.<module:model/CsePrivateKeyMetadata>} privateKeyMetadata
 */
CseKeyPair.prototype['privateKeyMetadata'] = undefined;

/**
 * Output only. The email address identities that are specified on the leaf certificate.
 * @member {Array.<String>} subjectEmailAddresses
 */
CseKeyPair.prototype['subjectEmailAddresses'] = undefined;





/**
 * Allowed values for the <code>enablementState</code> property.
 * @enum {String}
 * @readonly
 */
CseKeyPair['EnablementStateEnum'] = {

    /**
     * value: "stateUnspecified"
     * @const
     */
    "stateUnspecified": "stateUnspecified",

    /**
     * value: "enabled"
     * @const
     */
    "enabled": "enabled",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled"
};



export default CseKeyPair;

