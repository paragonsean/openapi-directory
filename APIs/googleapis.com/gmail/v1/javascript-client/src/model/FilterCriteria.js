/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FilterCriteria model module.
 * @module model/FilterCriteria
 * @version v1
 */
class FilterCriteria {
    /**
     * Constructs a new <code>FilterCriteria</code>.
     * Message matching criteria.
     * @alias module:model/FilterCriteria
     */
    constructor() { 
        
        FilterCriteria.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FilterCriteria</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilterCriteria} obj Optional instance to populate.
     * @return {module:model/FilterCriteria} The populated <code>FilterCriteria</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilterCriteria();

            if (data.hasOwnProperty('excludeChats')) {
                obj['excludeChats'] = ApiClient.convertToType(data['excludeChats'], 'Boolean');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('hasAttachment')) {
                obj['hasAttachment'] = ApiClient.convertToType(data['hasAttachment'], 'Boolean');
            }
            if (data.hasOwnProperty('negatedQuery')) {
                obj['negatedQuery'] = ApiClient.convertToType(data['negatedQuery'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('sizeComparison')) {
                obj['sizeComparison'] = ApiClient.convertToType(data['sizeComparison'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FilterCriteria</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FilterCriteria</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['negatedQuery'] && !(typeof data['negatedQuery'] === 'string' || data['negatedQuery'] instanceof String)) {
            throw new Error("Expected the field `negatedQuery` to be a primitive type in the JSON string but got " + data['negatedQuery']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['sizeComparison'] && !(typeof data['sizeComparison'] === 'string' || data['sizeComparison'] instanceof String)) {
            throw new Error("Expected the field `sizeComparison` to be a primitive type in the JSON string but got " + data['sizeComparison']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }

        return true;
    }


}



/**
 * Whether the response should exclude chats.
 * @member {Boolean} excludeChats
 */
FilterCriteria.prototype['excludeChats'] = undefined;

/**
 * The sender's display name or email address.
 * @member {String} from
 */
FilterCriteria.prototype['from'] = undefined;

/**
 * Whether the message has any attachment.
 * @member {Boolean} hasAttachment
 */
FilterCriteria.prototype['hasAttachment'] = undefined;

/**
 * Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.
 * @member {String} negatedQuery
 */
FilterCriteria.prototype['negatedQuery'] = undefined;

/**
 * Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.
 * @member {String} query
 */
FilterCriteria.prototype['query'] = undefined;

/**
 * The size of the entire RFC822 message in bytes, including all headers and attachments.
 * @member {Number} size
 */
FilterCriteria.prototype['size'] = undefined;

/**
 * How the message size in bytes should be in relation to the size field.
 * @member {module:model/FilterCriteria.SizeComparisonEnum} sizeComparison
 */
FilterCriteria.prototype['sizeComparison'] = undefined;

/**
 * Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.
 * @member {String} subject
 */
FilterCriteria.prototype['subject'] = undefined;

/**
 * The recipient's display name or email address. Includes recipients in the \"to\", \"cc\", and \"bcc\" header fields. You can use simply the local part of the email address. For example, \"example\" and \"example@\" both match \"example@gmail.com\". This field is case-insensitive.
 * @member {String} to
 */
FilterCriteria.prototype['to'] = undefined;





/**
 * Allowed values for the <code>sizeComparison</code> property.
 * @enum {String}
 * @readonly
 */
FilterCriteria['SizeComparisonEnum'] = {

    /**
     * value: "unspecified"
     * @const
     */
    "unspecified": "unspecified",

    /**
     * value: "smaller"
     * @const
     */
    "smaller": "smaller",

    /**
     * value: "larger"
     * @const
     */
    "larger": "larger"
};



export default FilterCriteria;

