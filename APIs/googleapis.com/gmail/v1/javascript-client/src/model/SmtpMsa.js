/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SmtpMsa model module.
 * @module model/SmtpMsa
 * @version v1
 */
class SmtpMsa {
    /**
     * Constructs a new <code>SmtpMsa</code>.
     * Configuration for communication with an SMTP service.
     * @alias module:model/SmtpMsa
     */
    constructor() { 
        
        SmtpMsa.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SmtpMsa</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SmtpMsa} obj Optional instance to populate.
     * @return {module:model/SmtpMsa} The populated <code>SmtpMsa</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SmtpMsa();

            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('securityMode')) {
                obj['securityMode'] = ApiClient.convertToType(data['securityMode'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SmtpMsa</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SmtpMsa</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['securityMode'] && !(typeof data['securityMode'] === 'string' || data['securityMode'] instanceof String)) {
            throw new Error("Expected the field `securityMode` to be a primitive type in the JSON string but got " + data['securityMode']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * The hostname of the SMTP service. Required.
 * @member {String} host
 */
SmtpMsa.prototype['host'] = undefined;

/**
 * The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
 * @member {String} password
 */
SmtpMsa.prototype['password'] = undefined;

/**
 * The port of the SMTP service. Required.
 * @member {Number} port
 */
SmtpMsa.prototype['port'] = undefined;

/**
 * The protocol that will be used to secure communication with the SMTP service. Required.
 * @member {module:model/SmtpMsa.SecurityModeEnum} securityMode
 */
SmtpMsa.prototype['securityMode'] = undefined;

/**
 * The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
 * @member {String} username
 */
SmtpMsa.prototype['username'] = undefined;





/**
 * Allowed values for the <code>securityMode</code> property.
 * @enum {String}
 * @readonly
 */
SmtpMsa['SecurityModeEnum'] = {

    /**
     * value: "securityModeUnspecified"
     * @const
     */
    "securityModeUnspecified": "securityModeUnspecified",

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "ssl"
     * @const
     */
    "ssl": "ssl",

    /**
     * value: "starttls"
     * @const
     */
    "starttls": "starttls"
};



export default SmtpMsa;

