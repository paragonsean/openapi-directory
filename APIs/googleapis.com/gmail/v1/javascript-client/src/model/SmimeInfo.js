/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SmimeInfo model module.
 * @module model/SmimeInfo
 * @version v1
 */
class SmimeInfo {
    /**
     * Constructs a new <code>SmimeInfo</code>.
     * An S/MIME email config.
     * @alias module:model/SmimeInfo
     */
    constructor() { 
        
        SmimeInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SmimeInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SmimeInfo} obj Optional instance to populate.
     * @return {module:model/SmimeInfo} The populated <code>SmimeInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SmimeInfo();

            if (data.hasOwnProperty('encryptedKeyPassword')) {
                obj['encryptedKeyPassword'] = ApiClient.convertToType(data['encryptedKeyPassword'], 'String');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isDefault')) {
                obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('issuerCn')) {
                obj['issuerCn'] = ApiClient.convertToType(data['issuerCn'], 'String');
            }
            if (data.hasOwnProperty('pem')) {
                obj['pem'] = ApiClient.convertToType(data['pem'], 'String');
            }
            if (data.hasOwnProperty('pkcs12')) {
                obj['pkcs12'] = ApiClient.convertToType(data['pkcs12'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SmimeInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SmimeInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encryptedKeyPassword'] && !(typeof data['encryptedKeyPassword'] === 'string' || data['encryptedKeyPassword'] instanceof String)) {
            throw new Error("Expected the field `encryptedKeyPassword` to be a primitive type in the JSON string but got " + data['encryptedKeyPassword']);
        }
        // ensure the json data is a string
        if (data['expiration'] && !(typeof data['expiration'] === 'string' || data['expiration'] instanceof String)) {
            throw new Error("Expected the field `expiration` to be a primitive type in the JSON string but got " + data['expiration']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['issuerCn'] && !(typeof data['issuerCn'] === 'string' || data['issuerCn'] instanceof String)) {
            throw new Error("Expected the field `issuerCn` to be a primitive type in the JSON string but got " + data['issuerCn']);
        }
        // ensure the json data is a string
        if (data['pem'] && !(typeof data['pem'] === 'string' || data['pem'] instanceof String)) {
            throw new Error("Expected the field `pem` to be a primitive type in the JSON string but got " + data['pem']);
        }

        return true;
    }


}



/**
 * Encrypted key password, when key is encrypted.
 * @member {String} encryptedKeyPassword
 */
SmimeInfo.prototype['encryptedKeyPassword'] = undefined;

/**
 * When the certificate expires (in milliseconds since epoch).
 * @member {String} expiration
 */
SmimeInfo.prototype['expiration'] = undefined;

/**
 * The immutable ID for the SmimeInfo.
 * @member {String} id
 */
SmimeInfo.prototype['id'] = undefined;

/**
 * Whether this SmimeInfo is the default one for this user's send-as address.
 * @member {Boolean} isDefault
 */
SmimeInfo.prototype['isDefault'] = undefined;

/**
 * The S/MIME certificate issuer's common name.
 * @member {String} issuerCn
 */
SmimeInfo.prototype['issuerCn'] = undefined;

/**
 * PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key).
 * @member {String} pem
 */
SmimeInfo.prototype['pem'] = undefined;

/**
 * PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.
 * @member {Blob} pkcs12
 */
SmimeInfo.prototype['pkcs12'] = undefined;






export default SmimeInfo;

