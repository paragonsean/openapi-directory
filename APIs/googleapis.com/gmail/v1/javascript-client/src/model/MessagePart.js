/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessagePartBody from './MessagePartBody';
import MessagePartHeader from './MessagePartHeader';

/**
 * The MessagePart model module.
 * @module model/MessagePart
 * @version v1
 */
class MessagePart {
    /**
     * Constructs a new <code>MessagePart</code>.
     * A single MIME message part.
     * @alias module:model/MessagePart
     */
    constructor() { 
        
        MessagePart.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MessagePart</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessagePart} obj Optional instance to populate.
     * @return {module:model/MessagePart} The populated <code>MessagePart</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessagePart();

            if (data.hasOwnProperty('body')) {
                obj['body'] = MessagePartBody.constructFromObject(data['body']);
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], [MessagePartHeader]);
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('partId')) {
                obj['partId'] = ApiClient.convertToType(data['partId'], 'String');
            }
            if (data.hasOwnProperty('parts')) {
                obj['parts'] = ApiClient.convertToType(data['parts'], [MessagePart]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessagePart</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessagePart</code>.
     */
    static validateJSON(data) {
        // validate the optional field `body`
        if (data['body']) { // data not null
          MessagePartBody.validateJSON(data['body']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        if (data['headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['headers'])) {
                throw new Error("Expected the field `headers` to be an array in the JSON data but got " + data['headers']);
            }
            // validate the optional field `headers` (array)
            for (const item of data['headers']) {
                MessagePartHeader.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['partId'] && !(typeof data['partId'] === 'string' || data['partId'] instanceof String)) {
            throw new Error("Expected the field `partId` to be a primitive type in the JSON string but got " + data['partId']);
        }
        if (data['parts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parts'])) {
                throw new Error("Expected the field `parts` to be an array in the JSON data but got " + data['parts']);
            }
            // validate the optional field `parts` (array)
            for (const item of data['parts']) {
                MessagePart.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/MessagePartBody} body
 */
MessagePart.prototype['body'] = undefined;

/**
 * The filename of the attachment. Only present if this message part represents an attachment.
 * @member {String} filename
 */
MessagePart.prototype['filename'] = undefined;

/**
 * List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and `Subject`.
 * @member {Array.<module:model/MessagePartHeader>} headers
 */
MessagePart.prototype['headers'] = undefined;

/**
 * The MIME type of the message part.
 * @member {String} mimeType
 */
MessagePart.prototype['mimeType'] = undefined;

/**
 * The immutable ID of the message part.
 * @member {String} partId
 */
MessagePart.prototype['partId'] = undefined;

/**
 * The child MIME message parts of this part. This only applies to container MIME message parts, for example `multipart/_*`. For non- container MIME message part types, such as `text/plain`, this field is empty. For more information, see RFC 1521.
 * @member {Array.<module:model/MessagePart>} parts
 */
MessagePart.prototype['parts'] = undefined;






export default MessagePart;

