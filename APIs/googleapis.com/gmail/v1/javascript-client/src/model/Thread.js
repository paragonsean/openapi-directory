/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Message from './Message';

/**
 * The Thread model module.
 * @module model/Thread
 * @version v1
 */
class Thread {
    /**
     * Constructs a new <code>Thread</code>.
     * A collection of messages representing a conversation.
     * @alias module:model/Thread
     */
    constructor() { 
        
        Thread.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Thread</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Thread} obj Optional instance to populate.
     * @return {module:model/Thread} The populated <code>Thread</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Thread();

            if (data.hasOwnProperty('historyId')) {
                obj['historyId'] = ApiClient.convertToType(data['historyId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], [Message]);
            }
            if (data.hasOwnProperty('snippet')) {
                obj['snippet'] = ApiClient.convertToType(data['snippet'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Thread</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Thread</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['historyId'] && !(typeof data['historyId'] === 'string' || data['historyId'] instanceof String)) {
            throw new Error("Expected the field `historyId` to be a primitive type in the JSON string but got " + data['historyId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['messages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messages'])) {
                throw new Error("Expected the field `messages` to be an array in the JSON data but got " + data['messages']);
            }
            // validate the optional field `messages` (array)
            for (const item of data['messages']) {
                Message.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['snippet'] && !(typeof data['snippet'] === 'string' || data['snippet'] instanceof String)) {
            throw new Error("Expected the field `snippet` to be a primitive type in the JSON string but got " + data['snippet']);
        }

        return true;
    }


}



/**
 * The ID of the last history record that modified this thread.
 * @member {String} historyId
 */
Thread.prototype['historyId'] = undefined;

/**
 * The unique ID of the thread.
 * @member {String} id
 */
Thread.prototype['id'] = undefined;

/**
 * The list of messages in the thread.
 * @member {Array.<module:model/Message>} messages
 */
Thread.prototype['messages'] = undefined;

/**
 * A short part of the message text.
 * @member {String} snippet
 */
Thread.prototype['snippet'] = undefined;






export default Thread;

