/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MessagePartBody model module.
 * @module model/MessagePartBody
 * @version v1
 */
class MessagePartBody {
    /**
     * Constructs a new <code>MessagePartBody</code>.
     * The body of a single MIME message part.
     * @alias module:model/MessagePartBody
     */
    constructor() { 
        
        MessagePartBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MessagePartBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessagePartBody} obj Optional instance to populate.
     * @return {module:model/MessagePartBody} The populated <code>MessagePartBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessagePartBody();

            if (data.hasOwnProperty('attachmentId')) {
                obj['attachmentId'] = ApiClient.convertToType(data['attachmentId'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'Blob');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessagePartBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessagePartBody</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attachmentId'] && !(typeof data['attachmentId'] === 'string' || data['attachmentId'] instanceof String)) {
            throw new Error("Expected the field `attachmentId` to be a primitive type in the JSON string but got " + data['attachmentId']);
        }

        return true;
    }


}



/**
 * When present, contains the ID of an external attachment that can be retrieved in a separate `messages.attachments.get` request. When not present, the entire content of the message part body is contained in the data field.
 * @member {String} attachmentId
 */
MessagePartBody.prototype['attachmentId'] = undefined;

/**
 * The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment.
 * @member {Blob} data
 */
MessagePartBody.prototype['data'] = undefined;

/**
 * Number of bytes for the message part data (encoding notwithstanding).
 * @member {Number} size
 */
MessagePartBody.prototype['size'] = undefined;






export default MessagePartBody;

