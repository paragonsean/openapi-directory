/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Delegate model module.
 * @module model/Delegate
 * @version v1
 */
class Delegate {
    /**
     * Constructs a new <code>Delegate</code>.
     * Settings for a delegate. Delegates can read, send, and delete messages, as well as view and add contacts, for the delegator&#39;s account. See \&quot;Set up mail delegation\&quot; for more information about delegates.
     * @alias module:model/Delegate
     */
    constructor() { 
        
        Delegate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Delegate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Delegate} obj Optional instance to populate.
     * @return {module:model/Delegate} The populated <code>Delegate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Delegate();

            if (data.hasOwnProperty('delegateEmail')) {
                obj['delegateEmail'] = ApiClient.convertToType(data['delegateEmail'], 'String');
            }
            if (data.hasOwnProperty('verificationStatus')) {
                obj['verificationStatus'] = ApiClient.convertToType(data['verificationStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Delegate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Delegate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['delegateEmail'] && !(typeof data['delegateEmail'] === 'string' || data['delegateEmail'] instanceof String)) {
            throw new Error("Expected the field `delegateEmail` to be a primitive type in the JSON string but got " + data['delegateEmail']);
        }
        // ensure the json data is a string
        if (data['verificationStatus'] && !(typeof data['verificationStatus'] === 'string' || data['verificationStatus'] instanceof String)) {
            throw new Error("Expected the field `verificationStatus` to be a primitive type in the JSON string but got " + data['verificationStatus']);
        }

        return true;
    }


}



/**
 * The email address of the delegate.
 * @member {String} delegateEmail
 */
Delegate.prototype['delegateEmail'] = undefined;

/**
 * Indicates whether this address has been verified and can act as a delegate for the account. Read-only.
 * @member {module:model/Delegate.VerificationStatusEnum} verificationStatus
 */
Delegate.prototype['verificationStatus'] = undefined;





/**
 * Allowed values for the <code>verificationStatus</code> property.
 * @enum {String}
 * @readonly
 */
Delegate['VerificationStatusEnum'] = {

    /**
     * value: "verificationStatusUnspecified"
     * @const
     */
    "verificationStatusUnspecified": "verificationStatusUnspecified",

    /**
     * value: "accepted"
     * @const
     */
    "accepted": "accepted",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired"
};



export default Delegate;

