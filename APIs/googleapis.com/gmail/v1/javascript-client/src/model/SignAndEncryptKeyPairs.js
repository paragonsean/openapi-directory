/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SignAndEncryptKeyPairs model module.
 * @module model/SignAndEncryptKeyPairs
 * @version v1
 */
class SignAndEncryptKeyPairs {
    /**
     * Constructs a new <code>SignAndEncryptKeyPairs</code>.
     * The configuration of a CSE identity that uses different key pairs for signing and encryption.
     * @alias module:model/SignAndEncryptKeyPairs
     */
    constructor() { 
        
        SignAndEncryptKeyPairs.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SignAndEncryptKeyPairs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignAndEncryptKeyPairs} obj Optional instance to populate.
     * @return {module:model/SignAndEncryptKeyPairs} The populated <code>SignAndEncryptKeyPairs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignAndEncryptKeyPairs();

            if (data.hasOwnProperty('encryptionKeyPairId')) {
                obj['encryptionKeyPairId'] = ApiClient.convertToType(data['encryptionKeyPairId'], 'String');
            }
            if (data.hasOwnProperty('signingKeyPairId')) {
                obj['signingKeyPairId'] = ApiClient.convertToType(data['signingKeyPairId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignAndEncryptKeyPairs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignAndEncryptKeyPairs</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encryptionKeyPairId'] && !(typeof data['encryptionKeyPairId'] === 'string' || data['encryptionKeyPairId'] instanceof String)) {
            throw new Error("Expected the field `encryptionKeyPairId` to be a primitive type in the JSON string but got " + data['encryptionKeyPairId']);
        }
        // ensure the json data is a string
        if (data['signingKeyPairId'] && !(typeof data['signingKeyPairId'] === 'string' || data['signingKeyPairId'] instanceof String)) {
            throw new Error("Expected the field `signingKeyPairId` to be a primitive type in the JSON string but got " + data['signingKeyPairId']);
        }

        return true;
    }


}



/**
 * The ID of the CseKeyPair that encrypts signed outgoing mail.
 * @member {String} encryptionKeyPairId
 */
SignAndEncryptKeyPairs.prototype['encryptionKeyPairId'] = undefined;

/**
 * The ID of the CseKeyPair that signs outgoing mail.
 * @member {String} signingKeyPairId
 */
SignAndEncryptKeyPairs.prototype['signingKeyPairId'] = undefined;






export default SignAndEncryptKeyPairs;

