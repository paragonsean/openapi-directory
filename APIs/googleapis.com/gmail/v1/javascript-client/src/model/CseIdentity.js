/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SignAndEncryptKeyPairs from './SignAndEncryptKeyPairs';

/**
 * The CseIdentity model module.
 * @module model/CseIdentity
 * @version v1
 */
class CseIdentity {
    /**
     * Constructs a new <code>CseIdentity</code>.
     * The client-side encryption (CSE) configuration for the email address of an authenticated user. Gmail uses CSE configurations to save drafts of client-side encrypted email messages, and to sign and send encrypted email messages.
     * @alias module:model/CseIdentity
     */
    constructor() { 
        
        CseIdentity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CseIdentity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CseIdentity} obj Optional instance to populate.
     * @return {module:model/CseIdentity} The populated <code>CseIdentity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CseIdentity();

            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('primaryKeyPairId')) {
                obj['primaryKeyPairId'] = ApiClient.convertToType(data['primaryKeyPairId'], 'String');
            }
            if (data.hasOwnProperty('signAndEncryptKeyPairs')) {
                obj['signAndEncryptKeyPairs'] = SignAndEncryptKeyPairs.constructFromObject(data['signAndEncryptKeyPairs']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CseIdentity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CseIdentity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['primaryKeyPairId'] && !(typeof data['primaryKeyPairId'] === 'string' || data['primaryKeyPairId'] instanceof String)) {
            throw new Error("Expected the field `primaryKeyPairId` to be a primitive type in the JSON string but got " + data['primaryKeyPairId']);
        }
        // validate the optional field `signAndEncryptKeyPairs`
        if (data['signAndEncryptKeyPairs']) { // data not null
          SignAndEncryptKeyPairs.validateJSON(data['signAndEncryptKeyPairs']);
        }

        return true;
    }


}



/**
 * The email address for the sending identity. The email address must be the primary email address of the authenticated user.
 * @member {String} emailAddress
 */
CseIdentity.prototype['emailAddress'] = undefined;

/**
 * If a key pair is associated, the ID of the key pair, CseKeyPair.
 * @member {String} primaryKeyPairId
 */
CseIdentity.prototype['primaryKeyPairId'] = undefined;

/**
 * @member {module:model/SignAndEncryptKeyPairs} signAndEncryptKeyPairs
 */
CseIdentity.prototype['signAndEncryptKeyPairs'] = undefined;






export default CseIdentity;

