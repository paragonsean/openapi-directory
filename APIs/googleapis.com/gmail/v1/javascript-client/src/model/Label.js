/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LabelColor from './LabelColor';

/**
 * The Label model module.
 * @module model/Label
 * @version v1
 */
class Label {
    /**
     * Constructs a new <code>Label</code>.
     * Labels are used to categorize messages and threads within the user&#39;s mailbox. The maximum number of labels supported for a user&#39;s mailbox is 10,000.
     * @alias module:model/Label
     */
    constructor() { 
        
        Label.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Label</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Label} obj Optional instance to populate.
     * @return {module:model/Label} The populated <code>Label</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Label();

            if (data.hasOwnProperty('color')) {
                obj['color'] = LabelColor.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('labelListVisibility')) {
                obj['labelListVisibility'] = ApiClient.convertToType(data['labelListVisibility'], 'String');
            }
            if (data.hasOwnProperty('messageListVisibility')) {
                obj['messageListVisibility'] = ApiClient.convertToType(data['messageListVisibility'], 'String');
            }
            if (data.hasOwnProperty('messagesTotal')) {
                obj['messagesTotal'] = ApiClient.convertToType(data['messagesTotal'], 'Number');
            }
            if (data.hasOwnProperty('messagesUnread')) {
                obj['messagesUnread'] = ApiClient.convertToType(data['messagesUnread'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('threadsTotal')) {
                obj['threadsTotal'] = ApiClient.convertToType(data['threadsTotal'], 'Number');
            }
            if (data.hasOwnProperty('threadsUnread')) {
                obj['threadsUnread'] = ApiClient.convertToType(data['threadsUnread'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Label</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Label</code>.
     */
    static validateJSON(data) {
        // validate the optional field `color`
        if (data['color']) { // data not null
          LabelColor.validateJSON(data['color']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['labelListVisibility'] && !(typeof data['labelListVisibility'] === 'string' || data['labelListVisibility'] instanceof String)) {
            throw new Error("Expected the field `labelListVisibility` to be a primitive type in the JSON string but got " + data['labelListVisibility']);
        }
        // ensure the json data is a string
        if (data['messageListVisibility'] && !(typeof data['messageListVisibility'] === 'string' || data['messageListVisibility'] instanceof String)) {
            throw new Error("Expected the field `messageListVisibility` to be a primitive type in the JSON string but got " + data['messageListVisibility']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/LabelColor} color
 */
Label.prototype['color'] = undefined;

/**
 * The immutable ID of the label.
 * @member {String} id
 */
Label.prototype['id'] = undefined;

/**
 * The visibility of the label in the label list in the Gmail web interface.
 * @member {module:model/Label.LabelListVisibilityEnum} labelListVisibility
 */
Label.prototype['labelListVisibility'] = undefined;

/**
 * The visibility of messages with this label in the message list in the Gmail web interface.
 * @member {module:model/Label.MessageListVisibilityEnum} messageListVisibility
 */
Label.prototype['messageListVisibility'] = undefined;

/**
 * The total number of messages with the label.
 * @member {Number} messagesTotal
 */
Label.prototype['messagesTotal'] = undefined;

/**
 * The number of unread messages with the label.
 * @member {Number} messagesUnread
 */
Label.prototype['messagesUnread'] = undefined;

/**
 * The display name of the label.
 * @member {String} name
 */
Label.prototype['name'] = undefined;

/**
 * The total number of threads with the label.
 * @member {Number} threadsTotal
 */
Label.prototype['threadsTotal'] = undefined;

/**
 * The number of unread threads with the label.
 * @member {Number} threadsUnread
 */
Label.prototype['threadsUnread'] = undefined;

/**
 * The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads, but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.
 * @member {module:model/Label.TypeEnum} type
 */
Label.prototype['type'] = undefined;





/**
 * Allowed values for the <code>labelListVisibility</code> property.
 * @enum {String}
 * @readonly
 */
Label['LabelListVisibilityEnum'] = {

    /**
     * value: "labelShow"
     * @const
     */
    "labelShow": "labelShow",

    /**
     * value: "labelShowIfUnread"
     * @const
     */
    "labelShowIfUnread": "labelShowIfUnread",

    /**
     * value: "labelHide"
     * @const
     */
    "labelHide": "labelHide"
};


/**
 * Allowed values for the <code>messageListVisibility</code> property.
 * @enum {String}
 * @readonly
 */
Label['MessageListVisibilityEnum'] = {

    /**
     * value: "show"
     * @const
     */
    "show": "show",

    /**
     * value: "hide"
     * @const
     */
    "hide": "hide"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Label['TypeEnum'] = {

    /**
     * value: "system"
     * @const
     */
    "system": "system",

    /**
     * value: "user"
     * @const
     */
    "user": "user"
};



export default Label;

