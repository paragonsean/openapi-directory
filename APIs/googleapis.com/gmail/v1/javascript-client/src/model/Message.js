/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessagePart from './MessagePart';

/**
 * The Message model module.
 * @module model/Message
 * @version v1
 */
class Message {
    /**
     * Constructs a new <code>Message</code>.
     * An email message.
     * @alias module:model/Message
     */
    constructor() { 
        
        Message.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Message</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Message} obj Optional instance to populate.
     * @return {module:model/Message} The populated <code>Message</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Message();

            if (data.hasOwnProperty('historyId')) {
                obj['historyId'] = ApiClient.convertToType(data['historyId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('internalDate')) {
                obj['internalDate'] = ApiClient.convertToType(data['internalDate'], 'String');
            }
            if (data.hasOwnProperty('labelIds')) {
                obj['labelIds'] = ApiClient.convertToType(data['labelIds'], ['String']);
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = MessagePart.constructFromObject(data['payload']);
            }
            if (data.hasOwnProperty('raw')) {
                obj['raw'] = ApiClient.convertToType(data['raw'], 'Blob');
            }
            if (data.hasOwnProperty('sizeEstimate')) {
                obj['sizeEstimate'] = ApiClient.convertToType(data['sizeEstimate'], 'Number');
            }
            if (data.hasOwnProperty('snippet')) {
                obj['snippet'] = ApiClient.convertToType(data['snippet'], 'String');
            }
            if (data.hasOwnProperty('threadId')) {
                obj['threadId'] = ApiClient.convertToType(data['threadId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Message</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Message</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['historyId'] && !(typeof data['historyId'] === 'string' || data['historyId'] instanceof String)) {
            throw new Error("Expected the field `historyId` to be a primitive type in the JSON string but got " + data['historyId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['internalDate'] && !(typeof data['internalDate'] === 'string' || data['internalDate'] instanceof String)) {
            throw new Error("Expected the field `internalDate` to be a primitive type in the JSON string but got " + data['internalDate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labelIds'])) {
            throw new Error("Expected the field `labelIds` to be an array in the JSON data but got " + data['labelIds']);
        }
        // validate the optional field `payload`
        if (data['payload']) { // data not null
          MessagePart.validateJSON(data['payload']);
        }
        // ensure the json data is a string
        if (data['snippet'] && !(typeof data['snippet'] === 'string' || data['snippet'] instanceof String)) {
            throw new Error("Expected the field `snippet` to be a primitive type in the JSON string but got " + data['snippet']);
        }
        // ensure the json data is a string
        if (data['threadId'] && !(typeof data['threadId'] === 'string' || data['threadId'] instanceof String)) {
            throw new Error("Expected the field `threadId` to be a primitive type in the JSON string but got " + data['threadId']);
        }

        return true;
    }


}



/**
 * The ID of the last history record that modified this message.
 * @member {String} historyId
 */
Message.prototype['historyId'] = undefined;

/**
 * The immutable ID of the message.
 * @member {String} id
 */
Message.prototype['id'] = undefined;

/**
 * The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can be configured by client to be based on the `Date` header.
 * @member {String} internalDate
 */
Message.prototype['internalDate'] = undefined;

/**
 * List of IDs of labels applied to this message.
 * @member {Array.<String>} labelIds
 */
Message.prototype['labelIds'] = undefined;

/**
 * @member {module:model/MessagePart} payload
 */
Message.prototype['payload'] = undefined;

/**
 * The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.
 * @member {Blob} raw
 */
Message.prototype['raw'] = undefined;

/**
 * Estimated size in bytes of the message.
 * @member {Number} sizeEstimate
 */
Message.prototype['sizeEstimate'] = undefined;

/**
 * A short part of the message text.
 * @member {String} snippet
 */
Message.prototype['snippet'] = undefined;

/**
 * The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested `threadId` must be specified on the `Message` or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3. The `Subject` headers must match. 
 * @member {String} threadId
 */
Message.prototype['threadId'] = undefined;






export default Message;

