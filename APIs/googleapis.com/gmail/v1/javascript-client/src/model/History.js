/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HistoryLabelAdded from './HistoryLabelAdded';
import HistoryLabelRemoved from './HistoryLabelRemoved';
import HistoryMessageAdded from './HistoryMessageAdded';
import HistoryMessageDeleted from './HistoryMessageDeleted';
import Message from './Message';

/**
 * The History model module.
 * @module model/History
 * @version v1
 */
class History {
    /**
     * Constructs a new <code>History</code>.
     * A record of a change to the user&#39;s mailbox. Each history change may affect multiple messages in multiple ways.
     * @alias module:model/History
     */
    constructor() { 
        
        History.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>History</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/History} obj Optional instance to populate.
     * @return {module:model/History} The populated <code>History</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new History();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('labelsAdded')) {
                obj['labelsAdded'] = ApiClient.convertToType(data['labelsAdded'], [HistoryLabelAdded]);
            }
            if (data.hasOwnProperty('labelsRemoved')) {
                obj['labelsRemoved'] = ApiClient.convertToType(data['labelsRemoved'], [HistoryLabelRemoved]);
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], [Message]);
            }
            if (data.hasOwnProperty('messagesAdded')) {
                obj['messagesAdded'] = ApiClient.convertToType(data['messagesAdded'], [HistoryMessageAdded]);
            }
            if (data.hasOwnProperty('messagesDeleted')) {
                obj['messagesDeleted'] = ApiClient.convertToType(data['messagesDeleted'], [HistoryMessageDeleted]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>History</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>History</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['labelsAdded']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labelsAdded'])) {
                throw new Error("Expected the field `labelsAdded` to be an array in the JSON data but got " + data['labelsAdded']);
            }
            // validate the optional field `labelsAdded` (array)
            for (const item of data['labelsAdded']) {
                HistoryLabelAdded.validateJSON(item);
            };
        }
        if (data['labelsRemoved']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labelsRemoved'])) {
                throw new Error("Expected the field `labelsRemoved` to be an array in the JSON data but got " + data['labelsRemoved']);
            }
            // validate the optional field `labelsRemoved` (array)
            for (const item of data['labelsRemoved']) {
                HistoryLabelRemoved.validateJSON(item);
            };
        }
        if (data['messages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messages'])) {
                throw new Error("Expected the field `messages` to be an array in the JSON data but got " + data['messages']);
            }
            // validate the optional field `messages` (array)
            for (const item of data['messages']) {
                Message.validateJSON(item);
            };
        }
        if (data['messagesAdded']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messagesAdded'])) {
                throw new Error("Expected the field `messagesAdded` to be an array in the JSON data but got " + data['messagesAdded']);
            }
            // validate the optional field `messagesAdded` (array)
            for (const item of data['messagesAdded']) {
                HistoryMessageAdded.validateJSON(item);
            };
        }
        if (data['messagesDeleted']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messagesDeleted'])) {
                throw new Error("Expected the field `messagesDeleted` to be an array in the JSON data but got " + data['messagesDeleted']);
            }
            // validate the optional field `messagesDeleted` (array)
            for (const item of data['messagesDeleted']) {
                HistoryMessageDeleted.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The mailbox sequence ID.
 * @member {String} id
 */
History.prototype['id'] = undefined;

/**
 * Labels added to messages in this history record.
 * @member {Array.<module:model/HistoryLabelAdded>} labelsAdded
 */
History.prototype['labelsAdded'] = undefined;

/**
 * Labels removed from messages in this history record.
 * @member {Array.<module:model/HistoryLabelRemoved>} labelsRemoved
 */
History.prototype['labelsRemoved'] = undefined;

/**
 * List of messages changed in this history record. The fields for specific change types, such as `messagesAdded` may duplicate messages in this field. We recommend using the specific change-type fields instead of this.
 * @member {Array.<module:model/Message>} messages
 */
History.prototype['messages'] = undefined;

/**
 * Messages added to the mailbox in this history record.
 * @member {Array.<module:model/HistoryMessageAdded>} messagesAdded
 */
History.prototype['messagesAdded'] = undefined;

/**
 * Messages deleted (not Trashed) from the mailbox in this history record.
 * @member {Array.<module:model/HistoryMessageDeleted>} messagesDeleted
 */
History.prototype['messagesDeleted'] = undefined;






export default History;

