/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SmtpMsa from './SmtpMsa';

/**
 * The SendAs model module.
 * @module model/SendAs
 * @version v1
 */
class SendAs {
    /**
     * Constructs a new <code>SendAs</code>.
     * Settings associated with a send-as alias, which can be either the primary login address associated with the account or a custom \&quot;from\&quot; address. Send-as aliases correspond to the \&quot;Send Mail As\&quot; feature in the web interface.
     * @alias module:model/SendAs
     */
    constructor() { 
        
        SendAs.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SendAs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendAs} obj Optional instance to populate.
     * @return {module:model/SendAs} The populated <code>SendAs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendAs();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('isDefault')) {
                obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('isPrimary')) {
                obj['isPrimary'] = ApiClient.convertToType(data['isPrimary'], 'Boolean');
            }
            if (data.hasOwnProperty('replyToAddress')) {
                obj['replyToAddress'] = ApiClient.convertToType(data['replyToAddress'], 'String');
            }
            if (data.hasOwnProperty('sendAsEmail')) {
                obj['sendAsEmail'] = ApiClient.convertToType(data['sendAsEmail'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('smtpMsa')) {
                obj['smtpMsa'] = SmtpMsa.constructFromObject(data['smtpMsa']);
            }
            if (data.hasOwnProperty('treatAsAlias')) {
                obj['treatAsAlias'] = ApiClient.convertToType(data['treatAsAlias'], 'Boolean');
            }
            if (data.hasOwnProperty('verificationStatus')) {
                obj['verificationStatus'] = ApiClient.convertToType(data['verificationStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendAs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendAs</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['replyToAddress'] && !(typeof data['replyToAddress'] === 'string' || data['replyToAddress'] instanceof String)) {
            throw new Error("Expected the field `replyToAddress` to be a primitive type in the JSON string but got " + data['replyToAddress']);
        }
        // ensure the json data is a string
        if (data['sendAsEmail'] && !(typeof data['sendAsEmail'] === 'string' || data['sendAsEmail'] instanceof String)) {
            throw new Error("Expected the field `sendAsEmail` to be a primitive type in the JSON string but got " + data['sendAsEmail']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // validate the optional field `smtpMsa`
        if (data['smtpMsa']) { // data not null
          SmtpMsa.validateJSON(data['smtpMsa']);
        }
        // ensure the json data is a string
        if (data['verificationStatus'] && !(typeof data['verificationStatus'] === 'string' || data['verificationStatus'] instanceof String)) {
            throw new Error("Expected the field `verificationStatus` to be a primitive type in the JSON string but got " + data['verificationStatus']);
        }

        return true;
    }


}



/**
 * A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail.
 * @member {String} displayName
 */
SendAs.prototype['displayName'] = undefined;

/**
 * Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is `true`. Changing this from `false` to `true` for an address will result in this field becoming `false` for the other previous default address.
 * @member {Boolean} isDefault
 */
SendAs.prototype['isDefault'] = undefined;

/**
 * Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only.
 * @member {Boolean} isPrimary
 */
SendAs.prototype['isPrimary'] = undefined;

/**
 * An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header.
 * @member {String} replyToAddress
 */
SendAs.prototype['replyToAddress'] = undefined;

/**
 * The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create.
 * @member {String} sendAsEmail
 */
SendAs.prototype['sendAsEmail'] = undefined;

/**
 * An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only.
 * @member {String} signature
 */
SendAs.prototype['signature'] = undefined;

/**
 * @member {module:model/SmtpMsa} smtpMsa
 */
SendAs.prototype['smtpMsa'] = undefined;

/**
 * Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases.
 * @member {Boolean} treatAsAlias
 */
SendAs.prototype['treatAsAlias'] = undefined;

/**
 * Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases.
 * @member {module:model/SendAs.VerificationStatusEnum} verificationStatus
 */
SendAs.prototype['verificationStatus'] = undefined;





/**
 * Allowed values for the <code>verificationStatus</code> property.
 * @enum {String}
 * @readonly
 */
SendAs['VerificationStatusEnum'] = {

    /**
     * value: "verificationStatusUnspecified"
     * @const
     */
    "verificationStatusUnspecified": "verificationStatusUnspecified",

    /**
     * value: "accepted"
     * @const
     */
    "accepted": "accepted",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending"
};



export default SendAs;

