/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfile::OAIProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfile::OAIProfile() {
    this->initializeModel();
}

OAIProfile::~OAIProfile() {}

void OAIProfile::initializeModel() {

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_history_id_isSet = false;
    m_history_id_isValid = false;

    m_messages_total_isSet = false;
    m_messages_total_isValid = false;

    m_threads_total_isSet = false;
    m_threads_total_isValid = false;
}

void OAIProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfile::fromJsonObject(QJsonObject json) {

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_history_id_isValid = ::OpenAPI::fromJsonValue(m_history_id, json[QString("historyId")]);
    m_history_id_isSet = !json[QString("historyId")].isNull() && m_history_id_isValid;

    m_messages_total_isValid = ::OpenAPI::fromJsonValue(m_messages_total, json[QString("messagesTotal")]);
    m_messages_total_isSet = !json[QString("messagesTotal")].isNull() && m_messages_total_isValid;

    m_threads_total_isValid = ::OpenAPI::fromJsonValue(m_threads_total, json[QString("threadsTotal")]);
    m_threads_total_isSet = !json[QString("threadsTotal")].isNull() && m_threads_total_isValid;
}

QString OAIProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_history_id_isSet) {
        obj.insert(QString("historyId"), ::OpenAPI::toJsonValue(m_history_id));
    }
    if (m_messages_total_isSet) {
        obj.insert(QString("messagesTotal"), ::OpenAPI::toJsonValue(m_messages_total));
    }
    if (m_threads_total_isSet) {
        obj.insert(QString("threadsTotal"), ::OpenAPI::toJsonValue(m_threads_total));
    }
    return obj;
}

QString OAIProfile::getEmailAddress() const {
    return m_email_address;
}
void OAIProfile::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIProfile::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIProfile::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIProfile::getHistoryId() const {
    return m_history_id;
}
void OAIProfile::setHistoryId(const QString &history_id) {
    m_history_id = history_id;
    m_history_id_isSet = true;
}

bool OAIProfile::is_history_id_Set() const{
    return m_history_id_isSet;
}

bool OAIProfile::is_history_id_Valid() const{
    return m_history_id_isValid;
}

qint32 OAIProfile::getMessagesTotal() const {
    return m_messages_total;
}
void OAIProfile::setMessagesTotal(const qint32 &messages_total) {
    m_messages_total = messages_total;
    m_messages_total_isSet = true;
}

bool OAIProfile::is_messages_total_Set() const{
    return m_messages_total_isSet;
}

bool OAIProfile::is_messages_total_Valid() const{
    return m_messages_total_isValid;
}

qint32 OAIProfile::getThreadsTotal() const {
    return m_threads_total;
}
void OAIProfile::setThreadsTotal(const qint32 &threads_total) {
    m_threads_total = threads_total;
    m_threads_total_isSet = true;
}

bool OAIProfile::is_threads_total_Set() const{
    return m_threads_total_isSet;
}

bool OAIProfile::is_threads_total_Valid() const{
    return m_threads_total_isValid;
}

bool OAIProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threads_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
