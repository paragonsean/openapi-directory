/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPopSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPopSettings::OAIPopSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPopSettings::OAIPopSettings() {
    this->initializeModel();
}

OAIPopSettings::~OAIPopSettings() {}

void OAIPopSettings::initializeModel() {

    m_access_window_isSet = false;
    m_access_window_isValid = false;

    m_disposition_isSet = false;
    m_disposition_isValid = false;
}

void OAIPopSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPopSettings::fromJsonObject(QJsonObject json) {

    m_access_window_isValid = ::OpenAPI::fromJsonValue(m_access_window, json[QString("accessWindow")]);
    m_access_window_isSet = !json[QString("accessWindow")].isNull() && m_access_window_isValid;

    m_disposition_isValid = ::OpenAPI::fromJsonValue(m_disposition, json[QString("disposition")]);
    m_disposition_isSet = !json[QString("disposition")].isNull() && m_disposition_isValid;
}

QString OAIPopSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPopSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_access_window_isSet) {
        obj.insert(QString("accessWindow"), ::OpenAPI::toJsonValue(m_access_window));
    }
    if (m_disposition_isSet) {
        obj.insert(QString("disposition"), ::OpenAPI::toJsonValue(m_disposition));
    }
    return obj;
}

QString OAIPopSettings::getAccessWindow() const {
    return m_access_window;
}
void OAIPopSettings::setAccessWindow(const QString &access_window) {
    m_access_window = access_window;
    m_access_window_isSet = true;
}

bool OAIPopSettings::is_access_window_Set() const{
    return m_access_window_isSet;
}

bool OAIPopSettings::is_access_window_Valid() const{
    return m_access_window_isValid;
}

QString OAIPopSettings::getDisposition() const {
    return m_disposition;
}
void OAIPopSettings::setDisposition(const QString &disposition) {
    m_disposition = disposition;
    m_disposition_isSet = true;
}

bool OAIPopSettings::is_disposition_Set() const{
    return m_disposition_isSet;
}

bool OAIPopSettings::is_disposition_Valid() const{
    return m_disposition_isValid;
}

bool OAIPopSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPopSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
