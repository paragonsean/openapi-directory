/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignAndEncryptKeyPairs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignAndEncryptKeyPairs::OAISignAndEncryptKeyPairs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignAndEncryptKeyPairs::OAISignAndEncryptKeyPairs() {
    this->initializeModel();
}

OAISignAndEncryptKeyPairs::~OAISignAndEncryptKeyPairs() {}

void OAISignAndEncryptKeyPairs::initializeModel() {

    m_encryption_key_pair_id_isSet = false;
    m_encryption_key_pair_id_isValid = false;

    m_signing_key_pair_id_isSet = false;
    m_signing_key_pair_id_isValid = false;
}

void OAISignAndEncryptKeyPairs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignAndEncryptKeyPairs::fromJsonObject(QJsonObject json) {

    m_encryption_key_pair_id_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_pair_id, json[QString("encryptionKeyPairId")]);
    m_encryption_key_pair_id_isSet = !json[QString("encryptionKeyPairId")].isNull() && m_encryption_key_pair_id_isValid;

    m_signing_key_pair_id_isValid = ::OpenAPI::fromJsonValue(m_signing_key_pair_id, json[QString("signingKeyPairId")]);
    m_signing_key_pair_id_isSet = !json[QString("signingKeyPairId")].isNull() && m_signing_key_pair_id_isValid;
}

QString OAISignAndEncryptKeyPairs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignAndEncryptKeyPairs::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_key_pair_id_isSet) {
        obj.insert(QString("encryptionKeyPairId"), ::OpenAPI::toJsonValue(m_encryption_key_pair_id));
    }
    if (m_signing_key_pair_id_isSet) {
        obj.insert(QString("signingKeyPairId"), ::OpenAPI::toJsonValue(m_signing_key_pair_id));
    }
    return obj;
}

QString OAISignAndEncryptKeyPairs::getEncryptionKeyPairId() const {
    return m_encryption_key_pair_id;
}
void OAISignAndEncryptKeyPairs::setEncryptionKeyPairId(const QString &encryption_key_pair_id) {
    m_encryption_key_pair_id = encryption_key_pair_id;
    m_encryption_key_pair_id_isSet = true;
}

bool OAISignAndEncryptKeyPairs::is_encryption_key_pair_id_Set() const{
    return m_encryption_key_pair_id_isSet;
}

bool OAISignAndEncryptKeyPairs::is_encryption_key_pair_id_Valid() const{
    return m_encryption_key_pair_id_isValid;
}

QString OAISignAndEncryptKeyPairs::getSigningKeyPairId() const {
    return m_signing_key_pair_id;
}
void OAISignAndEncryptKeyPairs::setSigningKeyPairId(const QString &signing_key_pair_id) {
    m_signing_key_pair_id = signing_key_pair_id;
    m_signing_key_pair_id_isSet = true;
}

bool OAISignAndEncryptKeyPairs::is_signing_key_pair_id_Set() const{
    return m_signing_key_pair_id_isSet;
}

bool OAISignAndEncryptKeyPairs::is_signing_key_pair_id_Valid() const{
    return m_signing_key_pair_id_isValid;
}

bool OAISignAndEncryptKeyPairs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_key_pair_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_key_pair_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignAndEncryptKeyPairs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
