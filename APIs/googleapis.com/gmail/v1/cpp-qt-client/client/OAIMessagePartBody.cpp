/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessagePartBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessagePartBody::OAIMessagePartBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessagePartBody::OAIMessagePartBody() {
    this->initializeModel();
}

OAIMessagePartBody::~OAIMessagePartBody() {}

void OAIMessagePartBody::initializeModel() {

    m_attachment_id_isSet = false;
    m_attachment_id_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIMessagePartBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessagePartBody::fromJsonObject(QJsonObject json) {

    m_attachment_id_isValid = ::OpenAPI::fromJsonValue(m_attachment_id, json[QString("attachmentId")]);
    m_attachment_id_isSet = !json[QString("attachmentId")].isNull() && m_attachment_id_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIMessagePartBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessagePartBody::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment_id_isSet) {
        obj.insert(QString("attachmentId"), ::OpenAPI::toJsonValue(m_attachment_id));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAIMessagePartBody::getAttachmentId() const {
    return m_attachment_id;
}
void OAIMessagePartBody::setAttachmentId(const QString &attachment_id) {
    m_attachment_id = attachment_id;
    m_attachment_id_isSet = true;
}

bool OAIMessagePartBody::is_attachment_id_Set() const{
    return m_attachment_id_isSet;
}

bool OAIMessagePartBody::is_attachment_id_Valid() const{
    return m_attachment_id_isValid;
}

QByteArray OAIMessagePartBody::getData() const {
    return m_data;
}
void OAIMessagePartBody::setData(const QByteArray &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIMessagePartBody::is_data_Set() const{
    return m_data_isSet;
}

bool OAIMessagePartBody::is_data_Valid() const{
    return m_data_isValid;
}

qint32 OAIMessagePartBody::getSize() const {
    return m_size;
}
void OAIMessagePartBody::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIMessagePartBody::is_size_Set() const{
    return m_size_isSet;
}

bool OAIMessagePartBody::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIMessagePartBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessagePartBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
