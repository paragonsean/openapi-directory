/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICseIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICseIdentity::OAICseIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICseIdentity::OAICseIdentity() {
    this->initializeModel();
}

OAICseIdentity::~OAICseIdentity() {}

void OAICseIdentity::initializeModel() {

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_primary_key_pair_id_isSet = false;
    m_primary_key_pair_id_isValid = false;

    m_sign_and_encrypt_key_pairs_isSet = false;
    m_sign_and_encrypt_key_pairs_isValid = false;
}

void OAICseIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICseIdentity::fromJsonObject(QJsonObject json) {

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_primary_key_pair_id_isValid = ::OpenAPI::fromJsonValue(m_primary_key_pair_id, json[QString("primaryKeyPairId")]);
    m_primary_key_pair_id_isSet = !json[QString("primaryKeyPairId")].isNull() && m_primary_key_pair_id_isValid;

    m_sign_and_encrypt_key_pairs_isValid = ::OpenAPI::fromJsonValue(m_sign_and_encrypt_key_pairs, json[QString("signAndEncryptKeyPairs")]);
    m_sign_and_encrypt_key_pairs_isSet = !json[QString("signAndEncryptKeyPairs")].isNull() && m_sign_and_encrypt_key_pairs_isValid;
}

QString OAICseIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICseIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_primary_key_pair_id_isSet) {
        obj.insert(QString("primaryKeyPairId"), ::OpenAPI::toJsonValue(m_primary_key_pair_id));
    }
    if (m_sign_and_encrypt_key_pairs.isSet()) {
        obj.insert(QString("signAndEncryptKeyPairs"), ::OpenAPI::toJsonValue(m_sign_and_encrypt_key_pairs));
    }
    return obj;
}

QString OAICseIdentity::getEmailAddress() const {
    return m_email_address;
}
void OAICseIdentity::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAICseIdentity::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAICseIdentity::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAICseIdentity::getPrimaryKeyPairId() const {
    return m_primary_key_pair_id;
}
void OAICseIdentity::setPrimaryKeyPairId(const QString &primary_key_pair_id) {
    m_primary_key_pair_id = primary_key_pair_id;
    m_primary_key_pair_id_isSet = true;
}

bool OAICseIdentity::is_primary_key_pair_id_Set() const{
    return m_primary_key_pair_id_isSet;
}

bool OAICseIdentity::is_primary_key_pair_id_Valid() const{
    return m_primary_key_pair_id_isValid;
}

OAISignAndEncryptKeyPairs OAICseIdentity::getSignAndEncryptKeyPairs() const {
    return m_sign_and_encrypt_key_pairs;
}
void OAICseIdentity::setSignAndEncryptKeyPairs(const OAISignAndEncryptKeyPairs &sign_and_encrypt_key_pairs) {
    m_sign_and_encrypt_key_pairs = sign_and_encrypt_key_pairs;
    m_sign_and_encrypt_key_pairs_isSet = true;
}

bool OAICseIdentity::is_sign_and_encrypt_key_pairs_Set() const{
    return m_sign_and_encrypt_key_pairs_isSet;
}

bool OAICseIdentity::is_sign_and_encrypt_key_pairs_Valid() const{
    return m_sign_and_encrypt_key_pairs_isValid;
}

bool OAICseIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_pair_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_and_encrypt_key_pairs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICseIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
