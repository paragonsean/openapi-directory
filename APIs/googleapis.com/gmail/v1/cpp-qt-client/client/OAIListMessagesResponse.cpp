/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListMessagesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListMessagesResponse::OAIListMessagesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListMessagesResponse::OAIListMessagesResponse() {
    this->initializeModel();
}

OAIListMessagesResponse::~OAIListMessagesResponse() {}

void OAIListMessagesResponse::initializeModel() {

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_result_size_estimate_isSet = false;
    m_result_size_estimate_isValid = false;
}

void OAIListMessagesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListMessagesResponse::fromJsonObject(QJsonObject json) {

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_result_size_estimate_isValid = ::OpenAPI::fromJsonValue(m_result_size_estimate, json[QString("resultSizeEstimate")]);
    m_result_size_estimate_isSet = !json[QString("resultSizeEstimate")].isNull() && m_result_size_estimate_isValid;
}

QString OAIListMessagesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListMessagesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_result_size_estimate_isSet) {
        obj.insert(QString("resultSizeEstimate"), ::OpenAPI::toJsonValue(m_result_size_estimate));
    }
    return obj;
}

QList<OAIMessage> OAIListMessagesResponse::getMessages() const {
    return m_messages;
}
void OAIListMessagesResponse::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIListMessagesResponse::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIListMessagesResponse::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAIListMessagesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListMessagesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListMessagesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListMessagesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

qint32 OAIListMessagesResponse::getResultSizeEstimate() const {
    return m_result_size_estimate;
}
void OAIListMessagesResponse::setResultSizeEstimate(const qint32 &result_size_estimate) {
    m_result_size_estimate = result_size_estimate;
    m_result_size_estimate_isSet = true;
}

bool OAIListMessagesResponse::is_result_size_estimate_Set() const{
    return m_result_size_estimate_isSet;
}

bool OAIListMessagesResponse::is_result_size_estimate_Valid() const{
    return m_result_size_estimate_isValid;
}

bool OAIListMessagesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_size_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListMessagesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
