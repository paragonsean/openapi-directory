/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsePrivateKeyMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsePrivateKeyMetadata::OAICsePrivateKeyMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsePrivateKeyMetadata::OAICsePrivateKeyMetadata() {
    this->initializeModel();
}

OAICsePrivateKeyMetadata::~OAICsePrivateKeyMetadata() {}

void OAICsePrivateKeyMetadata::initializeModel() {

    m_hardware_key_metadata_isSet = false;
    m_hardware_key_metadata_isValid = false;

    m_kacls_key_metadata_isSet = false;
    m_kacls_key_metadata_isValid = false;

    m_private_key_metadata_id_isSet = false;
    m_private_key_metadata_id_isValid = false;
}

void OAICsePrivateKeyMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsePrivateKeyMetadata::fromJsonObject(QJsonObject json) {

    m_hardware_key_metadata_isValid = ::OpenAPI::fromJsonValue(m_hardware_key_metadata, json[QString("hardwareKeyMetadata")]);
    m_hardware_key_metadata_isSet = !json[QString("hardwareKeyMetadata")].isNull() && m_hardware_key_metadata_isValid;

    m_kacls_key_metadata_isValid = ::OpenAPI::fromJsonValue(m_kacls_key_metadata, json[QString("kaclsKeyMetadata")]);
    m_kacls_key_metadata_isSet = !json[QString("kaclsKeyMetadata")].isNull() && m_kacls_key_metadata_isValid;

    m_private_key_metadata_id_isValid = ::OpenAPI::fromJsonValue(m_private_key_metadata_id, json[QString("privateKeyMetadataId")]);
    m_private_key_metadata_id_isSet = !json[QString("privateKeyMetadataId")].isNull() && m_private_key_metadata_id_isValid;
}

QString OAICsePrivateKeyMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsePrivateKeyMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_hardware_key_metadata.isSet()) {
        obj.insert(QString("hardwareKeyMetadata"), ::OpenAPI::toJsonValue(m_hardware_key_metadata));
    }
    if (m_kacls_key_metadata.isSet()) {
        obj.insert(QString("kaclsKeyMetadata"), ::OpenAPI::toJsonValue(m_kacls_key_metadata));
    }
    if (m_private_key_metadata_id_isSet) {
        obj.insert(QString("privateKeyMetadataId"), ::OpenAPI::toJsonValue(m_private_key_metadata_id));
    }
    return obj;
}

OAIHardwareKeyMetadata OAICsePrivateKeyMetadata::getHardwareKeyMetadata() const {
    return m_hardware_key_metadata;
}
void OAICsePrivateKeyMetadata::setHardwareKeyMetadata(const OAIHardwareKeyMetadata &hardware_key_metadata) {
    m_hardware_key_metadata = hardware_key_metadata;
    m_hardware_key_metadata_isSet = true;
}

bool OAICsePrivateKeyMetadata::is_hardware_key_metadata_Set() const{
    return m_hardware_key_metadata_isSet;
}

bool OAICsePrivateKeyMetadata::is_hardware_key_metadata_Valid() const{
    return m_hardware_key_metadata_isValid;
}

OAIKaclsKeyMetadata OAICsePrivateKeyMetadata::getKaclsKeyMetadata() const {
    return m_kacls_key_metadata;
}
void OAICsePrivateKeyMetadata::setKaclsKeyMetadata(const OAIKaclsKeyMetadata &kacls_key_metadata) {
    m_kacls_key_metadata = kacls_key_metadata;
    m_kacls_key_metadata_isSet = true;
}

bool OAICsePrivateKeyMetadata::is_kacls_key_metadata_Set() const{
    return m_kacls_key_metadata_isSet;
}

bool OAICsePrivateKeyMetadata::is_kacls_key_metadata_Valid() const{
    return m_kacls_key_metadata_isValid;
}

QString OAICsePrivateKeyMetadata::getPrivateKeyMetadataId() const {
    return m_private_key_metadata_id;
}
void OAICsePrivateKeyMetadata::setPrivateKeyMetadataId(const QString &private_key_metadata_id) {
    m_private_key_metadata_id = private_key_metadata_id;
    m_private_key_metadata_id_isSet = true;
}

bool OAICsePrivateKeyMetadata::is_private_key_metadata_id_Set() const{
    return m_private_key_metadata_id_isSet;
}

bool OAICsePrivateKeyMetadata::is_private_key_metadata_id_Valid() const{
    return m_private_key_metadata_id_isValid;
}

bool OAICsePrivateKeyMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hardware_key_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kacls_key_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_metadata_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsePrivateKeyMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
