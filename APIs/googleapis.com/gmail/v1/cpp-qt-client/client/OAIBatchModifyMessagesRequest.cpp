/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchModifyMessagesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchModifyMessagesRequest::OAIBatchModifyMessagesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchModifyMessagesRequest::OAIBatchModifyMessagesRequest() {
    this->initializeModel();
}

OAIBatchModifyMessagesRequest::~OAIBatchModifyMessagesRequest() {}

void OAIBatchModifyMessagesRequest::initializeModel() {

    m_add_label_ids_isSet = false;
    m_add_label_ids_isValid = false;

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_remove_label_ids_isSet = false;
    m_remove_label_ids_isValid = false;
}

void OAIBatchModifyMessagesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchModifyMessagesRequest::fromJsonObject(QJsonObject json) {

    m_add_label_ids_isValid = ::OpenAPI::fromJsonValue(m_add_label_ids, json[QString("addLabelIds")]);
    m_add_label_ids_isSet = !json[QString("addLabelIds")].isNull() && m_add_label_ids_isValid;

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_remove_label_ids_isValid = ::OpenAPI::fromJsonValue(m_remove_label_ids, json[QString("removeLabelIds")]);
    m_remove_label_ids_isSet = !json[QString("removeLabelIds")].isNull() && m_remove_label_ids_isValid;
}

QString OAIBatchModifyMessagesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchModifyMessagesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_add_label_ids.size() > 0) {
        obj.insert(QString("addLabelIds"), ::OpenAPI::toJsonValue(m_add_label_ids));
    }
    if (m_ids.size() > 0) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_remove_label_ids.size() > 0) {
        obj.insert(QString("removeLabelIds"), ::OpenAPI::toJsonValue(m_remove_label_ids));
    }
    return obj;
}

QList<QString> OAIBatchModifyMessagesRequest::getAddLabelIds() const {
    return m_add_label_ids;
}
void OAIBatchModifyMessagesRequest::setAddLabelIds(const QList<QString> &add_label_ids) {
    m_add_label_ids = add_label_ids;
    m_add_label_ids_isSet = true;
}

bool OAIBatchModifyMessagesRequest::is_add_label_ids_Set() const{
    return m_add_label_ids_isSet;
}

bool OAIBatchModifyMessagesRequest::is_add_label_ids_Valid() const{
    return m_add_label_ids_isValid;
}

QList<QString> OAIBatchModifyMessagesRequest::getIds() const {
    return m_ids;
}
void OAIBatchModifyMessagesRequest::setIds(const QList<QString> &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIBatchModifyMessagesRequest::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIBatchModifyMessagesRequest::is_ids_Valid() const{
    return m_ids_isValid;
}

QList<QString> OAIBatchModifyMessagesRequest::getRemoveLabelIds() const {
    return m_remove_label_ids;
}
void OAIBatchModifyMessagesRequest::setRemoveLabelIds(const QList<QString> &remove_label_ids) {
    m_remove_label_ids = remove_label_ids;
    m_remove_label_ids_isSet = true;
}

bool OAIBatchModifyMessagesRequest::is_remove_label_ids_Set() const{
    return m_remove_label_ids_isSet;
}

bool OAIBatchModifyMessagesRequest::is_remove_label_ids_Valid() const{
    return m_remove_label_ids_isValid;
}

bool OAIBatchModifyMessagesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_label_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_label_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchModifyMessagesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
