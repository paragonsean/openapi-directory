/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThread.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThread::OAIThread(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThread::OAIThread() {
    this->initializeModel();
}

OAIThread::~OAIThread() {}

void OAIThread::initializeModel() {

    m_history_id_isSet = false;
    m_history_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;
}

void OAIThread::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThread::fromJsonObject(QJsonObject json) {

    m_history_id_isValid = ::OpenAPI::fromJsonValue(m_history_id, json[QString("historyId")]);
    m_history_id_isSet = !json[QString("historyId")].isNull() && m_history_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;
}

QString OAIThread::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThread::asJsonObject() const {
    QJsonObject obj;
    if (m_history_id_isSet) {
        obj.insert(QString("historyId"), ::OpenAPI::toJsonValue(m_history_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_snippet_isSet) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    return obj;
}

QString OAIThread::getHistoryId() const {
    return m_history_id;
}
void OAIThread::setHistoryId(const QString &history_id) {
    m_history_id = history_id;
    m_history_id_isSet = true;
}

bool OAIThread::is_history_id_Set() const{
    return m_history_id_isSet;
}

bool OAIThread::is_history_id_Valid() const{
    return m_history_id_isValid;
}

QString OAIThread::getId() const {
    return m_id;
}
void OAIThread::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIThread::is_id_Set() const{
    return m_id_isSet;
}

bool OAIThread::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIMessage> OAIThread::getMessages() const {
    return m_messages;
}
void OAIThread::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIThread::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIThread::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAIThread::getSnippet() const {
    return m_snippet;
}
void OAIThread::setSnippet(const QString &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAIThread::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAIThread::is_snippet_Valid() const{
    return m_snippet_isValid;
}

bool OAIThread::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_history_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThread::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
