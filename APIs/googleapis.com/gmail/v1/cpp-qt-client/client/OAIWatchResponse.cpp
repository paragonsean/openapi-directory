/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWatchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWatchResponse::OAIWatchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWatchResponse::OAIWatchResponse() {
    this->initializeModel();
}

OAIWatchResponse::~OAIWatchResponse() {}

void OAIWatchResponse::initializeModel() {

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_history_id_isSet = false;
    m_history_id_isValid = false;
}

void OAIWatchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWatchResponse::fromJsonObject(QJsonObject json) {

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_history_id_isValid = ::OpenAPI::fromJsonValue(m_history_id, json[QString("historyId")]);
    m_history_id_isSet = !json[QString("historyId")].isNull() && m_history_id_isValid;
}

QString OAIWatchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWatchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_history_id_isSet) {
        obj.insert(QString("historyId"), ::OpenAPI::toJsonValue(m_history_id));
    }
    return obj;
}

QString OAIWatchResponse::getExpiration() const {
    return m_expiration;
}
void OAIWatchResponse::setExpiration(const QString &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIWatchResponse::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIWatchResponse::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAIWatchResponse::getHistoryId() const {
    return m_history_id;
}
void OAIWatchResponse::setHistoryId(const QString &history_id) {
    m_history_id = history_id;
    m_history_id_isSet = true;
}

bool OAIWatchResponse::is_history_id_Set() const{
    return m_history_id_isSet;
}

bool OAIWatchResponse::is_history_id_Valid() const{
    return m_history_id_isValid;
}

bool OAIWatchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWatchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
