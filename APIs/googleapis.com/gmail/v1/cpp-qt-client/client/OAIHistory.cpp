/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistory::OAIHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistory::OAIHistory() {
    this->initializeModel();
}

OAIHistory::~OAIHistory() {}

void OAIHistory::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_added_isSet = false;
    m_labels_added_isValid = false;

    m_labels_removed_isSet = false;
    m_labels_removed_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_messages_added_isSet = false;
    m_messages_added_isValid = false;

    m_messages_deleted_isSet = false;
    m_messages_deleted_isValid = false;
}

void OAIHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistory::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_added_isValid = ::OpenAPI::fromJsonValue(m_labels_added, json[QString("labelsAdded")]);
    m_labels_added_isSet = !json[QString("labelsAdded")].isNull() && m_labels_added_isValid;

    m_labels_removed_isValid = ::OpenAPI::fromJsonValue(m_labels_removed, json[QString("labelsRemoved")]);
    m_labels_removed_isSet = !json[QString("labelsRemoved")].isNull() && m_labels_removed_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_messages_added_isValid = ::OpenAPI::fromJsonValue(m_messages_added, json[QString("messagesAdded")]);
    m_messages_added_isSet = !json[QString("messagesAdded")].isNull() && m_messages_added_isValid;

    m_messages_deleted_isValid = ::OpenAPI::fromJsonValue(m_messages_deleted, json[QString("messagesDeleted")]);
    m_messages_deleted_isSet = !json[QString("messagesDeleted")].isNull() && m_messages_deleted_isValid;
}

QString OAIHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels_added.size() > 0) {
        obj.insert(QString("labelsAdded"), ::OpenAPI::toJsonValue(m_labels_added));
    }
    if (m_labels_removed.size() > 0) {
        obj.insert(QString("labelsRemoved"), ::OpenAPI::toJsonValue(m_labels_removed));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_messages_added.size() > 0) {
        obj.insert(QString("messagesAdded"), ::OpenAPI::toJsonValue(m_messages_added));
    }
    if (m_messages_deleted.size() > 0) {
        obj.insert(QString("messagesDeleted"), ::OpenAPI::toJsonValue(m_messages_deleted));
    }
    return obj;
}

QString OAIHistory::getId() const {
    return m_id;
}
void OAIHistory::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHistory::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHistory::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIHistoryLabelAdded> OAIHistory::getLabelsAdded() const {
    return m_labels_added;
}
void OAIHistory::setLabelsAdded(const QList<OAIHistoryLabelAdded> &labels_added) {
    m_labels_added = labels_added;
    m_labels_added_isSet = true;
}

bool OAIHistory::is_labels_added_Set() const{
    return m_labels_added_isSet;
}

bool OAIHistory::is_labels_added_Valid() const{
    return m_labels_added_isValid;
}

QList<OAIHistoryLabelRemoved> OAIHistory::getLabelsRemoved() const {
    return m_labels_removed;
}
void OAIHistory::setLabelsRemoved(const QList<OAIHistoryLabelRemoved> &labels_removed) {
    m_labels_removed = labels_removed;
    m_labels_removed_isSet = true;
}

bool OAIHistory::is_labels_removed_Set() const{
    return m_labels_removed_isSet;
}

bool OAIHistory::is_labels_removed_Valid() const{
    return m_labels_removed_isValid;
}

QList<OAIMessage> OAIHistory::getMessages() const {
    return m_messages;
}
void OAIHistory::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIHistory::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIHistory::is_messages_Valid() const{
    return m_messages_isValid;
}

QList<OAIHistoryMessageAdded> OAIHistory::getMessagesAdded() const {
    return m_messages_added;
}
void OAIHistory::setMessagesAdded(const QList<OAIHistoryMessageAdded> &messages_added) {
    m_messages_added = messages_added;
    m_messages_added_isSet = true;
}

bool OAIHistory::is_messages_added_Set() const{
    return m_messages_added_isSet;
}

bool OAIHistory::is_messages_added_Valid() const{
    return m_messages_added_isValid;
}

QList<OAIHistoryMessageDeleted> OAIHistory::getMessagesDeleted() const {
    return m_messages_deleted;
}
void OAIHistory::setMessagesDeleted(const QList<OAIHistoryMessageDeleted> &messages_deleted) {
    m_messages_deleted = messages_deleted;
    m_messages_deleted_isSet = true;
}

bool OAIHistory::is_messages_deleted_Set() const{
    return m_messages_deleted_isSet;
}

bool OAIHistory::is_messages_deleted_Valid() const{
    return m_messages_deleted_isValid;
}

bool OAIHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_added.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_removed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_added.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_deleted.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
