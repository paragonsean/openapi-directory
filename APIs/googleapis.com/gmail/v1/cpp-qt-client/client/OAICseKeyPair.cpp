/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICseKeyPair.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICseKeyPair::OAICseKeyPair(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICseKeyPair::OAICseKeyPair() {
    this->initializeModel();
}

OAICseKeyPair::~OAICseKeyPair() {}

void OAICseKeyPair::initializeModel() {

    m_disable_time_isSet = false;
    m_disable_time_isValid = false;

    m_enablement_state_isSet = false;
    m_enablement_state_isValid = false;

    m_key_pair_id_isSet = false;
    m_key_pair_id_isValid = false;

    m_pem_isSet = false;
    m_pem_isValid = false;

    m_pkcs7_isSet = false;
    m_pkcs7_isValid = false;

    m_private_key_metadata_isSet = false;
    m_private_key_metadata_isValid = false;

    m_subject_email_addresses_isSet = false;
    m_subject_email_addresses_isValid = false;
}

void OAICseKeyPair::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICseKeyPair::fromJsonObject(QJsonObject json) {

    m_disable_time_isValid = ::OpenAPI::fromJsonValue(m_disable_time, json[QString("disableTime")]);
    m_disable_time_isSet = !json[QString("disableTime")].isNull() && m_disable_time_isValid;

    m_enablement_state_isValid = ::OpenAPI::fromJsonValue(m_enablement_state, json[QString("enablementState")]);
    m_enablement_state_isSet = !json[QString("enablementState")].isNull() && m_enablement_state_isValid;

    m_key_pair_id_isValid = ::OpenAPI::fromJsonValue(m_key_pair_id, json[QString("keyPairId")]);
    m_key_pair_id_isSet = !json[QString("keyPairId")].isNull() && m_key_pair_id_isValid;

    m_pem_isValid = ::OpenAPI::fromJsonValue(m_pem, json[QString("pem")]);
    m_pem_isSet = !json[QString("pem")].isNull() && m_pem_isValid;

    m_pkcs7_isValid = ::OpenAPI::fromJsonValue(m_pkcs7, json[QString("pkcs7")]);
    m_pkcs7_isSet = !json[QString("pkcs7")].isNull() && m_pkcs7_isValid;

    m_private_key_metadata_isValid = ::OpenAPI::fromJsonValue(m_private_key_metadata, json[QString("privateKeyMetadata")]);
    m_private_key_metadata_isSet = !json[QString("privateKeyMetadata")].isNull() && m_private_key_metadata_isValid;

    m_subject_email_addresses_isValid = ::OpenAPI::fromJsonValue(m_subject_email_addresses, json[QString("subjectEmailAddresses")]);
    m_subject_email_addresses_isSet = !json[QString("subjectEmailAddresses")].isNull() && m_subject_email_addresses_isValid;
}

QString OAICseKeyPair::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICseKeyPair::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_time_isSet) {
        obj.insert(QString("disableTime"), ::OpenAPI::toJsonValue(m_disable_time));
    }
    if (m_enablement_state_isSet) {
        obj.insert(QString("enablementState"), ::OpenAPI::toJsonValue(m_enablement_state));
    }
    if (m_key_pair_id_isSet) {
        obj.insert(QString("keyPairId"), ::OpenAPI::toJsonValue(m_key_pair_id));
    }
    if (m_pem_isSet) {
        obj.insert(QString("pem"), ::OpenAPI::toJsonValue(m_pem));
    }
    if (m_pkcs7_isSet) {
        obj.insert(QString("pkcs7"), ::OpenAPI::toJsonValue(m_pkcs7));
    }
    if (m_private_key_metadata.size() > 0) {
        obj.insert(QString("privateKeyMetadata"), ::OpenAPI::toJsonValue(m_private_key_metadata));
    }
    if (m_subject_email_addresses.size() > 0) {
        obj.insert(QString("subjectEmailAddresses"), ::OpenAPI::toJsonValue(m_subject_email_addresses));
    }
    return obj;
}

QString OAICseKeyPair::getDisableTime() const {
    return m_disable_time;
}
void OAICseKeyPair::setDisableTime(const QString &disable_time) {
    m_disable_time = disable_time;
    m_disable_time_isSet = true;
}

bool OAICseKeyPair::is_disable_time_Set() const{
    return m_disable_time_isSet;
}

bool OAICseKeyPair::is_disable_time_Valid() const{
    return m_disable_time_isValid;
}

QString OAICseKeyPair::getEnablementState() const {
    return m_enablement_state;
}
void OAICseKeyPair::setEnablementState(const QString &enablement_state) {
    m_enablement_state = enablement_state;
    m_enablement_state_isSet = true;
}

bool OAICseKeyPair::is_enablement_state_Set() const{
    return m_enablement_state_isSet;
}

bool OAICseKeyPair::is_enablement_state_Valid() const{
    return m_enablement_state_isValid;
}

QString OAICseKeyPair::getKeyPairId() const {
    return m_key_pair_id;
}
void OAICseKeyPair::setKeyPairId(const QString &key_pair_id) {
    m_key_pair_id = key_pair_id;
    m_key_pair_id_isSet = true;
}

bool OAICseKeyPair::is_key_pair_id_Set() const{
    return m_key_pair_id_isSet;
}

bool OAICseKeyPair::is_key_pair_id_Valid() const{
    return m_key_pair_id_isValid;
}

QString OAICseKeyPair::getPem() const {
    return m_pem;
}
void OAICseKeyPair::setPem(const QString &pem) {
    m_pem = pem;
    m_pem_isSet = true;
}

bool OAICseKeyPair::is_pem_Set() const{
    return m_pem_isSet;
}

bool OAICseKeyPair::is_pem_Valid() const{
    return m_pem_isValid;
}

QString OAICseKeyPair::getPkcs7() const {
    return m_pkcs7;
}
void OAICseKeyPair::setPkcs7(const QString &pkcs7) {
    m_pkcs7 = pkcs7;
    m_pkcs7_isSet = true;
}

bool OAICseKeyPair::is_pkcs7_Set() const{
    return m_pkcs7_isSet;
}

bool OAICseKeyPair::is_pkcs7_Valid() const{
    return m_pkcs7_isValid;
}

QList<OAICsePrivateKeyMetadata> OAICseKeyPair::getPrivateKeyMetadata() const {
    return m_private_key_metadata;
}
void OAICseKeyPair::setPrivateKeyMetadata(const QList<OAICsePrivateKeyMetadata> &private_key_metadata) {
    m_private_key_metadata = private_key_metadata;
    m_private_key_metadata_isSet = true;
}

bool OAICseKeyPair::is_private_key_metadata_Set() const{
    return m_private_key_metadata_isSet;
}

bool OAICseKeyPair::is_private_key_metadata_Valid() const{
    return m_private_key_metadata_isValid;
}

QList<QString> OAICseKeyPair::getSubjectEmailAddresses() const {
    return m_subject_email_addresses;
}
void OAICseKeyPair::setSubjectEmailAddresses(const QList<QString> &subject_email_addresses) {
    m_subject_email_addresses = subject_email_addresses;
    m_subject_email_addresses_isSet = true;
}

bool OAICseKeyPair::is_subject_email_addresses_Set() const{
    return m_subject_email_addresses_isSet;
}

bool OAICseKeyPair::is_subject_email_addresses_Valid() const{
    return m_subject_email_addresses_isValid;
}

bool OAICseKeyPair::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enablement_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_pair_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pkcs7_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_email_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICseKeyPair::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
