/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVacationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVacationSettings::OAIVacationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVacationSettings::OAIVacationSettings() {
    this->initializeModel();
}

OAIVacationSettings::~OAIVacationSettings() {}

void OAIVacationSettings::initializeModel() {

    m_enable_auto_reply_isSet = false;
    m_enable_auto_reply_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_response_body_html_isSet = false;
    m_response_body_html_isValid = false;

    m_response_body_plain_text_isSet = false;
    m_response_body_plain_text_isValid = false;

    m_response_subject_isSet = false;
    m_response_subject_isValid = false;

    m_restrict_to_contacts_isSet = false;
    m_restrict_to_contacts_isValid = false;

    m_restrict_to_domain_isSet = false;
    m_restrict_to_domain_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIVacationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVacationSettings::fromJsonObject(QJsonObject json) {

    m_enable_auto_reply_isValid = ::OpenAPI::fromJsonValue(m_enable_auto_reply, json[QString("enableAutoReply")]);
    m_enable_auto_reply_isSet = !json[QString("enableAutoReply")].isNull() && m_enable_auto_reply_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_response_body_html_isValid = ::OpenAPI::fromJsonValue(m_response_body_html, json[QString("responseBodyHtml")]);
    m_response_body_html_isSet = !json[QString("responseBodyHtml")].isNull() && m_response_body_html_isValid;

    m_response_body_plain_text_isValid = ::OpenAPI::fromJsonValue(m_response_body_plain_text, json[QString("responseBodyPlainText")]);
    m_response_body_plain_text_isSet = !json[QString("responseBodyPlainText")].isNull() && m_response_body_plain_text_isValid;

    m_response_subject_isValid = ::OpenAPI::fromJsonValue(m_response_subject, json[QString("responseSubject")]);
    m_response_subject_isSet = !json[QString("responseSubject")].isNull() && m_response_subject_isValid;

    m_restrict_to_contacts_isValid = ::OpenAPI::fromJsonValue(m_restrict_to_contacts, json[QString("restrictToContacts")]);
    m_restrict_to_contacts_isSet = !json[QString("restrictToContacts")].isNull() && m_restrict_to_contacts_isValid;

    m_restrict_to_domain_isValid = ::OpenAPI::fromJsonValue(m_restrict_to_domain, json[QString("restrictToDomain")]);
    m_restrict_to_domain_isSet = !json[QString("restrictToDomain")].isNull() && m_restrict_to_domain_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIVacationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVacationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_auto_reply_isSet) {
        obj.insert(QString("enableAutoReply"), ::OpenAPI::toJsonValue(m_enable_auto_reply));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_response_body_html_isSet) {
        obj.insert(QString("responseBodyHtml"), ::OpenAPI::toJsonValue(m_response_body_html));
    }
    if (m_response_body_plain_text_isSet) {
        obj.insert(QString("responseBodyPlainText"), ::OpenAPI::toJsonValue(m_response_body_plain_text));
    }
    if (m_response_subject_isSet) {
        obj.insert(QString("responseSubject"), ::OpenAPI::toJsonValue(m_response_subject));
    }
    if (m_restrict_to_contacts_isSet) {
        obj.insert(QString("restrictToContacts"), ::OpenAPI::toJsonValue(m_restrict_to_contacts));
    }
    if (m_restrict_to_domain_isSet) {
        obj.insert(QString("restrictToDomain"), ::OpenAPI::toJsonValue(m_restrict_to_domain));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

bool OAIVacationSettings::isEnableAutoReply() const {
    return m_enable_auto_reply;
}
void OAIVacationSettings::setEnableAutoReply(const bool &enable_auto_reply) {
    m_enable_auto_reply = enable_auto_reply;
    m_enable_auto_reply_isSet = true;
}

bool OAIVacationSettings::is_enable_auto_reply_Set() const{
    return m_enable_auto_reply_isSet;
}

bool OAIVacationSettings::is_enable_auto_reply_Valid() const{
    return m_enable_auto_reply_isValid;
}

QString OAIVacationSettings::getEndTime() const {
    return m_end_time;
}
void OAIVacationSettings::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIVacationSettings::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIVacationSettings::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIVacationSettings::getResponseBodyHtml() const {
    return m_response_body_html;
}
void OAIVacationSettings::setResponseBodyHtml(const QString &response_body_html) {
    m_response_body_html = response_body_html;
    m_response_body_html_isSet = true;
}

bool OAIVacationSettings::is_response_body_html_Set() const{
    return m_response_body_html_isSet;
}

bool OAIVacationSettings::is_response_body_html_Valid() const{
    return m_response_body_html_isValid;
}

QString OAIVacationSettings::getResponseBodyPlainText() const {
    return m_response_body_plain_text;
}
void OAIVacationSettings::setResponseBodyPlainText(const QString &response_body_plain_text) {
    m_response_body_plain_text = response_body_plain_text;
    m_response_body_plain_text_isSet = true;
}

bool OAIVacationSettings::is_response_body_plain_text_Set() const{
    return m_response_body_plain_text_isSet;
}

bool OAIVacationSettings::is_response_body_plain_text_Valid() const{
    return m_response_body_plain_text_isValid;
}

QString OAIVacationSettings::getResponseSubject() const {
    return m_response_subject;
}
void OAIVacationSettings::setResponseSubject(const QString &response_subject) {
    m_response_subject = response_subject;
    m_response_subject_isSet = true;
}

bool OAIVacationSettings::is_response_subject_Set() const{
    return m_response_subject_isSet;
}

bool OAIVacationSettings::is_response_subject_Valid() const{
    return m_response_subject_isValid;
}

bool OAIVacationSettings::isRestrictToContacts() const {
    return m_restrict_to_contacts;
}
void OAIVacationSettings::setRestrictToContacts(const bool &restrict_to_contacts) {
    m_restrict_to_contacts = restrict_to_contacts;
    m_restrict_to_contacts_isSet = true;
}

bool OAIVacationSettings::is_restrict_to_contacts_Set() const{
    return m_restrict_to_contacts_isSet;
}

bool OAIVacationSettings::is_restrict_to_contacts_Valid() const{
    return m_restrict_to_contacts_isValid;
}

bool OAIVacationSettings::isRestrictToDomain() const {
    return m_restrict_to_domain;
}
void OAIVacationSettings::setRestrictToDomain(const bool &restrict_to_domain) {
    m_restrict_to_domain = restrict_to_domain;
    m_restrict_to_domain_isSet = true;
}

bool OAIVacationSettings::is_restrict_to_domain_Set() const{
    return m_restrict_to_domain_isSet;
}

bool OAIVacationSettings::is_restrict_to_domain_Valid() const{
    return m_restrict_to_domain_isValid;
}

QString OAIVacationSettings::getStartTime() const {
    return m_start_time;
}
void OAIVacationSettings::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIVacationSettings::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIVacationSettings::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIVacationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_auto_reply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_body_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_body_plain_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrict_to_contacts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrict_to_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVacationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
