/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImapSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImapSettings::OAIImapSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImapSettings::OAIImapSettings() {
    this->initializeModel();
}

OAIImapSettings::~OAIImapSettings() {}

void OAIImapSettings::initializeModel() {

    m_auto_expunge_isSet = false;
    m_auto_expunge_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_expunge_behavior_isSet = false;
    m_expunge_behavior_isValid = false;

    m_max_folder_size_isSet = false;
    m_max_folder_size_isValid = false;
}

void OAIImapSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImapSettings::fromJsonObject(QJsonObject json) {

    m_auto_expunge_isValid = ::OpenAPI::fromJsonValue(m_auto_expunge, json[QString("autoExpunge")]);
    m_auto_expunge_isSet = !json[QString("autoExpunge")].isNull() && m_auto_expunge_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_expunge_behavior_isValid = ::OpenAPI::fromJsonValue(m_expunge_behavior, json[QString("expungeBehavior")]);
    m_expunge_behavior_isSet = !json[QString("expungeBehavior")].isNull() && m_expunge_behavior_isValid;

    m_max_folder_size_isValid = ::OpenAPI::fromJsonValue(m_max_folder_size, json[QString("maxFolderSize")]);
    m_max_folder_size_isSet = !json[QString("maxFolderSize")].isNull() && m_max_folder_size_isValid;
}

QString OAIImapSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImapSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_expunge_isSet) {
        obj.insert(QString("autoExpunge"), ::OpenAPI::toJsonValue(m_auto_expunge));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_expunge_behavior_isSet) {
        obj.insert(QString("expungeBehavior"), ::OpenAPI::toJsonValue(m_expunge_behavior));
    }
    if (m_max_folder_size_isSet) {
        obj.insert(QString("maxFolderSize"), ::OpenAPI::toJsonValue(m_max_folder_size));
    }
    return obj;
}

bool OAIImapSettings::isAutoExpunge() const {
    return m_auto_expunge;
}
void OAIImapSettings::setAutoExpunge(const bool &auto_expunge) {
    m_auto_expunge = auto_expunge;
    m_auto_expunge_isSet = true;
}

bool OAIImapSettings::is_auto_expunge_Set() const{
    return m_auto_expunge_isSet;
}

bool OAIImapSettings::is_auto_expunge_Valid() const{
    return m_auto_expunge_isValid;
}

bool OAIImapSettings::isEnabled() const {
    return m_enabled;
}
void OAIImapSettings::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIImapSettings::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIImapSettings::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIImapSettings::getExpungeBehavior() const {
    return m_expunge_behavior;
}
void OAIImapSettings::setExpungeBehavior(const QString &expunge_behavior) {
    m_expunge_behavior = expunge_behavior;
    m_expunge_behavior_isSet = true;
}

bool OAIImapSettings::is_expunge_behavior_Set() const{
    return m_expunge_behavior_isSet;
}

bool OAIImapSettings::is_expunge_behavior_Valid() const{
    return m_expunge_behavior_isValid;
}

qint32 OAIImapSettings::getMaxFolderSize() const {
    return m_max_folder_size;
}
void OAIImapSettings::setMaxFolderSize(const qint32 &max_folder_size) {
    m_max_folder_size = max_folder_size;
    m_max_folder_size_isSet = true;
}

bool OAIImapSettings::is_max_folder_size_Set() const{
    return m_max_folder_size_isSet;
}

bool OAIImapSettings::is_max_folder_size_Valid() const{
    return m_max_folder_size_isValid;
}

bool OAIImapSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_expunge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expunge_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_folder_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImapSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
