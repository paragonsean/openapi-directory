/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISmimeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISmimeInfo::OAISmimeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISmimeInfo::OAISmimeInfo() {
    this->initializeModel();
}

OAISmimeInfo::~OAISmimeInfo() {}

void OAISmimeInfo::initializeModel() {

    m_encrypted_key_password_isSet = false;
    m_encrypted_key_password_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_issuer_cn_isSet = false;
    m_issuer_cn_isValid = false;

    m_pem_isSet = false;
    m_pem_isValid = false;

    m_pkcs12_isSet = false;
    m_pkcs12_isValid = false;
}

void OAISmimeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISmimeInfo::fromJsonObject(QJsonObject json) {

    m_encrypted_key_password_isValid = ::OpenAPI::fromJsonValue(m_encrypted_key_password, json[QString("encryptedKeyPassword")]);
    m_encrypted_key_password_isSet = !json[QString("encryptedKeyPassword")].isNull() && m_encrypted_key_password_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_issuer_cn_isValid = ::OpenAPI::fromJsonValue(m_issuer_cn, json[QString("issuerCn")]);
    m_issuer_cn_isSet = !json[QString("issuerCn")].isNull() && m_issuer_cn_isValid;

    m_pem_isValid = ::OpenAPI::fromJsonValue(m_pem, json[QString("pem")]);
    m_pem_isSet = !json[QString("pem")].isNull() && m_pem_isValid;

    m_pkcs12_isValid = ::OpenAPI::fromJsonValue(m_pkcs12, json[QString("pkcs12")]);
    m_pkcs12_isSet = !json[QString("pkcs12")].isNull() && m_pkcs12_isValid;
}

QString OAISmimeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISmimeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_encrypted_key_password_isSet) {
        obj.insert(QString("encryptedKeyPassword"), ::OpenAPI::toJsonValue(m_encrypted_key_password));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_issuer_cn_isSet) {
        obj.insert(QString("issuerCn"), ::OpenAPI::toJsonValue(m_issuer_cn));
    }
    if (m_pem_isSet) {
        obj.insert(QString("pem"), ::OpenAPI::toJsonValue(m_pem));
    }
    if (m_pkcs12_isSet) {
        obj.insert(QString("pkcs12"), ::OpenAPI::toJsonValue(m_pkcs12));
    }
    return obj;
}

QString OAISmimeInfo::getEncryptedKeyPassword() const {
    return m_encrypted_key_password;
}
void OAISmimeInfo::setEncryptedKeyPassword(const QString &encrypted_key_password) {
    m_encrypted_key_password = encrypted_key_password;
    m_encrypted_key_password_isSet = true;
}

bool OAISmimeInfo::is_encrypted_key_password_Set() const{
    return m_encrypted_key_password_isSet;
}

bool OAISmimeInfo::is_encrypted_key_password_Valid() const{
    return m_encrypted_key_password_isValid;
}

QString OAISmimeInfo::getExpiration() const {
    return m_expiration;
}
void OAISmimeInfo::setExpiration(const QString &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAISmimeInfo::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAISmimeInfo::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAISmimeInfo::getId() const {
    return m_id;
}
void OAISmimeInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISmimeInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAISmimeInfo::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISmimeInfo::isIsDefault() const {
    return m_is_default;
}
void OAISmimeInfo::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAISmimeInfo::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAISmimeInfo::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAISmimeInfo::getIssuerCn() const {
    return m_issuer_cn;
}
void OAISmimeInfo::setIssuerCn(const QString &issuer_cn) {
    m_issuer_cn = issuer_cn;
    m_issuer_cn_isSet = true;
}

bool OAISmimeInfo::is_issuer_cn_Set() const{
    return m_issuer_cn_isSet;
}

bool OAISmimeInfo::is_issuer_cn_Valid() const{
    return m_issuer_cn_isValid;
}

QString OAISmimeInfo::getPem() const {
    return m_pem;
}
void OAISmimeInfo::setPem(const QString &pem) {
    m_pem = pem;
    m_pem_isSet = true;
}

bool OAISmimeInfo::is_pem_Set() const{
    return m_pem_isSet;
}

bool OAISmimeInfo::is_pem_Valid() const{
    return m_pem_isValid;
}

QByteArray OAISmimeInfo::getPkcs12() const {
    return m_pkcs12;
}
void OAISmimeInfo::setPkcs12(const QByteArray &pkcs12) {
    m_pkcs12 = pkcs12;
    m_pkcs12_isSet = true;
}

bool OAISmimeInfo::is_pkcs12_Set() const{
    return m_pkcs12_isSet;
}

bool OAISmimeInfo::is_pkcs12_Valid() const{
    return m_pkcs12_isValid;
}

bool OAISmimeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encrypted_key_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_cn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pkcs12_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISmimeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
