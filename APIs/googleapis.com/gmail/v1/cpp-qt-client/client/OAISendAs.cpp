/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendAs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendAs::OAISendAs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendAs::OAISendAs() {
    this->initializeModel();
}

OAISendAs::~OAISendAs() {}

void OAISendAs::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_primary_isSet = false;
    m_is_primary_isValid = false;

    m_reply_to_address_isSet = false;
    m_reply_to_address_isValid = false;

    m_send_as_email_isSet = false;
    m_send_as_email_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_smtp_msa_isSet = false;
    m_smtp_msa_isValid = false;

    m_treat_as_alias_isSet = false;
    m_treat_as_alias_isValid = false;

    m_verification_status_isSet = false;
    m_verification_status_isValid = false;
}

void OAISendAs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendAs::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_is_primary_isValid = ::OpenAPI::fromJsonValue(m_is_primary, json[QString("isPrimary")]);
    m_is_primary_isSet = !json[QString("isPrimary")].isNull() && m_is_primary_isValid;

    m_reply_to_address_isValid = ::OpenAPI::fromJsonValue(m_reply_to_address, json[QString("replyToAddress")]);
    m_reply_to_address_isSet = !json[QString("replyToAddress")].isNull() && m_reply_to_address_isValid;

    m_send_as_email_isValid = ::OpenAPI::fromJsonValue(m_send_as_email, json[QString("sendAsEmail")]);
    m_send_as_email_isSet = !json[QString("sendAsEmail")].isNull() && m_send_as_email_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_smtp_msa_isValid = ::OpenAPI::fromJsonValue(m_smtp_msa, json[QString("smtpMsa")]);
    m_smtp_msa_isSet = !json[QString("smtpMsa")].isNull() && m_smtp_msa_isValid;

    m_treat_as_alias_isValid = ::OpenAPI::fromJsonValue(m_treat_as_alias, json[QString("treatAsAlias")]);
    m_treat_as_alias_isSet = !json[QString("treatAsAlias")].isNull() && m_treat_as_alias_isValid;

    m_verification_status_isValid = ::OpenAPI::fromJsonValue(m_verification_status, json[QString("verificationStatus")]);
    m_verification_status_isSet = !json[QString("verificationStatus")].isNull() && m_verification_status_isValid;
}

QString OAISendAs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendAs::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_primary_isSet) {
        obj.insert(QString("isPrimary"), ::OpenAPI::toJsonValue(m_is_primary));
    }
    if (m_reply_to_address_isSet) {
        obj.insert(QString("replyToAddress"), ::OpenAPI::toJsonValue(m_reply_to_address));
    }
    if (m_send_as_email_isSet) {
        obj.insert(QString("sendAsEmail"), ::OpenAPI::toJsonValue(m_send_as_email));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_smtp_msa.isSet()) {
        obj.insert(QString("smtpMsa"), ::OpenAPI::toJsonValue(m_smtp_msa));
    }
    if (m_treat_as_alias_isSet) {
        obj.insert(QString("treatAsAlias"), ::OpenAPI::toJsonValue(m_treat_as_alias));
    }
    if (m_verification_status_isSet) {
        obj.insert(QString("verificationStatus"), ::OpenAPI::toJsonValue(m_verification_status));
    }
    return obj;
}

QString OAISendAs::getDisplayName() const {
    return m_display_name;
}
void OAISendAs::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISendAs::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISendAs::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAISendAs::isIsDefault() const {
    return m_is_default;
}
void OAISendAs::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAISendAs::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAISendAs::is_is_default_Valid() const{
    return m_is_default_isValid;
}

bool OAISendAs::isIsPrimary() const {
    return m_is_primary;
}
void OAISendAs::setIsPrimary(const bool &is_primary) {
    m_is_primary = is_primary;
    m_is_primary_isSet = true;
}

bool OAISendAs::is_is_primary_Set() const{
    return m_is_primary_isSet;
}

bool OAISendAs::is_is_primary_Valid() const{
    return m_is_primary_isValid;
}

QString OAISendAs::getReplyToAddress() const {
    return m_reply_to_address;
}
void OAISendAs::setReplyToAddress(const QString &reply_to_address) {
    m_reply_to_address = reply_to_address;
    m_reply_to_address_isSet = true;
}

bool OAISendAs::is_reply_to_address_Set() const{
    return m_reply_to_address_isSet;
}

bool OAISendAs::is_reply_to_address_Valid() const{
    return m_reply_to_address_isValid;
}

QString OAISendAs::getSendAsEmail() const {
    return m_send_as_email;
}
void OAISendAs::setSendAsEmail(const QString &send_as_email) {
    m_send_as_email = send_as_email;
    m_send_as_email_isSet = true;
}

bool OAISendAs::is_send_as_email_Set() const{
    return m_send_as_email_isSet;
}

bool OAISendAs::is_send_as_email_Valid() const{
    return m_send_as_email_isValid;
}

QString OAISendAs::getSignature() const {
    return m_signature;
}
void OAISendAs::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAISendAs::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAISendAs::is_signature_Valid() const{
    return m_signature_isValid;
}

OAISmtpMsa OAISendAs::getSmtpMsa() const {
    return m_smtp_msa;
}
void OAISendAs::setSmtpMsa(const OAISmtpMsa &smtp_msa) {
    m_smtp_msa = smtp_msa;
    m_smtp_msa_isSet = true;
}

bool OAISendAs::is_smtp_msa_Set() const{
    return m_smtp_msa_isSet;
}

bool OAISendAs::is_smtp_msa_Valid() const{
    return m_smtp_msa_isValid;
}

bool OAISendAs::isTreatAsAlias() const {
    return m_treat_as_alias;
}
void OAISendAs::setTreatAsAlias(const bool &treat_as_alias) {
    m_treat_as_alias = treat_as_alias;
    m_treat_as_alias_isSet = true;
}

bool OAISendAs::is_treat_as_alias_Set() const{
    return m_treat_as_alias_isSet;
}

bool OAISendAs::is_treat_as_alias_Valid() const{
    return m_treat_as_alias_isValid;
}

QString OAISendAs::getVerificationStatus() const {
    return m_verification_status;
}
void OAISendAs::setVerificationStatus(const QString &verification_status) {
    m_verification_status = verification_status;
    m_verification_status_isSet = true;
}

bool OAISendAs::is_verification_status_Set() const{
    return m_verification_status_isSet;
}

bool OAISendAs::is_verification_status_Valid() const{
    return m_verification_status_isValid;
}

bool OAISendAs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_as_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_msa.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_treat_as_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendAs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
