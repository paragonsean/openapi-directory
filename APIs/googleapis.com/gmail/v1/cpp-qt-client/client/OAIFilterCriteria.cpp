/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterCriteria::OAIFilterCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterCriteria::OAIFilterCriteria() {
    this->initializeModel();
}

OAIFilterCriteria::~OAIFilterCriteria() {}

void OAIFilterCriteria::initializeModel() {

    m_exclude_chats_isSet = false;
    m_exclude_chats_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_has_attachment_isSet = false;
    m_has_attachment_isValid = false;

    m_negated_query_isSet = false;
    m_negated_query_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_size_comparison_isSet = false;
    m_size_comparison_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIFilterCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterCriteria::fromJsonObject(QJsonObject json) {

    m_exclude_chats_isValid = ::OpenAPI::fromJsonValue(m_exclude_chats, json[QString("excludeChats")]);
    m_exclude_chats_isSet = !json[QString("excludeChats")].isNull() && m_exclude_chats_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_has_attachment_isValid = ::OpenAPI::fromJsonValue(m_has_attachment, json[QString("hasAttachment")]);
    m_has_attachment_isSet = !json[QString("hasAttachment")].isNull() && m_has_attachment_isValid;

    m_negated_query_isValid = ::OpenAPI::fromJsonValue(m_negated_query, json[QString("negatedQuery")]);
    m_negated_query_isSet = !json[QString("negatedQuery")].isNull() && m_negated_query_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_size_comparison_isValid = ::OpenAPI::fromJsonValue(m_size_comparison, json[QString("sizeComparison")]);
    m_size_comparison_isSet = !json[QString("sizeComparison")].isNull() && m_size_comparison_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIFilterCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_exclude_chats_isSet) {
        obj.insert(QString("excludeChats"), ::OpenAPI::toJsonValue(m_exclude_chats));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_has_attachment_isSet) {
        obj.insert(QString("hasAttachment"), ::OpenAPI::toJsonValue(m_has_attachment));
    }
    if (m_negated_query_isSet) {
        obj.insert(QString("negatedQuery"), ::OpenAPI::toJsonValue(m_negated_query));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_size_comparison_isSet) {
        obj.insert(QString("sizeComparison"), ::OpenAPI::toJsonValue(m_size_comparison));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

bool OAIFilterCriteria::isExcludeChats() const {
    return m_exclude_chats;
}
void OAIFilterCriteria::setExcludeChats(const bool &exclude_chats) {
    m_exclude_chats = exclude_chats;
    m_exclude_chats_isSet = true;
}

bool OAIFilterCriteria::is_exclude_chats_Set() const{
    return m_exclude_chats_isSet;
}

bool OAIFilterCriteria::is_exclude_chats_Valid() const{
    return m_exclude_chats_isValid;
}

QString OAIFilterCriteria::getFrom() const {
    return m_from;
}
void OAIFilterCriteria::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIFilterCriteria::is_from_Set() const{
    return m_from_isSet;
}

bool OAIFilterCriteria::is_from_Valid() const{
    return m_from_isValid;
}

bool OAIFilterCriteria::isHasAttachment() const {
    return m_has_attachment;
}
void OAIFilterCriteria::setHasAttachment(const bool &has_attachment) {
    m_has_attachment = has_attachment;
    m_has_attachment_isSet = true;
}

bool OAIFilterCriteria::is_has_attachment_Set() const{
    return m_has_attachment_isSet;
}

bool OAIFilterCriteria::is_has_attachment_Valid() const{
    return m_has_attachment_isValid;
}

QString OAIFilterCriteria::getNegatedQuery() const {
    return m_negated_query;
}
void OAIFilterCriteria::setNegatedQuery(const QString &negated_query) {
    m_negated_query = negated_query;
    m_negated_query_isSet = true;
}

bool OAIFilterCriteria::is_negated_query_Set() const{
    return m_negated_query_isSet;
}

bool OAIFilterCriteria::is_negated_query_Valid() const{
    return m_negated_query_isValid;
}

QString OAIFilterCriteria::getQuery() const {
    return m_query;
}
void OAIFilterCriteria::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIFilterCriteria::is_query_Set() const{
    return m_query_isSet;
}

bool OAIFilterCriteria::is_query_Valid() const{
    return m_query_isValid;
}

qint32 OAIFilterCriteria::getSize() const {
    return m_size;
}
void OAIFilterCriteria::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIFilterCriteria::is_size_Set() const{
    return m_size_isSet;
}

bool OAIFilterCriteria::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIFilterCriteria::getSizeComparison() const {
    return m_size_comparison;
}
void OAIFilterCriteria::setSizeComparison(const QString &size_comparison) {
    m_size_comparison = size_comparison;
    m_size_comparison_isSet = true;
}

bool OAIFilterCriteria::is_size_comparison_Set() const{
    return m_size_comparison_isSet;
}

bool OAIFilterCriteria::is_size_comparison_Valid() const{
    return m_size_comparison_isValid;
}

QString OAIFilterCriteria::getSubject() const {
    return m_subject;
}
void OAIFilterCriteria::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIFilterCriteria::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIFilterCriteria::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIFilterCriteria::getTo() const {
    return m_to;
}
void OAIFilterCriteria::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIFilterCriteria::is_to_Set() const{
    return m_to_isSet;
}

bool OAIFilterCriteria::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIFilterCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclude_chats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negated_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_comparison_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
