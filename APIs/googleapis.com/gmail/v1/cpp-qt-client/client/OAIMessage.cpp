/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_history_id_isSet = false;
    m_history_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_internal_date_isSet = false;
    m_internal_date_isValid = false;

    m_label_ids_isSet = false;
    m_label_ids_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_raw_isSet = false;
    m_raw_isValid = false;

    m_size_estimate_isSet = false;
    m_size_estimate_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;

    m_thread_id_isSet = false;
    m_thread_id_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_history_id_isValid = ::OpenAPI::fromJsonValue(m_history_id, json[QString("historyId")]);
    m_history_id_isSet = !json[QString("historyId")].isNull() && m_history_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_internal_date_isValid = ::OpenAPI::fromJsonValue(m_internal_date, json[QString("internalDate")]);
    m_internal_date_isSet = !json[QString("internalDate")].isNull() && m_internal_date_isValid;

    m_label_ids_isValid = ::OpenAPI::fromJsonValue(m_label_ids, json[QString("labelIds")]);
    m_label_ids_isSet = !json[QString("labelIds")].isNull() && m_label_ids_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_raw_isValid = ::OpenAPI::fromJsonValue(m_raw, json[QString("raw")]);
    m_raw_isSet = !json[QString("raw")].isNull() && m_raw_isValid;

    m_size_estimate_isValid = ::OpenAPI::fromJsonValue(m_size_estimate, json[QString("sizeEstimate")]);
    m_size_estimate_isSet = !json[QString("sizeEstimate")].isNull() && m_size_estimate_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;

    m_thread_id_isValid = ::OpenAPI::fromJsonValue(m_thread_id, json[QString("threadId")]);
    m_thread_id_isSet = !json[QString("threadId")].isNull() && m_thread_id_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_history_id_isSet) {
        obj.insert(QString("historyId"), ::OpenAPI::toJsonValue(m_history_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_internal_date_isSet) {
        obj.insert(QString("internalDate"), ::OpenAPI::toJsonValue(m_internal_date));
    }
    if (m_label_ids.size() > 0) {
        obj.insert(QString("labelIds"), ::OpenAPI::toJsonValue(m_label_ids));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_raw_isSet) {
        obj.insert(QString("raw"), ::OpenAPI::toJsonValue(m_raw));
    }
    if (m_size_estimate_isSet) {
        obj.insert(QString("sizeEstimate"), ::OpenAPI::toJsonValue(m_size_estimate));
    }
    if (m_snippet_isSet) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    if (m_thread_id_isSet) {
        obj.insert(QString("threadId"), ::OpenAPI::toJsonValue(m_thread_id));
    }
    return obj;
}

QString OAIMessage::getHistoryId() const {
    return m_history_id;
}
void OAIMessage::setHistoryId(const QString &history_id) {
    m_history_id = history_id;
    m_history_id_isSet = true;
}

bool OAIMessage::is_history_id_Set() const{
    return m_history_id_isSet;
}

bool OAIMessage::is_history_id_Valid() const{
    return m_history_id_isValid;
}

QString OAIMessage::getId() const {
    return m_id;
}
void OAIMessage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMessage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMessage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMessage::getInternalDate() const {
    return m_internal_date;
}
void OAIMessage::setInternalDate(const QString &internal_date) {
    m_internal_date = internal_date;
    m_internal_date_isSet = true;
}

bool OAIMessage::is_internal_date_Set() const{
    return m_internal_date_isSet;
}

bool OAIMessage::is_internal_date_Valid() const{
    return m_internal_date_isValid;
}

QList<QString> OAIMessage::getLabelIds() const {
    return m_label_ids;
}
void OAIMessage::setLabelIds(const QList<QString> &label_ids) {
    m_label_ids = label_ids;
    m_label_ids_isSet = true;
}

bool OAIMessage::is_label_ids_Set() const{
    return m_label_ids_isSet;
}

bool OAIMessage::is_label_ids_Valid() const{
    return m_label_ids_isValid;
}

OAIMessagePart OAIMessage::getPayload() const {
    return m_payload;
}
void OAIMessage::setPayload(const OAIMessagePart &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIMessage::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIMessage::is_payload_Valid() const{
    return m_payload_isValid;
}

QByteArray OAIMessage::getRaw() const {
    return m_raw;
}
void OAIMessage::setRaw(const QByteArray &raw) {
    m_raw = raw;
    m_raw_isSet = true;
}

bool OAIMessage::is_raw_Set() const{
    return m_raw_isSet;
}

bool OAIMessage::is_raw_Valid() const{
    return m_raw_isValid;
}

qint32 OAIMessage::getSizeEstimate() const {
    return m_size_estimate;
}
void OAIMessage::setSizeEstimate(const qint32 &size_estimate) {
    m_size_estimate = size_estimate;
    m_size_estimate_isSet = true;
}

bool OAIMessage::is_size_estimate_Set() const{
    return m_size_estimate_isSet;
}

bool OAIMessage::is_size_estimate_Valid() const{
    return m_size_estimate_isValid;
}

QString OAIMessage::getSnippet() const {
    return m_snippet;
}
void OAIMessage::setSnippet(const QString &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAIMessage::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAIMessage::is_snippet_Valid() const{
    return m_snippet_isValid;
}

QString OAIMessage::getThreadId() const {
    return m_thread_id;
}
void OAIMessage::setThreadId(const QString &thread_id) {
    m_thread_id = thread_id;
    m_thread_id_isSet = true;
}

bool OAIMessage::is_thread_id_Set() const{
    return m_thread_id_isSet;
}

bool OAIMessage::is_thread_id_Valid() const{
    return m_thread_id_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_history_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
