/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabel::OAILabel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabel::OAILabel() {
    this->initializeModel();
}

OAILabel::~OAILabel() {}

void OAILabel::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_list_visibility_isSet = false;
    m_label_list_visibility_isValid = false;

    m_message_list_visibility_isSet = false;
    m_message_list_visibility_isValid = false;

    m_messages_total_isSet = false;
    m_messages_total_isValid = false;

    m_messages_unread_isSet = false;
    m_messages_unread_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_threads_total_isSet = false;
    m_threads_total_isValid = false;

    m_threads_unread_isSet = false;
    m_threads_unread_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILabel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabel::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_list_visibility_isValid = ::OpenAPI::fromJsonValue(m_label_list_visibility, json[QString("labelListVisibility")]);
    m_label_list_visibility_isSet = !json[QString("labelListVisibility")].isNull() && m_label_list_visibility_isValid;

    m_message_list_visibility_isValid = ::OpenAPI::fromJsonValue(m_message_list_visibility, json[QString("messageListVisibility")]);
    m_message_list_visibility_isSet = !json[QString("messageListVisibility")].isNull() && m_message_list_visibility_isValid;

    m_messages_total_isValid = ::OpenAPI::fromJsonValue(m_messages_total, json[QString("messagesTotal")]);
    m_messages_total_isSet = !json[QString("messagesTotal")].isNull() && m_messages_total_isValid;

    m_messages_unread_isValid = ::OpenAPI::fromJsonValue(m_messages_unread, json[QString("messagesUnread")]);
    m_messages_unread_isSet = !json[QString("messagesUnread")].isNull() && m_messages_unread_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_threads_total_isValid = ::OpenAPI::fromJsonValue(m_threads_total, json[QString("threadsTotal")]);
    m_threads_total_isSet = !json[QString("threadsTotal")].isNull() && m_threads_total_isValid;

    m_threads_unread_isValid = ::OpenAPI::fromJsonValue(m_threads_unread, json[QString("threadsUnread")]);
    m_threads_unread_isSet = !json[QString("threadsUnread")].isNull() && m_threads_unread_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILabel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabel::asJsonObject() const {
    QJsonObject obj;
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_list_visibility_isSet) {
        obj.insert(QString("labelListVisibility"), ::OpenAPI::toJsonValue(m_label_list_visibility));
    }
    if (m_message_list_visibility_isSet) {
        obj.insert(QString("messageListVisibility"), ::OpenAPI::toJsonValue(m_message_list_visibility));
    }
    if (m_messages_total_isSet) {
        obj.insert(QString("messagesTotal"), ::OpenAPI::toJsonValue(m_messages_total));
    }
    if (m_messages_unread_isSet) {
        obj.insert(QString("messagesUnread"), ::OpenAPI::toJsonValue(m_messages_unread));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_threads_total_isSet) {
        obj.insert(QString("threadsTotal"), ::OpenAPI::toJsonValue(m_threads_total));
    }
    if (m_threads_unread_isSet) {
        obj.insert(QString("threadsUnread"), ::OpenAPI::toJsonValue(m_threads_unread));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAILabelColor OAILabel::getColor() const {
    return m_color;
}
void OAILabel::setColor(const OAILabelColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAILabel::is_color_Set() const{
    return m_color_isSet;
}

bool OAILabel::is_color_Valid() const{
    return m_color_isValid;
}

QString OAILabel::getId() const {
    return m_id;
}
void OAILabel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILabel::is_id_Set() const{
    return m_id_isSet;
}

bool OAILabel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILabel::getLabelListVisibility() const {
    return m_label_list_visibility;
}
void OAILabel::setLabelListVisibility(const QString &label_list_visibility) {
    m_label_list_visibility = label_list_visibility;
    m_label_list_visibility_isSet = true;
}

bool OAILabel::is_label_list_visibility_Set() const{
    return m_label_list_visibility_isSet;
}

bool OAILabel::is_label_list_visibility_Valid() const{
    return m_label_list_visibility_isValid;
}

QString OAILabel::getMessageListVisibility() const {
    return m_message_list_visibility;
}
void OAILabel::setMessageListVisibility(const QString &message_list_visibility) {
    m_message_list_visibility = message_list_visibility;
    m_message_list_visibility_isSet = true;
}

bool OAILabel::is_message_list_visibility_Set() const{
    return m_message_list_visibility_isSet;
}

bool OAILabel::is_message_list_visibility_Valid() const{
    return m_message_list_visibility_isValid;
}

qint32 OAILabel::getMessagesTotal() const {
    return m_messages_total;
}
void OAILabel::setMessagesTotal(const qint32 &messages_total) {
    m_messages_total = messages_total;
    m_messages_total_isSet = true;
}

bool OAILabel::is_messages_total_Set() const{
    return m_messages_total_isSet;
}

bool OAILabel::is_messages_total_Valid() const{
    return m_messages_total_isValid;
}

qint32 OAILabel::getMessagesUnread() const {
    return m_messages_unread;
}
void OAILabel::setMessagesUnread(const qint32 &messages_unread) {
    m_messages_unread = messages_unread;
    m_messages_unread_isSet = true;
}

bool OAILabel::is_messages_unread_Set() const{
    return m_messages_unread_isSet;
}

bool OAILabel::is_messages_unread_Valid() const{
    return m_messages_unread_isValid;
}

QString OAILabel::getName() const {
    return m_name;
}
void OAILabel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILabel::is_name_Set() const{
    return m_name_isSet;
}

bool OAILabel::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAILabel::getThreadsTotal() const {
    return m_threads_total;
}
void OAILabel::setThreadsTotal(const qint32 &threads_total) {
    m_threads_total = threads_total;
    m_threads_total_isSet = true;
}

bool OAILabel::is_threads_total_Set() const{
    return m_threads_total_isSet;
}

bool OAILabel::is_threads_total_Valid() const{
    return m_threads_total_isValid;
}

qint32 OAILabel::getThreadsUnread() const {
    return m_threads_unread;
}
void OAILabel::setThreadsUnread(const qint32 &threads_unread) {
    m_threads_unread = threads_unread;
    m_threads_unread_isSet = true;
}

bool OAILabel::is_threads_unread_Set() const{
    return m_threads_unread_isSet;
}

bool OAILabel::is_threads_unread_Valid() const{
    return m_threads_unread_isValid;
}

QString OAILabel::getType() const {
    return m_type;
}
void OAILabel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILabel::is_type_Set() const{
    return m_type_isSet;
}

bool OAILabel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILabel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_list_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_list_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_unread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threads_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threads_unread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
