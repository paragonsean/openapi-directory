/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessagePart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessagePart::OAIMessagePart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessagePart::OAIMessagePart() {
    this->initializeModel();
}

OAIMessagePart::~OAIMessagePart() {}

void OAIMessagePart::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_part_id_isSet = false;
    m_part_id_isValid = false;

    m_parts_isSet = false;
    m_parts_isValid = false;
}

void OAIMessagePart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessagePart::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_part_id_isValid = ::OpenAPI::fromJsonValue(m_part_id, json[QString("partId")]);
    m_part_id_isSet = !json[QString("partId")].isNull() && m_part_id_isValid;

    m_parts_isValid = ::OpenAPI::fromJsonValue(m_parts, json[QString("parts")]);
    m_parts_isSet = !json[QString("parts")].isNull() && m_parts_isValid;
}

QString OAIMessagePart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessagePart::asJsonObject() const {
    QJsonObject obj;
    if (m_body.isSet()) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_part_id_isSet) {
        obj.insert(QString("partId"), ::OpenAPI::toJsonValue(m_part_id));
    }
    if (m_parts.size() > 0) {
        obj.insert(QString("parts"), ::OpenAPI::toJsonValue(m_parts));
    }
    return obj;
}

OAIMessagePartBody OAIMessagePart::getBody() const {
    return m_body;
}
void OAIMessagePart::setBody(const OAIMessagePartBody &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIMessagePart::is_body_Set() const{
    return m_body_isSet;
}

bool OAIMessagePart::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIMessagePart::getFilename() const {
    return m_filename;
}
void OAIMessagePart::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIMessagePart::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIMessagePart::is_filename_Valid() const{
    return m_filename_isValid;
}

QList<OAIMessagePartHeader> OAIMessagePart::getHeaders() const {
    return m_headers;
}
void OAIMessagePart::setHeaders(const QList<OAIMessagePartHeader> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIMessagePart::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIMessagePart::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIMessagePart::getMimeType() const {
    return m_mime_type;
}
void OAIMessagePart::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIMessagePart::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIMessagePart::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIMessagePart::getPartId() const {
    return m_part_id;
}
void OAIMessagePart::setPartId(const QString &part_id) {
    m_part_id = part_id;
    m_part_id_isSet = true;
}

bool OAIMessagePart::is_part_id_Set() const{
    return m_part_id_isSet;
}

bool OAIMessagePart::is_part_id_Valid() const{
    return m_part_id_isValid;
}

QList<OAIMessagePart> OAIMessagePart::getParts() const {
    return m_parts;
}
void OAIMessagePart::setParts(const QList<OAIMessagePart> &parts) {
    m_parts = parts;
    m_parts_isSet = true;
}

bool OAIMessagePart::is_parts_Set() const{
    return m_parts_isSet;
}

bool OAIMessagePart::is_parts_Valid() const{
    return m_parts_isValid;
}

bool OAIMessagePart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessagePart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
