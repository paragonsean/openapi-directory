/**
 * Gmail API
 * The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoForwarding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoForwarding::OAIAutoForwarding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoForwarding::OAIAutoForwarding() {
    this->initializeModel();
}

OAIAutoForwarding::~OAIAutoForwarding() {}

void OAIAutoForwarding::initializeModel() {

    m_disposition_isSet = false;
    m_disposition_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;
}

void OAIAutoForwarding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoForwarding::fromJsonObject(QJsonObject json) {

    m_disposition_isValid = ::OpenAPI::fromJsonValue(m_disposition, json[QString("disposition")]);
    m_disposition_isSet = !json[QString("disposition")].isNull() && m_disposition_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;
}

QString OAIAutoForwarding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoForwarding::asJsonObject() const {
    QJsonObject obj;
    if (m_disposition_isSet) {
        obj.insert(QString("disposition"), ::OpenAPI::toJsonValue(m_disposition));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    return obj;
}

QString OAIAutoForwarding::getDisposition() const {
    return m_disposition;
}
void OAIAutoForwarding::setDisposition(const QString &disposition) {
    m_disposition = disposition;
    m_disposition_isSet = true;
}

bool OAIAutoForwarding::is_disposition_Set() const{
    return m_disposition_isSet;
}

bool OAIAutoForwarding::is_disposition_Valid() const{
    return m_disposition_isValid;
}

QString OAIAutoForwarding::getEmailAddress() const {
    return m_email_address;
}
void OAIAutoForwarding::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIAutoForwarding::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIAutoForwarding::is_email_address_Valid() const{
    return m_email_address_isValid;
}

bool OAIAutoForwarding::isEnabled() const {
    return m_enabled;
}
void OAIAutoForwarding::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAutoForwarding::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAutoForwarding::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIAutoForwarding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoForwarding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
