# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_part_body import MessagePartBody
from openapi_server.models.message_part_header import MessagePartHeader
from openapi_server import util


class MessagePart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: MessagePartBody=None, filename: str=None, headers: List[MessagePartHeader]=None, mime_type: str=None, part_id: str=None, parts: List[MessagePart]=None):
        """MessagePart - a model defined in OpenAPI

        :param body: The body of this MessagePart.
        :param filename: The filename of this MessagePart.
        :param headers: The headers of this MessagePart.
        :param mime_type: The mime_type of this MessagePart.
        :param part_id: The part_id of this MessagePart.
        :param parts: The parts of this MessagePart.
        """
        self.openapi_types = {
            'body': MessagePartBody,
            'filename': str,
            'headers': List[MessagePartHeader],
            'mime_type': str,
            'part_id': str,
            'parts': List[MessagePart]
        }

        self.attribute_map = {
            'body': 'body',
            'filename': 'filename',
            'headers': 'headers',
            'mime_type': 'mimeType',
            'part_id': 'partId',
            'parts': 'parts'
        }

        self._body = body
        self._filename = filename
        self._headers = headers
        self._mime_type = mime_type
        self._part_id = part_id
        self._parts = parts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagePart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessagePart of this MessagePart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this MessagePart.


        :return: The body of this MessagePart.
        :rtype: MessagePartBody
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this MessagePart.


        :param body: The body of this MessagePart.
        :type body: MessagePartBody
        """

        self._body = body

    @property
    def filename(self):
        """Gets the filename of this MessagePart.

        The filename of the attachment. Only present if this message part represents an attachment.

        :return: The filename of this MessagePart.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this MessagePart.

        The filename of the attachment. Only present if this message part represents an attachment.

        :param filename: The filename of this MessagePart.
        :type filename: str
        """

        self._filename = filename

    @property
    def headers(self):
        """Gets the headers of this MessagePart.

        List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and `Subject`.

        :return: The headers of this MessagePart.
        :rtype: List[MessagePartHeader]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this MessagePart.

        List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and `Subject`.

        :param headers: The headers of this MessagePart.
        :type headers: List[MessagePartHeader]
        """

        self._headers = headers

    @property
    def mime_type(self):
        """Gets the mime_type of this MessagePart.

        The MIME type of the message part.

        :return: The mime_type of this MessagePart.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this MessagePart.

        The MIME type of the message part.

        :param mime_type: The mime_type of this MessagePart.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def part_id(self):
        """Gets the part_id of this MessagePart.

        The immutable ID of the message part.

        :return: The part_id of this MessagePart.
        :rtype: str
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this MessagePart.

        The immutable ID of the message part.

        :param part_id: The part_id of this MessagePart.
        :type part_id: str
        """

        self._part_id = part_id

    @property
    def parts(self):
        """Gets the parts of this MessagePart.

        The child MIME message parts of this part. This only applies to container MIME message parts, for example `multipart/*`. For non- container MIME message part types, such as `text/plain`, this field is empty. For more information, see RFC 1521.

        :return: The parts of this MessagePart.
        :rtype: List[MessagePart]
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this MessagePart.

        The child MIME message parts of this part. This only applies to container MIME message parts, for example `multipart/*`. For non- container MIME message part types, such as `text/plain`, this field is empty. For more information, see RFC 1521.

        :param parts: The parts of this MessagePart.
        :type parts: List[MessagePart]
        """

        self._parts = parts
