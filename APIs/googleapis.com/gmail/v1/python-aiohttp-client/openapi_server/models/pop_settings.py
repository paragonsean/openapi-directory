# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PopSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_window: str=None, disposition: str=None):
        """PopSettings - a model defined in OpenAPI

        :param access_window: The access_window of this PopSettings.
        :param disposition: The disposition of this PopSettings.
        """
        self.openapi_types = {
            'access_window': str,
            'disposition': str
        }

        self.attribute_map = {
            'access_window': 'accessWindow',
            'disposition': 'disposition'
        }

        self._access_window = access_window
        self._disposition = disposition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PopSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PopSettings of this PopSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_window(self):
        """Gets the access_window of this PopSettings.

        The range of messages which are accessible via POP.

        :return: The access_window of this PopSettings.
        :rtype: str
        """
        return self._access_window

    @access_window.setter
    def access_window(self, access_window):
        """Sets the access_window of this PopSettings.

        The range of messages which are accessible via POP.

        :param access_window: The access_window of this PopSettings.
        :type access_window: str
        """
        allowed_values = ["accessWindowUnspecified", "disabled", "fromNowOn", "allMail"]  # noqa: E501
        if access_window not in allowed_values:
            raise ValueError(
                "Invalid value for `access_window` ({0}), must be one of {1}"
                .format(access_window, allowed_values)
            )

        self._access_window = access_window

    @property
    def disposition(self):
        """Gets the disposition of this PopSettings.

        The action that will be executed on a message after it has been fetched via POP.

        :return: The disposition of this PopSettings.
        :rtype: str
        """
        return self._disposition

    @disposition.setter
    def disposition(self, disposition):
        """Sets the disposition of this PopSettings.

        The action that will be executed on a message after it has been fetched via POP.

        :param disposition: The disposition of this PopSettings.
        :type disposition: str
        """
        allowed_values = ["dispositionUnspecified", "leaveInInbox", "archive", "trash", "markRead"]  # noqa: E501
        if disposition not in allowed_values:
            raise ValueError(
                "Invalid value for `disposition` ({0}), must be one of {1}"
                .format(disposition, allowed_values)
            )

        self._disposition = disposition
