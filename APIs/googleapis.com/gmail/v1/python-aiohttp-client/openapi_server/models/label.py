# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.label_color import LabelColor
from openapi_server import util


class Label(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: LabelColor=None, id: str=None, label_list_visibility: str=None, message_list_visibility: str=None, messages_total: int=None, messages_unread: int=None, name: str=None, threads_total: int=None, threads_unread: int=None, type: str=None):
        """Label - a model defined in OpenAPI

        :param color: The color of this Label.
        :param id: The id of this Label.
        :param label_list_visibility: The label_list_visibility of this Label.
        :param message_list_visibility: The message_list_visibility of this Label.
        :param messages_total: The messages_total of this Label.
        :param messages_unread: The messages_unread of this Label.
        :param name: The name of this Label.
        :param threads_total: The threads_total of this Label.
        :param threads_unread: The threads_unread of this Label.
        :param type: The type of this Label.
        """
        self.openapi_types = {
            'color': LabelColor,
            'id': str,
            'label_list_visibility': str,
            'message_list_visibility': str,
            'messages_total': int,
            'messages_unread': int,
            'name': str,
            'threads_total': int,
            'threads_unread': int,
            'type': str
        }

        self.attribute_map = {
            'color': 'color',
            'id': 'id',
            'label_list_visibility': 'labelListVisibility',
            'message_list_visibility': 'messageListVisibility',
            'messages_total': 'messagesTotal',
            'messages_unread': 'messagesUnread',
            'name': 'name',
            'threads_total': 'threadsTotal',
            'threads_unread': 'threadsUnread',
            'type': 'type'
        }

        self._color = color
        self._id = id
        self._label_list_visibility = label_list_visibility
        self._message_list_visibility = message_list_visibility
        self._messages_total = messages_total
        self._messages_unread = messages_unread
        self._name = name
        self._threads_total = threads_total
        self._threads_unread = threads_unread
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Label':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Label of this Label.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this Label.


        :return: The color of this Label.
        :rtype: LabelColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Label.


        :param color: The color of this Label.
        :type color: LabelColor
        """

        self._color = color

    @property
    def id(self):
        """Gets the id of this Label.

        The immutable ID of the label.

        :return: The id of this Label.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Label.

        The immutable ID of the label.

        :param id: The id of this Label.
        :type id: str
        """

        self._id = id

    @property
    def label_list_visibility(self):
        """Gets the label_list_visibility of this Label.

        The visibility of the label in the label list in the Gmail web interface.

        :return: The label_list_visibility of this Label.
        :rtype: str
        """
        return self._label_list_visibility

    @label_list_visibility.setter
    def label_list_visibility(self, label_list_visibility):
        """Sets the label_list_visibility of this Label.

        The visibility of the label in the label list in the Gmail web interface.

        :param label_list_visibility: The label_list_visibility of this Label.
        :type label_list_visibility: str
        """
        allowed_values = ["labelShow", "labelShowIfUnread", "labelHide"]  # noqa: E501
        if label_list_visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `label_list_visibility` ({0}), must be one of {1}"
                .format(label_list_visibility, allowed_values)
            )

        self._label_list_visibility = label_list_visibility

    @property
    def message_list_visibility(self):
        """Gets the message_list_visibility of this Label.

        The visibility of messages with this label in the message list in the Gmail web interface.

        :return: The message_list_visibility of this Label.
        :rtype: str
        """
        return self._message_list_visibility

    @message_list_visibility.setter
    def message_list_visibility(self, message_list_visibility):
        """Sets the message_list_visibility of this Label.

        The visibility of messages with this label in the message list in the Gmail web interface.

        :param message_list_visibility: The message_list_visibility of this Label.
        :type message_list_visibility: str
        """
        allowed_values = ["show", "hide"]  # noqa: E501
        if message_list_visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `message_list_visibility` ({0}), must be one of {1}"
                .format(message_list_visibility, allowed_values)
            )

        self._message_list_visibility = message_list_visibility

    @property
    def messages_total(self):
        """Gets the messages_total of this Label.

        The total number of messages with the label.

        :return: The messages_total of this Label.
        :rtype: int
        """
        return self._messages_total

    @messages_total.setter
    def messages_total(self, messages_total):
        """Sets the messages_total of this Label.

        The total number of messages with the label.

        :param messages_total: The messages_total of this Label.
        :type messages_total: int
        """

        self._messages_total = messages_total

    @property
    def messages_unread(self):
        """Gets the messages_unread of this Label.

        The number of unread messages with the label.

        :return: The messages_unread of this Label.
        :rtype: int
        """
        return self._messages_unread

    @messages_unread.setter
    def messages_unread(self, messages_unread):
        """Sets the messages_unread of this Label.

        The number of unread messages with the label.

        :param messages_unread: The messages_unread of this Label.
        :type messages_unread: int
        """

        self._messages_unread = messages_unread

    @property
    def name(self):
        """Gets the name of this Label.

        The display name of the label.

        :return: The name of this Label.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Label.

        The display name of the label.

        :param name: The name of this Label.
        :type name: str
        """

        self._name = name

    @property
    def threads_total(self):
        """Gets the threads_total of this Label.

        The total number of threads with the label.

        :return: The threads_total of this Label.
        :rtype: int
        """
        return self._threads_total

    @threads_total.setter
    def threads_total(self, threads_total):
        """Sets the threads_total of this Label.

        The total number of threads with the label.

        :param threads_total: The threads_total of this Label.
        :type threads_total: int
        """

        self._threads_total = threads_total

    @property
    def threads_unread(self):
        """Gets the threads_unread of this Label.

        The number of unread threads with the label.

        :return: The threads_unread of this Label.
        :rtype: int
        """
        return self._threads_unread

    @threads_unread.setter
    def threads_unread(self, threads_unread):
        """Sets the threads_unread of this Label.

        The number of unread threads with the label.

        :param threads_unread: The threads_unread of this Label.
        :type threads_unread: int
        """

        self._threads_unread = threads_unread

    @property
    def type(self):
        """Gets the type of this Label.

        The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads, but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.

        :return: The type of this Label.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Label.

        The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads, but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.

        :param type: The type of this Label.
        :type type: str
        """
        allowed_values = ["system", "user"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
