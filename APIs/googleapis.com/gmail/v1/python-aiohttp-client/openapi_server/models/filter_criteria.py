# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FilterCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclude_chats: bool=None, _from: str=None, has_attachment: bool=None, negated_query: str=None, query: str=None, size: int=None, size_comparison: str=None, subject: str=None, to: str=None):
        """FilterCriteria - a model defined in OpenAPI

        :param exclude_chats: The exclude_chats of this FilterCriteria.
        :param _from: The _from of this FilterCriteria.
        :param has_attachment: The has_attachment of this FilterCriteria.
        :param negated_query: The negated_query of this FilterCriteria.
        :param query: The query of this FilterCriteria.
        :param size: The size of this FilterCriteria.
        :param size_comparison: The size_comparison of this FilterCriteria.
        :param subject: The subject of this FilterCriteria.
        :param to: The to of this FilterCriteria.
        """
        self.openapi_types = {
            'exclude_chats': bool,
            '_from': str,
            'has_attachment': bool,
            'negated_query': str,
            'query': str,
            'size': int,
            'size_comparison': str,
            'subject': str,
            'to': str
        }

        self.attribute_map = {
            'exclude_chats': 'excludeChats',
            '_from': 'from',
            'has_attachment': 'hasAttachment',
            'negated_query': 'negatedQuery',
            'query': 'query',
            'size': 'size',
            'size_comparison': 'sizeComparison',
            'subject': 'subject',
            'to': 'to'
        }

        self._exclude_chats = exclude_chats
        self.__from = _from
        self._has_attachment = has_attachment
        self._negated_query = negated_query
        self._query = query
        self._size = size
        self._size_comparison = size_comparison
        self._subject = subject
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilterCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilterCriteria of this FilterCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclude_chats(self):
        """Gets the exclude_chats of this FilterCriteria.

        Whether the response should exclude chats.

        :return: The exclude_chats of this FilterCriteria.
        :rtype: bool
        """
        return self._exclude_chats

    @exclude_chats.setter
    def exclude_chats(self, exclude_chats):
        """Sets the exclude_chats of this FilterCriteria.

        Whether the response should exclude chats.

        :param exclude_chats: The exclude_chats of this FilterCriteria.
        :type exclude_chats: bool
        """

        self._exclude_chats = exclude_chats

    @property
    def _from(self):
        """Gets the _from of this FilterCriteria.

        The sender's display name or email address.

        :return: The _from of this FilterCriteria.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this FilterCriteria.

        The sender's display name or email address.

        :param _from: The _from of this FilterCriteria.
        :type _from: str
        """

        self.__from = _from

    @property
    def has_attachment(self):
        """Gets the has_attachment of this FilterCriteria.

        Whether the message has any attachment.

        :return: The has_attachment of this FilterCriteria.
        :rtype: bool
        """
        return self._has_attachment

    @has_attachment.setter
    def has_attachment(self, has_attachment):
        """Sets the has_attachment of this FilterCriteria.

        Whether the message has any attachment.

        :param has_attachment: The has_attachment of this FilterCriteria.
        :type has_attachment: bool
        """

        self._has_attachment = has_attachment

    @property
    def negated_query(self):
        """Gets the negated_query of this FilterCriteria.

        Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.

        :return: The negated_query of this FilterCriteria.
        :rtype: str
        """
        return self._negated_query

    @negated_query.setter
    def negated_query(self, negated_query):
        """Sets the negated_query of this FilterCriteria.

        Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.

        :param negated_query: The negated_query of this FilterCriteria.
        :type negated_query: str
        """

        self._negated_query = negated_query

    @property
    def query(self):
        """Gets the query of this FilterCriteria.

        Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.

        :return: The query of this FilterCriteria.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this FilterCriteria.

        Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.

        :param query: The query of this FilterCriteria.
        :type query: str
        """

        self._query = query

    @property
    def size(self):
        """Gets the size of this FilterCriteria.

        The size of the entire RFC822 message in bytes, including all headers and attachments.

        :return: The size of this FilterCriteria.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FilterCriteria.

        The size of the entire RFC822 message in bytes, including all headers and attachments.

        :param size: The size of this FilterCriteria.
        :type size: int
        """

        self._size = size

    @property
    def size_comparison(self):
        """Gets the size_comparison of this FilterCriteria.

        How the message size in bytes should be in relation to the size field.

        :return: The size_comparison of this FilterCriteria.
        :rtype: str
        """
        return self._size_comparison

    @size_comparison.setter
    def size_comparison(self, size_comparison):
        """Sets the size_comparison of this FilterCriteria.

        How the message size in bytes should be in relation to the size field.

        :param size_comparison: The size_comparison of this FilterCriteria.
        :type size_comparison: str
        """
        allowed_values = ["unspecified", "smaller", "larger"]  # noqa: E501
        if size_comparison not in allowed_values:
            raise ValueError(
                "Invalid value for `size_comparison` ({0}), must be one of {1}"
                .format(size_comparison, allowed_values)
            )

        self._size_comparison = size_comparison

    @property
    def subject(self):
        """Gets the subject of this FilterCriteria.

        Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.

        :return: The subject of this FilterCriteria.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this FilterCriteria.

        Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.

        :param subject: The subject of this FilterCriteria.
        :type subject: str
        """

        self._subject = subject

    @property
    def to(self):
        """Gets the to of this FilterCriteria.

        The recipient's display name or email address. Includes recipients in the \"to\", \"cc\", and \"bcc\" header fields. You can use simply the local part of the email address. For example, \"example\" and \"example@\" both match \"example@gmail.com\". This field is case-insensitive.

        :return: The to of this FilterCriteria.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this FilterCriteria.

        The recipient's display name or email address. Includes recipients in the \"to\", \"cc\", and \"bcc\" header fields. You can use simply the local part of the email address. For example, \"example\" and \"example@\" both match \"example@gmail.com\". This field is case-insensitive.

        :param to: The to of this FilterCriteria.
        :type to: str
        """

        self._to = to
