# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message import Message
from openapi_server import util


class Thread(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, history_id: str=None, id: str=None, messages: List[Message]=None, snippet: str=None):
        """Thread - a model defined in OpenAPI

        :param history_id: The history_id of this Thread.
        :param id: The id of this Thread.
        :param messages: The messages of this Thread.
        :param snippet: The snippet of this Thread.
        """
        self.openapi_types = {
            'history_id': str,
            'id': str,
            'messages': List[Message],
            'snippet': str
        }

        self.attribute_map = {
            'history_id': 'historyId',
            'id': 'id',
            'messages': 'messages',
            'snippet': 'snippet'
        }

        self._history_id = history_id
        self._id = id
        self._messages = messages
        self._snippet = snippet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Thread':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Thread of this Thread.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def history_id(self):
        """Gets the history_id of this Thread.

        The ID of the last history record that modified this thread.

        :return: The history_id of this Thread.
        :rtype: str
        """
        return self._history_id

    @history_id.setter
    def history_id(self, history_id):
        """Sets the history_id of this Thread.

        The ID of the last history record that modified this thread.

        :param history_id: The history_id of this Thread.
        :type history_id: str
        """

        self._history_id = history_id

    @property
    def id(self):
        """Gets the id of this Thread.

        The unique ID of the thread.

        :return: The id of this Thread.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Thread.

        The unique ID of the thread.

        :param id: The id of this Thread.
        :type id: str
        """

        self._id = id

    @property
    def messages(self):
        """Gets the messages of this Thread.

        The list of messages in the thread.

        :return: The messages of this Thread.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Thread.

        The list of messages in the thread.

        :param messages: The messages of this Thread.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def snippet(self):
        """Gets the snippet of this Thread.

        A short part of the message text.

        :return: The snippet of this Thread.
        :rtype: str
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this Thread.

        A short part of the message text.

        :param snippet: The snippet of this Thread.
        :type snippet: str
        """

        self._snippet = snippet
