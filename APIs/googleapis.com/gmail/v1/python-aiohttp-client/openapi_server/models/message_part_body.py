# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessagePartBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_id: str=None, data: str=None, size: int=None):
        """MessagePartBody - a model defined in OpenAPI

        :param attachment_id: The attachment_id of this MessagePartBody.
        :param data: The data of this MessagePartBody.
        :param size: The size of this MessagePartBody.
        """
        self.openapi_types = {
            'attachment_id': str,
            'data': str,
            'size': int
        }

        self.attribute_map = {
            'attachment_id': 'attachmentId',
            'data': 'data',
            'size': 'size'
        }

        self._attachment_id = attachment_id
        self._data = data
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagePartBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessagePartBody of this MessagePartBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_id(self):
        """Gets the attachment_id of this MessagePartBody.

        When present, contains the ID of an external attachment that can be retrieved in a separate `messages.attachments.get` request. When not present, the entire content of the message part body is contained in the data field.

        :return: The attachment_id of this MessagePartBody.
        :rtype: str
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """Sets the attachment_id of this MessagePartBody.

        When present, contains the ID of an external attachment that can be retrieved in a separate `messages.attachments.get` request. When not present, the entire content of the message part body is contained in the data field.

        :param attachment_id: The attachment_id of this MessagePartBody.
        :type attachment_id: str
        """

        self._attachment_id = attachment_id

    @property
    def data(self):
        """Gets the data of this MessagePartBody.

        The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment.

        :return: The data of this MessagePartBody.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this MessagePartBody.

        The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment.

        :param data: The data of this MessagePartBody.
        :type data: str
        """

        self._data = data

    @property
    def size(self):
        """Gets the size of this MessagePartBody.

        Number of bytes for the message part data (encoding notwithstanding).

        :return: The size of this MessagePartBody.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MessagePartBody.

        Number of bytes for the message part data (encoding notwithstanding).

        :param size: The size of this MessagePartBody.
        :type size: int
        """

        self._size = size
