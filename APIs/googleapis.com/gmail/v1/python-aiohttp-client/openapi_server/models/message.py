# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_part import MessagePart
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, history_id: str=None, id: str=None, internal_date: str=None, label_ids: List[str]=None, payload: MessagePart=None, raw: str=None, size_estimate: int=None, snippet: str=None, thread_id: str=None):
        """Message - a model defined in OpenAPI

        :param history_id: The history_id of this Message.
        :param id: The id of this Message.
        :param internal_date: The internal_date of this Message.
        :param label_ids: The label_ids of this Message.
        :param payload: The payload of this Message.
        :param raw: The raw of this Message.
        :param size_estimate: The size_estimate of this Message.
        :param snippet: The snippet of this Message.
        :param thread_id: The thread_id of this Message.
        """
        self.openapi_types = {
            'history_id': str,
            'id': str,
            'internal_date': str,
            'label_ids': List[str],
            'payload': MessagePart,
            'raw': str,
            'size_estimate': int,
            'snippet': str,
            'thread_id': str
        }

        self.attribute_map = {
            'history_id': 'historyId',
            'id': 'id',
            'internal_date': 'internalDate',
            'label_ids': 'labelIds',
            'payload': 'payload',
            'raw': 'raw',
            'size_estimate': 'sizeEstimate',
            'snippet': 'snippet',
            'thread_id': 'threadId'
        }

        self._history_id = history_id
        self._id = id
        self._internal_date = internal_date
        self._label_ids = label_ids
        self._payload = payload
        self._raw = raw
        self._size_estimate = size_estimate
        self._snippet = snippet
        self._thread_id = thread_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def history_id(self):
        """Gets the history_id of this Message.

        The ID of the last history record that modified this message.

        :return: The history_id of this Message.
        :rtype: str
        """
        return self._history_id

    @history_id.setter
    def history_id(self, history_id):
        """Sets the history_id of this Message.

        The ID of the last history record that modified this message.

        :param history_id: The history_id of this Message.
        :type history_id: str
        """

        self._history_id = history_id

    @property
    def id(self):
        """Gets the id of this Message.

        The immutable ID of the message.

        :return: The id of this Message.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Message.

        The immutable ID of the message.

        :param id: The id of this Message.
        :type id: str
        """

        self._id = id

    @property
    def internal_date(self):
        """Gets the internal_date of this Message.

        The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can be configured by client to be based on the `Date` header.

        :return: The internal_date of this Message.
        :rtype: str
        """
        return self._internal_date

    @internal_date.setter
    def internal_date(self, internal_date):
        """Sets the internal_date of this Message.

        The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can be configured by client to be based on the `Date` header.

        :param internal_date: The internal_date of this Message.
        :type internal_date: str
        """

        self._internal_date = internal_date

    @property
    def label_ids(self):
        """Gets the label_ids of this Message.

        List of IDs of labels applied to this message.

        :return: The label_ids of this Message.
        :rtype: List[str]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """Sets the label_ids of this Message.

        List of IDs of labels applied to this message.

        :param label_ids: The label_ids of this Message.
        :type label_ids: List[str]
        """

        self._label_ids = label_ids

    @property
    def payload(self):
        """Gets the payload of this Message.


        :return: The payload of this Message.
        :rtype: MessagePart
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Message.


        :param payload: The payload of this Message.
        :type payload: MessagePart
        """

        self._payload = payload

    @property
    def raw(self):
        """Gets the raw of this Message.

        The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.

        :return: The raw of this Message.
        :rtype: str
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this Message.

        The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.

        :param raw: The raw of this Message.
        :type raw: str
        """

        self._raw = raw

    @property
    def size_estimate(self):
        """Gets the size_estimate of this Message.

        Estimated size in bytes of the message.

        :return: The size_estimate of this Message.
        :rtype: int
        """
        return self._size_estimate

    @size_estimate.setter
    def size_estimate(self, size_estimate):
        """Sets the size_estimate of this Message.

        Estimated size in bytes of the message.

        :param size_estimate: The size_estimate of this Message.
        :type size_estimate: int
        """

        self._size_estimate = size_estimate

    @property
    def snippet(self):
        """Gets the snippet of this Message.

        A short part of the message text.

        :return: The snippet of this Message.
        :rtype: str
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this Message.

        A short part of the message text.

        :param snippet: The snippet of this Message.
        :type snippet: str
        """

        self._snippet = snippet

    @property
    def thread_id(self):
        """Gets the thread_id of this Message.

        The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested `threadId` must be specified on the `Message` or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3. The `Subject` headers must match. 

        :return: The thread_id of this Message.
        :rtype: str
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this Message.

        The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested `threadId` must be specified on the `Message` or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3. The `Subject` headers must match. 

        :param thread_id: The thread_id of this Message.
        :type thread_id: str
        """

        self._thread_id = thread_id
