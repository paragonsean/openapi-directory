# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImapSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_expunge: bool=None, enabled: bool=None, expunge_behavior: str=None, max_folder_size: int=None):
        """ImapSettings - a model defined in OpenAPI

        :param auto_expunge: The auto_expunge of this ImapSettings.
        :param enabled: The enabled of this ImapSettings.
        :param expunge_behavior: The expunge_behavior of this ImapSettings.
        :param max_folder_size: The max_folder_size of this ImapSettings.
        """
        self.openapi_types = {
            'auto_expunge': bool,
            'enabled': bool,
            'expunge_behavior': str,
            'max_folder_size': int
        }

        self.attribute_map = {
            'auto_expunge': 'autoExpunge',
            'enabled': 'enabled',
            'expunge_behavior': 'expungeBehavior',
            'max_folder_size': 'maxFolderSize'
        }

        self._auto_expunge = auto_expunge
        self._enabled = enabled
        self._expunge_behavior = expunge_behavior
        self._max_folder_size = max_folder_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImapSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImapSettings of this ImapSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_expunge(self):
        """Gets the auto_expunge of this ImapSettings.

        If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted.

        :return: The auto_expunge of this ImapSettings.
        :rtype: bool
        """
        return self._auto_expunge

    @auto_expunge.setter
    def auto_expunge(self, auto_expunge):
        """Sets the auto_expunge of this ImapSettings.

        If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted.

        :param auto_expunge: The auto_expunge of this ImapSettings.
        :type auto_expunge: bool
        """

        self._auto_expunge = auto_expunge

    @property
    def enabled(self):
        """Gets the enabled of this ImapSettings.

        Whether IMAP is enabled for the account.

        :return: The enabled of this ImapSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ImapSettings.

        Whether IMAP is enabled for the account.

        :param enabled: The enabled of this ImapSettings.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def expunge_behavior(self):
        """Gets the expunge_behavior of this ImapSettings.

        The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.

        :return: The expunge_behavior of this ImapSettings.
        :rtype: str
        """
        return self._expunge_behavior

    @expunge_behavior.setter
    def expunge_behavior(self, expunge_behavior):
        """Sets the expunge_behavior of this ImapSettings.

        The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.

        :param expunge_behavior: The expunge_behavior of this ImapSettings.
        :type expunge_behavior: str
        """
        allowed_values = ["expungeBehaviorUnspecified", "archive", "trash", "deleteForever"]  # noqa: E501
        if expunge_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `expunge_behavior` ({0}), must be one of {1}"
                .format(expunge_behavior, allowed_values)
            )

        self._expunge_behavior = expunge_behavior

    @property
    def max_folder_size(self):
        """Gets the max_folder_size of this ImapSettings.

        An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.

        :return: The max_folder_size of this ImapSettings.
        :rtype: int
        """
        return self._max_folder_size

    @max_folder_size.setter
    def max_folder_size(self, max_folder_size):
        """Sets the max_folder_size of this ImapSettings.

        An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.

        :param max_folder_size: The max_folder_size of this ImapSettings.
        :type max_folder_size: int
        """

        self._max_folder_size = max_folder_size
