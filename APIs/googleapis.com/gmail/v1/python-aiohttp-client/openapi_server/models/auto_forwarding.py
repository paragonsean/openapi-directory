# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoForwarding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disposition: str=None, email_address: str=None, enabled: bool=None):
        """AutoForwarding - a model defined in OpenAPI

        :param disposition: The disposition of this AutoForwarding.
        :param email_address: The email_address of this AutoForwarding.
        :param enabled: The enabled of this AutoForwarding.
        """
        self.openapi_types = {
            'disposition': str,
            'email_address': str,
            'enabled': bool
        }

        self.attribute_map = {
            'disposition': 'disposition',
            'email_address': 'emailAddress',
            'enabled': 'enabled'
        }

        self._disposition = disposition
        self._email_address = email_address
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoForwarding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoForwarding of this AutoForwarding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disposition(self):
        """Gets the disposition of this AutoForwarding.

        The state that a message should be left in after it has been forwarded.

        :return: The disposition of this AutoForwarding.
        :rtype: str
        """
        return self._disposition

    @disposition.setter
    def disposition(self, disposition):
        """Sets the disposition of this AutoForwarding.

        The state that a message should be left in after it has been forwarded.

        :param disposition: The disposition of this AutoForwarding.
        :type disposition: str
        """
        allowed_values = ["dispositionUnspecified", "leaveInInbox", "archive", "trash", "markRead"]  # noqa: E501
        if disposition not in allowed_values:
            raise ValueError(
                "Invalid value for `disposition` ({0}), must be one of {1}"
                .format(disposition, allowed_values)
            )

        self._disposition = disposition

    @property
    def email_address(self):
        """Gets the email_address of this AutoForwarding.

        Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses.

        :return: The email_address of this AutoForwarding.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AutoForwarding.

        Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses.

        :param email_address: The email_address of this AutoForwarding.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def enabled(self):
        """Gets the enabled of this AutoForwarding.

        Whether all incoming mail is automatically forwarded to another address.

        :return: The enabled of this AutoForwarding.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AutoForwarding.

        Whether all incoming mail is automatically forwarded to another address.

        :param enabled: The enabled of this AutoForwarding.
        :type enabled: bool
        """

        self._enabled = enabled
