# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sign_and_encrypt_key_pairs import SignAndEncryptKeyPairs
from openapi_server import util


class CseIdentity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, primary_key_pair_id: str=None, sign_and_encrypt_key_pairs: SignAndEncryptKeyPairs=None):
        """CseIdentity - a model defined in OpenAPI

        :param email_address: The email_address of this CseIdentity.
        :param primary_key_pair_id: The primary_key_pair_id of this CseIdentity.
        :param sign_and_encrypt_key_pairs: The sign_and_encrypt_key_pairs of this CseIdentity.
        """
        self.openapi_types = {
            'email_address': str,
            'primary_key_pair_id': str,
            'sign_and_encrypt_key_pairs': SignAndEncryptKeyPairs
        }

        self.attribute_map = {
            'email_address': 'emailAddress',
            'primary_key_pair_id': 'primaryKeyPairId',
            'sign_and_encrypt_key_pairs': 'signAndEncryptKeyPairs'
        }

        self._email_address = email_address
        self._primary_key_pair_id = primary_key_pair_id
        self._sign_and_encrypt_key_pairs = sign_and_encrypt_key_pairs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CseIdentity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CseIdentity of this CseIdentity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this CseIdentity.

        The email address for the sending identity. The email address must be the primary email address of the authenticated user.

        :return: The email_address of this CseIdentity.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this CseIdentity.

        The email address for the sending identity. The email address must be the primary email address of the authenticated user.

        :param email_address: The email_address of this CseIdentity.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def primary_key_pair_id(self):
        """Gets the primary_key_pair_id of this CseIdentity.

        If a key pair is associated, the ID of the key pair, CseKeyPair.

        :return: The primary_key_pair_id of this CseIdentity.
        :rtype: str
        """
        return self._primary_key_pair_id

    @primary_key_pair_id.setter
    def primary_key_pair_id(self, primary_key_pair_id):
        """Sets the primary_key_pair_id of this CseIdentity.

        If a key pair is associated, the ID of the key pair, CseKeyPair.

        :param primary_key_pair_id: The primary_key_pair_id of this CseIdentity.
        :type primary_key_pair_id: str
        """

        self._primary_key_pair_id = primary_key_pair_id

    @property
    def sign_and_encrypt_key_pairs(self):
        """Gets the sign_and_encrypt_key_pairs of this CseIdentity.


        :return: The sign_and_encrypt_key_pairs of this CseIdentity.
        :rtype: SignAndEncryptKeyPairs
        """
        return self._sign_and_encrypt_key_pairs

    @sign_and_encrypt_key_pairs.setter
    def sign_and_encrypt_key_pairs(self, sign_and_encrypt_key_pairs):
        """Sets the sign_and_encrypt_key_pairs of this CseIdentity.


        :param sign_and_encrypt_key_pairs: The sign_and_encrypt_key_pairs of this CseIdentity.
        :type sign_and_encrypt_key_pairs: SignAndEncryptKeyPairs
        """

        self._sign_and_encrypt_key_pairs = sign_and_encrypt_key_pairs
