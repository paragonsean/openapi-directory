# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cse_private_key_metadata import CsePrivateKeyMetadata
from openapi_server import util


class CseKeyPair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_time: str=None, enablement_state: str=None, key_pair_id: str=None, pem: str=None, pkcs7: str=None, private_key_metadata: List[CsePrivateKeyMetadata]=None, subject_email_addresses: List[str]=None):
        """CseKeyPair - a model defined in OpenAPI

        :param disable_time: The disable_time of this CseKeyPair.
        :param enablement_state: The enablement_state of this CseKeyPair.
        :param key_pair_id: The key_pair_id of this CseKeyPair.
        :param pem: The pem of this CseKeyPair.
        :param pkcs7: The pkcs7 of this CseKeyPair.
        :param private_key_metadata: The private_key_metadata of this CseKeyPair.
        :param subject_email_addresses: The subject_email_addresses of this CseKeyPair.
        """
        self.openapi_types = {
            'disable_time': str,
            'enablement_state': str,
            'key_pair_id': str,
            'pem': str,
            'pkcs7': str,
            'private_key_metadata': List[CsePrivateKeyMetadata],
            'subject_email_addresses': List[str]
        }

        self.attribute_map = {
            'disable_time': 'disableTime',
            'enablement_state': 'enablementState',
            'key_pair_id': 'keyPairId',
            'pem': 'pem',
            'pkcs7': 'pkcs7',
            'private_key_metadata': 'privateKeyMetadata',
            'subject_email_addresses': 'subjectEmailAddresses'
        }

        self._disable_time = disable_time
        self._enablement_state = enablement_state
        self._key_pair_id = key_pair_id
        self._pem = pem
        self._pkcs7 = pkcs7
        self._private_key_metadata = private_key_metadata
        self._subject_email_addresses = subject_email_addresses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CseKeyPair':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CseKeyPair of this CseKeyPair.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_time(self):
        """Gets the disable_time of this CseKeyPair.

        Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.

        :return: The disable_time of this CseKeyPair.
        :rtype: str
        """
        return self._disable_time

    @disable_time.setter
    def disable_time(self, disable_time):
        """Sets the disable_time of this CseKeyPair.

        Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.

        :param disable_time: The disable_time of this CseKeyPair.
        :type disable_time: str
        """

        self._disable_time = disable_time

    @property
    def enablement_state(self):
        """Gets the enablement_state of this CseKeyPair.

        Output only. The current state of the key pair.

        :return: The enablement_state of this CseKeyPair.
        :rtype: str
        """
        return self._enablement_state

    @enablement_state.setter
    def enablement_state(self, enablement_state):
        """Sets the enablement_state of this CseKeyPair.

        Output only. The current state of the key pair.

        :param enablement_state: The enablement_state of this CseKeyPair.
        :type enablement_state: str
        """
        allowed_values = ["stateUnspecified", "enabled", "disabled"]  # noqa: E501
        if enablement_state not in allowed_values:
            raise ValueError(
                "Invalid value for `enablement_state` ({0}), must be one of {1}"
                .format(enablement_state, allowed_values)
            )

        self._enablement_state = enablement_state

    @property
    def key_pair_id(self):
        """Gets the key_pair_id of this CseKeyPair.

        Output only. The immutable ID for the client-side encryption S/MIME key pair.

        :return: The key_pair_id of this CseKeyPair.
        :rtype: str
        """
        return self._key_pair_id

    @key_pair_id.setter
    def key_pair_id(self, key_pair_id):
        """Sets the key_pair_id of this CseKeyPair.

        Output only. The immutable ID for the client-side encryption S/MIME key pair.

        :param key_pair_id: The key_pair_id of this CseKeyPair.
        :type key_pair_id: str
        """

        self._key_pair_id = key_pair_id

    @property
    def pem(self):
        """Gets the pem of this CseKeyPair.

        Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.

        :return: The pem of this CseKeyPair.
        :rtype: str
        """
        return self._pem

    @pem.setter
    def pem(self, pem):
        """Sets the pem of this CseKeyPair.

        Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.

        :param pem: The pem of this CseKeyPair.
        :type pem: str
        """

        self._pem = pem

    @property
    def pkcs7(self):
        """Gets the pkcs7 of this CseKeyPair.

        Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.

        :return: The pkcs7 of this CseKeyPair.
        :rtype: str
        """
        return self._pkcs7

    @pkcs7.setter
    def pkcs7(self, pkcs7):
        """Sets the pkcs7 of this CseKeyPair.

        Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.

        :param pkcs7: The pkcs7 of this CseKeyPair.
        :type pkcs7: str
        """

        self._pkcs7 = pkcs7

    @property
    def private_key_metadata(self):
        """Gets the private_key_metadata of this CseKeyPair.

        Metadata for instances of this key pair's private key.

        :return: The private_key_metadata of this CseKeyPair.
        :rtype: List[CsePrivateKeyMetadata]
        """
        return self._private_key_metadata

    @private_key_metadata.setter
    def private_key_metadata(self, private_key_metadata):
        """Sets the private_key_metadata of this CseKeyPair.

        Metadata for instances of this key pair's private key.

        :param private_key_metadata: The private_key_metadata of this CseKeyPair.
        :type private_key_metadata: List[CsePrivateKeyMetadata]
        """

        self._private_key_metadata = private_key_metadata

    @property
    def subject_email_addresses(self):
        """Gets the subject_email_addresses of this CseKeyPair.

        Output only. The email address identities that are specified on the leaf certificate.

        :return: The subject_email_addresses of this CseKeyPair.
        :rtype: List[str]
        """
        return self._subject_email_addresses

    @subject_email_addresses.setter
    def subject_email_addresses(self, subject_email_addresses):
        """Sets the subject_email_addresses of this CseKeyPair.

        Output only. The email address identities that are specified on the leaf certificate.

        :param subject_email_addresses: The subject_email_addresses of this CseKeyPair.
        :type subject_email_addresses: List[str]
        """

        self._subject_email_addresses = subject_email_addresses
