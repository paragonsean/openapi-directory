# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label_filter_action: str=None, label_filter_behavior: str=None, label_ids: List[str]=None, topic_name: str=None):
        """WatchRequest - a model defined in OpenAPI

        :param label_filter_action: The label_filter_action of this WatchRequest.
        :param label_filter_behavior: The label_filter_behavior of this WatchRequest.
        :param label_ids: The label_ids of this WatchRequest.
        :param topic_name: The topic_name of this WatchRequest.
        """
        self.openapi_types = {
            'label_filter_action': str,
            'label_filter_behavior': str,
            'label_ids': List[str],
            'topic_name': str
        }

        self.attribute_map = {
            'label_filter_action': 'labelFilterAction',
            'label_filter_behavior': 'labelFilterBehavior',
            'label_ids': 'labelIds',
            'topic_name': 'topicName'
        }

        self._label_filter_action = label_filter_action
        self._label_filter_behavior = label_filter_behavior
        self._label_ids = label_ids
        self._topic_name = topic_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WatchRequest of this WatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label_filter_action(self):
        """Gets the label_filter_action of this WatchRequest.

        Filtering behavior of `labelIds list` specified. This field is deprecated because it caused incorrect behavior in some cases; use `label_filter_behavior` instead.

        :return: The label_filter_action of this WatchRequest.
        :rtype: str
        """
        return self._label_filter_action

    @label_filter_action.setter
    def label_filter_action(self, label_filter_action):
        """Sets the label_filter_action of this WatchRequest.

        Filtering behavior of `labelIds list` specified. This field is deprecated because it caused incorrect behavior in some cases; use `label_filter_behavior` instead.

        :param label_filter_action: The label_filter_action of this WatchRequest.
        :type label_filter_action: str
        """
        allowed_values = ["include", "exclude"]  # noqa: E501
        if label_filter_action not in allowed_values:
            raise ValueError(
                "Invalid value for `label_filter_action` ({0}), must be one of {1}"
                .format(label_filter_action, allowed_values)
            )

        self._label_filter_action = label_filter_action

    @property
    def label_filter_behavior(self):
        """Gets the label_filter_behavior of this WatchRequest.

        Filtering behavior of `labelIds list` specified. This field replaces `label_filter_action`; if set, `label_filter_action` is ignored.

        :return: The label_filter_behavior of this WatchRequest.
        :rtype: str
        """
        return self._label_filter_behavior

    @label_filter_behavior.setter
    def label_filter_behavior(self, label_filter_behavior):
        """Sets the label_filter_behavior of this WatchRequest.

        Filtering behavior of `labelIds list` specified. This field replaces `label_filter_action`; if set, `label_filter_action` is ignored.

        :param label_filter_behavior: The label_filter_behavior of this WatchRequest.
        :type label_filter_behavior: str
        """
        allowed_values = ["include", "exclude"]  # noqa: E501
        if label_filter_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `label_filter_behavior` ({0}), must be one of {1}"
                .format(label_filter_behavior, allowed_values)
            )

        self._label_filter_behavior = label_filter_behavior

    @property
    def label_ids(self):
        """Gets the label_ids of this WatchRequest.

        List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.

        :return: The label_ids of this WatchRequest.
        :rtype: List[str]
        """
        return self._label_ids

    @label_ids.setter
    def label_ids(self, label_ids):
        """Sets the label_ids of this WatchRequest.

        List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.

        :param label_ids: The label_ids of this WatchRequest.
        :type label_ids: List[str]
        """

        self._label_ids = label_ids

    @property
    def topic_name(self):
        """Gets the topic_name of this WatchRequest.

        A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail \"publish\" permission on it. For example, \"projects/my-project-identifier/topics/my-topic-name\" (using the Cloud Pub/Sub \"v1\" topic naming format). Note that the \"my-project-identifier\" portion must exactly match your Google developer project id (the one executing this watch request).

        :return: The topic_name of this WatchRequest.
        :rtype: str
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name):
        """Sets the topic_name of this WatchRequest.

        A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail \"publish\" permission on it. For example, \"projects/my-project-identifier/topics/my-topic-name\" (using the Cloud Pub/Sub \"v1\" topic naming format). Note that the \"my-project-identifier\" portion must exactly match your Google developer project id (the one executing this watch request).

        :param topic_name: The topic_name of this WatchRequest.
        :type topic_name: str
        """

        self._topic_name = topic_name
