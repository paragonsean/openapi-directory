# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SmtpMsa(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, password: str=None, port: int=None, security_mode: str=None, username: str=None):
        """SmtpMsa - a model defined in OpenAPI

        :param host: The host of this SmtpMsa.
        :param password: The password of this SmtpMsa.
        :param port: The port of this SmtpMsa.
        :param security_mode: The security_mode of this SmtpMsa.
        :param username: The username of this SmtpMsa.
        """
        self.openapi_types = {
            'host': str,
            'password': str,
            'port': int,
            'security_mode': str,
            'username': str
        }

        self.attribute_map = {
            'host': 'host',
            'password': 'password',
            'port': 'port',
            'security_mode': 'securityMode',
            'username': 'username'
        }

        self._host = host
        self._password = password
        self._port = port
        self._security_mode = security_mode
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SmtpMsa':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SmtpMsa of this SmtpMsa.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this SmtpMsa.

        The hostname of the SMTP service. Required.

        :return: The host of this SmtpMsa.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SmtpMsa.

        The hostname of the SMTP service. Required.

        :param host: The host of this SmtpMsa.
        :type host: str
        """

        self._host = host

    @property
    def password(self):
        """Gets the password of this SmtpMsa.

        The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.

        :return: The password of this SmtpMsa.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SmtpMsa.

        The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.

        :param password: The password of this SmtpMsa.
        :type password: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this SmtpMsa.

        The port of the SMTP service. Required.

        :return: The port of this SmtpMsa.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SmtpMsa.

        The port of the SMTP service. Required.

        :param port: The port of this SmtpMsa.
        :type port: int
        """

        self._port = port

    @property
    def security_mode(self):
        """Gets the security_mode of this SmtpMsa.

        The protocol that will be used to secure communication with the SMTP service. Required.

        :return: The security_mode of this SmtpMsa.
        :rtype: str
        """
        return self._security_mode

    @security_mode.setter
    def security_mode(self, security_mode):
        """Sets the security_mode of this SmtpMsa.

        The protocol that will be used to secure communication with the SMTP service. Required.

        :param security_mode: The security_mode of this SmtpMsa.
        :type security_mode: str
        """
        allowed_values = ["securityModeUnspecified", "none", "ssl", "starttls"]  # noqa: E501
        if security_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `security_mode` ({0}), must be one of {1}"
                .format(security_mode, allowed_values)
            )

        self._security_mode = security_mode

    @property
    def username(self):
        """Gets the username of this SmtpMsa.

        The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.

        :return: The username of this SmtpMsa.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SmtpMsa.

        The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.

        :param username: The username of this SmtpMsa.
        :type username: str
        """

        self._username = username
