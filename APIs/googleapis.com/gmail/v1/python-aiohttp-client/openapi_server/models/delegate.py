# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Delegate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delegate_email: str=None, verification_status: str=None):
        """Delegate - a model defined in OpenAPI

        :param delegate_email: The delegate_email of this Delegate.
        :param verification_status: The verification_status of this Delegate.
        """
        self.openapi_types = {
            'delegate_email': str,
            'verification_status': str
        }

        self.attribute_map = {
            'delegate_email': 'delegateEmail',
            'verification_status': 'verificationStatus'
        }

        self._delegate_email = delegate_email
        self._verification_status = verification_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Delegate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Delegate of this Delegate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delegate_email(self):
        """Gets the delegate_email of this Delegate.

        The email address of the delegate.

        :return: The delegate_email of this Delegate.
        :rtype: str
        """
        return self._delegate_email

    @delegate_email.setter
    def delegate_email(self, delegate_email):
        """Sets the delegate_email of this Delegate.

        The email address of the delegate.

        :param delegate_email: The delegate_email of this Delegate.
        :type delegate_email: str
        """

        self._delegate_email = delegate_email

    @property
    def verification_status(self):
        """Gets the verification_status of this Delegate.

        Indicates whether this address has been verified and can act as a delegate for the account. Read-only.

        :return: The verification_status of this Delegate.
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this Delegate.

        Indicates whether this address has been verified and can act as a delegate for the account. Read-only.

        :param verification_status: The verification_status of this Delegate.
        :type verification_status: str
        """
        allowed_values = ["verificationStatusUnspecified", "accepted", "pending", "rejected", "expired"]  # noqa: E501
        if verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status
