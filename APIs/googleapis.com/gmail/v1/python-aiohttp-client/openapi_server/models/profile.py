# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Profile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, history_id: str=None, messages_total: int=None, threads_total: int=None):
        """Profile - a model defined in OpenAPI

        :param email_address: The email_address of this Profile.
        :param history_id: The history_id of this Profile.
        :param messages_total: The messages_total of this Profile.
        :param threads_total: The threads_total of this Profile.
        """
        self.openapi_types = {
            'email_address': str,
            'history_id': str,
            'messages_total': int,
            'threads_total': int
        }

        self.attribute_map = {
            'email_address': 'emailAddress',
            'history_id': 'historyId',
            'messages_total': 'messagesTotal',
            'threads_total': 'threadsTotal'
        }

        self._email_address = email_address
        self._history_id = history_id
        self._messages_total = messages_total
        self._threads_total = threads_total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Profile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Profile of this Profile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this Profile.

        The user's email address.

        :return: The email_address of this Profile.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Profile.

        The user's email address.

        :param email_address: The email_address of this Profile.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def history_id(self):
        """Gets the history_id of this Profile.

        The ID of the mailbox's current history record.

        :return: The history_id of this Profile.
        :rtype: str
        """
        return self._history_id

    @history_id.setter
    def history_id(self, history_id):
        """Sets the history_id of this Profile.

        The ID of the mailbox's current history record.

        :param history_id: The history_id of this Profile.
        :type history_id: str
        """

        self._history_id = history_id

    @property
    def messages_total(self):
        """Gets the messages_total of this Profile.

        The total number of messages in the mailbox.

        :return: The messages_total of this Profile.
        :rtype: int
        """
        return self._messages_total

    @messages_total.setter
    def messages_total(self, messages_total):
        """Sets the messages_total of this Profile.

        The total number of messages in the mailbox.

        :param messages_total: The messages_total of this Profile.
        :type messages_total: int
        """

        self._messages_total = messages_total

    @property
    def threads_total(self):
        """Gets the threads_total of this Profile.

        The total number of threads in the mailbox.

        :return: The threads_total of this Profile.
        :rtype: int
        """
        return self._threads_total

    @threads_total.setter
    def threads_total(self, threads_total):
        """Sets the threads_total of this Profile.

        The total number of threads in the mailbox.

        :param threads_total: The threads_total of this Profile.
        :type threads_total: int
        """

        self._threads_total = threads_total
