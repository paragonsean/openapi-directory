/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventData::OAIEventData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventData::OAIEventData() {
    this->initializeModel();
}

OAIEventData::~OAIEventData() {}

void OAIEventData::initializeModel() {

    m_event_action_isSet = false;
    m_event_action_isValid = false;

    m_event_category_isSet = false;
    m_event_category_isValid = false;

    m_event_count_isSet = false;
    m_event_count_isValid = false;

    m_event_label_isSet = false;
    m_event_label_isValid = false;

    m_event_value_isSet = false;
    m_event_value_isValid = false;
}

void OAIEventData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventData::fromJsonObject(QJsonObject json) {

    m_event_action_isValid = ::OpenAPI::fromJsonValue(m_event_action, json[QString("eventAction")]);
    m_event_action_isSet = !json[QString("eventAction")].isNull() && m_event_action_isValid;

    m_event_category_isValid = ::OpenAPI::fromJsonValue(m_event_category, json[QString("eventCategory")]);
    m_event_category_isSet = !json[QString("eventCategory")].isNull() && m_event_category_isValid;

    m_event_count_isValid = ::OpenAPI::fromJsonValue(m_event_count, json[QString("eventCount")]);
    m_event_count_isSet = !json[QString("eventCount")].isNull() && m_event_count_isValid;

    m_event_label_isValid = ::OpenAPI::fromJsonValue(m_event_label, json[QString("eventLabel")]);
    m_event_label_isSet = !json[QString("eventLabel")].isNull() && m_event_label_isValid;

    m_event_value_isValid = ::OpenAPI::fromJsonValue(m_event_value, json[QString("eventValue")]);
    m_event_value_isSet = !json[QString("eventValue")].isNull() && m_event_value_isValid;
}

QString OAIEventData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventData::asJsonObject() const {
    QJsonObject obj;
    if (m_event_action_isSet) {
        obj.insert(QString("eventAction"), ::OpenAPI::toJsonValue(m_event_action));
    }
    if (m_event_category_isSet) {
        obj.insert(QString("eventCategory"), ::OpenAPI::toJsonValue(m_event_category));
    }
    if (m_event_count_isSet) {
        obj.insert(QString("eventCount"), ::OpenAPI::toJsonValue(m_event_count));
    }
    if (m_event_label_isSet) {
        obj.insert(QString("eventLabel"), ::OpenAPI::toJsonValue(m_event_label));
    }
    if (m_event_value_isSet) {
        obj.insert(QString("eventValue"), ::OpenAPI::toJsonValue(m_event_value));
    }
    return obj;
}

QString OAIEventData::getEventAction() const {
    return m_event_action;
}
void OAIEventData::setEventAction(const QString &event_action) {
    m_event_action = event_action;
    m_event_action_isSet = true;
}

bool OAIEventData::is_event_action_Set() const{
    return m_event_action_isSet;
}

bool OAIEventData::is_event_action_Valid() const{
    return m_event_action_isValid;
}

QString OAIEventData::getEventCategory() const {
    return m_event_category;
}
void OAIEventData::setEventCategory(const QString &event_category) {
    m_event_category = event_category;
    m_event_category_isSet = true;
}

bool OAIEventData::is_event_category_Set() const{
    return m_event_category_isSet;
}

bool OAIEventData::is_event_category_Valid() const{
    return m_event_category_isValid;
}

QString OAIEventData::getEventCount() const {
    return m_event_count;
}
void OAIEventData::setEventCount(const QString &event_count) {
    m_event_count = event_count;
    m_event_count_isSet = true;
}

bool OAIEventData::is_event_count_Set() const{
    return m_event_count_isSet;
}

bool OAIEventData::is_event_count_Valid() const{
    return m_event_count_isValid;
}

QString OAIEventData::getEventLabel() const {
    return m_event_label;
}
void OAIEventData::setEventLabel(const QString &event_label) {
    m_event_label = event_label;
    m_event_label_isSet = true;
}

bool OAIEventData::is_event_label_Set() const{
    return m_event_label_isSet;
}

bool OAIEventData::is_event_label_Valid() const{
    return m_event_label_isValid;
}

QString OAIEventData::getEventValue() const {
    return m_event_value;
}
void OAIEventData::setEventValue(const QString &event_value) {
    m_event_value = event_value;
    m_event_value_isSet = true;
}

bool OAIEventData::is_event_value_Set() const{
    return m_event_value_isSet;
}

bool OAIEventData::is_event_value_Valid() const{
    return m_event_value_isValid;
}

bool OAIEventData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
