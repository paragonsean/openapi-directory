/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotHeader::OAIPivotHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotHeader::OAIPivotHeader() {
    this->initializeModel();
}

OAIPivotHeader::~OAIPivotHeader() {}

void OAIPivotHeader::initializeModel() {

    m_pivot_header_entries_isSet = false;
    m_pivot_header_entries_isValid = false;

    m_total_pivot_groups_count_isSet = false;
    m_total_pivot_groups_count_isValid = false;
}

void OAIPivotHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotHeader::fromJsonObject(QJsonObject json) {

    m_pivot_header_entries_isValid = ::OpenAPI::fromJsonValue(m_pivot_header_entries, json[QString("pivotHeaderEntries")]);
    m_pivot_header_entries_isSet = !json[QString("pivotHeaderEntries")].isNull() && m_pivot_header_entries_isValid;

    m_total_pivot_groups_count_isValid = ::OpenAPI::fromJsonValue(m_total_pivot_groups_count, json[QString("totalPivotGroupsCount")]);
    m_total_pivot_groups_count_isSet = !json[QString("totalPivotGroupsCount")].isNull() && m_total_pivot_groups_count_isValid;
}

QString OAIPivotHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_pivot_header_entries.size() > 0) {
        obj.insert(QString("pivotHeaderEntries"), ::OpenAPI::toJsonValue(m_pivot_header_entries));
    }
    if (m_total_pivot_groups_count_isSet) {
        obj.insert(QString("totalPivotGroupsCount"), ::OpenAPI::toJsonValue(m_total_pivot_groups_count));
    }
    return obj;
}

QList<OAIPivotHeaderEntry> OAIPivotHeader::getPivotHeaderEntries() const {
    return m_pivot_header_entries;
}
void OAIPivotHeader::setPivotHeaderEntries(const QList<OAIPivotHeaderEntry> &pivot_header_entries) {
    m_pivot_header_entries = pivot_header_entries;
    m_pivot_header_entries_isSet = true;
}

bool OAIPivotHeader::is_pivot_header_entries_Set() const{
    return m_pivot_header_entries_isSet;
}

bool OAIPivotHeader::is_pivot_header_entries_Valid() const{
    return m_pivot_header_entries_isValid;
}

qint32 OAIPivotHeader::getTotalPivotGroupsCount() const {
    return m_total_pivot_groups_count;
}
void OAIPivotHeader::setTotalPivotGroupsCount(const qint32 &total_pivot_groups_count) {
    m_total_pivot_groups_count = total_pivot_groups_count;
    m_total_pivot_groups_count_isSet = true;
}

bool OAIPivotHeader::is_total_pivot_groups_count_Set() const{
    return m_total_pivot_groups_count_isSet;
}

bool OAIPivotHeader::is_total_pivot_groups_count_Valid() const{
    return m_total_pivot_groups_count_isValid;
}

bool OAIPivotHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pivot_header_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pivot_groups_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
