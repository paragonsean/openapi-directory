/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionFilter::OAIDimensionFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionFilter::OAIDimensionFilter() {
    this->initializeModel();
}

OAIDimensionFilter::~OAIDimensionFilter() {}

void OAIDimensionFilter::initializeModel() {

    m_case_sensitive_isSet = false;
    m_case_sensitive_isValid = false;

    m_dimension_name_isSet = false;
    m_dimension_name_isValid = false;

    m_expressions_isSet = false;
    m_expressions_isValid = false;

    m_r_not_isSet = false;
    m_r_not_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAIDimensionFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionFilter::fromJsonObject(QJsonObject json) {

    m_case_sensitive_isValid = ::OpenAPI::fromJsonValue(m_case_sensitive, json[QString("caseSensitive")]);
    m_case_sensitive_isSet = !json[QString("caseSensitive")].isNull() && m_case_sensitive_isValid;

    m_dimension_name_isValid = ::OpenAPI::fromJsonValue(m_dimension_name, json[QString("dimensionName")]);
    m_dimension_name_isSet = !json[QString("dimensionName")].isNull() && m_dimension_name_isValid;

    m_expressions_isValid = ::OpenAPI::fromJsonValue(m_expressions, json[QString("expressions")]);
    m_expressions_isSet = !json[QString("expressions")].isNull() && m_expressions_isValid;

    m_r_not_isValid = ::OpenAPI::fromJsonValue(m_r_not, json[QString("not")]);
    m_r_not_isSet = !json[QString("not")].isNull() && m_r_not_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;
}

QString OAIDimensionFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_case_sensitive_isSet) {
        obj.insert(QString("caseSensitive"), ::OpenAPI::toJsonValue(m_case_sensitive));
    }
    if (m_dimension_name_isSet) {
        obj.insert(QString("dimensionName"), ::OpenAPI::toJsonValue(m_dimension_name));
    }
    if (m_expressions.size() > 0) {
        obj.insert(QString("expressions"), ::OpenAPI::toJsonValue(m_expressions));
    }
    if (m_r_not_isSet) {
        obj.insert(QString("not"), ::OpenAPI::toJsonValue(m_r_not));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

bool OAIDimensionFilter::isCaseSensitive() const {
    return m_case_sensitive;
}
void OAIDimensionFilter::setCaseSensitive(const bool &case_sensitive) {
    m_case_sensitive = case_sensitive;
    m_case_sensitive_isSet = true;
}

bool OAIDimensionFilter::is_case_sensitive_Set() const{
    return m_case_sensitive_isSet;
}

bool OAIDimensionFilter::is_case_sensitive_Valid() const{
    return m_case_sensitive_isValid;
}

QString OAIDimensionFilter::getDimensionName() const {
    return m_dimension_name;
}
void OAIDimensionFilter::setDimensionName(const QString &dimension_name) {
    m_dimension_name = dimension_name;
    m_dimension_name_isSet = true;
}

bool OAIDimensionFilter::is_dimension_name_Set() const{
    return m_dimension_name_isSet;
}

bool OAIDimensionFilter::is_dimension_name_Valid() const{
    return m_dimension_name_isValid;
}

QList<QString> OAIDimensionFilter::getExpressions() const {
    return m_expressions;
}
void OAIDimensionFilter::setExpressions(const QList<QString> &expressions) {
    m_expressions = expressions;
    m_expressions_isSet = true;
}

bool OAIDimensionFilter::is_expressions_Set() const{
    return m_expressions_isSet;
}

bool OAIDimensionFilter::is_expressions_Valid() const{
    return m_expressions_isValid;
}

bool OAIDimensionFilter::isRNot() const {
    return m_r_not;
}
void OAIDimensionFilter::setRNot(const bool &r_not) {
    m_r_not = r_not;
    m_r_not_isSet = true;
}

bool OAIDimensionFilter::is_r_not_Set() const{
    return m_r_not_isSet;
}

bool OAIDimensionFilter::is_r_not_Valid() const{
    return m_r_not_isValid;
}

QString OAIDimensionFilter::getROperator() const {
    return m_r_operator;
}
void OAIDimensionFilter::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIDimensionFilter::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIDimensionFilter::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAIDimensionFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_not_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
