/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentDimensionFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentDimensionFilter::OAISegmentDimensionFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentDimensionFilter::OAISegmentDimensionFilter() {
    this->initializeModel();
}

OAISegmentDimensionFilter::~OAISegmentDimensionFilter() {}

void OAISegmentDimensionFilter::initializeModel() {

    m_case_sensitive_isSet = false;
    m_case_sensitive_isValid = false;

    m_dimension_name_isSet = false;
    m_dimension_name_isValid = false;

    m_expressions_isSet = false;
    m_expressions_isValid = false;

    m_max_comparison_value_isSet = false;
    m_max_comparison_value_isValid = false;

    m_min_comparison_value_isSet = false;
    m_min_comparison_value_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAISegmentDimensionFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentDimensionFilter::fromJsonObject(QJsonObject json) {

    m_case_sensitive_isValid = ::OpenAPI::fromJsonValue(m_case_sensitive, json[QString("caseSensitive")]);
    m_case_sensitive_isSet = !json[QString("caseSensitive")].isNull() && m_case_sensitive_isValid;

    m_dimension_name_isValid = ::OpenAPI::fromJsonValue(m_dimension_name, json[QString("dimensionName")]);
    m_dimension_name_isSet = !json[QString("dimensionName")].isNull() && m_dimension_name_isValid;

    m_expressions_isValid = ::OpenAPI::fromJsonValue(m_expressions, json[QString("expressions")]);
    m_expressions_isSet = !json[QString("expressions")].isNull() && m_expressions_isValid;

    m_max_comparison_value_isValid = ::OpenAPI::fromJsonValue(m_max_comparison_value, json[QString("maxComparisonValue")]);
    m_max_comparison_value_isSet = !json[QString("maxComparisonValue")].isNull() && m_max_comparison_value_isValid;

    m_min_comparison_value_isValid = ::OpenAPI::fromJsonValue(m_min_comparison_value, json[QString("minComparisonValue")]);
    m_min_comparison_value_isSet = !json[QString("minComparisonValue")].isNull() && m_min_comparison_value_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;
}

QString OAISegmentDimensionFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentDimensionFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_case_sensitive_isSet) {
        obj.insert(QString("caseSensitive"), ::OpenAPI::toJsonValue(m_case_sensitive));
    }
    if (m_dimension_name_isSet) {
        obj.insert(QString("dimensionName"), ::OpenAPI::toJsonValue(m_dimension_name));
    }
    if (m_expressions.size() > 0) {
        obj.insert(QString("expressions"), ::OpenAPI::toJsonValue(m_expressions));
    }
    if (m_max_comparison_value_isSet) {
        obj.insert(QString("maxComparisonValue"), ::OpenAPI::toJsonValue(m_max_comparison_value));
    }
    if (m_min_comparison_value_isSet) {
        obj.insert(QString("minComparisonValue"), ::OpenAPI::toJsonValue(m_min_comparison_value));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

bool OAISegmentDimensionFilter::isCaseSensitive() const {
    return m_case_sensitive;
}
void OAISegmentDimensionFilter::setCaseSensitive(const bool &case_sensitive) {
    m_case_sensitive = case_sensitive;
    m_case_sensitive_isSet = true;
}

bool OAISegmentDimensionFilter::is_case_sensitive_Set() const{
    return m_case_sensitive_isSet;
}

bool OAISegmentDimensionFilter::is_case_sensitive_Valid() const{
    return m_case_sensitive_isValid;
}

QString OAISegmentDimensionFilter::getDimensionName() const {
    return m_dimension_name;
}
void OAISegmentDimensionFilter::setDimensionName(const QString &dimension_name) {
    m_dimension_name = dimension_name;
    m_dimension_name_isSet = true;
}

bool OAISegmentDimensionFilter::is_dimension_name_Set() const{
    return m_dimension_name_isSet;
}

bool OAISegmentDimensionFilter::is_dimension_name_Valid() const{
    return m_dimension_name_isValid;
}

QList<QString> OAISegmentDimensionFilter::getExpressions() const {
    return m_expressions;
}
void OAISegmentDimensionFilter::setExpressions(const QList<QString> &expressions) {
    m_expressions = expressions;
    m_expressions_isSet = true;
}

bool OAISegmentDimensionFilter::is_expressions_Set() const{
    return m_expressions_isSet;
}

bool OAISegmentDimensionFilter::is_expressions_Valid() const{
    return m_expressions_isValid;
}

QString OAISegmentDimensionFilter::getMaxComparisonValue() const {
    return m_max_comparison_value;
}
void OAISegmentDimensionFilter::setMaxComparisonValue(const QString &max_comparison_value) {
    m_max_comparison_value = max_comparison_value;
    m_max_comparison_value_isSet = true;
}

bool OAISegmentDimensionFilter::is_max_comparison_value_Set() const{
    return m_max_comparison_value_isSet;
}

bool OAISegmentDimensionFilter::is_max_comparison_value_Valid() const{
    return m_max_comparison_value_isValid;
}

QString OAISegmentDimensionFilter::getMinComparisonValue() const {
    return m_min_comparison_value;
}
void OAISegmentDimensionFilter::setMinComparisonValue(const QString &min_comparison_value) {
    m_min_comparison_value = min_comparison_value;
    m_min_comparison_value_isSet = true;
}

bool OAISegmentDimensionFilter::is_min_comparison_value_Set() const{
    return m_min_comparison_value_isSet;
}

bool OAISegmentDimensionFilter::is_min_comparison_value_Valid() const{
    return m_min_comparison_value_isValid;
}

QString OAISegmentDimensionFilter::getROperator() const {
    return m_r_operator;
}
void OAISegmentDimensionFilter::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAISegmentDimensionFilter::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAISegmentDimensionFilter::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAISegmentDimensionFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_comparison_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_comparison_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentDimensionFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
