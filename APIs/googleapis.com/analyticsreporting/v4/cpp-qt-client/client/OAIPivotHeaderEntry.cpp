/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivotHeaderEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivotHeaderEntry::OAIPivotHeaderEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivotHeaderEntry::OAIPivotHeaderEntry() {
    this->initializeModel();
}

OAIPivotHeaderEntry::~OAIPivotHeaderEntry() {}

void OAIPivotHeaderEntry::initializeModel() {

    m_dimension_names_isSet = false;
    m_dimension_names_isValid = false;

    m_dimension_values_isSet = false;
    m_dimension_values_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;
}

void OAIPivotHeaderEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivotHeaderEntry::fromJsonObject(QJsonObject json) {

    m_dimension_names_isValid = ::OpenAPI::fromJsonValue(m_dimension_names, json[QString("dimensionNames")]);
    m_dimension_names_isSet = !json[QString("dimensionNames")].isNull() && m_dimension_names_isValid;

    m_dimension_values_isValid = ::OpenAPI::fromJsonValue(m_dimension_values, json[QString("dimensionValues")]);
    m_dimension_values_isSet = !json[QString("dimensionValues")].isNull() && m_dimension_values_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;
}

QString OAIPivotHeaderEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivotHeaderEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_names.size() > 0) {
        obj.insert(QString("dimensionNames"), ::OpenAPI::toJsonValue(m_dimension_names));
    }
    if (m_dimension_values.size() > 0) {
        obj.insert(QString("dimensionValues"), ::OpenAPI::toJsonValue(m_dimension_values));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    return obj;
}

QList<QString> OAIPivotHeaderEntry::getDimensionNames() const {
    return m_dimension_names;
}
void OAIPivotHeaderEntry::setDimensionNames(const QList<QString> &dimension_names) {
    m_dimension_names = dimension_names;
    m_dimension_names_isSet = true;
}

bool OAIPivotHeaderEntry::is_dimension_names_Set() const{
    return m_dimension_names_isSet;
}

bool OAIPivotHeaderEntry::is_dimension_names_Valid() const{
    return m_dimension_names_isValid;
}

QList<QString> OAIPivotHeaderEntry::getDimensionValues() const {
    return m_dimension_values;
}
void OAIPivotHeaderEntry::setDimensionValues(const QList<QString> &dimension_values) {
    m_dimension_values = dimension_values;
    m_dimension_values_isSet = true;
}

bool OAIPivotHeaderEntry::is_dimension_values_Set() const{
    return m_dimension_values_isSet;
}

bool OAIPivotHeaderEntry::is_dimension_values_Valid() const{
    return m_dimension_values_isValid;
}

OAIMetricHeaderEntry OAIPivotHeaderEntry::getMetric() const {
    return m_metric;
}
void OAIPivotHeaderEntry::setMetric(const OAIMetricHeaderEntry &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIPivotHeaderEntry::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIPivotHeaderEntry::is_metric_Valid() const{
    return m_metric_isValid;
}

bool OAIPivotHeaderEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivotHeaderEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
