/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPivot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPivot::OAIPivot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPivot::OAIPivot() {
    this->initializeModel();
}

OAIPivot::~OAIPivot() {}

void OAIPivot::initializeModel() {

    m_dimension_filter_clauses_isSet = false;
    m_dimension_filter_clauses_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_max_group_count_isSet = false;
    m_max_group_count_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_start_group_isSet = false;
    m_start_group_isValid = false;
}

void OAIPivot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPivot::fromJsonObject(QJsonObject json) {

    m_dimension_filter_clauses_isValid = ::OpenAPI::fromJsonValue(m_dimension_filter_clauses, json[QString("dimensionFilterClauses")]);
    m_dimension_filter_clauses_isSet = !json[QString("dimensionFilterClauses")].isNull() && m_dimension_filter_clauses_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_max_group_count_isValid = ::OpenAPI::fromJsonValue(m_max_group_count, json[QString("maxGroupCount")]);
    m_max_group_count_isSet = !json[QString("maxGroupCount")].isNull() && m_max_group_count_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_start_group_isValid = ::OpenAPI::fromJsonValue(m_start_group, json[QString("startGroup")]);
    m_start_group_isSet = !json[QString("startGroup")].isNull() && m_start_group_isValid;
}

QString OAIPivot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPivot::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_filter_clauses.size() > 0) {
        obj.insert(QString("dimensionFilterClauses"), ::OpenAPI::toJsonValue(m_dimension_filter_clauses));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_max_group_count_isSet) {
        obj.insert(QString("maxGroupCount"), ::OpenAPI::toJsonValue(m_max_group_count));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_start_group_isSet) {
        obj.insert(QString("startGroup"), ::OpenAPI::toJsonValue(m_start_group));
    }
    return obj;
}

QList<OAIDimensionFilterClause> OAIPivot::getDimensionFilterClauses() const {
    return m_dimension_filter_clauses;
}
void OAIPivot::setDimensionFilterClauses(const QList<OAIDimensionFilterClause> &dimension_filter_clauses) {
    m_dimension_filter_clauses = dimension_filter_clauses;
    m_dimension_filter_clauses_isSet = true;
}

bool OAIPivot::is_dimension_filter_clauses_Set() const{
    return m_dimension_filter_clauses_isSet;
}

bool OAIPivot::is_dimension_filter_clauses_Valid() const{
    return m_dimension_filter_clauses_isValid;
}

QList<OAIDimension> OAIPivot::getDimensions() const {
    return m_dimensions;
}
void OAIPivot::setDimensions(const QList<OAIDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIPivot::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIPivot::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

qint32 OAIPivot::getMaxGroupCount() const {
    return m_max_group_count;
}
void OAIPivot::setMaxGroupCount(const qint32 &max_group_count) {
    m_max_group_count = max_group_count;
    m_max_group_count_isSet = true;
}

bool OAIPivot::is_max_group_count_Set() const{
    return m_max_group_count_isSet;
}

bool OAIPivot::is_max_group_count_Valid() const{
    return m_max_group_count_isValid;
}

QList<OAIMetric> OAIPivot::getMetrics() const {
    return m_metrics;
}
void OAIPivot::setMetrics(const QList<OAIMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIPivot::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIPivot::is_metrics_Valid() const{
    return m_metrics_isValid;
}

qint32 OAIPivot::getStartGroup() const {
    return m_start_group;
}
void OAIPivot::setStartGroup(const qint32 &start_group) {
    m_start_group = start_group;
    m_start_group_isSet = true;
}

bool OAIPivot::is_start_group_Set() const{
    return m_start_group_isSet;
}

bool OAIPivot::is_start_group_Valid() const{
    return m_start_group_isValid;
}

bool OAIPivot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_filter_clauses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_group_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_group_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPivot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
