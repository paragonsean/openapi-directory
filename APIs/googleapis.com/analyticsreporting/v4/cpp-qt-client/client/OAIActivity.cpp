/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivity::OAIActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivity::OAIActivity() {
    this->initializeModel();
}

OAIActivity::~OAIActivity() {}

void OAIActivity::initializeModel() {

    m_activity_time_isSet = false;
    m_activity_time_isValid = false;

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_appview_isSet = false;
    m_appview_isValid = false;

    m_campaign_isSet = false;
    m_campaign_isValid = false;

    m_channel_grouping_isSet = false;
    m_channel_grouping_isValid = false;

    m_custom_dimension_isSet = false;
    m_custom_dimension_isValid = false;

    m_ecommerce_isSet = false;
    m_ecommerce_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_goals_isSet = false;
    m_goals_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_keyword_isSet = false;
    m_keyword_isValid = false;

    m_landing_page_path_isSet = false;
    m_landing_page_path_isValid = false;

    m_medium_isSet = false;
    m_medium_isValid = false;

    m_pageview_isSet = false;
    m_pageview_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity::fromJsonObject(QJsonObject json) {

    m_activity_time_isValid = ::OpenAPI::fromJsonValue(m_activity_time, json[QString("activityTime")]);
    m_activity_time_isSet = !json[QString("activityTime")].isNull() && m_activity_time_isValid;

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;

    m_appview_isValid = ::OpenAPI::fromJsonValue(m_appview, json[QString("appview")]);
    m_appview_isSet = !json[QString("appview")].isNull() && m_appview_isValid;

    m_campaign_isValid = ::OpenAPI::fromJsonValue(m_campaign, json[QString("campaign")]);
    m_campaign_isSet = !json[QString("campaign")].isNull() && m_campaign_isValid;

    m_channel_grouping_isValid = ::OpenAPI::fromJsonValue(m_channel_grouping, json[QString("channelGrouping")]);
    m_channel_grouping_isSet = !json[QString("channelGrouping")].isNull() && m_channel_grouping_isValid;

    m_custom_dimension_isValid = ::OpenAPI::fromJsonValue(m_custom_dimension, json[QString("customDimension")]);
    m_custom_dimension_isSet = !json[QString("customDimension")].isNull() && m_custom_dimension_isValid;

    m_ecommerce_isValid = ::OpenAPI::fromJsonValue(m_ecommerce, json[QString("ecommerce")]);
    m_ecommerce_isSet = !json[QString("ecommerce")].isNull() && m_ecommerce_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_goals_isValid = ::OpenAPI::fromJsonValue(m_goals, json[QString("goals")]);
    m_goals_isSet = !json[QString("goals")].isNull() && m_goals_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("keyword")]);
    m_keyword_isSet = !json[QString("keyword")].isNull() && m_keyword_isValid;

    m_landing_page_path_isValid = ::OpenAPI::fromJsonValue(m_landing_page_path, json[QString("landingPagePath")]);
    m_landing_page_path_isSet = !json[QString("landingPagePath")].isNull() && m_landing_page_path_isValid;

    m_medium_isValid = ::OpenAPI::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;

    m_pageview_isValid = ::OpenAPI::fromJsonValue(m_pageview, json[QString("pageview")]);
    m_pageview_isSet = !json[QString("pageview")].isNull() && m_pageview_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_time_isSet) {
        obj.insert(QString("activityTime"), ::OpenAPI::toJsonValue(m_activity_time));
    }
    if (m_activity_type_isSet) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_appview.isSet()) {
        obj.insert(QString("appview"), ::OpenAPI::toJsonValue(m_appview));
    }
    if (m_campaign_isSet) {
        obj.insert(QString("campaign"), ::OpenAPI::toJsonValue(m_campaign));
    }
    if (m_channel_grouping_isSet) {
        obj.insert(QString("channelGrouping"), ::OpenAPI::toJsonValue(m_channel_grouping));
    }
    if (m_custom_dimension.size() > 0) {
        obj.insert(QString("customDimension"), ::OpenAPI::toJsonValue(m_custom_dimension));
    }
    if (m_ecommerce.isSet()) {
        obj.insert(QString("ecommerce"), ::OpenAPI::toJsonValue(m_ecommerce));
    }
    if (m_event.isSet()) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_goals.isSet()) {
        obj.insert(QString("goals"), ::OpenAPI::toJsonValue(m_goals));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_keyword_isSet) {
        obj.insert(QString("keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    if (m_landing_page_path_isSet) {
        obj.insert(QString("landingPagePath"), ::OpenAPI::toJsonValue(m_landing_page_path));
    }
    if (m_medium_isSet) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(m_medium));
    }
    if (m_pageview.isSet()) {
        obj.insert(QString("pageview"), ::OpenAPI::toJsonValue(m_pageview));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIActivity::getActivityTime() const {
    return m_activity_time;
}
void OAIActivity::setActivityTime(const QString &activity_time) {
    m_activity_time = activity_time;
    m_activity_time_isSet = true;
}

bool OAIActivity::is_activity_time_Set() const{
    return m_activity_time_isSet;
}

bool OAIActivity::is_activity_time_Valid() const{
    return m_activity_time_isValid;
}

QString OAIActivity::getActivityType() const {
    return m_activity_type;
}
void OAIActivity::setActivityType(const QString &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAIActivity::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIActivity::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

OAIScreenviewData OAIActivity::getAppview() const {
    return m_appview;
}
void OAIActivity::setAppview(const OAIScreenviewData &appview) {
    m_appview = appview;
    m_appview_isSet = true;
}

bool OAIActivity::is_appview_Set() const{
    return m_appview_isSet;
}

bool OAIActivity::is_appview_Valid() const{
    return m_appview_isValid;
}

QString OAIActivity::getCampaign() const {
    return m_campaign;
}
void OAIActivity::setCampaign(const QString &campaign) {
    m_campaign = campaign;
    m_campaign_isSet = true;
}

bool OAIActivity::is_campaign_Set() const{
    return m_campaign_isSet;
}

bool OAIActivity::is_campaign_Valid() const{
    return m_campaign_isValid;
}

QString OAIActivity::getChannelGrouping() const {
    return m_channel_grouping;
}
void OAIActivity::setChannelGrouping(const QString &channel_grouping) {
    m_channel_grouping = channel_grouping;
    m_channel_grouping_isSet = true;
}

bool OAIActivity::is_channel_grouping_Set() const{
    return m_channel_grouping_isSet;
}

bool OAIActivity::is_channel_grouping_Valid() const{
    return m_channel_grouping_isValid;
}

QList<OAICustomDimension> OAIActivity::getCustomDimension() const {
    return m_custom_dimension;
}
void OAIActivity::setCustomDimension(const QList<OAICustomDimension> &custom_dimension) {
    m_custom_dimension = custom_dimension;
    m_custom_dimension_isSet = true;
}

bool OAIActivity::is_custom_dimension_Set() const{
    return m_custom_dimension_isSet;
}

bool OAIActivity::is_custom_dimension_Valid() const{
    return m_custom_dimension_isValid;
}

OAIEcommerceData OAIActivity::getEcommerce() const {
    return m_ecommerce;
}
void OAIActivity::setEcommerce(const OAIEcommerceData &ecommerce) {
    m_ecommerce = ecommerce;
    m_ecommerce_isSet = true;
}

bool OAIActivity::is_ecommerce_Set() const{
    return m_ecommerce_isSet;
}

bool OAIActivity::is_ecommerce_Valid() const{
    return m_ecommerce_isValid;
}

OAIEventData OAIActivity::getEvent() const {
    return m_event;
}
void OAIActivity::setEvent(const OAIEventData &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIActivity::is_event_Set() const{
    return m_event_isSet;
}

bool OAIActivity::is_event_Valid() const{
    return m_event_isValid;
}

OAIGoalSetData OAIActivity::getGoals() const {
    return m_goals;
}
void OAIActivity::setGoals(const OAIGoalSetData &goals) {
    m_goals = goals;
    m_goals_isSet = true;
}

bool OAIActivity::is_goals_Set() const{
    return m_goals_isSet;
}

bool OAIActivity::is_goals_Valid() const{
    return m_goals_isValid;
}

QString OAIActivity::getHostname() const {
    return m_hostname;
}
void OAIActivity::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIActivity::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIActivity::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIActivity::getKeyword() const {
    return m_keyword;
}
void OAIActivity::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIActivity::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIActivity::is_keyword_Valid() const{
    return m_keyword_isValid;
}

QString OAIActivity::getLandingPagePath() const {
    return m_landing_page_path;
}
void OAIActivity::setLandingPagePath(const QString &landing_page_path) {
    m_landing_page_path = landing_page_path;
    m_landing_page_path_isSet = true;
}

bool OAIActivity::is_landing_page_path_Set() const{
    return m_landing_page_path_isSet;
}

bool OAIActivity::is_landing_page_path_Valid() const{
    return m_landing_page_path_isValid;
}

QString OAIActivity::getMedium() const {
    return m_medium;
}
void OAIActivity::setMedium(const QString &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OAIActivity::is_medium_Set() const{
    return m_medium_isSet;
}

bool OAIActivity::is_medium_Valid() const{
    return m_medium_isValid;
}

OAIPageviewData OAIActivity::getPageview() const {
    return m_pageview;
}
void OAIActivity::setPageview(const OAIPageviewData &pageview) {
    m_pageview = pageview;
    m_pageview_isSet = true;
}

bool OAIActivity::is_pageview_Set() const{
    return m_pageview_isSet;
}

bool OAIActivity::is_pageview_Valid() const{
    return m_pageview_isValid;
}

QString OAIActivity::getSource() const {
    return m_source;
}
void OAIActivity::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIActivity::is_source_Set() const{
    return m_source_isSet;
}

bool OAIActivity::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_appview.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_grouping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_dimension.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecommerce.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_goals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_landing_page_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pageview.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
