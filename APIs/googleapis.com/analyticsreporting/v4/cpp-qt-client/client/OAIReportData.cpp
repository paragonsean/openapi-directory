/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportData::OAIReportData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportData::OAIReportData() {
    this->initializeModel();
}

OAIReportData::~OAIReportData() {}

void OAIReportData::initializeModel() {

    m_data_last_refreshed_isSet = false;
    m_data_last_refreshed_isValid = false;

    m_empty_reason_isSet = false;
    m_empty_reason_isValid = false;

    m_is_data_golden_isSet = false;
    m_is_data_golden_isValid = false;

    m_maximums_isSet = false;
    m_maximums_isValid = false;

    m_minimums_isSet = false;
    m_minimums_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_samples_read_counts_isSet = false;
    m_samples_read_counts_isValid = false;

    m_sampling_space_sizes_isSet = false;
    m_sampling_space_sizes_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;
}

void OAIReportData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportData::fromJsonObject(QJsonObject json) {

    m_data_last_refreshed_isValid = ::OpenAPI::fromJsonValue(m_data_last_refreshed, json[QString("dataLastRefreshed")]);
    m_data_last_refreshed_isSet = !json[QString("dataLastRefreshed")].isNull() && m_data_last_refreshed_isValid;

    m_empty_reason_isValid = ::OpenAPI::fromJsonValue(m_empty_reason, json[QString("emptyReason")]);
    m_empty_reason_isSet = !json[QString("emptyReason")].isNull() && m_empty_reason_isValid;

    m_is_data_golden_isValid = ::OpenAPI::fromJsonValue(m_is_data_golden, json[QString("isDataGolden")]);
    m_is_data_golden_isSet = !json[QString("isDataGolden")].isNull() && m_is_data_golden_isValid;

    m_maximums_isValid = ::OpenAPI::fromJsonValue(m_maximums, json[QString("maximums")]);
    m_maximums_isSet = !json[QString("maximums")].isNull() && m_maximums_isValid;

    m_minimums_isValid = ::OpenAPI::fromJsonValue(m_minimums, json[QString("minimums")]);
    m_minimums_isSet = !json[QString("minimums")].isNull() && m_minimums_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_samples_read_counts_isValid = ::OpenAPI::fromJsonValue(m_samples_read_counts, json[QString("samplesReadCounts")]);
    m_samples_read_counts_isSet = !json[QString("samplesReadCounts")].isNull() && m_samples_read_counts_isValid;

    m_sampling_space_sizes_isValid = ::OpenAPI::fromJsonValue(m_sampling_space_sizes, json[QString("samplingSpaceSizes")]);
    m_sampling_space_sizes_isSet = !json[QString("samplingSpaceSizes")].isNull() && m_sampling_space_sizes_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;
}

QString OAIReportData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportData::asJsonObject() const {
    QJsonObject obj;
    if (m_data_last_refreshed_isSet) {
        obj.insert(QString("dataLastRefreshed"), ::OpenAPI::toJsonValue(m_data_last_refreshed));
    }
    if (m_empty_reason_isSet) {
        obj.insert(QString("emptyReason"), ::OpenAPI::toJsonValue(m_empty_reason));
    }
    if (m_is_data_golden_isSet) {
        obj.insert(QString("isDataGolden"), ::OpenAPI::toJsonValue(m_is_data_golden));
    }
    if (m_maximums.size() > 0) {
        obj.insert(QString("maximums"), ::OpenAPI::toJsonValue(m_maximums));
    }
    if (m_minimums.size() > 0) {
        obj.insert(QString("minimums"), ::OpenAPI::toJsonValue(m_minimums));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_samples_read_counts.size() > 0) {
        obj.insert(QString("samplesReadCounts"), ::OpenAPI::toJsonValue(m_samples_read_counts));
    }
    if (m_sampling_space_sizes.size() > 0) {
        obj.insert(QString("samplingSpaceSizes"), ::OpenAPI::toJsonValue(m_sampling_space_sizes));
    }
    if (m_totals.size() > 0) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    return obj;
}

QString OAIReportData::getDataLastRefreshed() const {
    return m_data_last_refreshed;
}
void OAIReportData::setDataLastRefreshed(const QString &data_last_refreshed) {
    m_data_last_refreshed = data_last_refreshed;
    m_data_last_refreshed_isSet = true;
}

bool OAIReportData::is_data_last_refreshed_Set() const{
    return m_data_last_refreshed_isSet;
}

bool OAIReportData::is_data_last_refreshed_Valid() const{
    return m_data_last_refreshed_isValid;
}

QString OAIReportData::getEmptyReason() const {
    return m_empty_reason;
}
void OAIReportData::setEmptyReason(const QString &empty_reason) {
    m_empty_reason = empty_reason;
    m_empty_reason_isSet = true;
}

bool OAIReportData::is_empty_reason_Set() const{
    return m_empty_reason_isSet;
}

bool OAIReportData::is_empty_reason_Valid() const{
    return m_empty_reason_isValid;
}

bool OAIReportData::isIsDataGolden() const {
    return m_is_data_golden;
}
void OAIReportData::setIsDataGolden(const bool &is_data_golden) {
    m_is_data_golden = is_data_golden;
    m_is_data_golden_isSet = true;
}

bool OAIReportData::is_is_data_golden_Set() const{
    return m_is_data_golden_isSet;
}

bool OAIReportData::is_is_data_golden_Valid() const{
    return m_is_data_golden_isValid;
}

QList<OAIDateRangeValues> OAIReportData::getMaximums() const {
    return m_maximums;
}
void OAIReportData::setMaximums(const QList<OAIDateRangeValues> &maximums) {
    m_maximums = maximums;
    m_maximums_isSet = true;
}

bool OAIReportData::is_maximums_Set() const{
    return m_maximums_isSet;
}

bool OAIReportData::is_maximums_Valid() const{
    return m_maximums_isValid;
}

QList<OAIDateRangeValues> OAIReportData::getMinimums() const {
    return m_minimums;
}
void OAIReportData::setMinimums(const QList<OAIDateRangeValues> &minimums) {
    m_minimums = minimums;
    m_minimums_isSet = true;
}

bool OAIReportData::is_minimums_Set() const{
    return m_minimums_isSet;
}

bool OAIReportData::is_minimums_Valid() const{
    return m_minimums_isValid;
}

qint32 OAIReportData::getRowCount() const {
    return m_row_count;
}
void OAIReportData::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIReportData::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIReportData::is_row_count_Valid() const{
    return m_row_count_isValid;
}

QList<OAIReportRow> OAIReportData::getRows() const {
    return m_rows;
}
void OAIReportData::setRows(const QList<OAIReportRow> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIReportData::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIReportData::is_rows_Valid() const{
    return m_rows_isValid;
}

QList<QString> OAIReportData::getSamplesReadCounts() const {
    return m_samples_read_counts;
}
void OAIReportData::setSamplesReadCounts(const QList<QString> &samples_read_counts) {
    m_samples_read_counts = samples_read_counts;
    m_samples_read_counts_isSet = true;
}

bool OAIReportData::is_samples_read_counts_Set() const{
    return m_samples_read_counts_isSet;
}

bool OAIReportData::is_samples_read_counts_Valid() const{
    return m_samples_read_counts_isValid;
}

QList<QString> OAIReportData::getSamplingSpaceSizes() const {
    return m_sampling_space_sizes;
}
void OAIReportData::setSamplingSpaceSizes(const QList<QString> &sampling_space_sizes) {
    m_sampling_space_sizes = sampling_space_sizes;
    m_sampling_space_sizes_isSet = true;
}

bool OAIReportData::is_sampling_space_sizes_Set() const{
    return m_sampling_space_sizes_isSet;
}

bool OAIReportData::is_sampling_space_sizes_Valid() const{
    return m_sampling_space_sizes_isValid;
}

QList<OAIDateRangeValues> OAIReportData::getTotals() const {
    return m_totals;
}
void OAIReportData::setTotals(const QList<OAIDateRangeValues> &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAIReportData::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAIReportData::is_totals_Valid() const{
    return m_totals_isValid;
}

bool OAIReportData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_last_refreshed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_data_golden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximums.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimums.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_samples_read_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_space_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
