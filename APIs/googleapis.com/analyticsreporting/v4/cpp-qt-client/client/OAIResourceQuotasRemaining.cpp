/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceQuotasRemaining.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceQuotasRemaining::OAIResourceQuotasRemaining(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceQuotasRemaining::OAIResourceQuotasRemaining() {
    this->initializeModel();
}

OAIResourceQuotasRemaining::~OAIResourceQuotasRemaining() {}

void OAIResourceQuotasRemaining::initializeModel() {

    m_daily_quota_tokens_remaining_isSet = false;
    m_daily_quota_tokens_remaining_isValid = false;

    m_hourly_quota_tokens_remaining_isSet = false;
    m_hourly_quota_tokens_remaining_isValid = false;
}

void OAIResourceQuotasRemaining::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceQuotasRemaining::fromJsonObject(QJsonObject json) {

    m_daily_quota_tokens_remaining_isValid = ::OpenAPI::fromJsonValue(m_daily_quota_tokens_remaining, json[QString("dailyQuotaTokensRemaining")]);
    m_daily_quota_tokens_remaining_isSet = !json[QString("dailyQuotaTokensRemaining")].isNull() && m_daily_quota_tokens_remaining_isValid;

    m_hourly_quota_tokens_remaining_isValid = ::OpenAPI::fromJsonValue(m_hourly_quota_tokens_remaining, json[QString("hourlyQuotaTokensRemaining")]);
    m_hourly_quota_tokens_remaining_isSet = !json[QString("hourlyQuotaTokensRemaining")].isNull() && m_hourly_quota_tokens_remaining_isValid;
}

QString OAIResourceQuotasRemaining::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceQuotasRemaining::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_quota_tokens_remaining_isSet) {
        obj.insert(QString("dailyQuotaTokensRemaining"), ::OpenAPI::toJsonValue(m_daily_quota_tokens_remaining));
    }
    if (m_hourly_quota_tokens_remaining_isSet) {
        obj.insert(QString("hourlyQuotaTokensRemaining"), ::OpenAPI::toJsonValue(m_hourly_quota_tokens_remaining));
    }
    return obj;
}

qint32 OAIResourceQuotasRemaining::getDailyQuotaTokensRemaining() const {
    return m_daily_quota_tokens_remaining;
}
void OAIResourceQuotasRemaining::setDailyQuotaTokensRemaining(const qint32 &daily_quota_tokens_remaining) {
    m_daily_quota_tokens_remaining = daily_quota_tokens_remaining;
    m_daily_quota_tokens_remaining_isSet = true;
}

bool OAIResourceQuotasRemaining::is_daily_quota_tokens_remaining_Set() const{
    return m_daily_quota_tokens_remaining_isSet;
}

bool OAIResourceQuotasRemaining::is_daily_quota_tokens_remaining_Valid() const{
    return m_daily_quota_tokens_remaining_isValid;
}

qint32 OAIResourceQuotasRemaining::getHourlyQuotaTokensRemaining() const {
    return m_hourly_quota_tokens_remaining;
}
void OAIResourceQuotasRemaining::setHourlyQuotaTokensRemaining(const qint32 &hourly_quota_tokens_remaining) {
    m_hourly_quota_tokens_remaining = hourly_quota_tokens_remaining;
    m_hourly_quota_tokens_remaining_isSet = true;
}

bool OAIResourceQuotasRemaining::is_hourly_quota_tokens_remaining_Set() const{
    return m_hourly_quota_tokens_remaining_isSet;
}

bool OAIResourceQuotasRemaining::is_hourly_quota_tokens_remaining_Valid() const{
    return m_hourly_quota_tokens_remaining_isValid;
}

bool OAIResourceQuotasRemaining::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_quota_tokens_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hourly_quota_tokens_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceQuotasRemaining::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
