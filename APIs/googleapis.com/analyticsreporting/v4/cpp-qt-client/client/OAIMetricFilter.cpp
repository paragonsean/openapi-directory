/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricFilter::OAIMetricFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricFilter::OAIMetricFilter() {
    this->initializeModel();
}

OAIMetricFilter::~OAIMetricFilter() {}

void OAIMetricFilter::initializeModel() {

    m_comparison_value_isSet = false;
    m_comparison_value_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_r_not_isSet = false;
    m_r_not_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAIMetricFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricFilter::fromJsonObject(QJsonObject json) {

    m_comparison_value_isValid = ::OpenAPI::fromJsonValue(m_comparison_value, json[QString("comparisonValue")]);
    m_comparison_value_isSet = !json[QString("comparisonValue")].isNull() && m_comparison_value_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metricName")]);
    m_metric_name_isSet = !json[QString("metricName")].isNull() && m_metric_name_isValid;

    m_r_not_isValid = ::OpenAPI::fromJsonValue(m_r_not, json[QString("not")]);
    m_r_not_isSet = !json[QString("not")].isNull() && m_r_not_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;
}

QString OAIMetricFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_comparison_value_isSet) {
        obj.insert(QString("comparisonValue"), ::OpenAPI::toJsonValue(m_comparison_value));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("metricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_r_not_isSet) {
        obj.insert(QString("not"), ::OpenAPI::toJsonValue(m_r_not));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

QString OAIMetricFilter::getComparisonValue() const {
    return m_comparison_value;
}
void OAIMetricFilter::setComparisonValue(const QString &comparison_value) {
    m_comparison_value = comparison_value;
    m_comparison_value_isSet = true;
}

bool OAIMetricFilter::is_comparison_value_Set() const{
    return m_comparison_value_isSet;
}

bool OAIMetricFilter::is_comparison_value_Valid() const{
    return m_comparison_value_isValid;
}

QString OAIMetricFilter::getMetricName() const {
    return m_metric_name;
}
void OAIMetricFilter::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIMetricFilter::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIMetricFilter::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

bool OAIMetricFilter::isRNot() const {
    return m_r_not;
}
void OAIMetricFilter::setRNot(const bool &r_not) {
    m_r_not = r_not;
    m_r_not_isSet = true;
}

bool OAIMetricFilter::is_r_not_Set() const{
    return m_r_not_isSet;
}

bool OAIMetricFilter::is_r_not_Valid() const{
    return m_r_not_isValid;
}

QString OAIMetricFilter::getROperator() const {
    return m_r_operator;
}
void OAIMetricFilter::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIMetricFilter::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIMetricFilter::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAIMetricFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comparison_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_not_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
