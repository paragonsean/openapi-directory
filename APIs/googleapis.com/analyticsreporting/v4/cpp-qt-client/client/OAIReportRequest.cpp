/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportRequest::OAIReportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportRequest::OAIReportRequest() {
    this->initializeModel();
}

OAIReportRequest::~OAIReportRequest() {}

void OAIReportRequest::initializeModel() {

    m_cohort_group_isSet = false;
    m_cohort_group_isValid = false;

    m_date_ranges_isSet = false;
    m_date_ranges_isValid = false;

    m_dimension_filter_clauses_isSet = false;
    m_dimension_filter_clauses_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_filters_expression_isSet = false;
    m_filters_expression_isValid = false;

    m_hide_totals_isSet = false;
    m_hide_totals_isValid = false;

    m_hide_value_ranges_isSet = false;
    m_hide_value_ranges_isValid = false;

    m_include_empty_rows_isSet = false;
    m_include_empty_rows_isValid = false;

    m_metric_filter_clauses_isSet = false;
    m_metric_filter_clauses_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_order_bys_isSet = false;
    m_order_bys_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_pivots_isSet = false;
    m_pivots_isValid = false;

    m_sampling_level_isSet = false;
    m_sampling_level_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;

    m_view_id_isSet = false;
    m_view_id_isValid = false;
}

void OAIReportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportRequest::fromJsonObject(QJsonObject json) {

    m_cohort_group_isValid = ::OpenAPI::fromJsonValue(m_cohort_group, json[QString("cohortGroup")]);
    m_cohort_group_isSet = !json[QString("cohortGroup")].isNull() && m_cohort_group_isValid;

    m_date_ranges_isValid = ::OpenAPI::fromJsonValue(m_date_ranges, json[QString("dateRanges")]);
    m_date_ranges_isSet = !json[QString("dateRanges")].isNull() && m_date_ranges_isValid;

    m_dimension_filter_clauses_isValid = ::OpenAPI::fromJsonValue(m_dimension_filter_clauses, json[QString("dimensionFilterClauses")]);
    m_dimension_filter_clauses_isSet = !json[QString("dimensionFilterClauses")].isNull() && m_dimension_filter_clauses_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_filters_expression_isValid = ::OpenAPI::fromJsonValue(m_filters_expression, json[QString("filtersExpression")]);
    m_filters_expression_isSet = !json[QString("filtersExpression")].isNull() && m_filters_expression_isValid;

    m_hide_totals_isValid = ::OpenAPI::fromJsonValue(m_hide_totals, json[QString("hideTotals")]);
    m_hide_totals_isSet = !json[QString("hideTotals")].isNull() && m_hide_totals_isValid;

    m_hide_value_ranges_isValid = ::OpenAPI::fromJsonValue(m_hide_value_ranges, json[QString("hideValueRanges")]);
    m_hide_value_ranges_isSet = !json[QString("hideValueRanges")].isNull() && m_hide_value_ranges_isValid;

    m_include_empty_rows_isValid = ::OpenAPI::fromJsonValue(m_include_empty_rows, json[QString("includeEmptyRows")]);
    m_include_empty_rows_isSet = !json[QString("includeEmptyRows")].isNull() && m_include_empty_rows_isValid;

    m_metric_filter_clauses_isValid = ::OpenAPI::fromJsonValue(m_metric_filter_clauses, json[QString("metricFilterClauses")]);
    m_metric_filter_clauses_isSet = !json[QString("metricFilterClauses")].isNull() && m_metric_filter_clauses_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_order_bys_isValid = ::OpenAPI::fromJsonValue(m_order_bys, json[QString("orderBys")]);
    m_order_bys_isSet = !json[QString("orderBys")].isNull() && m_order_bys_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_pivots_isValid = ::OpenAPI::fromJsonValue(m_pivots, json[QString("pivots")]);
    m_pivots_isSet = !json[QString("pivots")].isNull() && m_pivots_isValid;

    m_sampling_level_isValid = ::OpenAPI::fromJsonValue(m_sampling_level, json[QString("samplingLevel")]);
    m_sampling_level_isSet = !json[QString("samplingLevel")].isNull() && m_sampling_level_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;

    m_view_id_isValid = ::OpenAPI::fromJsonValue(m_view_id, json[QString("viewId")]);
    m_view_id_isSet = !json[QString("viewId")].isNull() && m_view_id_isValid;
}

QString OAIReportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cohort_group.isSet()) {
        obj.insert(QString("cohortGroup"), ::OpenAPI::toJsonValue(m_cohort_group));
    }
    if (m_date_ranges.size() > 0) {
        obj.insert(QString("dateRanges"), ::OpenAPI::toJsonValue(m_date_ranges));
    }
    if (m_dimension_filter_clauses.size() > 0) {
        obj.insert(QString("dimensionFilterClauses"), ::OpenAPI::toJsonValue(m_dimension_filter_clauses));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_filters_expression_isSet) {
        obj.insert(QString("filtersExpression"), ::OpenAPI::toJsonValue(m_filters_expression));
    }
    if (m_hide_totals_isSet) {
        obj.insert(QString("hideTotals"), ::OpenAPI::toJsonValue(m_hide_totals));
    }
    if (m_hide_value_ranges_isSet) {
        obj.insert(QString("hideValueRanges"), ::OpenAPI::toJsonValue(m_hide_value_ranges));
    }
    if (m_include_empty_rows_isSet) {
        obj.insert(QString("includeEmptyRows"), ::OpenAPI::toJsonValue(m_include_empty_rows));
    }
    if (m_metric_filter_clauses.size() > 0) {
        obj.insert(QString("metricFilterClauses"), ::OpenAPI::toJsonValue(m_metric_filter_clauses));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_order_bys.size() > 0) {
        obj.insert(QString("orderBys"), ::OpenAPI::toJsonValue(m_order_bys));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_pivots.size() > 0) {
        obj.insert(QString("pivots"), ::OpenAPI::toJsonValue(m_pivots));
    }
    if (m_sampling_level_isSet) {
        obj.insert(QString("samplingLevel"), ::OpenAPI::toJsonValue(m_sampling_level));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    if (m_view_id_isSet) {
        obj.insert(QString("viewId"), ::OpenAPI::toJsonValue(m_view_id));
    }
    return obj;
}

OAICohortGroup OAIReportRequest::getCohortGroup() const {
    return m_cohort_group;
}
void OAIReportRequest::setCohortGroup(const OAICohortGroup &cohort_group) {
    m_cohort_group = cohort_group;
    m_cohort_group_isSet = true;
}

bool OAIReportRequest::is_cohort_group_Set() const{
    return m_cohort_group_isSet;
}

bool OAIReportRequest::is_cohort_group_Valid() const{
    return m_cohort_group_isValid;
}

QList<OAIDateRange> OAIReportRequest::getDateRanges() const {
    return m_date_ranges;
}
void OAIReportRequest::setDateRanges(const QList<OAIDateRange> &date_ranges) {
    m_date_ranges = date_ranges;
    m_date_ranges_isSet = true;
}

bool OAIReportRequest::is_date_ranges_Set() const{
    return m_date_ranges_isSet;
}

bool OAIReportRequest::is_date_ranges_Valid() const{
    return m_date_ranges_isValid;
}

QList<OAIDimensionFilterClause> OAIReportRequest::getDimensionFilterClauses() const {
    return m_dimension_filter_clauses;
}
void OAIReportRequest::setDimensionFilterClauses(const QList<OAIDimensionFilterClause> &dimension_filter_clauses) {
    m_dimension_filter_clauses = dimension_filter_clauses;
    m_dimension_filter_clauses_isSet = true;
}

bool OAIReportRequest::is_dimension_filter_clauses_Set() const{
    return m_dimension_filter_clauses_isSet;
}

bool OAIReportRequest::is_dimension_filter_clauses_Valid() const{
    return m_dimension_filter_clauses_isValid;
}

QList<OAIDimension> OAIReportRequest::getDimensions() const {
    return m_dimensions;
}
void OAIReportRequest::setDimensions(const QList<OAIDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIReportRequest::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIReportRequest::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIReportRequest::getFiltersExpression() const {
    return m_filters_expression;
}
void OAIReportRequest::setFiltersExpression(const QString &filters_expression) {
    m_filters_expression = filters_expression;
    m_filters_expression_isSet = true;
}

bool OAIReportRequest::is_filters_expression_Set() const{
    return m_filters_expression_isSet;
}

bool OAIReportRequest::is_filters_expression_Valid() const{
    return m_filters_expression_isValid;
}

bool OAIReportRequest::isHideTotals() const {
    return m_hide_totals;
}
void OAIReportRequest::setHideTotals(const bool &hide_totals) {
    m_hide_totals = hide_totals;
    m_hide_totals_isSet = true;
}

bool OAIReportRequest::is_hide_totals_Set() const{
    return m_hide_totals_isSet;
}

bool OAIReportRequest::is_hide_totals_Valid() const{
    return m_hide_totals_isValid;
}

bool OAIReportRequest::isHideValueRanges() const {
    return m_hide_value_ranges;
}
void OAIReportRequest::setHideValueRanges(const bool &hide_value_ranges) {
    m_hide_value_ranges = hide_value_ranges;
    m_hide_value_ranges_isSet = true;
}

bool OAIReportRequest::is_hide_value_ranges_Set() const{
    return m_hide_value_ranges_isSet;
}

bool OAIReportRequest::is_hide_value_ranges_Valid() const{
    return m_hide_value_ranges_isValid;
}

bool OAIReportRequest::isIncludeEmptyRows() const {
    return m_include_empty_rows;
}
void OAIReportRequest::setIncludeEmptyRows(const bool &include_empty_rows) {
    m_include_empty_rows = include_empty_rows;
    m_include_empty_rows_isSet = true;
}

bool OAIReportRequest::is_include_empty_rows_Set() const{
    return m_include_empty_rows_isSet;
}

bool OAIReportRequest::is_include_empty_rows_Valid() const{
    return m_include_empty_rows_isValid;
}

QList<OAIMetricFilterClause> OAIReportRequest::getMetricFilterClauses() const {
    return m_metric_filter_clauses;
}
void OAIReportRequest::setMetricFilterClauses(const QList<OAIMetricFilterClause> &metric_filter_clauses) {
    m_metric_filter_clauses = metric_filter_clauses;
    m_metric_filter_clauses_isSet = true;
}

bool OAIReportRequest::is_metric_filter_clauses_Set() const{
    return m_metric_filter_clauses_isSet;
}

bool OAIReportRequest::is_metric_filter_clauses_Valid() const{
    return m_metric_filter_clauses_isValid;
}

QList<OAIMetric> OAIReportRequest::getMetrics() const {
    return m_metrics;
}
void OAIReportRequest::setMetrics(const QList<OAIMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIReportRequest::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIReportRequest::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QList<OAIOrderBy> OAIReportRequest::getOrderBys() const {
    return m_order_bys;
}
void OAIReportRequest::setOrderBys(const QList<OAIOrderBy> &order_bys) {
    m_order_bys = order_bys;
    m_order_bys_isSet = true;
}

bool OAIReportRequest::is_order_bys_Set() const{
    return m_order_bys_isSet;
}

bool OAIReportRequest::is_order_bys_Valid() const{
    return m_order_bys_isValid;
}

qint32 OAIReportRequest::getPageSize() const {
    return m_page_size;
}
void OAIReportRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIReportRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIReportRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIReportRequest::getPageToken() const {
    return m_page_token;
}
void OAIReportRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIReportRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIReportRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QList<OAIPivot> OAIReportRequest::getPivots() const {
    return m_pivots;
}
void OAIReportRequest::setPivots(const QList<OAIPivot> &pivots) {
    m_pivots = pivots;
    m_pivots_isSet = true;
}

bool OAIReportRequest::is_pivots_Set() const{
    return m_pivots_isSet;
}

bool OAIReportRequest::is_pivots_Valid() const{
    return m_pivots_isValid;
}

QString OAIReportRequest::getSamplingLevel() const {
    return m_sampling_level;
}
void OAIReportRequest::setSamplingLevel(const QString &sampling_level) {
    m_sampling_level = sampling_level;
    m_sampling_level_isSet = true;
}

bool OAIReportRequest::is_sampling_level_Set() const{
    return m_sampling_level_isSet;
}

bool OAIReportRequest::is_sampling_level_Valid() const{
    return m_sampling_level_isValid;
}

QList<OAISegment> OAIReportRequest::getSegments() const {
    return m_segments;
}
void OAIReportRequest::setSegments(const QList<OAISegment> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIReportRequest::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIReportRequest::is_segments_Valid() const{
    return m_segments_isValid;
}

QString OAIReportRequest::getViewId() const {
    return m_view_id;
}
void OAIReportRequest::setViewId(const QString &view_id) {
    m_view_id = view_id;
    m_view_id_isSet = true;
}

bool OAIReportRequest::is_view_id_Set() const{
    return m_view_id_isSet;
}

bool OAIReportRequest::is_view_id_Valid() const{
    return m_view_id_isValid;
}

bool OAIReportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cohort_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_filter_clauses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_totals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_value_ranges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_empty_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_filter_clauses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_bys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivots.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
