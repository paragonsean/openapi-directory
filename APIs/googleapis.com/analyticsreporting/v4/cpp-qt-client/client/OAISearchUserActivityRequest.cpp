/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchUserActivityRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchUserActivityRequest::OAISearchUserActivityRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchUserActivityRequest::OAISearchUserActivityRequest() {
    this->initializeModel();
}

OAISearchUserActivityRequest::~OAISearchUserActivityRequest() {}

void OAISearchUserActivityRequest::initializeModel() {

    m_activity_types_isSet = false;
    m_activity_types_isValid = false;

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_view_id_isSet = false;
    m_view_id_isValid = false;
}

void OAISearchUserActivityRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchUserActivityRequest::fromJsonObject(QJsonObject json) {

    m_activity_types_isValid = ::OpenAPI::fromJsonValue(m_activity_types, json[QString("activityTypes")]);
    m_activity_types_isSet = !json[QString("activityTypes")].isNull() && m_activity_types_isValid;

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_view_id_isValid = ::OpenAPI::fromJsonValue(m_view_id, json[QString("viewId")]);
    m_view_id_isSet = !json[QString("viewId")].isNull() && m_view_id_isValid;
}

QString OAISearchUserActivityRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchUserActivityRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_types.size() > 0) {
        obj.insert(QString("activityTypes"), ::OpenAPI::toJsonValue(m_activity_types));
    }
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_view_id_isSet) {
        obj.insert(QString("viewId"), ::OpenAPI::toJsonValue(m_view_id));
    }
    return obj;
}

QList<QString> OAISearchUserActivityRequest::getActivityTypes() const {
    return m_activity_types;
}
void OAISearchUserActivityRequest::setActivityTypes(const QList<QString> &activity_types) {
    m_activity_types = activity_types;
    m_activity_types_isSet = true;
}

bool OAISearchUserActivityRequest::is_activity_types_Set() const{
    return m_activity_types_isSet;
}

bool OAISearchUserActivityRequest::is_activity_types_Valid() const{
    return m_activity_types_isValid;
}

OAIDateRange OAISearchUserActivityRequest::getDateRange() const {
    return m_date_range;
}
void OAISearchUserActivityRequest::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAISearchUserActivityRequest::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAISearchUserActivityRequest::is_date_range_Valid() const{
    return m_date_range_isValid;
}

qint32 OAISearchUserActivityRequest::getPageSize() const {
    return m_page_size;
}
void OAISearchUserActivityRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAISearchUserActivityRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAISearchUserActivityRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAISearchUserActivityRequest::getPageToken() const {
    return m_page_token;
}
void OAISearchUserActivityRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAISearchUserActivityRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAISearchUserActivityRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

OAIUser OAISearchUserActivityRequest::getUser() const {
    return m_user;
}
void OAISearchUserActivityRequest::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAISearchUserActivityRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAISearchUserActivityRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAISearchUserActivityRequest::getViewId() const {
    return m_view_id;
}
void OAISearchUserActivityRequest::setViewId(const QString &view_id) {
    m_view_id = view_id;
    m_view_id_isSet = true;
}

bool OAISearchUserActivityRequest::is_view_id_Set() const{
    return m_view_id_isSet;
}

bool OAISearchUserActivityRequest::is_view_id_Valid() const{
    return m_view_id_isValid;
}

bool OAISearchUserActivityRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchUserActivityRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
