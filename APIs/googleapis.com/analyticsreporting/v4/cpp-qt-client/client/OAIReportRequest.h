/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReportRequest.h
 *
 * The main request class which specifies the Reporting API request.
 */

#ifndef OAIReportRequest_H
#define OAIReportRequest_H

#include <QJsonObject>

#include "OAICohortGroup.h"
#include "OAIDateRange.h"
#include "OAIDimension.h"
#include "OAIDimensionFilterClause.h"
#include "OAIMetric.h"
#include "OAIMetricFilterClause.h"
#include "OAIOrderBy.h"
#include "OAIPivot.h"
#include "OAISegment.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICohortGroup;
class OAIDateRange;
class OAIDimensionFilterClause;
class OAIDimension;
class OAIMetricFilterClause;
class OAIMetric;
class OAIOrderBy;
class OAIPivot;
class OAISegment;

class OAIReportRequest : public OAIObject {
public:
    OAIReportRequest();
    OAIReportRequest(QString json);
    ~OAIReportRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICohortGroup getCohortGroup() const;
    void setCohortGroup(const OAICohortGroup &cohort_group);
    bool is_cohort_group_Set() const;
    bool is_cohort_group_Valid() const;

    QList<OAIDateRange> getDateRanges() const;
    void setDateRanges(const QList<OAIDateRange> &date_ranges);
    bool is_date_ranges_Set() const;
    bool is_date_ranges_Valid() const;

    QList<OAIDimensionFilterClause> getDimensionFilterClauses() const;
    void setDimensionFilterClauses(const QList<OAIDimensionFilterClause> &dimension_filter_clauses);
    bool is_dimension_filter_clauses_Set() const;
    bool is_dimension_filter_clauses_Valid() const;

    QList<OAIDimension> getDimensions() const;
    void setDimensions(const QList<OAIDimension> &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    QString getFiltersExpression() const;
    void setFiltersExpression(const QString &filters_expression);
    bool is_filters_expression_Set() const;
    bool is_filters_expression_Valid() const;

    bool isHideTotals() const;
    void setHideTotals(const bool &hide_totals);
    bool is_hide_totals_Set() const;
    bool is_hide_totals_Valid() const;

    bool isHideValueRanges() const;
    void setHideValueRanges(const bool &hide_value_ranges);
    bool is_hide_value_ranges_Set() const;
    bool is_hide_value_ranges_Valid() const;

    bool isIncludeEmptyRows() const;
    void setIncludeEmptyRows(const bool &include_empty_rows);
    bool is_include_empty_rows_Set() const;
    bool is_include_empty_rows_Valid() const;

    QList<OAIMetricFilterClause> getMetricFilterClauses() const;
    void setMetricFilterClauses(const QList<OAIMetricFilterClause> &metric_filter_clauses);
    bool is_metric_filter_clauses_Set() const;
    bool is_metric_filter_clauses_Valid() const;

    QList<OAIMetric> getMetrics() const;
    void setMetrics(const QList<OAIMetric> &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    QList<OAIOrderBy> getOrderBys() const;
    void setOrderBys(const QList<OAIOrderBy> &order_bys);
    bool is_order_bys_Set() const;
    bool is_order_bys_Valid() const;

    qint32 getPageSize() const;
    void setPageSize(const qint32 &page_size);
    bool is_page_size_Set() const;
    bool is_page_size_Valid() const;

    QString getPageToken() const;
    void setPageToken(const QString &page_token);
    bool is_page_token_Set() const;
    bool is_page_token_Valid() const;

    QList<OAIPivot> getPivots() const;
    void setPivots(const QList<OAIPivot> &pivots);
    bool is_pivots_Set() const;
    bool is_pivots_Valid() const;

    QString getSamplingLevel() const;
    void setSamplingLevel(const QString &sampling_level);
    bool is_sampling_level_Set() const;
    bool is_sampling_level_Valid() const;

    QList<OAISegment> getSegments() const;
    void setSegments(const QList<OAISegment> &segments);
    bool is_segments_Set() const;
    bool is_segments_Valid() const;

    QString getViewId() const;
    void setViewId(const QString &view_id);
    bool is_view_id_Set() const;
    bool is_view_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICohortGroup m_cohort_group;
    bool m_cohort_group_isSet;
    bool m_cohort_group_isValid;

    QList<OAIDateRange> m_date_ranges;
    bool m_date_ranges_isSet;
    bool m_date_ranges_isValid;

    QList<OAIDimensionFilterClause> m_dimension_filter_clauses;
    bool m_dimension_filter_clauses_isSet;
    bool m_dimension_filter_clauses_isValid;

    QList<OAIDimension> m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    QString m_filters_expression;
    bool m_filters_expression_isSet;
    bool m_filters_expression_isValid;

    bool m_hide_totals;
    bool m_hide_totals_isSet;
    bool m_hide_totals_isValid;

    bool m_hide_value_ranges;
    bool m_hide_value_ranges_isSet;
    bool m_hide_value_ranges_isValid;

    bool m_include_empty_rows;
    bool m_include_empty_rows_isSet;
    bool m_include_empty_rows_isValid;

    QList<OAIMetricFilterClause> m_metric_filter_clauses;
    bool m_metric_filter_clauses_isSet;
    bool m_metric_filter_clauses_isValid;

    QList<OAIMetric> m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    QList<OAIOrderBy> m_order_bys;
    bool m_order_bys_isSet;
    bool m_order_bys_isValid;

    qint32 m_page_size;
    bool m_page_size_isSet;
    bool m_page_size_isValid;

    QString m_page_token;
    bool m_page_token_isSet;
    bool m_page_token_isValid;

    QList<OAIPivot> m_pivots;
    bool m_pivots_isSet;
    bool m_pivots_isValid;

    QString m_sampling_level;
    bool m_sampling_level_isSet;
    bool m_sampling_level_isValid;

    QList<OAISegment> m_segments;
    bool m_segments_isSet;
    bool m_segments_isValid;

    QString m_view_id;
    bool m_view_id_isSet;
    bool m_view_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReportRequest)

#endif // OAIReportRequest_H
