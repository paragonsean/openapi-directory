/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionData::OAITransactionData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionData::OAITransactionData() {
    this->initializeModel();
}

OAITransactionData::~OAITransactionData() {}

void OAITransactionData::initializeModel() {

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_transaction_revenue_isSet = false;
    m_transaction_revenue_isValid = false;

    m_transaction_shipping_isSet = false;
    m_transaction_shipping_isValid = false;

    m_transaction_tax_isSet = false;
    m_transaction_tax_isValid = false;
}

void OAITransactionData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionData::fromJsonObject(QJsonObject json) {

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;

    m_transaction_revenue_isValid = ::OpenAPI::fromJsonValue(m_transaction_revenue, json[QString("transactionRevenue")]);
    m_transaction_revenue_isSet = !json[QString("transactionRevenue")].isNull() && m_transaction_revenue_isValid;

    m_transaction_shipping_isValid = ::OpenAPI::fromJsonValue(m_transaction_shipping, json[QString("transactionShipping")]);
    m_transaction_shipping_isSet = !json[QString("transactionShipping")].isNull() && m_transaction_shipping_isValid;

    m_transaction_tax_isValid = ::OpenAPI::fromJsonValue(m_transaction_tax, json[QString("transactionTax")]);
    m_transaction_tax_isSet = !json[QString("transactionTax")].isNull() && m_transaction_tax_isValid;
}

QString OAITransactionData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionData::asJsonObject() const {
    QJsonObject obj;
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_transaction_revenue_isSet) {
        obj.insert(QString("transactionRevenue"), ::OpenAPI::toJsonValue(m_transaction_revenue));
    }
    if (m_transaction_shipping_isSet) {
        obj.insert(QString("transactionShipping"), ::OpenAPI::toJsonValue(m_transaction_shipping));
    }
    if (m_transaction_tax_isSet) {
        obj.insert(QString("transactionTax"), ::OpenAPI::toJsonValue(m_transaction_tax));
    }
    return obj;
}

QString OAITransactionData::getTransactionId() const {
    return m_transaction_id;
}
void OAITransactionData::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAITransactionData::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAITransactionData::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

double OAITransactionData::getTransactionRevenue() const {
    return m_transaction_revenue;
}
void OAITransactionData::setTransactionRevenue(const double &transaction_revenue) {
    m_transaction_revenue = transaction_revenue;
    m_transaction_revenue_isSet = true;
}

bool OAITransactionData::is_transaction_revenue_Set() const{
    return m_transaction_revenue_isSet;
}

bool OAITransactionData::is_transaction_revenue_Valid() const{
    return m_transaction_revenue_isValid;
}

double OAITransactionData::getTransactionShipping() const {
    return m_transaction_shipping;
}
void OAITransactionData::setTransactionShipping(const double &transaction_shipping) {
    m_transaction_shipping = transaction_shipping;
    m_transaction_shipping_isSet = true;
}

bool OAITransactionData::is_transaction_shipping_Set() const{
    return m_transaction_shipping_isSet;
}

bool OAITransactionData::is_transaction_shipping_Valid() const{
    return m_transaction_shipping_isValid;
}

double OAITransactionData::getTransactionTax() const {
    return m_transaction_tax;
}
void OAITransactionData::setTransactionTax(const double &transaction_tax) {
    m_transaction_tax = transaction_tax;
    m_transaction_tax_isSet = true;
}

bool OAITransactionData::is_transaction_tax_Set() const{
    return m_transaction_tax_isSet;
}

bool OAITransactionData::is_transaction_tax_Valid() const{
    return m_transaction_tax_isValid;
}

bool OAITransactionData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_revenue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_tax_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
