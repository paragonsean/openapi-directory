/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEcommerceData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEcommerceData::OAIEcommerceData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEcommerceData::OAIEcommerceData() {
    this->initializeModel();
}

OAIEcommerceData::~OAIEcommerceData() {}

void OAIEcommerceData::initializeModel() {

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_ecommerce_type_isSet = false;
    m_ecommerce_type_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAIEcommerceData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEcommerceData::fromJsonObject(QJsonObject json) {

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("actionType")]);
    m_action_type_isSet = !json[QString("actionType")].isNull() && m_action_type_isValid;

    m_ecommerce_type_isValid = ::OpenAPI::fromJsonValue(m_ecommerce_type, json[QString("ecommerceType")]);
    m_ecommerce_type_isSet = !json[QString("ecommerceType")].isNull() && m_ecommerce_type_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAIEcommerceData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEcommerceData::asJsonObject() const {
    QJsonObject obj;
    if (m_action_type_isSet) {
        obj.insert(QString("actionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_ecommerce_type_isSet) {
        obj.insert(QString("ecommerceType"), ::OpenAPI::toJsonValue(m_ecommerce_type));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_transaction.isSet()) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

QString OAIEcommerceData::getActionType() const {
    return m_action_type;
}
void OAIEcommerceData::setActionType(const QString &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIEcommerceData::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIEcommerceData::is_action_type_Valid() const{
    return m_action_type_isValid;
}

QString OAIEcommerceData::getEcommerceType() const {
    return m_ecommerce_type;
}
void OAIEcommerceData::setEcommerceType(const QString &ecommerce_type) {
    m_ecommerce_type = ecommerce_type;
    m_ecommerce_type_isSet = true;
}

bool OAIEcommerceData::is_ecommerce_type_Set() const{
    return m_ecommerce_type_isSet;
}

bool OAIEcommerceData::is_ecommerce_type_Valid() const{
    return m_ecommerce_type_isValid;
}

QList<OAIProductData> OAIEcommerceData::getProducts() const {
    return m_products;
}
void OAIEcommerceData::setProducts(const QList<OAIProductData> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIEcommerceData::is_products_Set() const{
    return m_products_isSet;
}

bool OAIEcommerceData::is_products_Valid() const{
    return m_products_isValid;
}

OAITransactionData OAIEcommerceData::getTransaction() const {
    return m_transaction;
}
void OAIEcommerceData::setTransaction(const OAITransactionData &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIEcommerceData::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIEcommerceData::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAIEcommerceData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecommerce_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEcommerceData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
