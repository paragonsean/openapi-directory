/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetric::OAIMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetric::OAIMetric() {
    this->initializeModel();
}

OAIMetric::~OAIMetric() {}

void OAIMetric::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_formatting_type_isSet = false;
    m_formatting_type_isValid = false;
}

void OAIMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetric::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_formatting_type_isValid = ::OpenAPI::fromJsonValue(m_formatting_type, json[QString("formattingType")]);
    m_formatting_type_isSet = !json[QString("formattingType")].isNull() && m_formatting_type_isValid;
}

QString OAIMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_formatting_type_isSet) {
        obj.insert(QString("formattingType"), ::OpenAPI::toJsonValue(m_formatting_type));
    }
    return obj;
}

QString OAIMetric::getAlias() const {
    return m_alias;
}
void OAIMetric::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIMetric::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIMetric::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIMetric::getExpression() const {
    return m_expression;
}
void OAIMetric::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIMetric::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIMetric::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIMetric::getFormattingType() const {
    return m_formatting_type;
}
void OAIMetric::setFormattingType(const QString &formatting_type) {
    m_formatting_type = formatting_type;
    m_formatting_type_isSet = true;
}

bool OAIMetric::is_formatting_type_Set() const{
    return m_formatting_type_isSet;
}

bool OAIMetric::is_formatting_type_Valid() const{
    return m_formatting_type_isValid;
}

bool OAIMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatting_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
