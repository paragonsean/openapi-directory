/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetReportsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetReportsResponse::OAIGetReportsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetReportsResponse::OAIGetReportsResponse() {
    this->initializeModel();
}

OAIGetReportsResponse::~OAIGetReportsResponse() {}

void OAIGetReportsResponse::initializeModel() {

    m_query_cost_isSet = false;
    m_query_cost_isValid = false;

    m_reports_isSet = false;
    m_reports_isValid = false;

    m_resource_quotas_remaining_isSet = false;
    m_resource_quotas_remaining_isValid = false;
}

void OAIGetReportsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetReportsResponse::fromJsonObject(QJsonObject json) {

    m_query_cost_isValid = ::OpenAPI::fromJsonValue(m_query_cost, json[QString("queryCost")]);
    m_query_cost_isSet = !json[QString("queryCost")].isNull() && m_query_cost_isValid;

    m_reports_isValid = ::OpenAPI::fromJsonValue(m_reports, json[QString("reports")]);
    m_reports_isSet = !json[QString("reports")].isNull() && m_reports_isValid;

    m_resource_quotas_remaining_isValid = ::OpenAPI::fromJsonValue(m_resource_quotas_remaining, json[QString("resourceQuotasRemaining")]);
    m_resource_quotas_remaining_isSet = !json[QString("resourceQuotasRemaining")].isNull() && m_resource_quotas_remaining_isValid;
}

QString OAIGetReportsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetReportsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_query_cost_isSet) {
        obj.insert(QString("queryCost"), ::OpenAPI::toJsonValue(m_query_cost));
    }
    if (m_reports.size() > 0) {
        obj.insert(QString("reports"), ::OpenAPI::toJsonValue(m_reports));
    }
    if (m_resource_quotas_remaining.isSet()) {
        obj.insert(QString("resourceQuotasRemaining"), ::OpenAPI::toJsonValue(m_resource_quotas_remaining));
    }
    return obj;
}

qint32 OAIGetReportsResponse::getQueryCost() const {
    return m_query_cost;
}
void OAIGetReportsResponse::setQueryCost(const qint32 &query_cost) {
    m_query_cost = query_cost;
    m_query_cost_isSet = true;
}

bool OAIGetReportsResponse::is_query_cost_Set() const{
    return m_query_cost_isSet;
}

bool OAIGetReportsResponse::is_query_cost_Valid() const{
    return m_query_cost_isValid;
}

QList<OAIReport> OAIGetReportsResponse::getReports() const {
    return m_reports;
}
void OAIGetReportsResponse::setReports(const QList<OAIReport> &reports) {
    m_reports = reports;
    m_reports_isSet = true;
}

bool OAIGetReportsResponse::is_reports_Set() const{
    return m_reports_isSet;
}

bool OAIGetReportsResponse::is_reports_Valid() const{
    return m_reports_isValid;
}

OAIResourceQuotasRemaining OAIGetReportsResponse::getResourceQuotasRemaining() const {
    return m_resource_quotas_remaining;
}
void OAIGetReportsResponse::setResourceQuotasRemaining(const OAIResourceQuotasRemaining &resource_quotas_remaining) {
    m_resource_quotas_remaining = resource_quotas_remaining;
    m_resource_quotas_remaining_isSet = true;
}

bool OAIGetReportsResponse::is_resource_quotas_remaining_Set() const{
    return m_resource_quotas_remaining_isSet;
}

bool OAIGetReportsResponse::is_resource_quotas_remaining_Valid() const{
    return m_resource_quotas_remaining_isValid;
}

bool OAIGetReportsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_quotas_remaining.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetReportsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
