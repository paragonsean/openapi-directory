/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchUserActivityResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchUserActivityResponse::OAISearchUserActivityResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchUserActivityResponse::OAISearchUserActivityResponse() {
    this->initializeModel();
}

OAISearchUserActivityResponse::~OAISearchUserActivityResponse() {}

void OAISearchUserActivityResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_sample_rate_isSet = false;
    m_sample_rate_isValid = false;

    m_sessions_isSet = false;
    m_sessions_isValid = false;

    m_total_rows_isSet = false;
    m_total_rows_isValid = false;
}

void OAISearchUserActivityResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchUserActivityResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_sample_rate_isValid = ::OpenAPI::fromJsonValue(m_sample_rate, json[QString("sampleRate")]);
    m_sample_rate_isSet = !json[QString("sampleRate")].isNull() && m_sample_rate_isValid;

    m_sessions_isValid = ::OpenAPI::fromJsonValue(m_sessions, json[QString("sessions")]);
    m_sessions_isSet = !json[QString("sessions")].isNull() && m_sessions_isValid;

    m_total_rows_isValid = ::OpenAPI::fromJsonValue(m_total_rows, json[QString("totalRows")]);
    m_total_rows_isSet = !json[QString("totalRows")].isNull() && m_total_rows_isValid;
}

QString OAISearchUserActivityResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchUserActivityResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_sample_rate_isSet) {
        obj.insert(QString("sampleRate"), ::OpenAPI::toJsonValue(m_sample_rate));
    }
    if (m_sessions.size() > 0) {
        obj.insert(QString("sessions"), ::OpenAPI::toJsonValue(m_sessions));
    }
    if (m_total_rows_isSet) {
        obj.insert(QString("totalRows"), ::OpenAPI::toJsonValue(m_total_rows));
    }
    return obj;
}

QString OAISearchUserActivityResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAISearchUserActivityResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAISearchUserActivityResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAISearchUserActivityResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

double OAISearchUserActivityResponse::getSampleRate() const {
    return m_sample_rate;
}
void OAISearchUserActivityResponse::setSampleRate(const double &sample_rate) {
    m_sample_rate = sample_rate;
    m_sample_rate_isSet = true;
}

bool OAISearchUserActivityResponse::is_sample_rate_Set() const{
    return m_sample_rate_isSet;
}

bool OAISearchUserActivityResponse::is_sample_rate_Valid() const{
    return m_sample_rate_isValid;
}

QList<OAIUserActivitySession> OAISearchUserActivityResponse::getSessions() const {
    return m_sessions;
}
void OAISearchUserActivityResponse::setSessions(const QList<OAIUserActivitySession> &sessions) {
    m_sessions = sessions;
    m_sessions_isSet = true;
}

bool OAISearchUserActivityResponse::is_sessions_Set() const{
    return m_sessions_isSet;
}

bool OAISearchUserActivityResponse::is_sessions_Valid() const{
    return m_sessions_isValid;
}

qint32 OAISearchUserActivityResponse::getTotalRows() const {
    return m_total_rows;
}
void OAISearchUserActivityResponse::setTotalRows(const qint32 &total_rows) {
    m_total_rows = total_rows;
    m_total_rows_isSet = true;
}

bool OAISearchUserActivityResponse::is_total_rows_Set() const{
    return m_total_rows_isSet;
}

bool OAISearchUserActivityResponse::is_total_rows_Valid() const{
    return m_total_rows_isValid;
}

bool OAISearchUserActivityResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sessions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchUserActivityResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
