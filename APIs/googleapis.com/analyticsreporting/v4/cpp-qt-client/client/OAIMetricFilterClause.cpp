/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricFilterClause.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricFilterClause::OAIMetricFilterClause(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricFilterClause::OAIMetricFilterClause() {
    this->initializeModel();
}

OAIMetricFilterClause::~OAIMetricFilterClause() {}

void OAIMetricFilterClause::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAIMetricFilterClause::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricFilterClause::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;
}

QString OAIMetricFilterClause::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricFilterClause::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

QList<OAIMetricFilter> OAIMetricFilterClause::getFilters() const {
    return m_filters;
}
void OAIMetricFilterClause::setFilters(const QList<OAIMetricFilter> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIMetricFilterClause::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIMetricFilterClause::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIMetricFilterClause::getROperator() const {
    return m_r_operator;
}
void OAIMetricFilterClause::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIMetricFilterClause::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIMetricFilterClause::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAIMetricFilterClause::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricFilterClause::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
