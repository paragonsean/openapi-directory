/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnHeader::OAIColumnHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnHeader::OAIColumnHeader() {
    this->initializeModel();
}

OAIColumnHeader::~OAIColumnHeader() {}

void OAIColumnHeader::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_metric_header_isSet = false;
    m_metric_header_isValid = false;
}

void OAIColumnHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnHeader::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_metric_header_isValid = ::OpenAPI::fromJsonValue(m_metric_header, json[QString("metricHeader")]);
    m_metric_header_isSet = !json[QString("metricHeader")].isNull() && m_metric_header_isValid;
}

QString OAIColumnHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_metric_header.isSet()) {
        obj.insert(QString("metricHeader"), ::OpenAPI::toJsonValue(m_metric_header));
    }
    return obj;
}

QList<QString> OAIColumnHeader::getDimensions() const {
    return m_dimensions;
}
void OAIColumnHeader::setDimensions(const QList<QString> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIColumnHeader::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIColumnHeader::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAIMetricHeader OAIColumnHeader::getMetricHeader() const {
    return m_metric_header;
}
void OAIColumnHeader::setMetricHeader(const OAIMetricHeader &metric_header) {
    m_metric_header = metric_header;
    m_metric_header_isSet = true;
}

bool OAIColumnHeader::is_metric_header_Set() const{
    return m_metric_header_isSet;
}

bool OAIColumnHeader::is_metric_header_Valid() const{
    return m_metric_header_isValid;
}

bool OAIColumnHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_header.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
