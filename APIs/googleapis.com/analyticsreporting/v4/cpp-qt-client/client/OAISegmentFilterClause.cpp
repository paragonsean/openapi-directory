/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentFilterClause.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentFilterClause::OAISegmentFilterClause(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentFilterClause::OAISegmentFilterClause() {
    this->initializeModel();
}

OAISegmentFilterClause::~OAISegmentFilterClause() {}

void OAISegmentFilterClause::initializeModel() {

    m_dimension_filter_isSet = false;
    m_dimension_filter_isValid = false;

    m_metric_filter_isSet = false;
    m_metric_filter_isValid = false;

    m_r_not_isSet = false;
    m_r_not_isValid = false;
}

void OAISegmentFilterClause::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentFilterClause::fromJsonObject(QJsonObject json) {

    m_dimension_filter_isValid = ::OpenAPI::fromJsonValue(m_dimension_filter, json[QString("dimensionFilter")]);
    m_dimension_filter_isSet = !json[QString("dimensionFilter")].isNull() && m_dimension_filter_isValid;

    m_metric_filter_isValid = ::OpenAPI::fromJsonValue(m_metric_filter, json[QString("metricFilter")]);
    m_metric_filter_isSet = !json[QString("metricFilter")].isNull() && m_metric_filter_isValid;

    m_r_not_isValid = ::OpenAPI::fromJsonValue(m_r_not, json[QString("not")]);
    m_r_not_isSet = !json[QString("not")].isNull() && m_r_not_isValid;
}

QString OAISegmentFilterClause::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentFilterClause::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_filter.isSet()) {
        obj.insert(QString("dimensionFilter"), ::OpenAPI::toJsonValue(m_dimension_filter));
    }
    if (m_metric_filter.isSet()) {
        obj.insert(QString("metricFilter"), ::OpenAPI::toJsonValue(m_metric_filter));
    }
    if (m_r_not_isSet) {
        obj.insert(QString("not"), ::OpenAPI::toJsonValue(m_r_not));
    }
    return obj;
}

OAISegmentDimensionFilter OAISegmentFilterClause::getDimensionFilter() const {
    return m_dimension_filter;
}
void OAISegmentFilterClause::setDimensionFilter(const OAISegmentDimensionFilter &dimension_filter) {
    m_dimension_filter = dimension_filter;
    m_dimension_filter_isSet = true;
}

bool OAISegmentFilterClause::is_dimension_filter_Set() const{
    return m_dimension_filter_isSet;
}

bool OAISegmentFilterClause::is_dimension_filter_Valid() const{
    return m_dimension_filter_isValid;
}

OAISegmentMetricFilter OAISegmentFilterClause::getMetricFilter() const {
    return m_metric_filter;
}
void OAISegmentFilterClause::setMetricFilter(const OAISegmentMetricFilter &metric_filter) {
    m_metric_filter = metric_filter;
    m_metric_filter_isSet = true;
}

bool OAISegmentFilterClause::is_metric_filter_Set() const{
    return m_metric_filter_isSet;
}

bool OAISegmentFilterClause::is_metric_filter_Valid() const{
    return m_metric_filter_isValid;
}

bool OAISegmentFilterClause::isRNot() const {
    return m_r_not;
}
void OAISegmentFilterClause::setRNot(const bool &r_not) {
    m_r_not = r_not;
    m_r_not_isSet = true;
}

bool OAISegmentFilterClause::is_r_not_Set() const{
    return m_r_not_isSet;
}

bool OAISegmentFilterClause::is_r_not_Valid() const{
    return m_r_not_isValid;
}

bool OAISegmentFilterClause::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_not_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentFilterClause::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
