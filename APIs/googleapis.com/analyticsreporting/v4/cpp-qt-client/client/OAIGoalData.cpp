/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoalData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoalData::OAIGoalData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoalData::OAIGoalData() {
    this->initializeModel();
}

OAIGoalData::~OAIGoalData() {}

void OAIGoalData::initializeModel() {

    m_goal_completion_location_isSet = false;
    m_goal_completion_location_isValid = false;

    m_goal_completions_isSet = false;
    m_goal_completions_isValid = false;

    m_goal_index_isSet = false;
    m_goal_index_isValid = false;

    m_goal_name_isSet = false;
    m_goal_name_isValid = false;

    m_goal_previous_step1_isSet = false;
    m_goal_previous_step1_isValid = false;

    m_goal_previous_step2_isSet = false;
    m_goal_previous_step2_isValid = false;

    m_goal_previous_step3_isSet = false;
    m_goal_previous_step3_isValid = false;

    m_goal_value_isSet = false;
    m_goal_value_isValid = false;
}

void OAIGoalData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoalData::fromJsonObject(QJsonObject json) {

    m_goal_completion_location_isValid = ::OpenAPI::fromJsonValue(m_goal_completion_location, json[QString("goalCompletionLocation")]);
    m_goal_completion_location_isSet = !json[QString("goalCompletionLocation")].isNull() && m_goal_completion_location_isValid;

    m_goal_completions_isValid = ::OpenAPI::fromJsonValue(m_goal_completions, json[QString("goalCompletions")]);
    m_goal_completions_isSet = !json[QString("goalCompletions")].isNull() && m_goal_completions_isValid;

    m_goal_index_isValid = ::OpenAPI::fromJsonValue(m_goal_index, json[QString("goalIndex")]);
    m_goal_index_isSet = !json[QString("goalIndex")].isNull() && m_goal_index_isValid;

    m_goal_name_isValid = ::OpenAPI::fromJsonValue(m_goal_name, json[QString("goalName")]);
    m_goal_name_isSet = !json[QString("goalName")].isNull() && m_goal_name_isValid;

    m_goal_previous_step1_isValid = ::OpenAPI::fromJsonValue(m_goal_previous_step1, json[QString("goalPreviousStep1")]);
    m_goal_previous_step1_isSet = !json[QString("goalPreviousStep1")].isNull() && m_goal_previous_step1_isValid;

    m_goal_previous_step2_isValid = ::OpenAPI::fromJsonValue(m_goal_previous_step2, json[QString("goalPreviousStep2")]);
    m_goal_previous_step2_isSet = !json[QString("goalPreviousStep2")].isNull() && m_goal_previous_step2_isValid;

    m_goal_previous_step3_isValid = ::OpenAPI::fromJsonValue(m_goal_previous_step3, json[QString("goalPreviousStep3")]);
    m_goal_previous_step3_isSet = !json[QString("goalPreviousStep3")].isNull() && m_goal_previous_step3_isValid;

    m_goal_value_isValid = ::OpenAPI::fromJsonValue(m_goal_value, json[QString("goalValue")]);
    m_goal_value_isSet = !json[QString("goalValue")].isNull() && m_goal_value_isValid;
}

QString OAIGoalData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoalData::asJsonObject() const {
    QJsonObject obj;
    if (m_goal_completion_location_isSet) {
        obj.insert(QString("goalCompletionLocation"), ::OpenAPI::toJsonValue(m_goal_completion_location));
    }
    if (m_goal_completions_isSet) {
        obj.insert(QString("goalCompletions"), ::OpenAPI::toJsonValue(m_goal_completions));
    }
    if (m_goal_index_isSet) {
        obj.insert(QString("goalIndex"), ::OpenAPI::toJsonValue(m_goal_index));
    }
    if (m_goal_name_isSet) {
        obj.insert(QString("goalName"), ::OpenAPI::toJsonValue(m_goal_name));
    }
    if (m_goal_previous_step1_isSet) {
        obj.insert(QString("goalPreviousStep1"), ::OpenAPI::toJsonValue(m_goal_previous_step1));
    }
    if (m_goal_previous_step2_isSet) {
        obj.insert(QString("goalPreviousStep2"), ::OpenAPI::toJsonValue(m_goal_previous_step2));
    }
    if (m_goal_previous_step3_isSet) {
        obj.insert(QString("goalPreviousStep3"), ::OpenAPI::toJsonValue(m_goal_previous_step3));
    }
    if (m_goal_value_isSet) {
        obj.insert(QString("goalValue"), ::OpenAPI::toJsonValue(m_goal_value));
    }
    return obj;
}

QString OAIGoalData::getGoalCompletionLocation() const {
    return m_goal_completion_location;
}
void OAIGoalData::setGoalCompletionLocation(const QString &goal_completion_location) {
    m_goal_completion_location = goal_completion_location;
    m_goal_completion_location_isSet = true;
}

bool OAIGoalData::is_goal_completion_location_Set() const{
    return m_goal_completion_location_isSet;
}

bool OAIGoalData::is_goal_completion_location_Valid() const{
    return m_goal_completion_location_isValid;
}

QString OAIGoalData::getGoalCompletions() const {
    return m_goal_completions;
}
void OAIGoalData::setGoalCompletions(const QString &goal_completions) {
    m_goal_completions = goal_completions;
    m_goal_completions_isSet = true;
}

bool OAIGoalData::is_goal_completions_Set() const{
    return m_goal_completions_isSet;
}

bool OAIGoalData::is_goal_completions_Valid() const{
    return m_goal_completions_isValid;
}

qint32 OAIGoalData::getGoalIndex() const {
    return m_goal_index;
}
void OAIGoalData::setGoalIndex(const qint32 &goal_index) {
    m_goal_index = goal_index;
    m_goal_index_isSet = true;
}

bool OAIGoalData::is_goal_index_Set() const{
    return m_goal_index_isSet;
}

bool OAIGoalData::is_goal_index_Valid() const{
    return m_goal_index_isValid;
}

QString OAIGoalData::getGoalName() const {
    return m_goal_name;
}
void OAIGoalData::setGoalName(const QString &goal_name) {
    m_goal_name = goal_name;
    m_goal_name_isSet = true;
}

bool OAIGoalData::is_goal_name_Set() const{
    return m_goal_name_isSet;
}

bool OAIGoalData::is_goal_name_Valid() const{
    return m_goal_name_isValid;
}

QString OAIGoalData::getGoalPreviousStep1() const {
    return m_goal_previous_step1;
}
void OAIGoalData::setGoalPreviousStep1(const QString &goal_previous_step1) {
    m_goal_previous_step1 = goal_previous_step1;
    m_goal_previous_step1_isSet = true;
}

bool OAIGoalData::is_goal_previous_step1_Set() const{
    return m_goal_previous_step1_isSet;
}

bool OAIGoalData::is_goal_previous_step1_Valid() const{
    return m_goal_previous_step1_isValid;
}

QString OAIGoalData::getGoalPreviousStep2() const {
    return m_goal_previous_step2;
}
void OAIGoalData::setGoalPreviousStep2(const QString &goal_previous_step2) {
    m_goal_previous_step2 = goal_previous_step2;
    m_goal_previous_step2_isSet = true;
}

bool OAIGoalData::is_goal_previous_step2_Set() const{
    return m_goal_previous_step2_isSet;
}

bool OAIGoalData::is_goal_previous_step2_Valid() const{
    return m_goal_previous_step2_isValid;
}

QString OAIGoalData::getGoalPreviousStep3() const {
    return m_goal_previous_step3;
}
void OAIGoalData::setGoalPreviousStep3(const QString &goal_previous_step3) {
    m_goal_previous_step3 = goal_previous_step3;
    m_goal_previous_step3_isSet = true;
}

bool OAIGoalData::is_goal_previous_step3_Set() const{
    return m_goal_previous_step3_isSet;
}

bool OAIGoalData::is_goal_previous_step3_Valid() const{
    return m_goal_previous_step3_isValid;
}

double OAIGoalData::getGoalValue() const {
    return m_goal_value;
}
void OAIGoalData::setGoalValue(const double &goal_value) {
    m_goal_value = goal_value;
    m_goal_value_isSet = true;
}

bool OAIGoalData::is_goal_value_Set() const{
    return m_goal_value_isSet;
}

bool OAIGoalData::is_goal_value_Valid() const{
    return m_goal_value_isValid;
}

bool OAIGoalData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_goal_completion_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_completions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_previous_step1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_previous_step2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_previous_step3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoalData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
