/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScreenviewData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScreenviewData::OAIScreenviewData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScreenviewData::OAIScreenviewData() {
    this->initializeModel();
}

OAIScreenviewData::~OAIScreenviewData() {}

void OAIScreenviewData::initializeModel() {

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_mobile_device_branding_isSet = false;
    m_mobile_device_branding_isValid = false;

    m_mobile_device_model_isSet = false;
    m_mobile_device_model_isValid = false;

    m_screen_name_isSet = false;
    m_screen_name_isValid = false;
}

void OAIScreenviewData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScreenviewData::fromJsonObject(QJsonObject json) {

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("appName")]);
    m_app_name_isSet = !json[QString("appName")].isNull() && m_app_name_isValid;

    m_mobile_device_branding_isValid = ::OpenAPI::fromJsonValue(m_mobile_device_branding, json[QString("mobileDeviceBranding")]);
    m_mobile_device_branding_isSet = !json[QString("mobileDeviceBranding")].isNull() && m_mobile_device_branding_isValid;

    m_mobile_device_model_isValid = ::OpenAPI::fromJsonValue(m_mobile_device_model, json[QString("mobileDeviceModel")]);
    m_mobile_device_model_isSet = !json[QString("mobileDeviceModel")].isNull() && m_mobile_device_model_isValid;

    m_screen_name_isValid = ::OpenAPI::fromJsonValue(m_screen_name, json[QString("screenName")]);
    m_screen_name_isSet = !json[QString("screenName")].isNull() && m_screen_name_isValid;
}

QString OAIScreenviewData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScreenviewData::asJsonObject() const {
    QJsonObject obj;
    if (m_app_name_isSet) {
        obj.insert(QString("appName"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_mobile_device_branding_isSet) {
        obj.insert(QString("mobileDeviceBranding"), ::OpenAPI::toJsonValue(m_mobile_device_branding));
    }
    if (m_mobile_device_model_isSet) {
        obj.insert(QString("mobileDeviceModel"), ::OpenAPI::toJsonValue(m_mobile_device_model));
    }
    if (m_screen_name_isSet) {
        obj.insert(QString("screenName"), ::OpenAPI::toJsonValue(m_screen_name));
    }
    return obj;
}

QString OAIScreenviewData::getAppName() const {
    return m_app_name;
}
void OAIScreenviewData::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIScreenviewData::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIScreenviewData::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAIScreenviewData::getMobileDeviceBranding() const {
    return m_mobile_device_branding;
}
void OAIScreenviewData::setMobileDeviceBranding(const QString &mobile_device_branding) {
    m_mobile_device_branding = mobile_device_branding;
    m_mobile_device_branding_isSet = true;
}

bool OAIScreenviewData::is_mobile_device_branding_Set() const{
    return m_mobile_device_branding_isSet;
}

bool OAIScreenviewData::is_mobile_device_branding_Valid() const{
    return m_mobile_device_branding_isValid;
}

QString OAIScreenviewData::getMobileDeviceModel() const {
    return m_mobile_device_model;
}
void OAIScreenviewData::setMobileDeviceModel(const QString &mobile_device_model) {
    m_mobile_device_model = mobile_device_model;
    m_mobile_device_model_isSet = true;
}

bool OAIScreenviewData::is_mobile_device_model_Set() const{
    return m_mobile_device_model_isSet;
}

bool OAIScreenviewData::is_mobile_device_model_Valid() const{
    return m_mobile_device_model_isValid;
}

QString OAIScreenviewData::getScreenName() const {
    return m_screen_name;
}
void OAIScreenviewData::setScreenName(const QString &screen_name) {
    m_screen_name = screen_name;
    m_screen_name_isSet = true;
}

bool OAIScreenviewData::is_screen_name_Set() const{
    return m_screen_name_isSet;
}

bool OAIScreenviewData::is_screen_name_Valid() const{
    return m_screen_name_isValid;
}

bool OAIScreenviewData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_device_branding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_device_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScreenviewData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
