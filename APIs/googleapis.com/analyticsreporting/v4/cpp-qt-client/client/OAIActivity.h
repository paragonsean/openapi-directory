/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIActivity.h
 *
 * An Activity represents data for an activity of a user. Note that an Activity is different from a hit. A hit might result in multiple Activity&#39;s. For example, if a hit includes a transaction and a goal completion, there will be two Activity protos for this hit, one for ECOMMERCE and one for GOAL. Conversely, multiple hits can also construct one Activity. In classic e-commerce, data for one transaction might be sent through multiple hits. These hits will be merged into one ECOMMERCE Activity.
 */

#ifndef OAIActivity_H
#define OAIActivity_H

#include <QJsonObject>

#include "OAICustomDimension.h"
#include "OAIEcommerceData.h"
#include "OAIEventData.h"
#include "OAIGoalSetData.h"
#include "OAIPageviewData.h"
#include "OAIScreenviewData.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIScreenviewData;
class OAICustomDimension;
class OAIEcommerceData;
class OAIEventData;
class OAIGoalSetData;
class OAIPageviewData;

class OAIActivity : public OAIObject {
public:
    OAIActivity();
    OAIActivity(QString json);
    ~OAIActivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActivityTime() const;
    void setActivityTime(const QString &activity_time);
    bool is_activity_time_Set() const;
    bool is_activity_time_Valid() const;

    QString getActivityType() const;
    void setActivityType(const QString &activity_type);
    bool is_activity_type_Set() const;
    bool is_activity_type_Valid() const;

    OAIScreenviewData getAppview() const;
    void setAppview(const OAIScreenviewData &appview);
    bool is_appview_Set() const;
    bool is_appview_Valid() const;

    QString getCampaign() const;
    void setCampaign(const QString &campaign);
    bool is_campaign_Set() const;
    bool is_campaign_Valid() const;

    QString getChannelGrouping() const;
    void setChannelGrouping(const QString &channel_grouping);
    bool is_channel_grouping_Set() const;
    bool is_channel_grouping_Valid() const;

    QList<OAICustomDimension> getCustomDimension() const;
    void setCustomDimension(const QList<OAICustomDimension> &custom_dimension);
    bool is_custom_dimension_Set() const;
    bool is_custom_dimension_Valid() const;

    OAIEcommerceData getEcommerce() const;
    void setEcommerce(const OAIEcommerceData &ecommerce);
    bool is_ecommerce_Set() const;
    bool is_ecommerce_Valid() const;

    OAIEventData getEvent() const;
    void setEvent(const OAIEventData &event);
    bool is_event_Set() const;
    bool is_event_Valid() const;

    OAIGoalSetData getGoals() const;
    void setGoals(const OAIGoalSetData &goals);
    bool is_goals_Set() const;
    bool is_goals_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    QString getKeyword() const;
    void setKeyword(const QString &keyword);
    bool is_keyword_Set() const;
    bool is_keyword_Valid() const;

    QString getLandingPagePath() const;
    void setLandingPagePath(const QString &landing_page_path);
    bool is_landing_page_path_Set() const;
    bool is_landing_page_path_Valid() const;

    QString getMedium() const;
    void setMedium(const QString &medium);
    bool is_medium_Set() const;
    bool is_medium_Valid() const;

    OAIPageviewData getPageview() const;
    void setPageview(const OAIPageviewData &pageview);
    bool is_pageview_Set() const;
    bool is_pageview_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_activity_time;
    bool m_activity_time_isSet;
    bool m_activity_time_isValid;

    QString m_activity_type;
    bool m_activity_type_isSet;
    bool m_activity_type_isValid;

    OAIScreenviewData m_appview;
    bool m_appview_isSet;
    bool m_appview_isValid;

    QString m_campaign;
    bool m_campaign_isSet;
    bool m_campaign_isValid;

    QString m_channel_grouping;
    bool m_channel_grouping_isSet;
    bool m_channel_grouping_isValid;

    QList<OAICustomDimension> m_custom_dimension;
    bool m_custom_dimension_isSet;
    bool m_custom_dimension_isValid;

    OAIEcommerceData m_ecommerce;
    bool m_ecommerce_isSet;
    bool m_ecommerce_isValid;

    OAIEventData m_event;
    bool m_event_isSet;
    bool m_event_isValid;

    OAIGoalSetData m_goals;
    bool m_goals_isSet;
    bool m_goals_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    QString m_keyword;
    bool m_keyword_isSet;
    bool m_keyword_isValid;

    QString m_landing_page_path;
    bool m_landing_page_path_isSet;
    bool m_landing_page_path_isValid;

    QString m_medium;
    bool m_medium_isSet;
    bool m_medium_isValid;

    OAIPageviewData m_pageview;
    bool m_pageview_isSet;
    bool m_pageview_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIActivity)

#endif // OAIActivity_H
