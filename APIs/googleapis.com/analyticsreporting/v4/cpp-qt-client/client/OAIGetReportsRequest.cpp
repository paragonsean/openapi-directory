/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetReportsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetReportsRequest::OAIGetReportsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetReportsRequest::OAIGetReportsRequest() {
    this->initializeModel();
}

OAIGetReportsRequest::~OAIGetReportsRequest() {}

void OAIGetReportsRequest::initializeModel() {

    m_report_requests_isSet = false;
    m_report_requests_isValid = false;

    m_use_resource_quotas_isSet = false;
    m_use_resource_quotas_isValid = false;
}

void OAIGetReportsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetReportsRequest::fromJsonObject(QJsonObject json) {

    m_report_requests_isValid = ::OpenAPI::fromJsonValue(m_report_requests, json[QString("reportRequests")]);
    m_report_requests_isSet = !json[QString("reportRequests")].isNull() && m_report_requests_isValid;

    m_use_resource_quotas_isValid = ::OpenAPI::fromJsonValue(m_use_resource_quotas, json[QString("useResourceQuotas")]);
    m_use_resource_quotas_isSet = !json[QString("useResourceQuotas")].isNull() && m_use_resource_quotas_isValid;
}

QString OAIGetReportsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetReportsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_report_requests.size() > 0) {
        obj.insert(QString("reportRequests"), ::OpenAPI::toJsonValue(m_report_requests));
    }
    if (m_use_resource_quotas_isSet) {
        obj.insert(QString("useResourceQuotas"), ::OpenAPI::toJsonValue(m_use_resource_quotas));
    }
    return obj;
}

QList<OAIReportRequest> OAIGetReportsRequest::getReportRequests() const {
    return m_report_requests;
}
void OAIGetReportsRequest::setReportRequests(const QList<OAIReportRequest> &report_requests) {
    m_report_requests = report_requests;
    m_report_requests_isSet = true;
}

bool OAIGetReportsRequest::is_report_requests_Set() const{
    return m_report_requests_isSet;
}

bool OAIGetReportsRequest::is_report_requests_Valid() const{
    return m_report_requests_isValid;
}

bool OAIGetReportsRequest::isUseResourceQuotas() const {
    return m_use_resource_quotas;
}
void OAIGetReportsRequest::setUseResourceQuotas(const bool &use_resource_quotas) {
    m_use_resource_quotas = use_resource_quotas;
    m_use_resource_quotas_isSet = true;
}

bool OAIGetReportsRequest::is_use_resource_quotas_Set() const{
    return m_use_resource_quotas_isSet;
}

bool OAIGetReportsRequest::is_use_resource_quotas_Valid() const{
    return m_use_resource_quotas_isValid;
}

bool OAIGetReportsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_resource_quotas_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetReportsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
