/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDynamicSegment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDynamicSegment::OAIDynamicSegment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDynamicSegment::OAIDynamicSegment() {
    this->initializeModel();
}

OAIDynamicSegment::~OAIDynamicSegment() {}

void OAIDynamicSegment::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_session_segment_isSet = false;
    m_session_segment_isValid = false;

    m_user_segment_isSet = false;
    m_user_segment_isValid = false;
}

void OAIDynamicSegment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDynamicSegment::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_session_segment_isValid = ::OpenAPI::fromJsonValue(m_session_segment, json[QString("sessionSegment")]);
    m_session_segment_isSet = !json[QString("sessionSegment")].isNull() && m_session_segment_isValid;

    m_user_segment_isValid = ::OpenAPI::fromJsonValue(m_user_segment, json[QString("userSegment")]);
    m_user_segment_isSet = !json[QString("userSegment")].isNull() && m_user_segment_isValid;
}

QString OAIDynamicSegment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDynamicSegment::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_session_segment.isSet()) {
        obj.insert(QString("sessionSegment"), ::OpenAPI::toJsonValue(m_session_segment));
    }
    if (m_user_segment.isSet()) {
        obj.insert(QString("userSegment"), ::OpenAPI::toJsonValue(m_user_segment));
    }
    return obj;
}

QString OAIDynamicSegment::getName() const {
    return m_name;
}
void OAIDynamicSegment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDynamicSegment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDynamicSegment::is_name_Valid() const{
    return m_name_isValid;
}

OAISegmentDefinition OAIDynamicSegment::getSessionSegment() const {
    return m_session_segment;
}
void OAIDynamicSegment::setSessionSegment(const OAISegmentDefinition &session_segment) {
    m_session_segment = session_segment;
    m_session_segment_isSet = true;
}

bool OAIDynamicSegment::is_session_segment_Set() const{
    return m_session_segment_isSet;
}

bool OAIDynamicSegment::is_session_segment_Valid() const{
    return m_session_segment_isValid;
}

OAISegmentDefinition OAIDynamicSegment::getUserSegment() const {
    return m_user_segment;
}
void OAIDynamicSegment::setUserSegment(const OAISegmentDefinition &user_segment) {
    m_user_segment = user_segment;
    m_user_segment_isSet = true;
}

bool OAIDynamicSegment::is_user_segment_Set() const{
    return m_user_segment_isSet;
}

bool OAIDynamicSegment::is_user_segment_Valid() const{
    return m_user_segment_isValid;
}

bool OAIDynamicSegment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_segment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_segment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDynamicSegment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
