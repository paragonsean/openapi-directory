/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentSequenceStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentSequenceStep::OAISegmentSequenceStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentSequenceStep::OAISegmentSequenceStep() {
    this->initializeModel();
}

OAISegmentSequenceStep::~OAISegmentSequenceStep() {}

void OAISegmentSequenceStep::initializeModel() {

    m_match_type_isSet = false;
    m_match_type_isValid = false;

    m_or_filters_for_segment_isSet = false;
    m_or_filters_for_segment_isValid = false;
}

void OAISegmentSequenceStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentSequenceStep::fromJsonObject(QJsonObject json) {

    m_match_type_isValid = ::OpenAPI::fromJsonValue(m_match_type, json[QString("matchType")]);
    m_match_type_isSet = !json[QString("matchType")].isNull() && m_match_type_isValid;

    m_or_filters_for_segment_isValid = ::OpenAPI::fromJsonValue(m_or_filters_for_segment, json[QString("orFiltersForSegment")]);
    m_or_filters_for_segment_isSet = !json[QString("orFiltersForSegment")].isNull() && m_or_filters_for_segment_isValid;
}

QString OAISegmentSequenceStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentSequenceStep::asJsonObject() const {
    QJsonObject obj;
    if (m_match_type_isSet) {
        obj.insert(QString("matchType"), ::OpenAPI::toJsonValue(m_match_type));
    }
    if (m_or_filters_for_segment.size() > 0) {
        obj.insert(QString("orFiltersForSegment"), ::OpenAPI::toJsonValue(m_or_filters_for_segment));
    }
    return obj;
}

QString OAISegmentSequenceStep::getMatchType() const {
    return m_match_type;
}
void OAISegmentSequenceStep::setMatchType(const QString &match_type) {
    m_match_type = match_type;
    m_match_type_isSet = true;
}

bool OAISegmentSequenceStep::is_match_type_Set() const{
    return m_match_type_isSet;
}

bool OAISegmentSequenceStep::is_match_type_Valid() const{
    return m_match_type_isValid;
}

QList<OAIOrFiltersForSegment> OAISegmentSequenceStep::getOrFiltersForSegment() const {
    return m_or_filters_for_segment;
}
void OAISegmentSequenceStep::setOrFiltersForSegment(const QList<OAIOrFiltersForSegment> &or_filters_for_segment) {
    m_or_filters_for_segment = or_filters_for_segment;
    m_or_filters_for_segment_isSet = true;
}

bool OAISegmentSequenceStep::is_or_filters_for_segment_Set() const{
    return m_or_filters_for_segment_isSet;
}

bool OAISegmentSequenceStep::is_or_filters_for_segment_Valid() const{
    return m_or_filters_for_segment_isValid;
}

bool OAISegmentSequenceStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_match_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_or_filters_for_segment.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentSequenceStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
