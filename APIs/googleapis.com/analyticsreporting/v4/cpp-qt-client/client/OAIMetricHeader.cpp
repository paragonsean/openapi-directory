/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricHeader::OAIMetricHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricHeader::OAIMetricHeader() {
    this->initializeModel();
}

OAIMetricHeader::~OAIMetricHeader() {}

void OAIMetricHeader::initializeModel() {

    m_metric_header_entries_isSet = false;
    m_metric_header_entries_isValid = false;

    m_pivot_headers_isSet = false;
    m_pivot_headers_isValid = false;
}

void OAIMetricHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricHeader::fromJsonObject(QJsonObject json) {

    m_metric_header_entries_isValid = ::OpenAPI::fromJsonValue(m_metric_header_entries, json[QString("metricHeaderEntries")]);
    m_metric_header_entries_isSet = !json[QString("metricHeaderEntries")].isNull() && m_metric_header_entries_isValid;

    m_pivot_headers_isValid = ::OpenAPI::fromJsonValue(m_pivot_headers, json[QString("pivotHeaders")]);
    m_pivot_headers_isSet = !json[QString("pivotHeaders")].isNull() && m_pivot_headers_isValid;
}

QString OAIMetricHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_header_entries.size() > 0) {
        obj.insert(QString("metricHeaderEntries"), ::OpenAPI::toJsonValue(m_metric_header_entries));
    }
    if (m_pivot_headers.size() > 0) {
        obj.insert(QString("pivotHeaders"), ::OpenAPI::toJsonValue(m_pivot_headers));
    }
    return obj;
}

QList<OAIMetricHeaderEntry> OAIMetricHeader::getMetricHeaderEntries() const {
    return m_metric_header_entries;
}
void OAIMetricHeader::setMetricHeaderEntries(const QList<OAIMetricHeaderEntry> &metric_header_entries) {
    m_metric_header_entries = metric_header_entries;
    m_metric_header_entries_isSet = true;
}

bool OAIMetricHeader::is_metric_header_entries_Set() const{
    return m_metric_header_entries_isSet;
}

bool OAIMetricHeader::is_metric_header_entries_Valid() const{
    return m_metric_header_entries_isValid;
}

QList<OAIPivotHeader> OAIMetricHeader::getPivotHeaders() const {
    return m_pivot_headers;
}
void OAIMetricHeader::setPivotHeaders(const QList<OAIPivotHeader> &pivot_headers) {
    m_pivot_headers = pivot_headers;
    m_pivot_headers_isSet = true;
}

bool OAIMetricHeader::is_pivot_headers_Set() const{
    return m_pivot_headers_isSet;
}

bool OAIMetricHeader::is_pivot_headers_Valid() const{
    return m_pivot_headers_isValid;
}

bool OAIMetricHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_header_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pivot_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
