/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserActivitySession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserActivitySession::OAIUserActivitySession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserActivitySession::OAIUserActivitySession() {
    this->initializeModel();
}

OAIUserActivitySession::~OAIUserActivitySession() {}

void OAIUserActivitySession::initializeModel() {

    m_activities_isSet = false;
    m_activities_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_device_category_isSet = false;
    m_device_category_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_session_date_isSet = false;
    m_session_date_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;
}

void OAIUserActivitySession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserActivitySession::fromJsonObject(QJsonObject json) {

    m_activities_isValid = ::OpenAPI::fromJsonValue(m_activities, json[QString("activities")]);
    m_activities_isSet = !json[QString("activities")].isNull() && m_activities_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("dataSource")]);
    m_data_source_isSet = !json[QString("dataSource")].isNull() && m_data_source_isValid;

    m_device_category_isValid = ::OpenAPI::fromJsonValue(m_device_category, json[QString("deviceCategory")]);
    m_device_category_isSet = !json[QString("deviceCategory")].isNull() && m_device_category_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_session_date_isValid = ::OpenAPI::fromJsonValue(m_session_date, json[QString("sessionDate")]);
    m_session_date_isSet = !json[QString("sessionDate")].isNull() && m_session_date_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;
}

QString OAIUserActivitySession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserActivitySession::asJsonObject() const {
    QJsonObject obj;
    if (m_activities.size() > 0) {
        obj.insert(QString("activities"), ::OpenAPI::toJsonValue(m_activities));
    }
    if (m_data_source_isSet) {
        obj.insert(QString("dataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_device_category_isSet) {
        obj.insert(QString("deviceCategory"), ::OpenAPI::toJsonValue(m_device_category));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_session_date_isSet) {
        obj.insert(QString("sessionDate"), ::OpenAPI::toJsonValue(m_session_date));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    return obj;
}

QList<OAIActivity> OAIUserActivitySession::getActivities() const {
    return m_activities;
}
void OAIUserActivitySession::setActivities(const QList<OAIActivity> &activities) {
    m_activities = activities;
    m_activities_isSet = true;
}

bool OAIUserActivitySession::is_activities_Set() const{
    return m_activities_isSet;
}

bool OAIUserActivitySession::is_activities_Valid() const{
    return m_activities_isValid;
}

QString OAIUserActivitySession::getDataSource() const {
    return m_data_source;
}
void OAIUserActivitySession::setDataSource(const QString &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIUserActivitySession::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIUserActivitySession::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QString OAIUserActivitySession::getDeviceCategory() const {
    return m_device_category;
}
void OAIUserActivitySession::setDeviceCategory(const QString &device_category) {
    m_device_category = device_category;
    m_device_category_isSet = true;
}

bool OAIUserActivitySession::is_device_category_Set() const{
    return m_device_category_isSet;
}

bool OAIUserActivitySession::is_device_category_Valid() const{
    return m_device_category_isValid;
}

QString OAIUserActivitySession::getPlatform() const {
    return m_platform;
}
void OAIUserActivitySession::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIUserActivitySession::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIUserActivitySession::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIUserActivitySession::getSessionDate() const {
    return m_session_date;
}
void OAIUserActivitySession::setSessionDate(const QString &session_date) {
    m_session_date = session_date;
    m_session_date_isSet = true;
}

bool OAIUserActivitySession::is_session_date_Set() const{
    return m_session_date_isSet;
}

bool OAIUserActivitySession::is_session_date_Valid() const{
    return m_session_date_isValid;
}

QString OAIUserActivitySession::getSessionId() const {
    return m_session_id;
}
void OAIUserActivitySession::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIUserActivitySession::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIUserActivitySession::is_session_id_Valid() const{
    return m_session_id_isValid;
}

bool OAIUserActivitySession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserActivitySession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
