/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the products in an e-commerce transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductData {
  public static final String SERIALIZED_NAME_ITEM_REVENUE = "itemRevenue";
  @SerializedName(SERIALIZED_NAME_ITEM_REVENUE)
  private Double itemRevenue;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "productName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_PRODUCT_QUANTITY = "productQuantity";
  @SerializedName(SERIALIZED_NAME_PRODUCT_QUANTITY)
  private String productQuantity;

  public static final String SERIALIZED_NAME_PRODUCT_SKU = "productSku";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SKU)
  private String productSku;

  public ProductData() {
  }

  public ProductData itemRevenue(Double itemRevenue) {
    this.itemRevenue = itemRevenue;
    return this;
  }

  /**
   * The total revenue from purchased product items.
   * @return itemRevenue
   */
  @javax.annotation.Nullable
  public Double getItemRevenue() {
    return itemRevenue;
  }

  public void setItemRevenue(Double itemRevenue) {
    this.itemRevenue = itemRevenue;
  }


  public ProductData productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * The product name, supplied by the e-commerce tracking application, for the purchased items.
   * @return productName
   */
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public ProductData productQuantity(String productQuantity) {
    this.productQuantity = productQuantity;
    return this;
  }

  /**
   * Total number of this product units in the transaction.
   * @return productQuantity
   */
  @javax.annotation.Nullable
  public String getProductQuantity() {
    return productQuantity;
  }

  public void setProductQuantity(String productQuantity) {
    this.productQuantity = productQuantity;
  }


  public ProductData productSku(String productSku) {
    this.productSku = productSku;
    return this;
  }

  /**
   * Unique code that represents the product.
   * @return productSku
   */
  @javax.annotation.Nullable
  public String getProductSku() {
    return productSku;
  }

  public void setProductSku(String productSku) {
    this.productSku = productSku;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductData productData = (ProductData) o;
    return Objects.equals(this.itemRevenue, productData.itemRevenue) &&
        Objects.equals(this.productName, productData.productName) &&
        Objects.equals(this.productQuantity, productData.productQuantity) &&
        Objects.equals(this.productSku, productData.productSku);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemRevenue, productName, productQuantity, productSku);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductData {\n");
    sb.append("    itemRevenue: ").append(toIndentedString(itemRevenue)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productQuantity: ").append(toIndentedString(productQuantity)).append("\n");
    sb.append("    productSku: ").append(toIndentedString(productSku)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemRevenue");
    openapiFields.add("productName");
    openapiFields.add("productQuantity");
    openapiFields.add("productSku");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductData is not found in the empty JSON string", ProductData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("productName") != null && !jsonObj.get("productName").isJsonNull()) && !jsonObj.get("productName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productName").toString()));
      }
      if ((jsonObj.get("productQuantity") != null && !jsonObj.get("productQuantity").isJsonNull()) && !jsonObj.get("productQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productQuantity").toString()));
      }
      if ((jsonObj.get("productSku") != null && !jsonObj.get("productSku").isJsonNull()) && !jsonObj.get("productSku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productSku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productSku").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductData.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductData>() {
           @Override
           public void write(JsonWriter out, ProductData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductData
   * @throws IOException if the JSON string is invalid with respect to ProductData
   */
  public static ProductData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductData.class);
  }

  /**
   * Convert an instance of ProductData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

