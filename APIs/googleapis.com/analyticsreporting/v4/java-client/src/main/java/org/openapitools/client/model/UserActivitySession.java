/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Activity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This represents a user session performed on a specific device at a certain time over a period of time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserActivitySession {
  public static final String SERIALIZED_NAME_ACTIVITIES = "activities";
  @SerializedName(SERIALIZED_NAME_ACTIVITIES)
  private List<Activity> activities = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_SOURCE = "dataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private String dataSource;

  public static final String SERIALIZED_NAME_DEVICE_CATEGORY = "deviceCategory";
  @SerializedName(SERIALIZED_NAME_DEVICE_CATEGORY)
  private String deviceCategory;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_SESSION_DATE = "sessionDate";
  @SerializedName(SERIALIZED_NAME_SESSION_DATE)
  private String sessionDate;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public UserActivitySession() {
  }

  public UserActivitySession activities(List<Activity> activities) {
    this.activities = activities;
    return this;
  }

  public UserActivitySession addActivitiesItem(Activity activitiesItem) {
    if (this.activities == null) {
      this.activities = new ArrayList<>();
    }
    this.activities.add(activitiesItem);
    return this;
  }

  /**
   * Represents a detailed view into each of the activity in this session.
   * @return activities
   */
  @javax.annotation.Nullable
  public List<Activity> getActivities() {
    return activities;
  }

  public void setActivities(List<Activity> activities) {
    this.activities = activities;
  }


  public UserActivitySession dataSource(String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * The data source of a hit. By default, hits sent from analytics.js are reported as \&quot;web\&quot; and hits sent from the mobile SDKs are reported as \&quot;app\&quot;. These values can be overridden in the Measurement Protocol.
   * @return dataSource
   */
  @javax.annotation.Nullable
  public String getDataSource() {
    return dataSource;
  }

  public void setDataSource(String dataSource) {
    this.dataSource = dataSource;
  }


  public UserActivitySession deviceCategory(String deviceCategory) {
    this.deviceCategory = deviceCategory;
    return this;
  }

  /**
   * The type of device used: \&quot;mobile\&quot;, \&quot;tablet\&quot; etc.
   * @return deviceCategory
   */
  @javax.annotation.Nullable
  public String getDeviceCategory() {
    return deviceCategory;
  }

  public void setDeviceCategory(String deviceCategory) {
    this.deviceCategory = deviceCategory;
  }


  public UserActivitySession platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Platform on which the activity happened: \&quot;android\&quot;, \&quot;ios\&quot; etc.
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public UserActivitySession sessionDate(String sessionDate) {
    this.sessionDate = sessionDate;
    return this;
  }

  /**
   * Date of this session in ISO-8601 format.
   * @return sessionDate
   */
  @javax.annotation.Nullable
  public String getSessionDate() {
    return sessionDate;
  }

  public void setSessionDate(String sessionDate) {
    this.sessionDate = sessionDate;
  }


  public UserActivitySession sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Unique ID of the session.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserActivitySession userActivitySession = (UserActivitySession) o;
    return Objects.equals(this.activities, userActivitySession.activities) &&
        Objects.equals(this.dataSource, userActivitySession.dataSource) &&
        Objects.equals(this.deviceCategory, userActivitySession.deviceCategory) &&
        Objects.equals(this.platform, userActivitySession.platform) &&
        Objects.equals(this.sessionDate, userActivitySession.sessionDate) &&
        Objects.equals(this.sessionId, userActivitySession.sessionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activities, dataSource, deviceCategory, platform, sessionDate, sessionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserActivitySession {\n");
    sb.append("    activities: ").append(toIndentedString(activities)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    deviceCategory: ").append(toIndentedString(deviceCategory)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    sessionDate: ").append(toIndentedString(sessionDate)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activities");
    openapiFields.add("dataSource");
    openapiFields.add("deviceCategory");
    openapiFields.add("platform");
    openapiFields.add("sessionDate");
    openapiFields.add("sessionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserActivitySession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserActivitySession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserActivitySession is not found in the empty JSON string", UserActivitySession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserActivitySession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserActivitySession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("activities") != null && !jsonObj.get("activities").isJsonNull()) {
        JsonArray jsonArrayactivities = jsonObj.getAsJsonArray("activities");
        if (jsonArrayactivities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activities` to be an array in the JSON string but got `%s`", jsonObj.get("activities").toString()));
          }

          // validate the optional field `activities` (array)
          for (int i = 0; i < jsonArrayactivities.size(); i++) {
            Activity.validateJsonElement(jsonArrayactivities.get(i));
          };
        }
      }
      if ((jsonObj.get("dataSource") != null && !jsonObj.get("dataSource").isJsonNull()) && !jsonObj.get("dataSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSource").toString()));
      }
      if ((jsonObj.get("deviceCategory") != null && !jsonObj.get("deviceCategory").isJsonNull()) && !jsonObj.get("deviceCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceCategory").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("sessionDate") != null && !jsonObj.get("sessionDate").isJsonNull()) && !jsonObj.get("sessionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionDate").toString()));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserActivitySession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserActivitySession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserActivitySession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserActivitySession.class));

       return (TypeAdapter<T>) new TypeAdapter<UserActivitySession>() {
           @Override
           public void write(JsonWriter out, UserActivitySession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserActivitySession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserActivitySession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserActivitySession
   * @throws IOException if the JSON string is invalid with respect to UserActivitySession
   */
  public static UserActivitySession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserActivitySession.class);
  }

  /**
   * Convert an instance of UserActivitySession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

