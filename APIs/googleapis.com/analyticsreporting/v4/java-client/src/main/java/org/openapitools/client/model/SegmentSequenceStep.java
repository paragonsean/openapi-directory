/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrFiltersForSegment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A segment sequence definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SegmentSequenceStep {
  /**
   * Specifies if the step immediately precedes or can be any time before the next step.
   */
  @JsonAdapter(MatchTypeEnum.Adapter.class)
  public enum MatchTypeEnum {
    UNSPECIFIED_MATCH_TYPE("UNSPECIFIED_MATCH_TYPE"),
    
    PRECEDES("PRECEDES"),
    
    IMMEDIATELY_PRECEDES("IMMEDIATELY_PRECEDES");

    private String value;

    MatchTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchTypeEnum fromValue(String value) {
      for (MatchTypeEnum b : MatchTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCH_TYPE = "matchType";
  @SerializedName(SERIALIZED_NAME_MATCH_TYPE)
  private MatchTypeEnum matchType;

  public static final String SERIALIZED_NAME_OR_FILTERS_FOR_SEGMENT = "orFiltersForSegment";
  @SerializedName(SERIALIZED_NAME_OR_FILTERS_FOR_SEGMENT)
  private List<OrFiltersForSegment> orFiltersForSegment = new ArrayList<>();

  public SegmentSequenceStep() {
  }

  public SegmentSequenceStep matchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
    return this;
  }

  /**
   * Specifies if the step immediately precedes or can be any time before the next step.
   * @return matchType
   */
  @javax.annotation.Nullable
  public MatchTypeEnum getMatchType() {
    return matchType;
  }

  public void setMatchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
  }


  public SegmentSequenceStep orFiltersForSegment(List<OrFiltersForSegment> orFiltersForSegment) {
    this.orFiltersForSegment = orFiltersForSegment;
    return this;
  }

  public SegmentSequenceStep addOrFiltersForSegmentItem(OrFiltersForSegment orFiltersForSegmentItem) {
    if (this.orFiltersForSegment == null) {
      this.orFiltersForSegment = new ArrayList<>();
    }
    this.orFiltersForSegment.add(orFiltersForSegmentItem);
    return this;
  }

  /**
   * A sequence is specified with a list of Or grouped filters which are combined with &#x60;AND&#x60; operator.
   * @return orFiltersForSegment
   */
  @javax.annotation.Nullable
  public List<OrFiltersForSegment> getOrFiltersForSegment() {
    return orFiltersForSegment;
  }

  public void setOrFiltersForSegment(List<OrFiltersForSegment> orFiltersForSegment) {
    this.orFiltersForSegment = orFiltersForSegment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SegmentSequenceStep segmentSequenceStep = (SegmentSequenceStep) o;
    return Objects.equals(this.matchType, segmentSequenceStep.matchType) &&
        Objects.equals(this.orFiltersForSegment, segmentSequenceStep.orFiltersForSegment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchType, orFiltersForSegment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SegmentSequenceStep {\n");
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("    orFiltersForSegment: ").append(toIndentedString(orFiltersForSegment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("matchType");
    openapiFields.add("orFiltersForSegment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SegmentSequenceStep
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SegmentSequenceStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SegmentSequenceStep is not found in the empty JSON string", SegmentSequenceStep.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SegmentSequenceStep.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SegmentSequenceStep` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("matchType") != null && !jsonObj.get("matchType").isJsonNull()) && !jsonObj.get("matchType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchType").toString()));
      }
      // validate the optional field `matchType`
      if (jsonObj.get("matchType") != null && !jsonObj.get("matchType").isJsonNull()) {
        MatchTypeEnum.validateJsonElement(jsonObj.get("matchType"));
      }
      if (jsonObj.get("orFiltersForSegment") != null && !jsonObj.get("orFiltersForSegment").isJsonNull()) {
        JsonArray jsonArrayorFiltersForSegment = jsonObj.getAsJsonArray("orFiltersForSegment");
        if (jsonArrayorFiltersForSegment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orFiltersForSegment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orFiltersForSegment` to be an array in the JSON string but got `%s`", jsonObj.get("orFiltersForSegment").toString()));
          }

          // validate the optional field `orFiltersForSegment` (array)
          for (int i = 0; i < jsonArrayorFiltersForSegment.size(); i++) {
            OrFiltersForSegment.validateJsonElement(jsonArrayorFiltersForSegment.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SegmentSequenceStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SegmentSequenceStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SegmentSequenceStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SegmentSequenceStep.class));

       return (TypeAdapter<T>) new TypeAdapter<SegmentSequenceStep>() {
           @Override
           public void write(JsonWriter out, SegmentSequenceStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SegmentSequenceStep read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SegmentSequenceStep given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SegmentSequenceStep
   * @throws IOException if the JSON string is invalid with respect to SegmentSequenceStep
   */
  public static SegmentSequenceStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SegmentSequenceStep.class);
  }

  /**
   * Convert an instance of SegmentSequenceStep to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

