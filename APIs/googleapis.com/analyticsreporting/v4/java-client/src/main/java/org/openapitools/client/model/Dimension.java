/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * [Dimensions](https://support.google.com/analytics/answer/1033861) are attributes of your data. For example, the dimension &#x60;ga:city&#x60; indicates the city, for example, \&quot;Paris\&quot; or \&quot;New York\&quot;, from which a session originates.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dimension {
  public static final String SERIALIZED_NAME_HISTOGRAM_BUCKETS = "histogramBuckets";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM_BUCKETS)
  private List<String> histogramBuckets = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public Dimension() {
  }

  public Dimension histogramBuckets(List<String> histogramBuckets) {
    this.histogramBuckets = histogramBuckets;
    return this;
  }

  public Dimension addHistogramBucketsItem(String histogramBucketsItem) {
    if (this.histogramBuckets == null) {
      this.histogramBuckets = new ArrayList<>();
    }
    this.histogramBuckets.add(histogramBucketsItem);
    return this;
  }

  /**
   * If non-empty, we place dimension values into buckets after string to int64. Dimension values that are not the string representation of an integral value will be converted to zero. The bucket values have to be in increasing order. Each bucket is closed on the lower end, and open on the upper end. The \&quot;first\&quot; bucket includes all values less than the first boundary, the \&quot;last\&quot; bucket includes all values up to infinity. Dimension values that fall in a bucket get transformed to a new dimension value. For example, if one gives a list of \&quot;0, 1, 3, 4, 7\&quot;, then we return the following buckets: - bucket #1: values &lt; 0, dimension value \&quot;&lt;0\&quot; - bucket #2: values in [0,1), dimension value \&quot;0\&quot; - bucket #3: values in [1,3), dimension value \&quot;1-2\&quot; - bucket #4: values in [3,4), dimension value \&quot;3\&quot; - bucket #5: values in [4,7), dimension value \&quot;4-6\&quot; - bucket #6: values &gt;&#x3D; 7, dimension value \&quot;7+\&quot; NOTE: If you are applying histogram mutation on any dimension, and using that dimension in sort, you will want to use the sort type &#x60;HISTOGRAM_BUCKET&#x60; for that purpose. Without that the dimension values will be sorted according to dictionary (lexicographic) order. For example the ascending dictionary order is: \&quot;&lt;50\&quot;, \&quot;1001+\&quot;, \&quot;121-1000\&quot;, \&quot;50-120\&quot; And the ascending &#x60;HISTOGRAM_BUCKET&#x60; order is: \&quot;&lt;50\&quot;, \&quot;50-120\&quot;, \&quot;121-1000\&quot;, \&quot;1001+\&quot; The client has to explicitly request &#x60;\&quot;orderType\&quot;: \&quot;HISTOGRAM_BUCKET\&quot;&#x60; for a histogram-mutated dimension.
   * @return histogramBuckets
   */
  @javax.annotation.Nullable
  public List<String> getHistogramBuckets() {
    return histogramBuckets;
  }

  public void setHistogramBuckets(List<String> histogramBuckets) {
    this.histogramBuckets = histogramBuckets;
  }


  public Dimension name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the dimension to fetch, for example &#x60;ga:browser&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dimension dimension = (Dimension) o;
    return Objects.equals(this.histogramBuckets, dimension.histogramBuckets) &&
        Objects.equals(this.name, dimension.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(histogramBuckets, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dimension {\n");
    sb.append("    histogramBuckets: ").append(toIndentedString(histogramBuckets)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("histogramBuckets");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dimension
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dimension.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dimension is not found in the empty JSON string", Dimension.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dimension.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dimension` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("histogramBuckets") != null && !jsonObj.get("histogramBuckets").isJsonNull() && !jsonObj.get("histogramBuckets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `histogramBuckets` to be an array in the JSON string but got `%s`", jsonObj.get("histogramBuckets").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dimension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dimension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dimension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dimension.class));

       return (TypeAdapter<T>) new TypeAdapter<Dimension>() {
           @Override
           public void write(JsonWriter out, Dimension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dimension read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dimension given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dimension
   * @throws IOException if the JSON string is invalid with respect to Dimension
   */
  public static Dimension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dimension.class);
  }

  /**
   * Convert an instance of Dimension to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

