/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScreenviewData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScreenviewData {
  public static final String SERIALIZED_NAME_APP_NAME = "appName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_MOBILE_DEVICE_BRANDING = "mobileDeviceBranding";
  @SerializedName(SERIALIZED_NAME_MOBILE_DEVICE_BRANDING)
  private String mobileDeviceBranding;

  public static final String SERIALIZED_NAME_MOBILE_DEVICE_MODEL = "mobileDeviceModel";
  @SerializedName(SERIALIZED_NAME_MOBILE_DEVICE_MODEL)
  private String mobileDeviceModel;

  public static final String SERIALIZED_NAME_SCREEN_NAME = "screenName";
  @SerializedName(SERIALIZED_NAME_SCREEN_NAME)
  private String screenName;

  public ScreenviewData() {
  }

  public ScreenviewData appName(String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * The application name.
   * @return appName
   */
  @javax.annotation.Nullable
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }


  public ScreenviewData mobileDeviceBranding(String mobileDeviceBranding) {
    this.mobileDeviceBranding = mobileDeviceBranding;
    return this;
  }

  /**
   * Mobile manufacturer or branded name. Eg: \&quot;Google\&quot;, \&quot;Apple\&quot; etc.
   * @return mobileDeviceBranding
   */
  @javax.annotation.Nullable
  public String getMobileDeviceBranding() {
    return mobileDeviceBranding;
  }

  public void setMobileDeviceBranding(String mobileDeviceBranding) {
    this.mobileDeviceBranding = mobileDeviceBranding;
  }


  public ScreenviewData mobileDeviceModel(String mobileDeviceModel) {
    this.mobileDeviceModel = mobileDeviceModel;
    return this;
  }

  /**
   * Mobile device model. Eg: \&quot;Pixel\&quot;, \&quot;iPhone\&quot; etc.
   * @return mobileDeviceModel
   */
  @javax.annotation.Nullable
  public String getMobileDeviceModel() {
    return mobileDeviceModel;
  }

  public void setMobileDeviceModel(String mobileDeviceModel) {
    this.mobileDeviceModel = mobileDeviceModel;
  }


  public ScreenviewData screenName(String screenName) {
    this.screenName = screenName;
    return this;
  }

  /**
   * The name of the screen.
   * @return screenName
   */
  @javax.annotation.Nullable
  public String getScreenName() {
    return screenName;
  }

  public void setScreenName(String screenName) {
    this.screenName = screenName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenviewData screenviewData = (ScreenviewData) o;
    return Objects.equals(this.appName, screenviewData.appName) &&
        Objects.equals(this.mobileDeviceBranding, screenviewData.mobileDeviceBranding) &&
        Objects.equals(this.mobileDeviceModel, screenviewData.mobileDeviceModel) &&
        Objects.equals(this.screenName, screenviewData.screenName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appName, mobileDeviceBranding, mobileDeviceModel, screenName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenviewData {\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    mobileDeviceBranding: ").append(toIndentedString(mobileDeviceBranding)).append("\n");
    sb.append("    mobileDeviceModel: ").append(toIndentedString(mobileDeviceModel)).append("\n");
    sb.append("    screenName: ").append(toIndentedString(screenName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appName");
    openapiFields.add("mobileDeviceBranding");
    openapiFields.add("mobileDeviceModel");
    openapiFields.add("screenName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScreenviewData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScreenviewData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScreenviewData is not found in the empty JSON string", ScreenviewData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScreenviewData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScreenviewData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appName") != null && !jsonObj.get("appName").isJsonNull()) && !jsonObj.get("appName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appName").toString()));
      }
      if ((jsonObj.get("mobileDeviceBranding") != null && !jsonObj.get("mobileDeviceBranding").isJsonNull()) && !jsonObj.get("mobileDeviceBranding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileDeviceBranding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileDeviceBranding").toString()));
      }
      if ((jsonObj.get("mobileDeviceModel") != null && !jsonObj.get("mobileDeviceModel").isJsonNull()) && !jsonObj.get("mobileDeviceModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileDeviceModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileDeviceModel").toString()));
      }
      if ((jsonObj.get("screenName") != null && !jsonObj.get("screenName").isJsonNull()) && !jsonObj.get("screenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScreenviewData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScreenviewData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScreenviewData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScreenviewData.class));

       return (TypeAdapter<T>) new TypeAdapter<ScreenviewData>() {
           @Override
           public void write(JsonWriter out, ScreenviewData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScreenviewData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScreenviewData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScreenviewData
   * @throws IOException if the JSON string is invalid with respect to ScreenviewData
   */
  public static ScreenviewData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScreenviewData.class);
  }

  /**
   * Convert an instance of ScreenviewData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

