/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents all the details pertaining to an event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventData {
  public static final String SERIALIZED_NAME_EVENT_ACTION = "eventAction";
  @SerializedName(SERIALIZED_NAME_EVENT_ACTION)
  private String eventAction;

  public static final String SERIALIZED_NAME_EVENT_CATEGORY = "eventCategory";
  @SerializedName(SERIALIZED_NAME_EVENT_CATEGORY)
  private String eventCategory;

  public static final String SERIALIZED_NAME_EVENT_COUNT = "eventCount";
  @SerializedName(SERIALIZED_NAME_EVENT_COUNT)
  private String eventCount;

  public static final String SERIALIZED_NAME_EVENT_LABEL = "eventLabel";
  @SerializedName(SERIALIZED_NAME_EVENT_LABEL)
  private String eventLabel;

  public static final String SERIALIZED_NAME_EVENT_VALUE = "eventValue";
  @SerializedName(SERIALIZED_NAME_EVENT_VALUE)
  private String eventValue;

  public EventData() {
  }

  public EventData eventAction(String eventAction) {
    this.eventAction = eventAction;
    return this;
  }

  /**
   * Type of interaction with the object. Eg: &#39;play&#39;.
   * @return eventAction
   */
  @javax.annotation.Nullable
  public String getEventAction() {
    return eventAction;
  }

  public void setEventAction(String eventAction) {
    this.eventAction = eventAction;
  }


  public EventData eventCategory(String eventCategory) {
    this.eventCategory = eventCategory;
    return this;
  }

  /**
   * The object on the page that was interacted with. Eg: &#39;Video&#39;.
   * @return eventCategory
   */
  @javax.annotation.Nullable
  public String getEventCategory() {
    return eventCategory;
  }

  public void setEventCategory(String eventCategory) {
    this.eventCategory = eventCategory;
  }


  public EventData eventCount(String eventCount) {
    this.eventCount = eventCount;
    return this;
  }

  /**
   * Number of such events in this activity.
   * @return eventCount
   */
  @javax.annotation.Nullable
  public String getEventCount() {
    return eventCount;
  }

  public void setEventCount(String eventCount) {
    this.eventCount = eventCount;
  }


  public EventData eventLabel(String eventLabel) {
    this.eventLabel = eventLabel;
    return this;
  }

  /**
   * Label attached with the event.
   * @return eventLabel
   */
  @javax.annotation.Nullable
  public String getEventLabel() {
    return eventLabel;
  }

  public void setEventLabel(String eventLabel) {
    this.eventLabel = eventLabel;
  }


  public EventData eventValue(String eventValue) {
    this.eventValue = eventValue;
    return this;
  }

  /**
   * Numeric value associated with the event.
   * @return eventValue
   */
  @javax.annotation.Nullable
  public String getEventValue() {
    return eventValue;
  }

  public void setEventValue(String eventValue) {
    this.eventValue = eventValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventData eventData = (EventData) o;
    return Objects.equals(this.eventAction, eventData.eventAction) &&
        Objects.equals(this.eventCategory, eventData.eventCategory) &&
        Objects.equals(this.eventCount, eventData.eventCount) &&
        Objects.equals(this.eventLabel, eventData.eventLabel) &&
        Objects.equals(this.eventValue, eventData.eventValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventAction, eventCategory, eventCount, eventLabel, eventValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventData {\n");
    sb.append("    eventAction: ").append(toIndentedString(eventAction)).append("\n");
    sb.append("    eventCategory: ").append(toIndentedString(eventCategory)).append("\n");
    sb.append("    eventCount: ").append(toIndentedString(eventCount)).append("\n");
    sb.append("    eventLabel: ").append(toIndentedString(eventLabel)).append("\n");
    sb.append("    eventValue: ").append(toIndentedString(eventValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventAction");
    openapiFields.add("eventCategory");
    openapiFields.add("eventCount");
    openapiFields.add("eventLabel");
    openapiFields.add("eventValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventData is not found in the empty JSON string", EventData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eventAction") != null && !jsonObj.get("eventAction").isJsonNull()) && !jsonObj.get("eventAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventAction").toString()));
      }
      if ((jsonObj.get("eventCategory") != null && !jsonObj.get("eventCategory").isJsonNull()) && !jsonObj.get("eventCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventCategory").toString()));
      }
      if ((jsonObj.get("eventCount") != null && !jsonObj.get("eventCount").isJsonNull()) && !jsonObj.get("eventCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventCount").toString()));
      }
      if ((jsonObj.get("eventLabel") != null && !jsonObj.get("eventLabel").isJsonNull()) && !jsonObj.get("eventLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventLabel").toString()));
      }
      if ((jsonObj.get("eventValue") != null && !jsonObj.get("eventValue").isJsonNull()) && !jsonObj.get("eventValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventData.class));

       return (TypeAdapter<T>) new TypeAdapter<EventData>() {
           @Override
           public void write(JsonWriter out, EventData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventData
   * @throws IOException if the JSON string is invalid with respect to EventData
   */
  public static EventData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventData.class);
  }

  /**
   * Convert an instance of EventData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

