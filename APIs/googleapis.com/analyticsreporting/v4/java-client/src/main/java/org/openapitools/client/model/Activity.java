/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomDimension;
import org.openapitools.client.model.EcommerceData;
import org.openapitools.client.model.EventData;
import org.openapitools.client.model.GoalSetData;
import org.openapitools.client.model.PageviewData;
import org.openapitools.client.model.ScreenviewData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An Activity represents data for an activity of a user. Note that an Activity is different from a hit. A hit might result in multiple Activity&#39;s. For example, if a hit includes a transaction and a goal completion, there will be two Activity protos for this hit, one for ECOMMERCE and one for GOAL. Conversely, multiple hits can also construct one Activity. In classic e-commerce, data for one transaction might be sent through multiple hits. These hits will be merged into one ECOMMERCE Activity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Activity {
  public static final String SERIALIZED_NAME_ACTIVITY_TIME = "activityTime";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TIME)
  private String activityTime;

  /**
   * Type of this activity.
   */
  @JsonAdapter(ActivityTypeEnum.Adapter.class)
  public enum ActivityTypeEnum {
    ACTIVITY_TYPE_UNSPECIFIED("ACTIVITY_TYPE_UNSPECIFIED"),
    
    PAGEVIEW("PAGEVIEW"),
    
    SCREENVIEW("SCREENVIEW"),
    
    GOAL("GOAL"),
    
    ECOMMERCE("ECOMMERCE"),
    
    EVENT("EVENT");

    private String value;

    ActivityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActivityTypeEnum fromValue(String value) {
      for (ActivityTypeEnum b : ActivityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActivityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActivityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActivityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActivityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActivityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVITY_TYPE = "activityType";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPE)
  private ActivityTypeEnum activityType;

  public static final String SERIALIZED_NAME_APPVIEW = "appview";
  @SerializedName(SERIALIZED_NAME_APPVIEW)
  private ScreenviewData appview;

  public static final String SERIALIZED_NAME_CAMPAIGN = "campaign";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN)
  private String campaign;

  public static final String SERIALIZED_NAME_CHANNEL_GROUPING = "channelGrouping";
  @SerializedName(SERIALIZED_NAME_CHANNEL_GROUPING)
  private String channelGrouping;

  public static final String SERIALIZED_NAME_CUSTOM_DIMENSION = "customDimension";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DIMENSION)
  private List<CustomDimension> customDimension = new ArrayList<>();

  public static final String SERIALIZED_NAME_ECOMMERCE = "ecommerce";
  @SerializedName(SERIALIZED_NAME_ECOMMERCE)
  private EcommerceData ecommerce;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private EventData event;

  public static final String SERIALIZED_NAME_GOALS = "goals";
  @SerializedName(SERIALIZED_NAME_GOALS)
  private GoalSetData goals;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_KEYWORD = "keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  public static final String SERIALIZED_NAME_LANDING_PAGE_PATH = "landingPagePath";
  @SerializedName(SERIALIZED_NAME_LANDING_PAGE_PATH)
  private String landingPagePath;

  public static final String SERIALIZED_NAME_MEDIUM = "medium";
  @SerializedName(SERIALIZED_NAME_MEDIUM)
  private String medium;

  public static final String SERIALIZED_NAME_PAGEVIEW = "pageview";
  @SerializedName(SERIALIZED_NAME_PAGEVIEW)
  private PageviewData pageview;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public Activity() {
  }

  public Activity activityTime(String activityTime) {
    this.activityTime = activityTime;
    return this;
  }

  /**
   * Timestamp of the activity. If activities for a visit cross midnight and occur in two separate dates, then two sessions (one per date) share the session identifier. For example, say session ID 113472 has activity within 2019-08-20, and session ID 243742 has activity within 2019-08-25 and 2019-08-26. Session ID 113472 is one session, and session ID 243742 is two sessions.
   * @return activityTime
   */
  @javax.annotation.Nullable
  public String getActivityTime() {
    return activityTime;
  }

  public void setActivityTime(String activityTime) {
    this.activityTime = activityTime;
  }


  public Activity activityType(ActivityTypeEnum activityType) {
    this.activityType = activityType;
    return this;
  }

  /**
   * Type of this activity.
   * @return activityType
   */
  @javax.annotation.Nullable
  public ActivityTypeEnum getActivityType() {
    return activityType;
  }

  public void setActivityType(ActivityTypeEnum activityType) {
    this.activityType = activityType;
  }


  public Activity appview(ScreenviewData appview) {
    this.appview = appview;
    return this;
  }

  /**
   * Get appview
   * @return appview
   */
  @javax.annotation.Nullable
  public ScreenviewData getAppview() {
    return appview;
  }

  public void setAppview(ScreenviewData appview) {
    this.appview = appview;
  }


  public Activity campaign(String campaign) {
    this.campaign = campaign;
    return this;
  }

  /**
   * For manual campaign tracking, it is the value of the utm_campaign campaign tracking parameter. For AdWords autotagging, it is the name(s) of the online ad campaign(s) you use for the property. If you use neither, its value is (not set).
   * @return campaign
   */
  @javax.annotation.Nullable
  public String getCampaign() {
    return campaign;
  }

  public void setCampaign(String campaign) {
    this.campaign = campaign;
  }


  public Activity channelGrouping(String channelGrouping) {
    this.channelGrouping = channelGrouping;
    return this;
  }

  /**
   * The Channel Group associated with an end user&#39;s session for this View (defined by the View&#39;s Channel Groupings).
   * @return channelGrouping
   */
  @javax.annotation.Nullable
  public String getChannelGrouping() {
    return channelGrouping;
  }

  public void setChannelGrouping(String channelGrouping) {
    this.channelGrouping = channelGrouping;
  }


  public Activity customDimension(List<CustomDimension> customDimension) {
    this.customDimension = customDimension;
    return this;
  }

  public Activity addCustomDimensionItem(CustomDimension customDimensionItem) {
    if (this.customDimension == null) {
      this.customDimension = new ArrayList<>();
    }
    this.customDimension.add(customDimensionItem);
    return this;
  }

  /**
   * A list of all custom dimensions associated with this activity.
   * @return customDimension
   */
  @javax.annotation.Nullable
  public List<CustomDimension> getCustomDimension() {
    return customDimension;
  }

  public void setCustomDimension(List<CustomDimension> customDimension) {
    this.customDimension = customDimension;
  }


  public Activity ecommerce(EcommerceData ecommerce) {
    this.ecommerce = ecommerce;
    return this;
  }

  /**
   * Get ecommerce
   * @return ecommerce
   */
  @javax.annotation.Nullable
  public EcommerceData getEcommerce() {
    return ecommerce;
  }

  public void setEcommerce(EcommerceData ecommerce) {
    this.ecommerce = ecommerce;
  }


  public Activity event(EventData event) {
    this.event = event;
    return this;
  }

  /**
   * Get event
   * @return event
   */
  @javax.annotation.Nullable
  public EventData getEvent() {
    return event;
  }

  public void setEvent(EventData event) {
    this.event = event;
  }


  public Activity goals(GoalSetData goals) {
    this.goals = goals;
    return this;
  }

  /**
   * Get goals
   * @return goals
   */
  @javax.annotation.Nullable
  public GoalSetData getGoals() {
    return goals;
  }

  public void setGoals(GoalSetData goals) {
    this.goals = goals;
  }


  public Activity hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * The hostname from which the tracking request was made.
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public Activity keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  /**
   * For manual campaign tracking, it is the value of the utm_term campaign tracking parameter. For AdWords traffic, it contains the best matching targeting criteria. For the display network, where multiple targeting criteria could have caused the ad to show up, it returns the best matching targeting criteria as selected by Ads. This could be display_keyword, site placement, boomuserlist, user_interest, age, or gender. Otherwise its value is (not set).
   * @return keyword
   */
  @javax.annotation.Nullable
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }


  public Activity landingPagePath(String landingPagePath) {
    this.landingPagePath = landingPagePath;
    return this;
  }

  /**
   * The first page in users&#39; sessions, or the landing page.
   * @return landingPagePath
   */
  @javax.annotation.Nullable
  public String getLandingPagePath() {
    return landingPagePath;
  }

  public void setLandingPagePath(String landingPagePath) {
    this.landingPagePath = landingPagePath;
  }


  public Activity medium(String medium) {
    this.medium = medium;
    return this;
  }

  /**
   * The type of referrals. For manual campaign tracking, it is the value of the utm_medium campaign tracking parameter. For AdWords autotagging, it is cpc. If users came from a search engine detected by Google Analytics, it is organic. If the referrer is not a search engine, it is referral. If users came directly to the property and document.referrer is empty, its value is (none).
   * @return medium
   */
  @javax.annotation.Nullable
  public String getMedium() {
    return medium;
  }

  public void setMedium(String medium) {
    this.medium = medium;
  }


  public Activity pageview(PageviewData pageview) {
    this.pageview = pageview;
    return this;
  }

  /**
   * Get pageview
   * @return pageview
   */
  @javax.annotation.Nullable
  public PageviewData getPageview() {
    return pageview;
  }

  public void setPageview(PageviewData pageview) {
    this.pageview = pageview;
  }


  public Activity source(String source) {
    this.source = source;
    return this;
  }

  /**
   * The source of referrals. For manual campaign tracking, it is the value of the utm_source campaign tracking parameter. For AdWords autotagging, it is google. If you use neither, it is the domain of the source (e.g., document.referrer) referring the users. It may also contain a port address. If users arrived without a referrer, its value is (direct).
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Activity activity = (Activity) o;
    return Objects.equals(this.activityTime, activity.activityTime) &&
        Objects.equals(this.activityType, activity.activityType) &&
        Objects.equals(this.appview, activity.appview) &&
        Objects.equals(this.campaign, activity.campaign) &&
        Objects.equals(this.channelGrouping, activity.channelGrouping) &&
        Objects.equals(this.customDimension, activity.customDimension) &&
        Objects.equals(this.ecommerce, activity.ecommerce) &&
        Objects.equals(this.event, activity.event) &&
        Objects.equals(this.goals, activity.goals) &&
        Objects.equals(this.hostname, activity.hostname) &&
        Objects.equals(this.keyword, activity.keyword) &&
        Objects.equals(this.landingPagePath, activity.landingPagePath) &&
        Objects.equals(this.medium, activity.medium) &&
        Objects.equals(this.pageview, activity.pageview) &&
        Objects.equals(this.source, activity.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityTime, activityType, appview, campaign, channelGrouping, customDimension, ecommerce, event, goals, hostname, keyword, landingPagePath, medium, pageview, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Activity {\n");
    sb.append("    activityTime: ").append(toIndentedString(activityTime)).append("\n");
    sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
    sb.append("    appview: ").append(toIndentedString(appview)).append("\n");
    sb.append("    campaign: ").append(toIndentedString(campaign)).append("\n");
    sb.append("    channelGrouping: ").append(toIndentedString(channelGrouping)).append("\n");
    sb.append("    customDimension: ").append(toIndentedString(customDimension)).append("\n");
    sb.append("    ecommerce: ").append(toIndentedString(ecommerce)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    goals: ").append(toIndentedString(goals)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    landingPagePath: ").append(toIndentedString(landingPagePath)).append("\n");
    sb.append("    medium: ").append(toIndentedString(medium)).append("\n");
    sb.append("    pageview: ").append(toIndentedString(pageview)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityTime");
    openapiFields.add("activityType");
    openapiFields.add("appview");
    openapiFields.add("campaign");
    openapiFields.add("channelGrouping");
    openapiFields.add("customDimension");
    openapiFields.add("ecommerce");
    openapiFields.add("event");
    openapiFields.add("goals");
    openapiFields.add("hostname");
    openapiFields.add("keyword");
    openapiFields.add("landingPagePath");
    openapiFields.add("medium");
    openapiFields.add("pageview");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Activity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Activity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Activity is not found in the empty JSON string", Activity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Activity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Activity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activityTime") != null && !jsonObj.get("activityTime").isJsonNull()) && !jsonObj.get("activityTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityTime").toString()));
      }
      if ((jsonObj.get("activityType") != null && !jsonObj.get("activityType").isJsonNull()) && !jsonObj.get("activityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityType").toString()));
      }
      // validate the optional field `activityType`
      if (jsonObj.get("activityType") != null && !jsonObj.get("activityType").isJsonNull()) {
        ActivityTypeEnum.validateJsonElement(jsonObj.get("activityType"));
      }
      // validate the optional field `appview`
      if (jsonObj.get("appview") != null && !jsonObj.get("appview").isJsonNull()) {
        ScreenviewData.validateJsonElement(jsonObj.get("appview"));
      }
      if ((jsonObj.get("campaign") != null && !jsonObj.get("campaign").isJsonNull()) && !jsonObj.get("campaign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaign").toString()));
      }
      if ((jsonObj.get("channelGrouping") != null && !jsonObj.get("channelGrouping").isJsonNull()) && !jsonObj.get("channelGrouping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelGrouping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelGrouping").toString()));
      }
      if (jsonObj.get("customDimension") != null && !jsonObj.get("customDimension").isJsonNull()) {
        JsonArray jsonArraycustomDimension = jsonObj.getAsJsonArray("customDimension");
        if (jsonArraycustomDimension != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customDimension").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customDimension` to be an array in the JSON string but got `%s`", jsonObj.get("customDimension").toString()));
          }

          // validate the optional field `customDimension` (array)
          for (int i = 0; i < jsonArraycustomDimension.size(); i++) {
            CustomDimension.validateJsonElement(jsonArraycustomDimension.get(i));
          };
        }
      }
      // validate the optional field `ecommerce`
      if (jsonObj.get("ecommerce") != null && !jsonObj.get("ecommerce").isJsonNull()) {
        EcommerceData.validateJsonElement(jsonObj.get("ecommerce"));
      }
      // validate the optional field `event`
      if (jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) {
        EventData.validateJsonElement(jsonObj.get("event"));
      }
      // validate the optional field `goals`
      if (jsonObj.get("goals") != null && !jsonObj.get("goals").isJsonNull()) {
        GoalSetData.validateJsonElement(jsonObj.get("goals"));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("keyword") != null && !jsonObj.get("keyword").isJsonNull()) && !jsonObj.get("keyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyword").toString()));
      }
      if ((jsonObj.get("landingPagePath") != null && !jsonObj.get("landingPagePath").isJsonNull()) && !jsonObj.get("landingPagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `landingPagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("landingPagePath").toString()));
      }
      if ((jsonObj.get("medium") != null && !jsonObj.get("medium").isJsonNull()) && !jsonObj.get("medium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medium").toString()));
      }
      // validate the optional field `pageview`
      if (jsonObj.get("pageview") != null && !jsonObj.get("pageview").isJsonNull()) {
        PageviewData.validateJsonElement(jsonObj.get("pageview"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Activity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Activity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Activity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Activity.class));

       return (TypeAdapter<T>) new TypeAdapter<Activity>() {
           @Override
           public void write(JsonWriter out, Activity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Activity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Activity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Activity
   * @throws IOException if the JSON string is invalid with respect to Activity
   */
  public static Activity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Activity.class);
  }

  /**
   * Convert an instance of Activity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

