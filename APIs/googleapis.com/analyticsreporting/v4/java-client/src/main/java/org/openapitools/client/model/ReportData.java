/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateRangeValues;
import org.openapitools.client.model.ReportRow;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data part of the report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportData {
  public static final String SERIALIZED_NAME_DATA_LAST_REFRESHED = "dataLastRefreshed";
  @SerializedName(SERIALIZED_NAME_DATA_LAST_REFRESHED)
  private String dataLastRefreshed;

  public static final String SERIALIZED_NAME_EMPTY_REASON = "emptyReason";
  @SerializedName(SERIALIZED_NAME_EMPTY_REASON)
  private String emptyReason;

  public static final String SERIALIZED_NAME_IS_DATA_GOLDEN = "isDataGolden";
  @SerializedName(SERIALIZED_NAME_IS_DATA_GOLDEN)
  private Boolean isDataGolden;

  public static final String SERIALIZED_NAME_MAXIMUMS = "maximums";
  @SerializedName(SERIALIZED_NAME_MAXIMUMS)
  private List<DateRangeValues> maximums = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINIMUMS = "minimums";
  @SerializedName(SERIALIZED_NAME_MINIMUMS)
  private List<DateRangeValues> minimums = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROW_COUNT = "rowCount";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private Integer rowCount;

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<ReportRow> rows = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAMPLES_READ_COUNTS = "samplesReadCounts";
  @SerializedName(SERIALIZED_NAME_SAMPLES_READ_COUNTS)
  private List<String> samplesReadCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAMPLING_SPACE_SIZES = "samplingSpaceSizes";
  @SerializedName(SERIALIZED_NAME_SAMPLING_SPACE_SIZES)
  private List<String> samplingSpaceSizes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTALS = "totals";
  @SerializedName(SERIALIZED_NAME_TOTALS)
  private List<DateRangeValues> totals = new ArrayList<>();

  public ReportData() {
  }

  public ReportData dataLastRefreshed(String dataLastRefreshed) {
    this.dataLastRefreshed = dataLastRefreshed;
    return this;
  }

  /**
   * The last time the data in the report was refreshed. All the hits received before this timestamp are included in the calculation of the report.
   * @return dataLastRefreshed
   */
  @javax.annotation.Nullable
  public String getDataLastRefreshed() {
    return dataLastRefreshed;
  }

  public void setDataLastRefreshed(String dataLastRefreshed) {
    this.dataLastRefreshed = dataLastRefreshed;
  }


  public ReportData emptyReason(String emptyReason) {
    this.emptyReason = emptyReason;
    return this;
  }

  /**
   * If empty reason is specified, the report is empty for this reason.
   * @return emptyReason
   */
  @javax.annotation.Nullable
  public String getEmptyReason() {
    return emptyReason;
  }

  public void setEmptyReason(String emptyReason) {
    this.emptyReason = emptyReason;
  }


  public ReportData isDataGolden(Boolean isDataGolden) {
    this.isDataGolden = isDataGolden;
    return this;
  }

  /**
   * Indicates if response to this request is golden or not. Data is golden when the exact same request will not produce any new results if asked at a later point in time.
   * @return isDataGolden
   */
  @javax.annotation.Nullable
  public Boolean getIsDataGolden() {
    return isDataGolden;
  }

  public void setIsDataGolden(Boolean isDataGolden) {
    this.isDataGolden = isDataGolden;
  }


  public ReportData maximums(List<DateRangeValues> maximums) {
    this.maximums = maximums;
    return this;
  }

  public ReportData addMaximumsItem(DateRangeValues maximumsItem) {
    if (this.maximums == null) {
      this.maximums = new ArrayList<>();
    }
    this.maximums.add(maximumsItem);
    return this;
  }

  /**
   * Minimum and maximum values seen over all matching rows. These are both empty when &#x60;hideValueRanges&#x60; in the request is false, or when rowCount is zero.
   * @return maximums
   */
  @javax.annotation.Nullable
  public List<DateRangeValues> getMaximums() {
    return maximums;
  }

  public void setMaximums(List<DateRangeValues> maximums) {
    this.maximums = maximums;
  }


  public ReportData minimums(List<DateRangeValues> minimums) {
    this.minimums = minimums;
    return this;
  }

  public ReportData addMinimumsItem(DateRangeValues minimumsItem) {
    if (this.minimums == null) {
      this.minimums = new ArrayList<>();
    }
    this.minimums.add(minimumsItem);
    return this;
  }

  /**
   * Minimum and maximum values seen over all matching rows. These are both empty when &#x60;hideValueRanges&#x60; in the request is false, or when rowCount is zero.
   * @return minimums
   */
  @javax.annotation.Nullable
  public List<DateRangeValues> getMinimums() {
    return minimums;
  }

  public void setMinimums(List<DateRangeValues> minimums) {
    this.minimums = minimums;
  }


  public ReportData rowCount(Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  /**
   * Total number of matching rows for this query.
   * @return rowCount
   */
  @javax.annotation.Nullable
  public Integer getRowCount() {
    return rowCount;
  }

  public void setRowCount(Integer rowCount) {
    this.rowCount = rowCount;
  }


  public ReportData rows(List<ReportRow> rows) {
    this.rows = rows;
    return this;
  }

  public ReportData addRowsItem(ReportRow rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * There&#39;s one ReportRow for every unique combination of dimensions.
   * @return rows
   */
  @javax.annotation.Nullable
  public List<ReportRow> getRows() {
    return rows;
  }

  public void setRows(List<ReportRow> rows) {
    this.rows = rows;
  }


  public ReportData samplesReadCounts(List<String> samplesReadCounts) {
    this.samplesReadCounts = samplesReadCounts;
    return this;
  }

  public ReportData addSamplesReadCountsItem(String samplesReadCountsItem) {
    if (this.samplesReadCounts == null) {
      this.samplesReadCounts = new ArrayList<>();
    }
    this.samplesReadCounts.add(samplesReadCountsItem);
    return this;
  }

  /**
   * If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples read, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.
   * @return samplesReadCounts
   */
  @javax.annotation.Nullable
  public List<String> getSamplesReadCounts() {
    return samplesReadCounts;
  }

  public void setSamplesReadCounts(List<String> samplesReadCounts) {
    this.samplesReadCounts = samplesReadCounts;
  }


  public ReportData samplingSpaceSizes(List<String> samplingSpaceSizes) {
    this.samplingSpaceSizes = samplingSpaceSizes;
    return this;
  }

  public ReportData addSamplingSpaceSizesItem(String samplingSpaceSizesItem) {
    if (this.samplingSpaceSizes == null) {
      this.samplingSpaceSizes = new ArrayList<>();
    }
    this.samplingSpaceSizes.add(samplingSpaceSizesItem);
    return this;
  }

  /**
   * If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples present, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.
   * @return samplingSpaceSizes
   */
  @javax.annotation.Nullable
  public List<String> getSamplingSpaceSizes() {
    return samplingSpaceSizes;
  }

  public void setSamplingSpaceSizes(List<String> samplingSpaceSizes) {
    this.samplingSpaceSizes = samplingSpaceSizes;
  }


  public ReportData totals(List<DateRangeValues> totals) {
    this.totals = totals;
    return this;
  }

  public ReportData addTotalsItem(DateRangeValues totalsItem) {
    if (this.totals == null) {
      this.totals = new ArrayList<>();
    }
    this.totals.add(totalsItem);
    return this;
  }

  /**
   * For each requested date range, for the set of all rows that match the query, every requested value format gets a total. The total for a value format is computed by first totaling the metrics mentioned in the value format and then evaluating the value format as a scalar expression. E.g., The \&quot;totals\&quot; for &#x60;3 / (ga:sessions + 2)&#x60; we compute &#x60;3 / ((sum of all relevant ga:sessions) + 2)&#x60;. Totals are computed before pagination.
   * @return totals
   */
  @javax.annotation.Nullable
  public List<DateRangeValues> getTotals() {
    return totals;
  }

  public void setTotals(List<DateRangeValues> totals) {
    this.totals = totals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportData reportData = (ReportData) o;
    return Objects.equals(this.dataLastRefreshed, reportData.dataLastRefreshed) &&
        Objects.equals(this.emptyReason, reportData.emptyReason) &&
        Objects.equals(this.isDataGolden, reportData.isDataGolden) &&
        Objects.equals(this.maximums, reportData.maximums) &&
        Objects.equals(this.minimums, reportData.minimums) &&
        Objects.equals(this.rowCount, reportData.rowCount) &&
        Objects.equals(this.rows, reportData.rows) &&
        Objects.equals(this.samplesReadCounts, reportData.samplesReadCounts) &&
        Objects.equals(this.samplingSpaceSizes, reportData.samplingSpaceSizes) &&
        Objects.equals(this.totals, reportData.totals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataLastRefreshed, emptyReason, isDataGolden, maximums, minimums, rowCount, rows, samplesReadCounts, samplingSpaceSizes, totals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportData {\n");
    sb.append("    dataLastRefreshed: ").append(toIndentedString(dataLastRefreshed)).append("\n");
    sb.append("    emptyReason: ").append(toIndentedString(emptyReason)).append("\n");
    sb.append("    isDataGolden: ").append(toIndentedString(isDataGolden)).append("\n");
    sb.append("    maximums: ").append(toIndentedString(maximums)).append("\n");
    sb.append("    minimums: ").append(toIndentedString(minimums)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    samplesReadCounts: ").append(toIndentedString(samplesReadCounts)).append("\n");
    sb.append("    samplingSpaceSizes: ").append(toIndentedString(samplingSpaceSizes)).append("\n");
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataLastRefreshed");
    openapiFields.add("emptyReason");
    openapiFields.add("isDataGolden");
    openapiFields.add("maximums");
    openapiFields.add("minimums");
    openapiFields.add("rowCount");
    openapiFields.add("rows");
    openapiFields.add("samplesReadCounts");
    openapiFields.add("samplingSpaceSizes");
    openapiFields.add("totals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportData is not found in the empty JSON string", ReportData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataLastRefreshed") != null && !jsonObj.get("dataLastRefreshed").isJsonNull()) && !jsonObj.get("dataLastRefreshed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataLastRefreshed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataLastRefreshed").toString()));
      }
      if ((jsonObj.get("emptyReason") != null && !jsonObj.get("emptyReason").isJsonNull()) && !jsonObj.get("emptyReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emptyReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emptyReason").toString()));
      }
      if (jsonObj.get("maximums") != null && !jsonObj.get("maximums").isJsonNull()) {
        JsonArray jsonArraymaximums = jsonObj.getAsJsonArray("maximums");
        if (jsonArraymaximums != null) {
          // ensure the json data is an array
          if (!jsonObj.get("maximums").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `maximums` to be an array in the JSON string but got `%s`", jsonObj.get("maximums").toString()));
          }

          // validate the optional field `maximums` (array)
          for (int i = 0; i < jsonArraymaximums.size(); i++) {
            DateRangeValues.validateJsonElement(jsonArraymaximums.get(i));
          };
        }
      }
      if (jsonObj.get("minimums") != null && !jsonObj.get("minimums").isJsonNull()) {
        JsonArray jsonArrayminimums = jsonObj.getAsJsonArray("minimums");
        if (jsonArrayminimums != null) {
          // ensure the json data is an array
          if (!jsonObj.get("minimums").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `minimums` to be an array in the JSON string but got `%s`", jsonObj.get("minimums").toString()));
          }

          // validate the optional field `minimums` (array)
          for (int i = 0; i < jsonArrayminimums.size(); i++) {
            DateRangeValues.validateJsonElement(jsonArrayminimums.get(i));
          };
        }
      }
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull()) {
        JsonArray jsonArrayrows = jsonObj.getAsJsonArray("rows");
        if (jsonArrayrows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
          }

          // validate the optional field `rows` (array)
          for (int i = 0; i < jsonArrayrows.size(); i++) {
            ReportRow.validateJsonElement(jsonArrayrows.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("samplesReadCounts") != null && !jsonObj.get("samplesReadCounts").isJsonNull() && !jsonObj.get("samplesReadCounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `samplesReadCounts` to be an array in the JSON string but got `%s`", jsonObj.get("samplesReadCounts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("samplingSpaceSizes") != null && !jsonObj.get("samplingSpaceSizes").isJsonNull() && !jsonObj.get("samplingSpaceSizes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `samplingSpaceSizes` to be an array in the JSON string but got `%s`", jsonObj.get("samplingSpaceSizes").toString()));
      }
      if (jsonObj.get("totals") != null && !jsonObj.get("totals").isJsonNull()) {
        JsonArray jsonArraytotals = jsonObj.getAsJsonArray("totals");
        if (jsonArraytotals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("totals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `totals` to be an array in the JSON string but got `%s`", jsonObj.get("totals").toString()));
          }

          // validate the optional field `totals` (array)
          for (int i = 0; i < jsonArraytotals.size(); i++) {
            DateRangeValues.validateJsonElement(jsonArraytotals.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportData.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportData>() {
           @Override
           public void write(JsonWriter out, ReportData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportData
   * @throws IOException if the JSON string is invalid with respect to ReportData
   */
  public static ReportData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportData.class);
  }

  /**
   * Convert an instance of ReportData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

