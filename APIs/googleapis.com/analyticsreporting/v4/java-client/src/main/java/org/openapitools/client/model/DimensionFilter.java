/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dimension filter specifies the filtering options on a dimension.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DimensionFilter {
  public static final String SERIALIZED_NAME_CASE_SENSITIVE = "caseSensitive";
  @SerializedName(SERIALIZED_NAME_CASE_SENSITIVE)
  private Boolean caseSensitive;

  public static final String SERIALIZED_NAME_DIMENSION_NAME = "dimensionName";
  @SerializedName(SERIALIZED_NAME_DIMENSION_NAME)
  private String dimensionName;

  public static final String SERIALIZED_NAME_EXPRESSIONS = "expressions";
  @SerializedName(SERIALIZED_NAME_EXPRESSIONS)
  private List<String> expressions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOT = "not";
  @SerializedName(SERIALIZED_NAME_NOT)
  private Boolean not;

  /**
   * How to match the dimension to the expression. The default is REGEXP.
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    OPERATOR_UNSPECIFIED("OPERATOR_UNSPECIFIED"),
    
    REGEXP("REGEXP"),
    
    BEGINS_WITH("BEGINS_WITH"),
    
    ENDS_WITH("ENDS_WITH"),
    
    PARTIAL("PARTIAL"),
    
    EXACT("EXACT"),
    
    NUMERIC_EQUAL("NUMERIC_EQUAL"),
    
    NUMERIC_GREATER_THAN("NUMERIC_GREATER_THAN"),
    
    NUMERIC_LESS_THAN("NUMERIC_LESS_THAN"),
    
    IN_LIST("IN_LIST");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String value) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private OperatorEnum operator;

  public DimensionFilter() {
  }

  public DimensionFilter caseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
    return this;
  }

  /**
   * Should the match be case sensitive? Default is false.
   * @return caseSensitive
   */
  @javax.annotation.Nullable
  public Boolean getCaseSensitive() {
    return caseSensitive;
  }

  public void setCaseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
  }


  public DimensionFilter dimensionName(String dimensionName) {
    this.dimensionName = dimensionName;
    return this;
  }

  /**
   * The dimension to filter on. A DimensionFilter must contain a dimension.
   * @return dimensionName
   */
  @javax.annotation.Nullable
  public String getDimensionName() {
    return dimensionName;
  }

  public void setDimensionName(String dimensionName) {
    this.dimensionName = dimensionName;
  }


  public DimensionFilter expressions(List<String> expressions) {
    this.expressions = expressions;
    return this;
  }

  public DimensionFilter addExpressionsItem(String expressionsItem) {
    if (this.expressions == null) {
      this.expressions = new ArrayList<>();
    }
    this.expressions.add(expressionsItem);
    return this;
  }

  /**
   * Strings or regular expression to match against. Only the first value of the list is used for comparison unless the operator is &#x60;IN_LIST&#x60;. If &#x60;IN_LIST&#x60; operator, then the entire list is used to filter the dimensions as explained in the description of the &#x60;IN_LIST&#x60; operator.
   * @return expressions
   */
  @javax.annotation.Nullable
  public List<String> getExpressions() {
    return expressions;
  }

  public void setExpressions(List<String> expressions) {
    this.expressions = expressions;
  }


  public DimensionFilter not(Boolean not) {
    this.not = not;
    return this;
  }

  /**
   * Logical &#x60;NOT&#x60; operator. If this boolean is set to true, then the matching dimension values will be excluded in the report. The default is false.
   * @return not
   */
  @javax.annotation.Nullable
  public Boolean getNot() {
    return not;
  }

  public void setNot(Boolean not) {
    this.not = not;
  }


  public DimensionFilter operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

  /**
   * How to match the dimension to the expression. The default is REGEXP.
   * @return operator
   */
  @javax.annotation.Nullable
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DimensionFilter dimensionFilter = (DimensionFilter) o;
    return Objects.equals(this.caseSensitive, dimensionFilter.caseSensitive) &&
        Objects.equals(this.dimensionName, dimensionFilter.dimensionName) &&
        Objects.equals(this.expressions, dimensionFilter.expressions) &&
        Objects.equals(this.not, dimensionFilter.not) &&
        Objects.equals(this.operator, dimensionFilter.operator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseSensitive, dimensionName, expressions, not, operator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DimensionFilter {\n");
    sb.append("    caseSensitive: ").append(toIndentedString(caseSensitive)).append("\n");
    sb.append("    dimensionName: ").append(toIndentedString(dimensionName)).append("\n");
    sb.append("    expressions: ").append(toIndentedString(expressions)).append("\n");
    sb.append("    not: ").append(toIndentedString(not)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caseSensitive");
    openapiFields.add("dimensionName");
    openapiFields.add("expressions");
    openapiFields.add("not");
    openapiFields.add("operator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DimensionFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DimensionFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DimensionFilter is not found in the empty JSON string", DimensionFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DimensionFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DimensionFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dimensionName") != null && !jsonObj.get("dimensionName").isJsonNull()) && !jsonObj.get("dimensionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dimensionName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("expressions") != null && !jsonObj.get("expressions").isJsonNull() && !jsonObj.get("expressions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `expressions` to be an array in the JSON string but got `%s`", jsonObj.get("expressions").toString()));
      }
      if ((jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) && !jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      // validate the optional field `operator`
      if (jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) {
        OperatorEnum.validateJsonElement(jsonObj.get("operator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DimensionFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DimensionFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DimensionFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DimensionFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<DimensionFilter>() {
           @Override
           public void write(JsonWriter out, DimensionFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DimensionFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DimensionFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DimensionFilter
   * @throws IOException if the JSON string is invalid with respect to DimensionFilter
   */
  public static DimensionFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DimensionFilter.class);
  }

  /**
   * Convert an instance of DimensionFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

