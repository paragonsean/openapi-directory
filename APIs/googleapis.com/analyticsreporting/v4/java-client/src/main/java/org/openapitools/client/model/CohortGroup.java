/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Cohort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a cohort group. For example: \&quot;cohortGroup\&quot;: { \&quot;cohorts\&quot;: [{ \&quot;name\&quot;: \&quot;cohort 1\&quot;, \&quot;type\&quot;: \&quot;FIRST_VISIT_DATE\&quot;, \&quot;dateRange\&quot;: { \&quot;startDate\&quot;: \&quot;2015-08-01\&quot;, \&quot;endDate\&quot;: \&quot;2015-08-01\&quot; } },{ \&quot;name\&quot;: \&quot;cohort 2\&quot; \&quot;type\&quot;: \&quot;FIRST_VISIT_DATE\&quot; \&quot;dateRange\&quot;: { \&quot;startDate\&quot;: \&quot;2015-07-01\&quot;, \&quot;endDate\&quot;: \&quot;2015-07-01\&quot; } }] }
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CohortGroup {
  public static final String SERIALIZED_NAME_COHORTS = "cohorts";
  @SerializedName(SERIALIZED_NAME_COHORTS)
  private List<Cohort> cohorts = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIFETIME_VALUE = "lifetimeValue";
  @SerializedName(SERIALIZED_NAME_LIFETIME_VALUE)
  private Boolean lifetimeValue;

  public CohortGroup() {
  }

  public CohortGroup cohorts(List<Cohort> cohorts) {
    this.cohorts = cohorts;
    return this;
  }

  public CohortGroup addCohortsItem(Cohort cohortsItem) {
    if (this.cohorts == null) {
      this.cohorts = new ArrayList<>();
    }
    this.cohorts.add(cohortsItem);
    return this;
  }

  /**
   * The definition for the cohort.
   * @return cohorts
   */
  @javax.annotation.Nullable
  public List<Cohort> getCohorts() {
    return cohorts;
  }

  public void setCohorts(List<Cohort> cohorts) {
    this.cohorts = cohorts;
  }


  public CohortGroup lifetimeValue(Boolean lifetimeValue) {
    this.lifetimeValue = lifetimeValue;
    return this;
  }

  /**
   * Enable Life Time Value (LTV). LTV measures lifetime value for users acquired through different channels. Please see: [Cohort Analysis](https://support.google.com/analytics/answer/6074676) and [Lifetime Value](https://support.google.com/analytics/answer/6182550) If the value of lifetimeValue is false: - The metric values are similar to the values in the web interface cohort report. - The cohort definition date ranges must be aligned to the calendar week and month. i.e. while requesting &#x60;ga:cohortNthWeek&#x60; the &#x60;startDate&#x60; in the cohort definition should be a Sunday and the &#x60;endDate&#x60; should be the following Saturday, and for &#x60;ga:cohortNthMonth&#x60;, the &#x60;startDate&#x60; should be the 1st of the month and &#x60;endDate&#x60; should be the last day of the month. When the lifetimeValue is true: - The metric values will correspond to the values in the web interface LifeTime value report. - The Lifetime Value report shows you how user value (Revenue) and engagement (Appviews, Goal Completions, Sessions, and Session Duration) grow during the 90 days after a user is acquired. - The metrics are calculated as a cumulative average per user per the time increment. - The cohort definition date ranges need not be aligned to the calendar week and month boundaries. - The &#x60;viewId&#x60; must be an [app view ID](https://support.google.com/analytics/answer/2649553#WebVersusAppViews)
   * @return lifetimeValue
   */
  @javax.annotation.Nullable
  public Boolean getLifetimeValue() {
    return lifetimeValue;
  }

  public void setLifetimeValue(Boolean lifetimeValue) {
    this.lifetimeValue = lifetimeValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CohortGroup cohortGroup = (CohortGroup) o;
    return Objects.equals(this.cohorts, cohortGroup.cohorts) &&
        Objects.equals(this.lifetimeValue, cohortGroup.lifetimeValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cohorts, lifetimeValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CohortGroup {\n");
    sb.append("    cohorts: ").append(toIndentedString(cohorts)).append("\n");
    sb.append("    lifetimeValue: ").append(toIndentedString(lifetimeValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cohorts");
    openapiFields.add("lifetimeValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CohortGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CohortGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CohortGroup is not found in the empty JSON string", CohortGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CohortGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CohortGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cohorts") != null && !jsonObj.get("cohorts").isJsonNull()) {
        JsonArray jsonArraycohorts = jsonObj.getAsJsonArray("cohorts");
        if (jsonArraycohorts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cohorts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cohorts` to be an array in the JSON string but got `%s`", jsonObj.get("cohorts").toString()));
          }

          // validate the optional field `cohorts` (array)
          for (int i = 0; i < jsonArraycohorts.size(); i++) {
            Cohort.validateJsonElement(jsonArraycohorts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CohortGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CohortGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CohortGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CohortGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<CohortGroup>() {
           @Override
           public void write(JsonWriter out, CohortGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CohortGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CohortGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CohortGroup
   * @throws IOException if the JSON string is invalid with respect to CohortGroup
   */
  public static CohortGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CohortGroup.class);
  }

  /**
   * Convert an instance of CohortGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

