/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProductData;
import org.openapitools.client.model.TransactionData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * E-commerce details associated with the user activity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EcommerceData {
  /**
   * Action associated with this e-commerce action.
   */
  @JsonAdapter(ActionTypeEnum.Adapter.class)
  public enum ActionTypeEnum {
    UNKNOWN("UNKNOWN"),
    
    CLICK("CLICK"),
    
    DETAILS_VIEW("DETAILS_VIEW"),
    
    ADD_TO_CART("ADD_TO_CART"),
    
    REMOVE_FROM_CART("REMOVE_FROM_CART"),
    
    CHECKOUT("CHECKOUT"),
    
    PAYMENT("PAYMENT"),
    
    REFUND("REFUND"),
    
    CHECKOUT_OPTION("CHECKOUT_OPTION");

    private String value;

    ActionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionTypeEnum fromValue(String value) {
      for (ActionTypeEnum b : ActionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_TYPE = "actionType";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  private ActionTypeEnum actionType;

  /**
   * The type of this e-commerce activity.
   */
  @JsonAdapter(EcommerceTypeEnum.Adapter.class)
  public enum EcommerceTypeEnum {
    ECOMMERCE_TYPE_UNSPECIFIED("ECOMMERCE_TYPE_UNSPECIFIED"),
    
    CLASSIC("CLASSIC"),
    
    ENHANCED("ENHANCED");

    private String value;

    EcommerceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EcommerceTypeEnum fromValue(String value) {
      for (EcommerceTypeEnum b : EcommerceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EcommerceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EcommerceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EcommerceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EcommerceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EcommerceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ECOMMERCE_TYPE = "ecommerceType";
  @SerializedName(SERIALIZED_NAME_ECOMMERCE_TYPE)
  private EcommerceTypeEnum ecommerceType;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<ProductData> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private TransactionData transaction;

  public EcommerceData() {
  }

  public EcommerceData actionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
    return this;
  }

  /**
   * Action associated with this e-commerce action.
   * @return actionType
   */
  @javax.annotation.Nullable
  public ActionTypeEnum getActionType() {
    return actionType;
  }

  public void setActionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
  }


  public EcommerceData ecommerceType(EcommerceTypeEnum ecommerceType) {
    this.ecommerceType = ecommerceType;
    return this;
  }

  /**
   * The type of this e-commerce activity.
   * @return ecommerceType
   */
  @javax.annotation.Nullable
  public EcommerceTypeEnum getEcommerceType() {
    return ecommerceType;
  }

  public void setEcommerceType(EcommerceTypeEnum ecommerceType) {
    this.ecommerceType = ecommerceType;
  }


  public EcommerceData products(List<ProductData> products) {
    this.products = products;
    return this;
  }

  public EcommerceData addProductsItem(ProductData productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * Details of the products in this transaction.
   * @return products
   */
  @javax.annotation.Nullable
  public List<ProductData> getProducts() {
    return products;
  }

  public void setProducts(List<ProductData> products) {
    this.products = products;
  }


  public EcommerceData transaction(TransactionData transaction) {
    this.transaction = transaction;
    return this;
  }

  /**
   * Get transaction
   * @return transaction
   */
  @javax.annotation.Nullable
  public TransactionData getTransaction() {
    return transaction;
  }

  public void setTransaction(TransactionData transaction) {
    this.transaction = transaction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcommerceData ecommerceData = (EcommerceData) o;
    return Objects.equals(this.actionType, ecommerceData.actionType) &&
        Objects.equals(this.ecommerceType, ecommerceData.ecommerceType) &&
        Objects.equals(this.products, ecommerceData.products) &&
        Objects.equals(this.transaction, ecommerceData.transaction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionType, ecommerceType, products, transaction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcommerceData {\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    ecommerceType: ").append(toIndentedString(ecommerceType)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionType");
    openapiFields.add("ecommerceType");
    openapiFields.add("products");
    openapiFields.add("transaction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EcommerceData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EcommerceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EcommerceData is not found in the empty JSON string", EcommerceData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EcommerceData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EcommerceData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionType") != null && !jsonObj.get("actionType").isJsonNull()) && !jsonObj.get("actionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionType").toString()));
      }
      // validate the optional field `actionType`
      if (jsonObj.get("actionType") != null && !jsonObj.get("actionType").isJsonNull()) {
        ActionTypeEnum.validateJsonElement(jsonObj.get("actionType"));
      }
      if ((jsonObj.get("ecommerceType") != null && !jsonObj.get("ecommerceType").isJsonNull()) && !jsonObj.get("ecommerceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ecommerceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ecommerceType").toString()));
      }
      // validate the optional field `ecommerceType`
      if (jsonObj.get("ecommerceType") != null && !jsonObj.get("ecommerceType").isJsonNull()) {
        EcommerceTypeEnum.validateJsonElement(jsonObj.get("ecommerceType"));
      }
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
        if (jsonArrayproducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
          }

          // validate the optional field `products` (array)
          for (int i = 0; i < jsonArrayproducts.size(); i++) {
            ProductData.validateJsonElement(jsonArrayproducts.get(i));
          };
        }
      }
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        TransactionData.validateJsonElement(jsonObj.get("transaction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EcommerceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EcommerceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EcommerceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EcommerceData.class));

       return (TypeAdapter<T>) new TypeAdapter<EcommerceData>() {
           @Override
           public void write(JsonWriter out, EcommerceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EcommerceData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EcommerceData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EcommerceData
   * @throws IOException if the JSON string is invalid with respect to EcommerceData
   */
  public static EcommerceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EcommerceData.class);
  }

  /**
   * Convert an instance of EcommerceData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

