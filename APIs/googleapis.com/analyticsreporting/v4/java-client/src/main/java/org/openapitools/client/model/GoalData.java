/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents all the details pertaining to a goal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoalData {
  public static final String SERIALIZED_NAME_GOAL_COMPLETION_LOCATION = "goalCompletionLocation";
  @SerializedName(SERIALIZED_NAME_GOAL_COMPLETION_LOCATION)
  private String goalCompletionLocation;

  public static final String SERIALIZED_NAME_GOAL_COMPLETIONS = "goalCompletions";
  @SerializedName(SERIALIZED_NAME_GOAL_COMPLETIONS)
  private String goalCompletions;

  public static final String SERIALIZED_NAME_GOAL_INDEX = "goalIndex";
  @SerializedName(SERIALIZED_NAME_GOAL_INDEX)
  private Integer goalIndex;

  public static final String SERIALIZED_NAME_GOAL_NAME = "goalName";
  @SerializedName(SERIALIZED_NAME_GOAL_NAME)
  private String goalName;

  public static final String SERIALIZED_NAME_GOAL_PREVIOUS_STEP1 = "goalPreviousStep1";
  @SerializedName(SERIALIZED_NAME_GOAL_PREVIOUS_STEP1)
  private String goalPreviousStep1;

  public static final String SERIALIZED_NAME_GOAL_PREVIOUS_STEP2 = "goalPreviousStep2";
  @SerializedName(SERIALIZED_NAME_GOAL_PREVIOUS_STEP2)
  private String goalPreviousStep2;

  public static final String SERIALIZED_NAME_GOAL_PREVIOUS_STEP3 = "goalPreviousStep3";
  @SerializedName(SERIALIZED_NAME_GOAL_PREVIOUS_STEP3)
  private String goalPreviousStep3;

  public static final String SERIALIZED_NAME_GOAL_VALUE = "goalValue";
  @SerializedName(SERIALIZED_NAME_GOAL_VALUE)
  private Double goalValue;

  public GoalData() {
  }

  public GoalData goalCompletionLocation(String goalCompletionLocation) {
    this.goalCompletionLocation = goalCompletionLocation;
    return this;
  }

  /**
   * URL of the page where this goal was completed.
   * @return goalCompletionLocation
   */
  @javax.annotation.Nullable
  public String getGoalCompletionLocation() {
    return goalCompletionLocation;
  }

  public void setGoalCompletionLocation(String goalCompletionLocation) {
    this.goalCompletionLocation = goalCompletionLocation;
  }


  public GoalData goalCompletions(String goalCompletions) {
    this.goalCompletions = goalCompletions;
    return this;
  }

  /**
   * Total number of goal completions in this activity.
   * @return goalCompletions
   */
  @javax.annotation.Nullable
  public String getGoalCompletions() {
    return goalCompletions;
  }

  public void setGoalCompletions(String goalCompletions) {
    this.goalCompletions = goalCompletions;
  }


  public GoalData goalIndex(Integer goalIndex) {
    this.goalIndex = goalIndex;
    return this;
  }

  /**
   * This identifies the goal as configured for the profile.
   * @return goalIndex
   */
  @javax.annotation.Nullable
  public Integer getGoalIndex() {
    return goalIndex;
  }

  public void setGoalIndex(Integer goalIndex) {
    this.goalIndex = goalIndex;
  }


  public GoalData goalName(String goalName) {
    this.goalName = goalName;
    return this;
  }

  /**
   * Name of the goal.
   * @return goalName
   */
  @javax.annotation.Nullable
  public String getGoalName() {
    return goalName;
  }

  public void setGoalName(String goalName) {
    this.goalName = goalName;
  }


  public GoalData goalPreviousStep1(String goalPreviousStep1) {
    this.goalPreviousStep1 = goalPreviousStep1;
    return this;
  }

  /**
   * URL of the page one step prior to the goal completion.
   * @return goalPreviousStep1
   */
  @javax.annotation.Nullable
  public String getGoalPreviousStep1() {
    return goalPreviousStep1;
  }

  public void setGoalPreviousStep1(String goalPreviousStep1) {
    this.goalPreviousStep1 = goalPreviousStep1;
  }


  public GoalData goalPreviousStep2(String goalPreviousStep2) {
    this.goalPreviousStep2 = goalPreviousStep2;
    return this;
  }

  /**
   * URL of the page two steps prior to the goal completion.
   * @return goalPreviousStep2
   */
  @javax.annotation.Nullable
  public String getGoalPreviousStep2() {
    return goalPreviousStep2;
  }

  public void setGoalPreviousStep2(String goalPreviousStep2) {
    this.goalPreviousStep2 = goalPreviousStep2;
  }


  public GoalData goalPreviousStep3(String goalPreviousStep3) {
    this.goalPreviousStep3 = goalPreviousStep3;
    return this;
  }

  /**
   * URL of the page three steps prior to the goal completion.
   * @return goalPreviousStep3
   */
  @javax.annotation.Nullable
  public String getGoalPreviousStep3() {
    return goalPreviousStep3;
  }

  public void setGoalPreviousStep3(String goalPreviousStep3) {
    this.goalPreviousStep3 = goalPreviousStep3;
  }


  public GoalData goalValue(Double goalValue) {
    this.goalValue = goalValue;
    return this;
  }

  /**
   * Value in this goal.
   * @return goalValue
   */
  @javax.annotation.Nullable
  public Double getGoalValue() {
    return goalValue;
  }

  public void setGoalValue(Double goalValue) {
    this.goalValue = goalValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoalData goalData = (GoalData) o;
    return Objects.equals(this.goalCompletionLocation, goalData.goalCompletionLocation) &&
        Objects.equals(this.goalCompletions, goalData.goalCompletions) &&
        Objects.equals(this.goalIndex, goalData.goalIndex) &&
        Objects.equals(this.goalName, goalData.goalName) &&
        Objects.equals(this.goalPreviousStep1, goalData.goalPreviousStep1) &&
        Objects.equals(this.goalPreviousStep2, goalData.goalPreviousStep2) &&
        Objects.equals(this.goalPreviousStep3, goalData.goalPreviousStep3) &&
        Objects.equals(this.goalValue, goalData.goalValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(goalCompletionLocation, goalCompletions, goalIndex, goalName, goalPreviousStep1, goalPreviousStep2, goalPreviousStep3, goalValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoalData {\n");
    sb.append("    goalCompletionLocation: ").append(toIndentedString(goalCompletionLocation)).append("\n");
    sb.append("    goalCompletions: ").append(toIndentedString(goalCompletions)).append("\n");
    sb.append("    goalIndex: ").append(toIndentedString(goalIndex)).append("\n");
    sb.append("    goalName: ").append(toIndentedString(goalName)).append("\n");
    sb.append("    goalPreviousStep1: ").append(toIndentedString(goalPreviousStep1)).append("\n");
    sb.append("    goalPreviousStep2: ").append(toIndentedString(goalPreviousStep2)).append("\n");
    sb.append("    goalPreviousStep3: ").append(toIndentedString(goalPreviousStep3)).append("\n");
    sb.append("    goalValue: ").append(toIndentedString(goalValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("goalCompletionLocation");
    openapiFields.add("goalCompletions");
    openapiFields.add("goalIndex");
    openapiFields.add("goalName");
    openapiFields.add("goalPreviousStep1");
    openapiFields.add("goalPreviousStep2");
    openapiFields.add("goalPreviousStep3");
    openapiFields.add("goalValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoalData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoalData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoalData is not found in the empty JSON string", GoalData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoalData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoalData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("goalCompletionLocation") != null && !jsonObj.get("goalCompletionLocation").isJsonNull()) && !jsonObj.get("goalCompletionLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goalCompletionLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goalCompletionLocation").toString()));
      }
      if ((jsonObj.get("goalCompletions") != null && !jsonObj.get("goalCompletions").isJsonNull()) && !jsonObj.get("goalCompletions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goalCompletions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goalCompletions").toString()));
      }
      if ((jsonObj.get("goalName") != null && !jsonObj.get("goalName").isJsonNull()) && !jsonObj.get("goalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goalName").toString()));
      }
      if ((jsonObj.get("goalPreviousStep1") != null && !jsonObj.get("goalPreviousStep1").isJsonNull()) && !jsonObj.get("goalPreviousStep1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goalPreviousStep1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goalPreviousStep1").toString()));
      }
      if ((jsonObj.get("goalPreviousStep2") != null && !jsonObj.get("goalPreviousStep2").isJsonNull()) && !jsonObj.get("goalPreviousStep2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goalPreviousStep2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goalPreviousStep2").toString()));
      }
      if ((jsonObj.get("goalPreviousStep3") != null && !jsonObj.get("goalPreviousStep3").isJsonNull()) && !jsonObj.get("goalPreviousStep3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goalPreviousStep3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goalPreviousStep3").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoalData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoalData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoalData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoalData.class));

       return (TypeAdapter<T>) new TypeAdapter<GoalData>() {
           @Override
           public void write(JsonWriter out, GoalData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoalData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoalData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoalData
   * @throws IOException if the JSON string is invalid with respect to GoalData
   */
  public static GoalData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoalData.class);
  }

  /**
   * Convert an instance of GoalData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

