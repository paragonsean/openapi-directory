/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateRange;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request to fetch User Report from Reporting API &#x60;userActivity:get&#x60; call.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchUserActivityRequest {
  /**
   * Gets or Sets activityTypes
   */
  @JsonAdapter(ActivityTypesEnum.Adapter.class)
  public enum ActivityTypesEnum {
    ACTIVITY_TYPE_UNSPECIFIED("ACTIVITY_TYPE_UNSPECIFIED"),
    
    PAGEVIEW("PAGEVIEW"),
    
    SCREENVIEW("SCREENVIEW"),
    
    GOAL("GOAL"),
    
    ECOMMERCE("ECOMMERCE"),
    
    EVENT("EVENT");

    private String value;

    ActivityTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActivityTypesEnum fromValue(String value) {
      for (ActivityTypesEnum b : ActivityTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActivityTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActivityTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActivityTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActivityTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActivityTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVITY_TYPES = "activityTypes";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPES)
  private List<ActivityTypesEnum> activityTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_RANGE = "dateRange";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  private DateRange dateRange;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PAGE_TOKEN = "pageToken";
  @SerializedName(SERIALIZED_NAME_PAGE_TOKEN)
  private String pageToken;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public static final String SERIALIZED_NAME_VIEW_ID = "viewId";
  @SerializedName(SERIALIZED_NAME_VIEW_ID)
  private String viewId;

  public SearchUserActivityRequest() {
  }

  public SearchUserActivityRequest activityTypes(List<ActivityTypesEnum> activityTypes) {
    this.activityTypes = activityTypes;
    return this;
  }

  public SearchUserActivityRequest addActivityTypesItem(ActivityTypesEnum activityTypesItem) {
    if (this.activityTypes == null) {
      this.activityTypes = new ArrayList<>();
    }
    this.activityTypes.add(activityTypesItem);
    return this;
  }

  /**
   * Set of all activity types being requested. Only acvities matching these types will be returned in the response. If empty, all activies will be returned.
   * @return activityTypes
   */
  @javax.annotation.Nullable
  public List<ActivityTypesEnum> getActivityTypes() {
    return activityTypes;
  }

  public void setActivityTypes(List<ActivityTypesEnum> activityTypes) {
    this.activityTypes = activityTypes;
  }


  public SearchUserActivityRequest dateRange(DateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

  /**
   * Get dateRange
   * @return dateRange
   */
  @javax.annotation.Nullable
  public DateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(DateRange dateRange) {
    this.dateRange = dateRange;
  }


  public SearchUserActivityRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Page size is for paging and specifies the maximum number of returned rows. Page size should be &gt; 0. If the value is 0 or if the field isn&#39;t specified, the request returns the default of 1000 rows per page.
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public SearchUserActivityRequest pageToken(String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

  /**
   * A continuation token to get the next page of the results. Adding this to the request will return the rows after the pageToken. The pageToken should be the value returned in the nextPageToken parameter in the response to the [SearchUserActivityRequest](#SearchUserActivityRequest) request.
   * @return pageToken
   */
  @javax.annotation.Nullable
  public String getPageToken() {
    return pageToken;
  }

  public void setPageToken(String pageToken) {
    this.pageToken = pageToken;
  }


  public SearchUserActivityRequest user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }


  public SearchUserActivityRequest viewId(String viewId) {
    this.viewId = viewId;
    return this;
  }

  /**
   * Required. The Analytics [view ID](https://support.google.com/analytics/answer/1009618) from which to retrieve data. Every [SearchUserActivityRequest](#SearchUserActivityRequest) must contain the &#x60;viewId&#x60;.
   * @return viewId
   */
  @javax.annotation.Nullable
  public String getViewId() {
    return viewId;
  }

  public void setViewId(String viewId) {
    this.viewId = viewId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchUserActivityRequest searchUserActivityRequest = (SearchUserActivityRequest) o;
    return Objects.equals(this.activityTypes, searchUserActivityRequest.activityTypes) &&
        Objects.equals(this.dateRange, searchUserActivityRequest.dateRange) &&
        Objects.equals(this.pageSize, searchUserActivityRequest.pageSize) &&
        Objects.equals(this.pageToken, searchUserActivityRequest.pageToken) &&
        Objects.equals(this.user, searchUserActivityRequest.user) &&
        Objects.equals(this.viewId, searchUserActivityRequest.viewId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityTypes, dateRange, pageSize, pageToken, user, viewId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchUserActivityRequest {\n");
    sb.append("    activityTypes: ").append(toIndentedString(activityTypes)).append("\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    pageToken: ").append(toIndentedString(pageToken)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    viewId: ").append(toIndentedString(viewId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityTypes");
    openapiFields.add("dateRange");
    openapiFields.add("pageSize");
    openapiFields.add("pageToken");
    openapiFields.add("user");
    openapiFields.add("viewId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchUserActivityRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchUserActivityRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchUserActivityRequest is not found in the empty JSON string", SearchUserActivityRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchUserActivityRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchUserActivityRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("activityTypes") != null && !jsonObj.get("activityTypes").isJsonNull() && !jsonObj.get("activityTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityTypes` to be an array in the JSON string but got `%s`", jsonObj.get("activityTypes").toString()));
      }
      // validate the optional field `dateRange`
      if (jsonObj.get("dateRange") != null && !jsonObj.get("dateRange").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("dateRange"));
      }
      if ((jsonObj.get("pageToken") != null && !jsonObj.get("pageToken").isJsonNull()) && !jsonObj.get("pageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageToken").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
      if ((jsonObj.get("viewId") != null && !jsonObj.get("viewId").isJsonNull()) && !jsonObj.get("viewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchUserActivityRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchUserActivityRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchUserActivityRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchUserActivityRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchUserActivityRequest>() {
           @Override
           public void write(JsonWriter out, SearchUserActivityRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchUserActivityRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchUserActivityRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchUserActivityRequest
   * @throws IOException if the JSON string is invalid with respect to SearchUserActivityRequest
   */
  public static SearchUserActivityRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchUserActivityRequest.class);
  }

  /**
   * Convert an instance of SearchUserActivityRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

