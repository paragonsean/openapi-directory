/*
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SequenceSegment;
import org.openapitools.client.model.SimpleSegment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SegmentFilter defines the segment to be either a simple or a sequence segment. A simple segment condition contains dimension and metric conditions to select the sessions or users. A sequence segment condition can be used to select users or sessions based on sequential conditions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:33.190781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SegmentFilter {
  public static final String SERIALIZED_NAME_NOT = "not";
  @SerializedName(SERIALIZED_NAME_NOT)
  private Boolean not;

  public static final String SERIALIZED_NAME_SEQUENCE_SEGMENT = "sequenceSegment";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_SEGMENT)
  private SequenceSegment sequenceSegment;

  public static final String SERIALIZED_NAME_SIMPLE_SEGMENT = "simpleSegment";
  @SerializedName(SERIALIZED_NAME_SIMPLE_SEGMENT)
  private SimpleSegment simpleSegment;

  public SegmentFilter() {
  }

  public SegmentFilter not(Boolean not) {
    this.not = not;
    return this;
  }

  /**
   * If true, match the complement of simple or sequence segment. For example, to match all visits not from \&quot;New York\&quot;, we can define the segment as follows: \&quot;sessionSegment\&quot;: { \&quot;segmentFilters\&quot;: [{ \&quot;simpleSegment\&quot; :{ \&quot;orFiltersForSegment\&quot;: [{ \&quot;segmentFilterClauses\&quot;:[{ \&quot;dimensionFilter\&quot;: { \&quot;dimensionName\&quot;: \&quot;ga:city\&quot;, \&quot;expressions\&quot;: [\&quot;New York\&quot;] } }] }] }, \&quot;not\&quot;: \&quot;True\&quot; }] },
   * @return not
   */
  @javax.annotation.Nullable
  public Boolean getNot() {
    return not;
  }

  public void setNot(Boolean not) {
    this.not = not;
  }


  public SegmentFilter sequenceSegment(SequenceSegment sequenceSegment) {
    this.sequenceSegment = sequenceSegment;
    return this;
  }

  /**
   * Get sequenceSegment
   * @return sequenceSegment
   */
  @javax.annotation.Nullable
  public SequenceSegment getSequenceSegment() {
    return sequenceSegment;
  }

  public void setSequenceSegment(SequenceSegment sequenceSegment) {
    this.sequenceSegment = sequenceSegment;
  }


  public SegmentFilter simpleSegment(SimpleSegment simpleSegment) {
    this.simpleSegment = simpleSegment;
    return this;
  }

  /**
   * Get simpleSegment
   * @return simpleSegment
   */
  @javax.annotation.Nullable
  public SimpleSegment getSimpleSegment() {
    return simpleSegment;
  }

  public void setSimpleSegment(SimpleSegment simpleSegment) {
    this.simpleSegment = simpleSegment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SegmentFilter segmentFilter = (SegmentFilter) o;
    return Objects.equals(this.not, segmentFilter.not) &&
        Objects.equals(this.sequenceSegment, segmentFilter.sequenceSegment) &&
        Objects.equals(this.simpleSegment, segmentFilter.simpleSegment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(not, sequenceSegment, simpleSegment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SegmentFilter {\n");
    sb.append("    not: ").append(toIndentedString(not)).append("\n");
    sb.append("    sequenceSegment: ").append(toIndentedString(sequenceSegment)).append("\n");
    sb.append("    simpleSegment: ").append(toIndentedString(simpleSegment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("not");
    openapiFields.add("sequenceSegment");
    openapiFields.add("simpleSegment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SegmentFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SegmentFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SegmentFilter is not found in the empty JSON string", SegmentFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SegmentFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SegmentFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sequenceSegment`
      if (jsonObj.get("sequenceSegment") != null && !jsonObj.get("sequenceSegment").isJsonNull()) {
        SequenceSegment.validateJsonElement(jsonObj.get("sequenceSegment"));
      }
      // validate the optional field `simpleSegment`
      if (jsonObj.get("simpleSegment") != null && !jsonObj.get("simpleSegment").isJsonNull()) {
        SimpleSegment.validateJsonElement(jsonObj.get("simpleSegment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SegmentFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SegmentFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SegmentFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SegmentFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<SegmentFilter>() {
           @Override
           public void write(JsonWriter out, SegmentFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SegmentFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SegmentFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SegmentFilter
   * @throws IOException if the JSON string is invalid with respect to SegmentFilter
   */
  public static SegmentFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SegmentFilter.class);
  }

  /**
   * Convert an instance of SegmentFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

