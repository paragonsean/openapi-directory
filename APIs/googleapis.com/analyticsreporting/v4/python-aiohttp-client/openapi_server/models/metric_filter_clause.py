# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_filter import MetricFilter
from openapi_server import util


class MetricFilterClause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: List[MetricFilter]=None, operator: str=None):
        """MetricFilterClause - a model defined in OpenAPI

        :param filters: The filters of this MetricFilterClause.
        :param operator: The operator of this MetricFilterClause.
        """
        self.openapi_types = {
            'filters': List[MetricFilter],
            'operator': str
        }

        self.attribute_map = {
            'filters': 'filters',
            'operator': 'operator'
        }

        self._filters = filters
        self._operator = operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricFilterClause':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricFilterClause of this MetricFilterClause.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this MetricFilterClause.

        The repeated set of filters. They are logically combined based on the operator specified.

        :return: The filters of this MetricFilterClause.
        :rtype: List[MetricFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this MetricFilterClause.

        The repeated set of filters. They are logically combined based on the operator specified.

        :param filters: The filters of this MetricFilterClause.
        :type filters: List[MetricFilter]
        """

        self._filters = filters

    @property
    def operator(self):
        """Gets the operator of this MetricFilterClause.

        The operator for combining multiple metric filters. If unspecified, it is treated as an `OR`.

        :return: The operator of this MetricFilterClause.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this MetricFilterClause.

        The operator for combining multiple metric filters. If unspecified, it is treated as an `OR`.

        :param operator: The operator of this MetricFilterClause.
        :type operator: str
        """
        allowed_values = ["OPERATOR_UNSPECIFIED", "OR", "AND"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator
