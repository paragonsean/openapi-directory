# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.segment_dimension_filter import SegmentDimensionFilter
from openapi_server.models.segment_metric_filter import SegmentMetricFilter
from openapi_server import util


class SegmentFilterClause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_filter: SegmentDimensionFilter=None, metric_filter: SegmentMetricFilter=None, _not: bool=None):
        """SegmentFilterClause - a model defined in OpenAPI

        :param dimension_filter: The dimension_filter of this SegmentFilterClause.
        :param metric_filter: The metric_filter of this SegmentFilterClause.
        :param _not: The _not of this SegmentFilterClause.
        """
        self.openapi_types = {
            'dimension_filter': SegmentDimensionFilter,
            'metric_filter': SegmentMetricFilter,
            '_not': bool
        }

        self.attribute_map = {
            'dimension_filter': 'dimensionFilter',
            'metric_filter': 'metricFilter',
            '_not': 'not'
        }

        self._dimension_filter = dimension_filter
        self._metric_filter = metric_filter
        self.__not = _not

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentFilterClause':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentFilterClause of this SegmentFilterClause.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_filter(self):
        """Gets the dimension_filter of this SegmentFilterClause.


        :return: The dimension_filter of this SegmentFilterClause.
        :rtype: SegmentDimensionFilter
        """
        return self._dimension_filter

    @dimension_filter.setter
    def dimension_filter(self, dimension_filter):
        """Sets the dimension_filter of this SegmentFilterClause.


        :param dimension_filter: The dimension_filter of this SegmentFilterClause.
        :type dimension_filter: SegmentDimensionFilter
        """

        self._dimension_filter = dimension_filter

    @property
    def metric_filter(self):
        """Gets the metric_filter of this SegmentFilterClause.


        :return: The metric_filter of this SegmentFilterClause.
        :rtype: SegmentMetricFilter
        """
        return self._metric_filter

    @metric_filter.setter
    def metric_filter(self, metric_filter):
        """Sets the metric_filter of this SegmentFilterClause.


        :param metric_filter: The metric_filter of this SegmentFilterClause.
        :type metric_filter: SegmentMetricFilter
        """

        self._metric_filter = metric_filter

    @property
    def _not(self):
        """Gets the _not of this SegmentFilterClause.

        Matches the complement (`!`) of the filter.

        :return: The _not of this SegmentFilterClause.
        :rtype: bool
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this SegmentFilterClause.

        Matches the complement (`!`) of the filter.

        :param _not: The _not of this SegmentFilterClause.
        :type _not: bool
        """

        self.__not = _not
