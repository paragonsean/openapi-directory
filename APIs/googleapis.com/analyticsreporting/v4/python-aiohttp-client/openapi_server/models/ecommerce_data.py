# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_data import ProductData
from openapi_server.models.transaction_data import TransactionData
from openapi_server import util


class EcommerceData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: str=None, ecommerce_type: str=None, products: List[ProductData]=None, transaction: TransactionData=None):
        """EcommerceData - a model defined in OpenAPI

        :param action_type: The action_type of this EcommerceData.
        :param ecommerce_type: The ecommerce_type of this EcommerceData.
        :param products: The products of this EcommerceData.
        :param transaction: The transaction of this EcommerceData.
        """
        self.openapi_types = {
            'action_type': str,
            'ecommerce_type': str,
            'products': List[ProductData],
            'transaction': TransactionData
        }

        self.attribute_map = {
            'action_type': 'actionType',
            'ecommerce_type': 'ecommerceType',
            'products': 'products',
            'transaction': 'transaction'
        }

        self._action_type = action_type
        self._ecommerce_type = ecommerce_type
        self._products = products
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EcommerceData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EcommerceData of this EcommerceData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this EcommerceData.

        Action associated with this e-commerce action.

        :return: The action_type of this EcommerceData.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this EcommerceData.

        Action associated with this e-commerce action.

        :param action_type: The action_type of this EcommerceData.
        :type action_type: str
        """
        allowed_values = ["UNKNOWN", "CLICK", "DETAILS_VIEW", "ADD_TO_CART", "REMOVE_FROM_CART", "CHECKOUT", "PAYMENT", "REFUND", "CHECKOUT_OPTION"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def ecommerce_type(self):
        """Gets the ecommerce_type of this EcommerceData.

        The type of this e-commerce activity.

        :return: The ecommerce_type of this EcommerceData.
        :rtype: str
        """
        return self._ecommerce_type

    @ecommerce_type.setter
    def ecommerce_type(self, ecommerce_type):
        """Sets the ecommerce_type of this EcommerceData.

        The type of this e-commerce activity.

        :param ecommerce_type: The ecommerce_type of this EcommerceData.
        :type ecommerce_type: str
        """
        allowed_values = ["ECOMMERCE_TYPE_UNSPECIFIED", "CLASSIC", "ENHANCED"]  # noqa: E501
        if ecommerce_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ecommerce_type` ({0}), must be one of {1}"
                .format(ecommerce_type, allowed_values)
            )

        self._ecommerce_type = ecommerce_type

    @property
    def products(self):
        """Gets the products of this EcommerceData.

        Details of the products in this transaction.

        :return: The products of this EcommerceData.
        :rtype: List[ProductData]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this EcommerceData.

        Details of the products in this transaction.

        :param products: The products of this EcommerceData.
        :type products: List[ProductData]
        """

        self._products = products

    @property
    def transaction(self):
        """Gets the transaction of this EcommerceData.


        :return: The transaction of this EcommerceData.
        :rtype: TransactionData
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this EcommerceData.


        :param transaction: The transaction of this EcommerceData.
        :type transaction: TransactionData
        """

        self._transaction = transaction
