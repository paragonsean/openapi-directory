# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server.models.user import User
from openapi_server import util


class SearchUserActivityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_types: List[str]=None, date_range: DateRange=None, page_size: int=None, page_token: str=None, user: User=None, view_id: str=None):
        """SearchUserActivityRequest - a model defined in OpenAPI

        :param activity_types: The activity_types of this SearchUserActivityRequest.
        :param date_range: The date_range of this SearchUserActivityRequest.
        :param page_size: The page_size of this SearchUserActivityRequest.
        :param page_token: The page_token of this SearchUserActivityRequest.
        :param user: The user of this SearchUserActivityRequest.
        :param view_id: The view_id of this SearchUserActivityRequest.
        """
        self.openapi_types = {
            'activity_types': List[str],
            'date_range': DateRange,
            'page_size': int,
            'page_token': str,
            'user': User,
            'view_id': str
        }

        self.attribute_map = {
            'activity_types': 'activityTypes',
            'date_range': 'dateRange',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'user': 'user',
            'view_id': 'viewId'
        }

        self._activity_types = activity_types
        self._date_range = date_range
        self._page_size = page_size
        self._page_token = page_token
        self._user = user
        self._view_id = view_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchUserActivityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchUserActivityRequest of this SearchUserActivityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_types(self):
        """Gets the activity_types of this SearchUserActivityRequest.

        Set of all activity types being requested. Only acvities matching these types will be returned in the response. If empty, all activies will be returned.

        :return: The activity_types of this SearchUserActivityRequest.
        :rtype: List[str]
        """
        return self._activity_types

    @activity_types.setter
    def activity_types(self, activity_types):
        """Sets the activity_types of this SearchUserActivityRequest.

        Set of all activity types being requested. Only acvities matching these types will be returned in the response. If empty, all activies will be returned.

        :param activity_types: The activity_types of this SearchUserActivityRequest.
        :type activity_types: List[str]
        """
        allowed_values = ["ACTIVITY_TYPE_UNSPECIFIED", "PAGEVIEW", "SCREENVIEW", "GOAL", "ECOMMERCE", "EVENT"]  # noqa: E501
        if not set(activity_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `activity_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(activity_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._activity_types = activity_types

    @property
    def date_range(self):
        """Gets the date_range of this SearchUserActivityRequest.


        :return: The date_range of this SearchUserActivityRequest.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this SearchUserActivityRequest.


        :param date_range: The date_range of this SearchUserActivityRequest.
        :type date_range: DateRange
        """

        self._date_range = date_range

    @property
    def page_size(self):
        """Gets the page_size of this SearchUserActivityRequest.

        Page size is for paging and specifies the maximum number of returned rows. Page size should be > 0. If the value is 0 or if the field isn't specified, the request returns the default of 1000 rows per page.

        :return: The page_size of this SearchUserActivityRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SearchUserActivityRequest.

        Page size is for paging and specifies the maximum number of returned rows. Page size should be > 0. If the value is 0 or if the field isn't specified, the request returns the default of 1000 rows per page.

        :param page_size: The page_size of this SearchUserActivityRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this SearchUserActivityRequest.

        A continuation token to get the next page of the results. Adding this to the request will return the rows after the pageToken. The pageToken should be the value returned in the nextPageToken parameter in the response to the [SearchUserActivityRequest](#SearchUserActivityRequest) request.

        :return: The page_token of this SearchUserActivityRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this SearchUserActivityRequest.

        A continuation token to get the next page of the results. Adding this to the request will return the rows after the pageToken. The pageToken should be the value returned in the nextPageToken parameter in the response to the [SearchUserActivityRequest](#SearchUserActivityRequest) request.

        :param page_token: The page_token of this SearchUserActivityRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def user(self):
        """Gets the user of this SearchUserActivityRequest.


        :return: The user of this SearchUserActivityRequest.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SearchUserActivityRequest.


        :param user: The user of this SearchUserActivityRequest.
        :type user: User
        """

        self._user = user

    @property
    def view_id(self):
        """Gets the view_id of this SearchUserActivityRequest.

        Required. The Analytics [view ID](https://support.google.com/analytics/answer/1009618) from which to retrieve data. Every [SearchUserActivityRequest](#SearchUserActivityRequest) must contain the `viewId`.

        :return: The view_id of this SearchUserActivityRequest.
        :rtype: str
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this SearchUserActivityRequest.

        Required. The Analytics [view ID](https://support.google.com/analytics/answer/1009618) from which to retrieve data. Every [SearchUserActivityRequest](#SearchUserActivityRequest) must contain the `viewId`.

        :param view_id: The view_id of this SearchUserActivityRequest.
        :type view_id: str
        """

        self._view_id = view_id
