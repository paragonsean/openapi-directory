# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SegmentDimensionFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_sensitive: bool=None, dimension_name: str=None, expressions: List[str]=None, max_comparison_value: str=None, min_comparison_value: str=None, operator: str=None):
        """SegmentDimensionFilter - a model defined in OpenAPI

        :param case_sensitive: The case_sensitive of this SegmentDimensionFilter.
        :param dimension_name: The dimension_name of this SegmentDimensionFilter.
        :param expressions: The expressions of this SegmentDimensionFilter.
        :param max_comparison_value: The max_comparison_value of this SegmentDimensionFilter.
        :param min_comparison_value: The min_comparison_value of this SegmentDimensionFilter.
        :param operator: The operator of this SegmentDimensionFilter.
        """
        self.openapi_types = {
            'case_sensitive': bool,
            'dimension_name': str,
            'expressions': List[str],
            'max_comparison_value': str,
            'min_comparison_value': str,
            'operator': str
        }

        self.attribute_map = {
            'case_sensitive': 'caseSensitive',
            'dimension_name': 'dimensionName',
            'expressions': 'expressions',
            'max_comparison_value': 'maxComparisonValue',
            'min_comparison_value': 'minComparisonValue',
            'operator': 'operator'
        }

        self._case_sensitive = case_sensitive
        self._dimension_name = dimension_name
        self._expressions = expressions
        self._max_comparison_value = max_comparison_value
        self._min_comparison_value = min_comparison_value
        self._operator = operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentDimensionFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentDimensionFilter of this SegmentDimensionFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this SegmentDimensionFilter.

        Should the match be case sensitive, ignored for `IN_LIST` operator.

        :return: The case_sensitive of this SegmentDimensionFilter.
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this SegmentDimensionFilter.

        Should the match be case sensitive, ignored for `IN_LIST` operator.

        :param case_sensitive: The case_sensitive of this SegmentDimensionFilter.
        :type case_sensitive: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def dimension_name(self):
        """Gets the dimension_name of this SegmentDimensionFilter.

        Name of the dimension for which the filter is being applied.

        :return: The dimension_name of this SegmentDimensionFilter.
        :rtype: str
        """
        return self._dimension_name

    @dimension_name.setter
    def dimension_name(self, dimension_name):
        """Sets the dimension_name of this SegmentDimensionFilter.

        Name of the dimension for which the filter is being applied.

        :param dimension_name: The dimension_name of this SegmentDimensionFilter.
        :type dimension_name: str
        """

        self._dimension_name = dimension_name

    @property
    def expressions(self):
        """Gets the expressions of this SegmentDimensionFilter.

        The list of expressions, only the first element is used for all operators

        :return: The expressions of this SegmentDimensionFilter.
        :rtype: List[str]
        """
        return self._expressions

    @expressions.setter
    def expressions(self, expressions):
        """Sets the expressions of this SegmentDimensionFilter.

        The list of expressions, only the first element is used for all operators

        :param expressions: The expressions of this SegmentDimensionFilter.
        :type expressions: List[str]
        """

        self._expressions = expressions

    @property
    def max_comparison_value(self):
        """Gets the max_comparison_value of this SegmentDimensionFilter.

        Maximum comparison values for `BETWEEN` match type.

        :return: The max_comparison_value of this SegmentDimensionFilter.
        :rtype: str
        """
        return self._max_comparison_value

    @max_comparison_value.setter
    def max_comparison_value(self, max_comparison_value):
        """Sets the max_comparison_value of this SegmentDimensionFilter.

        Maximum comparison values for `BETWEEN` match type.

        :param max_comparison_value: The max_comparison_value of this SegmentDimensionFilter.
        :type max_comparison_value: str
        """

        self._max_comparison_value = max_comparison_value

    @property
    def min_comparison_value(self):
        """Gets the min_comparison_value of this SegmentDimensionFilter.

        Minimum comparison values for `BETWEEN` match type.

        :return: The min_comparison_value of this SegmentDimensionFilter.
        :rtype: str
        """
        return self._min_comparison_value

    @min_comparison_value.setter
    def min_comparison_value(self, min_comparison_value):
        """Sets the min_comparison_value of this SegmentDimensionFilter.

        Minimum comparison values for `BETWEEN` match type.

        :param min_comparison_value: The min_comparison_value of this SegmentDimensionFilter.
        :type min_comparison_value: str
        """

        self._min_comparison_value = min_comparison_value

    @property
    def operator(self):
        """Gets the operator of this SegmentDimensionFilter.

        The operator to use to match the dimension with the expressions.

        :return: The operator of this SegmentDimensionFilter.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this SegmentDimensionFilter.

        The operator to use to match the dimension with the expressions.

        :param operator: The operator of this SegmentDimensionFilter.
        :type operator: str
        """
        allowed_values = ["OPERATOR_UNSPECIFIED", "REGEXP", "BEGINS_WITH", "ENDS_WITH", "PARTIAL", "EXACT", "IN_LIST", "NUMERIC_LESS_THAN", "NUMERIC_GREATER_THAN", "NUMERIC_BETWEEN"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator
