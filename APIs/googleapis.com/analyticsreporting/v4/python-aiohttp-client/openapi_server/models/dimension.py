# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dimension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, histogram_buckets: List[str]=None, name: str=None):
        """Dimension - a model defined in OpenAPI

        :param histogram_buckets: The histogram_buckets of this Dimension.
        :param name: The name of this Dimension.
        """
        self.openapi_types = {
            'histogram_buckets': List[str],
            'name': str
        }

        self.attribute_map = {
            'histogram_buckets': 'histogramBuckets',
            'name': 'name'
        }

        self._histogram_buckets = histogram_buckets
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dimension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dimension of this Dimension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def histogram_buckets(self):
        """Gets the histogram_buckets of this Dimension.

        If non-empty, we place dimension values into buckets after string to int64. Dimension values that are not the string representation of an integral value will be converted to zero. The bucket values have to be in increasing order. Each bucket is closed on the lower end, and open on the upper end. The \"first\" bucket includes all values less than the first boundary, the \"last\" bucket includes all values up to infinity. Dimension values that fall in a bucket get transformed to a new dimension value. For example, if one gives a list of \"0, 1, 3, 4, 7\", then we return the following buckets: - bucket #1: values < 0, dimension value \"<0\" - bucket #2: values in [0,1), dimension value \"0\" - bucket #3: values in [1,3), dimension value \"1-2\" - bucket #4: values in [3,4), dimension value \"3\" - bucket #5: values in [4,7), dimension value \"4-6\" - bucket #6: values >= 7, dimension value \"7+\" NOTE: If you are applying histogram mutation on any dimension, and using that dimension in sort, you will want to use the sort type `HISTOGRAM_BUCKET` for that purpose. Without that the dimension values will be sorted according to dictionary (lexicographic) order. For example the ascending dictionary order is: \"<50\", \"1001+\", \"121-1000\", \"50-120\" And the ascending `HISTOGRAM_BUCKET` order is: \"<50\", \"50-120\", \"121-1000\", \"1001+\" The client has to explicitly request `\"orderType\": \"HISTOGRAM_BUCKET\"` for a histogram-mutated dimension.

        :return: The histogram_buckets of this Dimension.
        :rtype: List[str]
        """
        return self._histogram_buckets

    @histogram_buckets.setter
    def histogram_buckets(self, histogram_buckets):
        """Sets the histogram_buckets of this Dimension.

        If non-empty, we place dimension values into buckets after string to int64. Dimension values that are not the string representation of an integral value will be converted to zero. The bucket values have to be in increasing order. Each bucket is closed on the lower end, and open on the upper end. The \"first\" bucket includes all values less than the first boundary, the \"last\" bucket includes all values up to infinity. Dimension values that fall in a bucket get transformed to a new dimension value. For example, if one gives a list of \"0, 1, 3, 4, 7\", then we return the following buckets: - bucket #1: values < 0, dimension value \"<0\" - bucket #2: values in [0,1), dimension value \"0\" - bucket #3: values in [1,3), dimension value \"1-2\" - bucket #4: values in [3,4), dimension value \"3\" - bucket #5: values in [4,7), dimension value \"4-6\" - bucket #6: values >= 7, dimension value \"7+\" NOTE: If you are applying histogram mutation on any dimension, and using that dimension in sort, you will want to use the sort type `HISTOGRAM_BUCKET` for that purpose. Without that the dimension values will be sorted according to dictionary (lexicographic) order. For example the ascending dictionary order is: \"<50\", \"1001+\", \"121-1000\", \"50-120\" And the ascending `HISTOGRAM_BUCKET` order is: \"<50\", \"50-120\", \"121-1000\", \"1001+\" The client has to explicitly request `\"orderType\": \"HISTOGRAM_BUCKET\"` for a histogram-mutated dimension.

        :param histogram_buckets: The histogram_buckets of this Dimension.
        :type histogram_buckets: List[str]
        """

        self._histogram_buckets = histogram_buckets

    @property
    def name(self):
        """Gets the name of this Dimension.

        Name of the dimension to fetch, for example `ga:browser`.

        :return: The name of this Dimension.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dimension.

        Name of the dimension to fetch, for example `ga:browser`.

        :param name: The name of this Dimension.
        :type name: str
        """

        self._name = name
