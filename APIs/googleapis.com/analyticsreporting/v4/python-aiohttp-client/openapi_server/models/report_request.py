# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cohort_group import CohortGroup
from openapi_server.models.date_range import DateRange
from openapi_server.models.dimension import Dimension
from openapi_server.models.dimension_filter_clause import DimensionFilterClause
from openapi_server.models.metric import Metric
from openapi_server.models.metric_filter_clause import MetricFilterClause
from openapi_server.models.order_by import OrderBy
from openapi_server.models.pivot import Pivot
from openapi_server.models.segment import Segment
from openapi_server import util


class ReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cohort_group: CohortGroup=None, date_ranges: List[DateRange]=None, dimension_filter_clauses: List[DimensionFilterClause]=None, dimensions: List[Dimension]=None, filters_expression: str=None, hide_totals: bool=None, hide_value_ranges: bool=None, include_empty_rows: bool=None, metric_filter_clauses: List[MetricFilterClause]=None, metrics: List[Metric]=None, order_bys: List[OrderBy]=None, page_size: int=None, page_token: str=None, pivots: List[Pivot]=None, sampling_level: str=None, segments: List[Segment]=None, view_id: str=None):
        """ReportRequest - a model defined in OpenAPI

        :param cohort_group: The cohort_group of this ReportRequest.
        :param date_ranges: The date_ranges of this ReportRequest.
        :param dimension_filter_clauses: The dimension_filter_clauses of this ReportRequest.
        :param dimensions: The dimensions of this ReportRequest.
        :param filters_expression: The filters_expression of this ReportRequest.
        :param hide_totals: The hide_totals of this ReportRequest.
        :param hide_value_ranges: The hide_value_ranges of this ReportRequest.
        :param include_empty_rows: The include_empty_rows of this ReportRequest.
        :param metric_filter_clauses: The metric_filter_clauses of this ReportRequest.
        :param metrics: The metrics of this ReportRequest.
        :param order_bys: The order_bys of this ReportRequest.
        :param page_size: The page_size of this ReportRequest.
        :param page_token: The page_token of this ReportRequest.
        :param pivots: The pivots of this ReportRequest.
        :param sampling_level: The sampling_level of this ReportRequest.
        :param segments: The segments of this ReportRequest.
        :param view_id: The view_id of this ReportRequest.
        """
        self.openapi_types = {
            'cohort_group': CohortGroup,
            'date_ranges': List[DateRange],
            'dimension_filter_clauses': List[DimensionFilterClause],
            'dimensions': List[Dimension],
            'filters_expression': str,
            'hide_totals': bool,
            'hide_value_ranges': bool,
            'include_empty_rows': bool,
            'metric_filter_clauses': List[MetricFilterClause],
            'metrics': List[Metric],
            'order_bys': List[OrderBy],
            'page_size': int,
            'page_token': str,
            'pivots': List[Pivot],
            'sampling_level': str,
            'segments': List[Segment],
            'view_id': str
        }

        self.attribute_map = {
            'cohort_group': 'cohortGroup',
            'date_ranges': 'dateRanges',
            'dimension_filter_clauses': 'dimensionFilterClauses',
            'dimensions': 'dimensions',
            'filters_expression': 'filtersExpression',
            'hide_totals': 'hideTotals',
            'hide_value_ranges': 'hideValueRanges',
            'include_empty_rows': 'includeEmptyRows',
            'metric_filter_clauses': 'metricFilterClauses',
            'metrics': 'metrics',
            'order_bys': 'orderBys',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'pivots': 'pivots',
            'sampling_level': 'samplingLevel',
            'segments': 'segments',
            'view_id': 'viewId'
        }

        self._cohort_group = cohort_group
        self._date_ranges = date_ranges
        self._dimension_filter_clauses = dimension_filter_clauses
        self._dimensions = dimensions
        self._filters_expression = filters_expression
        self._hide_totals = hide_totals
        self._hide_value_ranges = hide_value_ranges
        self._include_empty_rows = include_empty_rows
        self._metric_filter_clauses = metric_filter_clauses
        self._metrics = metrics
        self._order_bys = order_bys
        self._page_size = page_size
        self._page_token = page_token
        self._pivots = pivots
        self._sampling_level = sampling_level
        self._segments = segments
        self._view_id = view_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportRequest of this ReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cohort_group(self):
        """Gets the cohort_group of this ReportRequest.


        :return: The cohort_group of this ReportRequest.
        :rtype: CohortGroup
        """
        return self._cohort_group

    @cohort_group.setter
    def cohort_group(self, cohort_group):
        """Sets the cohort_group of this ReportRequest.


        :param cohort_group: The cohort_group of this ReportRequest.
        :type cohort_group: CohortGroup
        """

        self._cohort_group = cohort_group

    @property
    def date_ranges(self):
        """Gets the date_ranges of this ReportRequest.

        Date ranges in the request. The request can have a maximum of 2 date ranges. The response will contain a set of metric values for each combination of the dimensions for each date range in the request. So, if there are two date ranges, there will be two set of metric values, one for the original date range and one for the second date range. The `reportRequest.dateRanges` field should not be specified for cohorts or Lifetime value requests. If a date range is not provided, the default date range is (startDate: current date - 7 days, endDate: current date - 1 day). Every [ReportRequest](#ReportRequest) within a `batchGet` method must contain the same `dateRanges` definition.

        :return: The date_ranges of this ReportRequest.
        :rtype: List[DateRange]
        """
        return self._date_ranges

    @date_ranges.setter
    def date_ranges(self, date_ranges):
        """Sets the date_ranges of this ReportRequest.

        Date ranges in the request. The request can have a maximum of 2 date ranges. The response will contain a set of metric values for each combination of the dimensions for each date range in the request. So, if there are two date ranges, there will be two set of metric values, one for the original date range and one for the second date range. The `reportRequest.dateRanges` field should not be specified for cohorts or Lifetime value requests. If a date range is not provided, the default date range is (startDate: current date - 7 days, endDate: current date - 1 day). Every [ReportRequest](#ReportRequest) within a `batchGet` method must contain the same `dateRanges` definition.

        :param date_ranges: The date_ranges of this ReportRequest.
        :type date_ranges: List[DateRange]
        """

        self._date_ranges = date_ranges

    @property
    def dimension_filter_clauses(self):
        """Gets the dimension_filter_clauses of this ReportRequest.

        The dimension filter clauses for filtering Dimension Values. They are logically combined with the `AND` operator. Note that filtering occurs before any dimensions are aggregated, so that the returned metrics represent the total for only the relevant dimensions.

        :return: The dimension_filter_clauses of this ReportRequest.
        :rtype: List[DimensionFilterClause]
        """
        return self._dimension_filter_clauses

    @dimension_filter_clauses.setter
    def dimension_filter_clauses(self, dimension_filter_clauses):
        """Sets the dimension_filter_clauses of this ReportRequest.

        The dimension filter clauses for filtering Dimension Values. They are logically combined with the `AND` operator. Note that filtering occurs before any dimensions are aggregated, so that the returned metrics represent the total for only the relevant dimensions.

        :param dimension_filter_clauses: The dimension_filter_clauses of this ReportRequest.
        :type dimension_filter_clauses: List[DimensionFilterClause]
        """

        self._dimension_filter_clauses = dimension_filter_clauses

    @property
    def dimensions(self):
        """Gets the dimensions of this ReportRequest.

        The dimensions requested. Requests can have a total of 9 dimensions.

        :return: The dimensions of this ReportRequest.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this ReportRequest.

        The dimensions requested. Requests can have a total of 9 dimensions.

        :param dimensions: The dimensions of this ReportRequest.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def filters_expression(self):
        """Gets the filters_expression of this ReportRequest.

        Dimension or metric filters that restrict the data returned for your request. To use the `filtersExpression`, supply a dimension or metric on which to filter, followed by the filter expression. For example, the following expression selects `ga:browser` dimension which starts with Firefox; `ga:browser=~^Firefox`. For more information on dimensions and metric filters, see [Filters reference](https://developers.google.com/analytics/devguides/reporting/core/v3/reference#filters).

        :return: The filters_expression of this ReportRequest.
        :rtype: str
        """
        return self._filters_expression

    @filters_expression.setter
    def filters_expression(self, filters_expression):
        """Sets the filters_expression of this ReportRequest.

        Dimension or metric filters that restrict the data returned for your request. To use the `filtersExpression`, supply a dimension or metric on which to filter, followed by the filter expression. For example, the following expression selects `ga:browser` dimension which starts with Firefox; `ga:browser=~^Firefox`. For more information on dimensions and metric filters, see [Filters reference](https://developers.google.com/analytics/devguides/reporting/core/v3/reference#filters).

        :param filters_expression: The filters_expression of this ReportRequest.
        :type filters_expression: str
        """

        self._filters_expression = filters_expression

    @property
    def hide_totals(self):
        """Gets the hide_totals of this ReportRequest.

        If set to true, hides the total of all metrics for all the matching rows, for every date range. The default false and will return the totals.

        :return: The hide_totals of this ReportRequest.
        :rtype: bool
        """
        return self._hide_totals

    @hide_totals.setter
    def hide_totals(self, hide_totals):
        """Sets the hide_totals of this ReportRequest.

        If set to true, hides the total of all metrics for all the matching rows, for every date range. The default false and will return the totals.

        :param hide_totals: The hide_totals of this ReportRequest.
        :type hide_totals: bool
        """

        self._hide_totals = hide_totals

    @property
    def hide_value_ranges(self):
        """Gets the hide_value_ranges of this ReportRequest.

        If set to true, hides the minimum and maximum across all matching rows. The default is false and the value ranges are returned.

        :return: The hide_value_ranges of this ReportRequest.
        :rtype: bool
        """
        return self._hide_value_ranges

    @hide_value_ranges.setter
    def hide_value_ranges(self, hide_value_ranges):
        """Sets the hide_value_ranges of this ReportRequest.

        If set to true, hides the minimum and maximum across all matching rows. The default is false and the value ranges are returned.

        :param hide_value_ranges: The hide_value_ranges of this ReportRequest.
        :type hide_value_ranges: bool
        """

        self._hide_value_ranges = hide_value_ranges

    @property
    def include_empty_rows(self):
        """Gets the include_empty_rows of this ReportRequest.

        If set to false, the response does not include rows if all the retrieved metrics are equal to zero. The default is false which will exclude these rows.

        :return: The include_empty_rows of this ReportRequest.
        :rtype: bool
        """
        return self._include_empty_rows

    @include_empty_rows.setter
    def include_empty_rows(self, include_empty_rows):
        """Sets the include_empty_rows of this ReportRequest.

        If set to false, the response does not include rows if all the retrieved metrics are equal to zero. The default is false which will exclude these rows.

        :param include_empty_rows: The include_empty_rows of this ReportRequest.
        :type include_empty_rows: bool
        """

        self._include_empty_rows = include_empty_rows

    @property
    def metric_filter_clauses(self):
        """Gets the metric_filter_clauses of this ReportRequest.

        The metric filter clauses. They are logically combined with the `AND` operator. Metric filters look at only the first date range and not the comparing date range. Note that filtering on metrics occurs after the metrics are aggregated.

        :return: The metric_filter_clauses of this ReportRequest.
        :rtype: List[MetricFilterClause]
        """
        return self._metric_filter_clauses

    @metric_filter_clauses.setter
    def metric_filter_clauses(self, metric_filter_clauses):
        """Sets the metric_filter_clauses of this ReportRequest.

        The metric filter clauses. They are logically combined with the `AND` operator. Metric filters look at only the first date range and not the comparing date range. Note that filtering on metrics occurs after the metrics are aggregated.

        :param metric_filter_clauses: The metric_filter_clauses of this ReportRequest.
        :type metric_filter_clauses: List[MetricFilterClause]
        """

        self._metric_filter_clauses = metric_filter_clauses

    @property
    def metrics(self):
        """Gets the metrics of this ReportRequest.

        The metrics requested. Requests must specify at least one metric. Requests can have a total of 10 metrics.

        :return: The metrics of this ReportRequest.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ReportRequest.

        The metrics requested. Requests must specify at least one metric. Requests can have a total of 10 metrics.

        :param metrics: The metrics of this ReportRequest.
        :type metrics: List[Metric]
        """

        self._metrics = metrics

    @property
    def order_bys(self):
        """Gets the order_bys of this ReportRequest.

        Sort order on output rows. To compare two rows, the elements of the following are applied in order until a difference is found. All date ranges in the output get the same row order.

        :return: The order_bys of this ReportRequest.
        :rtype: List[OrderBy]
        """
        return self._order_bys

    @order_bys.setter
    def order_bys(self, order_bys):
        """Sets the order_bys of this ReportRequest.

        Sort order on output rows. To compare two rows, the elements of the following are applied in order until a difference is found. All date ranges in the output get the same row order.

        :param order_bys: The order_bys of this ReportRequest.
        :type order_bys: List[OrderBy]
        """

        self._order_bys = order_bys

    @property
    def page_size(self):
        """Gets the page_size of this ReportRequest.

        Page size is for paging and specifies the maximum number of returned rows. Page size should be >= 0. A query returns the default of 1,000 rows. The Analytics Core Reporting API returns a maximum of 100,000 rows per request, no matter how many you ask for. It can also return fewer rows than requested, if there aren't as many dimension segments as you expect. For instance, there are fewer than 300 possible values for `ga:country`, so when segmenting only by country, you can't get more than 300 rows, even if you set `pageSize` to a higher value.

        :return: The page_size of this ReportRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ReportRequest.

        Page size is for paging and specifies the maximum number of returned rows. Page size should be >= 0. A query returns the default of 1,000 rows. The Analytics Core Reporting API returns a maximum of 100,000 rows per request, no matter how many you ask for. It can also return fewer rows than requested, if there aren't as many dimension segments as you expect. For instance, there are fewer than 300 possible values for `ga:country`, so when segmenting only by country, you can't get more than 300 rows, even if you set `pageSize` to a higher value.

        :param page_size: The page_size of this ReportRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this ReportRequest.

        A continuation token to get the next page of the results. Adding this to the request will return the rows after the pageToken. The pageToken should be the value returned in the nextPageToken parameter in the response to the GetReports request.

        :return: The page_token of this ReportRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this ReportRequest.

        A continuation token to get the next page of the results. Adding this to the request will return the rows after the pageToken. The pageToken should be the value returned in the nextPageToken parameter in the response to the GetReports request.

        :param page_token: The page_token of this ReportRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def pivots(self):
        """Gets the pivots of this ReportRequest.

        The pivot definitions. Requests can have a maximum of 2 pivots.

        :return: The pivots of this ReportRequest.
        :rtype: List[Pivot]
        """
        return self._pivots

    @pivots.setter
    def pivots(self, pivots):
        """Sets the pivots of this ReportRequest.

        The pivot definitions. Requests can have a maximum of 2 pivots.

        :param pivots: The pivots of this ReportRequest.
        :type pivots: List[Pivot]
        """

        self._pivots = pivots

    @property
    def sampling_level(self):
        """Gets the sampling_level of this ReportRequest.

        The desired report [sample](https://support.google.com/analytics/answer/2637192) size. If the the `samplingLevel` field is unspecified the `DEFAULT` sampling level is used. Every [ReportRequest](#ReportRequest) within a `batchGet` method must contain the same `samplingLevel` definition. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.

        :return: The sampling_level of this ReportRequest.
        :rtype: str
        """
        return self._sampling_level

    @sampling_level.setter
    def sampling_level(self, sampling_level):
        """Sets the sampling_level of this ReportRequest.

        The desired report [sample](https://support.google.com/analytics/answer/2637192) size. If the the `samplingLevel` field is unspecified the `DEFAULT` sampling level is used. Every [ReportRequest](#ReportRequest) within a `batchGet` method must contain the same `samplingLevel` definition. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.

        :param sampling_level: The sampling_level of this ReportRequest.
        :type sampling_level: str
        """
        allowed_values = ["SAMPLING_UNSPECIFIED", "DEFAULT", "SMALL", "LARGE"]  # noqa: E501
        if sampling_level not in allowed_values:
            raise ValueError(
                "Invalid value for `sampling_level` ({0}), must be one of {1}"
                .format(sampling_level, allowed_values)
            )

        self._sampling_level = sampling_level

    @property
    def segments(self):
        """Gets the segments of this ReportRequest.

        Segment the data returned for the request. A segment definition helps look at a subset of the segment request. A request can contain up to four segments. Every [ReportRequest](#ReportRequest) within a `batchGet` method must contain the same `segments` definition. Requests with segments must have the `ga:segment` dimension.

        :return: The segments of this ReportRequest.
        :rtype: List[Segment]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this ReportRequest.

        Segment the data returned for the request. A segment definition helps look at a subset of the segment request. A request can contain up to four segments. Every [ReportRequest](#ReportRequest) within a `batchGet` method must contain the same `segments` definition. Requests with segments must have the `ga:segment` dimension.

        :param segments: The segments of this ReportRequest.
        :type segments: List[Segment]
        """

        self._segments = segments

    @property
    def view_id(self):
        """Gets the view_id of this ReportRequest.

        The Analytics [view ID](https://support.google.com/analytics/answer/1009618) from which to retrieve data. Every [ReportRequest](#ReportRequest) within a `batchGet` method must contain the same `viewId`.

        :return: The view_id of this ReportRequest.
        :rtype: str
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this ReportRequest.

        The Analytics [view ID](https://support.google.com/analytics/answer/1009618) from which to retrieve data. Every [ReportRequest](#ReportRequest) within a `batchGet` method must contain the same `viewId`.

        :param view_id: The view_id of this ReportRequest.
        :type view_id: str
        """

        self._view_id = view_id
