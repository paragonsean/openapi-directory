# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_action: str=None, event_category: str=None, event_count: str=None, event_label: str=None, event_value: str=None):
        """EventData - a model defined in OpenAPI

        :param event_action: The event_action of this EventData.
        :param event_category: The event_category of this EventData.
        :param event_count: The event_count of this EventData.
        :param event_label: The event_label of this EventData.
        :param event_value: The event_value of this EventData.
        """
        self.openapi_types = {
            'event_action': str,
            'event_category': str,
            'event_count': str,
            'event_label': str,
            'event_value': str
        }

        self.attribute_map = {
            'event_action': 'eventAction',
            'event_category': 'eventCategory',
            'event_count': 'eventCount',
            'event_label': 'eventLabel',
            'event_value': 'eventValue'
        }

        self._event_action = event_action
        self._event_category = event_category
        self._event_count = event_count
        self._event_label = event_label
        self._event_value = event_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventData of this EventData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_action(self):
        """Gets the event_action of this EventData.

        Type of interaction with the object. Eg: 'play'.

        :return: The event_action of this EventData.
        :rtype: str
        """
        return self._event_action

    @event_action.setter
    def event_action(self, event_action):
        """Sets the event_action of this EventData.

        Type of interaction with the object. Eg: 'play'.

        :param event_action: The event_action of this EventData.
        :type event_action: str
        """

        self._event_action = event_action

    @property
    def event_category(self):
        """Gets the event_category of this EventData.

        The object on the page that was interacted with. Eg: 'Video'.

        :return: The event_category of this EventData.
        :rtype: str
        """
        return self._event_category

    @event_category.setter
    def event_category(self, event_category):
        """Sets the event_category of this EventData.

        The object on the page that was interacted with. Eg: 'Video'.

        :param event_category: The event_category of this EventData.
        :type event_category: str
        """

        self._event_category = event_category

    @property
    def event_count(self):
        """Gets the event_count of this EventData.

        Number of such events in this activity.

        :return: The event_count of this EventData.
        :rtype: str
        """
        return self._event_count

    @event_count.setter
    def event_count(self, event_count):
        """Sets the event_count of this EventData.

        Number of such events in this activity.

        :param event_count: The event_count of this EventData.
        :type event_count: str
        """

        self._event_count = event_count

    @property
    def event_label(self):
        """Gets the event_label of this EventData.

        Label attached with the event.

        :return: The event_label of this EventData.
        :rtype: str
        """
        return self._event_label

    @event_label.setter
    def event_label(self, event_label):
        """Sets the event_label of this EventData.

        Label attached with the event.

        :param event_label: The event_label of this EventData.
        :type event_label: str
        """

        self._event_label = event_label

    @property
    def event_value(self):
        """Gets the event_value of this EventData.

        Numeric value associated with the event.

        :return: The event_value of this EventData.
        :rtype: str
        """
        return self._event_value

    @event_value.setter
    def event_value(self, event_value):
        """Sets the event_value of this EventData.

        Numeric value associated with the event.

        :param event_value: The event_value of this EventData.
        :type event_value: str
        """

        self._event_value = event_value
