# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_request import ReportRequest
from openapi_server import util


class GetReportsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_requests: List[ReportRequest]=None, use_resource_quotas: bool=None):
        """GetReportsRequest - a model defined in OpenAPI

        :param report_requests: The report_requests of this GetReportsRequest.
        :param use_resource_quotas: The use_resource_quotas of this GetReportsRequest.
        """
        self.openapi_types = {
            'report_requests': List[ReportRequest],
            'use_resource_quotas': bool
        }

        self.attribute_map = {
            'report_requests': 'reportRequests',
            'use_resource_quotas': 'useResourceQuotas'
        }

        self._report_requests = report_requests
        self._use_resource_quotas = use_resource_quotas

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetReportsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetReportsRequest of this GetReportsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_requests(self):
        """Gets the report_requests of this GetReportsRequest.

        Requests, each request will have a separate response. There can be a maximum of 5 requests. All requests should have the same `dateRanges`, `viewId`, `segments`, `samplingLevel`, and `cohortGroup`.

        :return: The report_requests of this GetReportsRequest.
        :rtype: List[ReportRequest]
        """
        return self._report_requests

    @report_requests.setter
    def report_requests(self, report_requests):
        """Sets the report_requests of this GetReportsRequest.

        Requests, each request will have a separate response. There can be a maximum of 5 requests. All requests should have the same `dateRanges`, `viewId`, `segments`, `samplingLevel`, and `cohortGroup`.

        :param report_requests: The report_requests of this GetReportsRequest.
        :type report_requests: List[ReportRequest]
        """

        self._report_requests = report_requests

    @property
    def use_resource_quotas(self):
        """Gets the use_resource_quotas of this GetReportsRequest.

        Enables [resource based quotas](/analytics/devguides/reporting/core/v4/limits-quotas#analytics_reporting_api_v4), (defaults to `False`). If this field is set to `True` the per view (profile) quotas are governed by the computational cost of the request. Note that using cost based quotas will higher enable sampling rates. (10 Million for `SMALL`, 100M for `LARGE`. See the [limits and quotas documentation](/analytics/devguides/reporting/core/v4/limits-quotas#analytics_reporting_api_v4) for details.

        :return: The use_resource_quotas of this GetReportsRequest.
        :rtype: bool
        """
        return self._use_resource_quotas

    @use_resource_quotas.setter
    def use_resource_quotas(self, use_resource_quotas):
        """Sets the use_resource_quotas of this GetReportsRequest.

        Enables [resource based quotas](/analytics/devguides/reporting/core/v4/limits-quotas#analytics_reporting_api_v4), (defaults to `False`). If this field is set to `True` the per view (profile) quotas are governed by the computational cost of the request. Note that using cost based quotas will higher enable sampling rates. (10 Million for `SMALL`, 100M for `LARGE`. See the [limits and quotas documentation](/analytics/devguides/reporting/core/v4/limits-quotas#analytics_reporting_api_v4) for details.

        :param use_resource_quotas: The use_resource_quotas of this GetReportsRequest.
        :type use_resource_quotas: bool
        """

        self._use_resource_quotas = use_resource_quotas
