# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.segment_filter import SegmentFilter
from openapi_server import util


class SegmentDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, segment_filters: List[SegmentFilter]=None):
        """SegmentDefinition - a model defined in OpenAPI

        :param segment_filters: The segment_filters of this SegmentDefinition.
        """
        self.openapi_types = {
            'segment_filters': List[SegmentFilter]
        }

        self.attribute_map = {
            'segment_filters': 'segmentFilters'
        }

        self._segment_filters = segment_filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentDefinition of this SegmentDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def segment_filters(self):
        """Gets the segment_filters of this SegmentDefinition.

        A segment is defined by a set of segment filters which are combined together with a logical `AND` operation.

        :return: The segment_filters of this SegmentDefinition.
        :rtype: List[SegmentFilter]
        """
        return self._segment_filters

    @segment_filters.setter
    def segment_filters(self, segment_filters):
        """Sets the segment_filters of this SegmentDefinition.

        A segment is defined by a set of segment filters which are combined together with a logical `AND` operation.

        :param segment_filters: The segment_filters of this SegmentDefinition.
        :type segment_filters: List[SegmentFilter]
        """

        self._segment_filters = segment_filters
