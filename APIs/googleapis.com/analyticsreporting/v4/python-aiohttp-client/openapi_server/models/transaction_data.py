# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransactionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_id: str=None, transaction_revenue: float=None, transaction_shipping: float=None, transaction_tax: float=None):
        """TransactionData - a model defined in OpenAPI

        :param transaction_id: The transaction_id of this TransactionData.
        :param transaction_revenue: The transaction_revenue of this TransactionData.
        :param transaction_shipping: The transaction_shipping of this TransactionData.
        :param transaction_tax: The transaction_tax of this TransactionData.
        """
        self.openapi_types = {
            'transaction_id': str,
            'transaction_revenue': float,
            'transaction_shipping': float,
            'transaction_tax': float
        }

        self.attribute_map = {
            'transaction_id': 'transactionId',
            'transaction_revenue': 'transactionRevenue',
            'transaction_shipping': 'transactionShipping',
            'transaction_tax': 'transactionTax'
        }

        self._transaction_id = transaction_id
        self._transaction_revenue = transaction_revenue
        self._transaction_shipping = transaction_shipping
        self._transaction_tax = transaction_tax

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionData of this TransactionData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_id(self):
        """Gets the transaction_id of this TransactionData.

        The transaction ID, supplied by the e-commerce tracking method, for the purchase in the shopping cart.

        :return: The transaction_id of this TransactionData.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this TransactionData.

        The transaction ID, supplied by the e-commerce tracking method, for the purchase in the shopping cart.

        :param transaction_id: The transaction_id of this TransactionData.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id

    @property
    def transaction_revenue(self):
        """Gets the transaction_revenue of this TransactionData.

        The total sale revenue (excluding shipping and tax) of the transaction.

        :return: The transaction_revenue of this TransactionData.
        :rtype: float
        """
        return self._transaction_revenue

    @transaction_revenue.setter
    def transaction_revenue(self, transaction_revenue):
        """Sets the transaction_revenue of this TransactionData.

        The total sale revenue (excluding shipping and tax) of the transaction.

        :param transaction_revenue: The transaction_revenue of this TransactionData.
        :type transaction_revenue: float
        """

        self._transaction_revenue = transaction_revenue

    @property
    def transaction_shipping(self):
        """Gets the transaction_shipping of this TransactionData.

        Total cost of shipping.

        :return: The transaction_shipping of this TransactionData.
        :rtype: float
        """
        return self._transaction_shipping

    @transaction_shipping.setter
    def transaction_shipping(self, transaction_shipping):
        """Sets the transaction_shipping of this TransactionData.

        Total cost of shipping.

        :param transaction_shipping: The transaction_shipping of this TransactionData.
        :type transaction_shipping: float
        """

        self._transaction_shipping = transaction_shipping

    @property
    def transaction_tax(self):
        """Gets the transaction_tax of this TransactionData.

        Total tax for the transaction.

        :return: The transaction_tax of this TransactionData.
        :rtype: float
        """
        return self._transaction_tax

    @transaction_tax.setter
    def transaction_tax(self, transaction_tax):
        """Sets the transaction_tax of this TransactionData.

        Total tax for the transaction.

        :param transaction_tax: The transaction_tax of this TransactionData.
        :type transaction_tax: float
        """

        self._transaction_tax = transaction_tax
