# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity import Activity
from openapi_server import util


class UserActivitySession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activities: List[Activity]=None, data_source: str=None, device_category: str=None, platform: str=None, session_date: str=None, session_id: str=None):
        """UserActivitySession - a model defined in OpenAPI

        :param activities: The activities of this UserActivitySession.
        :param data_source: The data_source of this UserActivitySession.
        :param device_category: The device_category of this UserActivitySession.
        :param platform: The platform of this UserActivitySession.
        :param session_date: The session_date of this UserActivitySession.
        :param session_id: The session_id of this UserActivitySession.
        """
        self.openapi_types = {
            'activities': List[Activity],
            'data_source': str,
            'device_category': str,
            'platform': str,
            'session_date': str,
            'session_id': str
        }

        self.attribute_map = {
            'activities': 'activities',
            'data_source': 'dataSource',
            'device_category': 'deviceCategory',
            'platform': 'platform',
            'session_date': 'sessionDate',
            'session_id': 'sessionId'
        }

        self._activities = activities
        self._data_source = data_source
        self._device_category = device_category
        self._platform = platform
        self._session_date = session_date
        self._session_id = session_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserActivitySession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserActivitySession of this UserActivitySession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activities(self):
        """Gets the activities of this UserActivitySession.

        Represents a detailed view into each of the activity in this session.

        :return: The activities of this UserActivitySession.
        :rtype: List[Activity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this UserActivitySession.

        Represents a detailed view into each of the activity in this session.

        :param activities: The activities of this UserActivitySession.
        :type activities: List[Activity]
        """

        self._activities = activities

    @property
    def data_source(self):
        """Gets the data_source of this UserActivitySession.

        The data source of a hit. By default, hits sent from analytics.js are reported as \"web\" and hits sent from the mobile SDKs are reported as \"app\". These values can be overridden in the Measurement Protocol.

        :return: The data_source of this UserActivitySession.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this UserActivitySession.

        The data source of a hit. By default, hits sent from analytics.js are reported as \"web\" and hits sent from the mobile SDKs are reported as \"app\". These values can be overridden in the Measurement Protocol.

        :param data_source: The data_source of this UserActivitySession.
        :type data_source: str
        """

        self._data_source = data_source

    @property
    def device_category(self):
        """Gets the device_category of this UserActivitySession.

        The type of device used: \"mobile\", \"tablet\" etc.

        :return: The device_category of this UserActivitySession.
        :rtype: str
        """
        return self._device_category

    @device_category.setter
    def device_category(self, device_category):
        """Sets the device_category of this UserActivitySession.

        The type of device used: \"mobile\", \"tablet\" etc.

        :param device_category: The device_category of this UserActivitySession.
        :type device_category: str
        """

        self._device_category = device_category

    @property
    def platform(self):
        """Gets the platform of this UserActivitySession.

        Platform on which the activity happened: \"android\", \"ios\" etc.

        :return: The platform of this UserActivitySession.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this UserActivitySession.

        Platform on which the activity happened: \"android\", \"ios\" etc.

        :param platform: The platform of this UserActivitySession.
        :type platform: str
        """

        self._platform = platform

    @property
    def session_date(self):
        """Gets the session_date of this UserActivitySession.

        Date of this session in ISO-8601 format.

        :return: The session_date of this UserActivitySession.
        :rtype: str
        """
        return self._session_date

    @session_date.setter
    def session_date(self, session_date):
        """Sets the session_date of this UserActivitySession.

        Date of this session in ISO-8601 format.

        :param session_date: The session_date of this UserActivitySession.
        :type session_date: str
        """

        self._session_date = session_date

    @property
    def session_id(self):
        """Gets the session_id of this UserActivitySession.

        Unique ID of the session.

        :return: The session_id of this UserActivitySession.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this UserActivitySession.

        Unique ID of the session.

        :param session_id: The session_id of this UserActivitySession.
        :type session_id: str
        """

        self._session_id = session_id
