# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server import util


class Cohort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_range: DateRange=None, name: str=None, type: str=None):
        """Cohort - a model defined in OpenAPI

        :param date_range: The date_range of this Cohort.
        :param name: The name of this Cohort.
        :param type: The type of this Cohort.
        """
        self.openapi_types = {
            'date_range': DateRange,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'date_range': 'dateRange',
            'name': 'name',
            'type': 'type'
        }

        self._date_range = date_range
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cohort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cohort of this Cohort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_range(self):
        """Gets the date_range of this Cohort.


        :return: The date_range of this Cohort.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this Cohort.


        :param date_range: The date_range of this Cohort.
        :type date_range: DateRange
        """

        self._date_range = date_range

    @property
    def name(self):
        """Gets the name of this Cohort.

        A unique name for the cohort. If not defined name will be auto-generated with values cohort_[1234...].

        :return: The name of this Cohort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cohort.

        A unique name for the cohort. If not defined name will be auto-generated with values cohort_[1234...].

        :param name: The name of this Cohort.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Cohort.

        Type of the cohort. The only supported type as of now is `FIRST_VISIT_DATE`. If this field is unspecified the cohort is treated as `FIRST_VISIT_DATE` type cohort.

        :return: The type of this Cohort.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Cohort.

        Type of the cohort. The only supported type as of now is `FIRST_VISIT_DATE`. If this field is unspecified the cohort is treated as `FIRST_VISIT_DATE` type cohort.

        :param type: The type of this Cohort.
        :type type: str
        """
        allowed_values = ["UNSPECIFIED_COHORT_TYPE", "FIRST_VISIT_DATE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
