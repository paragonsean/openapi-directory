# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dynamic_segment import DynamicSegment
from openapi_server import util


class Segment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dynamic_segment: DynamicSegment=None, segment_id: str=None):
        """Segment - a model defined in OpenAPI

        :param dynamic_segment: The dynamic_segment of this Segment.
        :param segment_id: The segment_id of this Segment.
        """
        self.openapi_types = {
            'dynamic_segment': DynamicSegment,
            'segment_id': str
        }

        self.attribute_map = {
            'dynamic_segment': 'dynamicSegment',
            'segment_id': 'segmentId'
        }

        self._dynamic_segment = dynamic_segment
        self._segment_id = segment_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Segment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Segment of this Segment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dynamic_segment(self):
        """Gets the dynamic_segment of this Segment.


        :return: The dynamic_segment of this Segment.
        :rtype: DynamicSegment
        """
        return self._dynamic_segment

    @dynamic_segment.setter
    def dynamic_segment(self, dynamic_segment):
        """Sets the dynamic_segment of this Segment.


        :param dynamic_segment: The dynamic_segment of this Segment.
        :type dynamic_segment: DynamicSegment
        """

        self._dynamic_segment = dynamic_segment

    @property
    def segment_id(self):
        """Gets the segment_id of this Segment.

        The segment ID of a built-in or custom segment, for example `gaid::-3`.

        :return: The segment_id of this Segment.
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this Segment.

        The segment ID of a built-in or custom segment, for example `gaid::-3`.

        :param segment_id: The segment_id of this Segment.
        :type segment_id: str
        """

        self._segment_id = segment_id
