# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report import Report
from openapi_server.models.resource_quotas_remaining import ResourceQuotasRemaining
from openapi_server import util


class GetReportsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query_cost: int=None, reports: List[Report]=None, resource_quotas_remaining: ResourceQuotasRemaining=None):
        """GetReportsResponse - a model defined in OpenAPI

        :param query_cost: The query_cost of this GetReportsResponse.
        :param reports: The reports of this GetReportsResponse.
        :param resource_quotas_remaining: The resource_quotas_remaining of this GetReportsResponse.
        """
        self.openapi_types = {
            'query_cost': int,
            'reports': List[Report],
            'resource_quotas_remaining': ResourceQuotasRemaining
        }

        self.attribute_map = {
            'query_cost': 'queryCost',
            'reports': 'reports',
            'resource_quotas_remaining': 'resourceQuotasRemaining'
        }

        self._query_cost = query_cost
        self._reports = reports
        self._resource_quotas_remaining = resource_quotas_remaining

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetReportsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetReportsResponse of this GetReportsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query_cost(self):
        """Gets the query_cost of this GetReportsResponse.

        The amount of resource quota tokens deducted to execute the query. Includes all responses.

        :return: The query_cost of this GetReportsResponse.
        :rtype: int
        """
        return self._query_cost

    @query_cost.setter
    def query_cost(self, query_cost):
        """Sets the query_cost of this GetReportsResponse.

        The amount of resource quota tokens deducted to execute the query. Includes all responses.

        :param query_cost: The query_cost of this GetReportsResponse.
        :type query_cost: int
        """

        self._query_cost = query_cost

    @property
    def reports(self):
        """Gets the reports of this GetReportsResponse.

        Responses corresponding to each of the request.

        :return: The reports of this GetReportsResponse.
        :rtype: List[Report]
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this GetReportsResponse.

        Responses corresponding to each of the request.

        :param reports: The reports of this GetReportsResponse.
        :type reports: List[Report]
        """

        self._reports = reports

    @property
    def resource_quotas_remaining(self):
        """Gets the resource_quotas_remaining of this GetReportsResponse.


        :return: The resource_quotas_remaining of this GetReportsResponse.
        :rtype: ResourceQuotasRemaining
        """
        return self._resource_quotas_remaining

    @resource_quotas_remaining.setter
    def resource_quotas_remaining(self, resource_quotas_remaining):
        """Sets the resource_quotas_remaining of this GetReportsResponse.


        :param resource_quotas_remaining: The resource_quotas_remaining of this GetReportsResponse.
        :type resource_quotas_remaining: ResourceQuotasRemaining
        """

        self._resource_quotas_remaining = resource_quotas_remaining
