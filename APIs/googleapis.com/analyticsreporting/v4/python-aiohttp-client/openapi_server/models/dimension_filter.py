# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DimensionFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_sensitive: bool=None, dimension_name: str=None, expressions: List[str]=None, _not: bool=None, operator: str=None):
        """DimensionFilter - a model defined in OpenAPI

        :param case_sensitive: The case_sensitive of this DimensionFilter.
        :param dimension_name: The dimension_name of this DimensionFilter.
        :param expressions: The expressions of this DimensionFilter.
        :param _not: The _not of this DimensionFilter.
        :param operator: The operator of this DimensionFilter.
        """
        self.openapi_types = {
            'case_sensitive': bool,
            'dimension_name': str,
            'expressions': List[str],
            '_not': bool,
            'operator': str
        }

        self.attribute_map = {
            'case_sensitive': 'caseSensitive',
            'dimension_name': 'dimensionName',
            'expressions': 'expressions',
            '_not': 'not',
            'operator': 'operator'
        }

        self._case_sensitive = case_sensitive
        self._dimension_name = dimension_name
        self._expressions = expressions
        self.__not = _not
        self._operator = operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DimensionFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DimensionFilter of this DimensionFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this DimensionFilter.

        Should the match be case sensitive? Default is false.

        :return: The case_sensitive of this DimensionFilter.
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this DimensionFilter.

        Should the match be case sensitive? Default is false.

        :param case_sensitive: The case_sensitive of this DimensionFilter.
        :type case_sensitive: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def dimension_name(self):
        """Gets the dimension_name of this DimensionFilter.

        The dimension to filter on. A DimensionFilter must contain a dimension.

        :return: The dimension_name of this DimensionFilter.
        :rtype: str
        """
        return self._dimension_name

    @dimension_name.setter
    def dimension_name(self, dimension_name):
        """Sets the dimension_name of this DimensionFilter.

        The dimension to filter on. A DimensionFilter must contain a dimension.

        :param dimension_name: The dimension_name of this DimensionFilter.
        :type dimension_name: str
        """

        self._dimension_name = dimension_name

    @property
    def expressions(self):
        """Gets the expressions of this DimensionFilter.

        Strings or regular expression to match against. Only the first value of the list is used for comparison unless the operator is `IN_LIST`. If `IN_LIST` operator, then the entire list is used to filter the dimensions as explained in the description of the `IN_LIST` operator.

        :return: The expressions of this DimensionFilter.
        :rtype: List[str]
        """
        return self._expressions

    @expressions.setter
    def expressions(self, expressions):
        """Sets the expressions of this DimensionFilter.

        Strings or regular expression to match against. Only the first value of the list is used for comparison unless the operator is `IN_LIST`. If `IN_LIST` operator, then the entire list is used to filter the dimensions as explained in the description of the `IN_LIST` operator.

        :param expressions: The expressions of this DimensionFilter.
        :type expressions: List[str]
        """

        self._expressions = expressions

    @property
    def _not(self):
        """Gets the _not of this DimensionFilter.

        Logical `NOT` operator. If this boolean is set to true, then the matching dimension values will be excluded in the report. The default is false.

        :return: The _not of this DimensionFilter.
        :rtype: bool
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this DimensionFilter.

        Logical `NOT` operator. If this boolean is set to true, then the matching dimension values will be excluded in the report. The default is false.

        :param _not: The _not of this DimensionFilter.
        :type _not: bool
        """

        self.__not = _not

    @property
    def operator(self):
        """Gets the operator of this DimensionFilter.

        How to match the dimension to the expression. The default is REGEXP.

        :return: The operator of this DimensionFilter.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this DimensionFilter.

        How to match the dimension to the expression. The default is REGEXP.

        :param operator: The operator of this DimensionFilter.
        :type operator: str
        """
        allowed_values = ["OPERATOR_UNSPECIFIED", "REGEXP", "BEGINS_WITH", "ENDS_WITH", "PARTIAL", "EXACT", "NUMERIC_EQUAL", "NUMERIC_GREATER_THAN", "NUMERIC_LESS_THAN", "IN_LIST"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator
