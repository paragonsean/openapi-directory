# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_dimension import CustomDimension
from openapi_server.models.ecommerce_data import EcommerceData
from openapi_server.models.event_data import EventData
from openapi_server.models.goal_set_data import GoalSetData
from openapi_server.models.pageview_data import PageviewData
from openapi_server.models.screenview_data import ScreenviewData
from openapi_server import util


class Activity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_time: str=None, activity_type: str=None, appview: ScreenviewData=None, campaign: str=None, channel_grouping: str=None, custom_dimension: List[CustomDimension]=None, ecommerce: EcommerceData=None, event: EventData=None, goals: GoalSetData=None, hostname: str=None, keyword: str=None, landing_page_path: str=None, medium: str=None, pageview: PageviewData=None, source: str=None):
        """Activity - a model defined in OpenAPI

        :param activity_time: The activity_time of this Activity.
        :param activity_type: The activity_type of this Activity.
        :param appview: The appview of this Activity.
        :param campaign: The campaign of this Activity.
        :param channel_grouping: The channel_grouping of this Activity.
        :param custom_dimension: The custom_dimension of this Activity.
        :param ecommerce: The ecommerce of this Activity.
        :param event: The event of this Activity.
        :param goals: The goals of this Activity.
        :param hostname: The hostname of this Activity.
        :param keyword: The keyword of this Activity.
        :param landing_page_path: The landing_page_path of this Activity.
        :param medium: The medium of this Activity.
        :param pageview: The pageview of this Activity.
        :param source: The source of this Activity.
        """
        self.openapi_types = {
            'activity_time': str,
            'activity_type': str,
            'appview': ScreenviewData,
            'campaign': str,
            'channel_grouping': str,
            'custom_dimension': List[CustomDimension],
            'ecommerce': EcommerceData,
            'event': EventData,
            'goals': GoalSetData,
            'hostname': str,
            'keyword': str,
            'landing_page_path': str,
            'medium': str,
            'pageview': PageviewData,
            'source': str
        }

        self.attribute_map = {
            'activity_time': 'activityTime',
            'activity_type': 'activityType',
            'appview': 'appview',
            'campaign': 'campaign',
            'channel_grouping': 'channelGrouping',
            'custom_dimension': 'customDimension',
            'ecommerce': 'ecommerce',
            'event': 'event',
            'goals': 'goals',
            'hostname': 'hostname',
            'keyword': 'keyword',
            'landing_page_path': 'landingPagePath',
            'medium': 'medium',
            'pageview': 'pageview',
            'source': 'source'
        }

        self._activity_time = activity_time
        self._activity_type = activity_type
        self._appview = appview
        self._campaign = campaign
        self._channel_grouping = channel_grouping
        self._custom_dimension = custom_dimension
        self._ecommerce = ecommerce
        self._event = event
        self._goals = goals
        self._hostname = hostname
        self._keyword = keyword
        self._landing_page_path = landing_page_path
        self._medium = medium
        self._pageview = pageview
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activity of this Activity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_time(self):
        """Gets the activity_time of this Activity.

        Timestamp of the activity. If activities for a visit cross midnight and occur in two separate dates, then two sessions (one per date) share the session identifier. For example, say session ID 113472 has activity within 2019-08-20, and session ID 243742 has activity within 2019-08-25 and 2019-08-26. Session ID 113472 is one session, and session ID 243742 is two sessions.

        :return: The activity_time of this Activity.
        :rtype: str
        """
        return self._activity_time

    @activity_time.setter
    def activity_time(self, activity_time):
        """Sets the activity_time of this Activity.

        Timestamp of the activity. If activities for a visit cross midnight and occur in two separate dates, then two sessions (one per date) share the session identifier. For example, say session ID 113472 has activity within 2019-08-20, and session ID 243742 has activity within 2019-08-25 and 2019-08-26. Session ID 113472 is one session, and session ID 243742 is two sessions.

        :param activity_time: The activity_time of this Activity.
        :type activity_time: str
        """

        self._activity_time = activity_time

    @property
    def activity_type(self):
        """Gets the activity_type of this Activity.

        Type of this activity.

        :return: The activity_type of this Activity.
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this Activity.

        Type of this activity.

        :param activity_type: The activity_type of this Activity.
        :type activity_type: str
        """
        allowed_values = ["ACTIVITY_TYPE_UNSPECIFIED", "PAGEVIEW", "SCREENVIEW", "GOAL", "ECOMMERCE", "EVENT"]  # noqa: E501
        if activity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_type` ({0}), must be one of {1}"
                .format(activity_type, allowed_values)
            )

        self._activity_type = activity_type

    @property
    def appview(self):
        """Gets the appview of this Activity.


        :return: The appview of this Activity.
        :rtype: ScreenviewData
        """
        return self._appview

    @appview.setter
    def appview(self, appview):
        """Sets the appview of this Activity.


        :param appview: The appview of this Activity.
        :type appview: ScreenviewData
        """

        self._appview = appview

    @property
    def campaign(self):
        """Gets the campaign of this Activity.

        For manual campaign tracking, it is the value of the utm_campaign campaign tracking parameter. For AdWords autotagging, it is the name(s) of the online ad campaign(s) you use for the property. If you use neither, its value is (not set).

        :return: The campaign of this Activity.
        :rtype: str
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this Activity.

        For manual campaign tracking, it is the value of the utm_campaign campaign tracking parameter. For AdWords autotagging, it is the name(s) of the online ad campaign(s) you use for the property. If you use neither, its value is (not set).

        :param campaign: The campaign of this Activity.
        :type campaign: str
        """

        self._campaign = campaign

    @property
    def channel_grouping(self):
        """Gets the channel_grouping of this Activity.

        The Channel Group associated with an end user's session for this View (defined by the View's Channel Groupings).

        :return: The channel_grouping of this Activity.
        :rtype: str
        """
        return self._channel_grouping

    @channel_grouping.setter
    def channel_grouping(self, channel_grouping):
        """Sets the channel_grouping of this Activity.

        The Channel Group associated with an end user's session for this View (defined by the View's Channel Groupings).

        :param channel_grouping: The channel_grouping of this Activity.
        :type channel_grouping: str
        """

        self._channel_grouping = channel_grouping

    @property
    def custom_dimension(self):
        """Gets the custom_dimension of this Activity.

        A list of all custom dimensions associated with this activity.

        :return: The custom_dimension of this Activity.
        :rtype: List[CustomDimension]
        """
        return self._custom_dimension

    @custom_dimension.setter
    def custom_dimension(self, custom_dimension):
        """Sets the custom_dimension of this Activity.

        A list of all custom dimensions associated with this activity.

        :param custom_dimension: The custom_dimension of this Activity.
        :type custom_dimension: List[CustomDimension]
        """

        self._custom_dimension = custom_dimension

    @property
    def ecommerce(self):
        """Gets the ecommerce of this Activity.


        :return: The ecommerce of this Activity.
        :rtype: EcommerceData
        """
        return self._ecommerce

    @ecommerce.setter
    def ecommerce(self, ecommerce):
        """Sets the ecommerce of this Activity.


        :param ecommerce: The ecommerce of this Activity.
        :type ecommerce: EcommerceData
        """

        self._ecommerce = ecommerce

    @property
    def event(self):
        """Gets the event of this Activity.


        :return: The event of this Activity.
        :rtype: EventData
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Activity.


        :param event: The event of this Activity.
        :type event: EventData
        """

        self._event = event

    @property
    def goals(self):
        """Gets the goals of this Activity.


        :return: The goals of this Activity.
        :rtype: GoalSetData
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this Activity.


        :param goals: The goals of this Activity.
        :type goals: GoalSetData
        """

        self._goals = goals

    @property
    def hostname(self):
        """Gets the hostname of this Activity.

        The hostname from which the tracking request was made.

        :return: The hostname of this Activity.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Activity.

        The hostname from which the tracking request was made.

        :param hostname: The hostname of this Activity.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def keyword(self):
        """Gets the keyword of this Activity.

        For manual campaign tracking, it is the value of the utm_term campaign tracking parameter. For AdWords traffic, it contains the best matching targeting criteria. For the display network, where multiple targeting criteria could have caused the ad to show up, it returns the best matching targeting criteria as selected by Ads. This could be display_keyword, site placement, boomuserlist, user_interest, age, or gender. Otherwise its value is (not set).

        :return: The keyword of this Activity.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this Activity.

        For manual campaign tracking, it is the value of the utm_term campaign tracking parameter. For AdWords traffic, it contains the best matching targeting criteria. For the display network, where multiple targeting criteria could have caused the ad to show up, it returns the best matching targeting criteria as selected by Ads. This could be display_keyword, site placement, boomuserlist, user_interest, age, or gender. Otherwise its value is (not set).

        :param keyword: The keyword of this Activity.
        :type keyword: str
        """

        self._keyword = keyword

    @property
    def landing_page_path(self):
        """Gets the landing_page_path of this Activity.

        The first page in users' sessions, or the landing page.

        :return: The landing_page_path of this Activity.
        :rtype: str
        """
        return self._landing_page_path

    @landing_page_path.setter
    def landing_page_path(self, landing_page_path):
        """Sets the landing_page_path of this Activity.

        The first page in users' sessions, or the landing page.

        :param landing_page_path: The landing_page_path of this Activity.
        :type landing_page_path: str
        """

        self._landing_page_path = landing_page_path

    @property
    def medium(self):
        """Gets the medium of this Activity.

        The type of referrals. For manual campaign tracking, it is the value of the utm_medium campaign tracking parameter. For AdWords autotagging, it is cpc. If users came from a search engine detected by Google Analytics, it is organic. If the referrer is not a search engine, it is referral. If users came directly to the property and document.referrer is empty, its value is (none).

        :return: The medium of this Activity.
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this Activity.

        The type of referrals. For manual campaign tracking, it is the value of the utm_medium campaign tracking parameter. For AdWords autotagging, it is cpc. If users came from a search engine detected by Google Analytics, it is organic. If the referrer is not a search engine, it is referral. If users came directly to the property and document.referrer is empty, its value is (none).

        :param medium: The medium of this Activity.
        :type medium: str
        """

        self._medium = medium

    @property
    def pageview(self):
        """Gets the pageview of this Activity.


        :return: The pageview of this Activity.
        :rtype: PageviewData
        """
        return self._pageview

    @pageview.setter
    def pageview(self, pageview):
        """Sets the pageview of this Activity.


        :param pageview: The pageview of this Activity.
        :type pageview: PageviewData
        """

        self._pageview = pageview

    @property
    def source(self):
        """Gets the source of this Activity.

        The source of referrals. For manual campaign tracking, it is the value of the utm_source campaign tracking parameter. For AdWords autotagging, it is google. If you use neither, it is the domain of the source (e.g., document.referrer) referring the users. It may also contain a port address. If users arrived without a referrer, its value is (direct).

        :return: The source of this Activity.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Activity.

        The source of referrals. For manual campaign tracking, it is the value of the utm_source campaign tracking parameter. For AdWords autotagging, it is google. If you use neither, it is the domain of the source (e.g., document.referrer) referring the users. It may also contain a port address. If users arrived without a referrer, its value is (direct).

        :param source: The source of this Activity.
        :type source: str
        """

        self._source = source
