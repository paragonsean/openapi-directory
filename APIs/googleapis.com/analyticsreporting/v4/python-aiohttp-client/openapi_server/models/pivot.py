# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server.models.dimension_filter_clause import DimensionFilterClause
from openapi_server.models.metric import Metric
from openapi_server import util


class Pivot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_filter_clauses: List[DimensionFilterClause]=None, dimensions: List[Dimension]=None, max_group_count: int=None, metrics: List[Metric]=None, start_group: int=None):
        """Pivot - a model defined in OpenAPI

        :param dimension_filter_clauses: The dimension_filter_clauses of this Pivot.
        :param dimensions: The dimensions of this Pivot.
        :param max_group_count: The max_group_count of this Pivot.
        :param metrics: The metrics of this Pivot.
        :param start_group: The start_group of this Pivot.
        """
        self.openapi_types = {
            'dimension_filter_clauses': List[DimensionFilterClause],
            'dimensions': List[Dimension],
            'max_group_count': int,
            'metrics': List[Metric],
            'start_group': int
        }

        self.attribute_map = {
            'dimension_filter_clauses': 'dimensionFilterClauses',
            'dimensions': 'dimensions',
            'max_group_count': 'maxGroupCount',
            'metrics': 'metrics',
            'start_group': 'startGroup'
        }

        self._dimension_filter_clauses = dimension_filter_clauses
        self._dimensions = dimensions
        self._max_group_count = max_group_count
        self._metrics = metrics
        self._start_group = start_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pivot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pivot of this Pivot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_filter_clauses(self):
        """Gets the dimension_filter_clauses of this Pivot.

        DimensionFilterClauses are logically combined with an `AND` operator: only data that is included by all these DimensionFilterClauses contributes to the values in this pivot region. Dimension filters can be used to restrict the columns shown in the pivot region. For example if you have `ga:browser` as the requested dimension in the pivot region, and you specify key filters to restrict `ga:browser` to only \"IE\" or \"Firefox\", then only those two browsers would show up as columns.

        :return: The dimension_filter_clauses of this Pivot.
        :rtype: List[DimensionFilterClause]
        """
        return self._dimension_filter_clauses

    @dimension_filter_clauses.setter
    def dimension_filter_clauses(self, dimension_filter_clauses):
        """Sets the dimension_filter_clauses of this Pivot.

        DimensionFilterClauses are logically combined with an `AND` operator: only data that is included by all these DimensionFilterClauses contributes to the values in this pivot region. Dimension filters can be used to restrict the columns shown in the pivot region. For example if you have `ga:browser` as the requested dimension in the pivot region, and you specify key filters to restrict `ga:browser` to only \"IE\" or \"Firefox\", then only those two browsers would show up as columns.

        :param dimension_filter_clauses: The dimension_filter_clauses of this Pivot.
        :type dimension_filter_clauses: List[DimensionFilterClause]
        """

        self._dimension_filter_clauses = dimension_filter_clauses

    @property
    def dimensions(self):
        """Gets the dimensions of this Pivot.

        A list of dimensions to show as pivot columns. A Pivot can have a maximum of 4 dimensions. Pivot dimensions are part of the restriction on the total number of dimensions allowed in the request.

        :return: The dimensions of this Pivot.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Pivot.

        A list of dimensions to show as pivot columns. A Pivot can have a maximum of 4 dimensions. Pivot dimensions are part of the restriction on the total number of dimensions allowed in the request.

        :param dimensions: The dimensions of this Pivot.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def max_group_count(self):
        """Gets the max_group_count of this Pivot.

        Specifies the maximum number of groups to return. The default value is 10, also the maximum value is 1,000.

        :return: The max_group_count of this Pivot.
        :rtype: int
        """
        return self._max_group_count

    @max_group_count.setter
    def max_group_count(self, max_group_count):
        """Sets the max_group_count of this Pivot.

        Specifies the maximum number of groups to return. The default value is 10, also the maximum value is 1,000.

        :param max_group_count: The max_group_count of this Pivot.
        :type max_group_count: int
        """

        self._max_group_count = max_group_count

    @property
    def metrics(self):
        """Gets the metrics of this Pivot.

        The pivot metrics. Pivot metrics are part of the restriction on total number of metrics allowed in the request.

        :return: The metrics of this Pivot.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this Pivot.

        The pivot metrics. Pivot metrics are part of the restriction on total number of metrics allowed in the request.

        :param metrics: The metrics of this Pivot.
        :type metrics: List[Metric]
        """

        self._metrics = metrics

    @property
    def start_group(self):
        """Gets the start_group of this Pivot.

        If k metrics were requested, then the response will contain some data-dependent multiple of k columns in the report. E.g., if you pivoted on the dimension `ga:browser` then you'd get k columns for \"Firefox\", k columns for \"IE\", k columns for \"Chrome\", etc. The ordering of the groups of columns is determined by descending order of \"total\" for the first of the k values. Ties are broken by lexicographic ordering of the first pivot dimension, then lexicographic ordering of the second pivot dimension, and so on. E.g., if the totals for the first value for Firefox, IE, and Chrome were 8, 2, 8, respectively, the order of columns would be Chrome, Firefox, IE. The following let you choose which of the groups of k columns are included in the response.

        :return: The start_group of this Pivot.
        :rtype: int
        """
        return self._start_group

    @start_group.setter
    def start_group(self, start_group):
        """Sets the start_group of this Pivot.

        If k metrics were requested, then the response will contain some data-dependent multiple of k columns in the report. E.g., if you pivoted on the dimension `ga:browser` then you'd get k columns for \"Firefox\", k columns for \"IE\", k columns for \"Chrome\", etc. The ordering of the groups of columns is determined by descending order of \"total\" for the first of the k values. Ties are broken by lexicographic ordering of the first pivot dimension, then lexicographic ordering of the second pivot dimension, and so on. E.g., if the totals for the first value for Firefox, IE, and Chrome were 8, 2, 8, respectively, the order of columns would be Chrome, Firefox, IE. The following let you choose which of the groups of k columns are included in the response.

        :param start_group: The start_group of this Pivot.
        :type start_group: int
        """

        self._start_group = start_group
