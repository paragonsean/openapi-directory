# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.or_filters_for_segment import OrFiltersForSegment
from openapi_server import util


class SegmentSequenceStep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, match_type: str=None, or_filters_for_segment: List[OrFiltersForSegment]=None):
        """SegmentSequenceStep - a model defined in OpenAPI

        :param match_type: The match_type of this SegmentSequenceStep.
        :param or_filters_for_segment: The or_filters_for_segment of this SegmentSequenceStep.
        """
        self.openapi_types = {
            'match_type': str,
            'or_filters_for_segment': List[OrFiltersForSegment]
        }

        self.attribute_map = {
            'match_type': 'matchType',
            'or_filters_for_segment': 'orFiltersForSegment'
        }

        self._match_type = match_type
        self._or_filters_for_segment = or_filters_for_segment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentSequenceStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentSequenceStep of this SegmentSequenceStep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def match_type(self):
        """Gets the match_type of this SegmentSequenceStep.

        Specifies if the step immediately precedes or can be any time before the next step.

        :return: The match_type of this SegmentSequenceStep.
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this SegmentSequenceStep.

        Specifies if the step immediately precedes or can be any time before the next step.

        :param match_type: The match_type of this SegmentSequenceStep.
        :type match_type: str
        """
        allowed_values = ["UNSPECIFIED_MATCH_TYPE", "PRECEDES", "IMMEDIATELY_PRECEDES"]  # noqa: E501
        if match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `match_type` ({0}), must be one of {1}"
                .format(match_type, allowed_values)
            )

        self._match_type = match_type

    @property
    def or_filters_for_segment(self):
        """Gets the or_filters_for_segment of this SegmentSequenceStep.

        A sequence is specified with a list of Or grouped filters which are combined with `AND` operator.

        :return: The or_filters_for_segment of this SegmentSequenceStep.
        :rtype: List[OrFiltersForSegment]
        """
        return self._or_filters_for_segment

    @or_filters_for_segment.setter
    def or_filters_for_segment(self, or_filters_for_segment):
        """Sets the or_filters_for_segment of this SegmentSequenceStep.

        A sequence is specified with a list of Or grouped filters which are combined with `AND` operator.

        :param or_filters_for_segment: The or_filters_for_segment of this SegmentSequenceStep.
        :type or_filters_for_segment: List[OrFiltersForSegment]
        """

        self._or_filters_for_segment = or_filters_for_segment
