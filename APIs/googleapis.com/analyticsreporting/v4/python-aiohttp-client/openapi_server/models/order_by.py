# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderBy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_name: str=None, order_type: str=None, sort_order: str=None):
        """OrderBy - a model defined in OpenAPI

        :param field_name: The field_name of this OrderBy.
        :param order_type: The order_type of this OrderBy.
        :param sort_order: The sort_order of this OrderBy.
        """
        self.openapi_types = {
            'field_name': str,
            'order_type': str,
            'sort_order': str
        }

        self.attribute_map = {
            'field_name': 'fieldName',
            'order_type': 'orderType',
            'sort_order': 'sortOrder'
        }

        self._field_name = field_name
        self._order_type = order_type
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderBy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderBy of this OrderBy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_name(self):
        """Gets the field_name of this OrderBy.

        The field which to sort by. The default sort order is ascending. Example: `ga:browser`. Note, that you can only specify one field for sort here. For example, `ga:browser, ga:city` is not valid.

        :return: The field_name of this OrderBy.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this OrderBy.

        The field which to sort by. The default sort order is ascending. Example: `ga:browser`. Note, that you can only specify one field for sort here. For example, `ga:browser, ga:city` is not valid.

        :param field_name: The field_name of this OrderBy.
        :type field_name: str
        """

        self._field_name = field_name

    @property
    def order_type(self):
        """Gets the order_type of this OrderBy.

        The order type. The default orderType is `VALUE`.

        :return: The order_type of this OrderBy.
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this OrderBy.

        The order type. The default orderType is `VALUE`.

        :param order_type: The order_type of this OrderBy.
        :type order_type: str
        """
        allowed_values = ["ORDER_TYPE_UNSPECIFIED", "VALUE", "DELTA", "SMART", "HISTOGRAM_BUCKET", "DIMENSION_AS_INTEGER"]  # noqa: E501
        if order_type not in allowed_values:
            raise ValueError(
                "Invalid value for `order_type` ({0}), must be one of {1}"
                .format(order_type, allowed_values)
            )

        self._order_type = order_type

    @property
    def sort_order(self):
        """Gets the sort_order of this OrderBy.

        The sorting order for the field.

        :return: The sort_order of this OrderBy.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this OrderBy.

        The sorting order for the field.

        :param sort_order: The sort_order of this OrderBy.
        :type sort_order: str
        """
        allowed_values = ["SORT_ORDER_UNSPECIFIED", "ASCENDING", "DESCENDING"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order
