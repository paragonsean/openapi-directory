# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Metric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, expression: str=None, formatting_type: str=None):
        """Metric - a model defined in OpenAPI

        :param alias: The alias of this Metric.
        :param expression: The expression of this Metric.
        :param formatting_type: The formatting_type of this Metric.
        """
        self.openapi_types = {
            'alias': str,
            'expression': str,
            'formatting_type': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'expression': 'expression',
            'formatting_type': 'formattingType'
        }

        self._alias = alias
        self._expression = expression
        self._formatting_type = formatting_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metric of this Metric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this Metric.

        An alias for the metric expression is an alternate name for the expression. The alias can be used for filtering and sorting. This field is optional and is useful if the expression is not a single metric but a complex expression which cannot be used in filtering and sorting. The alias is also used in the response column header.

        :return: The alias of this Metric.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this Metric.

        An alias for the metric expression is an alternate name for the expression. The alias can be used for filtering and sorting. This field is optional and is useful if the expression is not a single metric but a complex expression which cannot be used in filtering and sorting. The alias is also used in the response column header.

        :param alias: The alias of this Metric.
        :type alias: str
        """

        self._alias = alias

    @property
    def expression(self):
        """Gets the expression of this Metric.

        A metric expression in the request. An expression is constructed from one or more metrics and numbers. Accepted operators include: Plus (+), Minus (-), Negation (Unary -), Divided by (/), Multiplied by (*), Parenthesis, Positive cardinal numbers (0-9), can include decimals and is limited to 1024 characters. Example `ga:totalRefunds/ga:users`, in most cases the metric expression is just a single metric name like `ga:users`. Adding mixed `MetricType` (E.g., `CURRENCY` + `PERCENTAGE`) metrics will result in unexpected results.

        :return: The expression of this Metric.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this Metric.

        A metric expression in the request. An expression is constructed from one or more metrics and numbers. Accepted operators include: Plus (+), Minus (-), Negation (Unary -), Divided by (/), Multiplied by (*), Parenthesis, Positive cardinal numbers (0-9), can include decimals and is limited to 1024 characters. Example `ga:totalRefunds/ga:users`, in most cases the metric expression is just a single metric name like `ga:users`. Adding mixed `MetricType` (E.g., `CURRENCY` + `PERCENTAGE`) metrics will result in unexpected results.

        :param expression: The expression of this Metric.
        :type expression: str
        """

        self._expression = expression

    @property
    def formatting_type(self):
        """Gets the formatting_type of this Metric.

        Specifies how the metric expression should be formatted, for example `INTEGER`.

        :return: The formatting_type of this Metric.
        :rtype: str
        """
        return self._formatting_type

    @formatting_type.setter
    def formatting_type(self, formatting_type):
        """Sets the formatting_type of this Metric.

        Specifies how the metric expression should be formatted, for example `INTEGER`.

        :param formatting_type: The formatting_type of this Metric.
        :type formatting_type: str
        """
        allowed_values = ["METRIC_TYPE_UNSPECIFIED", "INTEGER", "FLOAT", "CURRENCY", "PERCENT", "TIME"]  # noqa: E501
        if formatting_type not in allowed_values:
            raise ValueError(
                "Invalid value for `formatting_type` ({0}), must be one of {1}"
                .format(formatting_type, allowed_values)
            )

        self._formatting_type = formatting_type
