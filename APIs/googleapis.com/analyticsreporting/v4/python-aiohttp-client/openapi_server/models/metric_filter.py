# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetricFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparison_value: str=None, metric_name: str=None, _not: bool=None, operator: str=None):
        """MetricFilter - a model defined in OpenAPI

        :param comparison_value: The comparison_value of this MetricFilter.
        :param metric_name: The metric_name of this MetricFilter.
        :param _not: The _not of this MetricFilter.
        :param operator: The operator of this MetricFilter.
        """
        self.openapi_types = {
            'comparison_value': str,
            'metric_name': str,
            '_not': bool,
            'operator': str
        }

        self.attribute_map = {
            'comparison_value': 'comparisonValue',
            'metric_name': 'metricName',
            '_not': 'not',
            'operator': 'operator'
        }

        self._comparison_value = comparison_value
        self._metric_name = metric_name
        self.__not = _not
        self._operator = operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricFilter of this MetricFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparison_value(self):
        """Gets the comparison_value of this MetricFilter.

        The value to compare against.

        :return: The comparison_value of this MetricFilter.
        :rtype: str
        """
        return self._comparison_value

    @comparison_value.setter
    def comparison_value(self, comparison_value):
        """Sets the comparison_value of this MetricFilter.

        The value to compare against.

        :param comparison_value: The comparison_value of this MetricFilter.
        :type comparison_value: str
        """

        self._comparison_value = comparison_value

    @property
    def metric_name(self):
        """Gets the metric_name of this MetricFilter.

        The metric that will be filtered on. A metricFilter must contain a metric name. A metric name can be an alias earlier defined as a metric or it can also be a metric expression.

        :return: The metric_name of this MetricFilter.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this MetricFilter.

        The metric that will be filtered on. A metricFilter must contain a metric name. A metric name can be an alias earlier defined as a metric or it can also be a metric expression.

        :param metric_name: The metric_name of this MetricFilter.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def _not(self):
        """Gets the _not of this MetricFilter.

        Logical `NOT` operator. If this boolean is set to true, then the matching metric values will be excluded in the report. The default is false.

        :return: The _not of this MetricFilter.
        :rtype: bool
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this MetricFilter.

        Logical `NOT` operator. If this boolean is set to true, then the matching metric values will be excluded in the report. The default is false.

        :param _not: The _not of this MetricFilter.
        :type _not: bool
        """

        self.__not = _not

    @property
    def operator(self):
        """Gets the operator of this MetricFilter.

        Is the metric `EQUAL`, `LESS_THAN` or `GREATER_THAN` the comparisonValue, the default is `EQUAL`. If the operator is `IS_MISSING`, checks if the metric is missing and would ignore the comparisonValue.

        :return: The operator of this MetricFilter.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this MetricFilter.

        Is the metric `EQUAL`, `LESS_THAN` or `GREATER_THAN` the comparisonValue, the default is `EQUAL`. If the operator is `IS_MISSING`, checks if the metric is missing and would ignore the comparisonValue.

        :param operator: The operator of this MetricFilter.
        :type operator: str
        """
        allowed_values = ["OPERATOR_UNSPECIFIED", "EQUAL", "LESS_THAN", "GREATER_THAN", "IS_MISSING"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator
