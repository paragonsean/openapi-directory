# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range_values import DateRangeValues
from openapi_server.models.report_row import ReportRow
from openapi_server import util


class ReportData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_last_refreshed: str=None, empty_reason: str=None, is_data_golden: bool=None, maximums: List[DateRangeValues]=None, minimums: List[DateRangeValues]=None, row_count: int=None, rows: List[ReportRow]=None, samples_read_counts: List[str]=None, sampling_space_sizes: List[str]=None, totals: List[DateRangeValues]=None):
        """ReportData - a model defined in OpenAPI

        :param data_last_refreshed: The data_last_refreshed of this ReportData.
        :param empty_reason: The empty_reason of this ReportData.
        :param is_data_golden: The is_data_golden of this ReportData.
        :param maximums: The maximums of this ReportData.
        :param minimums: The minimums of this ReportData.
        :param row_count: The row_count of this ReportData.
        :param rows: The rows of this ReportData.
        :param samples_read_counts: The samples_read_counts of this ReportData.
        :param sampling_space_sizes: The sampling_space_sizes of this ReportData.
        :param totals: The totals of this ReportData.
        """
        self.openapi_types = {
            'data_last_refreshed': str,
            'empty_reason': str,
            'is_data_golden': bool,
            'maximums': List[DateRangeValues],
            'minimums': List[DateRangeValues],
            'row_count': int,
            'rows': List[ReportRow],
            'samples_read_counts': List[str],
            'sampling_space_sizes': List[str],
            'totals': List[DateRangeValues]
        }

        self.attribute_map = {
            'data_last_refreshed': 'dataLastRefreshed',
            'empty_reason': 'emptyReason',
            'is_data_golden': 'isDataGolden',
            'maximums': 'maximums',
            'minimums': 'minimums',
            'row_count': 'rowCount',
            'rows': 'rows',
            'samples_read_counts': 'samplesReadCounts',
            'sampling_space_sizes': 'samplingSpaceSizes',
            'totals': 'totals'
        }

        self._data_last_refreshed = data_last_refreshed
        self._empty_reason = empty_reason
        self._is_data_golden = is_data_golden
        self._maximums = maximums
        self._minimums = minimums
        self._row_count = row_count
        self._rows = rows
        self._samples_read_counts = samples_read_counts
        self._sampling_space_sizes = sampling_space_sizes
        self._totals = totals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportData of this ReportData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_last_refreshed(self):
        """Gets the data_last_refreshed of this ReportData.

        The last time the data in the report was refreshed. All the hits received before this timestamp are included in the calculation of the report.

        :return: The data_last_refreshed of this ReportData.
        :rtype: str
        """
        return self._data_last_refreshed

    @data_last_refreshed.setter
    def data_last_refreshed(self, data_last_refreshed):
        """Sets the data_last_refreshed of this ReportData.

        The last time the data in the report was refreshed. All the hits received before this timestamp are included in the calculation of the report.

        :param data_last_refreshed: The data_last_refreshed of this ReportData.
        :type data_last_refreshed: str
        """

        self._data_last_refreshed = data_last_refreshed

    @property
    def empty_reason(self):
        """Gets the empty_reason of this ReportData.

        If empty reason is specified, the report is empty for this reason.

        :return: The empty_reason of this ReportData.
        :rtype: str
        """
        return self._empty_reason

    @empty_reason.setter
    def empty_reason(self, empty_reason):
        """Sets the empty_reason of this ReportData.

        If empty reason is specified, the report is empty for this reason.

        :param empty_reason: The empty_reason of this ReportData.
        :type empty_reason: str
        """

        self._empty_reason = empty_reason

    @property
    def is_data_golden(self):
        """Gets the is_data_golden of this ReportData.

        Indicates if response to this request is golden or not. Data is golden when the exact same request will not produce any new results if asked at a later point in time.

        :return: The is_data_golden of this ReportData.
        :rtype: bool
        """
        return self._is_data_golden

    @is_data_golden.setter
    def is_data_golden(self, is_data_golden):
        """Sets the is_data_golden of this ReportData.

        Indicates if response to this request is golden or not. Data is golden when the exact same request will not produce any new results if asked at a later point in time.

        :param is_data_golden: The is_data_golden of this ReportData.
        :type is_data_golden: bool
        """

        self._is_data_golden = is_data_golden

    @property
    def maximums(self):
        """Gets the maximums of this ReportData.

        Minimum and maximum values seen over all matching rows. These are both empty when `hideValueRanges` in the request is false, or when rowCount is zero.

        :return: The maximums of this ReportData.
        :rtype: List[DateRangeValues]
        """
        return self._maximums

    @maximums.setter
    def maximums(self, maximums):
        """Sets the maximums of this ReportData.

        Minimum and maximum values seen over all matching rows. These are both empty when `hideValueRanges` in the request is false, or when rowCount is zero.

        :param maximums: The maximums of this ReportData.
        :type maximums: List[DateRangeValues]
        """

        self._maximums = maximums

    @property
    def minimums(self):
        """Gets the minimums of this ReportData.

        Minimum and maximum values seen over all matching rows. These are both empty when `hideValueRanges` in the request is false, or when rowCount is zero.

        :return: The minimums of this ReportData.
        :rtype: List[DateRangeValues]
        """
        return self._minimums

    @minimums.setter
    def minimums(self, minimums):
        """Sets the minimums of this ReportData.

        Minimum and maximum values seen over all matching rows. These are both empty when `hideValueRanges` in the request is false, or when rowCount is zero.

        :param minimums: The minimums of this ReportData.
        :type minimums: List[DateRangeValues]
        """

        self._minimums = minimums

    @property
    def row_count(self):
        """Gets the row_count of this ReportData.

        Total number of matching rows for this query.

        :return: The row_count of this ReportData.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this ReportData.

        Total number of matching rows for this query.

        :param row_count: The row_count of this ReportData.
        :type row_count: int
        """

        self._row_count = row_count

    @property
    def rows(self):
        """Gets the rows of this ReportData.

        There's one ReportRow for every unique combination of dimensions.

        :return: The rows of this ReportData.
        :rtype: List[ReportRow]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this ReportData.

        There's one ReportRow for every unique combination of dimensions.

        :param rows: The rows of this ReportData.
        :type rows: List[ReportRow]
        """

        self._rows = rows

    @property
    def samples_read_counts(self):
        """Gets the samples_read_counts of this ReportData.

        If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples read, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.

        :return: The samples_read_counts of this ReportData.
        :rtype: List[str]
        """
        return self._samples_read_counts

    @samples_read_counts.setter
    def samples_read_counts(self, samples_read_counts):
        """Sets the samples_read_counts of this ReportData.

        If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples read, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.

        :param samples_read_counts: The samples_read_counts of this ReportData.
        :type samples_read_counts: List[str]
        """

        self._samples_read_counts = samples_read_counts

    @property
    def sampling_space_sizes(self):
        """Gets the sampling_space_sizes of this ReportData.

        If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples present, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.

        :return: The sampling_space_sizes of this ReportData.
        :rtype: List[str]
        """
        return self._sampling_space_sizes

    @sampling_space_sizes.setter
    def sampling_space_sizes(self, sampling_space_sizes):
        """Sets the sampling_space_sizes of this ReportData.

        If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples present, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.

        :param sampling_space_sizes: The sampling_space_sizes of this ReportData.
        :type sampling_space_sizes: List[str]
        """

        self._sampling_space_sizes = sampling_space_sizes

    @property
    def totals(self):
        """Gets the totals of this ReportData.

        For each requested date range, for the set of all rows that match the query, every requested value format gets a total. The total for a value format is computed by first totaling the metrics mentioned in the value format and then evaluating the value format as a scalar expression. E.g., The \"totals\" for `3 / (ga:sessions + 2)` we compute `3 / ((sum of all relevant ga:sessions) + 2)`. Totals are computed before pagination.

        :return: The totals of this ReportData.
        :rtype: List[DateRangeValues]
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """Sets the totals of this ReportData.

        For each requested date range, for the set of all rows that match the query, every requested value format gets a total. The total for a value format is computed by first totaling the metrics mentioned in the value format and then evaluating the value format as a scalar expression. E.g., The \"totals\" for `3 / (ga:sessions + 2)` we compute `3 / ((sum of all relevant ga:sessions) + 2)`. Totals are computed before pagination.

        :param totals: The totals of this ReportData.
        :type totals: List[DateRangeValues]
        """

        self._totals = totals
