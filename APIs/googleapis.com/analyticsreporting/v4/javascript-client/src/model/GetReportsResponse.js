/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Report from './Report';
import ResourceQuotasRemaining from './ResourceQuotasRemaining';

/**
 * The GetReportsResponse model module.
 * @module model/GetReportsResponse
 * @version v4
 */
class GetReportsResponse {
    /**
     * Constructs a new <code>GetReportsResponse</code>.
     * The main response class which holds the reports from the Reporting API &#x60;batchGet&#x60; call.
     * @alias module:model/GetReportsResponse
     */
    constructor() { 
        
        GetReportsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetReportsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetReportsResponse} obj Optional instance to populate.
     * @return {module:model/GetReportsResponse} The populated <code>GetReportsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetReportsResponse();

            if (data.hasOwnProperty('queryCost')) {
                obj['queryCost'] = ApiClient.convertToType(data['queryCost'], 'Number');
            }
            if (data.hasOwnProperty('reports')) {
                obj['reports'] = ApiClient.convertToType(data['reports'], [Report]);
            }
            if (data.hasOwnProperty('resourceQuotasRemaining')) {
                obj['resourceQuotasRemaining'] = ResourceQuotasRemaining.constructFromObject(data['resourceQuotasRemaining']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetReportsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetReportsResponse</code>.
     */
    static validateJSON(data) {
        if (data['reports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reports'])) {
                throw new Error("Expected the field `reports` to be an array in the JSON data but got " + data['reports']);
            }
            // validate the optional field `reports` (array)
            for (const item of data['reports']) {
                Report.validateJSON(item);
            };
        }
        // validate the optional field `resourceQuotasRemaining`
        if (data['resourceQuotasRemaining']) { // data not null
          ResourceQuotasRemaining.validateJSON(data['resourceQuotasRemaining']);
        }

        return true;
    }


}



/**
 * The amount of resource quota tokens deducted to execute the query. Includes all responses.
 * @member {Number} queryCost
 */
GetReportsResponse.prototype['queryCost'] = undefined;

/**
 * Responses corresponding to each of the request.
 * @member {Array.<module:model/Report>} reports
 */
GetReportsResponse.prototype['reports'] = undefined;

/**
 * @member {module:model/ResourceQuotasRemaining} resourceQuotasRemaining
 */
GetReportsResponse.prototype['resourceQuotasRemaining'] = undefined;






export default GetReportsResponse;

