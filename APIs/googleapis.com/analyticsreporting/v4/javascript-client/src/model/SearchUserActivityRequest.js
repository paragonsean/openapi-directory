/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateRange from './DateRange';
import User from './User';

/**
 * The SearchUserActivityRequest model module.
 * @module model/SearchUserActivityRequest
 * @version v4
 */
class SearchUserActivityRequest {
    /**
     * Constructs a new <code>SearchUserActivityRequest</code>.
     * The request to fetch User Report from Reporting API &#x60;userActivity:get&#x60; call.
     * @alias module:model/SearchUserActivityRequest
     */
    constructor() { 
        
        SearchUserActivityRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchUserActivityRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchUserActivityRequest} obj Optional instance to populate.
     * @return {module:model/SearchUserActivityRequest} The populated <code>SearchUserActivityRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchUserActivityRequest();

            if (data.hasOwnProperty('activityTypes')) {
                obj['activityTypes'] = ApiClient.convertToType(data['activityTypes'], ['String']);
            }
            if (data.hasOwnProperty('dateRange')) {
                obj['dateRange'] = DateRange.constructFromObject(data['dateRange']);
            }
            if (data.hasOwnProperty('pageSize')) {
                obj['pageSize'] = ApiClient.convertToType(data['pageSize'], 'Number');
            }
            if (data.hasOwnProperty('pageToken')) {
                obj['pageToken'] = ApiClient.convertToType(data['pageToken'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('viewId')) {
                obj['viewId'] = ApiClient.convertToType(data['viewId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchUserActivityRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchUserActivityRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['activityTypes'])) {
            throw new Error("Expected the field `activityTypes` to be an array in the JSON data but got " + data['activityTypes']);
        }
        // validate the optional field `dateRange`
        if (data['dateRange']) { // data not null
          DateRange.validateJSON(data['dateRange']);
        }
        // ensure the json data is a string
        if (data['pageToken'] && !(typeof data['pageToken'] === 'string' || data['pageToken'] instanceof String)) {
            throw new Error("Expected the field `pageToken` to be a primitive type in the JSON string but got " + data['pageToken']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['viewId'] && !(typeof data['viewId'] === 'string' || data['viewId'] instanceof String)) {
            throw new Error("Expected the field `viewId` to be a primitive type in the JSON string but got " + data['viewId']);
        }

        return true;
    }


}



/**
 * Set of all activity types being requested. Only acvities matching these types will be returned in the response. If empty, all activies will be returned.
 * @member {Array.<module:model/SearchUserActivityRequest.ActivityTypesEnum>} activityTypes
 */
SearchUserActivityRequest.prototype['activityTypes'] = undefined;

/**
 * @member {module:model/DateRange} dateRange
 */
SearchUserActivityRequest.prototype['dateRange'] = undefined;

/**
 * Page size is for paging and specifies the maximum number of returned rows. Page size should be > 0. If the value is 0 or if the field isn't specified, the request returns the default of 1000 rows per page.
 * @member {Number} pageSize
 */
SearchUserActivityRequest.prototype['pageSize'] = undefined;

/**
 * A continuation token to get the next page of the results. Adding this to the request will return the rows after the pageToken. The pageToken should be the value returned in the nextPageToken parameter in the response to the [SearchUserActivityRequest](#SearchUserActivityRequest) request.
 * @member {String} pageToken
 */
SearchUserActivityRequest.prototype['pageToken'] = undefined;

/**
 * @member {module:model/User} user
 */
SearchUserActivityRequest.prototype['user'] = undefined;

/**
 * Required. The Analytics [view ID](https://support.google.com/analytics/answer/1009618) from which to retrieve data. Every [SearchUserActivityRequest](#SearchUserActivityRequest) must contain the `viewId`.
 * @member {String} viewId
 */
SearchUserActivityRequest.prototype['viewId'] = undefined;





/**
 * Allowed values for the <code>activityTypes</code> property.
 * @enum {String}
 * @readonly
 */
SearchUserActivityRequest['ActivityTypesEnum'] = {

    /**
     * value: "ACTIVITY_TYPE_UNSPECIFIED"
     * @const
     */
    "ACTIVITY_TYPE_UNSPECIFIED": "ACTIVITY_TYPE_UNSPECIFIED",

    /**
     * value: "PAGEVIEW"
     * @const
     */
    "PAGEVIEW": "PAGEVIEW",

    /**
     * value: "SCREENVIEW"
     * @const
     */
    "SCREENVIEW": "SCREENVIEW",

    /**
     * value: "GOAL"
     * @const
     */
    "GOAL": "GOAL",

    /**
     * value: "ECOMMERCE"
     * @const
     */
    "ECOMMERCE": "ECOMMERCE",

    /**
     * value: "EVENT"
     * @const
     */
    "EVENT": "EVENT"
};



export default SearchUserActivityRequest;

