/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScreenviewData model module.
 * @module model/ScreenviewData
 * @version v4
 */
class ScreenviewData {
    /**
     * Constructs a new <code>ScreenviewData</code>.
     * @alias module:model/ScreenviewData
     */
    constructor() { 
        
        ScreenviewData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScreenviewData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScreenviewData} obj Optional instance to populate.
     * @return {module:model/ScreenviewData} The populated <code>ScreenviewData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScreenviewData();

            if (data.hasOwnProperty('appName')) {
                obj['appName'] = ApiClient.convertToType(data['appName'], 'String');
            }
            if (data.hasOwnProperty('mobileDeviceBranding')) {
                obj['mobileDeviceBranding'] = ApiClient.convertToType(data['mobileDeviceBranding'], 'String');
            }
            if (data.hasOwnProperty('mobileDeviceModel')) {
                obj['mobileDeviceModel'] = ApiClient.convertToType(data['mobileDeviceModel'], 'String');
            }
            if (data.hasOwnProperty('screenName')) {
                obj['screenName'] = ApiClient.convertToType(data['screenName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScreenviewData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScreenviewData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appName'] && !(typeof data['appName'] === 'string' || data['appName'] instanceof String)) {
            throw new Error("Expected the field `appName` to be a primitive type in the JSON string but got " + data['appName']);
        }
        // ensure the json data is a string
        if (data['mobileDeviceBranding'] && !(typeof data['mobileDeviceBranding'] === 'string' || data['mobileDeviceBranding'] instanceof String)) {
            throw new Error("Expected the field `mobileDeviceBranding` to be a primitive type in the JSON string but got " + data['mobileDeviceBranding']);
        }
        // ensure the json data is a string
        if (data['mobileDeviceModel'] && !(typeof data['mobileDeviceModel'] === 'string' || data['mobileDeviceModel'] instanceof String)) {
            throw new Error("Expected the field `mobileDeviceModel` to be a primitive type in the JSON string but got " + data['mobileDeviceModel']);
        }
        // ensure the json data is a string
        if (data['screenName'] && !(typeof data['screenName'] === 'string' || data['screenName'] instanceof String)) {
            throw new Error("Expected the field `screenName` to be a primitive type in the JSON string but got " + data['screenName']);
        }

        return true;
    }


}



/**
 * The application name.
 * @member {String} appName
 */
ScreenviewData.prototype['appName'] = undefined;

/**
 * Mobile manufacturer or branded name. Eg: \"Google\", \"Apple\" etc.
 * @member {String} mobileDeviceBranding
 */
ScreenviewData.prototype['mobileDeviceBranding'] = undefined;

/**
 * Mobile device model. Eg: \"Pixel\", \"iPhone\" etc.
 * @member {String} mobileDeviceModel
 */
ScreenviewData.prototype['mobileDeviceModel'] = undefined;

/**
 * The name of the screen.
 * @member {String} screenName
 */
ScreenviewData.prototype['screenName'] = undefined;






export default ScreenviewData;

