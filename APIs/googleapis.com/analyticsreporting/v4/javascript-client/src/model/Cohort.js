/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateRange from './DateRange';

/**
 * The Cohort model module.
 * @module model/Cohort
 * @version v4
 */
class Cohort {
    /**
     * Constructs a new <code>Cohort</code>.
     * Defines a cohort. A cohort is a group of users who share a common characteristic. For example, all users with the same acquisition date belong to the same cohort.
     * @alias module:model/Cohort
     */
    constructor() { 
        
        Cohort.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cohort</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cohort} obj Optional instance to populate.
     * @return {module:model/Cohort} The populated <code>Cohort</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cohort();

            if (data.hasOwnProperty('dateRange')) {
                obj['dateRange'] = DateRange.constructFromObject(data['dateRange']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cohort</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cohort</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dateRange`
        if (data['dateRange']) { // data not null
          DateRange.validateJSON(data['dateRange']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/DateRange} dateRange
 */
Cohort.prototype['dateRange'] = undefined;

/**
 * A unique name for the cohort. If not defined name will be auto-generated with values cohort_[1234...].
 * @member {String} name
 */
Cohort.prototype['name'] = undefined;

/**
 * Type of the cohort. The only supported type as of now is `FIRST_VISIT_DATE`. If this field is unspecified the cohort is treated as `FIRST_VISIT_DATE` type cohort.
 * @member {module:model/Cohort.TypeEnum} type
 */
Cohort.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Cohort['TypeEnum'] = {

    /**
     * value: "UNSPECIFIED_COHORT_TYPE"
     * @const
     */
    "UNSPECIFIED_COHORT_TYPE": "UNSPECIFIED_COHORT_TYPE",

    /**
     * value: "FIRST_VISIT_DATE"
     * @const
     */
    "FIRST_VISIT_DATE": "FIRST_VISIT_DATE"
};



export default Cohort;

