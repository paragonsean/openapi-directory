/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimension from './Dimension';
import DimensionFilterClause from './DimensionFilterClause';
import Metric from './Metric';

/**
 * The Pivot model module.
 * @module model/Pivot
 * @version v4
 */
class Pivot {
    /**
     * Constructs a new <code>Pivot</code>.
     * The Pivot describes the pivot section in the request. The Pivot helps rearrange the information in the table for certain reports by pivoting your data on a second dimension.
     * @alias module:model/Pivot
     */
    constructor() { 
        
        Pivot.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Pivot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pivot} obj Optional instance to populate.
     * @return {module:model/Pivot} The populated <code>Pivot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pivot();

            if (data.hasOwnProperty('dimensionFilterClauses')) {
                obj['dimensionFilterClauses'] = ApiClient.convertToType(data['dimensionFilterClauses'], [DimensionFilterClause]);
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [Dimension]);
            }
            if (data.hasOwnProperty('maxGroupCount')) {
                obj['maxGroupCount'] = ApiClient.convertToType(data['maxGroupCount'], 'Number');
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Metric]);
            }
            if (data.hasOwnProperty('startGroup')) {
                obj['startGroup'] = ApiClient.convertToType(data['startGroup'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pivot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pivot</code>.
     */
    static validateJSON(data) {
        if (data['dimensionFilterClauses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensionFilterClauses'])) {
                throw new Error("Expected the field `dimensionFilterClauses` to be an array in the JSON data but got " + data['dimensionFilterClauses']);
            }
            // validate the optional field `dimensionFilterClauses` (array)
            for (const item of data['dimensionFilterClauses']) {
                DimensionFilterClause.validateJSON(item);
            };
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                Dimension.validateJSON(item);
            };
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                Metric.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * DimensionFilterClauses are logically combined with an `AND` operator: only data that is included by all these DimensionFilterClauses contributes to the values in this pivot region. Dimension filters can be used to restrict the columns shown in the pivot region. For example if you have `ga:browser` as the requested dimension in the pivot region, and you specify key filters to restrict `ga:browser` to only \"IE\" or \"Firefox\", then only those two browsers would show up as columns.
 * @member {Array.<module:model/DimensionFilterClause>} dimensionFilterClauses
 */
Pivot.prototype['dimensionFilterClauses'] = undefined;

/**
 * A list of dimensions to show as pivot columns. A Pivot can have a maximum of 4 dimensions. Pivot dimensions are part of the restriction on the total number of dimensions allowed in the request.
 * @member {Array.<module:model/Dimension>} dimensions
 */
Pivot.prototype['dimensions'] = undefined;

/**
 * Specifies the maximum number of groups to return. The default value is 10, also the maximum value is 1,000.
 * @member {Number} maxGroupCount
 */
Pivot.prototype['maxGroupCount'] = undefined;

/**
 * The pivot metrics. Pivot metrics are part of the restriction on total number of metrics allowed in the request.
 * @member {Array.<module:model/Metric>} metrics
 */
Pivot.prototype['metrics'] = undefined;

/**
 * If k metrics were requested, then the response will contain some data-dependent multiple of k columns in the report. E.g., if you pivoted on the dimension `ga:browser` then you'd get k columns for \"Firefox\", k columns for \"IE\", k columns for \"Chrome\", etc. The ordering of the groups of columns is determined by descending order of \"total\" for the first of the k values. Ties are broken by lexicographic ordering of the first pivot dimension, then lexicographic ordering of the second pivot dimension, and so on. E.g., if the totals for the first value for Firefox, IE, and Chrome were 8, 2, 8, respectively, the order of columns would be Chrome, Firefox, IE. The following let you choose which of the groups of k columns are included in the response.
 * @member {Number} startGroup
 */
Pivot.prototype['startGroup'] = undefined;






export default Pivot;

