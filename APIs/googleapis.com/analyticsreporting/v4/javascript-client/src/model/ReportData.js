/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateRangeValues from './DateRangeValues';
import ReportRow from './ReportRow';

/**
 * The ReportData model module.
 * @module model/ReportData
 * @version v4
 */
class ReportData {
    /**
     * Constructs a new <code>ReportData</code>.
     * The data part of the report.
     * @alias module:model/ReportData
     */
    constructor() { 
        
        ReportData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportData} obj Optional instance to populate.
     * @return {module:model/ReportData} The populated <code>ReportData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportData();

            if (data.hasOwnProperty('dataLastRefreshed')) {
                obj['dataLastRefreshed'] = ApiClient.convertToType(data['dataLastRefreshed'], 'String');
            }
            if (data.hasOwnProperty('emptyReason')) {
                obj['emptyReason'] = ApiClient.convertToType(data['emptyReason'], 'String');
            }
            if (data.hasOwnProperty('isDataGolden')) {
                obj['isDataGolden'] = ApiClient.convertToType(data['isDataGolden'], 'Boolean');
            }
            if (data.hasOwnProperty('maximums')) {
                obj['maximums'] = ApiClient.convertToType(data['maximums'], [DateRangeValues]);
            }
            if (data.hasOwnProperty('minimums')) {
                obj['minimums'] = ApiClient.convertToType(data['minimums'], [DateRangeValues]);
            }
            if (data.hasOwnProperty('rowCount')) {
                obj['rowCount'] = ApiClient.convertToType(data['rowCount'], 'Number');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [ReportRow]);
            }
            if (data.hasOwnProperty('samplesReadCounts')) {
                obj['samplesReadCounts'] = ApiClient.convertToType(data['samplesReadCounts'], ['String']);
            }
            if (data.hasOwnProperty('samplingSpaceSizes')) {
                obj['samplingSpaceSizes'] = ApiClient.convertToType(data['samplingSpaceSizes'], ['String']);
            }
            if (data.hasOwnProperty('totals')) {
                obj['totals'] = ApiClient.convertToType(data['totals'], [DateRangeValues]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataLastRefreshed'] && !(typeof data['dataLastRefreshed'] === 'string' || data['dataLastRefreshed'] instanceof String)) {
            throw new Error("Expected the field `dataLastRefreshed` to be a primitive type in the JSON string but got " + data['dataLastRefreshed']);
        }
        // ensure the json data is a string
        if (data['emptyReason'] && !(typeof data['emptyReason'] === 'string' || data['emptyReason'] instanceof String)) {
            throw new Error("Expected the field `emptyReason` to be a primitive type in the JSON string but got " + data['emptyReason']);
        }
        if (data['maximums']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['maximums'])) {
                throw new Error("Expected the field `maximums` to be an array in the JSON data but got " + data['maximums']);
            }
            // validate the optional field `maximums` (array)
            for (const item of data['maximums']) {
                DateRangeValues.validateJSON(item);
            };
        }
        if (data['minimums']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['minimums'])) {
                throw new Error("Expected the field `minimums` to be an array in the JSON data but got " + data['minimums']);
            }
            // validate the optional field `minimums` (array)
            for (const item of data['minimums']) {
                DateRangeValues.validateJSON(item);
            };
        }
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                ReportRow.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['samplesReadCounts'])) {
            throw new Error("Expected the field `samplesReadCounts` to be an array in the JSON data but got " + data['samplesReadCounts']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['samplingSpaceSizes'])) {
            throw new Error("Expected the field `samplingSpaceSizes` to be an array in the JSON data but got " + data['samplingSpaceSizes']);
        }
        if (data['totals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['totals'])) {
                throw new Error("Expected the field `totals` to be an array in the JSON data but got " + data['totals']);
            }
            // validate the optional field `totals` (array)
            for (const item of data['totals']) {
                DateRangeValues.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The last time the data in the report was refreshed. All the hits received before this timestamp are included in the calculation of the report.
 * @member {String} dataLastRefreshed
 */
ReportData.prototype['dataLastRefreshed'] = undefined;

/**
 * If empty reason is specified, the report is empty for this reason.
 * @member {String} emptyReason
 */
ReportData.prototype['emptyReason'] = undefined;

/**
 * Indicates if response to this request is golden or not. Data is golden when the exact same request will not produce any new results if asked at a later point in time.
 * @member {Boolean} isDataGolden
 */
ReportData.prototype['isDataGolden'] = undefined;

/**
 * Minimum and maximum values seen over all matching rows. These are both empty when `hideValueRanges` in the request is false, or when rowCount is zero.
 * @member {Array.<module:model/DateRangeValues>} maximums
 */
ReportData.prototype['maximums'] = undefined;

/**
 * Minimum and maximum values seen over all matching rows. These are both empty when `hideValueRanges` in the request is false, or when rowCount is zero.
 * @member {Array.<module:model/DateRangeValues>} minimums
 */
ReportData.prototype['minimums'] = undefined;

/**
 * Total number of matching rows for this query.
 * @member {Number} rowCount
 */
ReportData.prototype['rowCount'] = undefined;

/**
 * There's one ReportRow for every unique combination of dimensions.
 * @member {Array.<module:model/ReportRow>} rows
 */
ReportData.prototype['rows'] = undefined;

/**
 * If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples read, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.
 * @member {Array.<String>} samplesReadCounts
 */
ReportData.prototype['samplesReadCounts'] = undefined;

/**
 * If the results are [sampled](https://support.google.com/analytics/answer/2637192), this returns the total number of samples present, one entry per date range. If the results are not sampled this field will not be defined. See [developer guide](/analytics/devguides/reporting/core/v4/basics#sampling) for details.
 * @member {Array.<String>} samplingSpaceSizes
 */
ReportData.prototype['samplingSpaceSizes'] = undefined;

/**
 * For each requested date range, for the set of all rows that match the query, every requested value format gets a total. The total for a value format is computed by first totaling the metrics mentioned in the value format and then evaluating the value format as a scalar expression. E.g., The \"totals\" for `3 / (ga:sessions + 2)` we compute `3 / ((sum of all relevant ga:sessions) + 2)`. Totals are computed before pagination.
 * @member {Array.<module:model/DateRangeValues>} totals
 */
ReportData.prototype['totals'] = undefined;






export default ReportData;

