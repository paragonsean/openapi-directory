/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricHeaderEntry from './MetricHeaderEntry';

/**
 * The PivotHeaderEntry model module.
 * @module model/PivotHeaderEntry
 * @version v4
 */
class PivotHeaderEntry {
    /**
     * Constructs a new <code>PivotHeaderEntry</code>.
     * The headers for the each of the metric column corresponding to the metrics requested in the pivots section of the response.
     * @alias module:model/PivotHeaderEntry
     */
    constructor() { 
        
        PivotHeaderEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PivotHeaderEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PivotHeaderEntry} obj Optional instance to populate.
     * @return {module:model/PivotHeaderEntry} The populated <code>PivotHeaderEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PivotHeaderEntry();

            if (data.hasOwnProperty('dimensionNames')) {
                obj['dimensionNames'] = ApiClient.convertToType(data['dimensionNames'], ['String']);
            }
            if (data.hasOwnProperty('dimensionValues')) {
                obj['dimensionValues'] = ApiClient.convertToType(data['dimensionValues'], ['String']);
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = MetricHeaderEntry.constructFromObject(data['metric']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PivotHeaderEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PivotHeaderEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['dimensionNames'])) {
            throw new Error("Expected the field `dimensionNames` to be an array in the JSON data but got " + data['dimensionNames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dimensionValues'])) {
            throw new Error("Expected the field `dimensionValues` to be an array in the JSON data but got " + data['dimensionValues']);
        }
        // validate the optional field `metric`
        if (data['metric']) { // data not null
          MetricHeaderEntry.validateJSON(data['metric']);
        }

        return true;
    }


}



/**
 * The name of the dimensions in the pivot response.
 * @member {Array.<String>} dimensionNames
 */
PivotHeaderEntry.prototype['dimensionNames'] = undefined;

/**
 * The values for the dimensions in the pivot.
 * @member {Array.<String>} dimensionValues
 */
PivotHeaderEntry.prototype['dimensionValues'] = undefined;

/**
 * @member {module:model/MetricHeaderEntry} metric
 */
PivotHeaderEntry.prototype['metric'] = undefined;






export default PivotHeaderEntry;

