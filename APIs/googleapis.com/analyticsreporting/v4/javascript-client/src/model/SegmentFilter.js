/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SequenceSegment from './SequenceSegment';
import SimpleSegment from './SimpleSegment';

/**
 * The SegmentFilter model module.
 * @module model/SegmentFilter
 * @version v4
 */
class SegmentFilter {
    /**
     * Constructs a new <code>SegmentFilter</code>.
     * SegmentFilter defines the segment to be either a simple or a sequence segment. A simple segment condition contains dimension and metric conditions to select the sessions or users. A sequence segment condition can be used to select users or sessions based on sequential conditions.
     * @alias module:model/SegmentFilter
     */
    constructor() { 
        
        SegmentFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SegmentFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SegmentFilter} obj Optional instance to populate.
     * @return {module:model/SegmentFilter} The populated <code>SegmentFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SegmentFilter();

            if (data.hasOwnProperty('not')) {
                obj['not'] = ApiClient.convertToType(data['not'], 'Boolean');
            }
            if (data.hasOwnProperty('sequenceSegment')) {
                obj['sequenceSegment'] = SequenceSegment.constructFromObject(data['sequenceSegment']);
            }
            if (data.hasOwnProperty('simpleSegment')) {
                obj['simpleSegment'] = SimpleSegment.constructFromObject(data['simpleSegment']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SegmentFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SegmentFilter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `sequenceSegment`
        if (data['sequenceSegment']) { // data not null
          SequenceSegment.validateJSON(data['sequenceSegment']);
        }
        // validate the optional field `simpleSegment`
        if (data['simpleSegment']) { // data not null
          SimpleSegment.validateJSON(data['simpleSegment']);
        }

        return true;
    }


}



/**
 * If true, match the complement of simple or sequence segment. For example, to match all visits not from \"New York\", we can define the segment as follows: \"sessionSegment\": { \"segmentFilters\": [{ \"simpleSegment\" :{ \"orFiltersForSegment\": [{ \"segmentFilterClauses\":[{ \"dimensionFilter\": { \"dimensionName\": \"ga:city\", \"expressions\": [\"New York\"] } }] }] }, \"not\": \"True\" }] },
 * @member {Boolean} not
 */
SegmentFilter.prototype['not'] = undefined;

/**
 * @member {module:model/SequenceSegment} sequenceSegment
 */
SegmentFilter.prototype['sequenceSegment'] = undefined;

/**
 * @member {module:model/SimpleSegment} simpleSegment
 */
SegmentFilter.prototype['simpleSegment'] = undefined;






export default SegmentFilter;

