/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SegmentDimensionFilter model module.
 * @module model/SegmentDimensionFilter
 * @version v4
 */
class SegmentDimensionFilter {
    /**
     * Constructs a new <code>SegmentDimensionFilter</code>.
     * Dimension filter specifies the filtering options on a dimension.
     * @alias module:model/SegmentDimensionFilter
     */
    constructor() { 
        
        SegmentDimensionFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SegmentDimensionFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SegmentDimensionFilter} obj Optional instance to populate.
     * @return {module:model/SegmentDimensionFilter} The populated <code>SegmentDimensionFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SegmentDimensionFilter();

            if (data.hasOwnProperty('caseSensitive')) {
                obj['caseSensitive'] = ApiClient.convertToType(data['caseSensitive'], 'Boolean');
            }
            if (data.hasOwnProperty('dimensionName')) {
                obj['dimensionName'] = ApiClient.convertToType(data['dimensionName'], 'String');
            }
            if (data.hasOwnProperty('expressions')) {
                obj['expressions'] = ApiClient.convertToType(data['expressions'], ['String']);
            }
            if (data.hasOwnProperty('maxComparisonValue')) {
                obj['maxComparisonValue'] = ApiClient.convertToType(data['maxComparisonValue'], 'String');
            }
            if (data.hasOwnProperty('minComparisonValue')) {
                obj['minComparisonValue'] = ApiClient.convertToType(data['minComparisonValue'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SegmentDimensionFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SegmentDimensionFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dimensionName'] && !(typeof data['dimensionName'] === 'string' || data['dimensionName'] instanceof String)) {
            throw new Error("Expected the field `dimensionName` to be a primitive type in the JSON string but got " + data['dimensionName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['expressions'])) {
            throw new Error("Expected the field `expressions` to be an array in the JSON data but got " + data['expressions']);
        }
        // ensure the json data is a string
        if (data['maxComparisonValue'] && !(typeof data['maxComparisonValue'] === 'string' || data['maxComparisonValue'] instanceof String)) {
            throw new Error("Expected the field `maxComparisonValue` to be a primitive type in the JSON string but got " + data['maxComparisonValue']);
        }
        // ensure the json data is a string
        if (data['minComparisonValue'] && !(typeof data['minComparisonValue'] === 'string' || data['minComparisonValue'] instanceof String)) {
            throw new Error("Expected the field `minComparisonValue` to be a primitive type in the JSON string but got " + data['minComparisonValue']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }

        return true;
    }


}



/**
 * Should the match be case sensitive, ignored for `IN_LIST` operator.
 * @member {Boolean} caseSensitive
 */
SegmentDimensionFilter.prototype['caseSensitive'] = undefined;

/**
 * Name of the dimension for which the filter is being applied.
 * @member {String} dimensionName
 */
SegmentDimensionFilter.prototype['dimensionName'] = undefined;

/**
 * The list of expressions, only the first element is used for all operators
 * @member {Array.<String>} expressions
 */
SegmentDimensionFilter.prototype['expressions'] = undefined;

/**
 * Maximum comparison values for `BETWEEN` match type.
 * @member {String} maxComparisonValue
 */
SegmentDimensionFilter.prototype['maxComparisonValue'] = undefined;

/**
 * Minimum comparison values for `BETWEEN` match type.
 * @member {String} minComparisonValue
 */
SegmentDimensionFilter.prototype['minComparisonValue'] = undefined;

/**
 * The operator to use to match the dimension with the expressions.
 * @member {module:model/SegmentDimensionFilter.OperatorEnum} operator
 */
SegmentDimensionFilter.prototype['operator'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
SegmentDimensionFilter['OperatorEnum'] = {

    /**
     * value: "OPERATOR_UNSPECIFIED"
     * @const
     */
    "OPERATOR_UNSPECIFIED": "OPERATOR_UNSPECIFIED",

    /**
     * value: "REGEXP"
     * @const
     */
    "REGEXP": "REGEXP",

    /**
     * value: "BEGINS_WITH"
     * @const
     */
    "BEGINS_WITH": "BEGINS_WITH",

    /**
     * value: "ENDS_WITH"
     * @const
     */
    "ENDS_WITH": "ENDS_WITH",

    /**
     * value: "PARTIAL"
     * @const
     */
    "PARTIAL": "PARTIAL",

    /**
     * value: "EXACT"
     * @const
     */
    "EXACT": "EXACT",

    /**
     * value: "IN_LIST"
     * @const
     */
    "IN_LIST": "IN_LIST",

    /**
     * value: "NUMERIC_LESS_THAN"
     * @const
     */
    "NUMERIC_LESS_THAN": "NUMERIC_LESS_THAN",

    /**
     * value: "NUMERIC_GREATER_THAN"
     * @const
     */
    "NUMERIC_GREATER_THAN": "NUMERIC_GREATER_THAN",

    /**
     * value: "NUMERIC_BETWEEN"
     * @const
     */
    "NUMERIC_BETWEEN": "NUMERIC_BETWEEN"
};



export default SegmentDimensionFilter;

