/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SegmentMetricFilter model module.
 * @module model/SegmentMetricFilter
 * @version v4
 */
class SegmentMetricFilter {
    /**
     * Constructs a new <code>SegmentMetricFilter</code>.
     * Metric filter to be used in a segment filter clause.
     * @alias module:model/SegmentMetricFilter
     */
    constructor() { 
        
        SegmentMetricFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SegmentMetricFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SegmentMetricFilter} obj Optional instance to populate.
     * @return {module:model/SegmentMetricFilter} The populated <code>SegmentMetricFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SegmentMetricFilter();

            if (data.hasOwnProperty('comparisonValue')) {
                obj['comparisonValue'] = ApiClient.convertToType(data['comparisonValue'], 'String');
            }
            if (data.hasOwnProperty('maxComparisonValue')) {
                obj['maxComparisonValue'] = ApiClient.convertToType(data['maxComparisonValue'], 'String');
            }
            if (data.hasOwnProperty('metricName')) {
                obj['metricName'] = ApiClient.convertToType(data['metricName'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SegmentMetricFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SegmentMetricFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comparisonValue'] && !(typeof data['comparisonValue'] === 'string' || data['comparisonValue'] instanceof String)) {
            throw new Error("Expected the field `comparisonValue` to be a primitive type in the JSON string but got " + data['comparisonValue']);
        }
        // ensure the json data is a string
        if (data['maxComparisonValue'] && !(typeof data['maxComparisonValue'] === 'string' || data['maxComparisonValue'] instanceof String)) {
            throw new Error("Expected the field `maxComparisonValue` to be a primitive type in the JSON string but got " + data['maxComparisonValue']);
        }
        // ensure the json data is a string
        if (data['metricName'] && !(typeof data['metricName'] === 'string' || data['metricName'] instanceof String)) {
            throw new Error("Expected the field `metricName` to be a primitive type in the JSON string but got " + data['metricName']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }

        return true;
    }


}



/**
 * The value to compare against. If the operator is `BETWEEN`, this value is treated as minimum comparison value.
 * @member {String} comparisonValue
 */
SegmentMetricFilter.prototype['comparisonValue'] = undefined;

/**
 * Max comparison value is only used for `BETWEEN` operator.
 * @member {String} maxComparisonValue
 */
SegmentMetricFilter.prototype['maxComparisonValue'] = undefined;

/**
 * The metric that will be filtered on. A `metricFilter` must contain a metric name.
 * @member {String} metricName
 */
SegmentMetricFilter.prototype['metricName'] = undefined;

/**
 * Specifies is the operation to perform to compare the metric. The default is `EQUAL`.
 * @member {module:model/SegmentMetricFilter.OperatorEnum} operator
 */
SegmentMetricFilter.prototype['operator'] = undefined;

/**
 * Scope for a metric defines the level at which that metric is defined. The specified metric scope must be equal to or greater than its primary scope as defined in the data model. The primary scope is defined by if the segment is selecting users or sessions.
 * @member {module:model/SegmentMetricFilter.ScopeEnum} scope
 */
SegmentMetricFilter.prototype['scope'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
SegmentMetricFilter['OperatorEnum'] = {

    /**
     * value: "UNSPECIFIED_OPERATOR"
     * @const
     */
    "UNSPECIFIED_OPERATOR": "UNSPECIFIED_OPERATOR",

    /**
     * value: "LESS_THAN"
     * @const
     */
    "LESS_THAN": "LESS_THAN",

    /**
     * value: "GREATER_THAN"
     * @const
     */
    "GREATER_THAN": "GREATER_THAN",

    /**
     * value: "EQUAL"
     * @const
     */
    "EQUAL": "EQUAL",

    /**
     * value: "BETWEEN"
     * @const
     */
    "BETWEEN": "BETWEEN"
};


/**
 * Allowed values for the <code>scope</code> property.
 * @enum {String}
 * @readonly
 */
SegmentMetricFilter['ScopeEnum'] = {

    /**
     * value: "UNSPECIFIED_SCOPE"
     * @const
     */
    "UNSPECIFIED_SCOPE": "UNSPECIFIED_SCOPE",

    /**
     * value: "PRODUCT"
     * @const
     */
    "PRODUCT": "PRODUCT",

    /**
     * value: "HIT"
     * @const
     */
    "HIT": "HIT",

    /**
     * value: "SESSION"
     * @const
     */
    "SESSION": "SESSION",

    /**
     * value: "USER"
     * @const
     */
    "USER": "USER"
};



export default SegmentMetricFilter;

