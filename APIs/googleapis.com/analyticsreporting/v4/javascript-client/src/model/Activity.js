/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomDimension from './CustomDimension';
import EcommerceData from './EcommerceData';
import EventData from './EventData';
import GoalSetData from './GoalSetData';
import PageviewData from './PageviewData';
import ScreenviewData from './ScreenviewData';

/**
 * The Activity model module.
 * @module model/Activity
 * @version v4
 */
class Activity {
    /**
     * Constructs a new <code>Activity</code>.
     * An Activity represents data for an activity of a user. Note that an Activity is different from a hit. A hit might result in multiple Activity&#39;s. For example, if a hit includes a transaction and a goal completion, there will be two Activity protos for this hit, one for ECOMMERCE and one for GOAL. Conversely, multiple hits can also construct one Activity. In classic e-commerce, data for one transaction might be sent through multiple hits. These hits will be merged into one ECOMMERCE Activity.
     * @alias module:model/Activity
     */
    constructor() { 
        
        Activity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Activity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Activity} obj Optional instance to populate.
     * @return {module:model/Activity} The populated <code>Activity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Activity();

            if (data.hasOwnProperty('activityTime')) {
                obj['activityTime'] = ApiClient.convertToType(data['activityTime'], 'String');
            }
            if (data.hasOwnProperty('activityType')) {
                obj['activityType'] = ApiClient.convertToType(data['activityType'], 'String');
            }
            if (data.hasOwnProperty('appview')) {
                obj['appview'] = ScreenviewData.constructFromObject(data['appview']);
            }
            if (data.hasOwnProperty('campaign')) {
                obj['campaign'] = ApiClient.convertToType(data['campaign'], 'String');
            }
            if (data.hasOwnProperty('channelGrouping')) {
                obj['channelGrouping'] = ApiClient.convertToType(data['channelGrouping'], 'String');
            }
            if (data.hasOwnProperty('customDimension')) {
                obj['customDimension'] = ApiClient.convertToType(data['customDimension'], [CustomDimension]);
            }
            if (data.hasOwnProperty('ecommerce')) {
                obj['ecommerce'] = EcommerceData.constructFromObject(data['ecommerce']);
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = EventData.constructFromObject(data['event']);
            }
            if (data.hasOwnProperty('goals')) {
                obj['goals'] = GoalSetData.constructFromObject(data['goals']);
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('keyword')) {
                obj['keyword'] = ApiClient.convertToType(data['keyword'], 'String');
            }
            if (data.hasOwnProperty('landingPagePath')) {
                obj['landingPagePath'] = ApiClient.convertToType(data['landingPagePath'], 'String');
            }
            if (data.hasOwnProperty('medium')) {
                obj['medium'] = ApiClient.convertToType(data['medium'], 'String');
            }
            if (data.hasOwnProperty('pageview')) {
                obj['pageview'] = PageviewData.constructFromObject(data['pageview']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Activity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Activity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activityTime'] && !(typeof data['activityTime'] === 'string' || data['activityTime'] instanceof String)) {
            throw new Error("Expected the field `activityTime` to be a primitive type in the JSON string but got " + data['activityTime']);
        }
        // ensure the json data is a string
        if (data['activityType'] && !(typeof data['activityType'] === 'string' || data['activityType'] instanceof String)) {
            throw new Error("Expected the field `activityType` to be a primitive type in the JSON string but got " + data['activityType']);
        }
        // validate the optional field `appview`
        if (data['appview']) { // data not null
          ScreenviewData.validateJSON(data['appview']);
        }
        // ensure the json data is a string
        if (data['campaign'] && !(typeof data['campaign'] === 'string' || data['campaign'] instanceof String)) {
            throw new Error("Expected the field `campaign` to be a primitive type in the JSON string but got " + data['campaign']);
        }
        // ensure the json data is a string
        if (data['channelGrouping'] && !(typeof data['channelGrouping'] === 'string' || data['channelGrouping'] instanceof String)) {
            throw new Error("Expected the field `channelGrouping` to be a primitive type in the JSON string but got " + data['channelGrouping']);
        }
        if (data['customDimension']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customDimension'])) {
                throw new Error("Expected the field `customDimension` to be an array in the JSON data but got " + data['customDimension']);
            }
            // validate the optional field `customDimension` (array)
            for (const item of data['customDimension']) {
                CustomDimension.validateJSON(item);
            };
        }
        // validate the optional field `ecommerce`
        if (data['ecommerce']) { // data not null
          EcommerceData.validateJSON(data['ecommerce']);
        }
        // validate the optional field `event`
        if (data['event']) { // data not null
          EventData.validateJSON(data['event']);
        }
        // validate the optional field `goals`
        if (data['goals']) { // data not null
          GoalSetData.validateJSON(data['goals']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['keyword'] && !(typeof data['keyword'] === 'string' || data['keyword'] instanceof String)) {
            throw new Error("Expected the field `keyword` to be a primitive type in the JSON string but got " + data['keyword']);
        }
        // ensure the json data is a string
        if (data['landingPagePath'] && !(typeof data['landingPagePath'] === 'string' || data['landingPagePath'] instanceof String)) {
            throw new Error("Expected the field `landingPagePath` to be a primitive type in the JSON string but got " + data['landingPagePath']);
        }
        // ensure the json data is a string
        if (data['medium'] && !(typeof data['medium'] === 'string' || data['medium'] instanceof String)) {
            throw new Error("Expected the field `medium` to be a primitive type in the JSON string but got " + data['medium']);
        }
        // validate the optional field `pageview`
        if (data['pageview']) { // data not null
          PageviewData.validateJSON(data['pageview']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}



/**
 * Timestamp of the activity. If activities for a visit cross midnight and occur in two separate dates, then two sessions (one per date) share the session identifier. For example, say session ID 113472 has activity within 2019-08-20, and session ID 243742 has activity within 2019-08-25 and 2019-08-26. Session ID 113472 is one session, and session ID 243742 is two sessions.
 * @member {String} activityTime
 */
Activity.prototype['activityTime'] = undefined;

/**
 * Type of this activity.
 * @member {module:model/Activity.ActivityTypeEnum} activityType
 */
Activity.prototype['activityType'] = undefined;

/**
 * @member {module:model/ScreenviewData} appview
 */
Activity.prototype['appview'] = undefined;

/**
 * For manual campaign tracking, it is the value of the utm_campaign campaign tracking parameter. For AdWords autotagging, it is the name(s) of the online ad campaign(s) you use for the property. If you use neither, its value is (not set).
 * @member {String} campaign
 */
Activity.prototype['campaign'] = undefined;

/**
 * The Channel Group associated with an end user's session for this View (defined by the View's Channel Groupings).
 * @member {String} channelGrouping
 */
Activity.prototype['channelGrouping'] = undefined;

/**
 * A list of all custom dimensions associated with this activity.
 * @member {Array.<module:model/CustomDimension>} customDimension
 */
Activity.prototype['customDimension'] = undefined;

/**
 * @member {module:model/EcommerceData} ecommerce
 */
Activity.prototype['ecommerce'] = undefined;

/**
 * @member {module:model/EventData} event
 */
Activity.prototype['event'] = undefined;

/**
 * @member {module:model/GoalSetData} goals
 */
Activity.prototype['goals'] = undefined;

/**
 * The hostname from which the tracking request was made.
 * @member {String} hostname
 */
Activity.prototype['hostname'] = undefined;

/**
 * For manual campaign tracking, it is the value of the utm_term campaign tracking parameter. For AdWords traffic, it contains the best matching targeting criteria. For the display network, where multiple targeting criteria could have caused the ad to show up, it returns the best matching targeting criteria as selected by Ads. This could be display_keyword, site placement, boomuserlist, user_interest, age, or gender. Otherwise its value is (not set).
 * @member {String} keyword
 */
Activity.prototype['keyword'] = undefined;

/**
 * The first page in users' sessions, or the landing page.
 * @member {String} landingPagePath
 */
Activity.prototype['landingPagePath'] = undefined;

/**
 * The type of referrals. For manual campaign tracking, it is the value of the utm_medium campaign tracking parameter. For AdWords autotagging, it is cpc. If users came from a search engine detected by Google Analytics, it is organic. If the referrer is not a search engine, it is referral. If users came directly to the property and document.referrer is empty, its value is (none).
 * @member {String} medium
 */
Activity.prototype['medium'] = undefined;

/**
 * @member {module:model/PageviewData} pageview
 */
Activity.prototype['pageview'] = undefined;

/**
 * The source of referrals. For manual campaign tracking, it is the value of the utm_source campaign tracking parameter. For AdWords autotagging, it is google. If you use neither, it is the domain of the source (e.g., document.referrer) referring the users. It may also contain a port address. If users arrived without a referrer, its value is (direct).
 * @member {String} source
 */
Activity.prototype['source'] = undefined;





/**
 * Allowed values for the <code>activityType</code> property.
 * @enum {String}
 * @readonly
 */
Activity['ActivityTypeEnum'] = {

    /**
     * value: "ACTIVITY_TYPE_UNSPECIFIED"
     * @const
     */
    "ACTIVITY_TYPE_UNSPECIFIED": "ACTIVITY_TYPE_UNSPECIFIED",

    /**
     * value: "PAGEVIEW"
     * @const
     */
    "PAGEVIEW": "PAGEVIEW",

    /**
     * value: "SCREENVIEW"
     * @const
     */
    "SCREENVIEW": "SCREENVIEW",

    /**
     * value: "GOAL"
     * @const
     */
    "GOAL": "GOAL",

    /**
     * value: "ECOMMERCE"
     * @const
     */
    "ECOMMERCE": "ECOMMERCE",

    /**
     * value: "EVENT"
     * @const
     */
    "EVENT": "EVENT"
};



export default Activity;

