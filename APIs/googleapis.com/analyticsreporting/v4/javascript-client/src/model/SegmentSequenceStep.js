/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrFiltersForSegment from './OrFiltersForSegment';

/**
 * The SegmentSequenceStep model module.
 * @module model/SegmentSequenceStep
 * @version v4
 */
class SegmentSequenceStep {
    /**
     * Constructs a new <code>SegmentSequenceStep</code>.
     * A segment sequence definition.
     * @alias module:model/SegmentSequenceStep
     */
    constructor() { 
        
        SegmentSequenceStep.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SegmentSequenceStep</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SegmentSequenceStep} obj Optional instance to populate.
     * @return {module:model/SegmentSequenceStep} The populated <code>SegmentSequenceStep</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SegmentSequenceStep();

            if (data.hasOwnProperty('matchType')) {
                obj['matchType'] = ApiClient.convertToType(data['matchType'], 'String');
            }
            if (data.hasOwnProperty('orFiltersForSegment')) {
                obj['orFiltersForSegment'] = ApiClient.convertToType(data['orFiltersForSegment'], [OrFiltersForSegment]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SegmentSequenceStep</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SegmentSequenceStep</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['matchType'] && !(typeof data['matchType'] === 'string' || data['matchType'] instanceof String)) {
            throw new Error("Expected the field `matchType` to be a primitive type in the JSON string but got " + data['matchType']);
        }
        if (data['orFiltersForSegment']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orFiltersForSegment'])) {
                throw new Error("Expected the field `orFiltersForSegment` to be an array in the JSON data but got " + data['orFiltersForSegment']);
            }
            // validate the optional field `orFiltersForSegment` (array)
            for (const item of data['orFiltersForSegment']) {
                OrFiltersForSegment.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Specifies if the step immediately precedes or can be any time before the next step.
 * @member {module:model/SegmentSequenceStep.MatchTypeEnum} matchType
 */
SegmentSequenceStep.prototype['matchType'] = undefined;

/**
 * A sequence is specified with a list of Or grouped filters which are combined with `AND` operator.
 * @member {Array.<module:model/OrFiltersForSegment>} orFiltersForSegment
 */
SegmentSequenceStep.prototype['orFiltersForSegment'] = undefined;





/**
 * Allowed values for the <code>matchType</code> property.
 * @enum {String}
 * @readonly
 */
SegmentSequenceStep['MatchTypeEnum'] = {

    /**
     * value: "UNSPECIFIED_MATCH_TYPE"
     * @const
     */
    "UNSPECIFIED_MATCH_TYPE": "UNSPECIFIED_MATCH_TYPE",

    /**
     * value: "PRECEDES"
     * @const
     */
    "PRECEDES": "PRECEDES",

    /**
     * value: "IMMEDIATELY_PRECEDES"
     * @const
     */
    "IMMEDIATELY_PRECEDES": "IMMEDIATELY_PRECEDES"
};



export default SegmentSequenceStep;

