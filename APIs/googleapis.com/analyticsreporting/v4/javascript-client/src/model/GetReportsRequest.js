/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportRequest from './ReportRequest';

/**
 * The GetReportsRequest model module.
 * @module model/GetReportsRequest
 * @version v4
 */
class GetReportsRequest {
    /**
     * Constructs a new <code>GetReportsRequest</code>.
     * The batch request containing multiple report request.
     * @alias module:model/GetReportsRequest
     */
    constructor() { 
        
        GetReportsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetReportsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetReportsRequest} obj Optional instance to populate.
     * @return {module:model/GetReportsRequest} The populated <code>GetReportsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetReportsRequest();

            if (data.hasOwnProperty('reportRequests')) {
                obj['reportRequests'] = ApiClient.convertToType(data['reportRequests'], [ReportRequest]);
            }
            if (data.hasOwnProperty('useResourceQuotas')) {
                obj['useResourceQuotas'] = ApiClient.convertToType(data['useResourceQuotas'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetReportsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetReportsRequest</code>.
     */
    static validateJSON(data) {
        if (data['reportRequests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reportRequests'])) {
                throw new Error("Expected the field `reportRequests` to be an array in the JSON data but got " + data['reportRequests']);
            }
            // validate the optional field `reportRequests` (array)
            for (const item of data['reportRequests']) {
                ReportRequest.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Requests, each request will have a separate response. There can be a maximum of 5 requests. All requests should have the same `dateRanges`, `viewId`, `segments`, `samplingLevel`, and `cohortGroup`.
 * @member {Array.<module:model/ReportRequest>} reportRequests
 */
GetReportsRequest.prototype['reportRequests'] = undefined;

/**
 * Enables [resource based quotas](/analytics/devguides/reporting/core/v4/limits-quotas#analytics_reporting_api_v4), (defaults to `False`). If this field is set to `True` the per view (profile) quotas are governed by the computational cost of the request. Note that using cost based quotas will higher enable sampling rates. (10 Million for `SMALL`, 100M for `LARGE`. See the [limits and quotas documentation](/analytics/devguides/reporting/core/v4/limits-quotas#analytics_reporting_api_v4) for details.
 * @member {Boolean} useResourceQuotas
 */
GetReportsRequest.prototype['useResourceQuotas'] = undefined;






export default GetReportsRequest;

