/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductData model module.
 * @module model/ProductData
 * @version v4
 */
class ProductData {
    /**
     * Constructs a new <code>ProductData</code>.
     * Details of the products in an e-commerce transaction.
     * @alias module:model/ProductData
     */
    constructor() { 
        
        ProductData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductData} obj Optional instance to populate.
     * @return {module:model/ProductData} The populated <code>ProductData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductData();

            if (data.hasOwnProperty('itemRevenue')) {
                obj['itemRevenue'] = ApiClient.convertToType(data['itemRevenue'], 'Number');
            }
            if (data.hasOwnProperty('productName')) {
                obj['productName'] = ApiClient.convertToType(data['productName'], 'String');
            }
            if (data.hasOwnProperty('productQuantity')) {
                obj['productQuantity'] = ApiClient.convertToType(data['productQuantity'], 'String');
            }
            if (data.hasOwnProperty('productSku')) {
                obj['productSku'] = ApiClient.convertToType(data['productSku'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['productName'] && !(typeof data['productName'] === 'string' || data['productName'] instanceof String)) {
            throw new Error("Expected the field `productName` to be a primitive type in the JSON string but got " + data['productName']);
        }
        // ensure the json data is a string
        if (data['productQuantity'] && !(typeof data['productQuantity'] === 'string' || data['productQuantity'] instanceof String)) {
            throw new Error("Expected the field `productQuantity` to be a primitive type in the JSON string but got " + data['productQuantity']);
        }
        // ensure the json data is a string
        if (data['productSku'] && !(typeof data['productSku'] === 'string' || data['productSku'] instanceof String)) {
            throw new Error("Expected the field `productSku` to be a primitive type in the JSON string but got " + data['productSku']);
        }

        return true;
    }


}



/**
 * The total revenue from purchased product items.
 * @member {Number} itemRevenue
 */
ProductData.prototype['itemRevenue'] = undefined;

/**
 * The product name, supplied by the e-commerce tracking application, for the purchased items.
 * @member {String} productName
 */
ProductData.prototype['productName'] = undefined;

/**
 * Total number of this product units in the transaction.
 * @member {String} productQuantity
 */
ProductData.prototype['productQuantity'] = undefined;

/**
 * Unique code that represents the product.
 * @member {String} productSku
 */
ProductData.prototype['productSku'] = undefined;






export default ProductData;

