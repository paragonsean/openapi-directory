/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnHeader from './ColumnHeader';
import ReportData from './ReportData';

/**
 * The Report model module.
 * @module model/Report
 * @version v4
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * The data response corresponding to the request.
     * @alias module:model/Report
     */
    constructor() { 
        
        Report.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();

            if (data.hasOwnProperty('columnHeader')) {
                obj['columnHeader'] = ColumnHeader.constructFromObject(data['columnHeader']);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ReportData.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('nextPageToken')) {
                obj['nextPageToken'] = ApiClient.convertToType(data['nextPageToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        // validate the optional field `columnHeader`
        if (data['columnHeader']) { // data not null
          ColumnHeader.validateJSON(data['columnHeader']);
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          ReportData.validateJSON(data['data']);
        }
        // ensure the json data is a string
        if (data['nextPageToken'] && !(typeof data['nextPageToken'] === 'string' || data['nextPageToken'] instanceof String)) {
            throw new Error("Expected the field `nextPageToken` to be a primitive type in the JSON string but got " + data['nextPageToken']);
        }

        return true;
    }


}



/**
 * @member {module:model/ColumnHeader} columnHeader
 */
Report.prototype['columnHeader'] = undefined;

/**
 * @member {module:model/ReportData} data
 */
Report.prototype['data'] = undefined;

/**
 * Page token to retrieve the next page of results in the list.
 * @member {String} nextPageToken
 */
Report.prototype['nextPageToken'] = undefined;






export default Report;

