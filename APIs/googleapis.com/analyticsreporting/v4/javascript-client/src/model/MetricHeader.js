/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricHeaderEntry from './MetricHeaderEntry';
import PivotHeader from './PivotHeader';

/**
 * The MetricHeader model module.
 * @module model/MetricHeader
 * @version v4
 */
class MetricHeader {
    /**
     * Constructs a new <code>MetricHeader</code>.
     * The headers for the metrics.
     * @alias module:model/MetricHeader
     */
    constructor() { 
        
        MetricHeader.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricHeader</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricHeader} obj Optional instance to populate.
     * @return {module:model/MetricHeader} The populated <code>MetricHeader</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricHeader();

            if (data.hasOwnProperty('metricHeaderEntries')) {
                obj['metricHeaderEntries'] = ApiClient.convertToType(data['metricHeaderEntries'], [MetricHeaderEntry]);
            }
            if (data.hasOwnProperty('pivotHeaders')) {
                obj['pivotHeaders'] = ApiClient.convertToType(data['pivotHeaders'], [PivotHeader]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricHeader</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricHeader</code>.
     */
    static validateJSON(data) {
        if (data['metricHeaderEntries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricHeaderEntries'])) {
                throw new Error("Expected the field `metricHeaderEntries` to be an array in the JSON data but got " + data['metricHeaderEntries']);
            }
            // validate the optional field `metricHeaderEntries` (array)
            for (const item of data['metricHeaderEntries']) {
                MetricHeaderEntry.validateJSON(item);
            };
        }
        if (data['pivotHeaders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pivotHeaders'])) {
                throw new Error("Expected the field `pivotHeaders` to be an array in the JSON data but got " + data['pivotHeaders']);
            }
            // validate the optional field `pivotHeaders` (array)
            for (const item of data['pivotHeaders']) {
                PivotHeader.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Headers for the metrics in the response.
 * @member {Array.<module:model/MetricHeaderEntry>} metricHeaderEntries
 */
MetricHeader.prototype['metricHeaderEntries'] = undefined;

/**
 * Headers for the pivots in the response.
 * @member {Array.<module:model/PivotHeader>} pivotHeaders
 */
MetricHeader.prototype['pivotHeaders'] = undefined;






export default MetricHeader;

