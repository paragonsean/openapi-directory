/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DimensionFilter from './DimensionFilter';

/**
 * The DimensionFilterClause model module.
 * @module model/DimensionFilterClause
 * @version v4
 */
class DimensionFilterClause {
    /**
     * Constructs a new <code>DimensionFilterClause</code>.
     * A group of dimension filters. Set the operator value to specify how the filters are logically combined.
     * @alias module:model/DimensionFilterClause
     */
    constructor() { 
        
        DimensionFilterClause.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DimensionFilterClause</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DimensionFilterClause} obj Optional instance to populate.
     * @return {module:model/DimensionFilterClause} The populated <code>DimensionFilterClause</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DimensionFilterClause();

            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [DimensionFilter]);
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DimensionFilterClause</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DimensionFilterClause</code>.
     */
    static validateJSON(data) {
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                DimensionFilter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }

        return true;
    }


}



/**
 * The repeated set of filters. They are logically combined based on the operator specified.
 * @member {Array.<module:model/DimensionFilter>} filters
 */
DimensionFilterClause.prototype['filters'] = undefined;

/**
 * The operator for combining multiple dimension filters. If unspecified, it is treated as an `OR`.
 * @member {module:model/DimensionFilterClause.OperatorEnum} operator
 */
DimensionFilterClause.prototype['operator'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
DimensionFilterClause['OperatorEnum'] = {

    /**
     * value: "OPERATOR_UNSPECIFIED"
     * @const
     */
    "OPERATOR_UNSPECIFIED": "OPERATOR_UNSPECIFIED",

    /**
     * value: "OR"
     * @const
     */
    "OR": "OR",

    /**
     * value: "AND"
     * @const
     */
    "AND": "AND"
};



export default DimensionFilterClause;

