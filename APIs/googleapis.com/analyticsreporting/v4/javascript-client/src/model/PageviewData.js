/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PageviewData model module.
 * @module model/PageviewData
 * @version v4
 */
class PageviewData {
    /**
     * Constructs a new <code>PageviewData</code>.
     * Represents details collected when the visitor views a page.
     * @alias module:model/PageviewData
     */
    constructor() { 
        
        PageviewData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PageviewData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PageviewData} obj Optional instance to populate.
     * @return {module:model/PageviewData} The populated <code>PageviewData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PageviewData();

            if (data.hasOwnProperty('pagePath')) {
                obj['pagePath'] = ApiClient.convertToType(data['pagePath'], 'String');
            }
            if (data.hasOwnProperty('pageTitle')) {
                obj['pageTitle'] = ApiClient.convertToType(data['pageTitle'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PageviewData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PageviewData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pagePath'] && !(typeof data['pagePath'] === 'string' || data['pagePath'] instanceof String)) {
            throw new Error("Expected the field `pagePath` to be a primitive type in the JSON string but got " + data['pagePath']);
        }
        // ensure the json data is a string
        if (data['pageTitle'] && !(typeof data['pageTitle'] === 'string' || data['pageTitle'] instanceof String)) {
            throw new Error("Expected the field `pageTitle` to be a primitive type in the JSON string but got " + data['pageTitle']);
        }

        return true;
    }


}



/**
 * The URL of the page that the visitor viewed.
 * @member {String} pagePath
 */
PageviewData.prototype['pagePath'] = undefined;

/**
 * The title of the page that the visitor viewed.
 * @member {String} pageTitle
 */
PageviewData.prototype['pageTitle'] = undefined;






export default PageviewData;

