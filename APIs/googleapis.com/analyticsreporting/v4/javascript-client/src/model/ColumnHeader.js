/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricHeader from './MetricHeader';

/**
 * The ColumnHeader model module.
 * @module model/ColumnHeader
 * @version v4
 */
class ColumnHeader {
    /**
     * Constructs a new <code>ColumnHeader</code>.
     * Column headers.
     * @alias module:model/ColumnHeader
     */
    constructor() { 
        
        ColumnHeader.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ColumnHeader</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ColumnHeader} obj Optional instance to populate.
     * @return {module:model/ColumnHeader} The populated <code>ColumnHeader</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ColumnHeader();

            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], ['String']);
            }
            if (data.hasOwnProperty('metricHeader')) {
                obj['metricHeader'] = MetricHeader.constructFromObject(data['metricHeader']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ColumnHeader</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ColumnHeader</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['dimensions'])) {
            throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
        }
        // validate the optional field `metricHeader`
        if (data['metricHeader']) { // data not null
          MetricHeader.validateJSON(data['metricHeader']);
        }

        return true;
    }


}



/**
 * The dimension names in the response.
 * @member {Array.<String>} dimensions
 */
ColumnHeader.prototype['dimensions'] = undefined;

/**
 * @member {module:model/MetricHeader} metricHeader
 */
ColumnHeader.prototype['metricHeader'] = undefined;






export default ColumnHeader;

