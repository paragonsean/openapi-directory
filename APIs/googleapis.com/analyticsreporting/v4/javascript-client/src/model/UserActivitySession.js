/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Activity from './Activity';

/**
 * The UserActivitySession model module.
 * @module model/UserActivitySession
 * @version v4
 */
class UserActivitySession {
    /**
     * Constructs a new <code>UserActivitySession</code>.
     * This represents a user session performed on a specific device at a certain time over a period of time.
     * @alias module:model/UserActivitySession
     */
    constructor() { 
        
        UserActivitySession.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserActivitySession</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserActivitySession} obj Optional instance to populate.
     * @return {module:model/UserActivitySession} The populated <code>UserActivitySession</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserActivitySession();

            if (data.hasOwnProperty('activities')) {
                obj['activities'] = ApiClient.convertToType(data['activities'], [Activity]);
            }
            if (data.hasOwnProperty('dataSource')) {
                obj['dataSource'] = ApiClient.convertToType(data['dataSource'], 'String');
            }
            if (data.hasOwnProperty('deviceCategory')) {
                obj['deviceCategory'] = ApiClient.convertToType(data['deviceCategory'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('sessionDate')) {
                obj['sessionDate'] = ApiClient.convertToType(data['sessionDate'], 'String');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserActivitySession</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserActivitySession</code>.
     */
    static validateJSON(data) {
        if (data['activities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activities'])) {
                throw new Error("Expected the field `activities` to be an array in the JSON data but got " + data['activities']);
            }
            // validate the optional field `activities` (array)
            for (const item of data['activities']) {
                Activity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dataSource'] && !(typeof data['dataSource'] === 'string' || data['dataSource'] instanceof String)) {
            throw new Error("Expected the field `dataSource` to be a primitive type in the JSON string but got " + data['dataSource']);
        }
        // ensure the json data is a string
        if (data['deviceCategory'] && !(typeof data['deviceCategory'] === 'string' || data['deviceCategory'] instanceof String)) {
            throw new Error("Expected the field `deviceCategory` to be a primitive type in the JSON string but got " + data['deviceCategory']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['sessionDate'] && !(typeof data['sessionDate'] === 'string' || data['sessionDate'] instanceof String)) {
            throw new Error("Expected the field `sessionDate` to be a primitive type in the JSON string but got " + data['sessionDate']);
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }

        return true;
    }


}



/**
 * Represents a detailed view into each of the activity in this session.
 * @member {Array.<module:model/Activity>} activities
 */
UserActivitySession.prototype['activities'] = undefined;

/**
 * The data source of a hit. By default, hits sent from analytics.js are reported as \"web\" and hits sent from the mobile SDKs are reported as \"app\". These values can be overridden in the Measurement Protocol.
 * @member {String} dataSource
 */
UserActivitySession.prototype['dataSource'] = undefined;

/**
 * The type of device used: \"mobile\", \"tablet\" etc.
 * @member {String} deviceCategory
 */
UserActivitySession.prototype['deviceCategory'] = undefined;

/**
 * Platform on which the activity happened: \"android\", \"ios\" etc.
 * @member {String} platform
 */
UserActivitySession.prototype['platform'] = undefined;

/**
 * Date of this session in ISO-8601 format.
 * @member {String} sessionDate
 */
UserActivitySession.prototype['sessionDate'] = undefined;

/**
 * Unique ID of the session.
 * @member {String} sessionId
 */
UserActivitySession.prototype['sessionId'] = undefined;






export default UserActivitySession;

