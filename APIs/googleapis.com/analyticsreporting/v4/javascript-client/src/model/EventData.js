/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventData model module.
 * @module model/EventData
 * @version v4
 */
class EventData {
    /**
     * Constructs a new <code>EventData</code>.
     * Represents all the details pertaining to an event.
     * @alias module:model/EventData
     */
    constructor() { 
        
        EventData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventData} obj Optional instance to populate.
     * @return {module:model/EventData} The populated <code>EventData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventData();

            if (data.hasOwnProperty('eventAction')) {
                obj['eventAction'] = ApiClient.convertToType(data['eventAction'], 'String');
            }
            if (data.hasOwnProperty('eventCategory')) {
                obj['eventCategory'] = ApiClient.convertToType(data['eventCategory'], 'String');
            }
            if (data.hasOwnProperty('eventCount')) {
                obj['eventCount'] = ApiClient.convertToType(data['eventCount'], 'String');
            }
            if (data.hasOwnProperty('eventLabel')) {
                obj['eventLabel'] = ApiClient.convertToType(data['eventLabel'], 'String');
            }
            if (data.hasOwnProperty('eventValue')) {
                obj['eventValue'] = ApiClient.convertToType(data['eventValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['eventAction'] && !(typeof data['eventAction'] === 'string' || data['eventAction'] instanceof String)) {
            throw new Error("Expected the field `eventAction` to be a primitive type in the JSON string but got " + data['eventAction']);
        }
        // ensure the json data is a string
        if (data['eventCategory'] && !(typeof data['eventCategory'] === 'string' || data['eventCategory'] instanceof String)) {
            throw new Error("Expected the field `eventCategory` to be a primitive type in the JSON string but got " + data['eventCategory']);
        }
        // ensure the json data is a string
        if (data['eventCount'] && !(typeof data['eventCount'] === 'string' || data['eventCount'] instanceof String)) {
            throw new Error("Expected the field `eventCount` to be a primitive type in the JSON string but got " + data['eventCount']);
        }
        // ensure the json data is a string
        if (data['eventLabel'] && !(typeof data['eventLabel'] === 'string' || data['eventLabel'] instanceof String)) {
            throw new Error("Expected the field `eventLabel` to be a primitive type in the JSON string but got " + data['eventLabel']);
        }
        // ensure the json data is a string
        if (data['eventValue'] && !(typeof data['eventValue'] === 'string' || data['eventValue'] instanceof String)) {
            throw new Error("Expected the field `eventValue` to be a primitive type in the JSON string but got " + data['eventValue']);
        }

        return true;
    }


}



/**
 * Type of interaction with the object. Eg: 'play'.
 * @member {String} eventAction
 */
EventData.prototype['eventAction'] = undefined;

/**
 * The object on the page that was interacted with. Eg: 'Video'.
 * @member {String} eventCategory
 */
EventData.prototype['eventCategory'] = undefined;

/**
 * Number of such events in this activity.
 * @member {String} eventCount
 */
EventData.prototype['eventCount'] = undefined;

/**
 * Label attached with the event.
 * @member {String} eventLabel
 */
EventData.prototype['eventLabel'] = undefined;

/**
 * Numeric value associated with the event.
 * @member {String} eventValue
 */
EventData.prototype['eventValue'] = undefined;






export default EventData;

