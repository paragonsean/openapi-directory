/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductData from './ProductData';
import TransactionData from './TransactionData';

/**
 * The EcommerceData model module.
 * @module model/EcommerceData
 * @version v4
 */
class EcommerceData {
    /**
     * Constructs a new <code>EcommerceData</code>.
     * E-commerce details associated with the user activity.
     * @alias module:model/EcommerceData
     */
    constructor() { 
        
        EcommerceData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EcommerceData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EcommerceData} obj Optional instance to populate.
     * @return {module:model/EcommerceData} The populated <code>EcommerceData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EcommerceData();

            if (data.hasOwnProperty('actionType')) {
                obj['actionType'] = ApiClient.convertToType(data['actionType'], 'String');
            }
            if (data.hasOwnProperty('ecommerceType')) {
                obj['ecommerceType'] = ApiClient.convertToType(data['ecommerceType'], 'String');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [ProductData]);
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = TransactionData.constructFromObject(data['transaction']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EcommerceData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EcommerceData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actionType'] && !(typeof data['actionType'] === 'string' || data['actionType'] instanceof String)) {
            throw new Error("Expected the field `actionType` to be a primitive type in the JSON string but got " + data['actionType']);
        }
        // ensure the json data is a string
        if (data['ecommerceType'] && !(typeof data['ecommerceType'] === 'string' || data['ecommerceType'] instanceof String)) {
            throw new Error("Expected the field `ecommerceType` to be a primitive type in the JSON string but got " + data['ecommerceType']);
        }
        if (data['products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['products'])) {
                throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
            }
            // validate the optional field `products` (array)
            for (const item of data['products']) {
                ProductData.validateJSON(item);
            };
        }
        // validate the optional field `transaction`
        if (data['transaction']) { // data not null
          TransactionData.validateJSON(data['transaction']);
        }

        return true;
    }


}



/**
 * Action associated with this e-commerce action.
 * @member {module:model/EcommerceData.ActionTypeEnum} actionType
 */
EcommerceData.prototype['actionType'] = undefined;

/**
 * The type of this e-commerce activity.
 * @member {module:model/EcommerceData.EcommerceTypeEnum} ecommerceType
 */
EcommerceData.prototype['ecommerceType'] = undefined;

/**
 * Details of the products in this transaction.
 * @member {Array.<module:model/ProductData>} products
 */
EcommerceData.prototype['products'] = undefined;

/**
 * @member {module:model/TransactionData} transaction
 */
EcommerceData.prototype['transaction'] = undefined;





/**
 * Allowed values for the <code>actionType</code> property.
 * @enum {String}
 * @readonly
 */
EcommerceData['ActionTypeEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "CLICK"
     * @const
     */
    "CLICK": "CLICK",

    /**
     * value: "DETAILS_VIEW"
     * @const
     */
    "DETAILS_VIEW": "DETAILS_VIEW",

    /**
     * value: "ADD_TO_CART"
     * @const
     */
    "ADD_TO_CART": "ADD_TO_CART",

    /**
     * value: "REMOVE_FROM_CART"
     * @const
     */
    "REMOVE_FROM_CART": "REMOVE_FROM_CART",

    /**
     * value: "CHECKOUT"
     * @const
     */
    "CHECKOUT": "CHECKOUT",

    /**
     * value: "PAYMENT"
     * @const
     */
    "PAYMENT": "PAYMENT",

    /**
     * value: "REFUND"
     * @const
     */
    "REFUND": "REFUND",

    /**
     * value: "CHECKOUT_OPTION"
     * @const
     */
    "CHECKOUT_OPTION": "CHECKOUT_OPTION"
};


/**
 * Allowed values for the <code>ecommerceType</code> property.
 * @enum {String}
 * @readonly
 */
EcommerceData['EcommerceTypeEnum'] = {

    /**
     * value: "ECOMMERCE_TYPE_UNSPECIFIED"
     * @const
     */
    "ECOMMERCE_TYPE_UNSPECIFIED": "ECOMMERCE_TYPE_UNSPECIFIED",

    /**
     * value: "CLASSIC"
     * @const
     */
    "CLASSIC": "CLASSIC",

    /**
     * value: "ENHANCED"
     * @const
     */
    "ENHANCED": "ENHANCED"
};



export default EcommerceData;

