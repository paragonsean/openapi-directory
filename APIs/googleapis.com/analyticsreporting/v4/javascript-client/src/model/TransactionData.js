/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransactionData model module.
 * @module model/TransactionData
 * @version v4
 */
class TransactionData {
    /**
     * Constructs a new <code>TransactionData</code>.
     * Represents details collected when the visitor performs a transaction on the page.
     * @alias module:model/TransactionData
     */
    constructor() { 
        
        TransactionData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionData} obj Optional instance to populate.
     * @return {module:model/TransactionData} The populated <code>TransactionData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionData();

            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
            if (data.hasOwnProperty('transactionRevenue')) {
                obj['transactionRevenue'] = ApiClient.convertToType(data['transactionRevenue'], 'Number');
            }
            if (data.hasOwnProperty('transactionShipping')) {
                obj['transactionShipping'] = ApiClient.convertToType(data['transactionShipping'], 'Number');
            }
            if (data.hasOwnProperty('transactionTax')) {
                obj['transactionTax'] = ApiClient.convertToType(data['transactionTax'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }

        return true;
    }


}



/**
 * The transaction ID, supplied by the e-commerce tracking method, for the purchase in the shopping cart.
 * @member {String} transactionId
 */
TransactionData.prototype['transactionId'] = undefined;

/**
 * The total sale revenue (excluding shipping and tax) of the transaction.
 * @member {Number} transactionRevenue
 */
TransactionData.prototype['transactionRevenue'] = undefined;

/**
 * Total cost of shipping.
 * @member {Number} transactionShipping
 */
TransactionData.prototype['transactionShipping'] = undefined;

/**
 * Total tax for the transaction.
 * @member {Number} transactionTax
 */
TransactionData.prototype['transactionTax'] = undefined;






export default TransactionData;

