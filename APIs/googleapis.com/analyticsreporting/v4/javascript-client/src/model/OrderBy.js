/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrderBy model module.
 * @module model/OrderBy
 * @version v4
 */
class OrderBy {
    /**
     * Constructs a new <code>OrderBy</code>.
     * Specifies the sorting options.
     * @alias module:model/OrderBy
     */
    constructor() { 
        
        OrderBy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderBy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderBy} obj Optional instance to populate.
     * @return {module:model/OrderBy} The populated <code>OrderBy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderBy();

            if (data.hasOwnProperty('fieldName')) {
                obj['fieldName'] = ApiClient.convertToType(data['fieldName'], 'String');
            }
            if (data.hasOwnProperty('orderType')) {
                obj['orderType'] = ApiClient.convertToType(data['orderType'], 'String');
            }
            if (data.hasOwnProperty('sortOrder')) {
                obj['sortOrder'] = ApiClient.convertToType(data['sortOrder'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderBy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderBy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fieldName'] && !(typeof data['fieldName'] === 'string' || data['fieldName'] instanceof String)) {
            throw new Error("Expected the field `fieldName` to be a primitive type in the JSON string but got " + data['fieldName']);
        }
        // ensure the json data is a string
        if (data['orderType'] && !(typeof data['orderType'] === 'string' || data['orderType'] instanceof String)) {
            throw new Error("Expected the field `orderType` to be a primitive type in the JSON string but got " + data['orderType']);
        }
        // ensure the json data is a string
        if (data['sortOrder'] && !(typeof data['sortOrder'] === 'string' || data['sortOrder'] instanceof String)) {
            throw new Error("Expected the field `sortOrder` to be a primitive type in the JSON string but got " + data['sortOrder']);
        }

        return true;
    }


}



/**
 * The field which to sort by. The default sort order is ascending. Example: `ga:browser`. Note, that you can only specify one field for sort here. For example, `ga:browser, ga:city` is not valid.
 * @member {String} fieldName
 */
OrderBy.prototype['fieldName'] = undefined;

/**
 * The order type. The default orderType is `VALUE`.
 * @member {module:model/OrderBy.OrderTypeEnum} orderType
 */
OrderBy.prototype['orderType'] = undefined;

/**
 * The sorting order for the field.
 * @member {module:model/OrderBy.SortOrderEnum} sortOrder
 */
OrderBy.prototype['sortOrder'] = undefined;





/**
 * Allowed values for the <code>orderType</code> property.
 * @enum {String}
 * @readonly
 */
OrderBy['OrderTypeEnum'] = {

    /**
     * value: "ORDER_TYPE_UNSPECIFIED"
     * @const
     */
    "ORDER_TYPE_UNSPECIFIED": "ORDER_TYPE_UNSPECIFIED",

    /**
     * value: "VALUE"
     * @const
     */
    "VALUE": "VALUE",

    /**
     * value: "DELTA"
     * @const
     */
    "DELTA": "DELTA",

    /**
     * value: "SMART"
     * @const
     */
    "SMART": "SMART",

    /**
     * value: "HISTOGRAM_BUCKET"
     * @const
     */
    "HISTOGRAM_BUCKET": "HISTOGRAM_BUCKET",

    /**
     * value: "DIMENSION_AS_INTEGER"
     * @const
     */
    "DIMENSION_AS_INTEGER": "DIMENSION_AS_INTEGER"
};


/**
 * Allowed values for the <code>sortOrder</code> property.
 * @enum {String}
 * @readonly
 */
OrderBy['SortOrderEnum'] = {

    /**
     * value: "SORT_ORDER_UNSPECIFIED"
     * @const
     */
    "SORT_ORDER_UNSPECIFIED": "SORT_ORDER_UNSPECIFIED",

    /**
     * value: "ASCENDING"
     * @const
     */
    "ASCENDING": "ASCENDING",

    /**
     * value: "DESCENDING"
     * @const
     */
    "DESCENDING": "DESCENDING"
};



export default OrderBy;

