/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetricFilter model module.
 * @module model/MetricFilter
 * @version v4
 */
class MetricFilter {
    /**
     * Constructs a new <code>MetricFilter</code>.
     * MetricFilter specifies the filter on a metric.
     * @alias module:model/MetricFilter
     */
    constructor() { 
        
        MetricFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricFilter} obj Optional instance to populate.
     * @return {module:model/MetricFilter} The populated <code>MetricFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricFilter();

            if (data.hasOwnProperty('comparisonValue')) {
                obj['comparisonValue'] = ApiClient.convertToType(data['comparisonValue'], 'String');
            }
            if (data.hasOwnProperty('metricName')) {
                obj['metricName'] = ApiClient.convertToType(data['metricName'], 'String');
            }
            if (data.hasOwnProperty('not')) {
                obj['not'] = ApiClient.convertToType(data['not'], 'Boolean');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comparisonValue'] && !(typeof data['comparisonValue'] === 'string' || data['comparisonValue'] instanceof String)) {
            throw new Error("Expected the field `comparisonValue` to be a primitive type in the JSON string but got " + data['comparisonValue']);
        }
        // ensure the json data is a string
        if (data['metricName'] && !(typeof data['metricName'] === 'string' || data['metricName'] instanceof String)) {
            throw new Error("Expected the field `metricName` to be a primitive type in the JSON string but got " + data['metricName']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }

        return true;
    }


}



/**
 * The value to compare against.
 * @member {String} comparisonValue
 */
MetricFilter.prototype['comparisonValue'] = undefined;

/**
 * The metric that will be filtered on. A metricFilter must contain a metric name. A metric name can be an alias earlier defined as a metric or it can also be a metric expression.
 * @member {String} metricName
 */
MetricFilter.prototype['metricName'] = undefined;

/**
 * Logical `NOT` operator. If this boolean is set to true, then the matching metric values will be excluded in the report. The default is false.
 * @member {Boolean} not
 */
MetricFilter.prototype['not'] = undefined;

/**
 * Is the metric `EQUAL`, `LESS_THAN` or `GREATER_THAN` the comparisonValue, the default is `EQUAL`. If the operator is `IS_MISSING`, checks if the metric is missing and would ignore the comparisonValue.
 * @member {module:model/MetricFilter.OperatorEnum} operator
 */
MetricFilter.prototype['operator'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
MetricFilter['OperatorEnum'] = {

    /**
     * value: "OPERATOR_UNSPECIFIED"
     * @const
     */
    "OPERATOR_UNSPECIFIED": "OPERATOR_UNSPECIFIED",

    /**
     * value: "EQUAL"
     * @const
     */
    "EQUAL": "EQUAL",

    /**
     * value: "LESS_THAN"
     * @const
     */
    "LESS_THAN": "LESS_THAN",

    /**
     * value: "GREATER_THAN"
     * @const
     */
    "GREATER_THAN": "GREATER_THAN",

    /**
     * value: "IS_MISSING"
     * @const
     */
    "IS_MISSING": "IS_MISSING"
};



export default MetricFilter;

