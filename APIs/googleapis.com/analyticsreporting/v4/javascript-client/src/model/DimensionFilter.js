/**
 * Analytics Reporting API
 * Accesses Analytics report data.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DimensionFilter model module.
 * @module model/DimensionFilter
 * @version v4
 */
class DimensionFilter {
    /**
     * Constructs a new <code>DimensionFilter</code>.
     * Dimension filter specifies the filtering options on a dimension.
     * @alias module:model/DimensionFilter
     */
    constructor() { 
        
        DimensionFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DimensionFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DimensionFilter} obj Optional instance to populate.
     * @return {module:model/DimensionFilter} The populated <code>DimensionFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DimensionFilter();

            if (data.hasOwnProperty('caseSensitive')) {
                obj['caseSensitive'] = ApiClient.convertToType(data['caseSensitive'], 'Boolean');
            }
            if (data.hasOwnProperty('dimensionName')) {
                obj['dimensionName'] = ApiClient.convertToType(data['dimensionName'], 'String');
            }
            if (data.hasOwnProperty('expressions')) {
                obj['expressions'] = ApiClient.convertToType(data['expressions'], ['String']);
            }
            if (data.hasOwnProperty('not')) {
                obj['not'] = ApiClient.convertToType(data['not'], 'Boolean');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DimensionFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DimensionFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dimensionName'] && !(typeof data['dimensionName'] === 'string' || data['dimensionName'] instanceof String)) {
            throw new Error("Expected the field `dimensionName` to be a primitive type in the JSON string but got " + data['dimensionName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['expressions'])) {
            throw new Error("Expected the field `expressions` to be an array in the JSON data but got " + data['expressions']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }

        return true;
    }


}



/**
 * Should the match be case sensitive? Default is false.
 * @member {Boolean} caseSensitive
 */
DimensionFilter.prototype['caseSensitive'] = undefined;

/**
 * The dimension to filter on. A DimensionFilter must contain a dimension.
 * @member {String} dimensionName
 */
DimensionFilter.prototype['dimensionName'] = undefined;

/**
 * Strings or regular expression to match against. Only the first value of the list is used for comparison unless the operator is `IN_LIST`. If `IN_LIST` operator, then the entire list is used to filter the dimensions as explained in the description of the `IN_LIST` operator.
 * @member {Array.<String>} expressions
 */
DimensionFilter.prototype['expressions'] = undefined;

/**
 * Logical `NOT` operator. If this boolean is set to true, then the matching dimension values will be excluded in the report. The default is false.
 * @member {Boolean} not
 */
DimensionFilter.prototype['not'] = undefined;

/**
 * How to match the dimension to the expression. The default is REGEXP.
 * @member {module:model/DimensionFilter.OperatorEnum} operator
 */
DimensionFilter.prototype['operator'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
DimensionFilter['OperatorEnum'] = {

    /**
     * value: "OPERATOR_UNSPECIFIED"
     * @const
     */
    "OPERATOR_UNSPECIFIED": "OPERATOR_UNSPECIFIED",

    /**
     * value: "REGEXP"
     * @const
     */
    "REGEXP": "REGEXP",

    /**
     * value: "BEGINS_WITH"
     * @const
     */
    "BEGINS_WITH": "BEGINS_WITH",

    /**
     * value: "ENDS_WITH"
     * @const
     */
    "ENDS_WITH": "ENDS_WITH",

    /**
     * value: "PARTIAL"
     * @const
     */
    "PARTIAL": "PARTIAL",

    /**
     * value: "EXACT"
     * @const
     */
    "EXACT": "EXACT",

    /**
     * value: "NUMERIC_EQUAL"
     * @const
     */
    "NUMERIC_EQUAL": "NUMERIC_EQUAL",

    /**
     * value: "NUMERIC_GREATER_THAN"
     * @const
     */
    "NUMERIC_GREATER_THAN": "NUMERIC_GREATER_THAN",

    /**
     * value: "NUMERIC_LESS_THAN"
     * @const
     */
    "NUMERIC_LESS_THAN": "NUMERIC_LESS_THAN",

    /**
     * value: "IN_LIST"
     * @const
     */
    "IN_LIST": "IN_LIST"
};



export default DimensionFilter;

