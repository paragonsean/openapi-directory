/**
 * App Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServiceProjectAttachment model module.
 * @module model/ServiceProjectAttachment
 * @version v1
 */
class ServiceProjectAttachment {
    /**
     * Constructs a new <code>ServiceProjectAttachment</code>.
     * ServiceProjectAttachment represents an attachment from a service project to a host project. Service projects contain the underlying cloud infrastructure resources, and expose these resources to the host project through a ServiceProjectAttachment. With the attachments, the host project can provide an aggregated view of resources across all service projects.
     * @alias module:model/ServiceProjectAttachment
     */
    constructor() { 
        
        ServiceProjectAttachment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceProjectAttachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceProjectAttachment} obj Optional instance to populate.
     * @return {module:model/ServiceProjectAttachment} The populated <code>ServiceProjectAttachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceProjectAttachment();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('serviceProject')) {
                obj['serviceProject'] = ApiClient.convertToType(data['serviceProject'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceProjectAttachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceProjectAttachment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['serviceProject'] && !(typeof data['serviceProject'] === 'string' || data['serviceProject'] instanceof String)) {
            throw new Error("Expected the field `serviceProject` to be a primitive type in the JSON string but got " + data['serviceProject']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * Output only. Create time.
 * @member {String} createTime
 */
ServiceProjectAttachment.prototype['createTime'] = undefined;

/**
 * Identifier. The resource name of a ServiceProjectAttachment. Format: \"projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}.\"
 * @member {String} name
 */
ServiceProjectAttachment.prototype['name'] = undefined;

/**
 * Required. Immutable. Service project name in the format: \"projects/abc\" or \"projects/123\". As input, project name with either project id or number are accepted. As output, this field will contain project number.
 * @member {String} serviceProject
 */
ServiceProjectAttachment.prototype['serviceProject'] = undefined;

/**
 * Output only. ServiceProjectAttachment state.
 * @member {module:model/ServiceProjectAttachment.StateEnum} state
 */
ServiceProjectAttachment.prototype['state'] = undefined;

/**
 * Output only. A globally unique identifier (in UUID4 format) for the `ServiceProjectAttachment`.
 * @member {String} uid
 */
ServiceProjectAttachment.prototype['uid'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ServiceProjectAttachment['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING"
};



export default ServiceProjectAttachment;

