/**
 * App Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attributes from './Attributes';
import WorkloadProperties from './WorkloadProperties';
import WorkloadReference from './WorkloadReference';

/**
 * The Workload model module.
 * @module model/Workload
 * @version v1
 */
class Workload {
    /**
     * Constructs a new <code>Workload</code>.
     * Workload is an App Hub data model that contains a discovered workload, which represents a binary deployment (such as managed instance groups (MIGs) and GKE deployments) that performs the smallest logical subset of business functionality.
     * @alias module:model/Workload
     */
    constructor() { 
        
        Workload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Workload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Workload} obj Optional instance to populate.
     * @return {module:model/Workload} The populated <code>Workload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Workload();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = Attributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discoveredWorkload')) {
                obj['discoveredWorkload'] = ApiClient.convertToType(data['discoveredWorkload'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('workloadProperties')) {
                obj['workloadProperties'] = WorkloadProperties.constructFromObject(data['workloadProperties']);
            }
            if (data.hasOwnProperty('workloadReference')) {
                obj['workloadReference'] = WorkloadReference.constructFromObject(data['workloadReference']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Workload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Workload</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          Attributes.validateJSON(data['attributes']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['discoveredWorkload'] && !(typeof data['discoveredWorkload'] === 'string' || data['discoveredWorkload'] instanceof String)) {
            throw new Error("Expected the field `discoveredWorkload` to be a primitive type in the JSON string but got " + data['discoveredWorkload']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `workloadProperties`
        if (data['workloadProperties']) { // data not null
          WorkloadProperties.validateJSON(data['workloadProperties']);
        }
        // validate the optional field `workloadReference`
        if (data['workloadReference']) { // data not null
          WorkloadReference.validateJSON(data['workloadReference']);
        }

        return true;
    }


}



/**
 * @member {module:model/Attributes} attributes
 */
Workload.prototype['attributes'] = undefined;

/**
 * Output only. Create time.
 * @member {String} createTime
 */
Workload.prototype['createTime'] = undefined;

/**
 * Optional. User-defined description of a Workload. Can have a maximum length of 2048 characters.
 * @member {String} description
 */
Workload.prototype['description'] = undefined;

/**
 * Required. Immutable. The resource name of the original discovered workload.
 * @member {String} discoveredWorkload
 */
Workload.prototype['discoveredWorkload'] = undefined;

/**
 * Optional. User-defined name for the Workload. Can have a maximum length of 63 characters.
 * @member {String} displayName
 */
Workload.prototype['displayName'] = undefined;

/**
 * Identifier. The resource name of the Workload. Format: \"projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}\"
 * @member {String} name
 */
Workload.prototype['name'] = undefined;

/**
 * Output only. Workload state.
 * @member {module:model/Workload.StateEnum} state
 */
Workload.prototype['state'] = undefined;

/**
 * Output only. A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
 * @member {String} uid
 */
Workload.prototype['uid'] = undefined;

/**
 * Output only. Update time.
 * @member {String} updateTime
 */
Workload.prototype['updateTime'] = undefined;

/**
 * @member {module:model/WorkloadProperties} workloadProperties
 */
Workload.prototype['workloadProperties'] = undefined;

/**
 * @member {module:model/WorkloadReference} workloadReference
 */
Workload.prototype['workloadReference'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Workload['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "DETACHED"
     * @const
     */
    "DETACHED": "DETACHED"
};



export default Workload;

