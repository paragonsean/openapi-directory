/*
 * App Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContactInfo;
import org.openapitools.client.model.Criticality;
import org.openapitools.client.model.Environment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Consumer provided attributes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:54.416766-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attributes {
  public static final String SERIALIZED_NAME_BUSINESS_OWNERS = "businessOwners";
  @SerializedName(SERIALIZED_NAME_BUSINESS_OWNERS)
  private List<ContactInfo> businessOwners = new ArrayList<>();

  public static final String SERIALIZED_NAME_CRITICALITY = "criticality";
  @SerializedName(SERIALIZED_NAME_CRITICALITY)
  private Criticality criticality;

  public static final String SERIALIZED_NAME_DEVELOPER_OWNERS = "developerOwners";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_OWNERS)
  private List<ContactInfo> developerOwners = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private Environment environment;

  public static final String SERIALIZED_NAME_OPERATOR_OWNERS = "operatorOwners";
  @SerializedName(SERIALIZED_NAME_OPERATOR_OWNERS)
  private List<ContactInfo> operatorOwners = new ArrayList<>();

  public Attributes() {
  }

  public Attributes businessOwners(List<ContactInfo> businessOwners) {
    this.businessOwners = businessOwners;
    return this;
  }

  public Attributes addBusinessOwnersItem(ContactInfo businessOwnersItem) {
    if (this.businessOwners == null) {
      this.businessOwners = new ArrayList<>();
    }
    this.businessOwners.add(businessOwnersItem);
    return this;
  }

  /**
   * Optional. Business team that ensures user needs are met and value is delivered
   * @return businessOwners
   */
  @javax.annotation.Nullable
  public List<ContactInfo> getBusinessOwners() {
    return businessOwners;
  }

  public void setBusinessOwners(List<ContactInfo> businessOwners) {
    this.businessOwners = businessOwners;
  }


  public Attributes criticality(Criticality criticality) {
    this.criticality = criticality;
    return this;
  }

  /**
   * Get criticality
   * @return criticality
   */
  @javax.annotation.Nullable
  public Criticality getCriticality() {
    return criticality;
  }

  public void setCriticality(Criticality criticality) {
    this.criticality = criticality;
  }


  public Attributes developerOwners(List<ContactInfo> developerOwners) {
    this.developerOwners = developerOwners;
    return this;
  }

  public Attributes addDeveloperOwnersItem(ContactInfo developerOwnersItem) {
    if (this.developerOwners == null) {
      this.developerOwners = new ArrayList<>();
    }
    this.developerOwners.add(developerOwnersItem);
    return this;
  }

  /**
   * Optional. Developer team that owns development and coding.
   * @return developerOwners
   */
  @javax.annotation.Nullable
  public List<ContactInfo> getDeveloperOwners() {
    return developerOwners;
  }

  public void setDeveloperOwners(List<ContactInfo> developerOwners) {
    this.developerOwners = developerOwners;
  }


  public Attributes environment(Environment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public Environment getEnvironment() {
    return environment;
  }

  public void setEnvironment(Environment environment) {
    this.environment = environment;
  }


  public Attributes operatorOwners(List<ContactInfo> operatorOwners) {
    this.operatorOwners = operatorOwners;
    return this;
  }

  public Attributes addOperatorOwnersItem(ContactInfo operatorOwnersItem) {
    if (this.operatorOwners == null) {
      this.operatorOwners = new ArrayList<>();
    }
    this.operatorOwners.add(operatorOwnersItem);
    return this;
  }

  /**
   * Optional. Operator team that ensures runtime and operations.
   * @return operatorOwners
   */
  @javax.annotation.Nullable
  public List<ContactInfo> getOperatorOwners() {
    return operatorOwners;
  }

  public void setOperatorOwners(List<ContactInfo> operatorOwners) {
    this.operatorOwners = operatorOwners;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attributes attributes = (Attributes) o;
    return Objects.equals(this.businessOwners, attributes.businessOwners) &&
        Objects.equals(this.criticality, attributes.criticality) &&
        Objects.equals(this.developerOwners, attributes.developerOwners) &&
        Objects.equals(this.environment, attributes.environment) &&
        Objects.equals(this.operatorOwners, attributes.operatorOwners);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessOwners, criticality, developerOwners, environment, operatorOwners);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attributes {\n");
    sb.append("    businessOwners: ").append(toIndentedString(businessOwners)).append("\n");
    sb.append("    criticality: ").append(toIndentedString(criticality)).append("\n");
    sb.append("    developerOwners: ").append(toIndentedString(developerOwners)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    operatorOwners: ").append(toIndentedString(operatorOwners)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("businessOwners");
    openapiFields.add("criticality");
    openapiFields.add("developerOwners");
    openapiFields.add("environment");
    openapiFields.add("operatorOwners");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attributes is not found in the empty JSON string", Attributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("businessOwners") != null && !jsonObj.get("businessOwners").isJsonNull()) {
        JsonArray jsonArraybusinessOwners = jsonObj.getAsJsonArray("businessOwners");
        if (jsonArraybusinessOwners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("businessOwners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `businessOwners` to be an array in the JSON string but got `%s`", jsonObj.get("businessOwners").toString()));
          }

          // validate the optional field `businessOwners` (array)
          for (int i = 0; i < jsonArraybusinessOwners.size(); i++) {
            ContactInfo.validateJsonElement(jsonArraybusinessOwners.get(i));
          };
        }
      }
      // validate the optional field `criticality`
      if (jsonObj.get("criticality") != null && !jsonObj.get("criticality").isJsonNull()) {
        Criticality.validateJsonElement(jsonObj.get("criticality"));
      }
      if (jsonObj.get("developerOwners") != null && !jsonObj.get("developerOwners").isJsonNull()) {
        JsonArray jsonArraydeveloperOwners = jsonObj.getAsJsonArray("developerOwners");
        if (jsonArraydeveloperOwners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("developerOwners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `developerOwners` to be an array in the JSON string but got `%s`", jsonObj.get("developerOwners").toString()));
          }

          // validate the optional field `developerOwners` (array)
          for (int i = 0; i < jsonArraydeveloperOwners.size(); i++) {
            ContactInfo.validateJsonElement(jsonArraydeveloperOwners.get(i));
          };
        }
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        Environment.validateJsonElement(jsonObj.get("environment"));
      }
      if (jsonObj.get("operatorOwners") != null && !jsonObj.get("operatorOwners").isJsonNull()) {
        JsonArray jsonArrayoperatorOwners = jsonObj.getAsJsonArray("operatorOwners");
        if (jsonArrayoperatorOwners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("operatorOwners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `operatorOwners` to be an array in the JSON string but got `%s`", jsonObj.get("operatorOwners").toString()));
          }

          // validate the optional field `operatorOwners` (array)
          for (int i = 0; i < jsonArrayoperatorOwners.size(); i++) {
            ContactInfo.validateJsonElement(jsonArrayoperatorOwners.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attributes.class));

       return (TypeAdapter<T>) new TypeAdapter<Attributes>() {
           @Override
           public void write(JsonWriter out, Attributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attributes
   * @throws IOException if the JSON string is invalid with respect to Attributes
   */
  public static Attributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attributes.class);
  }

  /**
   * Convert an instance of Attributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

