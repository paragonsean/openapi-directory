/**
 * App Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discovered_service_isSet = false;
    m_discovered_service_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_properties_isSet = false;
    m_service_properties_isValid = false;

    m_service_reference_isSet = false;
    m_service_reference_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discovered_service_isValid = ::OpenAPI::fromJsonValue(m_discovered_service, json[QString("discoveredService")]);
    m_discovered_service_isSet = !json[QString("discoveredService")].isNull() && m_discovered_service_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_properties_isValid = ::OpenAPI::fromJsonValue(m_service_properties, json[QString("serviceProperties")]);
    m_service_properties_isSet = !json[QString("serviceProperties")].isNull() && m_service_properties_isValid;

    m_service_reference_isValid = ::OpenAPI::fromJsonValue(m_service_reference, json[QString("serviceReference")]);
    m_service_reference_isSet = !json[QString("serviceReference")].isNull() && m_service_reference_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discovered_service_isSet) {
        obj.insert(QString("discoveredService"), ::OpenAPI::toJsonValue(m_discovered_service));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_properties.isSet()) {
        obj.insert(QString("serviceProperties"), ::OpenAPI::toJsonValue(m_service_properties));
    }
    if (m_service_reference.isSet()) {
        obj.insert(QString("serviceReference"), ::OpenAPI::toJsonValue(m_service_reference));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIAttributes OAIService::getAttributes() const {
    return m_attributes;
}
void OAIService::setAttributes(const OAIAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIService::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIService::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIService::getCreateTime() const {
    return m_create_time;
}
void OAIService::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIService::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIService::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIService::getDescription() const {
    return m_description;
}
void OAIService::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIService::is_description_Set() const{
    return m_description_isSet;
}

bool OAIService::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIService::getDiscoveredService() const {
    return m_discovered_service;
}
void OAIService::setDiscoveredService(const QString &discovered_service) {
    m_discovered_service = discovered_service;
    m_discovered_service_isSet = true;
}

bool OAIService::is_discovered_service_Set() const{
    return m_discovered_service_isSet;
}

bool OAIService::is_discovered_service_Valid() const{
    return m_discovered_service_isValid;
}

QString OAIService::getDisplayName() const {
    return m_display_name;
}
void OAIService::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIService::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIService::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIService::getName() const {
    return m_name;
}
void OAIService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIService::is_name_Valid() const{
    return m_name_isValid;
}

OAIServiceProperties OAIService::getServiceProperties() const {
    return m_service_properties;
}
void OAIService::setServiceProperties(const OAIServiceProperties &service_properties) {
    m_service_properties = service_properties;
    m_service_properties_isSet = true;
}

bool OAIService::is_service_properties_Set() const{
    return m_service_properties_isSet;
}

bool OAIService::is_service_properties_Valid() const{
    return m_service_properties_isValid;
}

OAIServiceReference OAIService::getServiceReference() const {
    return m_service_reference;
}
void OAIService::setServiceReference(const OAIServiceReference &service_reference) {
    m_service_reference = service_reference;
    m_service_reference_isSet = true;
}

bool OAIService::is_service_reference_Set() const{
    return m_service_reference_isSet;
}

bool OAIService::is_service_reference_Valid() const{
    return m_service_reference_isValid;
}

QString OAIService::getState() const {
    return m_state;
}
void OAIService::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIService::is_state_Set() const{
    return m_state_isSet;
}

bool OAIService::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIService::getUid() const {
    return m_uid;
}
void OAIService::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIService::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIService::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIService::getUpdateTime() const {
    return m_update_time;
}
void OAIService::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIService::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIService::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovered_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
