/**
 * App Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoveredWorkload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoveredWorkload::OAIDiscoveredWorkload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoveredWorkload::OAIDiscoveredWorkload() {
    this->initializeModel();
}

OAIDiscoveredWorkload::~OAIDiscoveredWorkload() {}

void OAIDiscoveredWorkload::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_workload_properties_isSet = false;
    m_workload_properties_isValid = false;

    m_workload_reference_isSet = false;
    m_workload_reference_isValid = false;
}

void OAIDiscoveredWorkload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoveredWorkload::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_workload_properties_isValid = ::OpenAPI::fromJsonValue(m_workload_properties, json[QString("workloadProperties")]);
    m_workload_properties_isSet = !json[QString("workloadProperties")].isNull() && m_workload_properties_isValid;

    m_workload_reference_isValid = ::OpenAPI::fromJsonValue(m_workload_reference, json[QString("workloadReference")]);
    m_workload_reference_isSet = !json[QString("workloadReference")].isNull() && m_workload_reference_isValid;
}

QString OAIDiscoveredWorkload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoveredWorkload::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_workload_properties.isSet()) {
        obj.insert(QString("workloadProperties"), ::OpenAPI::toJsonValue(m_workload_properties));
    }
    if (m_workload_reference.isSet()) {
        obj.insert(QString("workloadReference"), ::OpenAPI::toJsonValue(m_workload_reference));
    }
    return obj;
}

QString OAIDiscoveredWorkload::getName() const {
    return m_name;
}
void OAIDiscoveredWorkload::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDiscoveredWorkload::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDiscoveredWorkload::is_name_Valid() const{
    return m_name_isValid;
}

OAIWorkloadProperties OAIDiscoveredWorkload::getWorkloadProperties() const {
    return m_workload_properties;
}
void OAIDiscoveredWorkload::setWorkloadProperties(const OAIWorkloadProperties &workload_properties) {
    m_workload_properties = workload_properties;
    m_workload_properties_isSet = true;
}

bool OAIDiscoveredWorkload::is_workload_properties_Set() const{
    return m_workload_properties_isSet;
}

bool OAIDiscoveredWorkload::is_workload_properties_Valid() const{
    return m_workload_properties_isValid;
}

OAIWorkloadReference OAIDiscoveredWorkload::getWorkloadReference() const {
    return m_workload_reference;
}
void OAIDiscoveredWorkload::setWorkloadReference(const OAIWorkloadReference &workload_reference) {
    m_workload_reference = workload_reference;
    m_workload_reference_isSet = true;
}

bool OAIDiscoveredWorkload::is_workload_reference_Set() const{
    return m_workload_reference_isSet;
}

bool OAIDiscoveredWorkload::is_workload_reference_Valid() const{
    return m_workload_reference_isValid;
}

bool OAIDiscoveredWorkload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoveredWorkload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
