# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_properties import ServiceProperties
from openapi_server.models.service_reference import ServiceReference
from openapi_server import util


class DiscoveredService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, service_properties: ServiceProperties=None, service_reference: ServiceReference=None):
        """DiscoveredService - a model defined in OpenAPI

        :param name: The name of this DiscoveredService.
        :param service_properties: The service_properties of this DiscoveredService.
        :param service_reference: The service_reference of this DiscoveredService.
        """
        self.openapi_types = {
            'name': str,
            'service_properties': ServiceProperties,
            'service_reference': ServiceReference
        }

        self.attribute_map = {
            'name': 'name',
            'service_properties': 'serviceProperties',
            'service_reference': 'serviceReference'
        }

        self._name = name
        self._service_properties = service_properties
        self._service_reference = service_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscoveredService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscoveredService of this DiscoveredService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DiscoveredService.

        Identifier. The resource name of the discovered service. Format: \"projects/{host-project-id}/locations/{location}/discoveredServices/{uuid}\"\"

        :return: The name of this DiscoveredService.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DiscoveredService.

        Identifier. The resource name of the discovered service. Format: \"projects/{host-project-id}/locations/{location}/discoveredServices/{uuid}\"\"

        :param name: The name of this DiscoveredService.
        :type name: str
        """

        self._name = name

    @property
    def service_properties(self):
        """Gets the service_properties of this DiscoveredService.


        :return: The service_properties of this DiscoveredService.
        :rtype: ServiceProperties
        """
        return self._service_properties

    @service_properties.setter
    def service_properties(self, service_properties):
        """Sets the service_properties of this DiscoveredService.


        :param service_properties: The service_properties of this DiscoveredService.
        :type service_properties: ServiceProperties
        """

        self._service_properties = service_properties

    @property
    def service_reference(self):
        """Gets the service_reference of this DiscoveredService.


        :return: The service_reference of this DiscoveredService.
        :rtype: ServiceReference
        """
        return self._service_reference

    @service_reference.setter
    def service_reference(self, service_reference):
        """Sets the service_reference of this DiscoveredService.


        :param service_reference: The service_reference of this DiscoveredService.
        :type service_reference: ServiceReference
        """

        self._service_reference = service_reference
