# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workload_properties import WorkloadProperties
from openapi_server.models.workload_reference import WorkloadReference
from openapi_server import util


class DiscoveredWorkload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, workload_properties: WorkloadProperties=None, workload_reference: WorkloadReference=None):
        """DiscoveredWorkload - a model defined in OpenAPI

        :param name: The name of this DiscoveredWorkload.
        :param workload_properties: The workload_properties of this DiscoveredWorkload.
        :param workload_reference: The workload_reference of this DiscoveredWorkload.
        """
        self.openapi_types = {
            'name': str,
            'workload_properties': WorkloadProperties,
            'workload_reference': WorkloadReference
        }

        self.attribute_map = {
            'name': 'name',
            'workload_properties': 'workloadProperties',
            'workload_reference': 'workloadReference'
        }

        self._name = name
        self._workload_properties = workload_properties
        self._workload_reference = workload_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscoveredWorkload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscoveredWorkload of this DiscoveredWorkload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DiscoveredWorkload.

        Identifier. The resource name of the discovered workload. Format: \"projects/{host-project-id}/locations/{location}/discoveredWorkloads/{uuid}\"

        :return: The name of this DiscoveredWorkload.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DiscoveredWorkload.

        Identifier. The resource name of the discovered workload. Format: \"projects/{host-project-id}/locations/{location}/discoveredWorkloads/{uuid}\"

        :param name: The name of this DiscoveredWorkload.
        :type name: str
        """

        self._name = name

    @property
    def workload_properties(self):
        """Gets the workload_properties of this DiscoveredWorkload.


        :return: The workload_properties of this DiscoveredWorkload.
        :rtype: WorkloadProperties
        """
        return self._workload_properties

    @workload_properties.setter
    def workload_properties(self, workload_properties):
        """Sets the workload_properties of this DiscoveredWorkload.


        :param workload_properties: The workload_properties of this DiscoveredWorkload.
        :type workload_properties: WorkloadProperties
        """

        self._workload_properties = workload_properties

    @property
    def workload_reference(self):
        """Gets the workload_reference of this DiscoveredWorkload.


        :return: The workload_reference of this DiscoveredWorkload.
        :rtype: WorkloadReference
        """
        return self._workload_reference

    @workload_reference.setter
    def workload_reference(self, workload_reference):
        """Sets the workload_reference of this DiscoveredWorkload.


        :param workload_reference: The workload_reference of this DiscoveredWorkload.
        :type workload_reference: WorkloadReference
        """

        self._workload_reference = workload_reference
