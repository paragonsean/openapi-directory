# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceProjectAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, name: str=None, service_project: str=None, state: str=None, uid: str=None):
        """ServiceProjectAttachment - a model defined in OpenAPI

        :param create_time: The create_time of this ServiceProjectAttachment.
        :param name: The name of this ServiceProjectAttachment.
        :param service_project: The service_project of this ServiceProjectAttachment.
        :param state: The state of this ServiceProjectAttachment.
        :param uid: The uid of this ServiceProjectAttachment.
        """
        self.openapi_types = {
            'create_time': str,
            'name': str,
            'service_project': str,
            'state': str,
            'uid': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'name': 'name',
            'service_project': 'serviceProject',
            'state': 'state',
            'uid': 'uid'
        }

        self._create_time = create_time
        self._name = name
        self._service_project = service_project
        self._state = state
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceProjectAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceProjectAttachment of this ServiceProjectAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ServiceProjectAttachment.

        Output only. Create time.

        :return: The create_time of this ServiceProjectAttachment.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ServiceProjectAttachment.

        Output only. Create time.

        :param create_time: The create_time of this ServiceProjectAttachment.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def name(self):
        """Gets the name of this ServiceProjectAttachment.

        Identifier. The resource name of a ServiceProjectAttachment. Format: \"projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}.\"

        :return: The name of this ServiceProjectAttachment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceProjectAttachment.

        Identifier. The resource name of a ServiceProjectAttachment. Format: \"projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}.\"

        :param name: The name of this ServiceProjectAttachment.
        :type name: str
        """

        self._name = name

    @property
    def service_project(self):
        """Gets the service_project of this ServiceProjectAttachment.

        Required. Immutable. Service project name in the format: \"projects/abc\" or \"projects/123\". As input, project name with either project id or number are accepted. As output, this field will contain project number.

        :return: The service_project of this ServiceProjectAttachment.
        :rtype: str
        """
        return self._service_project

    @service_project.setter
    def service_project(self, service_project):
        """Sets the service_project of this ServiceProjectAttachment.

        Required. Immutable. Service project name in the format: \"projects/abc\" or \"projects/123\". As input, project name with either project id or number are accepted. As output, this field will contain project number.

        :param service_project: The service_project of this ServiceProjectAttachment.
        :type service_project: str
        """

        self._service_project = service_project

    @property
    def state(self):
        """Gets the state of this ServiceProjectAttachment.

        Output only. ServiceProjectAttachment state.

        :return: The state of this ServiceProjectAttachment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ServiceProjectAttachment.

        Output only. ServiceProjectAttachment state.

        :param state: The state of this ServiceProjectAttachment.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this ServiceProjectAttachment.

        Output only. A globally unique identifier (in UUID4 format) for the `ServiceProjectAttachment`.

        :return: The uid of this ServiceProjectAttachment.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ServiceProjectAttachment.

        Output only. A globally unique identifier (in UUID4 format) for the `ServiceProjectAttachment`.

        :param uid: The uid of this ServiceProjectAttachment.
        :type uid: str
        """

        self._uid = uid
