/**
 * App Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes::OAIAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes::OAIAttributes() {
    this->initializeModel();
}

OAIAttributes::~OAIAttributes() {}

void OAIAttributes::initializeModel() {

    m_business_owners_isSet = false;
    m_business_owners_isValid = false;

    m_criticality_isSet = false;
    m_criticality_isValid = false;

    m_developer_owners_isSet = false;
    m_developer_owners_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_operator_owners_isSet = false;
    m_operator_owners_isValid = false;
}

void OAIAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes::fromJsonObject(QJsonObject json) {

    m_business_owners_isValid = ::OpenAPI::fromJsonValue(m_business_owners, json[QString("businessOwners")]);
    m_business_owners_isSet = !json[QString("businessOwners")].isNull() && m_business_owners_isValid;

    m_criticality_isValid = ::OpenAPI::fromJsonValue(m_criticality, json[QString("criticality")]);
    m_criticality_isSet = !json[QString("criticality")].isNull() && m_criticality_isValid;

    m_developer_owners_isValid = ::OpenAPI::fromJsonValue(m_developer_owners, json[QString("developerOwners")]);
    m_developer_owners_isSet = !json[QString("developerOwners")].isNull() && m_developer_owners_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_operator_owners_isValid = ::OpenAPI::fromJsonValue(m_operator_owners, json[QString("operatorOwners")]);
    m_operator_owners_isSet = !json[QString("operatorOwners")].isNull() && m_operator_owners_isValid;
}

QString OAIAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_business_owners.size() > 0) {
        obj.insert(QString("businessOwners"), ::OpenAPI::toJsonValue(m_business_owners));
    }
    if (m_criticality.isSet()) {
        obj.insert(QString("criticality"), ::OpenAPI::toJsonValue(m_criticality));
    }
    if (m_developer_owners.size() > 0) {
        obj.insert(QString("developerOwners"), ::OpenAPI::toJsonValue(m_developer_owners));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_operator_owners.size() > 0) {
        obj.insert(QString("operatorOwners"), ::OpenAPI::toJsonValue(m_operator_owners));
    }
    return obj;
}

QList<OAIContactInfo> OAIAttributes::getBusinessOwners() const {
    return m_business_owners;
}
void OAIAttributes::setBusinessOwners(const QList<OAIContactInfo> &business_owners) {
    m_business_owners = business_owners;
    m_business_owners_isSet = true;
}

bool OAIAttributes::is_business_owners_Set() const{
    return m_business_owners_isSet;
}

bool OAIAttributes::is_business_owners_Valid() const{
    return m_business_owners_isValid;
}

OAICriticality OAIAttributes::getCriticality() const {
    return m_criticality;
}
void OAIAttributes::setCriticality(const OAICriticality &criticality) {
    m_criticality = criticality;
    m_criticality_isSet = true;
}

bool OAIAttributes::is_criticality_Set() const{
    return m_criticality_isSet;
}

bool OAIAttributes::is_criticality_Valid() const{
    return m_criticality_isValid;
}

QList<OAIContactInfo> OAIAttributes::getDeveloperOwners() const {
    return m_developer_owners;
}
void OAIAttributes::setDeveloperOwners(const QList<OAIContactInfo> &developer_owners) {
    m_developer_owners = developer_owners;
    m_developer_owners_isSet = true;
}

bool OAIAttributes::is_developer_owners_Set() const{
    return m_developer_owners_isSet;
}

bool OAIAttributes::is_developer_owners_Valid() const{
    return m_developer_owners_isValid;
}

OAIEnvironment OAIAttributes::getEnvironment() const {
    return m_environment;
}
void OAIAttributes::setEnvironment(const OAIEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIAttributes::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIAttributes::is_environment_Valid() const{
    return m_environment_isValid;
}

QList<OAIContactInfo> OAIAttributes::getOperatorOwners() const {
    return m_operator_owners;
}
void OAIAttributes::setOperatorOwners(const QList<OAIContactInfo> &operator_owners) {
    m_operator_owners = operator_owners;
    m_operator_owners_isSet = true;
}

bool OAIAttributes::is_operator_owners_Set() const{
    return m_operator_owners_isSet;
}

bool OAIAttributes::is_operator_owners_Valid() const{
    return m_operator_owners_isValid;
}

bool OAIAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_criticality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
