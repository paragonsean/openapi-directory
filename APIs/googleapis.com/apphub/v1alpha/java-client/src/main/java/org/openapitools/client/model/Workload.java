/*
 * App Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Attributes;
import org.openapitools.client.model.WorkloadProperties;
import org.openapitools.client.model.WorkloadReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Workload is an App Hub data model that contains a discovered workload, which represents a binary deployment (such as managed instance groups (MIGs) and GKE deployments) that performs the smallest logical subset of business functionality.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:51.938769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Workload {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Attributes attributes;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOVERED_WORKLOAD = "discoveredWorkload";
  @SerializedName(SERIALIZED_NAME_DISCOVERED_WORKLOAD)
  private String discoveredWorkload;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. Workload state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    DELETING("DELETING"),
    
    DETACHED("DETACHED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_WORKLOAD_PROPERTIES = "workloadProperties";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_PROPERTIES)
  private WorkloadProperties workloadProperties;

  public static final String SERIALIZED_NAME_WORKLOAD_REFERENCE = "workloadReference";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_REFERENCE)
  private WorkloadReference workloadReference;

  public Workload() {
  }

  public Workload(
     String createTime, 
     StateEnum state, 
     String uid, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.state = state;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  public Workload attributes(Attributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Attributes getAttributes() {
    return attributes;
  }

  public void setAttributes(Attributes attributes) {
    this.attributes = attributes;
  }


  /**
   * Output only. Create time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Workload description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. User-defined description of a Workload. Can have a maximum length of 2048 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Workload discoveredWorkload(String discoveredWorkload) {
    this.discoveredWorkload = discoveredWorkload;
    return this;
  }

  /**
   * Required. Immutable. The resource name of the original discovered workload.
   * @return discoveredWorkload
   */
  @javax.annotation.Nullable
  public String getDiscoveredWorkload() {
    return discoveredWorkload;
  }

  public void setDiscoveredWorkload(String discoveredWorkload) {
    this.discoveredWorkload = discoveredWorkload;
  }


  public Workload displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. User-defined name for the Workload. Can have a maximum length of 63 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Workload name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. The resource name of the Workload. Format: \&quot;projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Workload state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. A universally unique identifier (UUID) for the &#x60;Workload&#x60; in the UUID4 format.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. Update time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public Workload workloadProperties(WorkloadProperties workloadProperties) {
    this.workloadProperties = workloadProperties;
    return this;
  }

  /**
   * Get workloadProperties
   * @return workloadProperties
   */
  @javax.annotation.Nullable
  public WorkloadProperties getWorkloadProperties() {
    return workloadProperties;
  }

  public void setWorkloadProperties(WorkloadProperties workloadProperties) {
    this.workloadProperties = workloadProperties;
  }


  public Workload workloadReference(WorkloadReference workloadReference) {
    this.workloadReference = workloadReference;
    return this;
  }

  /**
   * Get workloadReference
   * @return workloadReference
   */
  @javax.annotation.Nullable
  public WorkloadReference getWorkloadReference() {
    return workloadReference;
  }

  public void setWorkloadReference(WorkloadReference workloadReference) {
    this.workloadReference = workloadReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Workload workload = (Workload) o;
    return Objects.equals(this.attributes, workload.attributes) &&
        Objects.equals(this.createTime, workload.createTime) &&
        Objects.equals(this.description, workload.description) &&
        Objects.equals(this.discoveredWorkload, workload.discoveredWorkload) &&
        Objects.equals(this.displayName, workload.displayName) &&
        Objects.equals(this.name, workload.name) &&
        Objects.equals(this.state, workload.state) &&
        Objects.equals(this.uid, workload.uid) &&
        Objects.equals(this.updateTime, workload.updateTime) &&
        Objects.equals(this.workloadProperties, workload.workloadProperties) &&
        Objects.equals(this.workloadReference, workload.workloadReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, createTime, description, discoveredWorkload, displayName, name, state, uid, updateTime, workloadProperties, workloadReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Workload {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discoveredWorkload: ").append(toIndentedString(discoveredWorkload)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    workloadProperties: ").append(toIndentedString(workloadProperties)).append("\n");
    sb.append("    workloadReference: ").append(toIndentedString(workloadReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("discoveredWorkload");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("workloadProperties");
    openapiFields.add("workloadReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Workload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Workload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Workload is not found in the empty JSON string", Workload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Workload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Workload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        Attributes.validateJsonElement(jsonObj.get("attributes"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("discoveredWorkload") != null && !jsonObj.get("discoveredWorkload").isJsonNull()) && !jsonObj.get("discoveredWorkload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discoveredWorkload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discoveredWorkload").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `workloadProperties`
      if (jsonObj.get("workloadProperties") != null && !jsonObj.get("workloadProperties").isJsonNull()) {
        WorkloadProperties.validateJsonElement(jsonObj.get("workloadProperties"));
      }
      // validate the optional field `workloadReference`
      if (jsonObj.get("workloadReference") != null && !jsonObj.get("workloadReference").isJsonNull()) {
        WorkloadReference.validateJsonElement(jsonObj.get("workloadReference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Workload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Workload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Workload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Workload.class));

       return (TypeAdapter<T>) new TypeAdapter<Workload>() {
           @Override
           public void write(JsonWriter out, Workload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Workload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Workload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Workload
   * @throws IOException if the JSON string is invalid with respect to Workload
   */
  public static Workload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Workload.class);
  }

  /**
   * Convert an instance of Workload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

