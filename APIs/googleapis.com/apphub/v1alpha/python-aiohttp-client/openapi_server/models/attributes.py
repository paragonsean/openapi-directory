# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_info import ContactInfo
from openapi_server.models.criticality import Criticality
from openapi_server.models.environment import Environment
from openapi_server import util


class Attributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_owners: List[ContactInfo]=None, criticality: Criticality=None, developer_owners: List[ContactInfo]=None, environment: Environment=None, operator_owners: List[ContactInfo]=None):
        """Attributes - a model defined in OpenAPI

        :param business_owners: The business_owners of this Attributes.
        :param criticality: The criticality of this Attributes.
        :param developer_owners: The developer_owners of this Attributes.
        :param environment: The environment of this Attributes.
        :param operator_owners: The operator_owners of this Attributes.
        """
        self.openapi_types = {
            'business_owners': List[ContactInfo],
            'criticality': Criticality,
            'developer_owners': List[ContactInfo],
            'environment': Environment,
            'operator_owners': List[ContactInfo]
        }

        self.attribute_map = {
            'business_owners': 'businessOwners',
            'criticality': 'criticality',
            'developer_owners': 'developerOwners',
            'environment': 'environment',
            'operator_owners': 'operatorOwners'
        }

        self._business_owners = business_owners
        self._criticality = criticality
        self._developer_owners = developer_owners
        self._environment = environment
        self._operator_owners = operator_owners

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attributes of this Attributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_owners(self):
        """Gets the business_owners of this Attributes.

        Optional. Business team that ensures user needs are met and value is delivered

        :return: The business_owners of this Attributes.
        :rtype: List[ContactInfo]
        """
        return self._business_owners

    @business_owners.setter
    def business_owners(self, business_owners):
        """Sets the business_owners of this Attributes.

        Optional. Business team that ensures user needs are met and value is delivered

        :param business_owners: The business_owners of this Attributes.
        :type business_owners: List[ContactInfo]
        """

        self._business_owners = business_owners

    @property
    def criticality(self):
        """Gets the criticality of this Attributes.


        :return: The criticality of this Attributes.
        :rtype: Criticality
        """
        return self._criticality

    @criticality.setter
    def criticality(self, criticality):
        """Sets the criticality of this Attributes.


        :param criticality: The criticality of this Attributes.
        :type criticality: Criticality
        """

        self._criticality = criticality

    @property
    def developer_owners(self):
        """Gets the developer_owners of this Attributes.

        Optional. Developer team that owns development and coding.

        :return: The developer_owners of this Attributes.
        :rtype: List[ContactInfo]
        """
        return self._developer_owners

    @developer_owners.setter
    def developer_owners(self, developer_owners):
        """Sets the developer_owners of this Attributes.

        Optional. Developer team that owns development and coding.

        :param developer_owners: The developer_owners of this Attributes.
        :type developer_owners: List[ContactInfo]
        """

        self._developer_owners = developer_owners

    @property
    def environment(self):
        """Gets the environment of this Attributes.


        :return: The environment of this Attributes.
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Attributes.


        :param environment: The environment of this Attributes.
        :type environment: Environment
        """

        self._environment = environment

    @property
    def operator_owners(self):
        """Gets the operator_owners of this Attributes.

        Optional. Operator team that ensures runtime and operations.

        :return: The operator_owners of this Attributes.
        :rtype: List[ContactInfo]
        """
        return self._operator_owners

    @operator_owners.setter
    def operator_owners(self, operator_owners):
        """Sets the operator_owners of this Attributes.

        Optional. Operator team that ensures runtime and operations.

        :param operator_owners: The operator_owners of this Attributes.
        :type operator_owners: List[ContactInfo]
        """

        self._operator_owners = operator_owners
