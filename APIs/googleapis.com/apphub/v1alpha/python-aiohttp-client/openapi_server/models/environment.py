# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, environment: str=None, type: str=None):
        """Environment - a model defined in OpenAPI

        :param environment: The environment of this Environment.
        :param type: The type of this Environment.
        """
        self.openapi_types = {
            'environment': str,
            'type': str
        }

        self.attribute_map = {
            'environment': 'environment',
            'type': 'type'
        }

        self._environment = environment
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Environment of this Environment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def environment(self):
        """Gets the environment of this Environment.

        Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters.

        :return: The environment of this Environment.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Environment.

        Optional. Environment name. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters.

        :param environment: The environment of this Environment.
        :type environment: str
        """

        self._environment = environment

    @property
    def type(self):
        """Gets the type of this Environment.

        Required. Environment Type.

        :return: The type of this Environment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Environment.

        Required. Environment Type.

        :param type: The type of this Environment.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "PRODUCTION", "STAGING", "TEST", "DEVELOPMENT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
