# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkloadProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gcp_project: str=None, location: str=None, zone: str=None):
        """WorkloadProperties - a model defined in OpenAPI

        :param gcp_project: The gcp_project of this WorkloadProperties.
        :param location: The location of this WorkloadProperties.
        :param zone: The zone of this WorkloadProperties.
        """
        self.openapi_types = {
            'gcp_project': str,
            'location': str,
            'zone': str
        }

        self.attribute_map = {
            'gcp_project': 'gcpProject',
            'location': 'location',
            'zone': 'zone'
        }

        self._gcp_project = gcp_project
        self._location = location
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkloadProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkloadProperties of this WorkloadProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gcp_project(self):
        """Gets the gcp_project of this WorkloadProperties.

        Output only. The service project identifier that the underlying cloud resource resides in. Empty for non cloud resources.

        :return: The gcp_project of this WorkloadProperties.
        :rtype: str
        """
        return self._gcp_project

    @gcp_project.setter
    def gcp_project(self, gcp_project):
        """Sets the gcp_project of this WorkloadProperties.

        Output only. The service project identifier that the underlying cloud resource resides in. Empty for non cloud resources.

        :param gcp_project: The gcp_project of this WorkloadProperties.
        :type gcp_project: str
        """

        self._gcp_project = gcp_project

    @property
    def location(self):
        """Gets the location of this WorkloadProperties.

        Output only. The location that the underlying compute resource resides in (e.g us-west1).

        :return: The location of this WorkloadProperties.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this WorkloadProperties.

        Output only. The location that the underlying compute resource resides in (e.g us-west1).

        :param location: The location of this WorkloadProperties.
        :type location: str
        """

        self._location = location

    @property
    def zone(self):
        """Gets the zone of this WorkloadProperties.

        Output only. The location that the underlying compute resource resides in if it is zonal (e.g us-west1-a).

        :return: The zone of this WorkloadProperties.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this WorkloadProperties.

        Output only. The location that the underlying compute resource resides in if it is zonal (e.g us-west1-a).

        :param zone: The zone of this WorkloadProperties.
        :type zone: str
        """

        self._zone = zone
