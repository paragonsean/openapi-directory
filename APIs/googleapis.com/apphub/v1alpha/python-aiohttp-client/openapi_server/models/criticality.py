# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Criticality(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, level: str=None, mission_critical: bool=None, type: str=None):
        """Criticality - a model defined in OpenAPI

        :param level: The level of this Criticality.
        :param mission_critical: The mission_critical of this Criticality.
        :param type: The type of this Criticality.
        """
        self.openapi_types = {
            'level': str,
            'mission_critical': bool,
            'type': str
        }

        self.attribute_map = {
            'level': 'level',
            'mission_critical': 'missionCritical',
            'type': 'type'
        }

        self._level = level
        self._mission_critical = mission_critical
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Criticality':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Criticality of this Criticality.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def level(self):
        """Gets the level of this Criticality.

        Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters.

        :return: The level of this Criticality.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Criticality.

        Optional. Criticality level. Can contain only lowercase letters, numeric characters, underscores, and dashes. Can have a maximum length of 63 characters.

        :param level: The level of this Criticality.
        :type level: str
        """

        self._level = level

    @property
    def mission_critical(self):
        """Gets the mission_critical of this Criticality.

        Optional. Indicates mission-critical Application, Service, or Workload.

        :return: The mission_critical of this Criticality.
        :rtype: bool
        """
        return self._mission_critical

    @mission_critical.setter
    def mission_critical(self, mission_critical):
        """Sets the mission_critical of this Criticality.

        Optional. Indicates mission-critical Application, Service, or Workload.

        :param mission_critical: The mission_critical of this Criticality.
        :type mission_critical: bool
        """

        self._mission_critical = mission_critical

    @property
    def type(self):
        """Gets the type of this Criticality.

        Required. Criticality Type.

        :return: The type of this Criticality.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Criticality.

        Required. Criticality Type.

        :param type: The type of this Criticality.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "MISSION_CRITICAL", "HIGH", "MEDIUM", "LOW"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
