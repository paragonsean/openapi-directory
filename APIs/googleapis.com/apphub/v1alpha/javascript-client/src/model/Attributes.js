/**
 * App Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContactInfo from './ContactInfo';
import Criticality from './Criticality';
import Environment from './Environment';

/**
 * The Attributes model module.
 * @module model/Attributes
 * @version v1alpha
 */
class Attributes {
    /**
     * Constructs a new <code>Attributes</code>.
     * Consumer provided attributes.
     * @alias module:model/Attributes
     */
    constructor() { 
        
        Attributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes} obj Optional instance to populate.
     * @return {module:model/Attributes} The populated <code>Attributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes();

            if (data.hasOwnProperty('businessOwners')) {
                obj['businessOwners'] = ApiClient.convertToType(data['businessOwners'], [ContactInfo]);
            }
            if (data.hasOwnProperty('criticality')) {
                obj['criticality'] = Criticality.constructFromObject(data['criticality']);
            }
            if (data.hasOwnProperty('developerOwners')) {
                obj['developerOwners'] = ApiClient.convertToType(data['developerOwners'], [ContactInfo]);
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = Environment.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('operatorOwners')) {
                obj['operatorOwners'] = ApiClient.convertToType(data['operatorOwners'], [ContactInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes</code>.
     */
    static validateJSON(data) {
        if (data['businessOwners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['businessOwners'])) {
                throw new Error("Expected the field `businessOwners` to be an array in the JSON data but got " + data['businessOwners']);
            }
            // validate the optional field `businessOwners` (array)
            for (const item of data['businessOwners']) {
                ContactInfo.validateJSON(item);
            };
        }
        // validate the optional field `criticality`
        if (data['criticality']) { // data not null
          Criticality.validateJSON(data['criticality']);
        }
        if (data['developerOwners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['developerOwners'])) {
                throw new Error("Expected the field `developerOwners` to be an array in the JSON data but got " + data['developerOwners']);
            }
            // validate the optional field `developerOwners` (array)
            for (const item of data['developerOwners']) {
                ContactInfo.validateJSON(item);
            };
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          Environment.validateJSON(data['environment']);
        }
        if (data['operatorOwners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['operatorOwners'])) {
                throw new Error("Expected the field `operatorOwners` to be an array in the JSON data but got " + data['operatorOwners']);
            }
            // validate the optional field `operatorOwners` (array)
            for (const item of data['operatorOwners']) {
                ContactInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Optional. Business team that ensures user needs are met and value is delivered
 * @member {Array.<module:model/ContactInfo>} businessOwners
 */
Attributes.prototype['businessOwners'] = undefined;

/**
 * @member {module:model/Criticality} criticality
 */
Attributes.prototype['criticality'] = undefined;

/**
 * Optional. Developer team that owns development and coding.
 * @member {Array.<module:model/ContactInfo>} developerOwners
 */
Attributes.prototype['developerOwners'] = undefined;

/**
 * @member {module:model/Environment} environment
 */
Attributes.prototype['environment'] = undefined;

/**
 * Optional. Operator team that ensures runtime and operations.
 * @member {Array.<module:model/ContactInfo>} operatorOwners
 */
Attributes.prototype['operatorOwners'] = undefined;






export default Attributes;

