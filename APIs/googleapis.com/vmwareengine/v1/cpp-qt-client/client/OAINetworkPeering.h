/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINetworkPeering.h
 *
 * Details of a network peering.
 */

#ifndef OAINetworkPeering_H
#define OAINetworkPeering_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINetworkPeering : public OAIObject {
public:
    OAINetworkPeering();
    OAINetworkPeering(QString json);
    ~OAINetworkPeering() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isExchangeSubnetRoutes() const;
    void setExchangeSubnetRoutes(const bool &exchange_subnet_routes);
    bool is_exchange_subnet_routes_Set() const;
    bool is_exchange_subnet_routes_Valid() const;

    bool isExportCustomRoutes() const;
    void setExportCustomRoutes(const bool &export_custom_routes);
    bool is_export_custom_routes_Set() const;
    bool is_export_custom_routes_Valid() const;

    bool isExportCustomRoutesWithPublicIp() const;
    void setExportCustomRoutesWithPublicIp(const bool &export_custom_routes_with_public_ip);
    bool is_export_custom_routes_with_public_ip_Set() const;
    bool is_export_custom_routes_with_public_ip_Valid() const;

    bool isImportCustomRoutes() const;
    void setImportCustomRoutes(const bool &import_custom_routes);
    bool is_import_custom_routes_Set() const;
    bool is_import_custom_routes_Valid() const;

    bool isImportCustomRoutesWithPublicIp() const;
    void setImportCustomRoutesWithPublicIp(const bool &import_custom_routes_with_public_ip);
    bool is_import_custom_routes_with_public_ip_Set() const;
    bool is_import_custom_routes_with_public_ip_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPeerMtu() const;
    void setPeerMtu(const qint32 &peer_mtu);
    bool is_peer_mtu_Set() const;
    bool is_peer_mtu_Valid() const;

    QString getPeerNetwork() const;
    void setPeerNetwork(const QString &peer_network);
    bool is_peer_network_Set() const;
    bool is_peer_network_Valid() const;

    QString getPeerNetworkType() const;
    void setPeerNetworkType(const QString &peer_network_type);
    bool is_peer_network_type_Set() const;
    bool is_peer_network_type_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStateDetails() const;
    void setStateDetails(const QString &state_details);
    bool is_state_details_Set() const;
    bool is_state_details_Valid() const;

    QString getUid() const;
    void setUid(const QString &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    QString getVmwareEngineNetwork() const;
    void setVmwareEngineNetwork(const QString &vmware_engine_network);
    bool is_vmware_engine_network_Set() const;
    bool is_vmware_engine_network_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_exchange_subnet_routes;
    bool m_exchange_subnet_routes_isSet;
    bool m_exchange_subnet_routes_isValid;

    bool m_export_custom_routes;
    bool m_export_custom_routes_isSet;
    bool m_export_custom_routes_isValid;

    bool m_export_custom_routes_with_public_ip;
    bool m_export_custom_routes_with_public_ip_isSet;
    bool m_export_custom_routes_with_public_ip_isValid;

    bool m_import_custom_routes;
    bool m_import_custom_routes_isSet;
    bool m_import_custom_routes_isValid;

    bool m_import_custom_routes_with_public_ip;
    bool m_import_custom_routes_with_public_ip_isSet;
    bool m_import_custom_routes_with_public_ip_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_peer_mtu;
    bool m_peer_mtu_isSet;
    bool m_peer_mtu_isValid;

    QString m_peer_network;
    bool m_peer_network_isSet;
    bool m_peer_network_isValid;

    QString m_peer_network_type;
    bool m_peer_network_type_isSet;
    bool m_peer_network_type_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_state_details;
    bool m_state_details_isSet;
    bool m_state_details_isValid;

    QString m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;

    QString m_vmware_engine_network;
    bool m_vmware_engine_network_isSet;
    bool m_vmware_engine_network_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINetworkPeering)

#endif // OAINetworkPeering_H
