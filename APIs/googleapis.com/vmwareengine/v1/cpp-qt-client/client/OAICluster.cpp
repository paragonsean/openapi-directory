/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICluster::OAICluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICluster::OAICluster() {
    this->initializeModel();
}

OAICluster::~OAICluster() {}

void OAICluster::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_management_isSet = false;
    m_management_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_type_configs_isSet = false;
    m_node_type_configs_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_stretched_cluster_config_isSet = false;
    m_stretched_cluster_config_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICluster::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_management_isValid = ::OpenAPI::fromJsonValue(m_management, json[QString("management")]);
    m_management_isSet = !json[QString("management")].isNull() && m_management_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_type_configs_isValid = ::OpenAPI::fromJsonValue(m_node_type_configs, json[QString("nodeTypeConfigs")]);
    m_node_type_configs_isSet = !json[QString("nodeTypeConfigs")].isNull() && m_node_type_configs_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_stretched_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_stretched_cluster_config, json[QString("stretchedClusterConfig")]);
    m_stretched_cluster_config_isSet = !json[QString("stretchedClusterConfig")].isNull() && m_stretched_cluster_config_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICluster::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_management_isSet) {
        obj.insert(QString("management"), ::OpenAPI::toJsonValue(m_management));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_type_configs.size() > 0) {
        obj.insert(QString("nodeTypeConfigs"), ::OpenAPI::toJsonValue(m_node_type_configs));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_stretched_cluster_config.isSet()) {
        obj.insert(QString("stretchedClusterConfig"), ::OpenAPI::toJsonValue(m_stretched_cluster_config));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAICluster::getCreateTime() const {
    return m_create_time;
}
void OAICluster::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICluster::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICluster::is_create_time_Valid() const{
    return m_create_time_isValid;
}

bool OAICluster::isManagement() const {
    return m_management;
}
void OAICluster::setManagement(const bool &management) {
    m_management = management;
    m_management_isSet = true;
}

bool OAICluster::is_management_Set() const{
    return m_management_isSet;
}

bool OAICluster::is_management_Valid() const{
    return m_management_isValid;
}

QString OAICluster::getName() const {
    return m_name;
}
void OAICluster::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICluster::is_name_Set() const{
    return m_name_isSet;
}

bool OAICluster::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, OAINodeTypeConfig> OAICluster::getNodeTypeConfigs() const {
    return m_node_type_configs;
}
void OAICluster::setNodeTypeConfigs(const QMap<QString, OAINodeTypeConfig> &node_type_configs) {
    m_node_type_configs = node_type_configs;
    m_node_type_configs_isSet = true;
}

bool OAICluster::is_node_type_configs_Set() const{
    return m_node_type_configs_isSet;
}

bool OAICluster::is_node_type_configs_Valid() const{
    return m_node_type_configs_isValid;
}

QString OAICluster::getState() const {
    return m_state;
}
void OAICluster::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICluster::is_state_Set() const{
    return m_state_isSet;
}

bool OAICluster::is_state_Valid() const{
    return m_state_isValid;
}

OAIStretchedClusterConfig OAICluster::getStretchedClusterConfig() const {
    return m_stretched_cluster_config;
}
void OAICluster::setStretchedClusterConfig(const OAIStretchedClusterConfig &stretched_cluster_config) {
    m_stretched_cluster_config = stretched_cluster_config;
    m_stretched_cluster_config_isSet = true;
}

bool OAICluster::is_stretched_cluster_config_Set() const{
    return m_stretched_cluster_config_isSet;
}

bool OAICluster::is_stretched_cluster_config_Valid() const{
    return m_stretched_cluster_config_isValid;
}

QString OAICluster::getUid() const {
    return m_uid;
}
void OAICluster::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAICluster::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAICluster::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAICluster::getUpdateTime() const {
    return m_update_time;
}
void OAICluster::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICluster::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICluster::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stretched_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
