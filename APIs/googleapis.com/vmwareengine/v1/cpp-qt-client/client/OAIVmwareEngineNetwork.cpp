/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareEngineNetwork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareEngineNetwork::OAIVmwareEngineNetwork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareEngineNetwork::OAIVmwareEngineNetwork() {
    this->initializeModel();
}

OAIVmwareEngineNetwork::~OAIVmwareEngineNetwork() {}

void OAIVmwareEngineNetwork::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_vpc_networks_isSet = false;
    m_vpc_networks_isValid = false;
}

void OAIVmwareEngineNetwork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareEngineNetwork::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_vpc_networks_isValid = ::OpenAPI::fromJsonValue(m_vpc_networks, json[QString("vpcNetworks")]);
    m_vpc_networks_isSet = !json[QString("vpcNetworks")].isNull() && m_vpc_networks_isValid;
}

QString OAIVmwareEngineNetwork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareEngineNetwork::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_vpc_networks.size() > 0) {
        obj.insert(QString("vpcNetworks"), ::OpenAPI::toJsonValue(m_vpc_networks));
    }
    return obj;
}

QString OAIVmwareEngineNetwork::getCreateTime() const {
    return m_create_time;
}
void OAIVmwareEngineNetwork::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIVmwareEngineNetwork::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIVmwareEngineNetwork::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIVmwareEngineNetwork::getDescription() const {
    return m_description;
}
void OAIVmwareEngineNetwork::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVmwareEngineNetwork::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVmwareEngineNetwork::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVmwareEngineNetwork::getEtag() const {
    return m_etag;
}
void OAIVmwareEngineNetwork::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIVmwareEngineNetwork::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIVmwareEngineNetwork::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIVmwareEngineNetwork::getName() const {
    return m_name;
}
void OAIVmwareEngineNetwork::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVmwareEngineNetwork::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVmwareEngineNetwork::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVmwareEngineNetwork::getState() const {
    return m_state;
}
void OAIVmwareEngineNetwork::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVmwareEngineNetwork::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVmwareEngineNetwork::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIVmwareEngineNetwork::getType() const {
    return m_type;
}
void OAIVmwareEngineNetwork::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVmwareEngineNetwork::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVmwareEngineNetwork::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIVmwareEngineNetwork::getUid() const {
    return m_uid;
}
void OAIVmwareEngineNetwork::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIVmwareEngineNetwork::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIVmwareEngineNetwork::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIVmwareEngineNetwork::getUpdateTime() const {
    return m_update_time;
}
void OAIVmwareEngineNetwork::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIVmwareEngineNetwork::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIVmwareEngineNetwork::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QList<OAIVpcNetwork> OAIVmwareEngineNetwork::getVpcNetworks() const {
    return m_vpc_networks;
}
void OAIVmwareEngineNetwork::setVpcNetworks(const QList<OAIVpcNetwork> &vpc_networks) {
    m_vpc_networks = vpc_networks;
    m_vpc_networks_isSet = true;
}

bool OAIVmwareEngineNetwork::is_vpc_networks_Set() const{
    return m_vpc_networks_isSet;
}

bool OAIVmwareEngineNetwork::is_vpc_networks_Valid() const{
    return m_vpc_networks_isValid;
}

bool OAIVmwareEngineNetwork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareEngineNetwork::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
