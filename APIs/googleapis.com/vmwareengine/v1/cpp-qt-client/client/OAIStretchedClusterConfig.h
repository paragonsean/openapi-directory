/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStretchedClusterConfig.h
 *
 * Configuration of a stretched cluster.
 */

#ifndef OAIStretchedClusterConfig_H
#define OAIStretchedClusterConfig_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStretchedClusterConfig : public OAIObject {
public:
    OAIStretchedClusterConfig();
    OAIStretchedClusterConfig(QString json);
    ~OAIStretchedClusterConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPreferredLocation() const;
    void setPreferredLocation(const QString &preferred_location);
    bool is_preferred_location_Set() const;
    bool is_preferred_location_Valid() const;

    QString getSecondaryLocation() const;
    void setSecondaryLocation(const QString &secondary_location);
    bool is_secondary_location_Set() const;
    bool is_secondary_location_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_preferred_location;
    bool m_preferred_location_isSet;
    bool m_preferred_location_isValid;

    QString m_secondary_location;
    bool m_secondary_location_isSet;
    bool m_secondary_location_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStretchedClusterConfig)

#endif // OAIStretchedClusterConfig_H
