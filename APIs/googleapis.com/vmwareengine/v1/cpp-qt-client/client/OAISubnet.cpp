/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubnet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubnet::OAISubnet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubnet::OAISubnet() {
    this->initializeModel();
}

OAISubnet::~OAISubnet() {}

void OAISubnet::initializeModel() {

    m_gateway_ip_isSet = false;
    m_gateway_ip_isValid = false;

    m_ip_cidr_range_isSet = false;
    m_ip_cidr_range_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vlan_id_isSet = false;
    m_vlan_id_isValid = false;
}

void OAISubnet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubnet::fromJsonObject(QJsonObject json) {

    m_gateway_ip_isValid = ::OpenAPI::fromJsonValue(m_gateway_ip, json[QString("gatewayIp")]);
    m_gateway_ip_isSet = !json[QString("gatewayIp")].isNull() && m_gateway_ip_isValid;

    m_ip_cidr_range_isValid = ::OpenAPI::fromJsonValue(m_ip_cidr_range, json[QString("ipCidrRange")]);
    m_ip_cidr_range_isSet = !json[QString("ipCidrRange")].isNull() && m_ip_cidr_range_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_vlan_id, json[QString("vlanId")]);
    m_vlan_id_isSet = !json[QString("vlanId")].isNull() && m_vlan_id_isValid;
}

QString OAISubnet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubnet::asJsonObject() const {
    QJsonObject obj;
    if (m_gateway_ip_isSet) {
        obj.insert(QString("gatewayIp"), ::OpenAPI::toJsonValue(m_gateway_ip));
    }
    if (m_ip_cidr_range_isSet) {
        obj.insert(QString("ipCidrRange"), ::OpenAPI::toJsonValue(m_ip_cidr_range));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vlan_id_isSet) {
        obj.insert(QString("vlanId"), ::OpenAPI::toJsonValue(m_vlan_id));
    }
    return obj;
}

QString OAISubnet::getGatewayIp() const {
    return m_gateway_ip;
}
void OAISubnet::setGatewayIp(const QString &gateway_ip) {
    m_gateway_ip = gateway_ip;
    m_gateway_ip_isSet = true;
}

bool OAISubnet::is_gateway_ip_Set() const{
    return m_gateway_ip_isSet;
}

bool OAISubnet::is_gateway_ip_Valid() const{
    return m_gateway_ip_isValid;
}

QString OAISubnet::getIpCidrRange() const {
    return m_ip_cidr_range;
}
void OAISubnet::setIpCidrRange(const QString &ip_cidr_range) {
    m_ip_cidr_range = ip_cidr_range;
    m_ip_cidr_range_isSet = true;
}

bool OAISubnet::is_ip_cidr_range_Set() const{
    return m_ip_cidr_range_isSet;
}

bool OAISubnet::is_ip_cidr_range_Valid() const{
    return m_ip_cidr_range_isValid;
}

QString OAISubnet::getName() const {
    return m_name;
}
void OAISubnet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubnet::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubnet::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISubnet::getState() const {
    return m_state;
}
void OAISubnet::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubnet::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubnet::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISubnet::getType() const {
    return m_type;
}
void OAISubnet::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISubnet::is_type_Set() const{
    return m_type_isSet;
}

bool OAISubnet::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAISubnet::getVlanId() const {
    return m_vlan_id;
}
void OAISubnet::setVlanId(const qint32 &vlan_id) {
    m_vlan_id = vlan_id;
    m_vlan_id_isSet = true;
}

bool OAISubnet::is_vlan_id_Set() const{
    return m_vlan_id_isSet;
}

bool OAISubnet::is_vlan_id_Valid() const{
    return m_vlan_id_isValid;
}

bool OAISubnet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gateway_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_cidr_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubnet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
