/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkPolicy::OAINetworkPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkPolicy::OAINetworkPolicy() {
    this->initializeModel();
}

OAINetworkPolicy::~OAINetworkPolicy() {}

void OAINetworkPolicy::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_edge_services_cidr_isSet = false;
    m_edge_services_cidr_isValid = false;

    m_external_ip_isSet = false;
    m_external_ip_isValid = false;

    m_internet_access_isSet = false;
    m_internet_access_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_vmware_engine_network_isSet = false;
    m_vmware_engine_network_isValid = false;

    m_vmware_engine_network_canonical_isSet = false;
    m_vmware_engine_network_canonical_isValid = false;
}

void OAINetworkPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkPolicy::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_edge_services_cidr_isValid = ::OpenAPI::fromJsonValue(m_edge_services_cidr, json[QString("edgeServicesCidr")]);
    m_edge_services_cidr_isSet = !json[QString("edgeServicesCidr")].isNull() && m_edge_services_cidr_isValid;

    m_external_ip_isValid = ::OpenAPI::fromJsonValue(m_external_ip, json[QString("externalIp")]);
    m_external_ip_isSet = !json[QString("externalIp")].isNull() && m_external_ip_isValid;

    m_internet_access_isValid = ::OpenAPI::fromJsonValue(m_internet_access, json[QString("internetAccess")]);
    m_internet_access_isSet = !json[QString("internetAccess")].isNull() && m_internet_access_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_vmware_engine_network_isValid = ::OpenAPI::fromJsonValue(m_vmware_engine_network, json[QString("vmwareEngineNetwork")]);
    m_vmware_engine_network_isSet = !json[QString("vmwareEngineNetwork")].isNull() && m_vmware_engine_network_isValid;

    m_vmware_engine_network_canonical_isValid = ::OpenAPI::fromJsonValue(m_vmware_engine_network_canonical, json[QString("vmwareEngineNetworkCanonical")]);
    m_vmware_engine_network_canonical_isSet = !json[QString("vmwareEngineNetworkCanonical")].isNull() && m_vmware_engine_network_canonical_isValid;
}

QString OAINetworkPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_edge_services_cidr_isSet) {
        obj.insert(QString("edgeServicesCidr"), ::OpenAPI::toJsonValue(m_edge_services_cidr));
    }
    if (m_external_ip.isSet()) {
        obj.insert(QString("externalIp"), ::OpenAPI::toJsonValue(m_external_ip));
    }
    if (m_internet_access.isSet()) {
        obj.insert(QString("internetAccess"), ::OpenAPI::toJsonValue(m_internet_access));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_vmware_engine_network_isSet) {
        obj.insert(QString("vmwareEngineNetwork"), ::OpenAPI::toJsonValue(m_vmware_engine_network));
    }
    if (m_vmware_engine_network_canonical_isSet) {
        obj.insert(QString("vmwareEngineNetworkCanonical"), ::OpenAPI::toJsonValue(m_vmware_engine_network_canonical));
    }
    return obj;
}

QString OAINetworkPolicy::getCreateTime() const {
    return m_create_time;
}
void OAINetworkPolicy::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAINetworkPolicy::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAINetworkPolicy::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAINetworkPolicy::getDescription() const {
    return m_description;
}
void OAINetworkPolicy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINetworkPolicy::is_description_Set() const{
    return m_description_isSet;
}

bool OAINetworkPolicy::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINetworkPolicy::getEdgeServicesCidr() const {
    return m_edge_services_cidr;
}
void OAINetworkPolicy::setEdgeServicesCidr(const QString &edge_services_cidr) {
    m_edge_services_cidr = edge_services_cidr;
    m_edge_services_cidr_isSet = true;
}

bool OAINetworkPolicy::is_edge_services_cidr_Set() const{
    return m_edge_services_cidr_isSet;
}

bool OAINetworkPolicy::is_edge_services_cidr_Valid() const{
    return m_edge_services_cidr_isValid;
}

OAINetworkService OAINetworkPolicy::getExternalIp() const {
    return m_external_ip;
}
void OAINetworkPolicy::setExternalIp(const OAINetworkService &external_ip) {
    m_external_ip = external_ip;
    m_external_ip_isSet = true;
}

bool OAINetworkPolicy::is_external_ip_Set() const{
    return m_external_ip_isSet;
}

bool OAINetworkPolicy::is_external_ip_Valid() const{
    return m_external_ip_isValid;
}

OAINetworkService OAINetworkPolicy::getInternetAccess() const {
    return m_internet_access;
}
void OAINetworkPolicy::setInternetAccess(const OAINetworkService &internet_access) {
    m_internet_access = internet_access;
    m_internet_access_isSet = true;
}

bool OAINetworkPolicy::is_internet_access_Set() const{
    return m_internet_access_isSet;
}

bool OAINetworkPolicy::is_internet_access_Valid() const{
    return m_internet_access_isValid;
}

QString OAINetworkPolicy::getName() const {
    return m_name;
}
void OAINetworkPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINetworkPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAINetworkPolicy::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINetworkPolicy::getUid() const {
    return m_uid;
}
void OAINetworkPolicy::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAINetworkPolicy::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAINetworkPolicy::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAINetworkPolicy::getUpdateTime() const {
    return m_update_time;
}
void OAINetworkPolicy::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAINetworkPolicy::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAINetworkPolicy::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAINetworkPolicy::getVmwareEngineNetwork() const {
    return m_vmware_engine_network;
}
void OAINetworkPolicy::setVmwareEngineNetwork(const QString &vmware_engine_network) {
    m_vmware_engine_network = vmware_engine_network;
    m_vmware_engine_network_isSet = true;
}

bool OAINetworkPolicy::is_vmware_engine_network_Set() const{
    return m_vmware_engine_network_isSet;
}

bool OAINetworkPolicy::is_vmware_engine_network_Valid() const{
    return m_vmware_engine_network_isValid;
}

QString OAINetworkPolicy::getVmwareEngineNetworkCanonical() const {
    return m_vmware_engine_network_canonical;
}
void OAINetworkPolicy::setVmwareEngineNetworkCanonical(const QString &vmware_engine_network_canonical) {
    m_vmware_engine_network_canonical = vmware_engine_network_canonical;
    m_vmware_engine_network_canonical_isSet = true;
}

bool OAINetworkPolicy::is_vmware_engine_network_canonical_Set() const{
    return m_vmware_engine_network_canonical_isSet;
}

bool OAINetworkPolicy::is_vmware_engine_network_canonical_Valid() const{
    return m_vmware_engine_network_canonical_isValid;
}

bool OAINetworkPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edge_services_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internet_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_engine_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_engine_network_canonical_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
