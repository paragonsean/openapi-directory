/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalAddress::OAIExternalAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalAddress::OAIExternalAddress() {
    this->initializeModel();
}

OAIExternalAddress::~OAIExternalAddress() {}

void OAIExternalAddress::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_ip_isSet = false;
    m_external_ip_isValid = false;

    m_internal_ip_isSet = false;
    m_internal_ip_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIExternalAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalAddress::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_ip_isValid = ::OpenAPI::fromJsonValue(m_external_ip, json[QString("externalIp")]);
    m_external_ip_isSet = !json[QString("externalIp")].isNull() && m_external_ip_isValid;

    m_internal_ip_isValid = ::OpenAPI::fromJsonValue(m_internal_ip, json[QString("internalIp")]);
    m_internal_ip_isSet = !json[QString("internalIp")].isNull() && m_internal_ip_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIExternalAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_ip_isSet) {
        obj.insert(QString("externalIp"), ::OpenAPI::toJsonValue(m_external_ip));
    }
    if (m_internal_ip_isSet) {
        obj.insert(QString("internalIp"), ::OpenAPI::toJsonValue(m_internal_ip));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIExternalAddress::getCreateTime() const {
    return m_create_time;
}
void OAIExternalAddress::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIExternalAddress::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIExternalAddress::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIExternalAddress::getDescription() const {
    return m_description;
}
void OAIExternalAddress::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExternalAddress::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExternalAddress::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIExternalAddress::getExternalIp() const {
    return m_external_ip;
}
void OAIExternalAddress::setExternalIp(const QString &external_ip) {
    m_external_ip = external_ip;
    m_external_ip_isSet = true;
}

bool OAIExternalAddress::is_external_ip_Set() const{
    return m_external_ip_isSet;
}

bool OAIExternalAddress::is_external_ip_Valid() const{
    return m_external_ip_isValid;
}

QString OAIExternalAddress::getInternalIp() const {
    return m_internal_ip;
}
void OAIExternalAddress::setInternalIp(const QString &internal_ip) {
    m_internal_ip = internal_ip;
    m_internal_ip_isSet = true;
}

bool OAIExternalAddress::is_internal_ip_Set() const{
    return m_internal_ip_isSet;
}

bool OAIExternalAddress::is_internal_ip_Valid() const{
    return m_internal_ip_isValid;
}

QString OAIExternalAddress::getName() const {
    return m_name;
}
void OAIExternalAddress::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExternalAddress::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExternalAddress::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExternalAddress::getState() const {
    return m_state;
}
void OAIExternalAddress::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIExternalAddress::is_state_Set() const{
    return m_state_isSet;
}

bool OAIExternalAddress::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIExternalAddress::getUid() const {
    return m_uid;
}
void OAIExternalAddress::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIExternalAddress::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIExternalAddress::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIExternalAddress::getUpdateTime() const {
    return m_update_time;
}
void OAIExternalAddress::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIExternalAddress::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIExternalAddress::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIExternalAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
