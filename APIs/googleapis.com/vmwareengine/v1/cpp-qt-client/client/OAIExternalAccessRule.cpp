/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalAccessRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalAccessRule::OAIExternalAccessRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalAccessRule::OAIExternalAccessRule() {
    this->initializeModel();
}

OAIExternalAccessRule::~OAIExternalAccessRule() {}

void OAIExternalAccessRule::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_ip_ranges_isSet = false;
    m_destination_ip_ranges_isValid = false;

    m_destination_ports_isSet = false;
    m_destination_ports_isValid = false;

    m_ip_protocol_isSet = false;
    m_ip_protocol_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_source_ip_ranges_isSet = false;
    m_source_ip_ranges_isValid = false;

    m_source_ports_isSet = false;
    m_source_ports_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIExternalAccessRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalAccessRule::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_destination_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_destination_ip_ranges, json[QString("destinationIpRanges")]);
    m_destination_ip_ranges_isSet = !json[QString("destinationIpRanges")].isNull() && m_destination_ip_ranges_isValid;

    m_destination_ports_isValid = ::OpenAPI::fromJsonValue(m_destination_ports, json[QString("destinationPorts")]);
    m_destination_ports_isSet = !json[QString("destinationPorts")].isNull() && m_destination_ports_isValid;

    m_ip_protocol_isValid = ::OpenAPI::fromJsonValue(m_ip_protocol, json[QString("ipProtocol")]);
    m_ip_protocol_isSet = !json[QString("ipProtocol")].isNull() && m_ip_protocol_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_source_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_source_ip_ranges, json[QString("sourceIpRanges")]);
    m_source_ip_ranges_isSet = !json[QString("sourceIpRanges")].isNull() && m_source_ip_ranges_isValid;

    m_source_ports_isValid = ::OpenAPI::fromJsonValue(m_source_ports, json[QString("sourcePorts")]);
    m_source_ports_isSet = !json[QString("sourcePorts")].isNull() && m_source_ports_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIExternalAccessRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalAccessRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_ip_ranges.size() > 0) {
        obj.insert(QString("destinationIpRanges"), ::OpenAPI::toJsonValue(m_destination_ip_ranges));
    }
    if (m_destination_ports.size() > 0) {
        obj.insert(QString("destinationPorts"), ::OpenAPI::toJsonValue(m_destination_ports));
    }
    if (m_ip_protocol_isSet) {
        obj.insert(QString("ipProtocol"), ::OpenAPI::toJsonValue(m_ip_protocol));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_source_ip_ranges.size() > 0) {
        obj.insert(QString("sourceIpRanges"), ::OpenAPI::toJsonValue(m_source_ip_ranges));
    }
    if (m_source_ports.size() > 0) {
        obj.insert(QString("sourcePorts"), ::OpenAPI::toJsonValue(m_source_ports));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIExternalAccessRule::getAction() const {
    return m_action;
}
void OAIExternalAccessRule::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIExternalAccessRule::is_action_Set() const{
    return m_action_isSet;
}

bool OAIExternalAccessRule::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIExternalAccessRule::getCreateTime() const {
    return m_create_time;
}
void OAIExternalAccessRule::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIExternalAccessRule::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIExternalAccessRule::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIExternalAccessRule::getDescription() const {
    return m_description;
}
void OAIExternalAccessRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExternalAccessRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExternalAccessRule::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIIpRange> OAIExternalAccessRule::getDestinationIpRanges() const {
    return m_destination_ip_ranges;
}
void OAIExternalAccessRule::setDestinationIpRanges(const QList<OAIIpRange> &destination_ip_ranges) {
    m_destination_ip_ranges = destination_ip_ranges;
    m_destination_ip_ranges_isSet = true;
}

bool OAIExternalAccessRule::is_destination_ip_ranges_Set() const{
    return m_destination_ip_ranges_isSet;
}

bool OAIExternalAccessRule::is_destination_ip_ranges_Valid() const{
    return m_destination_ip_ranges_isValid;
}

QList<QString> OAIExternalAccessRule::getDestinationPorts() const {
    return m_destination_ports;
}
void OAIExternalAccessRule::setDestinationPorts(const QList<QString> &destination_ports) {
    m_destination_ports = destination_ports;
    m_destination_ports_isSet = true;
}

bool OAIExternalAccessRule::is_destination_ports_Set() const{
    return m_destination_ports_isSet;
}

bool OAIExternalAccessRule::is_destination_ports_Valid() const{
    return m_destination_ports_isValid;
}

QString OAIExternalAccessRule::getIpProtocol() const {
    return m_ip_protocol;
}
void OAIExternalAccessRule::setIpProtocol(const QString &ip_protocol) {
    m_ip_protocol = ip_protocol;
    m_ip_protocol_isSet = true;
}

bool OAIExternalAccessRule::is_ip_protocol_Set() const{
    return m_ip_protocol_isSet;
}

bool OAIExternalAccessRule::is_ip_protocol_Valid() const{
    return m_ip_protocol_isValid;
}

QString OAIExternalAccessRule::getName() const {
    return m_name;
}
void OAIExternalAccessRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExternalAccessRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExternalAccessRule::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIExternalAccessRule::getPriority() const {
    return m_priority;
}
void OAIExternalAccessRule::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIExternalAccessRule::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIExternalAccessRule::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<OAIIpRange> OAIExternalAccessRule::getSourceIpRanges() const {
    return m_source_ip_ranges;
}
void OAIExternalAccessRule::setSourceIpRanges(const QList<OAIIpRange> &source_ip_ranges) {
    m_source_ip_ranges = source_ip_ranges;
    m_source_ip_ranges_isSet = true;
}

bool OAIExternalAccessRule::is_source_ip_ranges_Set() const{
    return m_source_ip_ranges_isSet;
}

bool OAIExternalAccessRule::is_source_ip_ranges_Valid() const{
    return m_source_ip_ranges_isValid;
}

QList<QString> OAIExternalAccessRule::getSourcePorts() const {
    return m_source_ports;
}
void OAIExternalAccessRule::setSourcePorts(const QList<QString> &source_ports) {
    m_source_ports = source_ports;
    m_source_ports_isSet = true;
}

bool OAIExternalAccessRule::is_source_ports_Set() const{
    return m_source_ports_isSet;
}

bool OAIExternalAccessRule::is_source_ports_Valid() const{
    return m_source_ports_isValid;
}

QString OAIExternalAccessRule::getState() const {
    return m_state;
}
void OAIExternalAccessRule::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIExternalAccessRule::is_state_Set() const{
    return m_state_isSet;
}

bool OAIExternalAccessRule::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIExternalAccessRule::getUid() const {
    return m_uid;
}
void OAIExternalAccessRule::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIExternalAccessRule::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIExternalAccessRule::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIExternalAccessRule::getUpdateTime() const {
    return m_update_time;
}
void OAIExternalAccessRule::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIExternalAccessRule::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIExternalAccessRule::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIExternalAccessRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalAccessRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
