/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForwardingRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForwardingRule::OAIForwardingRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForwardingRule::OAIForwardingRule() {
    this->initializeModel();
}

OAIForwardingRule::~OAIForwardingRule() {}

void OAIForwardingRule::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_name_servers_isSet = false;
    m_name_servers_isValid = false;
}

void OAIForwardingRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForwardingRule::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_name_servers_isValid = ::OpenAPI::fromJsonValue(m_name_servers, json[QString("nameServers")]);
    m_name_servers_isSet = !json[QString("nameServers")].isNull() && m_name_servers_isValid;
}

QString OAIForwardingRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForwardingRule::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_name_servers.size() > 0) {
        obj.insert(QString("nameServers"), ::OpenAPI::toJsonValue(m_name_servers));
    }
    return obj;
}

QString OAIForwardingRule::getDomain() const {
    return m_domain;
}
void OAIForwardingRule::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIForwardingRule::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIForwardingRule::is_domain_Valid() const{
    return m_domain_isValid;
}

QList<QString> OAIForwardingRule::getNameServers() const {
    return m_name_servers;
}
void OAIForwardingRule::setNameServers(const QList<QString> &name_servers) {
    m_name_servers = name_servers;
    m_name_servers_isSet = true;
}

bool OAIForwardingRule::is_name_servers_Set() const{
    return m_name_servers_isSet;
}

bool OAIForwardingRule::is_name_servers_Valid() const{
    return m_name_servers_isValid;
}

bool OAIForwardingRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForwardingRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
