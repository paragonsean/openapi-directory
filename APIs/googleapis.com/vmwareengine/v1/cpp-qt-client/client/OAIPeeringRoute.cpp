/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeeringRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeeringRoute::OAIPeeringRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeeringRoute::OAIPeeringRoute() {
    this->initializeModel();
}

OAIPeeringRoute::~OAIPeeringRoute() {}

void OAIPeeringRoute::initializeModel() {

    m_dest_range_isSet = false;
    m_dest_range_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_imported_isSet = false;
    m_imported_isValid = false;

    m_next_hop_region_isSet = false;
    m_next_hop_region_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPeeringRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeeringRoute::fromJsonObject(QJsonObject json) {

    m_dest_range_isValid = ::OpenAPI::fromJsonValue(m_dest_range, json[QString("destRange")]);
    m_dest_range_isSet = !json[QString("destRange")].isNull() && m_dest_range_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_imported_isValid = ::OpenAPI::fromJsonValue(m_imported, json[QString("imported")]);
    m_imported_isSet = !json[QString("imported")].isNull() && m_imported_isValid;

    m_next_hop_region_isValid = ::OpenAPI::fromJsonValue(m_next_hop_region, json[QString("nextHopRegion")]);
    m_next_hop_region_isSet = !json[QString("nextHopRegion")].isNull() && m_next_hop_region_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPeeringRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeeringRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_dest_range_isSet) {
        obj.insert(QString("destRange"), ::OpenAPI::toJsonValue(m_dest_range));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_imported_isSet) {
        obj.insert(QString("imported"), ::OpenAPI::toJsonValue(m_imported));
    }
    if (m_next_hop_region_isSet) {
        obj.insert(QString("nextHopRegion"), ::OpenAPI::toJsonValue(m_next_hop_region));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPeeringRoute::getDestRange() const {
    return m_dest_range;
}
void OAIPeeringRoute::setDestRange(const QString &dest_range) {
    m_dest_range = dest_range;
    m_dest_range_isSet = true;
}

bool OAIPeeringRoute::is_dest_range_Set() const{
    return m_dest_range_isSet;
}

bool OAIPeeringRoute::is_dest_range_Valid() const{
    return m_dest_range_isValid;
}

QString OAIPeeringRoute::getDirection() const {
    return m_direction;
}
void OAIPeeringRoute::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIPeeringRoute::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIPeeringRoute::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAIPeeringRoute::isImported() const {
    return m_imported;
}
void OAIPeeringRoute::setImported(const bool &imported) {
    m_imported = imported;
    m_imported_isSet = true;
}

bool OAIPeeringRoute::is_imported_Set() const{
    return m_imported_isSet;
}

bool OAIPeeringRoute::is_imported_Valid() const{
    return m_imported_isValid;
}

QString OAIPeeringRoute::getNextHopRegion() const {
    return m_next_hop_region;
}
void OAIPeeringRoute::setNextHopRegion(const QString &next_hop_region) {
    m_next_hop_region = next_hop_region;
    m_next_hop_region_isSet = true;
}

bool OAIPeeringRoute::is_next_hop_region_Set() const{
    return m_next_hop_region_isSet;
}

bool OAIPeeringRoute::is_next_hop_region_Valid() const{
    return m_next_hop_region_isValid;
}

QString OAIPeeringRoute::getPriority() const {
    return m_priority;
}
void OAIPeeringRoute::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIPeeringRoute::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIPeeringRoute::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIPeeringRoute::getType() const {
    return m_type;
}
void OAIPeeringRoute::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPeeringRoute::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPeeringRoute::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPeeringRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dest_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeeringRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
