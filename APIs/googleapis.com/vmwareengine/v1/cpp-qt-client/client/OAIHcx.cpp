/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHcx.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHcx::OAIHcx(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHcx::OAIHcx() {
    this->initializeModel();
}

OAIHcx::~OAIHcx() {}

void OAIHcx::initializeModel() {

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_internal_ip_isSet = false;
    m_internal_ip_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIHcx::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHcx::fromJsonObject(QJsonObject json) {

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_internal_ip_isValid = ::OpenAPI::fromJsonValue(m_internal_ip, json[QString("internalIp")]);
    m_internal_ip_isSet = !json[QString("internalIp")].isNull() && m_internal_ip_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIHcx::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHcx::asJsonObject() const {
    QJsonObject obj;
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_internal_ip_isSet) {
        obj.insert(QString("internalIp"), ::OpenAPI::toJsonValue(m_internal_ip));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIHcx::getFqdn() const {
    return m_fqdn;
}
void OAIHcx::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIHcx::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIHcx::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

QString OAIHcx::getInternalIp() const {
    return m_internal_ip;
}
void OAIHcx::setInternalIp(const QString &internal_ip) {
    m_internal_ip = internal_ip;
    m_internal_ip_isSet = true;
}

bool OAIHcx::is_internal_ip_Set() const{
    return m_internal_ip_isSet;
}

bool OAIHcx::is_internal_ip_Valid() const{
    return m_internal_ip_isValid;
}

QString OAIHcx::getState() const {
    return m_state;
}
void OAIHcx::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIHcx::is_state_Set() const{
    return m_state_isSet;
}

bool OAIHcx::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIHcx::getVersion() const {
    return m_version;
}
void OAIHcx::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIHcx::is_version_Set() const{
    return m_version_isSet;
}

bool OAIHcx::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIHcx::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHcx::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
