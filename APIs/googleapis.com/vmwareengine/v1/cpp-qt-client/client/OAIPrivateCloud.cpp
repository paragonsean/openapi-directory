/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateCloud.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateCloud::OAIPrivateCloud(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateCloud::OAIPrivateCloud() {
    this->initializeModel();
}

OAIPrivateCloud::~OAIPrivateCloud() {}

void OAIPrivateCloud::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_hcx_isSet = false;
    m_hcx_isValid = false;

    m_management_cluster_isSet = false;
    m_management_cluster_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_config_isSet = false;
    m_network_config_isValid = false;

    m_nsx_isSet = false;
    m_nsx_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_vcenter_isSet = false;
    m_vcenter_isValid = false;
}

void OAIPrivateCloud::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateCloud::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_hcx_isValid = ::OpenAPI::fromJsonValue(m_hcx, json[QString("hcx")]);
    m_hcx_isSet = !json[QString("hcx")].isNull() && m_hcx_isValid;

    m_management_cluster_isValid = ::OpenAPI::fromJsonValue(m_management_cluster, json[QString("managementCluster")]);
    m_management_cluster_isSet = !json[QString("managementCluster")].isNull() && m_management_cluster_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_config_isValid = ::OpenAPI::fromJsonValue(m_network_config, json[QString("networkConfig")]);
    m_network_config_isSet = !json[QString("networkConfig")].isNull() && m_network_config_isValid;

    m_nsx_isValid = ::OpenAPI::fromJsonValue(m_nsx, json[QString("nsx")]);
    m_nsx_isSet = !json[QString("nsx")].isNull() && m_nsx_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_vcenter_isValid = ::OpenAPI::fromJsonValue(m_vcenter, json[QString("vcenter")]);
    m_vcenter_isSet = !json[QString("vcenter")].isNull() && m_vcenter_isValid;
}

QString OAIPrivateCloud::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateCloud::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_hcx.isSet()) {
        obj.insert(QString("hcx"), ::OpenAPI::toJsonValue(m_hcx));
    }
    if (m_management_cluster.isSet()) {
        obj.insert(QString("managementCluster"), ::OpenAPI::toJsonValue(m_management_cluster));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_config.isSet()) {
        obj.insert(QString("networkConfig"), ::OpenAPI::toJsonValue(m_network_config));
    }
    if (m_nsx.isSet()) {
        obj.insert(QString("nsx"), ::OpenAPI::toJsonValue(m_nsx));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_vcenter.isSet()) {
        obj.insert(QString("vcenter"), ::OpenAPI::toJsonValue(m_vcenter));
    }
    return obj;
}

QString OAIPrivateCloud::getCreateTime() const {
    return m_create_time;
}
void OAIPrivateCloud::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIPrivateCloud::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIPrivateCloud::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIPrivateCloud::getDeleteTime() const {
    return m_delete_time;
}
void OAIPrivateCloud::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIPrivateCloud::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIPrivateCloud::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIPrivateCloud::getDescription() const {
    return m_description;
}
void OAIPrivateCloud::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPrivateCloud::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPrivateCloud::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPrivateCloud::getExpireTime() const {
    return m_expire_time;
}
void OAIPrivateCloud::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIPrivateCloud::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIPrivateCloud::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

OAIHcx OAIPrivateCloud::getHcx() const {
    return m_hcx;
}
void OAIPrivateCloud::setHcx(const OAIHcx &hcx) {
    m_hcx = hcx;
    m_hcx_isSet = true;
}

bool OAIPrivateCloud::is_hcx_Set() const{
    return m_hcx_isSet;
}

bool OAIPrivateCloud::is_hcx_Valid() const{
    return m_hcx_isValid;
}

OAIManagementCluster OAIPrivateCloud::getManagementCluster() const {
    return m_management_cluster;
}
void OAIPrivateCloud::setManagementCluster(const OAIManagementCluster &management_cluster) {
    m_management_cluster = management_cluster;
    m_management_cluster_isSet = true;
}

bool OAIPrivateCloud::is_management_cluster_Set() const{
    return m_management_cluster_isSet;
}

bool OAIPrivateCloud::is_management_cluster_Valid() const{
    return m_management_cluster_isValid;
}

QString OAIPrivateCloud::getName() const {
    return m_name;
}
void OAIPrivateCloud::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPrivateCloud::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPrivateCloud::is_name_Valid() const{
    return m_name_isValid;
}

OAINetworkConfig OAIPrivateCloud::getNetworkConfig() const {
    return m_network_config;
}
void OAIPrivateCloud::setNetworkConfig(const OAINetworkConfig &network_config) {
    m_network_config = network_config;
    m_network_config_isSet = true;
}

bool OAIPrivateCloud::is_network_config_Set() const{
    return m_network_config_isSet;
}

bool OAIPrivateCloud::is_network_config_Valid() const{
    return m_network_config_isValid;
}

OAINsx OAIPrivateCloud::getNsx() const {
    return m_nsx;
}
void OAIPrivateCloud::setNsx(const OAINsx &nsx) {
    m_nsx = nsx;
    m_nsx_isSet = true;
}

bool OAIPrivateCloud::is_nsx_Set() const{
    return m_nsx_isSet;
}

bool OAIPrivateCloud::is_nsx_Valid() const{
    return m_nsx_isValid;
}

QString OAIPrivateCloud::getState() const {
    return m_state;
}
void OAIPrivateCloud::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPrivateCloud::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPrivateCloud::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIPrivateCloud::getType() const {
    return m_type;
}
void OAIPrivateCloud::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPrivateCloud::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPrivateCloud::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPrivateCloud::getUid() const {
    return m_uid;
}
void OAIPrivateCloud::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIPrivateCloud::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIPrivateCloud::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIPrivateCloud::getUpdateTime() const {
    return m_update_time;
}
void OAIPrivateCloud::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIPrivateCloud::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIPrivateCloud::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIVcenter OAIPrivateCloud::getVcenter() const {
    return m_vcenter;
}
void OAIPrivateCloud::setVcenter(const OAIVcenter &vcenter) {
    m_vcenter = vcenter;
    m_vcenter_isSet = true;
}

bool OAIPrivateCloud::is_vcenter_Set() const{
    return m_vcenter_isSet;
}

bool OAIPrivateCloud::is_vcenter_Valid() const{
    return m_vcenter_isValid;
}

bool OAIPrivateCloud::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hcx.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsx.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateCloud::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
