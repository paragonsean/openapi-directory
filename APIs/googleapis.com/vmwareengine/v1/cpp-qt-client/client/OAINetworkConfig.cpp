/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConfig::OAINetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConfig::OAINetworkConfig() {
    this->initializeModel();
}

OAINetworkConfig::~OAINetworkConfig() {}

void OAINetworkConfig::initializeModel() {

    m_dns_server_ip_isSet = false;
    m_dns_server_ip_isValid = false;

    m_management_cidr_isSet = false;
    m_management_cidr_isValid = false;

    m_management_ip_address_layout_version_isSet = false;
    m_management_ip_address_layout_version_isValid = false;

    m_vmware_engine_network_isSet = false;
    m_vmware_engine_network_isValid = false;

    m_vmware_engine_network_canonical_isSet = false;
    m_vmware_engine_network_canonical_isValid = false;
}

void OAINetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConfig::fromJsonObject(QJsonObject json) {

    m_dns_server_ip_isValid = ::OpenAPI::fromJsonValue(m_dns_server_ip, json[QString("dnsServerIp")]);
    m_dns_server_ip_isSet = !json[QString("dnsServerIp")].isNull() && m_dns_server_ip_isValid;

    m_management_cidr_isValid = ::OpenAPI::fromJsonValue(m_management_cidr, json[QString("managementCidr")]);
    m_management_cidr_isSet = !json[QString("managementCidr")].isNull() && m_management_cidr_isValid;

    m_management_ip_address_layout_version_isValid = ::OpenAPI::fromJsonValue(m_management_ip_address_layout_version, json[QString("managementIpAddressLayoutVersion")]);
    m_management_ip_address_layout_version_isSet = !json[QString("managementIpAddressLayoutVersion")].isNull() && m_management_ip_address_layout_version_isValid;

    m_vmware_engine_network_isValid = ::OpenAPI::fromJsonValue(m_vmware_engine_network, json[QString("vmwareEngineNetwork")]);
    m_vmware_engine_network_isSet = !json[QString("vmwareEngineNetwork")].isNull() && m_vmware_engine_network_isValid;

    m_vmware_engine_network_canonical_isValid = ::OpenAPI::fromJsonValue(m_vmware_engine_network_canonical, json[QString("vmwareEngineNetworkCanonical")]);
    m_vmware_engine_network_canonical_isSet = !json[QString("vmwareEngineNetworkCanonical")].isNull() && m_vmware_engine_network_canonical_isValid;
}

QString OAINetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_server_ip_isSet) {
        obj.insert(QString("dnsServerIp"), ::OpenAPI::toJsonValue(m_dns_server_ip));
    }
    if (m_management_cidr_isSet) {
        obj.insert(QString("managementCidr"), ::OpenAPI::toJsonValue(m_management_cidr));
    }
    if (m_management_ip_address_layout_version_isSet) {
        obj.insert(QString("managementIpAddressLayoutVersion"), ::OpenAPI::toJsonValue(m_management_ip_address_layout_version));
    }
    if (m_vmware_engine_network_isSet) {
        obj.insert(QString("vmwareEngineNetwork"), ::OpenAPI::toJsonValue(m_vmware_engine_network));
    }
    if (m_vmware_engine_network_canonical_isSet) {
        obj.insert(QString("vmwareEngineNetworkCanonical"), ::OpenAPI::toJsonValue(m_vmware_engine_network_canonical));
    }
    return obj;
}

QString OAINetworkConfig::getDnsServerIp() const {
    return m_dns_server_ip;
}
void OAINetworkConfig::setDnsServerIp(const QString &dns_server_ip) {
    m_dns_server_ip = dns_server_ip;
    m_dns_server_ip_isSet = true;
}

bool OAINetworkConfig::is_dns_server_ip_Set() const{
    return m_dns_server_ip_isSet;
}

bool OAINetworkConfig::is_dns_server_ip_Valid() const{
    return m_dns_server_ip_isValid;
}

QString OAINetworkConfig::getManagementCidr() const {
    return m_management_cidr;
}
void OAINetworkConfig::setManagementCidr(const QString &management_cidr) {
    m_management_cidr = management_cidr;
    m_management_cidr_isSet = true;
}

bool OAINetworkConfig::is_management_cidr_Set() const{
    return m_management_cidr_isSet;
}

bool OAINetworkConfig::is_management_cidr_Valid() const{
    return m_management_cidr_isValid;
}

qint32 OAINetworkConfig::getManagementIpAddressLayoutVersion() const {
    return m_management_ip_address_layout_version;
}
void OAINetworkConfig::setManagementIpAddressLayoutVersion(const qint32 &management_ip_address_layout_version) {
    m_management_ip_address_layout_version = management_ip_address_layout_version;
    m_management_ip_address_layout_version_isSet = true;
}

bool OAINetworkConfig::is_management_ip_address_layout_version_Set() const{
    return m_management_ip_address_layout_version_isSet;
}

bool OAINetworkConfig::is_management_ip_address_layout_version_Valid() const{
    return m_management_ip_address_layout_version_isValid;
}

QString OAINetworkConfig::getVmwareEngineNetwork() const {
    return m_vmware_engine_network;
}
void OAINetworkConfig::setVmwareEngineNetwork(const QString &vmware_engine_network) {
    m_vmware_engine_network = vmware_engine_network;
    m_vmware_engine_network_isSet = true;
}

bool OAINetworkConfig::is_vmware_engine_network_Set() const{
    return m_vmware_engine_network_isSet;
}

bool OAINetworkConfig::is_vmware_engine_network_Valid() const{
    return m_vmware_engine_network_isValid;
}

QString OAINetworkConfig::getVmwareEngineNetworkCanonical() const {
    return m_vmware_engine_network_canonical;
}
void OAINetworkConfig::setVmwareEngineNetworkCanonical(const QString &vmware_engine_network_canonical) {
    m_vmware_engine_network_canonical = vmware_engine_network_canonical;
    m_vmware_engine_network_canonical_isSet = true;
}

bool OAINetworkConfig::is_vmware_engine_network_canonical_Set() const{
    return m_vmware_engine_network_canonical_isSet;
}

bool OAINetworkConfig::is_vmware_engine_network_canonical_Valid() const{
    return m_vmware_engine_network_canonical_isValid;
}

bool OAINetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_server_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_ip_address_layout_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_engine_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_engine_network_canonical_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
