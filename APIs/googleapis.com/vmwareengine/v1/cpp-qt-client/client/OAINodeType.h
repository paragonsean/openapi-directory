/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINodeType.h
 *
 * Describes node type.
 */

#ifndef OAINodeType_H
#define OAINodeType_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINodeType : public OAIObject {
public:
    OAINodeType();
    OAINodeType(QString json);
    ~OAINodeType() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<qint32> getAvailableCustomCoreCounts() const;
    void setAvailableCustomCoreCounts(const QList<qint32> &available_custom_core_counts);
    bool is_available_custom_core_counts_Set() const;
    bool is_available_custom_core_counts_Valid() const;

    QList<QString> getCapabilities() const;
    void setCapabilities(const QList<QString> &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    qint32 getDiskSizeGb() const;
    void setDiskSizeGb(const qint32 &disk_size_gb);
    bool is_disk_size_gb_Set() const;
    bool is_disk_size_gb_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QList<QString> getFamilies() const;
    void setFamilies(const QList<QString> &families);
    bool is_families_Set() const;
    bool is_families_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    qint32 getMemoryGb() const;
    void setMemoryGb(const qint32 &memory_gb);
    bool is_memory_gb_Set() const;
    bool is_memory_gb_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNodeTypeId() const;
    void setNodeTypeId(const QString &node_type_id);
    bool is_node_type_id_Set() const;
    bool is_node_type_id_Valid() const;

    qint32 getTotalCoreCount() const;
    void setTotalCoreCount(const qint32 &total_core_count);
    bool is_total_core_count_Set() const;
    bool is_total_core_count_Valid() const;

    qint32 getVirtualCpuCount() const;
    void setVirtualCpuCount(const qint32 &virtual_cpu_count);
    bool is_virtual_cpu_count_Set() const;
    bool is_virtual_cpu_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<qint32> m_available_custom_core_counts;
    bool m_available_custom_core_counts_isSet;
    bool m_available_custom_core_counts_isValid;

    QList<QString> m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    qint32 m_disk_size_gb;
    bool m_disk_size_gb_isSet;
    bool m_disk_size_gb_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QList<QString> m_families;
    bool m_families_isSet;
    bool m_families_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    qint32 m_memory_gb;
    bool m_memory_gb_isSet;
    bool m_memory_gb_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_node_type_id;
    bool m_node_type_id_isSet;
    bool m_node_type_id_isValid;

    qint32 m_total_core_count;
    bool m_total_core_count_isSet;
    bool m_total_core_count_isValid;

    qint32 m_virtual_cpu_count;
    bool m_virtual_cpu_count_isSet;
    bool m_virtual_cpu_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINodeType)

#endif // OAINodeType_H
