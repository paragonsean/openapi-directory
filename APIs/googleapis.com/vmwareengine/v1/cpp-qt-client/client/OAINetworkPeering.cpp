/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkPeering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkPeering::OAINetworkPeering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkPeering::OAINetworkPeering() {
    this->initializeModel();
}

OAINetworkPeering::~OAINetworkPeering() {}

void OAINetworkPeering::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_exchange_subnet_routes_isSet = false;
    m_exchange_subnet_routes_isValid = false;

    m_export_custom_routes_isSet = false;
    m_export_custom_routes_isValid = false;

    m_export_custom_routes_with_public_ip_isSet = false;
    m_export_custom_routes_with_public_ip_isValid = false;

    m_import_custom_routes_isSet = false;
    m_import_custom_routes_isValid = false;

    m_import_custom_routes_with_public_ip_isSet = false;
    m_import_custom_routes_with_public_ip_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_peer_mtu_isSet = false;
    m_peer_mtu_isValid = false;

    m_peer_network_isSet = false;
    m_peer_network_isValid = false;

    m_peer_network_type_isSet = false;
    m_peer_network_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_details_isSet = false;
    m_state_details_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_vmware_engine_network_isSet = false;
    m_vmware_engine_network_isValid = false;
}

void OAINetworkPeering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkPeering::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_exchange_subnet_routes_isValid = ::OpenAPI::fromJsonValue(m_exchange_subnet_routes, json[QString("exchangeSubnetRoutes")]);
    m_exchange_subnet_routes_isSet = !json[QString("exchangeSubnetRoutes")].isNull() && m_exchange_subnet_routes_isValid;

    m_export_custom_routes_isValid = ::OpenAPI::fromJsonValue(m_export_custom_routes, json[QString("exportCustomRoutes")]);
    m_export_custom_routes_isSet = !json[QString("exportCustomRoutes")].isNull() && m_export_custom_routes_isValid;

    m_export_custom_routes_with_public_ip_isValid = ::OpenAPI::fromJsonValue(m_export_custom_routes_with_public_ip, json[QString("exportCustomRoutesWithPublicIp")]);
    m_export_custom_routes_with_public_ip_isSet = !json[QString("exportCustomRoutesWithPublicIp")].isNull() && m_export_custom_routes_with_public_ip_isValid;

    m_import_custom_routes_isValid = ::OpenAPI::fromJsonValue(m_import_custom_routes, json[QString("importCustomRoutes")]);
    m_import_custom_routes_isSet = !json[QString("importCustomRoutes")].isNull() && m_import_custom_routes_isValid;

    m_import_custom_routes_with_public_ip_isValid = ::OpenAPI::fromJsonValue(m_import_custom_routes_with_public_ip, json[QString("importCustomRoutesWithPublicIp")]);
    m_import_custom_routes_with_public_ip_isSet = !json[QString("importCustomRoutesWithPublicIp")].isNull() && m_import_custom_routes_with_public_ip_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_peer_mtu_isValid = ::OpenAPI::fromJsonValue(m_peer_mtu, json[QString("peerMtu")]);
    m_peer_mtu_isSet = !json[QString("peerMtu")].isNull() && m_peer_mtu_isValid;

    m_peer_network_isValid = ::OpenAPI::fromJsonValue(m_peer_network, json[QString("peerNetwork")]);
    m_peer_network_isSet = !json[QString("peerNetwork")].isNull() && m_peer_network_isValid;

    m_peer_network_type_isValid = ::OpenAPI::fromJsonValue(m_peer_network_type, json[QString("peerNetworkType")]);
    m_peer_network_type_isSet = !json[QString("peerNetworkType")].isNull() && m_peer_network_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_details_isValid = ::OpenAPI::fromJsonValue(m_state_details, json[QString("stateDetails")]);
    m_state_details_isSet = !json[QString("stateDetails")].isNull() && m_state_details_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_vmware_engine_network_isValid = ::OpenAPI::fromJsonValue(m_vmware_engine_network, json[QString("vmwareEngineNetwork")]);
    m_vmware_engine_network_isSet = !json[QString("vmwareEngineNetwork")].isNull() && m_vmware_engine_network_isValid;
}

QString OAINetworkPeering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkPeering::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_exchange_subnet_routes_isSet) {
        obj.insert(QString("exchangeSubnetRoutes"), ::OpenAPI::toJsonValue(m_exchange_subnet_routes));
    }
    if (m_export_custom_routes_isSet) {
        obj.insert(QString("exportCustomRoutes"), ::OpenAPI::toJsonValue(m_export_custom_routes));
    }
    if (m_export_custom_routes_with_public_ip_isSet) {
        obj.insert(QString("exportCustomRoutesWithPublicIp"), ::OpenAPI::toJsonValue(m_export_custom_routes_with_public_ip));
    }
    if (m_import_custom_routes_isSet) {
        obj.insert(QString("importCustomRoutes"), ::OpenAPI::toJsonValue(m_import_custom_routes));
    }
    if (m_import_custom_routes_with_public_ip_isSet) {
        obj.insert(QString("importCustomRoutesWithPublicIp"), ::OpenAPI::toJsonValue(m_import_custom_routes_with_public_ip));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_peer_mtu_isSet) {
        obj.insert(QString("peerMtu"), ::OpenAPI::toJsonValue(m_peer_mtu));
    }
    if (m_peer_network_isSet) {
        obj.insert(QString("peerNetwork"), ::OpenAPI::toJsonValue(m_peer_network));
    }
    if (m_peer_network_type_isSet) {
        obj.insert(QString("peerNetworkType"), ::OpenAPI::toJsonValue(m_peer_network_type));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_details_isSet) {
        obj.insert(QString("stateDetails"), ::OpenAPI::toJsonValue(m_state_details));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_vmware_engine_network_isSet) {
        obj.insert(QString("vmwareEngineNetwork"), ::OpenAPI::toJsonValue(m_vmware_engine_network));
    }
    return obj;
}

QString OAINetworkPeering::getCreateTime() const {
    return m_create_time;
}
void OAINetworkPeering::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAINetworkPeering::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAINetworkPeering::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAINetworkPeering::getDescription() const {
    return m_description;
}
void OAINetworkPeering::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINetworkPeering::is_description_Set() const{
    return m_description_isSet;
}

bool OAINetworkPeering::is_description_Valid() const{
    return m_description_isValid;
}

bool OAINetworkPeering::isExchangeSubnetRoutes() const {
    return m_exchange_subnet_routes;
}
void OAINetworkPeering::setExchangeSubnetRoutes(const bool &exchange_subnet_routes) {
    m_exchange_subnet_routes = exchange_subnet_routes;
    m_exchange_subnet_routes_isSet = true;
}

bool OAINetworkPeering::is_exchange_subnet_routes_Set() const{
    return m_exchange_subnet_routes_isSet;
}

bool OAINetworkPeering::is_exchange_subnet_routes_Valid() const{
    return m_exchange_subnet_routes_isValid;
}

bool OAINetworkPeering::isExportCustomRoutes() const {
    return m_export_custom_routes;
}
void OAINetworkPeering::setExportCustomRoutes(const bool &export_custom_routes) {
    m_export_custom_routes = export_custom_routes;
    m_export_custom_routes_isSet = true;
}

bool OAINetworkPeering::is_export_custom_routes_Set() const{
    return m_export_custom_routes_isSet;
}

bool OAINetworkPeering::is_export_custom_routes_Valid() const{
    return m_export_custom_routes_isValid;
}

bool OAINetworkPeering::isExportCustomRoutesWithPublicIp() const {
    return m_export_custom_routes_with_public_ip;
}
void OAINetworkPeering::setExportCustomRoutesWithPublicIp(const bool &export_custom_routes_with_public_ip) {
    m_export_custom_routes_with_public_ip = export_custom_routes_with_public_ip;
    m_export_custom_routes_with_public_ip_isSet = true;
}

bool OAINetworkPeering::is_export_custom_routes_with_public_ip_Set() const{
    return m_export_custom_routes_with_public_ip_isSet;
}

bool OAINetworkPeering::is_export_custom_routes_with_public_ip_Valid() const{
    return m_export_custom_routes_with_public_ip_isValid;
}

bool OAINetworkPeering::isImportCustomRoutes() const {
    return m_import_custom_routes;
}
void OAINetworkPeering::setImportCustomRoutes(const bool &import_custom_routes) {
    m_import_custom_routes = import_custom_routes;
    m_import_custom_routes_isSet = true;
}

bool OAINetworkPeering::is_import_custom_routes_Set() const{
    return m_import_custom_routes_isSet;
}

bool OAINetworkPeering::is_import_custom_routes_Valid() const{
    return m_import_custom_routes_isValid;
}

bool OAINetworkPeering::isImportCustomRoutesWithPublicIp() const {
    return m_import_custom_routes_with_public_ip;
}
void OAINetworkPeering::setImportCustomRoutesWithPublicIp(const bool &import_custom_routes_with_public_ip) {
    m_import_custom_routes_with_public_ip = import_custom_routes_with_public_ip;
    m_import_custom_routes_with_public_ip_isSet = true;
}

bool OAINetworkPeering::is_import_custom_routes_with_public_ip_Set() const{
    return m_import_custom_routes_with_public_ip_isSet;
}

bool OAINetworkPeering::is_import_custom_routes_with_public_ip_Valid() const{
    return m_import_custom_routes_with_public_ip_isValid;
}

QString OAINetworkPeering::getName() const {
    return m_name;
}
void OAINetworkPeering::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINetworkPeering::is_name_Set() const{
    return m_name_isSet;
}

bool OAINetworkPeering::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAINetworkPeering::getPeerMtu() const {
    return m_peer_mtu;
}
void OAINetworkPeering::setPeerMtu(const qint32 &peer_mtu) {
    m_peer_mtu = peer_mtu;
    m_peer_mtu_isSet = true;
}

bool OAINetworkPeering::is_peer_mtu_Set() const{
    return m_peer_mtu_isSet;
}

bool OAINetworkPeering::is_peer_mtu_Valid() const{
    return m_peer_mtu_isValid;
}

QString OAINetworkPeering::getPeerNetwork() const {
    return m_peer_network;
}
void OAINetworkPeering::setPeerNetwork(const QString &peer_network) {
    m_peer_network = peer_network;
    m_peer_network_isSet = true;
}

bool OAINetworkPeering::is_peer_network_Set() const{
    return m_peer_network_isSet;
}

bool OAINetworkPeering::is_peer_network_Valid() const{
    return m_peer_network_isValid;
}

QString OAINetworkPeering::getPeerNetworkType() const {
    return m_peer_network_type;
}
void OAINetworkPeering::setPeerNetworkType(const QString &peer_network_type) {
    m_peer_network_type = peer_network_type;
    m_peer_network_type_isSet = true;
}

bool OAINetworkPeering::is_peer_network_type_Set() const{
    return m_peer_network_type_isSet;
}

bool OAINetworkPeering::is_peer_network_type_Valid() const{
    return m_peer_network_type_isValid;
}

QString OAINetworkPeering::getState() const {
    return m_state;
}
void OAINetworkPeering::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAINetworkPeering::is_state_Set() const{
    return m_state_isSet;
}

bool OAINetworkPeering::is_state_Valid() const{
    return m_state_isValid;
}

QString OAINetworkPeering::getStateDetails() const {
    return m_state_details;
}
void OAINetworkPeering::setStateDetails(const QString &state_details) {
    m_state_details = state_details;
    m_state_details_isSet = true;
}

bool OAINetworkPeering::is_state_details_Set() const{
    return m_state_details_isSet;
}

bool OAINetworkPeering::is_state_details_Valid() const{
    return m_state_details_isValid;
}

QString OAINetworkPeering::getUid() const {
    return m_uid;
}
void OAINetworkPeering::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAINetworkPeering::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAINetworkPeering::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAINetworkPeering::getUpdateTime() const {
    return m_update_time;
}
void OAINetworkPeering::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAINetworkPeering::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAINetworkPeering::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAINetworkPeering::getVmwareEngineNetwork() const {
    return m_vmware_engine_network;
}
void OAINetworkPeering::setVmwareEngineNetwork(const QString &vmware_engine_network) {
    m_vmware_engine_network = vmware_engine_network;
    m_vmware_engine_network_isSet = true;
}

bool OAINetworkPeering::is_vmware_engine_network_Set() const{
    return m_vmware_engine_network_isSet;
}

bool OAINetworkPeering::is_vmware_engine_network_Valid() const{
    return m_vmware_engine_network_isValid;
}

bool OAINetworkPeering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_subnet_routes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_custom_routes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_custom_routes_with_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_custom_routes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_custom_routes_with_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_mtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_network_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_engine_network_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkPeering::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
