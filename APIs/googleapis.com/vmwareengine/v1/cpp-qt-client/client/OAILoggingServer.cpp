/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoggingServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoggingServer::OAILoggingServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoggingServer::OAILoggingServer() {
    this->initializeModel();
}

OAILoggingServer::~OAILoggingServer() {}

void OAILoggingServer::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAILoggingServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoggingServer::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAILoggingServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoggingServer::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAILoggingServer::getCreateTime() const {
    return m_create_time;
}
void OAILoggingServer::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAILoggingServer::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAILoggingServer::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAILoggingServer::getHostname() const {
    return m_hostname;
}
void OAILoggingServer::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAILoggingServer::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAILoggingServer::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAILoggingServer::getName() const {
    return m_name;
}
void OAILoggingServer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILoggingServer::is_name_Set() const{
    return m_name_isSet;
}

bool OAILoggingServer::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAILoggingServer::getPort() const {
    return m_port;
}
void OAILoggingServer::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAILoggingServer::is_port_Set() const{
    return m_port_isSet;
}

bool OAILoggingServer::is_port_Valid() const{
    return m_port_isValid;
}

QString OAILoggingServer::getProtocol() const {
    return m_protocol;
}
void OAILoggingServer::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAILoggingServer::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAILoggingServer::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAILoggingServer::getSourceType() const {
    return m_source_type;
}
void OAILoggingServer::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAILoggingServer::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAILoggingServer::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAILoggingServer::getUid() const {
    return m_uid;
}
void OAILoggingServer::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAILoggingServer::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAILoggingServer::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAILoggingServer::getUpdateTime() const {
    return m_update_time;
}
void OAILoggingServer::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAILoggingServer::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAILoggingServer::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAILoggingServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoggingServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
