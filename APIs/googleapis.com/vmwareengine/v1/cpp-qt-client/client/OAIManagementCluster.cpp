/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagementCluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagementCluster::OAIManagementCluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagementCluster::OAIManagementCluster() {
    this->initializeModel();
}

OAIManagementCluster::~OAIManagementCluster() {}

void OAIManagementCluster::initializeModel() {

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_node_type_configs_isSet = false;
    m_node_type_configs_isValid = false;

    m_stretched_cluster_config_isSet = false;
    m_stretched_cluster_config_isValid = false;
}

void OAIManagementCluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagementCluster::fromJsonObject(QJsonObject json) {

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("clusterId")]);
    m_cluster_id_isSet = !json[QString("clusterId")].isNull() && m_cluster_id_isValid;

    m_node_type_configs_isValid = ::OpenAPI::fromJsonValue(m_node_type_configs, json[QString("nodeTypeConfigs")]);
    m_node_type_configs_isSet = !json[QString("nodeTypeConfigs")].isNull() && m_node_type_configs_isValid;

    m_stretched_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_stretched_cluster_config, json[QString("stretchedClusterConfig")]);
    m_stretched_cluster_config_isSet = !json[QString("stretchedClusterConfig")].isNull() && m_stretched_cluster_config_isValid;
}

QString OAIManagementCluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagementCluster::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_id_isSet) {
        obj.insert(QString("clusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_node_type_configs.size() > 0) {
        obj.insert(QString("nodeTypeConfigs"), ::OpenAPI::toJsonValue(m_node_type_configs));
    }
    if (m_stretched_cluster_config.isSet()) {
        obj.insert(QString("stretchedClusterConfig"), ::OpenAPI::toJsonValue(m_stretched_cluster_config));
    }
    return obj;
}

QString OAIManagementCluster::getClusterId() const {
    return m_cluster_id;
}
void OAIManagementCluster::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIManagementCluster::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIManagementCluster::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

QMap<QString, OAINodeTypeConfig> OAIManagementCluster::getNodeTypeConfigs() const {
    return m_node_type_configs;
}
void OAIManagementCluster::setNodeTypeConfigs(const QMap<QString, OAINodeTypeConfig> &node_type_configs) {
    m_node_type_configs = node_type_configs;
    m_node_type_configs_isSet = true;
}

bool OAIManagementCluster::is_node_type_configs_Set() const{
    return m_node_type_configs_isSet;
}

bool OAIManagementCluster::is_node_type_configs_Valid() const{
    return m_node_type_configs_isValid;
}

OAIStretchedClusterConfig OAIManagementCluster::getStretchedClusterConfig() const {
    return m_stretched_cluster_config;
}
void OAIManagementCluster::setStretchedClusterConfig(const OAIStretchedClusterConfig &stretched_cluster_config) {
    m_stretched_cluster_config = stretched_cluster_config;
    m_stretched_cluster_config_isSet = true;
}

bool OAIManagementCluster::is_stretched_cluster_config_Set() const{
    return m_stretched_cluster_config_isSet;
}

bool OAIManagementCluster::is_stretched_cluster_config_Valid() const{
    return m_stretched_cluster_config_isValid;
}

bool OAIManagementCluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stretched_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagementCluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
