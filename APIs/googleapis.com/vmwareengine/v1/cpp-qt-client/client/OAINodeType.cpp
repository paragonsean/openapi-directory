/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeType::OAINodeType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeType::OAINodeType() {
    this->initializeModel();
}

OAINodeType::~OAINodeType() {}

void OAINodeType::initializeModel() {

    m_available_custom_core_counts_isSet = false;
    m_available_custom_core_counts_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_families_isSet = false;
    m_families_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_memory_gb_isSet = false;
    m_memory_gb_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_type_id_isSet = false;
    m_node_type_id_isValid = false;

    m_total_core_count_isSet = false;
    m_total_core_count_isValid = false;

    m_virtual_cpu_count_isSet = false;
    m_virtual_cpu_count_isValid = false;
}

void OAINodeType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeType::fromJsonObject(QJsonObject json) {

    m_available_custom_core_counts_isValid = ::OpenAPI::fromJsonValue(m_available_custom_core_counts, json[QString("availableCustomCoreCounts")]);
    m_available_custom_core_counts_isSet = !json[QString("availableCustomCoreCounts")].isNull() && m_available_custom_core_counts_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGb")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGb")].isNull() && m_disk_size_gb_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_families_isValid = ::OpenAPI::fromJsonValue(m_families, json[QString("families")]);
    m_families_isSet = !json[QString("families")].isNull() && m_families_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_memory_gb_isValid = ::OpenAPI::fromJsonValue(m_memory_gb, json[QString("memoryGb")]);
    m_memory_gb_isSet = !json[QString("memoryGb")].isNull() && m_memory_gb_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_type_id_isValid = ::OpenAPI::fromJsonValue(m_node_type_id, json[QString("nodeTypeId")]);
    m_node_type_id_isSet = !json[QString("nodeTypeId")].isNull() && m_node_type_id_isValid;

    m_total_core_count_isValid = ::OpenAPI::fromJsonValue(m_total_core_count, json[QString("totalCoreCount")]);
    m_total_core_count_isSet = !json[QString("totalCoreCount")].isNull() && m_total_core_count_isValid;

    m_virtual_cpu_count_isValid = ::OpenAPI::fromJsonValue(m_virtual_cpu_count, json[QString("virtualCpuCount")]);
    m_virtual_cpu_count_isSet = !json[QString("virtualCpuCount")].isNull() && m_virtual_cpu_count_isValid;
}

QString OAINodeType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeType::asJsonObject() const {
    QJsonObject obj;
    if (m_available_custom_core_counts.size() > 0) {
        obj.insert(QString("availableCustomCoreCounts"), ::OpenAPI::toJsonValue(m_available_custom_core_counts));
    }
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGb"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_families.size() > 0) {
        obj.insert(QString("families"), ::OpenAPI::toJsonValue(m_families));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_memory_gb_isSet) {
        obj.insert(QString("memoryGb"), ::OpenAPI::toJsonValue(m_memory_gb));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_type_id_isSet) {
        obj.insert(QString("nodeTypeId"), ::OpenAPI::toJsonValue(m_node_type_id));
    }
    if (m_total_core_count_isSet) {
        obj.insert(QString("totalCoreCount"), ::OpenAPI::toJsonValue(m_total_core_count));
    }
    if (m_virtual_cpu_count_isSet) {
        obj.insert(QString("virtualCpuCount"), ::OpenAPI::toJsonValue(m_virtual_cpu_count));
    }
    return obj;
}

QList<qint32> OAINodeType::getAvailableCustomCoreCounts() const {
    return m_available_custom_core_counts;
}
void OAINodeType::setAvailableCustomCoreCounts(const QList<qint32> &available_custom_core_counts) {
    m_available_custom_core_counts = available_custom_core_counts;
    m_available_custom_core_counts_isSet = true;
}

bool OAINodeType::is_available_custom_core_counts_Set() const{
    return m_available_custom_core_counts_isSet;
}

bool OAINodeType::is_available_custom_core_counts_Valid() const{
    return m_available_custom_core_counts_isValid;
}

QList<QString> OAINodeType::getCapabilities() const {
    return m_capabilities;
}
void OAINodeType::setCapabilities(const QList<QString> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAINodeType::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAINodeType::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

qint32 OAINodeType::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAINodeType::setDiskSizeGb(const qint32 &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAINodeType::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAINodeType::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

QString OAINodeType::getDisplayName() const {
    return m_display_name;
}
void OAINodeType::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAINodeType::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAINodeType::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAINodeType::getFamilies() const {
    return m_families;
}
void OAINodeType::setFamilies(const QList<QString> &families) {
    m_families = families;
    m_families_isSet = true;
}

bool OAINodeType::is_families_Set() const{
    return m_families_isSet;
}

bool OAINodeType::is_families_Valid() const{
    return m_families_isValid;
}

QString OAINodeType::getKind() const {
    return m_kind;
}
void OAINodeType::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAINodeType::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAINodeType::is_kind_Valid() const{
    return m_kind_isValid;
}

qint32 OAINodeType::getMemoryGb() const {
    return m_memory_gb;
}
void OAINodeType::setMemoryGb(const qint32 &memory_gb) {
    m_memory_gb = memory_gb;
    m_memory_gb_isSet = true;
}

bool OAINodeType::is_memory_gb_Set() const{
    return m_memory_gb_isSet;
}

bool OAINodeType::is_memory_gb_Valid() const{
    return m_memory_gb_isValid;
}

QString OAINodeType::getName() const {
    return m_name;
}
void OAINodeType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINodeType::is_name_Set() const{
    return m_name_isSet;
}

bool OAINodeType::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINodeType::getNodeTypeId() const {
    return m_node_type_id;
}
void OAINodeType::setNodeTypeId(const QString &node_type_id) {
    m_node_type_id = node_type_id;
    m_node_type_id_isSet = true;
}

bool OAINodeType::is_node_type_id_Set() const{
    return m_node_type_id_isSet;
}

bool OAINodeType::is_node_type_id_Valid() const{
    return m_node_type_id_isValid;
}

qint32 OAINodeType::getTotalCoreCount() const {
    return m_total_core_count;
}
void OAINodeType::setTotalCoreCount(const qint32 &total_core_count) {
    m_total_core_count = total_core_count;
    m_total_core_count_isSet = true;
}

bool OAINodeType::is_total_core_count_Set() const{
    return m_total_core_count_isSet;
}

bool OAINodeType::is_total_core_count_Valid() const{
    return m_total_core_count_isValid;
}

qint32 OAINodeType::getVirtualCpuCount() const {
    return m_virtual_cpu_count;
}
void OAINodeType::setVirtualCpuCount(const qint32 &virtual_cpu_count) {
    m_virtual_cpu_count = virtual_cpu_count;
    m_virtual_cpu_count_isSet = true;
}

bool OAINodeType::is_virtual_cpu_count_Set() const{
    return m_virtual_cpu_count_isSet;
}

bool OAINodeType::is_virtual_cpu_count_Valid() const{
    return m_virtual_cpu_count_isValid;
}

bool OAINodeType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_custom_core_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_families.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_core_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_cpu_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
