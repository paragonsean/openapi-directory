/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateConnection::OAIPrivateConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateConnection::OAIPrivateConnection() {
    this->initializeModel();
}

OAIPrivateConnection::~OAIPrivateConnection() {}

void OAIPrivateConnection::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_peering_id_isSet = false;
    m_peering_id_isValid = false;

    m_peering_state_isSet = false;
    m_peering_state_isValid = false;

    m_routing_mode_isSet = false;
    m_routing_mode_isValid = false;

    m_service_network_isSet = false;
    m_service_network_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_vmware_engine_network_isSet = false;
    m_vmware_engine_network_isValid = false;

    m_vmware_engine_network_canonical_isSet = false;
    m_vmware_engine_network_canonical_isValid = false;
}

void OAIPrivateConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateConnection::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_peering_id_isValid = ::OpenAPI::fromJsonValue(m_peering_id, json[QString("peeringId")]);
    m_peering_id_isSet = !json[QString("peeringId")].isNull() && m_peering_id_isValid;

    m_peering_state_isValid = ::OpenAPI::fromJsonValue(m_peering_state, json[QString("peeringState")]);
    m_peering_state_isSet = !json[QString("peeringState")].isNull() && m_peering_state_isValid;

    m_routing_mode_isValid = ::OpenAPI::fromJsonValue(m_routing_mode, json[QString("routingMode")]);
    m_routing_mode_isSet = !json[QString("routingMode")].isNull() && m_routing_mode_isValid;

    m_service_network_isValid = ::OpenAPI::fromJsonValue(m_service_network, json[QString("serviceNetwork")]);
    m_service_network_isSet = !json[QString("serviceNetwork")].isNull() && m_service_network_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_vmware_engine_network_isValid = ::OpenAPI::fromJsonValue(m_vmware_engine_network, json[QString("vmwareEngineNetwork")]);
    m_vmware_engine_network_isSet = !json[QString("vmwareEngineNetwork")].isNull() && m_vmware_engine_network_isValid;

    m_vmware_engine_network_canonical_isValid = ::OpenAPI::fromJsonValue(m_vmware_engine_network_canonical, json[QString("vmwareEngineNetworkCanonical")]);
    m_vmware_engine_network_canonical_isSet = !json[QString("vmwareEngineNetworkCanonical")].isNull() && m_vmware_engine_network_canonical_isValid;
}

QString OAIPrivateConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_peering_id_isSet) {
        obj.insert(QString("peeringId"), ::OpenAPI::toJsonValue(m_peering_id));
    }
    if (m_peering_state_isSet) {
        obj.insert(QString("peeringState"), ::OpenAPI::toJsonValue(m_peering_state));
    }
    if (m_routing_mode_isSet) {
        obj.insert(QString("routingMode"), ::OpenAPI::toJsonValue(m_routing_mode));
    }
    if (m_service_network_isSet) {
        obj.insert(QString("serviceNetwork"), ::OpenAPI::toJsonValue(m_service_network));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_vmware_engine_network_isSet) {
        obj.insert(QString("vmwareEngineNetwork"), ::OpenAPI::toJsonValue(m_vmware_engine_network));
    }
    if (m_vmware_engine_network_canonical_isSet) {
        obj.insert(QString("vmwareEngineNetworkCanonical"), ::OpenAPI::toJsonValue(m_vmware_engine_network_canonical));
    }
    return obj;
}

QString OAIPrivateConnection::getCreateTime() const {
    return m_create_time;
}
void OAIPrivateConnection::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIPrivateConnection::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIPrivateConnection::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIPrivateConnection::getDescription() const {
    return m_description;
}
void OAIPrivateConnection::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPrivateConnection::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPrivateConnection::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPrivateConnection::getName() const {
    return m_name;
}
void OAIPrivateConnection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPrivateConnection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPrivateConnection::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPrivateConnection::getPeeringId() const {
    return m_peering_id;
}
void OAIPrivateConnection::setPeeringId(const QString &peering_id) {
    m_peering_id = peering_id;
    m_peering_id_isSet = true;
}

bool OAIPrivateConnection::is_peering_id_Set() const{
    return m_peering_id_isSet;
}

bool OAIPrivateConnection::is_peering_id_Valid() const{
    return m_peering_id_isValid;
}

QString OAIPrivateConnection::getPeeringState() const {
    return m_peering_state;
}
void OAIPrivateConnection::setPeeringState(const QString &peering_state) {
    m_peering_state = peering_state;
    m_peering_state_isSet = true;
}

bool OAIPrivateConnection::is_peering_state_Set() const{
    return m_peering_state_isSet;
}

bool OAIPrivateConnection::is_peering_state_Valid() const{
    return m_peering_state_isValid;
}

QString OAIPrivateConnection::getRoutingMode() const {
    return m_routing_mode;
}
void OAIPrivateConnection::setRoutingMode(const QString &routing_mode) {
    m_routing_mode = routing_mode;
    m_routing_mode_isSet = true;
}

bool OAIPrivateConnection::is_routing_mode_Set() const{
    return m_routing_mode_isSet;
}

bool OAIPrivateConnection::is_routing_mode_Valid() const{
    return m_routing_mode_isValid;
}

QString OAIPrivateConnection::getServiceNetwork() const {
    return m_service_network;
}
void OAIPrivateConnection::setServiceNetwork(const QString &service_network) {
    m_service_network = service_network;
    m_service_network_isSet = true;
}

bool OAIPrivateConnection::is_service_network_Set() const{
    return m_service_network_isSet;
}

bool OAIPrivateConnection::is_service_network_Valid() const{
    return m_service_network_isValid;
}

QString OAIPrivateConnection::getState() const {
    return m_state;
}
void OAIPrivateConnection::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPrivateConnection::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPrivateConnection::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIPrivateConnection::getType() const {
    return m_type;
}
void OAIPrivateConnection::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPrivateConnection::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPrivateConnection::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPrivateConnection::getUid() const {
    return m_uid;
}
void OAIPrivateConnection::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIPrivateConnection::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIPrivateConnection::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIPrivateConnection::getUpdateTime() const {
    return m_update_time;
}
void OAIPrivateConnection::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIPrivateConnection::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIPrivateConnection::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIPrivateConnection::getVmwareEngineNetwork() const {
    return m_vmware_engine_network;
}
void OAIPrivateConnection::setVmwareEngineNetwork(const QString &vmware_engine_network) {
    m_vmware_engine_network = vmware_engine_network;
    m_vmware_engine_network_isSet = true;
}

bool OAIPrivateConnection::is_vmware_engine_network_Set() const{
    return m_vmware_engine_network_isSet;
}

bool OAIPrivateConnection::is_vmware_engine_network_Valid() const{
    return m_vmware_engine_network_isValid;
}

QString OAIPrivateConnection::getVmwareEngineNetworkCanonical() const {
    return m_vmware_engine_network_canonical;
}
void OAIPrivateConnection::setVmwareEngineNetworkCanonical(const QString &vmware_engine_network_canonical) {
    m_vmware_engine_network_canonical = vmware_engine_network_canonical;
    m_vmware_engine_network_canonical_isSet = true;
}

bool OAIPrivateConnection::is_vmware_engine_network_canonical_Set() const{
    return m_vmware_engine_network_canonical_isSet;
}

bool OAIPrivateConnection::is_vmware_engine_network_canonical_Valid() const{
    return m_vmware_engine_network_canonical_isValid;
}

bool OAIPrivateConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_engine_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_engine_network_canonical_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
