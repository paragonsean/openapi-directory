# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HcxActivationKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_key: str=None, create_time: str=None, name: str=None, state: str=None, uid: str=None):
        """HcxActivationKey - a model defined in OpenAPI

        :param activation_key: The activation_key of this HcxActivationKey.
        :param create_time: The create_time of this HcxActivationKey.
        :param name: The name of this HcxActivationKey.
        :param state: The state of this HcxActivationKey.
        :param uid: The uid of this HcxActivationKey.
        """
        self.openapi_types = {
            'activation_key': str,
            'create_time': str,
            'name': str,
            'state': str,
            'uid': str
        }

        self.attribute_map = {
            'activation_key': 'activationKey',
            'create_time': 'createTime',
            'name': 'name',
            'state': 'state',
            'uid': 'uid'
        }

        self._activation_key = activation_key
        self._create_time = create_time
        self._name = name
        self._state = state
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HcxActivationKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HcxActivationKey of this HcxActivationKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_key(self):
        """Gets the activation_key of this HcxActivationKey.

        Output only. HCX activation key.

        :return: The activation_key of this HcxActivationKey.
        :rtype: str
        """
        return self._activation_key

    @activation_key.setter
    def activation_key(self, activation_key):
        """Sets the activation_key of this HcxActivationKey.

        Output only. HCX activation key.

        :param activation_key: The activation_key of this HcxActivationKey.
        :type activation_key: str
        """

        self._activation_key = activation_key

    @property
    def create_time(self):
        """Gets the create_time of this HcxActivationKey.

        Output only. Creation time of HCX activation key.

        :return: The create_time of this HcxActivationKey.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this HcxActivationKey.

        Output only. Creation time of HCX activation key.

        :param create_time: The create_time of this HcxActivationKey.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def name(self):
        """Gets the name of this HcxActivationKey.

        Output only. The resource name of this HcxActivationKey. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateClouds/my-cloud/hcxActivationKeys/my-key`

        :return: The name of this HcxActivationKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HcxActivationKey.

        Output only. The resource name of this HcxActivationKey. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateClouds/my-cloud/hcxActivationKeys/my-key`

        :param name: The name of this HcxActivationKey.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this HcxActivationKey.

        Output only. State of HCX activation key.

        :return: The state of this HcxActivationKey.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HcxActivationKey.

        Output only. State of HCX activation key.

        :param state: The state of this HcxActivationKey.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "AVAILABLE", "CONSUMED", "CREATING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this HcxActivationKey.

        Output only. System-generated unique identifier for the resource.

        :return: The uid of this HcxActivationKey.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this HcxActivationKey.

        Output only. System-generated unique identifier for the resource.

        :param uid: The uid of this HcxActivationKey.
        :type uid: str
        """

        self._uid = uid
