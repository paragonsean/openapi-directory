# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_type_config import NodeTypeConfig
from openapi_server.models.stretched_cluster_config import StretchedClusterConfig
from openapi_server import util


class Cluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, management: bool=None, name: str=None, node_type_configs: Dict[str, NodeTypeConfig]=None, state: str=None, stretched_cluster_config: StretchedClusterConfig=None, uid: str=None, update_time: str=None):
        """Cluster - a model defined in OpenAPI

        :param create_time: The create_time of this Cluster.
        :param management: The management of this Cluster.
        :param name: The name of this Cluster.
        :param node_type_configs: The node_type_configs of this Cluster.
        :param state: The state of this Cluster.
        :param stretched_cluster_config: The stretched_cluster_config of this Cluster.
        :param uid: The uid of this Cluster.
        :param update_time: The update_time of this Cluster.
        """
        self.openapi_types = {
            'create_time': str,
            'management': bool,
            'name': str,
            'node_type_configs': Dict[str, NodeTypeConfig],
            'state': str,
            'stretched_cluster_config': StretchedClusterConfig,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'management': 'management',
            'name': 'name',
            'node_type_configs': 'nodeTypeConfigs',
            'state': 'state',
            'stretched_cluster_config': 'stretchedClusterConfig',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._management = management
        self._name = name
        self._node_type_configs = node_type_configs
        self._state = state
        self._stretched_cluster_config = stretched_cluster_config
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cluster of this Cluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Cluster.

        Output only. Creation time of this resource.

        :return: The create_time of this Cluster.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Cluster.

        Output only. Creation time of this resource.

        :param create_time: The create_time of this Cluster.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def management(self):
        """Gets the management of this Cluster.

        Output only. True if the cluster is a management cluster; false otherwise. There can only be one management cluster in a private cloud and it has to be the first one.

        :return: The management of this Cluster.
        :rtype: bool
        """
        return self._management

    @management.setter
    def management(self, management):
        """Sets the management of this Cluster.

        Output only. True if the cluster is a management cluster; false otherwise. There can only be one management cluster in a private cloud and it has to be the first one.

        :param management: The management of this Cluster.
        :type management: bool
        """

        self._management = management

    @property
    def name(self):
        """Gets the name of this Cluster.

        Output only. The resource name of this cluster. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/clusters/my-cluster`

        :return: The name of this Cluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.

        Output only. The resource name of this cluster. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/clusters/my-cluster`

        :param name: The name of this Cluster.
        :type name: str
        """

        self._name = name

    @property
    def node_type_configs(self):
        """Gets the node_type_configs of this Cluster.

        Required. The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the `NodeType`).

        :return: The node_type_configs of this Cluster.
        :rtype: Dict[str, NodeTypeConfig]
        """
        return self._node_type_configs

    @node_type_configs.setter
    def node_type_configs(self, node_type_configs):
        """Sets the node_type_configs of this Cluster.

        Required. The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the `NodeType`).

        :param node_type_configs: The node_type_configs of this Cluster.
        :type node_type_configs: Dict[str, NodeTypeConfig]
        """

        self._node_type_configs = node_type_configs

    @property
    def state(self):
        """Gets the state of this Cluster.

        Output only. State of the resource.

        :return: The state of this Cluster.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Cluster.

        Output only. State of the resource.

        :param state: The state of this Cluster.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "CREATING", "UPDATING", "DELETING", "REPAIRING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def stretched_cluster_config(self):
        """Gets the stretched_cluster_config of this Cluster.


        :return: The stretched_cluster_config of this Cluster.
        :rtype: StretchedClusterConfig
        """
        return self._stretched_cluster_config

    @stretched_cluster_config.setter
    def stretched_cluster_config(self, stretched_cluster_config):
        """Sets the stretched_cluster_config of this Cluster.


        :param stretched_cluster_config: The stretched_cluster_config of this Cluster.
        :type stretched_cluster_config: StretchedClusterConfig
        """

        self._stretched_cluster_config = stretched_cluster_config

    @property
    def uid(self):
        """Gets the uid of this Cluster.

        Output only. System-generated unique identifier for the resource.

        :return: The uid of this Cluster.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Cluster.

        Output only. System-generated unique identifier for the resource.

        :param uid: The uid of this Cluster.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Cluster.

        Output only. Last update time of this resource.

        :return: The update_time of this Cluster.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Cluster.

        Output only. Last update time of this resource.

        :param update_time: The update_time of this Cluster.
        :type update_time: str
        """

        self._update_time = update_time
