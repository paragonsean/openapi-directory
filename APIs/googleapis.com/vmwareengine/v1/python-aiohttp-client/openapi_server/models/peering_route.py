# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PeeringRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dest_range: str=None, direction: str=None, imported: bool=None, next_hop_region: str=None, priority: str=None, type: str=None):
        """PeeringRoute - a model defined in OpenAPI

        :param dest_range: The dest_range of this PeeringRoute.
        :param direction: The direction of this PeeringRoute.
        :param imported: The imported of this PeeringRoute.
        :param next_hop_region: The next_hop_region of this PeeringRoute.
        :param priority: The priority of this PeeringRoute.
        :param type: The type of this PeeringRoute.
        """
        self.openapi_types = {
            'dest_range': str,
            'direction': str,
            'imported': bool,
            'next_hop_region': str,
            'priority': str,
            'type': str
        }

        self.attribute_map = {
            'dest_range': 'destRange',
            'direction': 'direction',
            'imported': 'imported',
            'next_hop_region': 'nextHopRegion',
            'priority': 'priority',
            'type': 'type'
        }

        self._dest_range = dest_range
        self._direction = direction
        self._imported = imported
        self._next_hop_region = next_hop_region
        self._priority = priority
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeeringRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeeringRoute of this PeeringRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dest_range(self):
        """Gets the dest_range of this PeeringRoute.

        Output only. Destination range of the peering route in CIDR notation.

        :return: The dest_range of this PeeringRoute.
        :rtype: str
        """
        return self._dest_range

    @dest_range.setter
    def dest_range(self, dest_range):
        """Sets the dest_range of this PeeringRoute.

        Output only. Destination range of the peering route in CIDR notation.

        :param dest_range: The dest_range of this PeeringRoute.
        :type dest_range: str
        """

        self._dest_range = dest_range

    @property
    def direction(self):
        """Gets the direction of this PeeringRoute.

        Output only. Direction of the routes exchanged with the peer network, from the VMware Engine network perspective: * Routes of direction `INCOMING` are imported from the peer network. * Routes of direction `OUTGOING` are exported from the intranet VPC network of the VMware Engine network.

        :return: The direction of this PeeringRoute.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this PeeringRoute.

        Output only. Direction of the routes exchanged with the peer network, from the VMware Engine network perspective: * Routes of direction `INCOMING` are imported from the peer network. * Routes of direction `OUTGOING` are exported from the intranet VPC network of the VMware Engine network.

        :param direction: The direction of this PeeringRoute.
        :type direction: str
        """
        allowed_values = ["DIRECTION_UNSPECIFIED", "INCOMING", "OUTGOING"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def imported(self):
        """Gets the imported of this PeeringRoute.

        Output only. True if the peering route has been imported from a peered VPC network; false otherwise. The import happens if the field `NetworkPeering.importCustomRoutes` is true for this network, `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and the import does not result in a route conflict.

        :return: The imported of this PeeringRoute.
        :rtype: bool
        """
        return self._imported

    @imported.setter
    def imported(self, imported):
        """Sets the imported of this PeeringRoute.

        Output only. True if the peering route has been imported from a peered VPC network; false otherwise. The import happens if the field `NetworkPeering.importCustomRoutes` is true for this network, `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and the import does not result in a route conflict.

        :param imported: The imported of this PeeringRoute.
        :type imported: bool
        """

        self._imported = imported

    @property
    def next_hop_region(self):
        """Gets the next_hop_region of this PeeringRoute.

        Output only. Region containing the next hop of the peering route. This field only applies to dynamic routes in the peer VPC network.

        :return: The next_hop_region of this PeeringRoute.
        :rtype: str
        """
        return self._next_hop_region

    @next_hop_region.setter
    def next_hop_region(self, next_hop_region):
        """Sets the next_hop_region of this PeeringRoute.

        Output only. Region containing the next hop of the peering route. This field only applies to dynamic routes in the peer VPC network.

        :param next_hop_region: The next_hop_region of this PeeringRoute.
        :type next_hop_region: str
        """

        self._next_hop_region = next_hop_region

    @property
    def priority(self):
        """Gets the priority of this PeeringRoute.

        Output only. The priority of the peering route.

        :return: The priority of this PeeringRoute.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PeeringRoute.

        Output only. The priority of the peering route.

        :param priority: The priority of this PeeringRoute.
        :type priority: str
        """

        self._priority = priority

    @property
    def type(self):
        """Gets the type of this PeeringRoute.

        Output only. Type of the route in the peer VPC network.

        :return: The type of this PeeringRoute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PeeringRoute.

        Output only. Type of the route in the peer VPC network.

        :param type: The type of this PeeringRoute.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "DYNAMIC_PEERING_ROUTE", "STATIC_PEERING_ROUTE", "SUBNET_PEERING_ROUTE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
