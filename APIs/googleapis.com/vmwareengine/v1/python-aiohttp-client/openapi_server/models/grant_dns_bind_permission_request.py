# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.principal import Principal
from openapi_server import util


class GrantDnsBindPermissionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, principal: Principal=None, request_id: str=None):
        """GrantDnsBindPermissionRequest - a model defined in OpenAPI

        :param principal: The principal of this GrantDnsBindPermissionRequest.
        :param request_id: The request_id of this GrantDnsBindPermissionRequest.
        """
        self.openapi_types = {
            'principal': Principal,
            'request_id': str
        }

        self.attribute_map = {
            'principal': 'principal',
            'request_id': 'requestId'
        }

        self._principal = principal
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrantDnsBindPermissionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrantDnsBindPermissionRequest of this GrantDnsBindPermissionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def principal(self):
        """Gets the principal of this GrantDnsBindPermissionRequest.


        :return: The principal of this GrantDnsBindPermissionRequest.
        :rtype: Principal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this GrantDnsBindPermissionRequest.


        :param principal: The principal of this GrantDnsBindPermissionRequest.
        :type principal: Principal
        """

        self._principal = principal

    @property
    def request_id(self):
        """Gets the request_id of this GrantDnsBindPermissionRequest.

        Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this GrantDnsBindPermissionRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this GrantDnsBindPermissionRequest.

        Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this GrantDnsBindPermissionRequest.
        :type request_id: str
        """

        self._request_id = request_id
