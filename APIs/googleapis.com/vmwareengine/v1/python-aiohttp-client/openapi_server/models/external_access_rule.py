# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_range import IpRange
from openapi_server import util


class ExternalAccessRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, create_time: str=None, description: str=None, destination_ip_ranges: List[IpRange]=None, destination_ports: List[str]=None, ip_protocol: str=None, name: str=None, priority: int=None, source_ip_ranges: List[IpRange]=None, source_ports: List[str]=None, state: str=None, uid: str=None, update_time: str=None):
        """ExternalAccessRule - a model defined in OpenAPI

        :param action: The action of this ExternalAccessRule.
        :param create_time: The create_time of this ExternalAccessRule.
        :param description: The description of this ExternalAccessRule.
        :param destination_ip_ranges: The destination_ip_ranges of this ExternalAccessRule.
        :param destination_ports: The destination_ports of this ExternalAccessRule.
        :param ip_protocol: The ip_protocol of this ExternalAccessRule.
        :param name: The name of this ExternalAccessRule.
        :param priority: The priority of this ExternalAccessRule.
        :param source_ip_ranges: The source_ip_ranges of this ExternalAccessRule.
        :param source_ports: The source_ports of this ExternalAccessRule.
        :param state: The state of this ExternalAccessRule.
        :param uid: The uid of this ExternalAccessRule.
        :param update_time: The update_time of this ExternalAccessRule.
        """
        self.openapi_types = {
            'action': str,
            'create_time': str,
            'description': str,
            'destination_ip_ranges': List[IpRange],
            'destination_ports': List[str],
            'ip_protocol': str,
            'name': str,
            'priority': int,
            'source_ip_ranges': List[IpRange],
            'source_ports': List[str],
            'state': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'action': 'action',
            'create_time': 'createTime',
            'description': 'description',
            'destination_ip_ranges': 'destinationIpRanges',
            'destination_ports': 'destinationPorts',
            'ip_protocol': 'ipProtocol',
            'name': 'name',
            'priority': 'priority',
            'source_ip_ranges': 'sourceIpRanges',
            'source_ports': 'sourcePorts',
            'state': 'state',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._action = action
        self._create_time = create_time
        self._description = description
        self._destination_ip_ranges = destination_ip_ranges
        self._destination_ports = destination_ports
        self._ip_protocol = ip_protocol
        self._name = name
        self._priority = priority
        self._source_ip_ranges = source_ip_ranges
        self._source_ports = source_ports
        self._state = state
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalAccessRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalAccessRule of this ExternalAccessRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this ExternalAccessRule.

        The action that the external access rule performs.

        :return: The action of this ExternalAccessRule.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ExternalAccessRule.

        The action that the external access rule performs.

        :param action: The action of this ExternalAccessRule.
        :type action: str
        """
        allowed_values = ["ACTION_UNSPECIFIED", "ALLOW", "DENY"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def create_time(self):
        """Gets the create_time of this ExternalAccessRule.

        Output only. Creation time of this resource.

        :return: The create_time of this ExternalAccessRule.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ExternalAccessRule.

        Output only. Creation time of this resource.

        :param create_time: The create_time of this ExternalAccessRule.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ExternalAccessRule.

        User-provided description for this external access rule.

        :return: The description of this ExternalAccessRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExternalAccessRule.

        User-provided description for this external access rule.

        :param description: The description of this ExternalAccessRule.
        :type description: str
        """

        self._description = description

    @property
    def destination_ip_ranges(self):
        """Gets the destination_ip_ranges of this ExternalAccessRule.

        If destination ranges are specified, the external access rule applies only to the traffic that has a destination IP address in these ranges. The specified IP addresses must have reserved external IP addresses in the scope of the parent network policy. To match all external IP addresses in the scope of the parent network policy, specify `0.0.0.0/0`. To match a specific external IP address, specify it using the `IpRange.external_address` property.

        :return: The destination_ip_ranges of this ExternalAccessRule.
        :rtype: List[IpRange]
        """
        return self._destination_ip_ranges

    @destination_ip_ranges.setter
    def destination_ip_ranges(self, destination_ip_ranges):
        """Sets the destination_ip_ranges of this ExternalAccessRule.

        If destination ranges are specified, the external access rule applies only to the traffic that has a destination IP address in these ranges. The specified IP addresses must have reserved external IP addresses in the scope of the parent network policy. To match all external IP addresses in the scope of the parent network policy, specify `0.0.0.0/0`. To match a specific external IP address, specify it using the `IpRange.external_address` property.

        :param destination_ip_ranges: The destination_ip_ranges of this ExternalAccessRule.
        :type destination_ip_ranges: List[IpRange]
        """

        self._destination_ip_ranges = destination_ip_ranges

    @property
    def destination_ports(self):
        """Gets the destination_ports of this ExternalAccessRule.

        A list of destination ports to which the external access rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. For example: `[\"22\"]`, `[\"80\",\"443\"]`, or `[\"12345-12349\"]`. To match all destination ports, specify `[\"0-65535\"]`.

        :return: The destination_ports of this ExternalAccessRule.
        :rtype: List[str]
        """
        return self._destination_ports

    @destination_ports.setter
    def destination_ports(self, destination_ports):
        """Sets the destination_ports of this ExternalAccessRule.

        A list of destination ports to which the external access rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. For example: `[\"22\"]`, `[\"80\",\"443\"]`, or `[\"12345-12349\"]`. To match all destination ports, specify `[\"0-65535\"]`.

        :param destination_ports: The destination_ports of this ExternalAccessRule.
        :type destination_ports: List[str]
        """

        self._destination_ports = destination_ports

    @property
    def ip_protocol(self):
        """Gets the ip_protocol of this ExternalAccessRule.

        The IP protocol to which the external access rule applies. This value can be one of the following three protocol strings (not case-sensitive): `tcp`, `udp`, or `icmp`.

        :return: The ip_protocol of this ExternalAccessRule.
        :rtype: str
        """
        return self._ip_protocol

    @ip_protocol.setter
    def ip_protocol(self, ip_protocol):
        """Sets the ip_protocol of this ExternalAccessRule.

        The IP protocol to which the external access rule applies. This value can be one of the following three protocol strings (not case-sensitive): `tcp`, `udp`, or `icmp`.

        :param ip_protocol: The ip_protocol of this ExternalAccessRule.
        :type ip_protocol: str
        """

        self._ip_protocol = ip_protocol

    @property
    def name(self):
        """Gets the name of this ExternalAccessRule.

        Output only. The resource name of this external access rule. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/networkPolicies/my-policy/externalAccessRules/my-rule`

        :return: The name of this ExternalAccessRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExternalAccessRule.

        Output only. The resource name of this external access rule. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/networkPolicies/my-policy/externalAccessRules/my-rule`

        :param name: The name of this ExternalAccessRule.
        :type name: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this ExternalAccessRule.

        External access rule priority, which determines the external access rule to use when multiple rules apply. If multiple rules have the same priority, their ordering is non-deterministic. If specific ordering is required, assign unique priorities to enforce such ordering. The external access rule priority is an integer from 100 to 4096, both inclusive. Lower integers indicate higher precedence. For example, a rule with priority `100` has higher precedence than a rule with priority `101`.

        :return: The priority of this ExternalAccessRule.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ExternalAccessRule.

        External access rule priority, which determines the external access rule to use when multiple rules apply. If multiple rules have the same priority, their ordering is non-deterministic. If specific ordering is required, assign unique priorities to enforce such ordering. The external access rule priority is an integer from 100 to 4096, both inclusive. Lower integers indicate higher precedence. For example, a rule with priority `100` has higher precedence than a rule with priority `101`.

        :param priority: The priority of this ExternalAccessRule.
        :type priority: int
        """

        self._priority = priority

    @property
    def source_ip_ranges(self):
        """Gets the source_ip_ranges of this ExternalAccessRule.

        If source ranges are specified, the external access rule applies only to traffic that has a source IP address in these ranges. These ranges can either be expressed in the CIDR format or as an IP address. As only inbound rules are supported, `ExternalAddress` resources cannot be the source IP addresses of an external access rule. To match all source addresses, specify `0.0.0.0/0`.

        :return: The source_ip_ranges of this ExternalAccessRule.
        :rtype: List[IpRange]
        """
        return self._source_ip_ranges

    @source_ip_ranges.setter
    def source_ip_ranges(self, source_ip_ranges):
        """Sets the source_ip_ranges of this ExternalAccessRule.

        If source ranges are specified, the external access rule applies only to traffic that has a source IP address in these ranges. These ranges can either be expressed in the CIDR format or as an IP address. As only inbound rules are supported, `ExternalAddress` resources cannot be the source IP addresses of an external access rule. To match all source addresses, specify `0.0.0.0/0`.

        :param source_ip_ranges: The source_ip_ranges of this ExternalAccessRule.
        :type source_ip_ranges: List[IpRange]
        """

        self._source_ip_ranges = source_ip_ranges

    @property
    def source_ports(self):
        """Gets the source_ports of this ExternalAccessRule.

        A list of source ports to which the external access rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. For example: `[\"22\"]`, `[\"80\",\"443\"]`, or `[\"12345-12349\"]`. To match all source ports, specify `[\"0-65535\"]`.

        :return: The source_ports of this ExternalAccessRule.
        :rtype: List[str]
        """
        return self._source_ports

    @source_ports.setter
    def source_ports(self, source_ports):
        """Sets the source_ports of this ExternalAccessRule.

        A list of source ports to which the external access rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. For example: `[\"22\"]`, `[\"80\",\"443\"]`, or `[\"12345-12349\"]`. To match all source ports, specify `[\"0-65535\"]`.

        :param source_ports: The source_ports of this ExternalAccessRule.
        :type source_ports: List[str]
        """

        self._source_ports = source_ports

    @property
    def state(self):
        """Gets the state of this ExternalAccessRule.

        Output only. The state of the resource.

        :return: The state of this ExternalAccessRule.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ExternalAccessRule.

        Output only. The state of the resource.

        :param state: The state of this ExternalAccessRule.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "CREATING", "UPDATING", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this ExternalAccessRule.

        Output only. System-generated unique identifier for the resource.

        :return: The uid of this ExternalAccessRule.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ExternalAccessRule.

        Output only. System-generated unique identifier for the resource.

        :param uid: The uid of this ExternalAccessRule.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this ExternalAccessRule.

        Output only. Last update time of this resource.

        :return: The update_time of this ExternalAccessRule.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ExternalAccessRule.

        Output only. Last update time of this resource.

        :param update_time: The update_time of this ExternalAccessRule.
        :type update_time: str
        """

        self._update_time = update_time
