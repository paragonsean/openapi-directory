# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Node(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_core_count: str=None, fqdn: str=None, internal_ip: str=None, name: str=None, node_type_id: str=None, state: str=None, version: str=None):
        """Node - a model defined in OpenAPI

        :param custom_core_count: The custom_core_count of this Node.
        :param fqdn: The fqdn of this Node.
        :param internal_ip: The internal_ip of this Node.
        :param name: The name of this Node.
        :param node_type_id: The node_type_id of this Node.
        :param state: The state of this Node.
        :param version: The version of this Node.
        """
        self.openapi_types = {
            'custom_core_count': str,
            'fqdn': str,
            'internal_ip': str,
            'name': str,
            'node_type_id': str,
            'state': str,
            'version': str
        }

        self.attribute_map = {
            'custom_core_count': 'customCoreCount',
            'fqdn': 'fqdn',
            'internal_ip': 'internalIp',
            'name': 'name',
            'node_type_id': 'nodeTypeId',
            'state': 'state',
            'version': 'version'
        }

        self._custom_core_count = custom_core_count
        self._fqdn = fqdn
        self._internal_ip = internal_ip
        self._name = name
        self._node_type_id = node_type_id
        self._state = state
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Node of this Node.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_core_count(self):
        """Gets the custom_core_count of this Node.

        Output only. Customized number of cores

        :return: The custom_core_count of this Node.
        :rtype: str
        """
        return self._custom_core_count

    @custom_core_count.setter
    def custom_core_count(self, custom_core_count):
        """Sets the custom_core_count of this Node.

        Output only. Customized number of cores

        :param custom_core_count: The custom_core_count of this Node.
        :type custom_core_count: str
        """

        self._custom_core_count = custom_core_count

    @property
    def fqdn(self):
        """Gets the fqdn of this Node.

        Output only. Fully qualified domain name of the node.

        :return: The fqdn of this Node.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this Node.

        Output only. Fully qualified domain name of the node.

        :param fqdn: The fqdn of this Node.
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def internal_ip(self):
        """Gets the internal_ip of this Node.

        Output only. Internal IP address of the node.

        :return: The internal_ip of this Node.
        :rtype: str
        """
        return self._internal_ip

    @internal_ip.setter
    def internal_ip(self, internal_ip):
        """Sets the internal_ip of this Node.

        Output only. Internal IP address of the node.

        :param internal_ip: The internal_ip of this Node.
        :type internal_ip: str
        """

        self._internal_ip = internal_ip

    @property
    def name(self):
        """Gets the name of this Node.

        Output only. The resource name of this node. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: projects/my-project/locations/us-central1-a/privateClouds/my-cloud/clusters/my-cluster/nodes/my-node

        :return: The name of this Node.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.

        Output only. The resource name of this node. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: projects/my-project/locations/us-central1-a/privateClouds/my-cloud/clusters/my-cluster/nodes/my-node

        :param name: The name of this Node.
        :type name: str
        """

        self._name = name

    @property
    def node_type_id(self):
        """Gets the node_type_id of this Node.

        Output only. The canonical identifier of the node type (corresponds to the `NodeType`). For example: standard-72.

        :return: The node_type_id of this Node.
        :rtype: str
        """
        return self._node_type_id

    @node_type_id.setter
    def node_type_id(self, node_type_id):
        """Sets the node_type_id of this Node.

        Output only. The canonical identifier of the node type (corresponds to the `NodeType`). For example: standard-72.

        :param node_type_id: The node_type_id of this Node.
        :type node_type_id: str
        """

        self._node_type_id = node_type_id

    @property
    def state(self):
        """Gets the state of this Node.

        Output only. The state of the appliance.

        :return: The state of this Node.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Node.

        Output only. The state of the appliance.

        :param state: The state of this Node.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "CREATING", "FAILED", "UPGRADING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def version(self):
        """Gets the version of this Node.

        Output only. The version number of the VMware ESXi management component in this cluster.

        :return: The version of this Node.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Node.

        Output only. The version number of the VMware ESXi management component in this cluster.

        :param version: The version of this Node.
        :type version: str
        """

        self._version = version
