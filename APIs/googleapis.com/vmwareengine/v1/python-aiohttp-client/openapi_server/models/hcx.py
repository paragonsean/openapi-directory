# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Hcx(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fqdn: str=None, internal_ip: str=None, state: str=None, version: str=None):
        """Hcx - a model defined in OpenAPI

        :param fqdn: The fqdn of this Hcx.
        :param internal_ip: The internal_ip of this Hcx.
        :param state: The state of this Hcx.
        :param version: The version of this Hcx.
        """
        self.openapi_types = {
            'fqdn': str,
            'internal_ip': str,
            'state': str,
            'version': str
        }

        self.attribute_map = {
            'fqdn': 'fqdn',
            'internal_ip': 'internalIp',
            'state': 'state',
            'version': 'version'
        }

        self._fqdn = fqdn
        self._internal_ip = internal_ip
        self._state = state
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Hcx':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Hcx of this Hcx.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fqdn(self):
        """Gets the fqdn of this Hcx.

        Fully qualified domain name of the appliance.

        :return: The fqdn of this Hcx.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this Hcx.

        Fully qualified domain name of the appliance.

        :param fqdn: The fqdn of this Hcx.
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def internal_ip(self):
        """Gets the internal_ip of this Hcx.

        Internal IP address of the appliance.

        :return: The internal_ip of this Hcx.
        :rtype: str
        """
        return self._internal_ip

    @internal_ip.setter
    def internal_ip(self, internal_ip):
        """Sets the internal_ip of this Hcx.

        Internal IP address of the appliance.

        :param internal_ip: The internal_ip of this Hcx.
        :type internal_ip: str
        """

        self._internal_ip = internal_ip

    @property
    def state(self):
        """Gets the state of this Hcx.

        Output only. The state of the appliance.

        :return: The state of this Hcx.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Hcx.

        Output only. The state of the appliance.

        :param state: The state of this Hcx.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "CREATING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def version(self):
        """Gets the version of this Hcx.

        Version of the appliance.

        :return: The version of this Hcx.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Hcx.

        Version of the appliance.

        :param version: The version of this Hcx.
        :type version: str
        """

        self._version = version
