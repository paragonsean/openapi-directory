# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_server_ip: str=None, management_cidr: str=None, management_ip_address_layout_version: int=None, vmware_engine_network: str=None, vmware_engine_network_canonical: str=None):
        """NetworkConfig - a model defined in OpenAPI

        :param dns_server_ip: The dns_server_ip of this NetworkConfig.
        :param management_cidr: The management_cidr of this NetworkConfig.
        :param management_ip_address_layout_version: The management_ip_address_layout_version of this NetworkConfig.
        :param vmware_engine_network: The vmware_engine_network of this NetworkConfig.
        :param vmware_engine_network_canonical: The vmware_engine_network_canonical of this NetworkConfig.
        """
        self.openapi_types = {
            'dns_server_ip': str,
            'management_cidr': str,
            'management_ip_address_layout_version': int,
            'vmware_engine_network': str,
            'vmware_engine_network_canonical': str
        }

        self.attribute_map = {
            'dns_server_ip': 'dnsServerIp',
            'management_cidr': 'managementCidr',
            'management_ip_address_layout_version': 'managementIpAddressLayoutVersion',
            'vmware_engine_network': 'vmwareEngineNetwork',
            'vmware_engine_network_canonical': 'vmwareEngineNetworkCanonical'
        }

        self._dns_server_ip = dns_server_ip
        self._management_cidr = management_cidr
        self._management_ip_address_layout_version = management_ip_address_layout_version
        self._vmware_engine_network = vmware_engine_network
        self._vmware_engine_network_canonical = vmware_engine_network_canonical

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkConfig of this NetworkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_server_ip(self):
        """Gets the dns_server_ip of this NetworkConfig.

        Output only. DNS Server IP of the Private Cloud. All DNS queries can be forwarded to this address for name resolution of Private Cloud's management entities like vCenter, NSX-T Manager and ESXi hosts.

        :return: The dns_server_ip of this NetworkConfig.
        :rtype: str
        """
        return self._dns_server_ip

    @dns_server_ip.setter
    def dns_server_ip(self, dns_server_ip):
        """Sets the dns_server_ip of this NetworkConfig.

        Output only. DNS Server IP of the Private Cloud. All DNS queries can be forwarded to this address for name resolution of Private Cloud's management entities like vCenter, NSX-T Manager and ESXi hosts.

        :param dns_server_ip: The dns_server_ip of this NetworkConfig.
        :type dns_server_ip: str
        """

        self._dns_server_ip = dns_server_ip

    @property
    def management_cidr(self):
        """Gets the management_cidr of this NetworkConfig.

        Required. Management CIDR used by VMware management appliances.

        :return: The management_cidr of this NetworkConfig.
        :rtype: str
        """
        return self._management_cidr

    @management_cidr.setter
    def management_cidr(self, management_cidr):
        """Sets the management_cidr of this NetworkConfig.

        Required. Management CIDR used by VMware management appliances.

        :param management_cidr: The management_cidr of this NetworkConfig.
        :type management_cidr: str
        """

        self._management_cidr = management_cidr

    @property
    def management_ip_address_layout_version(self):
        """Gets the management_ip_address_layout_version of this NetworkConfig.

        Output only. The IP address layout version of the management IP address range. Possible versions include: * `managementIpAddressLayoutVersion=1`: Indicates the legacy IP address layout used by some existing private clouds. This is no longer supported for new private clouds as it does not support all features. * `managementIpAddressLayoutVersion=2`: Indicates the latest IP address layout used by all newly created private clouds. This version supports all current features.

        :return: The management_ip_address_layout_version of this NetworkConfig.
        :rtype: int
        """
        return self._management_ip_address_layout_version

    @management_ip_address_layout_version.setter
    def management_ip_address_layout_version(self, management_ip_address_layout_version):
        """Sets the management_ip_address_layout_version of this NetworkConfig.

        Output only. The IP address layout version of the management IP address range. Possible versions include: * `managementIpAddressLayoutVersion=1`: Indicates the legacy IP address layout used by some existing private clouds. This is no longer supported for new private clouds as it does not support all features. * `managementIpAddressLayoutVersion=2`: Indicates the latest IP address layout used by all newly created private clouds. This version supports all current features.

        :param management_ip_address_layout_version: The management_ip_address_layout_version of this NetworkConfig.
        :type management_ip_address_layout_version: int
        """

        self._management_ip_address_layout_version = management_ip_address_layout_version

    @property
    def vmware_engine_network(self):
        """Gets the vmware_engine_network of this NetworkConfig.

        Optional. The relative resource name of the VMware Engine network attached to the private cloud. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.

        :return: The vmware_engine_network of this NetworkConfig.
        :rtype: str
        """
        return self._vmware_engine_network

    @vmware_engine_network.setter
    def vmware_engine_network(self, vmware_engine_network):
        """Sets the vmware_engine_network of this NetworkConfig.

        Optional. The relative resource name of the VMware Engine network attached to the private cloud. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.

        :param vmware_engine_network: The vmware_engine_network of this NetworkConfig.
        :type vmware_engine_network: str
        """

        self._vmware_engine_network = vmware_engine_network

    @property
    def vmware_engine_network_canonical(self):
        """Gets the vmware_engine_network_canonical of this NetworkConfig.

        Output only. The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`

        :return: The vmware_engine_network_canonical of this NetworkConfig.
        :rtype: str
        """
        return self._vmware_engine_network_canonical

    @vmware_engine_network_canonical.setter
    def vmware_engine_network_canonical(self, vmware_engine_network_canonical):
        """Sets the vmware_engine_network_canonical of this NetworkConfig.

        Output only. The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`

        :param vmware_engine_network_canonical: The vmware_engine_network_canonical of this NetworkConfig.
        :type vmware_engine_network_canonical: str
        """

        self._vmware_engine_network_canonical = vmware_engine_network_canonical
