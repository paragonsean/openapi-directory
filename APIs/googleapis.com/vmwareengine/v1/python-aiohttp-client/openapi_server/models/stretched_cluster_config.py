# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StretchedClusterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, preferred_location: str=None, secondary_location: str=None):
        """StretchedClusterConfig - a model defined in OpenAPI

        :param preferred_location: The preferred_location of this StretchedClusterConfig.
        :param secondary_location: The secondary_location of this StretchedClusterConfig.
        """
        self.openapi_types = {
            'preferred_location': str,
            'secondary_location': str
        }

        self.attribute_map = {
            'preferred_location': 'preferredLocation',
            'secondary_location': 'secondaryLocation'
        }

        self._preferred_location = preferred_location
        self._secondary_location = secondary_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StretchedClusterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StretchedClusterConfig of this StretchedClusterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preferred_location(self):
        """Gets the preferred_location of this StretchedClusterConfig.

        Required. Zone that will remain operational when connection between the two zones is lost. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-a` where `{project}` can either be a project number or a project ID.

        :return: The preferred_location of this StretchedClusterConfig.
        :rtype: str
        """
        return self._preferred_location

    @preferred_location.setter
    def preferred_location(self, preferred_location):
        """Sets the preferred_location of this StretchedClusterConfig.

        Required. Zone that will remain operational when connection between the two zones is lost. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-a` where `{project}` can either be a project number or a project ID.

        :param preferred_location: The preferred_location of this StretchedClusterConfig.
        :type preferred_location: str
        """

        self._preferred_location = preferred_location

    @property
    def secondary_location(self):
        """Gets the secondary_location of this StretchedClusterConfig.

        Required. Additional zone for a higher level of availability and load balancing. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-b` where `{project}` can either be a project number or a project ID.

        :return: The secondary_location of this StretchedClusterConfig.
        :rtype: str
        """
        return self._secondary_location

    @secondary_location.setter
    def secondary_location(self, secondary_location):
        """Sets the secondary_location of this StretchedClusterConfig.

        Required. Additional zone for a higher level of availability and load balancing. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-b` where `{project}` can either be a project number or a project ID.

        :param secondary_location: The secondary_location of this StretchedClusterConfig.
        :type secondary_location: str
        """

        self._secondary_location = secondary_location
