# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_type_config import NodeTypeConfig
from openapi_server.models.stretched_cluster_config import StretchedClusterConfig
from openapi_server import util


class ManagementCluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_id: str=None, node_type_configs: Dict[str, NodeTypeConfig]=None, stretched_cluster_config: StretchedClusterConfig=None):
        """ManagementCluster - a model defined in OpenAPI

        :param cluster_id: The cluster_id of this ManagementCluster.
        :param node_type_configs: The node_type_configs of this ManagementCluster.
        :param stretched_cluster_config: The stretched_cluster_config of this ManagementCluster.
        """
        self.openapi_types = {
            'cluster_id': str,
            'node_type_configs': Dict[str, NodeTypeConfig],
            'stretched_cluster_config': StretchedClusterConfig
        }

        self.attribute_map = {
            'cluster_id': 'clusterId',
            'node_type_configs': 'nodeTypeConfigs',
            'stretched_cluster_config': 'stretchedClusterConfig'
        }

        self._cluster_id = cluster_id
        self._node_type_configs = node_type_configs
        self._stretched_cluster_config = stretched_cluster_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagementCluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagementCluster of this ManagementCluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ManagementCluster.

        Required. The user-provided identifier of the new `Cluster`. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)

        :return: The cluster_id of this ManagementCluster.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ManagementCluster.

        Required. The user-provided identifier of the new `Cluster`. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)

        :param cluster_id: The cluster_id of this ManagementCluster.
        :type cluster_id: str
        """

        self._cluster_id = cluster_id

    @property
    def node_type_configs(self):
        """Gets the node_type_configs of this ManagementCluster.

        Required. The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the `NodeType`).

        :return: The node_type_configs of this ManagementCluster.
        :rtype: Dict[str, NodeTypeConfig]
        """
        return self._node_type_configs

    @node_type_configs.setter
    def node_type_configs(self, node_type_configs):
        """Sets the node_type_configs of this ManagementCluster.

        Required. The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the `NodeType`).

        :param node_type_configs: The node_type_configs of this ManagementCluster.
        :type node_type_configs: Dict[str, NodeTypeConfig]
        """

        self._node_type_configs = node_type_configs

    @property
    def stretched_cluster_config(self):
        """Gets the stretched_cluster_config of this ManagementCluster.


        :return: The stretched_cluster_config of this ManagementCluster.
        :rtype: StretchedClusterConfig
        """
        return self._stretched_cluster_config

    @stretched_cluster_config.setter
    def stretched_cluster_config(self, stretched_cluster_config):
        """Sets the stretched_cluster_config of this ManagementCluster.


        :param stretched_cluster_config: The stretched_cluster_config of this ManagementCluster.
        :type stretched_cluster_config: StretchedClusterConfig
        """

        self._stretched_cluster_config = stretched_cluster_config
