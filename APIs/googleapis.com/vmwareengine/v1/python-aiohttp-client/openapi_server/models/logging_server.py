# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoggingServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, hostname: str=None, name: str=None, port: int=None, protocol: str=None, source_type: str=None, uid: str=None, update_time: str=None):
        """LoggingServer - a model defined in OpenAPI

        :param create_time: The create_time of this LoggingServer.
        :param hostname: The hostname of this LoggingServer.
        :param name: The name of this LoggingServer.
        :param port: The port of this LoggingServer.
        :param protocol: The protocol of this LoggingServer.
        :param source_type: The source_type of this LoggingServer.
        :param uid: The uid of this LoggingServer.
        :param update_time: The update_time of this LoggingServer.
        """
        self.openapi_types = {
            'create_time': str,
            'hostname': str,
            'name': str,
            'port': int,
            'protocol': str,
            'source_type': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'hostname': 'hostname',
            'name': 'name',
            'port': 'port',
            'protocol': 'protocol',
            'source_type': 'sourceType',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._hostname = hostname
        self._name = name
        self._port = port
        self._protocol = protocol
        self._source_type = source_type
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoggingServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoggingServer of this LoggingServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this LoggingServer.

        Output only. Creation time of this resource.

        :return: The create_time of this LoggingServer.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this LoggingServer.

        Output only. Creation time of this resource.

        :param create_time: The create_time of this LoggingServer.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def hostname(self):
        """Gets the hostname of this LoggingServer.

        Required. Fully-qualified domain name (FQDN) or IP Address of the logging server.

        :return: The hostname of this LoggingServer.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this LoggingServer.

        Required. Fully-qualified domain name (FQDN) or IP Address of the logging server.

        :param hostname: The hostname of this LoggingServer.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def name(self):
        """Gets the name of this LoggingServer.

        Output only. The resource name of this logging server. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/loggingServers/my-logging-server`

        :return: The name of this LoggingServer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoggingServer.

        Output only. The resource name of this logging server. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/loggingServers/my-logging-server`

        :param name: The name of this LoggingServer.
        :type name: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this LoggingServer.

        Required. Port number at which the logging server receives logs.

        :return: The port of this LoggingServer.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this LoggingServer.

        Required. Port number at which the logging server receives logs.

        :param port: The port of this LoggingServer.
        :type port: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this LoggingServer.

        Required. Protocol used by vCenter to send logs to a logging server.

        :return: The protocol of this LoggingServer.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this LoggingServer.

        Required. Protocol used by vCenter to send logs to a logging server.

        :param protocol: The protocol of this LoggingServer.
        :type protocol: str
        """
        allowed_values = ["PROTOCOL_UNSPECIFIED", "UDP", "TCP"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def source_type(self):
        """Gets the source_type of this LoggingServer.

        Required. The type of component that produces logs that will be forwarded to this logging server.

        :return: The source_type of this LoggingServer.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this LoggingServer.

        Required. The type of component that produces logs that will be forwarded to this logging server.

        :param source_type: The source_type of this LoggingServer.
        :type source_type: str
        """
        allowed_values = ["SOURCE_TYPE_UNSPECIFIED", "ESXI", "VCSA"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def uid(self):
        """Gets the uid of this LoggingServer.

        Output only. System-generated unique identifier for the resource.

        :return: The uid of this LoggingServer.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this LoggingServer.

        Output only. System-generated unique identifier for the resource.

        :param uid: The uid of this LoggingServer.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this LoggingServer.

        Output only. Last update time of this resource.

        :return: The update_time of this LoggingServer.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this LoggingServer.

        Output only. Last update time of this resource.

        :param update_time: The update_time of this LoggingServer.
        :type update_time: str
        """

        self._update_time = update_time
