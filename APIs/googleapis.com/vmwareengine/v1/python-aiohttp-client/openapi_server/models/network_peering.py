# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkPeering(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, exchange_subnet_routes: bool=None, export_custom_routes: bool=None, export_custom_routes_with_public_ip: bool=None, import_custom_routes: bool=None, import_custom_routes_with_public_ip: bool=None, name: str=None, peer_mtu: int=None, peer_network: str=None, peer_network_type: str=None, state: str=None, state_details: str=None, uid: str=None, update_time: str=None, vmware_engine_network: str=None):
        """NetworkPeering - a model defined in OpenAPI

        :param create_time: The create_time of this NetworkPeering.
        :param description: The description of this NetworkPeering.
        :param exchange_subnet_routes: The exchange_subnet_routes of this NetworkPeering.
        :param export_custom_routes: The export_custom_routes of this NetworkPeering.
        :param export_custom_routes_with_public_ip: The export_custom_routes_with_public_ip of this NetworkPeering.
        :param import_custom_routes: The import_custom_routes of this NetworkPeering.
        :param import_custom_routes_with_public_ip: The import_custom_routes_with_public_ip of this NetworkPeering.
        :param name: The name of this NetworkPeering.
        :param peer_mtu: The peer_mtu of this NetworkPeering.
        :param peer_network: The peer_network of this NetworkPeering.
        :param peer_network_type: The peer_network_type of this NetworkPeering.
        :param state: The state of this NetworkPeering.
        :param state_details: The state_details of this NetworkPeering.
        :param uid: The uid of this NetworkPeering.
        :param update_time: The update_time of this NetworkPeering.
        :param vmware_engine_network: The vmware_engine_network of this NetworkPeering.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'exchange_subnet_routes': bool,
            'export_custom_routes': bool,
            'export_custom_routes_with_public_ip': bool,
            'import_custom_routes': bool,
            'import_custom_routes_with_public_ip': bool,
            'name': str,
            'peer_mtu': int,
            'peer_network': str,
            'peer_network_type': str,
            'state': str,
            'state_details': str,
            'uid': str,
            'update_time': str,
            'vmware_engine_network': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'exchange_subnet_routes': 'exchangeSubnetRoutes',
            'export_custom_routes': 'exportCustomRoutes',
            'export_custom_routes_with_public_ip': 'exportCustomRoutesWithPublicIp',
            'import_custom_routes': 'importCustomRoutes',
            'import_custom_routes_with_public_ip': 'importCustomRoutesWithPublicIp',
            'name': 'name',
            'peer_mtu': 'peerMtu',
            'peer_network': 'peerNetwork',
            'peer_network_type': 'peerNetworkType',
            'state': 'state',
            'state_details': 'stateDetails',
            'uid': 'uid',
            'update_time': 'updateTime',
            'vmware_engine_network': 'vmwareEngineNetwork'
        }

        self._create_time = create_time
        self._description = description
        self._exchange_subnet_routes = exchange_subnet_routes
        self._export_custom_routes = export_custom_routes
        self._export_custom_routes_with_public_ip = export_custom_routes_with_public_ip
        self._import_custom_routes = import_custom_routes
        self._import_custom_routes_with_public_ip = import_custom_routes_with_public_ip
        self._name = name
        self._peer_mtu = peer_mtu
        self._peer_network = peer_network
        self._peer_network_type = peer_network_type
        self._state = state
        self._state_details = state_details
        self._uid = uid
        self._update_time = update_time
        self._vmware_engine_network = vmware_engine_network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkPeering':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkPeering of this NetworkPeering.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this NetworkPeering.

        Output only. Creation time of this resource.

        :return: The create_time of this NetworkPeering.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this NetworkPeering.

        Output only. Creation time of this resource.

        :param create_time: The create_time of this NetworkPeering.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this NetworkPeering.

        Optional. User-provided description for this network peering.

        :return: The description of this NetworkPeering.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NetworkPeering.

        Optional. User-provided description for this network peering.

        :param description: The description of this NetworkPeering.
        :type description: str
        """

        self._description = description

    @property
    def exchange_subnet_routes(self):
        """Gets the exchange_subnet_routes of this NetworkPeering.

        Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.

        :return: The exchange_subnet_routes of this NetworkPeering.
        :rtype: bool
        """
        return self._exchange_subnet_routes

    @exchange_subnet_routes.setter
    def exchange_subnet_routes(self, exchange_subnet_routes):
        """Sets the exchange_subnet_routes of this NetworkPeering.

        Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.

        :param exchange_subnet_routes: The exchange_subnet_routes of this NetworkPeering.
        :type exchange_subnet_routes: bool
        """

        self._exchange_subnet_routes = exchange_subnet_routes

    @property
    def export_custom_routes(self):
        """Gets the export_custom_routes of this NetworkPeering.

        Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.

        :return: The export_custom_routes of this NetworkPeering.
        :rtype: bool
        """
        return self._export_custom_routes

    @export_custom_routes.setter
    def export_custom_routes(self, export_custom_routes):
        """Sets the export_custom_routes of this NetworkPeering.

        Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.

        :param export_custom_routes: The export_custom_routes of this NetworkPeering.
        :type export_custom_routes: bool
        """

        self._export_custom_routes = export_custom_routes

    @property
    def export_custom_routes_with_public_ip(self):
        """Gets the export_custom_routes_with_public_ip of this NetworkPeering.

        Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.

        :return: The export_custom_routes_with_public_ip of this NetworkPeering.
        :rtype: bool
        """
        return self._export_custom_routes_with_public_ip

    @export_custom_routes_with_public_ip.setter
    def export_custom_routes_with_public_ip(self, export_custom_routes_with_public_ip):
        """Sets the export_custom_routes_with_public_ip of this NetworkPeering.

        Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.

        :param export_custom_routes_with_public_ip: The export_custom_routes_with_public_ip of this NetworkPeering.
        :type export_custom_routes_with_public_ip: bool
        """

        self._export_custom_routes_with_public_ip = export_custom_routes_with_public_ip

    @property
    def import_custom_routes(self):
        """Gets the import_custom_routes of this NetworkPeering.

        Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.

        :return: The import_custom_routes of this NetworkPeering.
        :rtype: bool
        """
        return self._import_custom_routes

    @import_custom_routes.setter
    def import_custom_routes(self, import_custom_routes):
        """Sets the import_custom_routes of this NetworkPeering.

        Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.

        :param import_custom_routes: The import_custom_routes of this NetworkPeering.
        :type import_custom_routes: bool
        """

        self._import_custom_routes = import_custom_routes

    @property
    def import_custom_routes_with_public_ip(self):
        """Gets the import_custom_routes_with_public_ip of this NetworkPeering.

        Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.

        :return: The import_custom_routes_with_public_ip of this NetworkPeering.
        :rtype: bool
        """
        return self._import_custom_routes_with_public_ip

    @import_custom_routes_with_public_ip.setter
    def import_custom_routes_with_public_ip(self, import_custom_routes_with_public_ip):
        """Sets the import_custom_routes_with_public_ip of this NetworkPeering.

        Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.

        :param import_custom_routes_with_public_ip: The import_custom_routes_with_public_ip of this NetworkPeering.
        :type import_custom_routes_with_public_ip: bool
        """

        self._import_custom_routes_with_public_ip = import_custom_routes_with_public_ip

    @property
    def name(self):
        """Gets the name of this NetworkPeering.

        Output only. The resource name of the network peering. NetworkPeering is a global resource and location can only be global. Resource names are scheme-less URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/networkPeerings/my-peering`

        :return: The name of this NetworkPeering.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkPeering.

        Output only. The resource name of the network peering. NetworkPeering is a global resource and location can only be global. Resource names are scheme-less URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/networkPeerings/my-peering`

        :param name: The name of this NetworkPeering.
        :type name: str
        """

        self._name = name

    @property
    def peer_mtu(self):
        """Gets the peer_mtu of this NetworkPeering.

        Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.

        :return: The peer_mtu of this NetworkPeering.
        :rtype: int
        """
        return self._peer_mtu

    @peer_mtu.setter
    def peer_mtu(self, peer_mtu):
        """Sets the peer_mtu of this NetworkPeering.

        Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.

        :param peer_mtu: The peer_mtu of this NetworkPeering.
        :type peer_mtu: int
        """

        self._peer_mtu = peer_mtu

    @property
    def peer_network(self):
        """Gets the peer_network of this NetworkPeering.

        Required. The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.

        :return: The peer_network of this NetworkPeering.
        :rtype: str
        """
        return self._peer_network

    @peer_network.setter
    def peer_network(self, peer_network):
        """Sets the peer_network of this NetworkPeering.

        Required. The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.

        :param peer_network: The peer_network of this NetworkPeering.
        :type peer_network: str
        """

        self._peer_network = peer_network

    @property
    def peer_network_type(self):
        """Gets the peer_network_type of this NetworkPeering.

        Required. The type of the network to peer with the VMware Engine network.

        :return: The peer_network_type of this NetworkPeering.
        :rtype: str
        """
        return self._peer_network_type

    @peer_network_type.setter
    def peer_network_type(self, peer_network_type):
        """Sets the peer_network_type of this NetworkPeering.

        Required. The type of the network to peer with the VMware Engine network.

        :param peer_network_type: The peer_network_type of this NetworkPeering.
        :type peer_network_type: str
        """
        allowed_values = ["PEER_NETWORK_TYPE_UNSPECIFIED", "STANDARD", "VMWARE_ENGINE_NETWORK", "PRIVATE_SERVICES_ACCESS", "NETAPP_CLOUD_VOLUMES", "THIRD_PARTY_SERVICE", "DELL_POWERSCALE"]  # noqa: E501
        if peer_network_type not in allowed_values:
            raise ValueError(
                "Invalid value for `peer_network_type` ({0}), must be one of {1}"
                .format(peer_network_type, allowed_values)
            )

        self._peer_network_type = peer_network_type

    @property
    def state(self):
        """Gets the state of this NetworkPeering.

        Output only. State of the network peering. This field has a value of 'ACTIVE' when there's a matching configuration in the peer network. New values may be added to this enum when appropriate.

        :return: The state of this NetworkPeering.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NetworkPeering.

        Output only. State of the network peering. This field has a value of 'ACTIVE' when there's a matching configuration in the peer network. New values may be added to this enum when appropriate.

        :param state: The state of this NetworkPeering.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "INACTIVE", "ACTIVE", "CREATING", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_details(self):
        """Gets the state_details of this NetworkPeering.

        Output only. Output Only. Details about the current state of the network peering.

        :return: The state_details of this NetworkPeering.
        :rtype: str
        """
        return self._state_details

    @state_details.setter
    def state_details(self, state_details):
        """Sets the state_details of this NetworkPeering.

        Output only. Output Only. Details about the current state of the network peering.

        :param state_details: The state_details of this NetworkPeering.
        :type state_details: str
        """

        self._state_details = state_details

    @property
    def uid(self):
        """Gets the uid of this NetworkPeering.

        Output only. System-generated unique identifier for the resource.

        :return: The uid of this NetworkPeering.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this NetworkPeering.

        Output only. System-generated unique identifier for the resource.

        :param uid: The uid of this NetworkPeering.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this NetworkPeering.

        Output only. Last update time of this resource.

        :return: The update_time of this NetworkPeering.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this NetworkPeering.

        Output only. Last update time of this resource.

        :param update_time: The update_time of this NetworkPeering.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def vmware_engine_network(self):
        """Gets the vmware_engine_network of this NetworkPeering.

        Required. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.

        :return: The vmware_engine_network of this NetworkPeering.
        :rtype: str
        """
        return self._vmware_engine_network

    @vmware_engine_network.setter
    def vmware_engine_network(self, vmware_engine_network):
        """Sets the vmware_engine_network of this NetworkPeering.

        Required. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.

        :param vmware_engine_network: The vmware_engine_network of this NetworkPeering.
        :type vmware_engine_network: str
        """

        self._vmware_engine_network = vmware_engine_network
