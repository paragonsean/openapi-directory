# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, name: str=None, peering_id: str=None, peering_state: str=None, routing_mode: str=None, service_network: str=None, state: str=None, type: str=None, uid: str=None, update_time: str=None, vmware_engine_network: str=None, vmware_engine_network_canonical: str=None):
        """PrivateConnection - a model defined in OpenAPI

        :param create_time: The create_time of this PrivateConnection.
        :param description: The description of this PrivateConnection.
        :param name: The name of this PrivateConnection.
        :param peering_id: The peering_id of this PrivateConnection.
        :param peering_state: The peering_state of this PrivateConnection.
        :param routing_mode: The routing_mode of this PrivateConnection.
        :param service_network: The service_network of this PrivateConnection.
        :param state: The state of this PrivateConnection.
        :param type: The type of this PrivateConnection.
        :param uid: The uid of this PrivateConnection.
        :param update_time: The update_time of this PrivateConnection.
        :param vmware_engine_network: The vmware_engine_network of this PrivateConnection.
        :param vmware_engine_network_canonical: The vmware_engine_network_canonical of this PrivateConnection.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'name': str,
            'peering_id': str,
            'peering_state': str,
            'routing_mode': str,
            'service_network': str,
            'state': str,
            'type': str,
            'uid': str,
            'update_time': str,
            'vmware_engine_network': str,
            'vmware_engine_network_canonical': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'name': 'name',
            'peering_id': 'peeringId',
            'peering_state': 'peeringState',
            'routing_mode': 'routingMode',
            'service_network': 'serviceNetwork',
            'state': 'state',
            'type': 'type',
            'uid': 'uid',
            'update_time': 'updateTime',
            'vmware_engine_network': 'vmwareEngineNetwork',
            'vmware_engine_network_canonical': 'vmwareEngineNetworkCanonical'
        }

        self._create_time = create_time
        self._description = description
        self._name = name
        self._peering_id = peering_id
        self._peering_state = peering_state
        self._routing_mode = routing_mode
        self._service_network = service_network
        self._state = state
        self._type = type
        self._uid = uid
        self._update_time = update_time
        self._vmware_engine_network = vmware_engine_network
        self._vmware_engine_network_canonical = vmware_engine_network_canonical

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateConnection of this PrivateConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this PrivateConnection.

        Output only. Creation time of this resource.

        :return: The create_time of this PrivateConnection.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this PrivateConnection.

        Output only. Creation time of this resource.

        :param create_time: The create_time of this PrivateConnection.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this PrivateConnection.

        Optional. User-provided description for this private connection.

        :return: The description of this PrivateConnection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PrivateConnection.

        Optional. User-provided description for this private connection.

        :param description: The description of this PrivateConnection.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this PrivateConnection.

        Output only. The resource name of the private connection. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateConnections/my-connection`

        :return: The name of this PrivateConnection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrivateConnection.

        Output only. The resource name of the private connection. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateConnections/my-connection`

        :param name: The name of this PrivateConnection.
        :type name: str
        """

        self._name = name

    @property
    def peering_id(self):
        """Gets the peering_id of this PrivateConnection.

        Output only. VPC network peering id between given network VPC and VMwareEngineNetwork.

        :return: The peering_id of this PrivateConnection.
        :rtype: str
        """
        return self._peering_id

    @peering_id.setter
    def peering_id(self, peering_id):
        """Sets the peering_id of this PrivateConnection.

        Output only. VPC network peering id between given network VPC and VMwareEngineNetwork.

        :param peering_id: The peering_id of this PrivateConnection.
        :type peering_id: str
        """

        self._peering_id = peering_id

    @property
    def peering_state(self):
        """Gets the peering_state of this PrivateConnection.

        Output only. Peering state between service network and VMware Engine network.

        :return: The peering_state of this PrivateConnection.
        :rtype: str
        """
        return self._peering_state

    @peering_state.setter
    def peering_state(self, peering_state):
        """Sets the peering_state of this PrivateConnection.

        Output only. Peering state between service network and VMware Engine network.

        :param peering_state: The peering_state of this PrivateConnection.
        :type peering_state: str
        """
        allowed_values = ["PEERING_STATE_UNSPECIFIED", "PEERING_ACTIVE", "PEERING_INACTIVE"]  # noqa: E501
        if peering_state not in allowed_values:
            raise ValueError(
                "Invalid value for `peering_state` ({0}), must be one of {1}"
                .format(peering_state, allowed_values)
            )

        self._peering_state = peering_state

    @property
    def routing_mode(self):
        """Gets the routing_mode of this PrivateConnection.

        Optional. Routing Mode. Default value is set to GLOBAL. For type = PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for other types only GLOBAL is supported.

        :return: The routing_mode of this PrivateConnection.
        :rtype: str
        """
        return self._routing_mode

    @routing_mode.setter
    def routing_mode(self, routing_mode):
        """Sets the routing_mode of this PrivateConnection.

        Optional. Routing Mode. Default value is set to GLOBAL. For type = PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for other types only GLOBAL is supported.

        :param routing_mode: The routing_mode of this PrivateConnection.
        :type routing_mode: str
        """
        allowed_values = ["ROUTING_MODE_UNSPECIFIED", "GLOBAL", "REGIONAL"]  # noqa: E501
        if routing_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `routing_mode` ({0}), must be one of {1}"
                .format(routing_mode, allowed_values)
            )

        self._routing_mode = routing_mode

    @property
    def service_network(self):
        """Gets the service_network of this PrivateConnection.

        Required. Service network to create private connection. Specify the name in the following form: `projects/{project}/global/networks/{network_id}` For type = PRIVATE_SERVICE_ACCESS, this field represents servicenetworking VPC, e.g. projects/project-tp/global/networks/servicenetworking. For type = NETAPP_CLOUD_VOLUME, this field represents NetApp service VPC, e.g. projects/project-tp/global/networks/netapp-tenant-vpc. For type = DELL_POWERSCALE, this field represent Dell service VPC, e.g. projects/project-tp/global/networks/dell-tenant-vpc. For type= THIRD_PARTY_SERVICE, this field could represent a consumer VPC or any other producer VPC to which the VMware Engine Network needs to be connected, e.g. projects/project/global/networks/vpc.

        :return: The service_network of this PrivateConnection.
        :rtype: str
        """
        return self._service_network

    @service_network.setter
    def service_network(self, service_network):
        """Sets the service_network of this PrivateConnection.

        Required. Service network to create private connection. Specify the name in the following form: `projects/{project}/global/networks/{network_id}` For type = PRIVATE_SERVICE_ACCESS, this field represents servicenetworking VPC, e.g. projects/project-tp/global/networks/servicenetworking. For type = NETAPP_CLOUD_VOLUME, this field represents NetApp service VPC, e.g. projects/project-tp/global/networks/netapp-tenant-vpc. For type = DELL_POWERSCALE, this field represent Dell service VPC, e.g. projects/project-tp/global/networks/dell-tenant-vpc. For type= THIRD_PARTY_SERVICE, this field could represent a consumer VPC or any other producer VPC to which the VMware Engine Network needs to be connected, e.g. projects/project/global/networks/vpc.

        :param service_network: The service_network of this PrivateConnection.
        :type service_network: str
        """

        self._service_network = service_network

    @property
    def state(self):
        """Gets the state of this PrivateConnection.

        Output only. State of the private connection.

        :return: The state of this PrivateConnection.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PrivateConnection.

        Output only. State of the private connection.

        :param state: The state of this PrivateConnection.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "UPDATING", "DELETING", "UNPROVISIONED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this PrivateConnection.

        Required. Private connection type.

        :return: The type of this PrivateConnection.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PrivateConnection.

        Required. Private connection type.

        :param type: The type of this PrivateConnection.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "PRIVATE_SERVICE_ACCESS", "NETAPP_CLOUD_VOLUMES", "DELL_POWERSCALE", "THIRD_PARTY_SERVICE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this PrivateConnection.

        Output only. System-generated unique identifier for the resource.

        :return: The uid of this PrivateConnection.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this PrivateConnection.

        Output only. System-generated unique identifier for the resource.

        :param uid: The uid of this PrivateConnection.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this PrivateConnection.

        Output only. Last update time of this resource.

        :return: The update_time of this PrivateConnection.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this PrivateConnection.

        Output only. Last update time of this resource.

        :param update_time: The update_time of this PrivateConnection.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def vmware_engine_network(self):
        """Gets the vmware_engine_network of this PrivateConnection.

        Required. The relative resource name of Legacy VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}`, `{location}` will be same as specified in private connection resource name and `{vmware_engine_network_id}` will be in the form of `{location}`-default e.g. projects/project/locations/us-central1/vmwareEngineNetworks/us-central1-default.

        :return: The vmware_engine_network of this PrivateConnection.
        :rtype: str
        """
        return self._vmware_engine_network

    @vmware_engine_network.setter
    def vmware_engine_network(self, vmware_engine_network):
        """Sets the vmware_engine_network of this PrivateConnection.

        Required. The relative resource name of Legacy VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}`, `{location}` will be same as specified in private connection resource name and `{vmware_engine_network_id}` will be in the form of `{location}`-default e.g. projects/project/locations/us-central1/vmwareEngineNetworks/us-central1-default.

        :param vmware_engine_network: The vmware_engine_network of this PrivateConnection.
        :type vmware_engine_network: str
        """

        self._vmware_engine_network = vmware_engine_network

    @property
    def vmware_engine_network_canonical(self):
        """Gets the vmware_engine_network_canonical of this PrivateConnection.

        Output only. The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`

        :return: The vmware_engine_network_canonical of this PrivateConnection.
        :rtype: str
        """
        return self._vmware_engine_network_canonical

    @vmware_engine_network_canonical.setter
    def vmware_engine_network_canonical(self, vmware_engine_network_canonical):
        """Sets the vmware_engine_network_canonical of this PrivateConnection.

        Output only. The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`

        :param vmware_engine_network_canonical: The vmware_engine_network_canonical of this PrivateConnection.
        :type vmware_engine_network_canonical: str
        """

        self._vmware_engine_network_canonical = vmware_engine_network_canonical
