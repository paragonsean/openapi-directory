# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hcx import Hcx
from openapi_server.models.management_cluster import ManagementCluster
from openapi_server.models.network_config import NetworkConfig
from openapi_server.models.nsx import Nsx
from openapi_server.models.vcenter import Vcenter
from openapi_server import util


class PrivateCloud(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, delete_time: str=None, description: str=None, expire_time: str=None, hcx: Hcx=None, management_cluster: ManagementCluster=None, name: str=None, network_config: NetworkConfig=None, nsx: Nsx=None, state: str=None, type: str=None, uid: str=None, update_time: str=None, vcenter: Vcenter=None):
        """PrivateCloud - a model defined in OpenAPI

        :param create_time: The create_time of this PrivateCloud.
        :param delete_time: The delete_time of this PrivateCloud.
        :param description: The description of this PrivateCloud.
        :param expire_time: The expire_time of this PrivateCloud.
        :param hcx: The hcx of this PrivateCloud.
        :param management_cluster: The management_cluster of this PrivateCloud.
        :param name: The name of this PrivateCloud.
        :param network_config: The network_config of this PrivateCloud.
        :param nsx: The nsx of this PrivateCloud.
        :param state: The state of this PrivateCloud.
        :param type: The type of this PrivateCloud.
        :param uid: The uid of this PrivateCloud.
        :param update_time: The update_time of this PrivateCloud.
        :param vcenter: The vcenter of this PrivateCloud.
        """
        self.openapi_types = {
            'create_time': str,
            'delete_time': str,
            'description': str,
            'expire_time': str,
            'hcx': Hcx,
            'management_cluster': ManagementCluster,
            'name': str,
            'network_config': NetworkConfig,
            'nsx': Nsx,
            'state': str,
            'type': str,
            'uid': str,
            'update_time': str,
            'vcenter': Vcenter
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'description': 'description',
            'expire_time': 'expireTime',
            'hcx': 'hcx',
            'management_cluster': 'managementCluster',
            'name': 'name',
            'network_config': 'networkConfig',
            'nsx': 'nsx',
            'state': 'state',
            'type': 'type',
            'uid': 'uid',
            'update_time': 'updateTime',
            'vcenter': 'vcenter'
        }

        self._create_time = create_time
        self._delete_time = delete_time
        self._description = description
        self._expire_time = expire_time
        self._hcx = hcx
        self._management_cluster = management_cluster
        self._name = name
        self._network_config = network_config
        self._nsx = nsx
        self._state = state
        self._type = type
        self._uid = uid
        self._update_time = update_time
        self._vcenter = vcenter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateCloud':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateCloud of this PrivateCloud.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this PrivateCloud.

        Output only. Creation time of this resource.

        :return: The create_time of this PrivateCloud.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this PrivateCloud.

        Output only. Creation time of this resource.

        :param create_time: The create_time of this PrivateCloud.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this PrivateCloud.

        Output only. Time when the resource was scheduled for deletion.

        :return: The delete_time of this PrivateCloud.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this PrivateCloud.

        Output only. Time when the resource was scheduled for deletion.

        :param delete_time: The delete_time of this PrivateCloud.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def description(self):
        """Gets the description of this PrivateCloud.

        User-provided description for this private cloud.

        :return: The description of this PrivateCloud.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PrivateCloud.

        User-provided description for this private cloud.

        :param description: The description of this PrivateCloud.
        :type description: str
        """

        self._description = description

    @property
    def expire_time(self):
        """Gets the expire_time of this PrivateCloud.

        Output only. Time when the resource will be irreversibly deleted.

        :return: The expire_time of this PrivateCloud.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this PrivateCloud.

        Output only. Time when the resource will be irreversibly deleted.

        :param expire_time: The expire_time of this PrivateCloud.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def hcx(self):
        """Gets the hcx of this PrivateCloud.


        :return: The hcx of this PrivateCloud.
        :rtype: Hcx
        """
        return self._hcx

    @hcx.setter
    def hcx(self, hcx):
        """Sets the hcx of this PrivateCloud.


        :param hcx: The hcx of this PrivateCloud.
        :type hcx: Hcx
        """

        self._hcx = hcx

    @property
    def management_cluster(self):
        """Gets the management_cluster of this PrivateCloud.


        :return: The management_cluster of this PrivateCloud.
        :rtype: ManagementCluster
        """
        return self._management_cluster

    @management_cluster.setter
    def management_cluster(self, management_cluster):
        """Sets the management_cluster of this PrivateCloud.


        :param management_cluster: The management_cluster of this PrivateCloud.
        :type management_cluster: ManagementCluster
        """

        self._management_cluster = management_cluster

    @property
    def name(self):
        """Gets the name of this PrivateCloud.

        Output only. The resource name of this private cloud. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud`

        :return: The name of this PrivateCloud.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrivateCloud.

        Output only. The resource name of this private cloud. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud`

        :param name: The name of this PrivateCloud.
        :type name: str
        """

        self._name = name

    @property
    def network_config(self):
        """Gets the network_config of this PrivateCloud.


        :return: The network_config of this PrivateCloud.
        :rtype: NetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this PrivateCloud.


        :param network_config: The network_config of this PrivateCloud.
        :type network_config: NetworkConfig
        """

        self._network_config = network_config

    @property
    def nsx(self):
        """Gets the nsx of this PrivateCloud.


        :return: The nsx of this PrivateCloud.
        :rtype: Nsx
        """
        return self._nsx

    @nsx.setter
    def nsx(self, nsx):
        """Sets the nsx of this PrivateCloud.


        :param nsx: The nsx of this PrivateCloud.
        :type nsx: Nsx
        """

        self._nsx = nsx

    @property
    def state(self):
        """Gets the state of this PrivateCloud.

        Output only. State of the resource. New values may be added to this enum when appropriate.

        :return: The state of this PrivateCloud.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PrivateCloud.

        Output only. State of the resource. New values may be added to this enum when appropriate.

        :param state: The state of this PrivateCloud.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "CREATING", "UPDATING", "FAILED", "DELETED", "PURGING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this PrivateCloud.

        Optional. Type of the private cloud. Defaults to STANDARD.

        :return: The type of this PrivateCloud.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PrivateCloud.

        Optional. Type of the private cloud. Defaults to STANDARD.

        :param type: The type of this PrivateCloud.
        :type type: str
        """
        allowed_values = ["STANDARD", "TIME_LIMITED", "STRETCHED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this PrivateCloud.

        Output only. System-generated unique identifier for the resource.

        :return: The uid of this PrivateCloud.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this PrivateCloud.

        Output only. System-generated unique identifier for the resource.

        :param uid: The uid of this PrivateCloud.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this PrivateCloud.

        Output only. Last update time of this resource.

        :return: The update_time of this PrivateCloud.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this PrivateCloud.

        Output only. Last update time of this resource.

        :param update_time: The update_time of this PrivateCloud.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def vcenter(self):
        """Gets the vcenter of this PrivateCloud.


        :return: The vcenter of this PrivateCloud.
        :rtype: Vcenter
        """
        return self._vcenter

    @vcenter.setter
    def vcenter(self, vcenter):
        """Sets the vcenter of this PrivateCloud.


        :param vcenter: The vcenter of this PrivateCloud.
        :type vcenter: Vcenter
        """

        self._vcenter = vcenter
