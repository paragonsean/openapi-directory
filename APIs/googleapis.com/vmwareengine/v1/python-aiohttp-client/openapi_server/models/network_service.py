# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, state: str=None):
        """NetworkService - a model defined in OpenAPI

        :param enabled: The enabled of this NetworkService.
        :param state: The state of this NetworkService.
        """
        self.openapi_types = {
            'enabled': bool,
            'state': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'state': 'state'
        }

        self._enabled = enabled
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkService of this NetworkService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this NetworkService.

        True if the service is enabled; false otherwise.

        :return: The enabled of this NetworkService.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NetworkService.

        True if the service is enabled; false otherwise.

        :param enabled: The enabled of this NetworkService.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def state(self):
        """Gets the state of this NetworkService.

        Output only. State of the service. New values may be added to this enum when appropriate.

        :return: The state of this NetworkService.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NetworkService.

        Output only. State of the service. New values may be added to this enum when appropriate.

        :param state: The state of this NetworkService.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "UNPROVISIONED", "RECONCILING", "ACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
