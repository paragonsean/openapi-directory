# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_custom_core_counts: List[int]=None, capabilities: List[str]=None, disk_size_gb: int=None, display_name: str=None, families: List[str]=None, kind: str=None, memory_gb: int=None, name: str=None, node_type_id: str=None, total_core_count: int=None, virtual_cpu_count: int=None):
        """NodeType - a model defined in OpenAPI

        :param available_custom_core_counts: The available_custom_core_counts of this NodeType.
        :param capabilities: The capabilities of this NodeType.
        :param disk_size_gb: The disk_size_gb of this NodeType.
        :param display_name: The display_name of this NodeType.
        :param families: The families of this NodeType.
        :param kind: The kind of this NodeType.
        :param memory_gb: The memory_gb of this NodeType.
        :param name: The name of this NodeType.
        :param node_type_id: The node_type_id of this NodeType.
        :param total_core_count: The total_core_count of this NodeType.
        :param virtual_cpu_count: The virtual_cpu_count of this NodeType.
        """
        self.openapi_types = {
            'available_custom_core_counts': List[int],
            'capabilities': List[str],
            'disk_size_gb': int,
            'display_name': str,
            'families': List[str],
            'kind': str,
            'memory_gb': int,
            'name': str,
            'node_type_id': str,
            'total_core_count': int,
            'virtual_cpu_count': int
        }

        self.attribute_map = {
            'available_custom_core_counts': 'availableCustomCoreCounts',
            'capabilities': 'capabilities',
            'disk_size_gb': 'diskSizeGb',
            'display_name': 'displayName',
            'families': 'families',
            'kind': 'kind',
            'memory_gb': 'memoryGb',
            'name': 'name',
            'node_type_id': 'nodeTypeId',
            'total_core_count': 'totalCoreCount',
            'virtual_cpu_count': 'virtualCpuCount'
        }

        self._available_custom_core_counts = available_custom_core_counts
        self._capabilities = capabilities
        self._disk_size_gb = disk_size_gb
        self._display_name = display_name
        self._families = families
        self._kind = kind
        self._memory_gb = memory_gb
        self._name = name
        self._node_type_id = node_type_id
        self._total_core_count = total_core_count
        self._virtual_cpu_count = virtual_cpu_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeType of this NodeType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_custom_core_counts(self):
        """Gets the available_custom_core_counts of this NodeType.

        Output only. List of possible values of custom core count.

        :return: The available_custom_core_counts of this NodeType.
        :rtype: List[int]
        """
        return self._available_custom_core_counts

    @available_custom_core_counts.setter
    def available_custom_core_counts(self, available_custom_core_counts):
        """Sets the available_custom_core_counts of this NodeType.

        Output only. List of possible values of custom core count.

        :param available_custom_core_counts: The available_custom_core_counts of this NodeType.
        :type available_custom_core_counts: List[int]
        """

        self._available_custom_core_counts = available_custom_core_counts

    @property
    def capabilities(self):
        """Gets the capabilities of this NodeType.

        Output only. Capabilities of this node type.

        :return: The capabilities of this NodeType.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this NodeType.

        Output only. Capabilities of this node type.

        :param capabilities: The capabilities of this NodeType.
        :type capabilities: List[str]
        """
        allowed_values = ["CAPABILITY_UNSPECIFIED", "STRETCHED_CLUSTERS"]  # noqa: E501
        if not set(capabilities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `capabilities` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(capabilities) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._capabilities = capabilities

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this NodeType.

        Output only. The amount of storage available, defined in GB.

        :return: The disk_size_gb of this NodeType.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this NodeType.

        Output only. The amount of storage available, defined in GB.

        :param disk_size_gb: The disk_size_gb of this NodeType.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def display_name(self):
        """Gets the display_name of this NodeType.

        Output only. The friendly name for this node type. For example: ve1-standard-72

        :return: The display_name of this NodeType.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this NodeType.

        Output only. The friendly name for this node type. For example: ve1-standard-72

        :param display_name: The display_name of this NodeType.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def families(self):
        """Gets the families of this NodeType.

        Output only. Families of the node type. For node types to be in the same cluster they must share at least one element in the `families`.

        :return: The families of this NodeType.
        :rtype: List[str]
        """
        return self._families

    @families.setter
    def families(self, families):
        """Sets the families of this NodeType.

        Output only. Families of the node type. For node types to be in the same cluster they must share at least one element in the `families`.

        :param families: The families of this NodeType.
        :type families: List[str]
        """

        self._families = families

    @property
    def kind(self):
        """Gets the kind of this NodeType.

        Output only. The type of the resource.

        :return: The kind of this NodeType.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this NodeType.

        Output only. The type of the resource.

        :param kind: The kind of this NodeType.
        :type kind: str
        """
        allowed_values = ["KIND_UNSPECIFIED", "STANDARD", "STORAGE_ONLY"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def memory_gb(self):
        """Gets the memory_gb of this NodeType.

        Output only. The amount of physical memory available, defined in GB.

        :return: The memory_gb of this NodeType.
        :rtype: int
        """
        return self._memory_gb

    @memory_gb.setter
    def memory_gb(self, memory_gb):
        """Sets the memory_gb of this NodeType.

        Output only. The amount of physical memory available, defined in GB.

        :param memory_gb: The memory_gb of this NodeType.
        :type memory_gb: int
        """

        self._memory_gb = memory_gb

    @property
    def name(self):
        """Gets the name of this NodeType.

        Output only. The resource name of this node type. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-proj/locations/us-central1-a/nodeTypes/standard-72`

        :return: The name of this NodeType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeType.

        Output only. The resource name of this node type. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-proj/locations/us-central1-a/nodeTypes/standard-72`

        :param name: The name of this NodeType.
        :type name: str
        """

        self._name = name

    @property
    def node_type_id(self):
        """Gets the node_type_id of this NodeType.

        Output only. The canonical identifier of the node type (corresponds to the `NodeType`). For example: standard-72.

        :return: The node_type_id of this NodeType.
        :rtype: str
        """
        return self._node_type_id

    @node_type_id.setter
    def node_type_id(self, node_type_id):
        """Sets the node_type_id of this NodeType.

        Output only. The canonical identifier of the node type (corresponds to the `NodeType`). For example: standard-72.

        :param node_type_id: The node_type_id of this NodeType.
        :type node_type_id: str
        """

        self._node_type_id = node_type_id

    @property
    def total_core_count(self):
        """Gets the total_core_count of this NodeType.

        Output only. The total number of CPU cores in a single node.

        :return: The total_core_count of this NodeType.
        :rtype: int
        """
        return self._total_core_count

    @total_core_count.setter
    def total_core_count(self, total_core_count):
        """Sets the total_core_count of this NodeType.

        Output only. The total number of CPU cores in a single node.

        :param total_core_count: The total_core_count of this NodeType.
        :type total_core_count: int
        """

        self._total_core_count = total_core_count

    @property
    def virtual_cpu_count(self):
        """Gets the virtual_cpu_count of this NodeType.

        Output only. The total number of virtual CPUs in a single node.

        :return: The virtual_cpu_count of this NodeType.
        :rtype: int
        """
        return self._virtual_cpu_count

    @virtual_cpu_count.setter
    def virtual_cpu_count(self, virtual_cpu_count):
        """Sets the virtual_cpu_count of this NodeType.

        Output only. The total number of virtual CPUs in a single node.

        :param virtual_cpu_count: The virtual_cpu_count of this NodeType.
        :type virtual_cpu_count: int
        """

        self._virtual_cpu_count = virtual_cpu_count
