# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subnet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_ip: str=None, ip_cidr_range: str=None, name: str=None, state: str=None, type: str=None, vlan_id: int=None):
        """Subnet - a model defined in OpenAPI

        :param gateway_ip: The gateway_ip of this Subnet.
        :param ip_cidr_range: The ip_cidr_range of this Subnet.
        :param name: The name of this Subnet.
        :param state: The state of this Subnet.
        :param type: The type of this Subnet.
        :param vlan_id: The vlan_id of this Subnet.
        """
        self.openapi_types = {
            'gateway_ip': str,
            'ip_cidr_range': str,
            'name': str,
            'state': str,
            'type': str,
            'vlan_id': int
        }

        self.attribute_map = {
            'gateway_ip': 'gatewayIp',
            'ip_cidr_range': 'ipCidrRange',
            'name': 'name',
            'state': 'state',
            'type': 'type',
            'vlan_id': 'vlanId'
        }

        self._gateway_ip = gateway_ip
        self._ip_cidr_range = ip_cidr_range
        self._name = name
        self._state = state
        self._type = type
        self._vlan_id = vlan_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subnet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subnet of this Subnet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_ip(self):
        """Gets the gateway_ip of this Subnet.

        The IP address of the gateway of this subnet. Must fall within the IP prefix defined above.

        :return: The gateway_ip of this Subnet.
        :rtype: str
        """
        return self._gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip):
        """Sets the gateway_ip of this Subnet.

        The IP address of the gateway of this subnet. Must fall within the IP prefix defined above.

        :param gateway_ip: The gateway_ip of this Subnet.
        :type gateway_ip: str
        """

        self._gateway_ip = gateway_ip

    @property
    def ip_cidr_range(self):
        """Gets the ip_cidr_range of this Subnet.

        The IP address range of the subnet in CIDR format '10.0.0.0/24'.

        :return: The ip_cidr_range of this Subnet.
        :rtype: str
        """
        return self._ip_cidr_range

    @ip_cidr_range.setter
    def ip_cidr_range(self, ip_cidr_range):
        """Sets the ip_cidr_range of this Subnet.

        The IP address range of the subnet in CIDR format '10.0.0.0/24'.

        :param ip_cidr_range: The ip_cidr_range of this Subnet.
        :type ip_cidr_range: str
        """

        self._ip_cidr_range = ip_cidr_range

    @property
    def name(self):
        """Gets the name of this Subnet.

        Output only. The resource name of this subnet. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/subnets/my-subnet`

        :return: The name of this Subnet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subnet.

        Output only. The resource name of this subnet. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/subnets/my-subnet`

        :param name: The name of this Subnet.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Subnet.

        Output only. The state of the resource.

        :return: The state of this Subnet.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Subnet.

        Output only. The state of the resource.

        :param state: The state of this Subnet.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "CREATING", "UPDATING", "DELETING", "RECONCILING", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this Subnet.

        Output only. The type of the subnet. For example \"management\" or \"userDefined\".

        :return: The type of this Subnet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Subnet.

        Output only. The type of the subnet. For example \"management\" or \"userDefined\".

        :param type: The type of this Subnet.
        :type type: str
        """

        self._type = type

    @property
    def vlan_id(self):
        """Gets the vlan_id of this Subnet.

        Output only. VLAN ID of the VLAN on which the subnet is configured

        :return: The vlan_id of this Subnet.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this Subnet.

        Output only. VLAN ID of the VLAN on which the subnet is configured

        :param vlan_id: The vlan_id of this Subnet.
        :type vlan_id: int
        """

        self._vlan_id = vlan_id
