# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeTypeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_core_count: int=None, node_count: int=None):
        """NodeTypeConfig - a model defined in OpenAPI

        :param custom_core_count: The custom_core_count of this NodeTypeConfig.
        :param node_count: The node_count of this NodeTypeConfig.
        """
        self.openapi_types = {
            'custom_core_count': int,
            'node_count': int
        }

        self.attribute_map = {
            'custom_core_count': 'customCoreCount',
            'node_count': 'nodeCount'
        }

        self._custom_core_count = custom_core_count
        self._node_count = node_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeTypeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeTypeConfig of this NodeTypeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_core_count(self):
        """Gets the custom_core_count of this NodeTypeConfig.

        Optional. Customized number of cores available to each node of the type. This number must always be one of `nodeType.availableCustomCoreCounts`. If zero is provided max value from `nodeType.availableCustomCoreCounts` will be used.

        :return: The custom_core_count of this NodeTypeConfig.
        :rtype: int
        """
        return self._custom_core_count

    @custom_core_count.setter
    def custom_core_count(self, custom_core_count):
        """Sets the custom_core_count of this NodeTypeConfig.

        Optional. Customized number of cores available to each node of the type. This number must always be one of `nodeType.availableCustomCoreCounts`. If zero is provided max value from `nodeType.availableCustomCoreCounts` will be used.

        :param custom_core_count: The custom_core_count of this NodeTypeConfig.
        :type custom_core_count: int
        """

        self._custom_core_count = custom_core_count

    @property
    def node_count(self):
        """Gets the node_count of this NodeTypeConfig.

        Required. The number of nodes of this type in the cluster

        :return: The node_count of this NodeTypeConfig.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this NodeTypeConfig.

        Required. The number of nodes of this type in the cluster

        :param node_count: The node_count of this NodeTypeConfig.
        :type node_count: int
        """

        self._node_count = node_count
