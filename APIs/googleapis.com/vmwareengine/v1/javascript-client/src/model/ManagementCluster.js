/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeTypeConfig from './NodeTypeConfig';
import StretchedClusterConfig from './StretchedClusterConfig';

/**
 * The ManagementCluster model module.
 * @module model/ManagementCluster
 * @version v1
 */
class ManagementCluster {
    /**
     * Constructs a new <code>ManagementCluster</code>.
     * Management cluster configuration.
     * @alias module:model/ManagementCluster
     */
    constructor() { 
        
        ManagementCluster.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagementCluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagementCluster} obj Optional instance to populate.
     * @return {module:model/ManagementCluster} The populated <code>ManagementCluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagementCluster();

            if (data.hasOwnProperty('clusterId')) {
                obj['clusterId'] = ApiClient.convertToType(data['clusterId'], 'String');
            }
            if (data.hasOwnProperty('nodeTypeConfigs')) {
                obj['nodeTypeConfigs'] = ApiClient.convertToType(data['nodeTypeConfigs'], {'String': NodeTypeConfig});
            }
            if (data.hasOwnProperty('stretchedClusterConfig')) {
                obj['stretchedClusterConfig'] = StretchedClusterConfig.constructFromObject(data['stretchedClusterConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagementCluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagementCluster</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterId'] && !(typeof data['clusterId'] === 'string' || data['clusterId'] instanceof String)) {
            throw new Error("Expected the field `clusterId` to be a primitive type in the JSON string but got " + data['clusterId']);
        }
        // validate the optional field `stretchedClusterConfig`
        if (data['stretchedClusterConfig']) { // data not null
          StretchedClusterConfig.validateJSON(data['stretchedClusterConfig']);
        }

        return true;
    }


}



/**
 * Required. The user-provided identifier of the new `Cluster`. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
 * @member {String} clusterId
 */
ManagementCluster.prototype['clusterId'] = undefined;

/**
 * Required. The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the `NodeType`).
 * @member {Object.<String, module:model/NodeTypeConfig>} nodeTypeConfigs
 */
ManagementCluster.prototype['nodeTypeConfigs'] = undefined;

/**
 * @member {module:model/StretchedClusterConfig} stretchedClusterConfig
 */
ManagementCluster.prototype['stretchedClusterConfig'] = undefined;






export default ManagementCluster;

