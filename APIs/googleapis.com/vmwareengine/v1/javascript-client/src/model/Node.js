/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Node model module.
 * @module model/Node
 * @version v1
 */
class Node {
    /**
     * Constructs a new <code>Node</code>.
     * Node in a cluster.
     * @alias module:model/Node
     */
    constructor() { 
        
        Node.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Node</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Node} obj Optional instance to populate.
     * @return {module:model/Node} The populated <code>Node</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Node();

            if (data.hasOwnProperty('customCoreCount')) {
                obj['customCoreCount'] = ApiClient.convertToType(data['customCoreCount'], 'String');
            }
            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('internalIp')) {
                obj['internalIp'] = ApiClient.convertToType(data['internalIp'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodeTypeId')) {
                obj['nodeTypeId'] = ApiClient.convertToType(data['nodeTypeId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Node</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Node</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['customCoreCount'] && !(typeof data['customCoreCount'] === 'string' || data['customCoreCount'] instanceof String)) {
            throw new Error("Expected the field `customCoreCount` to be a primitive type in the JSON string but got " + data['customCoreCount']);
        }
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }
        // ensure the json data is a string
        if (data['internalIp'] && !(typeof data['internalIp'] === 'string' || data['internalIp'] instanceof String)) {
            throw new Error("Expected the field `internalIp` to be a primitive type in the JSON string but got " + data['internalIp']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nodeTypeId'] && !(typeof data['nodeTypeId'] === 'string' || data['nodeTypeId'] instanceof String)) {
            throw new Error("Expected the field `nodeTypeId` to be a primitive type in the JSON string but got " + data['nodeTypeId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Output only. Customized number of cores
 * @member {String} customCoreCount
 */
Node.prototype['customCoreCount'] = undefined;

/**
 * Output only. Fully qualified domain name of the node.
 * @member {String} fqdn
 */
Node.prototype['fqdn'] = undefined;

/**
 * Output only. Internal IP address of the node.
 * @member {String} internalIp
 */
Node.prototype['internalIp'] = undefined;

/**
 * Output only. The resource name of this node. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: projects/my-project/locations/us-central1-a/privateClouds/my-cloud/clusters/my-cluster/nodes/my-node
 * @member {String} name
 */
Node.prototype['name'] = undefined;

/**
 * Output only. The canonical identifier of the node type (corresponds to the `NodeType`). For example: standard-72.
 * @member {String} nodeTypeId
 */
Node.prototype['nodeTypeId'] = undefined;

/**
 * Output only. The state of the appliance.
 * @member {module:model/Node.StateEnum} state
 */
Node.prototype['state'] = undefined;

/**
 * Output only. The version number of the VMware ESXi management component in this cluster.
 * @member {String} version
 */
Node.prototype['version'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Node['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "UPGRADING"
     * @const
     */
    "UPGRADING": "UPGRADING"
};



export default Node;

