/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Nsx model module.
 * @module model/Nsx
 * @version v1
 */
class Nsx {
    /**
     * Constructs a new <code>Nsx</code>.
     * Details about a NSX Manager appliance.
     * @alias module:model/Nsx
     */
    constructor() { 
        
        Nsx.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Nsx</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Nsx} obj Optional instance to populate.
     * @return {module:model/Nsx} The populated <code>Nsx</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Nsx();

            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('internalIp')) {
                obj['internalIp'] = ApiClient.convertToType(data['internalIp'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Nsx</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Nsx</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }
        // ensure the json data is a string
        if (data['internalIp'] && !(typeof data['internalIp'] === 'string' || data['internalIp'] instanceof String)) {
            throw new Error("Expected the field `internalIp` to be a primitive type in the JSON string but got " + data['internalIp']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Fully qualified domain name of the appliance.
 * @member {String} fqdn
 */
Nsx.prototype['fqdn'] = undefined;

/**
 * Internal IP address of the appliance.
 * @member {String} internalIp
 */
Nsx.prototype['internalIp'] = undefined;

/**
 * Output only. The state of the appliance.
 * @member {module:model/Nsx.StateEnum} state
 */
Nsx.prototype['state'] = undefined;

/**
 * Version of the appliance.
 * @member {String} version
 */
Nsx.prototype['version'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Nsx['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING"
};



export default Nsx;

