/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Subnet model module.
 * @module model/Subnet
 * @version v1
 */
class Subnet {
    /**
     * Constructs a new <code>Subnet</code>.
     * Subnet in a private cloud. Either &#x60;management&#x60; subnets (such as vMotion) that are read-only, or &#x60;userDefined&#x60;, which can also be updated.
     * @alias module:model/Subnet
     */
    constructor() { 
        
        Subnet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Subnet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subnet} obj Optional instance to populate.
     * @return {module:model/Subnet} The populated <code>Subnet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subnet();

            if (data.hasOwnProperty('gatewayIp')) {
                obj['gatewayIp'] = ApiClient.convertToType(data['gatewayIp'], 'String');
            }
            if (data.hasOwnProperty('ipCidrRange')) {
                obj['ipCidrRange'] = ApiClient.convertToType(data['ipCidrRange'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vlanId')) {
                obj['vlanId'] = ApiClient.convertToType(data['vlanId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subnet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subnet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gatewayIp'] && !(typeof data['gatewayIp'] === 'string' || data['gatewayIp'] instanceof String)) {
            throw new Error("Expected the field `gatewayIp` to be a primitive type in the JSON string but got " + data['gatewayIp']);
        }
        // ensure the json data is a string
        if (data['ipCidrRange'] && !(typeof data['ipCidrRange'] === 'string' || data['ipCidrRange'] instanceof String)) {
            throw new Error("Expected the field `ipCidrRange` to be a primitive type in the JSON string but got " + data['ipCidrRange']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The IP address of the gateway of this subnet. Must fall within the IP prefix defined above.
 * @member {String} gatewayIp
 */
Subnet.prototype['gatewayIp'] = undefined;

/**
 * The IP address range of the subnet in CIDR format '10.0.0.0/24'.
 * @member {String} ipCidrRange
 */
Subnet.prototype['ipCidrRange'] = undefined;

/**
 * Output only. The resource name of this subnet. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/subnets/my-subnet`
 * @member {String} name
 */
Subnet.prototype['name'] = undefined;

/**
 * Output only. The state of the resource.
 * @member {module:model/Subnet.StateEnum} state
 */
Subnet.prototype['state'] = undefined;

/**
 * Output only. The type of the subnet. For example \"management\" or \"userDefined\".
 * @member {String} type
 */
Subnet.prototype['type'] = undefined;

/**
 * Output only. VLAN ID of the VLAN on which the subnet is configured
 * @member {Number} vlanId
 */
Subnet.prototype['vlanId'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Subnet['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "RECONCILING"
     * @const
     */
    "RECONCILING": "RECONCILING",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default Subnet;

