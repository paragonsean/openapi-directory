/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoggingServer model module.
 * @module model/LoggingServer
 * @version v1
 */
class LoggingServer {
    /**
     * Constructs a new <code>LoggingServer</code>.
     * Logging server to receive vCenter or ESXi logs.
     * @alias module:model/LoggingServer
     */
    constructor() { 
        
        LoggingServer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoggingServer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoggingServer} obj Optional instance to populate.
     * @return {module:model/LoggingServer} The populated <code>LoggingServer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoggingServer();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoggingServer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoggingServer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Creation time of this resource.
 * @member {String} createTime
 */
LoggingServer.prototype['createTime'] = undefined;

/**
 * Required. Fully-qualified domain name (FQDN) or IP Address of the logging server.
 * @member {String} hostname
 */
LoggingServer.prototype['hostname'] = undefined;

/**
 * Output only. The resource name of this logging server. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/loggingServers/my-logging-server`
 * @member {String} name
 */
LoggingServer.prototype['name'] = undefined;

/**
 * Required. Port number at which the logging server receives logs.
 * @member {Number} port
 */
LoggingServer.prototype['port'] = undefined;

/**
 * Required. Protocol used by vCenter to send logs to a logging server.
 * @member {module:model/LoggingServer.ProtocolEnum} protocol
 */
LoggingServer.prototype['protocol'] = undefined;

/**
 * Required. The type of component that produces logs that will be forwarded to this logging server.
 * @member {module:model/LoggingServer.SourceTypeEnum} sourceType
 */
LoggingServer.prototype['sourceType'] = undefined;

/**
 * Output only. System-generated unique identifier for the resource.
 * @member {String} uid
 */
LoggingServer.prototype['uid'] = undefined;

/**
 * Output only. Last update time of this resource.
 * @member {String} updateTime
 */
LoggingServer.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
LoggingServer['ProtocolEnum'] = {

    /**
     * value: "PROTOCOL_UNSPECIFIED"
     * @const
     */
    "PROTOCOL_UNSPECIFIED": "PROTOCOL_UNSPECIFIED",

    /**
     * value: "UDP"
     * @const
     */
    "UDP": "UDP",

    /**
     * value: "TCP"
     * @const
     */
    "TCP": "TCP"
};


/**
 * Allowed values for the <code>sourceType</code> property.
 * @enum {String}
 * @readonly
 */
LoggingServer['SourceTypeEnum'] = {

    /**
     * value: "SOURCE_TYPE_UNSPECIFIED"
     * @const
     */
    "SOURCE_TYPE_UNSPECIFIED": "SOURCE_TYPE_UNSPECIFIED",

    /**
     * value: "ESXI"
     * @const
     */
    "ESXI": "ESXI",

    /**
     * value: "VCSA"
     * @const
     */
    "VCSA": "VCSA"
};



export default LoggingServer;

