/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Hcx from './Hcx';
import ManagementCluster from './ManagementCluster';
import NetworkConfig from './NetworkConfig';
import Nsx from './Nsx';
import Vcenter from './Vcenter';

/**
 * The PrivateCloud model module.
 * @module model/PrivateCloud
 * @version v1
 */
class PrivateCloud {
    /**
     * Constructs a new <code>PrivateCloud</code>.
     * Represents a private cloud resource. Private clouds of type &#x60;STANDARD&#x60; and &#x60;TIME_LIMITED&#x60; are zonal resources, &#x60;STRETCHED&#x60; private clouds are regional.
     * @alias module:model/PrivateCloud
     */
    constructor() { 
        
        PrivateCloud.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrivateCloud</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrivateCloud} obj Optional instance to populate.
     * @return {module:model/PrivateCloud} The populated <code>PrivateCloud</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrivateCloud();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('hcx')) {
                obj['hcx'] = Hcx.constructFromObject(data['hcx']);
            }
            if (data.hasOwnProperty('managementCluster')) {
                obj['managementCluster'] = ManagementCluster.constructFromObject(data['managementCluster']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkConfig')) {
                obj['networkConfig'] = NetworkConfig.constructFromObject(data['networkConfig']);
            }
            if (data.hasOwnProperty('nsx')) {
                obj['nsx'] = Nsx.constructFromObject(data['nsx']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('vcenter')) {
                obj['vcenter'] = Vcenter.constructFromObject(data['vcenter']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrivateCloud</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrivateCloud</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // validate the optional field `hcx`
        if (data['hcx']) { // data not null
          Hcx.validateJSON(data['hcx']);
        }
        // validate the optional field `managementCluster`
        if (data['managementCluster']) { // data not null
          ManagementCluster.validateJSON(data['managementCluster']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `networkConfig`
        if (data['networkConfig']) { // data not null
          NetworkConfig.validateJSON(data['networkConfig']);
        }
        // validate the optional field `nsx`
        if (data['nsx']) { // data not null
          Nsx.validateJSON(data['nsx']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `vcenter`
        if (data['vcenter']) { // data not null
          Vcenter.validateJSON(data['vcenter']);
        }

        return true;
    }


}



/**
 * Output only. Creation time of this resource.
 * @member {String} createTime
 */
PrivateCloud.prototype['createTime'] = undefined;

/**
 * Output only. Time when the resource was scheduled for deletion.
 * @member {String} deleteTime
 */
PrivateCloud.prototype['deleteTime'] = undefined;

/**
 * User-provided description for this private cloud.
 * @member {String} description
 */
PrivateCloud.prototype['description'] = undefined;

/**
 * Output only. Time when the resource will be irreversibly deleted.
 * @member {String} expireTime
 */
PrivateCloud.prototype['expireTime'] = undefined;

/**
 * @member {module:model/Hcx} hcx
 */
PrivateCloud.prototype['hcx'] = undefined;

/**
 * @member {module:model/ManagementCluster} managementCluster
 */
PrivateCloud.prototype['managementCluster'] = undefined;

/**
 * Output only. The resource name of this private cloud. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud`
 * @member {String} name
 */
PrivateCloud.prototype['name'] = undefined;

/**
 * @member {module:model/NetworkConfig} networkConfig
 */
PrivateCloud.prototype['networkConfig'] = undefined;

/**
 * @member {module:model/Nsx} nsx
 */
PrivateCloud.prototype['nsx'] = undefined;

/**
 * Output only. State of the resource. New values may be added to this enum when appropriate.
 * @member {module:model/PrivateCloud.StateEnum} state
 */
PrivateCloud.prototype['state'] = undefined;

/**
 * Optional. Type of the private cloud. Defaults to STANDARD.
 * @member {module:model/PrivateCloud.TypeEnum} type
 */
PrivateCloud.prototype['type'] = undefined;

/**
 * Output only. System-generated unique identifier for the resource.
 * @member {String} uid
 */
PrivateCloud.prototype['uid'] = undefined;

/**
 * Output only. Last update time of this resource.
 * @member {String} updateTime
 */
PrivateCloud.prototype['updateTime'] = undefined;

/**
 * @member {module:model/Vcenter} vcenter
 */
PrivateCloud.prototype['vcenter'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
PrivateCloud['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "PURGING"
     * @const
     */
    "PURGING": "PURGING"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PrivateCloud['TypeEnum'] = {

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "TIME_LIMITED"
     * @const
     */
    "TIME_LIMITED": "TIME_LIMITED",

    /**
     * value: "STRETCHED"
     * @const
     */
    "STRETCHED": "STRETCHED"
};



export default PrivateCloud;

