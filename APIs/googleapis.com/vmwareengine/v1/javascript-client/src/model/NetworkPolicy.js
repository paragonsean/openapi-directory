/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkService from './NetworkService';

/**
 * The NetworkPolicy model module.
 * @module model/NetworkPolicy
 * @version v1
 */
class NetworkPolicy {
    /**
     * Constructs a new <code>NetworkPolicy</code>.
     * Represents a network policy resource. Network policies are regional resources. You can use a network policy to enable or disable internet access and external IP access. Network policies are associated with a VMware Engine network, which might span across regions. For a given region, a network policy applies to all private clouds in the VMware Engine network associated with the policy.
     * @alias module:model/NetworkPolicy
     */
    constructor() { 
        
        NetworkPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkPolicy} obj Optional instance to populate.
     * @return {module:model/NetworkPolicy} The populated <code>NetworkPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkPolicy();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('edgeServicesCidr')) {
                obj['edgeServicesCidr'] = ApiClient.convertToType(data['edgeServicesCidr'], 'String');
            }
            if (data.hasOwnProperty('externalIp')) {
                obj['externalIp'] = NetworkService.constructFromObject(data['externalIp']);
            }
            if (data.hasOwnProperty('internetAccess')) {
                obj['internetAccess'] = NetworkService.constructFromObject(data['internetAccess']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('vmwareEngineNetwork')) {
                obj['vmwareEngineNetwork'] = ApiClient.convertToType(data['vmwareEngineNetwork'], 'String');
            }
            if (data.hasOwnProperty('vmwareEngineNetworkCanonical')) {
                obj['vmwareEngineNetworkCanonical'] = ApiClient.convertToType(data['vmwareEngineNetworkCanonical'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['edgeServicesCidr'] && !(typeof data['edgeServicesCidr'] === 'string' || data['edgeServicesCidr'] instanceof String)) {
            throw new Error("Expected the field `edgeServicesCidr` to be a primitive type in the JSON string but got " + data['edgeServicesCidr']);
        }
        // validate the optional field `externalIp`
        if (data['externalIp']) { // data not null
          NetworkService.validateJSON(data['externalIp']);
        }
        // validate the optional field `internetAccess`
        if (data['internetAccess']) { // data not null
          NetworkService.validateJSON(data['internetAccess']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['vmwareEngineNetwork'] && !(typeof data['vmwareEngineNetwork'] === 'string' || data['vmwareEngineNetwork'] instanceof String)) {
            throw new Error("Expected the field `vmwareEngineNetwork` to be a primitive type in the JSON string but got " + data['vmwareEngineNetwork']);
        }
        // ensure the json data is a string
        if (data['vmwareEngineNetworkCanonical'] && !(typeof data['vmwareEngineNetworkCanonical'] === 'string' || data['vmwareEngineNetworkCanonical'] instanceof String)) {
            throw new Error("Expected the field `vmwareEngineNetworkCanonical` to be a primitive type in the JSON string but got " + data['vmwareEngineNetworkCanonical']);
        }

        return true;
    }


}



/**
 * Output only. Creation time of this resource.
 * @member {String} createTime
 */
NetworkPolicy.prototype['createTime'] = undefined;

/**
 * Optional. User-provided description for this network policy.
 * @member {String} description
 */
NetworkPolicy.prototype['description'] = undefined;

/**
 * Required. IP address range in CIDR notation used to create internet access and external IP access. An RFC 1918 CIDR block, with a \"/26\" prefix, is required. The range cannot overlap with any prefixes either in the consumer VPC network or in use by the private clouds attached to that VPC network.
 * @member {String} edgeServicesCidr
 */
NetworkPolicy.prototype['edgeServicesCidr'] = undefined;

/**
 * @member {module:model/NetworkService} externalIp
 */
NetworkPolicy.prototype['externalIp'] = undefined;

/**
 * @member {module:model/NetworkService} internetAccess
 */
NetworkPolicy.prototype['internetAccess'] = undefined;

/**
 * Output only. The resource name of this network policy. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/networkPolicies/my-network-policy`
 * @member {String} name
 */
NetworkPolicy.prototype['name'] = undefined;

/**
 * Output only. System-generated unique identifier for the resource.
 * @member {String} uid
 */
NetworkPolicy.prototype['uid'] = undefined;

/**
 * Output only. Last update time of this resource.
 * @member {String} updateTime
 */
NetworkPolicy.prototype['updateTime'] = undefined;

/**
 * Optional. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
 * @member {String} vmwareEngineNetwork
 */
NetworkPolicy.prototype['vmwareEngineNetwork'] = undefined;

/**
 * Output only. The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
 * @member {String} vmwareEngineNetworkCanonical
 */
NetworkPolicy.prototype['vmwareEngineNetworkCanonical'] = undefined;






export default NetworkPolicy;

