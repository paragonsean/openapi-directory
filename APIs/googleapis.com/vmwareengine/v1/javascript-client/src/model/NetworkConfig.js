/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NetworkConfig model module.
 * @module model/NetworkConfig
 * @version v1
 */
class NetworkConfig {
    /**
     * Constructs a new <code>NetworkConfig</code>.
     * Network configuration in the consumer project with which the peering has to be done.
     * @alias module:model/NetworkConfig
     */
    constructor() { 
        
        NetworkConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkConfig} obj Optional instance to populate.
     * @return {module:model/NetworkConfig} The populated <code>NetworkConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkConfig();

            if (data.hasOwnProperty('dnsServerIp')) {
                obj['dnsServerIp'] = ApiClient.convertToType(data['dnsServerIp'], 'String');
            }
            if (data.hasOwnProperty('managementCidr')) {
                obj['managementCidr'] = ApiClient.convertToType(data['managementCidr'], 'String');
            }
            if (data.hasOwnProperty('managementIpAddressLayoutVersion')) {
                obj['managementIpAddressLayoutVersion'] = ApiClient.convertToType(data['managementIpAddressLayoutVersion'], 'Number');
            }
            if (data.hasOwnProperty('vmwareEngineNetwork')) {
                obj['vmwareEngineNetwork'] = ApiClient.convertToType(data['vmwareEngineNetwork'], 'String');
            }
            if (data.hasOwnProperty('vmwareEngineNetworkCanonical')) {
                obj['vmwareEngineNetworkCanonical'] = ApiClient.convertToType(data['vmwareEngineNetworkCanonical'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dnsServerIp'] && !(typeof data['dnsServerIp'] === 'string' || data['dnsServerIp'] instanceof String)) {
            throw new Error("Expected the field `dnsServerIp` to be a primitive type in the JSON string but got " + data['dnsServerIp']);
        }
        // ensure the json data is a string
        if (data['managementCidr'] && !(typeof data['managementCidr'] === 'string' || data['managementCidr'] instanceof String)) {
            throw new Error("Expected the field `managementCidr` to be a primitive type in the JSON string but got " + data['managementCidr']);
        }
        // ensure the json data is a string
        if (data['vmwareEngineNetwork'] && !(typeof data['vmwareEngineNetwork'] === 'string' || data['vmwareEngineNetwork'] instanceof String)) {
            throw new Error("Expected the field `vmwareEngineNetwork` to be a primitive type in the JSON string but got " + data['vmwareEngineNetwork']);
        }
        // ensure the json data is a string
        if (data['vmwareEngineNetworkCanonical'] && !(typeof data['vmwareEngineNetworkCanonical'] === 'string' || data['vmwareEngineNetworkCanonical'] instanceof String)) {
            throw new Error("Expected the field `vmwareEngineNetworkCanonical` to be a primitive type in the JSON string but got " + data['vmwareEngineNetworkCanonical']);
        }

        return true;
    }


}



/**
 * Output only. DNS Server IP of the Private Cloud. All DNS queries can be forwarded to this address for name resolution of Private Cloud's management entities like vCenter, NSX-T Manager and ESXi hosts.
 * @member {String} dnsServerIp
 */
NetworkConfig.prototype['dnsServerIp'] = undefined;

/**
 * Required. Management CIDR used by VMware management appliances.
 * @member {String} managementCidr
 */
NetworkConfig.prototype['managementCidr'] = undefined;

/**
 * Output only. The IP address layout version of the management IP address range. Possible versions include: * `managementIpAddressLayoutVersion=1`: Indicates the legacy IP address layout used by some existing private clouds. This is no longer supported for new private clouds as it does not support all features. * `managementIpAddressLayoutVersion=2`: Indicates the latest IP address layout used by all newly created private clouds. This version supports all current features.
 * @member {Number} managementIpAddressLayoutVersion
 */
NetworkConfig.prototype['managementIpAddressLayoutVersion'] = undefined;

/**
 * Optional. The relative resource name of the VMware Engine network attached to the private cloud. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
 * @member {String} vmwareEngineNetwork
 */
NetworkConfig.prototype['vmwareEngineNetwork'] = undefined;

/**
 * Output only. The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
 * @member {String} vmwareEngineNetworkCanonical
 */
NetworkConfig.prototype['vmwareEngineNetworkCanonical'] = undefined;






export default NetworkConfig;

