/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeTypeConfig model module.
 * @module model/NodeTypeConfig
 * @version v1
 */
class NodeTypeConfig {
    /**
     * Constructs a new <code>NodeTypeConfig</code>.
     * Information about the type and number of nodes associated with the cluster.
     * @alias module:model/NodeTypeConfig
     */
    constructor() { 
        
        NodeTypeConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeTypeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeTypeConfig} obj Optional instance to populate.
     * @return {module:model/NodeTypeConfig} The populated <code>NodeTypeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeTypeConfig();

            if (data.hasOwnProperty('customCoreCount')) {
                obj['customCoreCount'] = ApiClient.convertToType(data['customCoreCount'], 'Number');
            }
            if (data.hasOwnProperty('nodeCount')) {
                obj['nodeCount'] = ApiClient.convertToType(data['nodeCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeTypeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeTypeConfig</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Optional. Customized number of cores available to each node of the type. This number must always be one of `nodeType.availableCustomCoreCounts`. If zero is provided max value from `nodeType.availableCustomCoreCounts` will be used.
 * @member {Number} customCoreCount
 */
NodeTypeConfig.prototype['customCoreCount'] = undefined;

/**
 * Required. The number of nodes of this type in the cluster
 * @member {Number} nodeCount
 */
NodeTypeConfig.prototype['nodeCount'] = undefined;






export default NodeTypeConfig;

