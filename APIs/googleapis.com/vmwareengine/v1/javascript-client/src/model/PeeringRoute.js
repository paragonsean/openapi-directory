/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PeeringRoute model module.
 * @module model/PeeringRoute
 * @version v1
 */
class PeeringRoute {
    /**
     * Constructs a new <code>PeeringRoute</code>.
     * Exchanged network peering route.
     * @alias module:model/PeeringRoute
     */
    constructor() { 
        
        PeeringRoute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PeeringRoute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeeringRoute} obj Optional instance to populate.
     * @return {module:model/PeeringRoute} The populated <code>PeeringRoute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeeringRoute();

            if (data.hasOwnProperty('destRange')) {
                obj['destRange'] = ApiClient.convertToType(data['destRange'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('imported')) {
                obj['imported'] = ApiClient.convertToType(data['imported'], 'Boolean');
            }
            if (data.hasOwnProperty('nextHopRegion')) {
                obj['nextHopRegion'] = ApiClient.convertToType(data['nextHopRegion'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeeringRoute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeeringRoute</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['destRange'] && !(typeof data['destRange'] === 'string' || data['destRange'] instanceof String)) {
            throw new Error("Expected the field `destRange` to be a primitive type in the JSON string but got " + data['destRange']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['nextHopRegion'] && !(typeof data['nextHopRegion'] === 'string' || data['nextHopRegion'] instanceof String)) {
            throw new Error("Expected the field `nextHopRegion` to be a primitive type in the JSON string but got " + data['nextHopRegion']);
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Output only. Destination range of the peering route in CIDR notation.
 * @member {String} destRange
 */
PeeringRoute.prototype['destRange'] = undefined;

/**
 * Output only. Direction of the routes exchanged with the peer network, from the VMware Engine network perspective: * Routes of direction `INCOMING` are imported from the peer network. * Routes of direction `OUTGOING` are exported from the intranet VPC network of the VMware Engine network.
 * @member {module:model/PeeringRoute.DirectionEnum} direction
 */
PeeringRoute.prototype['direction'] = undefined;

/**
 * Output only. True if the peering route has been imported from a peered VPC network; false otherwise. The import happens if the field `NetworkPeering.importCustomRoutes` is true for this network, `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and the import does not result in a route conflict.
 * @member {Boolean} imported
 */
PeeringRoute.prototype['imported'] = undefined;

/**
 * Output only. Region containing the next hop of the peering route. This field only applies to dynamic routes in the peer VPC network.
 * @member {String} nextHopRegion
 */
PeeringRoute.prototype['nextHopRegion'] = undefined;

/**
 * Output only. The priority of the peering route.
 * @member {String} priority
 */
PeeringRoute.prototype['priority'] = undefined;

/**
 * Output only. Type of the route in the peer VPC network.
 * @member {module:model/PeeringRoute.TypeEnum} type
 */
PeeringRoute.prototype['type'] = undefined;





/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
PeeringRoute['DirectionEnum'] = {

    /**
     * value: "DIRECTION_UNSPECIFIED"
     * @const
     */
    "DIRECTION_UNSPECIFIED": "DIRECTION_UNSPECIFIED",

    /**
     * value: "INCOMING"
     * @const
     */
    "INCOMING": "INCOMING",

    /**
     * value: "OUTGOING"
     * @const
     */
    "OUTGOING": "OUTGOING"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PeeringRoute['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "DYNAMIC_PEERING_ROUTE"
     * @const
     */
    "DYNAMIC_PEERING_ROUTE": "DYNAMIC_PEERING_ROUTE",

    /**
     * value: "STATIC_PEERING_ROUTE"
     * @const
     */
    "STATIC_PEERING_ROUTE": "STATIC_PEERING_ROUTE",

    /**
     * value: "SUBNET_PEERING_ROUTE"
     * @const
     */
    "SUBNET_PEERING_ROUTE": "SUBNET_PEERING_ROUTE"
};



export default PeeringRoute;

