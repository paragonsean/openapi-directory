/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VpcNetwork model module.
 * @module model/VpcNetwork
 * @version v1
 */
class VpcNetwork {
    /**
     * Constructs a new <code>VpcNetwork</code>.
     * Represents a VMware Engine VPC network that is managed by a VMware Engine network resource.
     * @alias module:model/VpcNetwork
     */
    constructor() { 
        
        VpcNetwork.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VpcNetwork</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VpcNetwork} obj Optional instance to populate.
     * @return {module:model/VpcNetwork} The populated <code>VpcNetwork</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VpcNetwork();

            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VpcNetwork</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VpcNetwork</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Output only. The relative resource name of the service VPC network this VMware Engine network is attached to. For example: `projects/123123/global/networks/my-network`
 * @member {String} network
 */
VpcNetwork.prototype['network'] = undefined;

/**
 * Output only. Type of VPC network (INTRANET, INTERNET, or GOOGLE_CLOUD)
 * @member {module:model/VpcNetwork.TypeEnum} type
 */
VpcNetwork.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
VpcNetwork['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "INTRANET"
     * @const
     */
    "INTRANET": "INTRANET",

    /**
     * value: "INTERNET"
     * @const
     */
    "INTERNET": "INTERNET",

    /**
     * value: "GOOGLE_CLOUD"
     * @const
     */
    "GOOGLE_CLOUD": "GOOGLE_CLOUD"
};



export default VpcNetwork;

