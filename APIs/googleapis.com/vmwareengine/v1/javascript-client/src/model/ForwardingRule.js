/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ForwardingRule model module.
 * @module model/ForwardingRule
 * @version v1
 */
class ForwardingRule {
    /**
     * Constructs a new <code>ForwardingRule</code>.
     * A forwarding rule is a mapping of a &#x60;domain&#x60; to &#x60;name_servers&#x60;. This mapping allows VMware Engine to resolve domains for attached private clouds by forwarding DNS requests for a given domain to the specified nameservers.
     * @alias module:model/ForwardingRule
     */
    constructor() { 
        
        ForwardingRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ForwardingRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ForwardingRule} obj Optional instance to populate.
     * @return {module:model/ForwardingRule} The populated <code>ForwardingRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ForwardingRule();

            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('nameServers')) {
                obj['nameServers'] = ApiClient.convertToType(data['nameServers'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ForwardingRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ForwardingRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nameServers'])) {
            throw new Error("Expected the field `nameServers` to be an array in the JSON data but got " + data['nameServers']);
        }

        return true;
    }


}



/**
 * Required. Domain used to resolve a `name_servers` list.
 * @member {String} domain
 */
ForwardingRule.prototype['domain'] = undefined;

/**
 * Required. List of DNS servers to use for domain resolution
 * @member {Array.<String>} nameServers
 */
ForwardingRule.prototype['nameServers'] = undefined;






export default ForwardingRule;

