/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeType model module.
 * @module model/NodeType
 * @version v1
 */
class NodeType {
    /**
     * Constructs a new <code>NodeType</code>.
     * Describes node type.
     * @alias module:model/NodeType
     */
    constructor() { 
        
        NodeType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeType} obj Optional instance to populate.
     * @return {module:model/NodeType} The populated <code>NodeType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeType();

            if (data.hasOwnProperty('availableCustomCoreCounts')) {
                obj['availableCustomCoreCounts'] = ApiClient.convertToType(data['availableCustomCoreCounts'], ['Number']);
            }
            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], ['String']);
            }
            if (data.hasOwnProperty('diskSizeGb')) {
                obj['diskSizeGb'] = ApiClient.convertToType(data['diskSizeGb'], 'Number');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('families')) {
                obj['families'] = ApiClient.convertToType(data['families'], ['String']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('memoryGb')) {
                obj['memoryGb'] = ApiClient.convertToType(data['memoryGb'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodeTypeId')) {
                obj['nodeTypeId'] = ApiClient.convertToType(data['nodeTypeId'], 'String');
            }
            if (data.hasOwnProperty('totalCoreCount')) {
                obj['totalCoreCount'] = ApiClient.convertToType(data['totalCoreCount'], 'Number');
            }
            if (data.hasOwnProperty('virtualCpuCount')) {
                obj['virtualCpuCount'] = ApiClient.convertToType(data['virtualCpuCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['availableCustomCoreCounts'])) {
            throw new Error("Expected the field `availableCustomCoreCounts` to be an array in the JSON data but got " + data['availableCustomCoreCounts']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['capabilities'])) {
            throw new Error("Expected the field `capabilities` to be an array in the JSON data but got " + data['capabilities']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['families'])) {
            throw new Error("Expected the field `families` to be an array in the JSON data but got " + data['families']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nodeTypeId'] && !(typeof data['nodeTypeId'] === 'string' || data['nodeTypeId'] instanceof String)) {
            throw new Error("Expected the field `nodeTypeId` to be a primitive type in the JSON string but got " + data['nodeTypeId']);
        }

        return true;
    }


}



/**
 * Output only. List of possible values of custom core count.
 * @member {Array.<Number>} availableCustomCoreCounts
 */
NodeType.prototype['availableCustomCoreCounts'] = undefined;

/**
 * Output only. Capabilities of this node type.
 * @member {Array.<module:model/NodeType.CapabilitiesEnum>} capabilities
 */
NodeType.prototype['capabilities'] = undefined;

/**
 * Output only. The amount of storage available, defined in GB.
 * @member {Number} diskSizeGb
 */
NodeType.prototype['diskSizeGb'] = undefined;

/**
 * Output only. The friendly name for this node type. For example: ve1-standard-72
 * @member {String} displayName
 */
NodeType.prototype['displayName'] = undefined;

/**
 * Output only. Families of the node type. For node types to be in the same cluster they must share at least one element in the `families`.
 * @member {Array.<String>} families
 */
NodeType.prototype['families'] = undefined;

/**
 * Output only. The type of the resource.
 * @member {module:model/NodeType.KindEnum} kind
 */
NodeType.prototype['kind'] = undefined;

/**
 * Output only. The amount of physical memory available, defined in GB.
 * @member {Number} memoryGb
 */
NodeType.prototype['memoryGb'] = undefined;

/**
 * Output only. The resource name of this node type. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-proj/locations/us-central1-a/nodeTypes/standard-72`
 * @member {String} name
 */
NodeType.prototype['name'] = undefined;

/**
 * Output only. The canonical identifier of the node type (corresponds to the `NodeType`). For example: standard-72.
 * @member {String} nodeTypeId
 */
NodeType.prototype['nodeTypeId'] = undefined;

/**
 * Output only. The total number of CPU cores in a single node.
 * @member {Number} totalCoreCount
 */
NodeType.prototype['totalCoreCount'] = undefined;

/**
 * Output only. The total number of virtual CPUs in a single node.
 * @member {Number} virtualCpuCount
 */
NodeType.prototype['virtualCpuCount'] = undefined;





/**
 * Allowed values for the <code>capabilities</code> property.
 * @enum {String}
 * @readonly
 */
NodeType['CapabilitiesEnum'] = {

    /**
     * value: "CAPABILITY_UNSPECIFIED"
     * @const
     */
    "CAPABILITY_UNSPECIFIED": "CAPABILITY_UNSPECIFIED",

    /**
     * value: "STRETCHED_CLUSTERS"
     * @const
     */
    "STRETCHED_CLUSTERS": "STRETCHED_CLUSTERS"
};


/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
NodeType['KindEnum'] = {

    /**
     * value: "KIND_UNSPECIFIED"
     * @const
     */
    "KIND_UNSPECIFIED": "KIND_UNSPECIFIED",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "STORAGE_ONLY"
     * @const
     */
    "STORAGE_ONLY": "STORAGE_ONLY"
};



export default NodeType;

