/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HcxActivationKey model module.
 * @module model/HcxActivationKey
 * @version v1
 */
class HcxActivationKey {
    /**
     * Constructs a new <code>HcxActivationKey</code>.
     * HCX activation key. A default key is created during private cloud provisioning, but this behavior is subject to change and you should always verify active keys. Use VmwareEngine.ListHcxActivationKeys to retrieve existing keys and VmwareEngine.CreateHcxActivationKey to create new ones.
     * @alias module:model/HcxActivationKey
     */
    constructor() { 
        
        HcxActivationKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HcxActivationKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HcxActivationKey} obj Optional instance to populate.
     * @return {module:model/HcxActivationKey} The populated <code>HcxActivationKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HcxActivationKey();

            if (data.hasOwnProperty('activationKey')) {
                obj['activationKey'] = ApiClient.convertToType(data['activationKey'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HcxActivationKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HcxActivationKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activationKey'] && !(typeof data['activationKey'] === 'string' || data['activationKey'] instanceof String)) {
            throw new Error("Expected the field `activationKey` to be a primitive type in the JSON string but got " + data['activationKey']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * Output only. HCX activation key.
 * @member {String} activationKey
 */
HcxActivationKey.prototype['activationKey'] = undefined;

/**
 * Output only. Creation time of HCX activation key.
 * @member {String} createTime
 */
HcxActivationKey.prototype['createTime'] = undefined;

/**
 * Output only. The resource name of this HcxActivationKey. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateClouds/my-cloud/hcxActivationKeys/my-key`
 * @member {String} name
 */
HcxActivationKey.prototype['name'] = undefined;

/**
 * Output only. State of HCX activation key.
 * @member {module:model/HcxActivationKey.StateEnum} state
 */
HcxActivationKey.prototype['state'] = undefined;

/**
 * Output only. System-generated unique identifier for the resource.
 * @member {String} uid
 */
HcxActivationKey.prototype['uid'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
HcxActivationKey['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "AVAILABLE"
     * @const
     */
    "AVAILABLE": "AVAILABLE",

    /**
     * value: "CONSUMED"
     * @const
     */
    "CONSUMED": "CONSUMED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING"
};



export default HcxActivationKey;

