/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NetworkPeering model module.
 * @module model/NetworkPeering
 * @version v1
 */
class NetworkPeering {
    /**
     * Constructs a new <code>NetworkPeering</code>.
     * Details of a network peering.
     * @alias module:model/NetworkPeering
     */
    constructor() { 
        
        NetworkPeering.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkPeering</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkPeering} obj Optional instance to populate.
     * @return {module:model/NetworkPeering} The populated <code>NetworkPeering</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkPeering();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('exchangeSubnetRoutes')) {
                obj['exchangeSubnetRoutes'] = ApiClient.convertToType(data['exchangeSubnetRoutes'], 'Boolean');
            }
            if (data.hasOwnProperty('exportCustomRoutes')) {
                obj['exportCustomRoutes'] = ApiClient.convertToType(data['exportCustomRoutes'], 'Boolean');
            }
            if (data.hasOwnProperty('exportCustomRoutesWithPublicIp')) {
                obj['exportCustomRoutesWithPublicIp'] = ApiClient.convertToType(data['exportCustomRoutesWithPublicIp'], 'Boolean');
            }
            if (data.hasOwnProperty('importCustomRoutes')) {
                obj['importCustomRoutes'] = ApiClient.convertToType(data['importCustomRoutes'], 'Boolean');
            }
            if (data.hasOwnProperty('importCustomRoutesWithPublicIp')) {
                obj['importCustomRoutesWithPublicIp'] = ApiClient.convertToType(data['importCustomRoutesWithPublicIp'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('peerMtu')) {
                obj['peerMtu'] = ApiClient.convertToType(data['peerMtu'], 'Number');
            }
            if (data.hasOwnProperty('peerNetwork')) {
                obj['peerNetwork'] = ApiClient.convertToType(data['peerNetwork'], 'String');
            }
            if (data.hasOwnProperty('peerNetworkType')) {
                obj['peerNetworkType'] = ApiClient.convertToType(data['peerNetworkType'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateDetails')) {
                obj['stateDetails'] = ApiClient.convertToType(data['stateDetails'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('vmwareEngineNetwork')) {
                obj['vmwareEngineNetwork'] = ApiClient.convertToType(data['vmwareEngineNetwork'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkPeering</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkPeering</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['peerNetwork'] && !(typeof data['peerNetwork'] === 'string' || data['peerNetwork'] instanceof String)) {
            throw new Error("Expected the field `peerNetwork` to be a primitive type in the JSON string but got " + data['peerNetwork']);
        }
        // ensure the json data is a string
        if (data['peerNetworkType'] && !(typeof data['peerNetworkType'] === 'string' || data['peerNetworkType'] instanceof String)) {
            throw new Error("Expected the field `peerNetworkType` to be a primitive type in the JSON string but got " + data['peerNetworkType']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateDetails'] && !(typeof data['stateDetails'] === 'string' || data['stateDetails'] instanceof String)) {
            throw new Error("Expected the field `stateDetails` to be a primitive type in the JSON string but got " + data['stateDetails']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['vmwareEngineNetwork'] && !(typeof data['vmwareEngineNetwork'] === 'string' || data['vmwareEngineNetwork'] instanceof String)) {
            throw new Error("Expected the field `vmwareEngineNetwork` to be a primitive type in the JSON string but got " + data['vmwareEngineNetwork']);
        }

        return true;
    }


}



/**
 * Output only. Creation time of this resource.
 * @member {String} createTime
 */
NetworkPeering.prototype['createTime'] = undefined;

/**
 * Optional. User-provided description for this network peering.
 * @member {String} description
 */
NetworkPeering.prototype['description'] = undefined;

/**
 * Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.
 * @member {Boolean} exchangeSubnetRoutes
 */
NetworkPeering.prototype['exchangeSubnetRoutes'] = undefined;

/**
 * Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.
 * @member {Boolean} exportCustomRoutes
 */
NetworkPeering.prototype['exportCustomRoutes'] = undefined;

/**
 * Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
 * @member {Boolean} exportCustomRoutesWithPublicIp
 */
NetworkPeering.prototype['exportCustomRoutesWithPublicIp'] = undefined;

/**
 * Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.
 * @member {Boolean} importCustomRoutes
 */
NetworkPeering.prototype['importCustomRoutes'] = undefined;

/**
 * Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.
 * @member {Boolean} importCustomRoutesWithPublicIp
 */
NetworkPeering.prototype['importCustomRoutesWithPublicIp'] = undefined;

/**
 * Output only. The resource name of the network peering. NetworkPeering is a global resource and location can only be global. Resource names are scheme-less URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/networkPeerings/my-peering`
 * @member {String} name
 */
NetworkPeering.prototype['name'] = undefined;

/**
 * Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.
 * @member {Number} peerMtu
 */
NetworkPeering.prototype['peerMtu'] = undefined;

/**
 * Required. The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.
 * @member {String} peerNetwork
 */
NetworkPeering.prototype['peerNetwork'] = undefined;

/**
 * Required. The type of the network to peer with the VMware Engine network.
 * @member {module:model/NetworkPeering.PeerNetworkTypeEnum} peerNetworkType
 */
NetworkPeering.prototype['peerNetworkType'] = undefined;

/**
 * Output only. State of the network peering. This field has a value of 'ACTIVE' when there's a matching configuration in the peer network. New values may be added to this enum when appropriate.
 * @member {module:model/NetworkPeering.StateEnum} state
 */
NetworkPeering.prototype['state'] = undefined;

/**
 * Output only. Output Only. Details about the current state of the network peering.
 * @member {String} stateDetails
 */
NetworkPeering.prototype['stateDetails'] = undefined;

/**
 * Output only. System-generated unique identifier for the resource.
 * @member {String} uid
 */
NetworkPeering.prototype['uid'] = undefined;

/**
 * Output only. Last update time of this resource.
 * @member {String} updateTime
 */
NetworkPeering.prototype['updateTime'] = undefined;

/**
 * Required. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.
 * @member {String} vmwareEngineNetwork
 */
NetworkPeering.prototype['vmwareEngineNetwork'] = undefined;





/**
 * Allowed values for the <code>peerNetworkType</code> property.
 * @enum {String}
 * @readonly
 */
NetworkPeering['PeerNetworkTypeEnum'] = {

    /**
     * value: "PEER_NETWORK_TYPE_UNSPECIFIED"
     * @const
     */
    "PEER_NETWORK_TYPE_UNSPECIFIED": "PEER_NETWORK_TYPE_UNSPECIFIED",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "VMWARE_ENGINE_NETWORK"
     * @const
     */
    "VMWARE_ENGINE_NETWORK": "VMWARE_ENGINE_NETWORK",

    /**
     * value: "PRIVATE_SERVICES_ACCESS"
     * @const
     */
    "PRIVATE_SERVICES_ACCESS": "PRIVATE_SERVICES_ACCESS",

    /**
     * value: "NETAPP_CLOUD_VOLUMES"
     * @const
     */
    "NETAPP_CLOUD_VOLUMES": "NETAPP_CLOUD_VOLUMES",

    /**
     * value: "THIRD_PARTY_SERVICE"
     * @const
     */
    "THIRD_PARTY_SERVICE": "THIRD_PARTY_SERVICE",

    /**
     * value: "DELL_POWERSCALE"
     * @const
     */
    "DELL_POWERSCALE": "DELL_POWERSCALE"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
NetworkPeering['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING"
};



export default NetworkPeering;

