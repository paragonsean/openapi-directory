/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PrivateConnection model module.
 * @module model/PrivateConnection
 * @version v1
 */
class PrivateConnection {
    /**
     * Constructs a new <code>PrivateConnection</code>.
     * Private connection resource that provides connectivity for VMware Engine private clouds.
     * @alias module:model/PrivateConnection
     */
    constructor() { 
        
        PrivateConnection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrivateConnection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrivateConnection} obj Optional instance to populate.
     * @return {module:model/PrivateConnection} The populated <code>PrivateConnection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrivateConnection();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('peeringId')) {
                obj['peeringId'] = ApiClient.convertToType(data['peeringId'], 'String');
            }
            if (data.hasOwnProperty('peeringState')) {
                obj['peeringState'] = ApiClient.convertToType(data['peeringState'], 'String');
            }
            if (data.hasOwnProperty('routingMode')) {
                obj['routingMode'] = ApiClient.convertToType(data['routingMode'], 'String');
            }
            if (data.hasOwnProperty('serviceNetwork')) {
                obj['serviceNetwork'] = ApiClient.convertToType(data['serviceNetwork'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('vmwareEngineNetwork')) {
                obj['vmwareEngineNetwork'] = ApiClient.convertToType(data['vmwareEngineNetwork'], 'String');
            }
            if (data.hasOwnProperty('vmwareEngineNetworkCanonical')) {
                obj['vmwareEngineNetworkCanonical'] = ApiClient.convertToType(data['vmwareEngineNetworkCanonical'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrivateConnection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrivateConnection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['peeringId'] && !(typeof data['peeringId'] === 'string' || data['peeringId'] instanceof String)) {
            throw new Error("Expected the field `peeringId` to be a primitive type in the JSON string but got " + data['peeringId']);
        }
        // ensure the json data is a string
        if (data['peeringState'] && !(typeof data['peeringState'] === 'string' || data['peeringState'] instanceof String)) {
            throw new Error("Expected the field `peeringState` to be a primitive type in the JSON string but got " + data['peeringState']);
        }
        // ensure the json data is a string
        if (data['routingMode'] && !(typeof data['routingMode'] === 'string' || data['routingMode'] instanceof String)) {
            throw new Error("Expected the field `routingMode` to be a primitive type in the JSON string but got " + data['routingMode']);
        }
        // ensure the json data is a string
        if (data['serviceNetwork'] && !(typeof data['serviceNetwork'] === 'string' || data['serviceNetwork'] instanceof String)) {
            throw new Error("Expected the field `serviceNetwork` to be a primitive type in the JSON string but got " + data['serviceNetwork']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['vmwareEngineNetwork'] && !(typeof data['vmwareEngineNetwork'] === 'string' || data['vmwareEngineNetwork'] instanceof String)) {
            throw new Error("Expected the field `vmwareEngineNetwork` to be a primitive type in the JSON string but got " + data['vmwareEngineNetwork']);
        }
        // ensure the json data is a string
        if (data['vmwareEngineNetworkCanonical'] && !(typeof data['vmwareEngineNetworkCanonical'] === 'string' || data['vmwareEngineNetworkCanonical'] instanceof String)) {
            throw new Error("Expected the field `vmwareEngineNetworkCanonical` to be a primitive type in the JSON string but got " + data['vmwareEngineNetworkCanonical']);
        }

        return true;
    }


}



/**
 * Output only. Creation time of this resource.
 * @member {String} createTime
 */
PrivateConnection.prototype['createTime'] = undefined;

/**
 * Optional. User-provided description for this private connection.
 * @member {String} description
 */
PrivateConnection.prototype['description'] = undefined;

/**
 * Output only. The resource name of the private connection. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateConnections/my-connection`
 * @member {String} name
 */
PrivateConnection.prototype['name'] = undefined;

/**
 * Output only. VPC network peering id between given network VPC and VMwareEngineNetwork.
 * @member {String} peeringId
 */
PrivateConnection.prototype['peeringId'] = undefined;

/**
 * Output only. Peering state between service network and VMware Engine network.
 * @member {module:model/PrivateConnection.PeeringStateEnum} peeringState
 */
PrivateConnection.prototype['peeringState'] = undefined;

/**
 * Optional. Routing Mode. Default value is set to GLOBAL. For type = PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for other types only GLOBAL is supported.
 * @member {module:model/PrivateConnection.RoutingModeEnum} routingMode
 */
PrivateConnection.prototype['routingMode'] = undefined;

/**
 * Required. Service network to create private connection. Specify the name in the following form: `projects/{project}/global/networks/{network_id}` For type = PRIVATE_SERVICE_ACCESS, this field represents servicenetworking VPC, e.g. projects/project-tp/global/networks/servicenetworking. For type = NETAPP_CLOUD_VOLUME, this field represents NetApp service VPC, e.g. projects/project-tp/global/networks/netapp-tenant-vpc. For type = DELL_POWERSCALE, this field represent Dell service VPC, e.g. projects/project-tp/global/networks/dell-tenant-vpc. For type= THIRD_PARTY_SERVICE, this field could represent a consumer VPC or any other producer VPC to which the VMware Engine Network needs to be connected, e.g. projects/project/global/networks/vpc.
 * @member {String} serviceNetwork
 */
PrivateConnection.prototype['serviceNetwork'] = undefined;

/**
 * Output only. State of the private connection.
 * @member {module:model/PrivateConnection.StateEnum} state
 */
PrivateConnection.prototype['state'] = undefined;

/**
 * Required. Private connection type.
 * @member {module:model/PrivateConnection.TypeEnum} type
 */
PrivateConnection.prototype['type'] = undefined;

/**
 * Output only. System-generated unique identifier for the resource.
 * @member {String} uid
 */
PrivateConnection.prototype['uid'] = undefined;

/**
 * Output only. Last update time of this resource.
 * @member {String} updateTime
 */
PrivateConnection.prototype['updateTime'] = undefined;

/**
 * Required. The relative resource name of Legacy VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}`, `{location}` will be same as specified in private connection resource name and `{vmware_engine_network_id}` will be in the form of `{location}`-default e.g. projects/project/locations/us-central1/vmwareEngineNetworks/us-central1-default.
 * @member {String} vmwareEngineNetwork
 */
PrivateConnection.prototype['vmwareEngineNetwork'] = undefined;

/**
 * Output only. The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
 * @member {String} vmwareEngineNetworkCanonical
 */
PrivateConnection.prototype['vmwareEngineNetworkCanonical'] = undefined;





/**
 * Allowed values for the <code>peeringState</code> property.
 * @enum {String}
 * @readonly
 */
PrivateConnection['PeeringStateEnum'] = {

    /**
     * value: "PEERING_STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "PEERING_STATE_UNSPECIFIED",

    /**
     * value: "PEERING_ACTIVE"
     * @const
     */
    "ACTIVE": "PEERING_ACTIVE",

    /**
     * value: "PEERING_INACTIVE"
     * @const
     */
    "INACTIVE": "PEERING_INACTIVE"
};


/**
 * Allowed values for the <code>routingMode</code> property.
 * @enum {String}
 * @readonly
 */
PrivateConnection['RoutingModeEnum'] = {

    /**
     * value: "ROUTING_MODE_UNSPECIFIED"
     * @const
     */
    "ROUTING_MODE_UNSPECIFIED": "ROUTING_MODE_UNSPECIFIED",

    /**
     * value: "GLOBAL"
     * @const
     */
    "GLOBAL": "GLOBAL",

    /**
     * value: "REGIONAL"
     * @const
     */
    "REGIONAL": "REGIONAL"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
PrivateConnection['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "UNPROVISIONED"
     * @const
     */
    "UNPROVISIONED": "UNPROVISIONED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PrivateConnection['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "PRIVATE_SERVICE_ACCESS"
     * @const
     */
    "PRIVATE_SERVICE_ACCESS": "PRIVATE_SERVICE_ACCESS",

    /**
     * value: "NETAPP_CLOUD_VOLUMES"
     * @const
     */
    "NETAPP_CLOUD_VOLUMES": "NETAPP_CLOUD_VOLUMES",

    /**
     * value: "DELL_POWERSCALE"
     * @const
     */
    "DELL_POWERSCALE": "DELL_POWERSCALE",

    /**
     * value: "THIRD_PARTY_SERVICE"
     * @const
     */
    "THIRD_PARTY_SERVICE": "THIRD_PARTY_SERVICE"
};



export default PrivateConnection;

