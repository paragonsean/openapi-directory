/**
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LocationMetadata model module.
 * @module model/LocationMetadata
 * @version v1
 */
class LocationMetadata {
    /**
     * Constructs a new <code>LocationMetadata</code>.
     * VmwareEngine specific metadata for the given google.cloud.location.Location. It is returned as a content of the &#x60;google.cloud.location.Location.metadata&#x60; field.
     * @alias module:model/LocationMetadata
     */
    constructor() { 
        
        LocationMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationMetadata} obj Optional instance to populate.
     * @return {module:model/LocationMetadata} The populated <code>LocationMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationMetadata();

            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['capabilities'])) {
            throw new Error("Expected the field `capabilities` to be an array in the JSON data but got " + data['capabilities']);
        }

        return true;
    }


}



/**
 * Output only. Capabilities of this location.
 * @member {Array.<module:model/LocationMetadata.CapabilitiesEnum>} capabilities
 */
LocationMetadata.prototype['capabilities'] = undefined;





/**
 * Allowed values for the <code>capabilities</code> property.
 * @enum {String}
 * @readonly
 */
LocationMetadata['CapabilitiesEnum'] = {

    /**
     * value: "CAPABILITY_UNSPECIFIED"
     * @const
     */
    "CAPABILITY_UNSPECIFIED": "CAPABILITY_UNSPECIFIED",

    /**
     * value: "STRETCHED_CLUSTERS"
     * @const
     */
    "STRETCHED_CLUSTERS": "STRETCHED_CLUSTERS"
};



export default LocationMetadata;

