/*
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Cluster;
import org.openapitools.client.model.Credentials;
import org.openapitools.client.model.ExternalAccessRule;
import org.openapitools.client.model.ExternalAddress;
import org.openapitools.client.model.FetchNetworkPolicyExternalAddressesResponse;
import org.openapitools.client.model.GrantDnsBindPermissionRequest;
import org.openapitools.client.model.HcxActivationKey;
import org.openapitools.client.model.ListClustersResponse;
import org.openapitools.client.model.ListExternalAccessRulesResponse;
import org.openapitools.client.model.ListExternalAddressesResponse;
import org.openapitools.client.model.ListHcxActivationKeysResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListLoggingServersResponse;
import org.openapitools.client.model.ListManagementDnsZoneBindingsResponse;
import org.openapitools.client.model.ListNetworkPeeringsResponse;
import org.openapitools.client.model.ListNetworkPoliciesResponse;
import org.openapitools.client.model.ListNodeTypesResponse;
import org.openapitools.client.model.ListNodesResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListPrivateCloudsResponse;
import org.openapitools.client.model.ListPrivateConnectionPeeringRoutesResponse;
import org.openapitools.client.model.ListPrivateConnectionsResponse;
import org.openapitools.client.model.ListSubnetsResponse;
import org.openapitools.client.model.ListVmwareEngineNetworksResponse;
import org.openapitools.client.model.LoggingServer;
import org.openapitools.client.model.ManagementDnsZoneBinding;
import org.openapitools.client.model.NetworkPeering;
import org.openapitools.client.model.NetworkPolicy;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.PrivateCloud;
import org.openapitools.client.model.PrivateConnection;
import org.openapitools.client.model.RepairManagementDnsZoneBindingRequest;
import org.openapitools.client.model.ResetNsxCredentialsRequest;
import org.openapitools.client.model.ResetVcenterCredentialsRequest;
import org.openapitools.client.model.RevokeDnsBindPermissionRequest;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.openapitools.client.model.UndeletePrivateCloudRequest;
import org.openapitools.client.model.VmwareEngineNetwork;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Grants the bind permission to the customer provided principal(user / service account) to bind their DNS zone with the intranet VPC associated with the project. DnsBindPermission is a global resource and location can only be global.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsDnsBindPermissionGrantTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GrantDnsBindPermissionRequest grantDnsBindPermissionRequest = null;
        Operation response = api.vmwareengineProjectsLocationsDnsBindPermissionGrant(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, grantDnsBindPermissionRequest);
        // TODO: test validations
    }

    /**
     * Revokes the bind permission from the customer provided principal(user / service account) on the intranet VPC associated with the consumer project. DnsBindPermission is a global resource and location can only be global.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsDnsBindPermissionRevokeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RevokeDnsBindPermissionRequest revokeDnsBindPermissionRequest = null;
        Operation response = api.vmwareengineProjectsLocationsDnsBindPermissionRevoke(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, revokeDnsBindPermissionRequest);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.vmwareengineProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new network peering between the peer network and VMware Engine network provided in a &#x60;NetworkPeering&#x60; resource. NetworkPeering is a global resource and location can only be global.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsNetworkPeeringsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String networkPeeringId = null;
        String requestId = null;
        NetworkPeering networkPeering = null;
        Operation response = api.vmwareengineProjectsLocationsNetworkPeeringsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, networkPeeringId, requestId, networkPeering);
        // TODO: test validations
    }

    /**
     * Lists &#x60;NetworkPeering&#x60; resources in a given project. NetworkPeering is a global resource and location can only be global.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsNetworkPeeringsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNetworkPeeringsResponse response = api.vmwareengineProjectsLocationsNetworkPeeringsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new network policy in a given VMware Engine network of a project and location (region). A new network policy cannot be created if another network policy already exists in the same scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsNetworkPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String networkPolicyId = null;
        String requestId = null;
        NetworkPolicy networkPolicy = null;
        Operation response = api.vmwareengineProjectsLocationsNetworkPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, networkPolicyId, requestId, networkPolicy);
        // TODO: test validations
    }

    /**
     * Creates a new external access rule in a given network policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsNetworkPoliciesExternalAccessRulesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String externalAccessRuleId = null;
        String requestId = null;
        ExternalAccessRule externalAccessRule = null;
        Operation response = api.vmwareengineProjectsLocationsNetworkPoliciesExternalAccessRulesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, externalAccessRuleId, requestId, externalAccessRule);
        // TODO: test validations
    }

    /**
     * Lists &#x60;ExternalAccessRule&#x60; resources in the specified network policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsNetworkPoliciesExternalAccessRulesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListExternalAccessRulesResponse response = api.vmwareengineProjectsLocationsNetworkPoliciesExternalAccessRulesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists external IP addresses assigned to VMware workload VMs within the scope of the given network policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsNetworkPoliciesFetchExternalAddressesTest() throws ApiException {
        String networkPolicy = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        FetchNetworkPolicyExternalAddressesResponse response = api.vmwareengineProjectsLocationsNetworkPoliciesFetchExternalAddresses(networkPolicy, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists &#x60;NetworkPolicy&#x60; resources in a specified project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsNetworkPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNetworkPoliciesResponse response = api.vmwareengineProjectsLocationsNetworkPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists node types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsNodeTypesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNodeTypesResponse response = api.vmwareengineProjectsLocationsNodeTypesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.vmwareengineProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new cluster in a given private cloud. Creating a new cluster provides additional nodes for use in the parent private cloud and requires sufficient [node quota](https://cloud.google.com/vmware-engine/quotas).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsClustersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clusterId = null;
        String requestId = null;
        Boolean validateOnly = null;
        Cluster cluster = null;
        Operation response = api.vmwareengineProjectsLocationsPrivateCloudsClustersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clusterId, requestId, validateOnly, cluster);
        // TODO: test validations
    }

    /**
     * Lists &#x60;Cluster&#x60; resources in a given private cloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsClustersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListClustersResponse response = api.vmwareengineProjectsLocationsPrivateCloudsClustersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists nodes in a given cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsClustersNodesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNodesResponse response = api.vmwareengineProjectsLocationsPrivateCloudsClustersNodesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new &#x60;PrivateCloud&#x60; resource in a given project and location. Private clouds of type &#x60;STANDARD&#x60; and &#x60;TIME_LIMITED&#x60; are zonal resources, &#x60;STRETCHED&#x60; private clouds are regional. Creating a private cloud also creates a [management cluster](https://cloud.google.com/vmware-engine/docs/concepts-vmware-components) for that private cloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String privateCloudId = null;
        String requestId = null;
        Boolean validateOnly = null;
        PrivateCloud privateCloud = null;
        Operation response = api.vmwareengineProjectsLocationsPrivateCloudsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, privateCloudId, requestId, validateOnly, privateCloud);
        // TODO: test validations
    }

    /**
     * Creates a new &#x60;ExternalAddress&#x60; resource in a given private cloud. The network policy that corresponds to the private cloud must have the external IP address network service enabled (&#x60;NetworkPolicy.external_ip&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsExternalAddressesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String externalAddressId = null;
        String requestId = null;
        ExternalAddress externalAddress = null;
        Operation response = api.vmwareengineProjectsLocationsPrivateCloudsExternalAddressesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, externalAddressId, requestId, externalAddress);
        // TODO: test validations
    }

    /**
     * Lists external IP addresses assigned to VMware workload VMs in a given private cloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsExternalAddressesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListExternalAddressesResponse response = api.vmwareengineProjectsLocationsPrivateCloudsExternalAddressesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new HCX activation key in a given private cloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsHcxActivationKeysCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String hcxActivationKeyId = null;
        String requestId = null;
        HcxActivationKey hcxActivationKey = null;
        Operation response = api.vmwareengineProjectsLocationsPrivateCloudsHcxActivationKeysCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, hcxActivationKeyId, requestId, hcxActivationKey);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsHcxActivationKeysGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        Policy response = api.vmwareengineProjectsLocationsPrivateCloudsHcxActivationKeysGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Lists &#x60;HcxActivationKey&#x60; resources in a given private cloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsHcxActivationKeysListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListHcxActivationKeysResponse response = api.vmwareengineProjectsLocationsPrivateCloudsHcxActivationKeysList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsHcxActivationKeysSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.vmwareengineProjectsLocationsPrivateCloudsHcxActivationKeysSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsHcxActivationKeysTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.vmwareengineProjectsLocationsPrivateCloudsHcxActivationKeysTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Lists &#x60;PrivateCloud&#x60; resources in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPrivateCloudsResponse response = api.vmwareengineProjectsLocationsPrivateCloudsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Create a new logging server for a given private cloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsLoggingServersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String loggingServerId = null;
        String requestId = null;
        LoggingServer loggingServer = null;
        Operation response = api.vmwareengineProjectsLocationsPrivateCloudsLoggingServersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, loggingServerId, requestId, loggingServer);
        // TODO: test validations
    }

    /**
     * Lists logging servers configured for a given private cloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsLoggingServersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLoggingServersResponse response = api.vmwareengineProjectsLocationsPrivateCloudsLoggingServersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new &#x60;ManagementDnsZoneBinding&#x60; resource in a private cloud. This RPC creates the DNS binding and the resource that represents the DNS binding of the consumer VPC network to the management DNS zone. A management DNS zone is the Cloud DNS cross-project binding zone that VMware Engine creates for each private cloud. It contains FQDNs and corresponding IP addresses for the private cloud&#39;s ESXi hosts and management VM appliances like vCenter and NSX Manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsManagementDnsZoneBindingsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String managementDnsZoneBindingId = null;
        String requestId = null;
        ManagementDnsZoneBinding managementDnsZoneBinding = null;
        Operation response = api.vmwareengineProjectsLocationsPrivateCloudsManagementDnsZoneBindingsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, managementDnsZoneBindingId, requestId, managementDnsZoneBinding);
        // TODO: test validations
    }

    /**
     * Lists Consumer VPCs bound to Management DNS Zone of a given private cloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsManagementDnsZoneBindingsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListManagementDnsZoneBindingsResponse response = api.vmwareengineProjectsLocationsPrivateCloudsManagementDnsZoneBindingsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Retries to create a &#x60;ManagementDnsZoneBinding&#x60; resource that is in failed state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsManagementDnsZoneBindingsRepairTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RepairManagementDnsZoneBindingRequest repairManagementDnsZoneBindingRequest = null;
        Operation response = api.vmwareengineProjectsLocationsPrivateCloudsManagementDnsZoneBindingsRepair(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, repairManagementDnsZoneBindingRequest);
        // TODO: test validations
    }

    /**
     * Resets credentials of the NSX appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsResetNsxCredentialsTest() throws ApiException {
        String privateCloud = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ResetNsxCredentialsRequest resetNsxCredentialsRequest = null;
        Operation response = api.vmwareengineProjectsLocationsPrivateCloudsResetNsxCredentials(privateCloud, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, resetNsxCredentialsRequest);
        // TODO: test validations
    }

    /**
     * Resets credentials of the Vcenter appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsResetVcenterCredentialsTest() throws ApiException {
        String privateCloud = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ResetVcenterCredentialsRequest resetVcenterCredentialsRequest = null;
        Operation response = api.vmwareengineProjectsLocationsPrivateCloudsResetVcenterCredentials(privateCloud, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, resetVcenterCredentialsRequest);
        // TODO: test validations
    }

    /**
     * Gets details of credentials for NSX appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsShowNsxCredentialsTest() throws ApiException {
        String privateCloud = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Credentials response = api.vmwareengineProjectsLocationsPrivateCloudsShowNsxCredentials(privateCloud, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets details of credentials for Vcenter appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsShowVcenterCredentialsTest() throws ApiException {
        String privateCloud = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String username = null;
        Credentials response = api.vmwareengineProjectsLocationsPrivateCloudsShowVcenterCredentials(privateCloud, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, username);
        // TODO: test validations
    }

    /**
     * Lists subnets in a given private cloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsSubnetsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSubnetsResponse response = api.vmwareengineProjectsLocationsPrivateCloudsSubnetsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Restores a private cloud that was previously scheduled for deletion by &#x60;DeletePrivateCloud&#x60;. A &#x60;PrivateCloud&#x60; resource scheduled for deletion has &#x60;PrivateCloud.state&#x60; set to &#x60;DELETED&#x60; and &#x60;PrivateCloud.expireTime&#x60; set to the time when deletion can no longer be reversed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateCloudsUndeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UndeletePrivateCloudRequest undeletePrivateCloudRequest = null;
        Operation response = api.vmwareengineProjectsLocationsPrivateCloudsUndelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, undeletePrivateCloudRequest);
        // TODO: test validations
    }

    /**
     * Creates a new private connection that can be used for accessing private Clouds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateConnectionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String privateConnectionId = null;
        String requestId = null;
        PrivateConnection privateConnection = null;
        Operation response = api.vmwareengineProjectsLocationsPrivateConnectionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, privateConnectionId, requestId, privateConnection);
        // TODO: test validations
    }

    /**
     * Lists &#x60;PrivateConnection&#x60; resources in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateConnectionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPrivateConnectionsResponse response = api.vmwareengineProjectsLocationsPrivateConnectionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the private connection routes exchanged over a peering connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsPrivateConnectionsPeeringRoutesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPrivateConnectionPeeringRoutesResponse response = api.vmwareengineProjectsLocationsPrivateConnectionsPeeringRoutesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new VMware Engine network that can be used by a private cloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsVmwareEngineNetworksCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String vmwareEngineNetworkId = null;
        VmwareEngineNetwork vmwareEngineNetwork = null;
        Operation response = api.vmwareengineProjectsLocationsVmwareEngineNetworksCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, vmwareEngineNetworkId, vmwareEngineNetwork);
        // TODO: test validations
    }

    /**
     * Deletes a &#x60;VmwareEngineNetwork&#x60; resource. You can only delete a VMware Engine network after all resources that refer to it are deleted. For example, a private cloud, a network peering, and a network policy can all refer to the same VMware Engine network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsVmwareEngineNetworksDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String etag = null;
        String requestId = null;
        Operation response = api.vmwareengineProjectsLocationsVmwareEngineNetworksDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, etag, requestId);
        // TODO: test validations
    }

    /**
     * Retrieves a &#x60;VmwareEngineNetwork&#x60; resource by its resource name. The resource contains details of the VMware Engine network, such as its VMware Engine network type, peered networks in a service project, and state (for example, &#x60;CREATING&#x60;, &#x60;ACTIVE&#x60;, &#x60;DELETING&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsVmwareEngineNetworksGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        VmwareEngineNetwork response = api.vmwareengineProjectsLocationsVmwareEngineNetworksGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists &#x60;VmwareEngineNetwork&#x60; resources in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsVmwareEngineNetworksListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListVmwareEngineNetworksResponse response = api.vmwareengineProjectsLocationsVmwareEngineNetworksList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Modifies a VMware Engine network resource. Only the following fields can be updated: &#x60;description&#x60;. Only fields specified in &#x60;updateMask&#x60; are applied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vmwareengineProjectsLocationsVmwareEngineNetworksPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String updateMask = null;
        Boolean validateOnly = null;
        VmwareEngineNetwork vmwareEngineNetwork = null;
        Operation response = api.vmwareengineProjectsLocationsVmwareEngineNetworksPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, updateMask, validateOnly, vmwareEngineNetwork);
        // TODO: test validations
    }

}
