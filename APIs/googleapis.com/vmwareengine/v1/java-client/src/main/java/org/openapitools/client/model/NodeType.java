/*
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes node type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:01.834215-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeType {
  public static final String SERIALIZED_NAME_AVAILABLE_CUSTOM_CORE_COUNTS = "availableCustomCoreCounts";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CUSTOM_CORE_COUNTS)
  private List<Integer> availableCustomCoreCounts = new ArrayList<>();

  /**
   * Gets or Sets capabilities
   */
  @JsonAdapter(CapabilitiesEnum.Adapter.class)
  public enum CapabilitiesEnum {
    CAPABILITY_UNSPECIFIED("CAPABILITY_UNSPECIFIED"),
    
    STRETCHED_CLUSTERS("STRETCHED_CLUSTERS");

    private String value;

    CapabilitiesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CapabilitiesEnum fromValue(String value) {
      for (CapabilitiesEnum b : CapabilitiesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CapabilitiesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CapabilitiesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CapabilitiesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CapabilitiesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CapabilitiesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<CapabilitiesEnum> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISK_SIZE_GB = "diskSizeGb";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_GB)
  private Integer diskSizeGb;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FAMILIES = "families";
  @SerializedName(SERIALIZED_NAME_FAMILIES)
  private List<String> families = new ArrayList<>();

  /**
   * Output only. The type of the resource.
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    KIND_UNSPECIFIED("KIND_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    STORAGE_ONLY("STORAGE_ONLY");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_MEMORY_GB = "memoryGb";
  @SerializedName(SERIALIZED_NAME_MEMORY_GB)
  private Integer memoryGb;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_TYPE_ID = "nodeTypeId";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE_ID)
  private String nodeTypeId;

  public static final String SERIALIZED_NAME_TOTAL_CORE_COUNT = "totalCoreCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_CORE_COUNT)
  private Integer totalCoreCount;

  public static final String SERIALIZED_NAME_VIRTUAL_CPU_COUNT = "virtualCpuCount";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_CPU_COUNT)
  private Integer virtualCpuCount;

  public NodeType() {
  }

  public NodeType(
     List<Integer> availableCustomCoreCounts, 
     List<CapabilitiesEnum> capabilities, 
     Integer diskSizeGb, 
     String displayName, 
     List<String> families, 
     KindEnum kind, 
     Integer memoryGb, 
     String name, 
     String nodeTypeId, 
     Integer totalCoreCount, 
     Integer virtualCpuCount
  ) {
    this();
    this.availableCustomCoreCounts = availableCustomCoreCounts;
    this.capabilities = capabilities;
    this.diskSizeGb = diskSizeGb;
    this.displayName = displayName;
    this.families = families;
    this.kind = kind;
    this.memoryGb = memoryGb;
    this.name = name;
    this.nodeTypeId = nodeTypeId;
    this.totalCoreCount = totalCoreCount;
    this.virtualCpuCount = virtualCpuCount;
  }

  /**
   * Output only. List of possible values of custom core count.
   * @return availableCustomCoreCounts
   */
  @javax.annotation.Nullable
  public List<Integer> getAvailableCustomCoreCounts() {
    return availableCustomCoreCounts;
  }



  /**
   * Output only. Capabilities of this node type.
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<CapabilitiesEnum> getCapabilities() {
    return capabilities;
  }



  /**
   * Output only. The amount of storage available, defined in GB.
   * @return diskSizeGb
   */
  @javax.annotation.Nullable
  public Integer getDiskSizeGb() {
    return diskSizeGb;
  }



  /**
   * Output only. The friendly name for this node type. For example: ve1-standard-72
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Output only. Families of the node type. For node types to be in the same cluster they must share at least one element in the &#x60;families&#x60;.
   * @return families
   */
  @javax.annotation.Nullable
  public List<String> getFamilies() {
    return families;
  }



  /**
   * Output only. The type of the resource.
   * @return kind
   */
  @javax.annotation.Nullable
  public KindEnum getKind() {
    return kind;
  }



  /**
   * Output only. The amount of physical memory available, defined in GB.
   * @return memoryGb
   */
  @javax.annotation.Nullable
  public Integer getMemoryGb() {
    return memoryGb;
  }



  /**
   * Output only. The resource name of this node type. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: &#x60;projects/my-proj/locations/us-central1-a/nodeTypes/standard-72&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The canonical identifier of the node type (corresponds to the &#x60;NodeType&#x60;). For example: standard-72.
   * @return nodeTypeId
   */
  @javax.annotation.Nullable
  public String getNodeTypeId() {
    return nodeTypeId;
  }



  /**
   * Output only. The total number of CPU cores in a single node.
   * @return totalCoreCount
   */
  @javax.annotation.Nullable
  public Integer getTotalCoreCount() {
    return totalCoreCount;
  }



  /**
   * Output only. The total number of virtual CPUs in a single node.
   * @return virtualCpuCount
   */
  @javax.annotation.Nullable
  public Integer getVirtualCpuCount() {
    return virtualCpuCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeType nodeType = (NodeType) o;
    return Objects.equals(this.availableCustomCoreCounts, nodeType.availableCustomCoreCounts) &&
        Objects.equals(this.capabilities, nodeType.capabilities) &&
        Objects.equals(this.diskSizeGb, nodeType.diskSizeGb) &&
        Objects.equals(this.displayName, nodeType.displayName) &&
        Objects.equals(this.families, nodeType.families) &&
        Objects.equals(this.kind, nodeType.kind) &&
        Objects.equals(this.memoryGb, nodeType.memoryGb) &&
        Objects.equals(this.name, nodeType.name) &&
        Objects.equals(this.nodeTypeId, nodeType.nodeTypeId) &&
        Objects.equals(this.totalCoreCount, nodeType.totalCoreCount) &&
        Objects.equals(this.virtualCpuCount, nodeType.virtualCpuCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableCustomCoreCounts, capabilities, diskSizeGb, displayName, families, kind, memoryGb, name, nodeTypeId, totalCoreCount, virtualCpuCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeType {\n");
    sb.append("    availableCustomCoreCounts: ").append(toIndentedString(availableCustomCoreCounts)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    diskSizeGb: ").append(toIndentedString(diskSizeGb)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    families: ").append(toIndentedString(families)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    memoryGb: ").append(toIndentedString(memoryGb)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeTypeId: ").append(toIndentedString(nodeTypeId)).append("\n");
    sb.append("    totalCoreCount: ").append(toIndentedString(totalCoreCount)).append("\n");
    sb.append("    virtualCpuCount: ").append(toIndentedString(virtualCpuCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableCustomCoreCounts");
    openapiFields.add("capabilities");
    openapiFields.add("diskSizeGb");
    openapiFields.add("displayName");
    openapiFields.add("families");
    openapiFields.add("kind");
    openapiFields.add("memoryGb");
    openapiFields.add("name");
    openapiFields.add("nodeTypeId");
    openapiFields.add("totalCoreCount");
    openapiFields.add("virtualCpuCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeType is not found in the empty JSON string", NodeType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("availableCustomCoreCounts") != null && !jsonObj.get("availableCustomCoreCounts").isJsonNull() && !jsonObj.get("availableCustomCoreCounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableCustomCoreCounts` to be an array in the JSON string but got `%s`", jsonObj.get("availableCustomCoreCounts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull() && !jsonObj.get("capabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("families") != null && !jsonObj.get("families").isJsonNull() && !jsonObj.get("families").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `families` to be an array in the JSON string but got `%s`", jsonObj.get("families").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        KindEnum.validateJsonElement(jsonObj.get("kind"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nodeTypeId") != null && !jsonObj.get("nodeTypeId").isJsonNull()) && !jsonObj.get("nodeTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeTypeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeType.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeType>() {
           @Override
           public void write(JsonWriter out, NodeType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeType
   * @throws IOException if the JSON string is invalid with respect to NodeType
   */
  public static NodeType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeType.class);
  }

  /**
   * Convert an instance of NodeType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

