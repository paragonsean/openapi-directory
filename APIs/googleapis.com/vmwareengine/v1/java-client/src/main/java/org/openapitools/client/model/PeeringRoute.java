/*
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Exchanged network peering route.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:01.834215-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PeeringRoute {
  public static final String SERIALIZED_NAME_DEST_RANGE = "destRange";
  @SerializedName(SERIALIZED_NAME_DEST_RANGE)
  private String destRange;

  /**
   * Output only. Direction of the routes exchanged with the peer network, from the VMware Engine network perspective: * Routes of direction &#x60;INCOMING&#x60; are imported from the peer network. * Routes of direction &#x60;OUTGOING&#x60; are exported from the intranet VPC network of the VMware Engine network.
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    DIRECTION_UNSPECIFIED("DIRECTION_UNSPECIFIED"),
    
    INCOMING("INCOMING"),
    
    OUTGOING("OUTGOING");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  public static final String SERIALIZED_NAME_IMPORTED = "imported";
  @SerializedName(SERIALIZED_NAME_IMPORTED)
  private Boolean imported;

  public static final String SERIALIZED_NAME_NEXT_HOP_REGION = "nextHopRegion";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_REGION)
  private String nextHopRegion;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private String priority;

  /**
   * Output only. Type of the route in the peer VPC network.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    DYNAMIC_PEERING_ROUTE("DYNAMIC_PEERING_ROUTE"),
    
    STATIC_PEERING_ROUTE("STATIC_PEERING_ROUTE"),
    
    SUBNET_PEERING_ROUTE("SUBNET_PEERING_ROUTE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public PeeringRoute() {
  }

  public PeeringRoute(
     String destRange, 
     DirectionEnum direction, 
     Boolean imported, 
     String nextHopRegion, 
     String priority, 
     TypeEnum type
  ) {
    this();
    this.destRange = destRange;
    this.direction = direction;
    this.imported = imported;
    this.nextHopRegion = nextHopRegion;
    this.priority = priority;
    this.type = type;
  }

  /**
   * Output only. Destination range of the peering route in CIDR notation.
   * @return destRange
   */
  @javax.annotation.Nullable
  public String getDestRange() {
    return destRange;
  }



  /**
   * Output only. Direction of the routes exchanged with the peer network, from the VMware Engine network perspective: * Routes of direction &#x60;INCOMING&#x60; are imported from the peer network. * Routes of direction &#x60;OUTGOING&#x60; are exported from the intranet VPC network of the VMware Engine network.
   * @return direction
   */
  @javax.annotation.Nullable
  public DirectionEnum getDirection() {
    return direction;
  }



  /**
   * Output only. True if the peering route has been imported from a peered VPC network; false otherwise. The import happens if the field &#x60;NetworkPeering.importCustomRoutes&#x60; is true for this network, &#x60;NetworkPeering.exportCustomRoutes&#x60; is true for the peer VPC network, and the import does not result in a route conflict.
   * @return imported
   */
  @javax.annotation.Nullable
  public Boolean getImported() {
    return imported;
  }



  /**
   * Output only. Region containing the next hop of the peering route. This field only applies to dynamic routes in the peer VPC network.
   * @return nextHopRegion
   */
  @javax.annotation.Nullable
  public String getNextHopRegion() {
    return nextHopRegion;
  }



  /**
   * Output only. The priority of the peering route.
   * @return priority
   */
  @javax.annotation.Nullable
  public String getPriority() {
    return priority;
  }



  /**
   * Output only. Type of the route in the peer VPC network.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeeringRoute peeringRoute = (PeeringRoute) o;
    return Objects.equals(this.destRange, peeringRoute.destRange) &&
        Objects.equals(this.direction, peeringRoute.direction) &&
        Objects.equals(this.imported, peeringRoute.imported) &&
        Objects.equals(this.nextHopRegion, peeringRoute.nextHopRegion) &&
        Objects.equals(this.priority, peeringRoute.priority) &&
        Objects.equals(this.type, peeringRoute.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destRange, direction, imported, nextHopRegion, priority, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeeringRoute {\n");
    sb.append("    destRange: ").append(toIndentedString(destRange)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    imported: ").append(toIndentedString(imported)).append("\n");
    sb.append("    nextHopRegion: ").append(toIndentedString(nextHopRegion)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destRange");
    openapiFields.add("direction");
    openapiFields.add("imported");
    openapiFields.add("nextHopRegion");
    openapiFields.add("priority");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PeeringRoute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PeeringRoute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeeringRoute is not found in the empty JSON string", PeeringRoute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PeeringRoute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PeeringRoute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destRange") != null && !jsonObj.get("destRange").isJsonNull()) && !jsonObj.get("destRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destRange").toString()));
      }
      if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      // validate the optional field `direction`
      if (jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull()) {
        DirectionEnum.validateJsonElement(jsonObj.get("direction"));
      }
      if ((jsonObj.get("nextHopRegion") != null && !jsonObj.get("nextHopRegion").isJsonNull()) && !jsonObj.get("nextHopRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHopRegion").toString()));
      }
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeeringRoute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeeringRoute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeeringRoute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeeringRoute.class));

       return (TypeAdapter<T>) new TypeAdapter<PeeringRoute>() {
           @Override
           public void write(JsonWriter out, PeeringRoute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PeeringRoute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PeeringRoute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PeeringRoute
   * @throws IOException if the JSON string is invalid with respect to PeeringRoute
   */
  public static PeeringRoute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeeringRoute.class);
  }

  /**
   * Convert an instance of PeeringRoute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

