/*
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * External access firewall rules for filtering incoming traffic destined to &#x60;ExternalAddress&#x60; resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:01.834215-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExternalAccessRule {
  /**
   * The action that the external access rule performs.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ACTION_UNSPECIFIED("ACTION_UNSPECIFIED"),
    
    ALLOW("ALLOW"),
    
    DENY("DENY");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESTINATION_IP_RANGES = "destinationIpRanges";
  @SerializedName(SERIALIZED_NAME_DESTINATION_IP_RANGES)
  private List<IpRange> destinationIpRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_PORTS = "destinationPorts";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PORTS)
  private List<String> destinationPorts = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_PROTOCOL = "ipProtocol";
  @SerializedName(SERIALIZED_NAME_IP_PROTOCOL)
  private String ipProtocol;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_SOURCE_IP_RANGES = "sourceIpRanges";
  @SerializedName(SERIALIZED_NAME_SOURCE_IP_RANGES)
  private List<IpRange> sourceIpRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_PORTS = "sourcePorts";
  @SerializedName(SERIALIZED_NAME_SOURCE_PORTS)
  private List<String> sourcePorts = new ArrayList<>();

  /**
   * Output only. The state of the resource.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    CREATING("CREATING"),
    
    UPDATING("UPDATING"),
    
    DELETING("DELETING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public ExternalAccessRule() {
  }

  public ExternalAccessRule(
     String createTime, 
     String name, 
     StateEnum state, 
     String uid, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.state = state;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  public ExternalAccessRule action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * The action that the external access rule performs.
   * @return action
   */
  @javax.annotation.Nullable
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  /**
   * Output only. Creation time of this resource.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public ExternalAccessRule description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User-provided description for this external access rule.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ExternalAccessRule destinationIpRanges(List<IpRange> destinationIpRanges) {
    this.destinationIpRanges = destinationIpRanges;
    return this;
  }

  public ExternalAccessRule addDestinationIpRangesItem(IpRange destinationIpRangesItem) {
    if (this.destinationIpRanges == null) {
      this.destinationIpRanges = new ArrayList<>();
    }
    this.destinationIpRanges.add(destinationIpRangesItem);
    return this;
  }

  /**
   * If destination ranges are specified, the external access rule applies only to the traffic that has a destination IP address in these ranges. The specified IP addresses must have reserved external IP addresses in the scope of the parent network policy. To match all external IP addresses in the scope of the parent network policy, specify &#x60;0.0.0.0/0&#x60;. To match a specific external IP address, specify it using the &#x60;IpRange.external_address&#x60; property.
   * @return destinationIpRanges
   */
  @javax.annotation.Nullable
  public List<IpRange> getDestinationIpRanges() {
    return destinationIpRanges;
  }

  public void setDestinationIpRanges(List<IpRange> destinationIpRanges) {
    this.destinationIpRanges = destinationIpRanges;
  }


  public ExternalAccessRule destinationPorts(List<String> destinationPorts) {
    this.destinationPorts = destinationPorts;
    return this;
  }

  public ExternalAccessRule addDestinationPortsItem(String destinationPortsItem) {
    if (this.destinationPorts == null) {
      this.destinationPorts = new ArrayList<>();
    }
    this.destinationPorts.add(destinationPortsItem);
    return this;
  }

  /**
   * A list of destination ports to which the external access rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. For example: &#x60;[\&quot;22\&quot;]&#x60;, &#x60;[\&quot;80\&quot;,\&quot;443\&quot;]&#x60;, or &#x60;[\&quot;12345-12349\&quot;]&#x60;. To match all destination ports, specify &#x60;[\&quot;0-65535\&quot;]&#x60;.
   * @return destinationPorts
   */
  @javax.annotation.Nullable
  public List<String> getDestinationPorts() {
    return destinationPorts;
  }

  public void setDestinationPorts(List<String> destinationPorts) {
    this.destinationPorts = destinationPorts;
  }


  public ExternalAccessRule ipProtocol(String ipProtocol) {
    this.ipProtocol = ipProtocol;
    return this;
  }

  /**
   * The IP protocol to which the external access rule applies. This value can be one of the following three protocol strings (not case-sensitive): &#x60;tcp&#x60;, &#x60;udp&#x60;, or &#x60;icmp&#x60;.
   * @return ipProtocol
   */
  @javax.annotation.Nullable
  public String getIpProtocol() {
    return ipProtocol;
  }

  public void setIpProtocol(String ipProtocol) {
    this.ipProtocol = ipProtocol;
  }


  /**
   * Output only. The resource name of this external access rule. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: &#x60;projects/my-project/locations/us-central1/networkPolicies/my-policy/externalAccessRules/my-rule&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public ExternalAccessRule priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * External access rule priority, which determines the external access rule to use when multiple rules apply. If multiple rules have the same priority, their ordering is non-deterministic. If specific ordering is required, assign unique priorities to enforce such ordering. The external access rule priority is an integer from 100 to 4096, both inclusive. Lower integers indicate higher precedence. For example, a rule with priority &#x60;100&#x60; has higher precedence than a rule with priority &#x60;101&#x60;.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public ExternalAccessRule sourceIpRanges(List<IpRange> sourceIpRanges) {
    this.sourceIpRanges = sourceIpRanges;
    return this;
  }

  public ExternalAccessRule addSourceIpRangesItem(IpRange sourceIpRangesItem) {
    if (this.sourceIpRanges == null) {
      this.sourceIpRanges = new ArrayList<>();
    }
    this.sourceIpRanges.add(sourceIpRangesItem);
    return this;
  }

  /**
   * If source ranges are specified, the external access rule applies only to traffic that has a source IP address in these ranges. These ranges can either be expressed in the CIDR format or as an IP address. As only inbound rules are supported, &#x60;ExternalAddress&#x60; resources cannot be the source IP addresses of an external access rule. To match all source addresses, specify &#x60;0.0.0.0/0&#x60;.
   * @return sourceIpRanges
   */
  @javax.annotation.Nullable
  public List<IpRange> getSourceIpRanges() {
    return sourceIpRanges;
  }

  public void setSourceIpRanges(List<IpRange> sourceIpRanges) {
    this.sourceIpRanges = sourceIpRanges;
  }


  public ExternalAccessRule sourcePorts(List<String> sourcePorts) {
    this.sourcePorts = sourcePorts;
    return this;
  }

  public ExternalAccessRule addSourcePortsItem(String sourcePortsItem) {
    if (this.sourcePorts == null) {
      this.sourcePorts = new ArrayList<>();
    }
    this.sourcePorts.add(sourcePortsItem);
    return this;
  }

  /**
   * A list of source ports to which the external access rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. For example: &#x60;[\&quot;22\&quot;]&#x60;, &#x60;[\&quot;80\&quot;,\&quot;443\&quot;]&#x60;, or &#x60;[\&quot;12345-12349\&quot;]&#x60;. To match all source ports, specify &#x60;[\&quot;0-65535\&quot;]&#x60;.
   * @return sourcePorts
   */
  @javax.annotation.Nullable
  public List<String> getSourcePorts() {
    return sourcePorts;
  }

  public void setSourcePorts(List<String> sourcePorts) {
    this.sourcePorts = sourcePorts;
  }


  /**
   * Output only. The state of the resource.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. System-generated unique identifier for the resource.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. Last update time of this resource.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalAccessRule externalAccessRule = (ExternalAccessRule) o;
    return Objects.equals(this.action, externalAccessRule.action) &&
        Objects.equals(this.createTime, externalAccessRule.createTime) &&
        Objects.equals(this.description, externalAccessRule.description) &&
        Objects.equals(this.destinationIpRanges, externalAccessRule.destinationIpRanges) &&
        Objects.equals(this.destinationPorts, externalAccessRule.destinationPorts) &&
        Objects.equals(this.ipProtocol, externalAccessRule.ipProtocol) &&
        Objects.equals(this.name, externalAccessRule.name) &&
        Objects.equals(this.priority, externalAccessRule.priority) &&
        Objects.equals(this.sourceIpRanges, externalAccessRule.sourceIpRanges) &&
        Objects.equals(this.sourcePorts, externalAccessRule.sourcePorts) &&
        Objects.equals(this.state, externalAccessRule.state) &&
        Objects.equals(this.uid, externalAccessRule.uid) &&
        Objects.equals(this.updateTime, externalAccessRule.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, createTime, description, destinationIpRanges, destinationPorts, ipProtocol, name, priority, sourceIpRanges, sourcePorts, state, uid, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalAccessRule {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destinationIpRanges: ").append(toIndentedString(destinationIpRanges)).append("\n");
    sb.append("    destinationPorts: ").append(toIndentedString(destinationPorts)).append("\n");
    sb.append("    ipProtocol: ").append(toIndentedString(ipProtocol)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    sourceIpRanges: ").append(toIndentedString(sourceIpRanges)).append("\n");
    sb.append("    sourcePorts: ").append(toIndentedString(sourcePorts)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("destinationIpRanges");
    openapiFields.add("destinationPorts");
    openapiFields.add("ipProtocol");
    openapiFields.add("name");
    openapiFields.add("priority");
    openapiFields.add("sourceIpRanges");
    openapiFields.add("sourcePorts");
    openapiFields.add("state");
    openapiFields.add("uid");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExternalAccessRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalAccessRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalAccessRule is not found in the empty JSON string", ExternalAccessRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExternalAccessRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalAccessRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        ActionEnum.validateJsonElement(jsonObj.get("action"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("destinationIpRanges") != null && !jsonObj.get("destinationIpRanges").isJsonNull()) {
        JsonArray jsonArraydestinationIpRanges = jsonObj.getAsJsonArray("destinationIpRanges");
        if (jsonArraydestinationIpRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinationIpRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinationIpRanges` to be an array in the JSON string but got `%s`", jsonObj.get("destinationIpRanges").toString()));
          }

          // validate the optional field `destinationIpRanges` (array)
          for (int i = 0; i < jsonArraydestinationIpRanges.size(); i++) {
            IpRange.validateJsonElement(jsonArraydestinationIpRanges.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinationPorts") != null && !jsonObj.get("destinationPorts").isJsonNull() && !jsonObj.get("destinationPorts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationPorts` to be an array in the JSON string but got `%s`", jsonObj.get("destinationPorts").toString()));
      }
      if ((jsonObj.get("ipProtocol") != null && !jsonObj.get("ipProtocol").isJsonNull()) && !jsonObj.get("ipProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipProtocol").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("sourceIpRanges") != null && !jsonObj.get("sourceIpRanges").isJsonNull()) {
        JsonArray jsonArraysourceIpRanges = jsonObj.getAsJsonArray("sourceIpRanges");
        if (jsonArraysourceIpRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sourceIpRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sourceIpRanges` to be an array in the JSON string but got `%s`", jsonObj.get("sourceIpRanges").toString()));
          }

          // validate the optional field `sourceIpRanges` (array)
          for (int i = 0; i < jsonArraysourceIpRanges.size(); i++) {
            IpRange.validateJsonElement(jsonArraysourceIpRanges.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourcePorts") != null && !jsonObj.get("sourcePorts").isJsonNull() && !jsonObj.get("sourcePorts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePorts` to be an array in the JSON string but got `%s`", jsonObj.get("sourcePorts").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalAccessRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalAccessRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalAccessRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalAccessRule.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalAccessRule>() {
           @Override
           public void write(JsonWriter out, ExternalAccessRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalAccessRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExternalAccessRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExternalAccessRule
   * @throws IOException if the JSON string is invalid with respect to ExternalAccessRule
   */
  public static ExternalAccessRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalAccessRule.class);
  }

  /**
   * Convert an instance of ExternalAccessRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

