/*
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a network peering.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:01.834215-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkPeering {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXCHANGE_SUBNET_ROUTES = "exchangeSubnetRoutes";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_SUBNET_ROUTES)
  private Boolean exchangeSubnetRoutes;

  public static final String SERIALIZED_NAME_EXPORT_CUSTOM_ROUTES = "exportCustomRoutes";
  @SerializedName(SERIALIZED_NAME_EXPORT_CUSTOM_ROUTES)
  private Boolean exportCustomRoutes;

  public static final String SERIALIZED_NAME_EXPORT_CUSTOM_ROUTES_WITH_PUBLIC_IP = "exportCustomRoutesWithPublicIp";
  @SerializedName(SERIALIZED_NAME_EXPORT_CUSTOM_ROUTES_WITH_PUBLIC_IP)
  private Boolean exportCustomRoutesWithPublicIp;

  public static final String SERIALIZED_NAME_IMPORT_CUSTOM_ROUTES = "importCustomRoutes";
  @SerializedName(SERIALIZED_NAME_IMPORT_CUSTOM_ROUTES)
  private Boolean importCustomRoutes;

  public static final String SERIALIZED_NAME_IMPORT_CUSTOM_ROUTES_WITH_PUBLIC_IP = "importCustomRoutesWithPublicIp";
  @SerializedName(SERIALIZED_NAME_IMPORT_CUSTOM_ROUTES_WITH_PUBLIC_IP)
  private Boolean importCustomRoutesWithPublicIp;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PEER_MTU = "peerMtu";
  @SerializedName(SERIALIZED_NAME_PEER_MTU)
  private Integer peerMtu;

  public static final String SERIALIZED_NAME_PEER_NETWORK = "peerNetwork";
  @SerializedName(SERIALIZED_NAME_PEER_NETWORK)
  private String peerNetwork;

  /**
   * Required. The type of the network to peer with the VMware Engine network.
   */
  @JsonAdapter(PeerNetworkTypeEnum.Adapter.class)
  public enum PeerNetworkTypeEnum {
    PEER_NETWORK_TYPE_UNSPECIFIED("PEER_NETWORK_TYPE_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    VMWARE_ENGINE_NETWORK("VMWARE_ENGINE_NETWORK"),
    
    PRIVATE_SERVICES_ACCESS("PRIVATE_SERVICES_ACCESS"),
    
    NETAPP_CLOUD_VOLUMES("NETAPP_CLOUD_VOLUMES"),
    
    THIRD_PARTY_SERVICE("THIRD_PARTY_SERVICE"),
    
    DELL_POWERSCALE("DELL_POWERSCALE");

    private String value;

    PeerNetworkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeerNetworkTypeEnum fromValue(String value) {
      for (PeerNetworkTypeEnum b : PeerNetworkTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeerNetworkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeerNetworkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeerNetworkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeerNetworkTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PeerNetworkTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PEER_NETWORK_TYPE = "peerNetworkType";
  @SerializedName(SERIALIZED_NAME_PEER_NETWORK_TYPE)
  private PeerNetworkTypeEnum peerNetworkType;

  /**
   * Output only. State of the network peering. This field has a value of &#39;ACTIVE&#39; when there&#39;s a matching configuration in the peer network. New values may be added to this enum when appropriate.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    INACTIVE("INACTIVE"),
    
    ACTIVE("ACTIVE"),
    
    CREATING("CREATING"),
    
    DELETING("DELETING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_DETAILS = "stateDetails";
  @SerializedName(SERIALIZED_NAME_STATE_DETAILS)
  private String stateDetails;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VMWARE_ENGINE_NETWORK = "vmwareEngineNetwork";
  @SerializedName(SERIALIZED_NAME_VMWARE_ENGINE_NETWORK)
  private String vmwareEngineNetwork;

  public NetworkPeering() {
  }

  public NetworkPeering(
     String createTime, 
     String name, 
     StateEnum state, 
     String stateDetails, 
     String uid, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.state = state;
    this.stateDetails = stateDetails;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Creation time of this resource.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public NetworkPeering description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. User-provided description for this network peering.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NetworkPeering exchangeSubnetRoutes(Boolean exchangeSubnetRoutes) {
    this.exchangeSubnetRoutes = exchangeSubnetRoutes;
    return this;
  }

  /**
   * Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is &#39;ACTIVE&#39;.
   * @return exchangeSubnetRoutes
   */
  @javax.annotation.Nullable
  public Boolean getExchangeSubnetRoutes() {
    return exchangeSubnetRoutes;
  }

  public void setExchangeSubnetRoutes(Boolean exchangeSubnetRoutes) {
    this.exchangeSubnetRoutes = exchangeSubnetRoutes;
  }


  public NetworkPeering exportCustomRoutes(Boolean exportCustomRoutes) {
    this.exportCustomRoutes = exportCustomRoutes;
    return this;
  }

  /**
   * Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.
   * @return exportCustomRoutes
   */
  @javax.annotation.Nullable
  public Boolean getExportCustomRoutes() {
    return exportCustomRoutes;
  }

  public void setExportCustomRoutes(Boolean exportCustomRoutes) {
    this.exportCustomRoutes = exportCustomRoutes;
  }


  public NetworkPeering exportCustomRoutesWithPublicIp(Boolean exportCustomRoutesWithPublicIp) {
    this.exportCustomRoutesWithPublicIp = exportCustomRoutesWithPublicIp;
    return this;
  }

  /**
   * Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
   * @return exportCustomRoutesWithPublicIp
   */
  @javax.annotation.Nullable
  public Boolean getExportCustomRoutesWithPublicIp() {
    return exportCustomRoutesWithPublicIp;
  }

  public void setExportCustomRoutesWithPublicIp(Boolean exportCustomRoutesWithPublicIp) {
    this.exportCustomRoutesWithPublicIp = exportCustomRoutesWithPublicIp;
  }


  public NetworkPeering importCustomRoutes(Boolean importCustomRoutes) {
    this.importCustomRoutes = importCustomRoutes;
    return this;
  }

  /**
   * Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.
   * @return importCustomRoutes
   */
  @javax.annotation.Nullable
  public Boolean getImportCustomRoutes() {
    return importCustomRoutes;
  }

  public void setImportCustomRoutes(Boolean importCustomRoutes) {
    this.importCustomRoutes = importCustomRoutes;
  }


  public NetworkPeering importCustomRoutesWithPublicIp(Boolean importCustomRoutesWithPublicIp) {
    this.importCustomRoutesWithPublicIp = importCustomRoutesWithPublicIp;
    return this;
  }

  /**
   * Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.
   * @return importCustomRoutesWithPublicIp
   */
  @javax.annotation.Nullable
  public Boolean getImportCustomRoutesWithPublicIp() {
    return importCustomRoutesWithPublicIp;
  }

  public void setImportCustomRoutesWithPublicIp(Boolean importCustomRoutesWithPublicIp) {
    this.importCustomRoutesWithPublicIp = importCustomRoutesWithPublicIp;
  }


  /**
   * Output only. The resource name of the network peering. NetworkPeering is a global resource and location can only be global. Resource names are scheme-less URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: &#x60;projects/my-project/locations/global/networkPeerings/my-peering&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public NetworkPeering peerMtu(Integer peerMtu) {
    this.peerMtu = peerMtu;
    return this;
  }

  /**
   * Optional. Maximum transmission unit (MTU) in bytes. The default value is &#x60;1500&#x60;. If a value of &#x60;0&#x60; is provided for this field, VMware Engine uses the default value instead.
   * @return peerMtu
   */
  @javax.annotation.Nullable
  public Integer getPeerMtu() {
    return peerMtu;
  }

  public void setPeerMtu(Integer peerMtu) {
    this.peerMtu = peerMtu;
  }


  public NetworkPeering peerNetwork(String peerNetwork) {
    this.peerNetwork = peerNetwork;
    return this;
  }

  /**
   * Required. The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the &#x60;peer_network_type&#x60; is VMWARE_ENGINE_NETWORK, specify the name in the form: &#x60;projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}&#x60;. Otherwise specify the name in the form: &#x60;projects/{project}/global/networks/{network_id}&#x60;, where &#x60;{project}&#x60; can either be a project number or a project ID.
   * @return peerNetwork
   */
  @javax.annotation.Nullable
  public String getPeerNetwork() {
    return peerNetwork;
  }

  public void setPeerNetwork(String peerNetwork) {
    this.peerNetwork = peerNetwork;
  }


  public NetworkPeering peerNetworkType(PeerNetworkTypeEnum peerNetworkType) {
    this.peerNetworkType = peerNetworkType;
    return this;
  }

  /**
   * Required. The type of the network to peer with the VMware Engine network.
   * @return peerNetworkType
   */
  @javax.annotation.Nullable
  public PeerNetworkTypeEnum getPeerNetworkType() {
    return peerNetworkType;
  }

  public void setPeerNetworkType(PeerNetworkTypeEnum peerNetworkType) {
    this.peerNetworkType = peerNetworkType;
  }


  /**
   * Output only. State of the network peering. This field has a value of &#39;ACTIVE&#39; when there&#39;s a matching configuration in the peer network. New values may be added to this enum when appropriate.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Output Only. Details about the current state of the network peering.
   * @return stateDetails
   */
  @javax.annotation.Nullable
  public String getStateDetails() {
    return stateDetails;
  }



  /**
   * Output only. System-generated unique identifier for the resource.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. Last update time of this resource.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public NetworkPeering vmwareEngineNetwork(String vmwareEngineNetwork) {
    this.vmwareEngineNetwork = vmwareEngineNetwork;
    return this;
  }

  /**
   * Required. The relative resource name of the VMware Engine network. Specify the name in the following form: &#x60;projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}&#x60; where &#x60;{project}&#x60; can either be a project number or a project ID.
   * @return vmwareEngineNetwork
   */
  @javax.annotation.Nullable
  public String getVmwareEngineNetwork() {
    return vmwareEngineNetwork;
  }

  public void setVmwareEngineNetwork(String vmwareEngineNetwork) {
    this.vmwareEngineNetwork = vmwareEngineNetwork;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkPeering networkPeering = (NetworkPeering) o;
    return Objects.equals(this.createTime, networkPeering.createTime) &&
        Objects.equals(this.description, networkPeering.description) &&
        Objects.equals(this.exchangeSubnetRoutes, networkPeering.exchangeSubnetRoutes) &&
        Objects.equals(this.exportCustomRoutes, networkPeering.exportCustomRoutes) &&
        Objects.equals(this.exportCustomRoutesWithPublicIp, networkPeering.exportCustomRoutesWithPublicIp) &&
        Objects.equals(this.importCustomRoutes, networkPeering.importCustomRoutes) &&
        Objects.equals(this.importCustomRoutesWithPublicIp, networkPeering.importCustomRoutesWithPublicIp) &&
        Objects.equals(this.name, networkPeering.name) &&
        Objects.equals(this.peerMtu, networkPeering.peerMtu) &&
        Objects.equals(this.peerNetwork, networkPeering.peerNetwork) &&
        Objects.equals(this.peerNetworkType, networkPeering.peerNetworkType) &&
        Objects.equals(this.state, networkPeering.state) &&
        Objects.equals(this.stateDetails, networkPeering.stateDetails) &&
        Objects.equals(this.uid, networkPeering.uid) &&
        Objects.equals(this.updateTime, networkPeering.updateTime) &&
        Objects.equals(this.vmwareEngineNetwork, networkPeering.vmwareEngineNetwork);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, exchangeSubnetRoutes, exportCustomRoutes, exportCustomRoutesWithPublicIp, importCustomRoutes, importCustomRoutesWithPublicIp, name, peerMtu, peerNetwork, peerNetworkType, state, stateDetails, uid, updateTime, vmwareEngineNetwork);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkPeering {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    exchangeSubnetRoutes: ").append(toIndentedString(exchangeSubnetRoutes)).append("\n");
    sb.append("    exportCustomRoutes: ").append(toIndentedString(exportCustomRoutes)).append("\n");
    sb.append("    exportCustomRoutesWithPublicIp: ").append(toIndentedString(exportCustomRoutesWithPublicIp)).append("\n");
    sb.append("    importCustomRoutes: ").append(toIndentedString(importCustomRoutes)).append("\n");
    sb.append("    importCustomRoutesWithPublicIp: ").append(toIndentedString(importCustomRoutesWithPublicIp)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    peerMtu: ").append(toIndentedString(peerMtu)).append("\n");
    sb.append("    peerNetwork: ").append(toIndentedString(peerNetwork)).append("\n");
    sb.append("    peerNetworkType: ").append(toIndentedString(peerNetworkType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateDetails: ").append(toIndentedString(stateDetails)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    vmwareEngineNetwork: ").append(toIndentedString(vmwareEngineNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("exchangeSubnetRoutes");
    openapiFields.add("exportCustomRoutes");
    openapiFields.add("exportCustomRoutesWithPublicIp");
    openapiFields.add("importCustomRoutes");
    openapiFields.add("importCustomRoutesWithPublicIp");
    openapiFields.add("name");
    openapiFields.add("peerMtu");
    openapiFields.add("peerNetwork");
    openapiFields.add("peerNetworkType");
    openapiFields.add("state");
    openapiFields.add("stateDetails");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("vmwareEngineNetwork");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkPeering
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkPeering.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkPeering is not found in the empty JSON string", NetworkPeering.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkPeering.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkPeering` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("peerNetwork") != null && !jsonObj.get("peerNetwork").isJsonNull()) && !jsonObj.get("peerNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peerNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peerNetwork").toString()));
      }
      if ((jsonObj.get("peerNetworkType") != null && !jsonObj.get("peerNetworkType").isJsonNull()) && !jsonObj.get("peerNetworkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peerNetworkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peerNetworkType").toString()));
      }
      // validate the optional field `peerNetworkType`
      if (jsonObj.get("peerNetworkType") != null && !jsonObj.get("peerNetworkType").isJsonNull()) {
        PeerNetworkTypeEnum.validateJsonElement(jsonObj.get("peerNetworkType"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("stateDetails") != null && !jsonObj.get("stateDetails").isJsonNull()) && !jsonObj.get("stateDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateDetails").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("vmwareEngineNetwork") != null && !jsonObj.get("vmwareEngineNetwork").isJsonNull()) && !jsonObj.get("vmwareEngineNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmwareEngineNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmwareEngineNetwork").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkPeering.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkPeering' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkPeering> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkPeering.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkPeering>() {
           @Override
           public void write(JsonWriter out, NetworkPeering value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkPeering read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkPeering given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkPeering
   * @throws IOException if the JSON string is invalid with respect to NetworkPeering
   */
  public static NetworkPeering fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkPeering.class);
  }

  /**
   * Convert an instance of NetworkPeering to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

