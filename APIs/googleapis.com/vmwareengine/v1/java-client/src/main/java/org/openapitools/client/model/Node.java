/*
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Node in a cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:01.834215-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Node {
  public static final String SERIALIZED_NAME_CUSTOM_CORE_COUNT = "customCoreCount";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CORE_COUNT)
  private String customCoreCount;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_INTERNAL_IP = "internalIp";
  @SerializedName(SERIALIZED_NAME_INTERNAL_IP)
  private String internalIp;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_TYPE_ID = "nodeTypeId";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE_ID)
  private String nodeTypeId;

  /**
   * Output only. The state of the appliance.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    CREATING("CREATING"),
    
    FAILED("FAILED"),
    
    UPGRADING("UPGRADING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Node() {
  }

  public Node(
     String customCoreCount, 
     String fqdn, 
     String internalIp, 
     String name, 
     String nodeTypeId, 
     StateEnum state, 
     String version
  ) {
    this();
    this.customCoreCount = customCoreCount;
    this.fqdn = fqdn;
    this.internalIp = internalIp;
    this.name = name;
    this.nodeTypeId = nodeTypeId;
    this.state = state;
    this.version = version;
  }

  /**
   * Output only. Customized number of cores
   * @return customCoreCount
   */
  @javax.annotation.Nullable
  public String getCustomCoreCount() {
    return customCoreCount;
  }



  /**
   * Output only. Fully qualified domain name of the node.
   * @return fqdn
   */
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }



  /**
   * Output only. Internal IP address of the node.
   * @return internalIp
   */
  @javax.annotation.Nullable
  public String getInternalIp() {
    return internalIp;
  }



  /**
   * Output only. The resource name of this node. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: projects/my-project/locations/us-central1-a/privateClouds/my-cloud/clusters/my-cluster/nodes/my-node
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The canonical identifier of the node type (corresponds to the &#x60;NodeType&#x60;). For example: standard-72.
   * @return nodeTypeId
   */
  @javax.annotation.Nullable
  public String getNodeTypeId() {
    return nodeTypeId;
  }



  /**
   * Output only. The state of the appliance.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The version number of the VMware ESXi management component in this cluster.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Node node = (Node) o;
    return Objects.equals(this.customCoreCount, node.customCoreCount) &&
        Objects.equals(this.fqdn, node.fqdn) &&
        Objects.equals(this.internalIp, node.internalIp) &&
        Objects.equals(this.name, node.name) &&
        Objects.equals(this.nodeTypeId, node.nodeTypeId) &&
        Objects.equals(this.state, node.state) &&
        Objects.equals(this.version, node.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customCoreCount, fqdn, internalIp, name, nodeTypeId, state, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Node {\n");
    sb.append("    customCoreCount: ").append(toIndentedString(customCoreCount)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    internalIp: ").append(toIndentedString(internalIp)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeTypeId: ").append(toIndentedString(nodeTypeId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customCoreCount");
    openapiFields.add("fqdn");
    openapiFields.add("internalIp");
    openapiFields.add("name");
    openapiFields.add("nodeTypeId");
    openapiFields.add("state");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Node
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Node.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Node is not found in the empty JSON string", Node.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Node.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Node` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customCoreCount") != null && !jsonObj.get("customCoreCount").isJsonNull()) && !jsonObj.get("customCoreCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customCoreCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customCoreCount").toString()));
      }
      if ((jsonObj.get("fqdn") != null && !jsonObj.get("fqdn").isJsonNull()) && !jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      if ((jsonObj.get("internalIp") != null && !jsonObj.get("internalIp").isJsonNull()) && !jsonObj.get("internalIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalIp").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nodeTypeId") != null && !jsonObj.get("nodeTypeId").isJsonNull()) && !jsonObj.get("nodeTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeTypeId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Node.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Node' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Node> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Node.class));

       return (TypeAdapter<T>) new TypeAdapter<Node>() {
           @Override
           public void write(JsonWriter out, Node value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Node read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Node given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Node
   * @throws IOException if the JSON string is invalid with respect to Node
   */
  public static Node fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Node.class);
  }

  /**
   * Convert an instance of Node to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

