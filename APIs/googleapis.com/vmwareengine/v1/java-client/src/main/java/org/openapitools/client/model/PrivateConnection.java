/*
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Private connection resource that provides connectivity for VMware Engine private clouds.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:01.834215-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrivateConnection {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PEERING_ID = "peeringId";
  @SerializedName(SERIALIZED_NAME_PEERING_ID)
  private String peeringId;

  /**
   * Output only. Peering state between service network and VMware Engine network.
   */
  @JsonAdapter(PeeringStateEnum.Adapter.class)
  public enum PeeringStateEnum {
    STATE_UNSPECIFIED("PEERING_STATE_UNSPECIFIED"),
    
    ACTIVE("PEERING_ACTIVE"),
    
    INACTIVE("PEERING_INACTIVE");

    private String value;

    PeeringStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeeringStateEnum fromValue(String value) {
      for (PeeringStateEnum b : PeeringStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeeringStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeeringStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeeringStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeeringStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PeeringStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PEERING_STATE = "peeringState";
  @SerializedName(SERIALIZED_NAME_PEERING_STATE)
  private PeeringStateEnum peeringState;

  /**
   * Optional. Routing Mode. Default value is set to GLOBAL. For type &#x3D; PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for other types only GLOBAL is supported.
   */
  @JsonAdapter(RoutingModeEnum.Adapter.class)
  public enum RoutingModeEnum {
    ROUTING_MODE_UNSPECIFIED("ROUTING_MODE_UNSPECIFIED"),
    
    GLOBAL("GLOBAL"),
    
    REGIONAL("REGIONAL");

    private String value;

    RoutingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoutingModeEnum fromValue(String value) {
      for (RoutingModeEnum b : RoutingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoutingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoutingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoutingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoutingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoutingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROUTING_MODE = "routingMode";
  @SerializedName(SERIALIZED_NAME_ROUTING_MODE)
  private RoutingModeEnum routingMode;

  public static final String SERIALIZED_NAME_SERVICE_NETWORK = "serviceNetwork";
  @SerializedName(SERIALIZED_NAME_SERVICE_NETWORK)
  private String serviceNetwork;

  /**
   * Output only. State of the private connection.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    UPDATING("UPDATING"),
    
    DELETING("DELETING"),
    
    UNPROVISIONED("UNPROVISIONED"),
    
    FAILED("FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Required. Private connection type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    PRIVATE_SERVICE_ACCESS("PRIVATE_SERVICE_ACCESS"),
    
    NETAPP_CLOUD_VOLUMES("NETAPP_CLOUD_VOLUMES"),
    
    DELL_POWERSCALE("DELL_POWERSCALE"),
    
    THIRD_PARTY_SERVICE("THIRD_PARTY_SERVICE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VMWARE_ENGINE_NETWORK = "vmwareEngineNetwork";
  @SerializedName(SERIALIZED_NAME_VMWARE_ENGINE_NETWORK)
  private String vmwareEngineNetwork;

  public static final String SERIALIZED_NAME_VMWARE_ENGINE_NETWORK_CANONICAL = "vmwareEngineNetworkCanonical";
  @SerializedName(SERIALIZED_NAME_VMWARE_ENGINE_NETWORK_CANONICAL)
  private String vmwareEngineNetworkCanonical;

  public PrivateConnection() {
  }

  public PrivateConnection(
     String createTime, 
     String name, 
     String peeringId, 
     PeeringStateEnum peeringState, 
     StateEnum state, 
     String uid, 
     String updateTime, 
     String vmwareEngineNetworkCanonical
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.peeringId = peeringId;
    this.peeringState = peeringState;
    this.state = state;
    this.uid = uid;
    this.updateTime = updateTime;
    this.vmwareEngineNetworkCanonical = vmwareEngineNetworkCanonical;
  }

  /**
   * Output only. Creation time of this resource.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public PrivateConnection description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. User-provided description for this private connection.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. The resource name of the private connection. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: &#x60;projects/my-project/locations/us-central1/privateConnections/my-connection&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. VPC network peering id between given network VPC and VMwareEngineNetwork.
   * @return peeringId
   */
  @javax.annotation.Nullable
  public String getPeeringId() {
    return peeringId;
  }



  /**
   * Output only. Peering state between service network and VMware Engine network.
   * @return peeringState
   */
  @javax.annotation.Nullable
  public PeeringStateEnum getPeeringState() {
    return peeringState;
  }



  public PrivateConnection routingMode(RoutingModeEnum routingMode) {
    this.routingMode = routingMode;
    return this;
  }

  /**
   * Optional. Routing Mode. Default value is set to GLOBAL. For type &#x3D; PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for other types only GLOBAL is supported.
   * @return routingMode
   */
  @javax.annotation.Nullable
  public RoutingModeEnum getRoutingMode() {
    return routingMode;
  }

  public void setRoutingMode(RoutingModeEnum routingMode) {
    this.routingMode = routingMode;
  }


  public PrivateConnection serviceNetwork(String serviceNetwork) {
    this.serviceNetwork = serviceNetwork;
    return this;
  }

  /**
   * Required. Service network to create private connection. Specify the name in the following form: &#x60;projects/{project}/global/networks/{network_id}&#x60; For type &#x3D; PRIVATE_SERVICE_ACCESS, this field represents servicenetworking VPC, e.g. projects/project-tp/global/networks/servicenetworking. For type &#x3D; NETAPP_CLOUD_VOLUME, this field represents NetApp service VPC, e.g. projects/project-tp/global/networks/netapp-tenant-vpc. For type &#x3D; DELL_POWERSCALE, this field represent Dell service VPC, e.g. projects/project-tp/global/networks/dell-tenant-vpc. For type&#x3D; THIRD_PARTY_SERVICE, this field could represent a consumer VPC or any other producer VPC to which the VMware Engine Network needs to be connected, e.g. projects/project/global/networks/vpc.
   * @return serviceNetwork
   */
  @javax.annotation.Nullable
  public String getServiceNetwork() {
    return serviceNetwork;
  }

  public void setServiceNetwork(String serviceNetwork) {
    this.serviceNetwork = serviceNetwork;
  }


  /**
   * Output only. State of the private connection.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public PrivateConnection type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Required. Private connection type.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. System-generated unique identifier for the resource.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. Last update time of this resource.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public PrivateConnection vmwareEngineNetwork(String vmwareEngineNetwork) {
    this.vmwareEngineNetwork = vmwareEngineNetwork;
    return this;
  }

  /**
   * Required. The relative resource name of Legacy VMware Engine network. Specify the name in the following form: &#x60;projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}&#x60; where &#x60;{project}&#x60;, &#x60;{location}&#x60; will be same as specified in private connection resource name and &#x60;{vmware_engine_network_id}&#x60; will be in the form of &#x60;{location}&#x60;-default e.g. projects/project/locations/us-central1/vmwareEngineNetworks/us-central1-default.
   * @return vmwareEngineNetwork
   */
  @javax.annotation.Nullable
  public String getVmwareEngineNetwork() {
    return vmwareEngineNetwork;
  }

  public void setVmwareEngineNetwork(String vmwareEngineNetwork) {
    this.vmwareEngineNetwork = vmwareEngineNetwork;
  }


  /**
   * Output only. The canonical name of the VMware Engine network in the form: &#x60;projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}&#x60;
   * @return vmwareEngineNetworkCanonical
   */
  @javax.annotation.Nullable
  public String getVmwareEngineNetworkCanonical() {
    return vmwareEngineNetworkCanonical;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivateConnection privateConnection = (PrivateConnection) o;
    return Objects.equals(this.createTime, privateConnection.createTime) &&
        Objects.equals(this.description, privateConnection.description) &&
        Objects.equals(this.name, privateConnection.name) &&
        Objects.equals(this.peeringId, privateConnection.peeringId) &&
        Objects.equals(this.peeringState, privateConnection.peeringState) &&
        Objects.equals(this.routingMode, privateConnection.routingMode) &&
        Objects.equals(this.serviceNetwork, privateConnection.serviceNetwork) &&
        Objects.equals(this.state, privateConnection.state) &&
        Objects.equals(this.type, privateConnection.type) &&
        Objects.equals(this.uid, privateConnection.uid) &&
        Objects.equals(this.updateTime, privateConnection.updateTime) &&
        Objects.equals(this.vmwareEngineNetwork, privateConnection.vmwareEngineNetwork) &&
        Objects.equals(this.vmwareEngineNetworkCanonical, privateConnection.vmwareEngineNetworkCanonical);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, name, peeringId, peeringState, routingMode, serviceNetwork, state, type, uid, updateTime, vmwareEngineNetwork, vmwareEngineNetworkCanonical);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivateConnection {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    peeringId: ").append(toIndentedString(peeringId)).append("\n");
    sb.append("    peeringState: ").append(toIndentedString(peeringState)).append("\n");
    sb.append("    routingMode: ").append(toIndentedString(routingMode)).append("\n");
    sb.append("    serviceNetwork: ").append(toIndentedString(serviceNetwork)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    vmwareEngineNetwork: ").append(toIndentedString(vmwareEngineNetwork)).append("\n");
    sb.append("    vmwareEngineNetworkCanonical: ").append(toIndentedString(vmwareEngineNetworkCanonical)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("peeringId");
    openapiFields.add("peeringState");
    openapiFields.add("routingMode");
    openapiFields.add("serviceNetwork");
    openapiFields.add("state");
    openapiFields.add("type");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("vmwareEngineNetwork");
    openapiFields.add("vmwareEngineNetworkCanonical");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrivateConnection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrivateConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrivateConnection is not found in the empty JSON string", PrivateConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrivateConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrivateConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("peeringId") != null && !jsonObj.get("peeringId").isJsonNull()) && !jsonObj.get("peeringId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peeringId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peeringId").toString()));
      }
      if ((jsonObj.get("peeringState") != null && !jsonObj.get("peeringState").isJsonNull()) && !jsonObj.get("peeringState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peeringState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peeringState").toString()));
      }
      // validate the optional field `peeringState`
      if (jsonObj.get("peeringState") != null && !jsonObj.get("peeringState").isJsonNull()) {
        PeeringStateEnum.validateJsonElement(jsonObj.get("peeringState"));
      }
      if ((jsonObj.get("routingMode") != null && !jsonObj.get("routingMode").isJsonNull()) && !jsonObj.get("routingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingMode").toString()));
      }
      // validate the optional field `routingMode`
      if (jsonObj.get("routingMode") != null && !jsonObj.get("routingMode").isJsonNull()) {
        RoutingModeEnum.validateJsonElement(jsonObj.get("routingMode"));
      }
      if ((jsonObj.get("serviceNetwork") != null && !jsonObj.get("serviceNetwork").isJsonNull()) && !jsonObj.get("serviceNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceNetwork").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("vmwareEngineNetwork") != null && !jsonObj.get("vmwareEngineNetwork").isJsonNull()) && !jsonObj.get("vmwareEngineNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmwareEngineNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmwareEngineNetwork").toString()));
      }
      if ((jsonObj.get("vmwareEngineNetworkCanonical") != null && !jsonObj.get("vmwareEngineNetworkCanonical").isJsonNull()) && !jsonObj.get("vmwareEngineNetworkCanonical").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmwareEngineNetworkCanonical` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmwareEngineNetworkCanonical").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrivateConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrivateConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrivateConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrivateConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<PrivateConnection>() {
           @Override
           public void write(JsonWriter out, PrivateConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrivateConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrivateConnection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrivateConnection
   * @throws IOException if the JSON string is invalid with respect to PrivateConnection
   */
  public static PrivateConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrivateConnection.class);
  }

  /**
   * Convert an instance of PrivateConnection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

