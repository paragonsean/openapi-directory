/*
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NetworkService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a network policy resource. Network policies are regional resources. You can use a network policy to enable or disable internet access and external IP access. Network policies are associated with a VMware Engine network, which might span across regions. For a given region, a network policy applies to all private clouds in the VMware Engine network associated with the policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:01.834215-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkPolicy {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EDGE_SERVICES_CIDR = "edgeServicesCidr";
  @SerializedName(SERIALIZED_NAME_EDGE_SERVICES_CIDR)
  private String edgeServicesCidr;

  public static final String SERIALIZED_NAME_EXTERNAL_IP = "externalIp";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IP)
  private NetworkService externalIp;

  public static final String SERIALIZED_NAME_INTERNET_ACCESS = "internetAccess";
  @SerializedName(SERIALIZED_NAME_INTERNET_ACCESS)
  private NetworkService internetAccess;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VMWARE_ENGINE_NETWORK = "vmwareEngineNetwork";
  @SerializedName(SERIALIZED_NAME_VMWARE_ENGINE_NETWORK)
  private String vmwareEngineNetwork;

  public static final String SERIALIZED_NAME_VMWARE_ENGINE_NETWORK_CANONICAL = "vmwareEngineNetworkCanonical";
  @SerializedName(SERIALIZED_NAME_VMWARE_ENGINE_NETWORK_CANONICAL)
  private String vmwareEngineNetworkCanonical;

  public NetworkPolicy() {
  }

  public NetworkPolicy(
     String createTime, 
     String name, 
     String uid, 
     String updateTime, 
     String vmwareEngineNetworkCanonical
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.uid = uid;
    this.updateTime = updateTime;
    this.vmwareEngineNetworkCanonical = vmwareEngineNetworkCanonical;
  }

  /**
   * Output only. Creation time of this resource.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public NetworkPolicy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. User-provided description for this network policy.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NetworkPolicy edgeServicesCidr(String edgeServicesCidr) {
    this.edgeServicesCidr = edgeServicesCidr;
    return this;
  }

  /**
   * Required. IP address range in CIDR notation used to create internet access and external IP access. An RFC 1918 CIDR block, with a \&quot;/26\&quot; prefix, is required. The range cannot overlap with any prefixes either in the consumer VPC network or in use by the private clouds attached to that VPC network.
   * @return edgeServicesCidr
   */
  @javax.annotation.Nullable
  public String getEdgeServicesCidr() {
    return edgeServicesCidr;
  }

  public void setEdgeServicesCidr(String edgeServicesCidr) {
    this.edgeServicesCidr = edgeServicesCidr;
  }


  public NetworkPolicy externalIp(NetworkService externalIp) {
    this.externalIp = externalIp;
    return this;
  }

  /**
   * Get externalIp
   * @return externalIp
   */
  @javax.annotation.Nullable
  public NetworkService getExternalIp() {
    return externalIp;
  }

  public void setExternalIp(NetworkService externalIp) {
    this.externalIp = externalIp;
  }


  public NetworkPolicy internetAccess(NetworkService internetAccess) {
    this.internetAccess = internetAccess;
    return this;
  }

  /**
   * Get internetAccess
   * @return internetAccess
   */
  @javax.annotation.Nullable
  public NetworkService getInternetAccess() {
    return internetAccess;
  }

  public void setInternetAccess(NetworkService internetAccess) {
    this.internetAccess = internetAccess;
  }


  /**
   * Output only. The resource name of this network policy. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: &#x60;projects/my-project/locations/us-central1/networkPolicies/my-network-policy&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. System-generated unique identifier for the resource.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. Last update time of this resource.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public NetworkPolicy vmwareEngineNetwork(String vmwareEngineNetwork) {
    this.vmwareEngineNetwork = vmwareEngineNetwork;
    return this;
  }

  /**
   * Optional. The relative resource name of the VMware Engine network. Specify the name in the following form: &#x60;projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}&#x60; where &#x60;{project}&#x60; can either be a project number or a project ID.
   * @return vmwareEngineNetwork
   */
  @javax.annotation.Nullable
  public String getVmwareEngineNetwork() {
    return vmwareEngineNetwork;
  }

  public void setVmwareEngineNetwork(String vmwareEngineNetwork) {
    this.vmwareEngineNetwork = vmwareEngineNetwork;
  }


  /**
   * Output only. The canonical name of the VMware Engine network in the form: &#x60;projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}&#x60;
   * @return vmwareEngineNetworkCanonical
   */
  @javax.annotation.Nullable
  public String getVmwareEngineNetworkCanonical() {
    return vmwareEngineNetworkCanonical;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkPolicy networkPolicy = (NetworkPolicy) o;
    return Objects.equals(this.createTime, networkPolicy.createTime) &&
        Objects.equals(this.description, networkPolicy.description) &&
        Objects.equals(this.edgeServicesCidr, networkPolicy.edgeServicesCidr) &&
        Objects.equals(this.externalIp, networkPolicy.externalIp) &&
        Objects.equals(this.internetAccess, networkPolicy.internetAccess) &&
        Objects.equals(this.name, networkPolicy.name) &&
        Objects.equals(this.uid, networkPolicy.uid) &&
        Objects.equals(this.updateTime, networkPolicy.updateTime) &&
        Objects.equals(this.vmwareEngineNetwork, networkPolicy.vmwareEngineNetwork) &&
        Objects.equals(this.vmwareEngineNetworkCanonical, networkPolicy.vmwareEngineNetworkCanonical);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, edgeServicesCidr, externalIp, internetAccess, name, uid, updateTime, vmwareEngineNetwork, vmwareEngineNetworkCanonical);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkPolicy {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    edgeServicesCidr: ").append(toIndentedString(edgeServicesCidr)).append("\n");
    sb.append("    externalIp: ").append(toIndentedString(externalIp)).append("\n");
    sb.append("    internetAccess: ").append(toIndentedString(internetAccess)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    vmwareEngineNetwork: ").append(toIndentedString(vmwareEngineNetwork)).append("\n");
    sb.append("    vmwareEngineNetworkCanonical: ").append(toIndentedString(vmwareEngineNetworkCanonical)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("edgeServicesCidr");
    openapiFields.add("externalIp");
    openapiFields.add("internetAccess");
    openapiFields.add("name");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("vmwareEngineNetwork");
    openapiFields.add("vmwareEngineNetworkCanonical");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkPolicy is not found in the empty JSON string", NetworkPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("edgeServicesCidr") != null && !jsonObj.get("edgeServicesCidr").isJsonNull()) && !jsonObj.get("edgeServicesCidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edgeServicesCidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edgeServicesCidr").toString()));
      }
      // validate the optional field `externalIp`
      if (jsonObj.get("externalIp") != null && !jsonObj.get("externalIp").isJsonNull()) {
        NetworkService.validateJsonElement(jsonObj.get("externalIp"));
      }
      // validate the optional field `internetAccess`
      if (jsonObj.get("internetAccess") != null && !jsonObj.get("internetAccess").isJsonNull()) {
        NetworkService.validateJsonElement(jsonObj.get("internetAccess"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("vmwareEngineNetwork") != null && !jsonObj.get("vmwareEngineNetwork").isJsonNull()) && !jsonObj.get("vmwareEngineNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmwareEngineNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmwareEngineNetwork").toString()));
      }
      if ((jsonObj.get("vmwareEngineNetworkCanonical") != null && !jsonObj.get("vmwareEngineNetworkCanonical").isJsonNull()) && !jsonObj.get("vmwareEngineNetworkCanonical").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmwareEngineNetworkCanonical` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmwareEngineNetworkCanonical").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkPolicy>() {
           @Override
           public void write(JsonWriter out, NetworkPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkPolicy
   * @throws IOException if the JSON string is invalid with respect to NetworkPolicy
   */
  public static NetworkPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkPolicy.class);
  }

  /**
   * Convert an instance of NetworkPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

