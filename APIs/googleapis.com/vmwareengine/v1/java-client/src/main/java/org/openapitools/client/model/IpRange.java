/*
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An IP range provided in any one of the supported formats.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:01.834215-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IpRange {
  public static final String SERIALIZED_NAME_EXTERNAL_ADDRESS = "externalAddress";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ADDRESS)
  private String externalAddress;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_IP_ADDRESS_RANGE = "ipAddressRange";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_RANGE)
  private String ipAddressRange;

  public IpRange() {
  }

  public IpRange externalAddress(String externalAddress) {
    this.externalAddress = externalAddress;
    return this;
  }

  /**
   * The name of an &#x60;ExternalAddress&#x60; resource. The external address must have been reserved in the scope of this external access rule&#39;s parent network policy. Provide the external address name in the form of &#x60;projects/{project}/locations/{location}/privateClouds/{private_cloud}/externalAddresses/{external_address}&#x60;. For example: &#x60;projects/my-project/locations/us-central1-a/privateClouds/my-cloud/externalAddresses/my-address&#x60;.
   * @return externalAddress
   */
  @javax.annotation.Nullable
  public String getExternalAddress() {
    return externalAddress;
  }

  public void setExternalAddress(String externalAddress) {
    this.externalAddress = externalAddress;
  }


  public IpRange ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * A single IP address. For example: &#x60;10.0.0.5&#x60;.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public IpRange ipAddressRange(String ipAddressRange) {
    this.ipAddressRange = ipAddressRange;
    return this;
  }

  /**
   * An IP address range in the CIDR format. For example: &#x60;10.0.0.0/24&#x60;.
   * @return ipAddressRange
   */
  @javax.annotation.Nullable
  public String getIpAddressRange() {
    return ipAddressRange;
  }

  public void setIpAddressRange(String ipAddressRange) {
    this.ipAddressRange = ipAddressRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpRange ipRange = (IpRange) o;
    return Objects.equals(this.externalAddress, ipRange.externalAddress) &&
        Objects.equals(this.ipAddress, ipRange.ipAddress) &&
        Objects.equals(this.ipAddressRange, ipRange.ipAddressRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalAddress, ipAddress, ipAddressRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpRange {\n");
    sb.append("    externalAddress: ").append(toIndentedString(externalAddress)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    ipAddressRange: ").append(toIndentedString(ipAddressRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("externalAddress");
    openapiFields.add("ipAddress");
    openapiFields.add("ipAddressRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpRange is not found in the empty JSON string", IpRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("externalAddress") != null && !jsonObj.get("externalAddress").isJsonNull()) && !jsonObj.get("externalAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalAddress").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("ipAddressRange") != null && !jsonObj.get("ipAddressRange").isJsonNull()) && !jsonObj.get("ipAddressRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddressRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddressRange").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpRange.class));

       return (TypeAdapter<T>) new TypeAdapter<IpRange>() {
           @Override
           public void write(JsonWriter out, IpRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpRange
   * @throws IOException if the JSON string is invalid with respect to IpRange
   */
  public static IpRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpRange.class);
  }

  /**
   * Convert an instance of IpRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

