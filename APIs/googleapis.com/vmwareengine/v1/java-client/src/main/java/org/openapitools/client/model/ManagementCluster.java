/*
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.NodeTypeConfig;
import org.openapitools.client.model.StretchedClusterConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Management cluster configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:01.834215-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagementCluster {
  public static final String SERIALIZED_NAME_CLUSTER_ID = "clusterId";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private String clusterId;

  public static final String SERIALIZED_NAME_NODE_TYPE_CONFIGS = "nodeTypeConfigs";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE_CONFIGS)
  private Map<String, NodeTypeConfig> nodeTypeConfigs = new HashMap<>();

  public static final String SERIALIZED_NAME_STRETCHED_CLUSTER_CONFIG = "stretchedClusterConfig";
  @SerializedName(SERIALIZED_NAME_STRETCHED_CLUSTER_CONFIG)
  private StretchedClusterConfig stretchedClusterConfig;

  public ManagementCluster() {
  }

  public ManagementCluster clusterId(String clusterId) {
    this.clusterId = clusterId;
    return this;
  }

  /**
   * Required. The user-provided identifier of the new &#x60;Cluster&#x60;. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
   * @return clusterId
   */
  @javax.annotation.Nullable
  public String getClusterId() {
    return clusterId;
  }

  public void setClusterId(String clusterId) {
    this.clusterId = clusterId;
  }


  public ManagementCluster nodeTypeConfigs(Map<String, NodeTypeConfig> nodeTypeConfigs) {
    this.nodeTypeConfigs = nodeTypeConfigs;
    return this;
  }

  public ManagementCluster putNodeTypeConfigsItem(String key, NodeTypeConfig nodeTypeConfigsItem) {
    if (this.nodeTypeConfigs == null) {
      this.nodeTypeConfigs = new HashMap<>();
    }
    this.nodeTypeConfigs.put(key, nodeTypeConfigsItem);
    return this;
  }

  /**
   * Required. The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the &#x60;NodeType&#x60;).
   * @return nodeTypeConfigs
   */
  @javax.annotation.Nullable
  public Map<String, NodeTypeConfig> getNodeTypeConfigs() {
    return nodeTypeConfigs;
  }

  public void setNodeTypeConfigs(Map<String, NodeTypeConfig> nodeTypeConfigs) {
    this.nodeTypeConfigs = nodeTypeConfigs;
  }


  public ManagementCluster stretchedClusterConfig(StretchedClusterConfig stretchedClusterConfig) {
    this.stretchedClusterConfig = stretchedClusterConfig;
    return this;
  }

  /**
   * Get stretchedClusterConfig
   * @return stretchedClusterConfig
   */
  @javax.annotation.Nullable
  public StretchedClusterConfig getStretchedClusterConfig() {
    return stretchedClusterConfig;
  }

  public void setStretchedClusterConfig(StretchedClusterConfig stretchedClusterConfig) {
    this.stretchedClusterConfig = stretchedClusterConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagementCluster managementCluster = (ManagementCluster) o;
    return Objects.equals(this.clusterId, managementCluster.clusterId) &&
        Objects.equals(this.nodeTypeConfigs, managementCluster.nodeTypeConfigs) &&
        Objects.equals(this.stretchedClusterConfig, managementCluster.stretchedClusterConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterId, nodeTypeConfigs, stretchedClusterConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagementCluster {\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    nodeTypeConfigs: ").append(toIndentedString(nodeTypeConfigs)).append("\n");
    sb.append("    stretchedClusterConfig: ").append(toIndentedString(stretchedClusterConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterId");
    openapiFields.add("nodeTypeConfigs");
    openapiFields.add("stretchedClusterConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagementCluster
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagementCluster.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagementCluster is not found in the empty JSON string", ManagementCluster.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagementCluster.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagementCluster` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clusterId") != null && !jsonObj.get("clusterId").isJsonNull()) && !jsonObj.get("clusterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterId").toString()));
      }
      // validate the optional field `stretchedClusterConfig`
      if (jsonObj.get("stretchedClusterConfig") != null && !jsonObj.get("stretchedClusterConfig").isJsonNull()) {
        StretchedClusterConfig.validateJsonElement(jsonObj.get("stretchedClusterConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagementCluster.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagementCluster' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagementCluster> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagementCluster.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagementCluster>() {
           @Override
           public void write(JsonWriter out, ManagementCluster value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagementCluster read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagementCluster given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagementCluster
   * @throws IOException if the JSON string is invalid with respect to ManagementCluster
   */
  public static ManagementCluster fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagementCluster.class);
  }

  /**
   * Convert an instance of ManagementCluster to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

