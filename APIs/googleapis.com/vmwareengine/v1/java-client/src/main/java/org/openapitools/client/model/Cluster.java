/*
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.NodeTypeConfig;
import org.openapitools.client.model.StretchedClusterConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A cluster in a private cloud.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:01.834215-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cluster {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_MANAGEMENT = "management";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT)
  private Boolean management;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_TYPE_CONFIGS = "nodeTypeConfigs";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE_CONFIGS)
  private Map<String, NodeTypeConfig> nodeTypeConfigs = new HashMap<>();

  /**
   * Output only. State of the resource.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    CREATING("CREATING"),
    
    UPDATING("UPDATING"),
    
    DELETING("DELETING"),
    
    REPAIRING("REPAIRING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STRETCHED_CLUSTER_CONFIG = "stretchedClusterConfig";
  @SerializedName(SERIALIZED_NAME_STRETCHED_CLUSTER_CONFIG)
  private StretchedClusterConfig stretchedClusterConfig;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Cluster() {
  }

  public Cluster(
     String createTime, 
     Boolean management, 
     String name, 
     StateEnum state, 
     String uid, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.management = management;
    this.name = name;
    this.state = state;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Creation time of this resource.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. True if the cluster is a management cluster; false otherwise. There can only be one management cluster in a private cloud and it has to be the first one.
   * @return management
   */
  @javax.annotation.Nullable
  public Boolean getManagement() {
    return management;
  }



  /**
   * Output only. The resource name of this cluster. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: &#x60;projects/my-project/locations/us-central1-a/privateClouds/my-cloud/clusters/my-cluster&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Cluster nodeTypeConfigs(Map<String, NodeTypeConfig> nodeTypeConfigs) {
    this.nodeTypeConfigs = nodeTypeConfigs;
    return this;
  }

  public Cluster putNodeTypeConfigsItem(String key, NodeTypeConfig nodeTypeConfigsItem) {
    if (this.nodeTypeConfigs == null) {
      this.nodeTypeConfigs = new HashMap<>();
    }
    this.nodeTypeConfigs.put(key, nodeTypeConfigsItem);
    return this;
  }

  /**
   * Required. The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the &#x60;NodeType&#x60;).
   * @return nodeTypeConfigs
   */
  @javax.annotation.Nullable
  public Map<String, NodeTypeConfig> getNodeTypeConfigs() {
    return nodeTypeConfigs;
  }

  public void setNodeTypeConfigs(Map<String, NodeTypeConfig> nodeTypeConfigs) {
    this.nodeTypeConfigs = nodeTypeConfigs;
  }


  /**
   * Output only. State of the resource.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public Cluster stretchedClusterConfig(StretchedClusterConfig stretchedClusterConfig) {
    this.stretchedClusterConfig = stretchedClusterConfig;
    return this;
  }

  /**
   * Get stretchedClusterConfig
   * @return stretchedClusterConfig
   */
  @javax.annotation.Nullable
  public StretchedClusterConfig getStretchedClusterConfig() {
    return stretchedClusterConfig;
  }

  public void setStretchedClusterConfig(StretchedClusterConfig stretchedClusterConfig) {
    this.stretchedClusterConfig = stretchedClusterConfig;
  }


  /**
   * Output only. System-generated unique identifier for the resource.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. Last update time of this resource.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cluster cluster = (Cluster) o;
    return Objects.equals(this.createTime, cluster.createTime) &&
        Objects.equals(this.management, cluster.management) &&
        Objects.equals(this.name, cluster.name) &&
        Objects.equals(this.nodeTypeConfigs, cluster.nodeTypeConfigs) &&
        Objects.equals(this.state, cluster.state) &&
        Objects.equals(this.stretchedClusterConfig, cluster.stretchedClusterConfig) &&
        Objects.equals(this.uid, cluster.uid) &&
        Objects.equals(this.updateTime, cluster.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, management, name, nodeTypeConfigs, state, stretchedClusterConfig, uid, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cluster {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    management: ").append(toIndentedString(management)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeTypeConfigs: ").append(toIndentedString(nodeTypeConfigs)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stretchedClusterConfig: ").append(toIndentedString(stretchedClusterConfig)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("management");
    openapiFields.add("name");
    openapiFields.add("nodeTypeConfigs");
    openapiFields.add("state");
    openapiFields.add("stretchedClusterConfig");
    openapiFields.add("uid");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cluster
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cluster.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cluster is not found in the empty JSON string", Cluster.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cluster.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cluster` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `stretchedClusterConfig`
      if (jsonObj.get("stretchedClusterConfig") != null && !jsonObj.get("stretchedClusterConfig").isJsonNull()) {
        StretchedClusterConfig.validateJsonElement(jsonObj.get("stretchedClusterConfig"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cluster.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cluster' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cluster> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cluster.class));

       return (TypeAdapter<T>) new TypeAdapter<Cluster>() {
           @Override
           public void write(JsonWriter out, Cluster value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cluster read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cluster given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cluster
   * @throws IOException if the JSON string is invalid with respect to Cluster
   */
  public static Cluster fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cluster.class);
  }

  /**
   * Convert an instance of Cluster to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

