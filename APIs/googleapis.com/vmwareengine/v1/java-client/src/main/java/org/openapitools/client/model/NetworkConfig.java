/*
 * VMware Engine API
 * The Google VMware Engine API lets you programmatically manage VMware environments.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Network configuration in the consumer project with which the peering has to be done.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:01.834215-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkConfig {
  public static final String SERIALIZED_NAME_DNS_SERVER_IP = "dnsServerIp";
  @SerializedName(SERIALIZED_NAME_DNS_SERVER_IP)
  private String dnsServerIp;

  public static final String SERIALIZED_NAME_MANAGEMENT_CIDR = "managementCidr";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_CIDR)
  private String managementCidr;

  public static final String SERIALIZED_NAME_MANAGEMENT_IP_ADDRESS_LAYOUT_VERSION = "managementIpAddressLayoutVersion";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_IP_ADDRESS_LAYOUT_VERSION)
  private Integer managementIpAddressLayoutVersion;

  public static final String SERIALIZED_NAME_VMWARE_ENGINE_NETWORK = "vmwareEngineNetwork";
  @SerializedName(SERIALIZED_NAME_VMWARE_ENGINE_NETWORK)
  private String vmwareEngineNetwork;

  public static final String SERIALIZED_NAME_VMWARE_ENGINE_NETWORK_CANONICAL = "vmwareEngineNetworkCanonical";
  @SerializedName(SERIALIZED_NAME_VMWARE_ENGINE_NETWORK_CANONICAL)
  private String vmwareEngineNetworkCanonical;

  public NetworkConfig() {
  }

  public NetworkConfig(
     String dnsServerIp, 
     Integer managementIpAddressLayoutVersion, 
     String vmwareEngineNetworkCanonical
  ) {
    this();
    this.dnsServerIp = dnsServerIp;
    this.managementIpAddressLayoutVersion = managementIpAddressLayoutVersion;
    this.vmwareEngineNetworkCanonical = vmwareEngineNetworkCanonical;
  }

  /**
   * Output only. DNS Server IP of the Private Cloud. All DNS queries can be forwarded to this address for name resolution of Private Cloud&#39;s management entities like vCenter, NSX-T Manager and ESXi hosts.
   * @return dnsServerIp
   */
  @javax.annotation.Nullable
  public String getDnsServerIp() {
    return dnsServerIp;
  }



  public NetworkConfig managementCidr(String managementCidr) {
    this.managementCidr = managementCidr;
    return this;
  }

  /**
   * Required. Management CIDR used by VMware management appliances.
   * @return managementCidr
   */
  @javax.annotation.Nullable
  public String getManagementCidr() {
    return managementCidr;
  }

  public void setManagementCidr(String managementCidr) {
    this.managementCidr = managementCidr;
  }


  /**
   * Output only. The IP address layout version of the management IP address range. Possible versions include: * &#x60;managementIpAddressLayoutVersion&#x3D;1&#x60;: Indicates the legacy IP address layout used by some existing private clouds. This is no longer supported for new private clouds as it does not support all features. * &#x60;managementIpAddressLayoutVersion&#x3D;2&#x60;: Indicates the latest IP address layout used by all newly created private clouds. This version supports all current features.
   * @return managementIpAddressLayoutVersion
   */
  @javax.annotation.Nullable
  public Integer getManagementIpAddressLayoutVersion() {
    return managementIpAddressLayoutVersion;
  }



  public NetworkConfig vmwareEngineNetwork(String vmwareEngineNetwork) {
    this.vmwareEngineNetwork = vmwareEngineNetwork;
    return this;
  }

  /**
   * Optional. The relative resource name of the VMware Engine network attached to the private cloud. Specify the name in the following form: &#x60;projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}&#x60; where &#x60;{project}&#x60; can either be a project number or a project ID.
   * @return vmwareEngineNetwork
   */
  @javax.annotation.Nullable
  public String getVmwareEngineNetwork() {
    return vmwareEngineNetwork;
  }

  public void setVmwareEngineNetwork(String vmwareEngineNetwork) {
    this.vmwareEngineNetwork = vmwareEngineNetwork;
  }


  /**
   * Output only. The canonical name of the VMware Engine network in the form: &#x60;projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}&#x60;
   * @return vmwareEngineNetworkCanonical
   */
  @javax.annotation.Nullable
  public String getVmwareEngineNetworkCanonical() {
    return vmwareEngineNetworkCanonical;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkConfig networkConfig = (NetworkConfig) o;
    return Objects.equals(this.dnsServerIp, networkConfig.dnsServerIp) &&
        Objects.equals(this.managementCidr, networkConfig.managementCidr) &&
        Objects.equals(this.managementIpAddressLayoutVersion, networkConfig.managementIpAddressLayoutVersion) &&
        Objects.equals(this.vmwareEngineNetwork, networkConfig.vmwareEngineNetwork) &&
        Objects.equals(this.vmwareEngineNetworkCanonical, networkConfig.vmwareEngineNetworkCanonical);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsServerIp, managementCidr, managementIpAddressLayoutVersion, vmwareEngineNetwork, vmwareEngineNetworkCanonical);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkConfig {\n");
    sb.append("    dnsServerIp: ").append(toIndentedString(dnsServerIp)).append("\n");
    sb.append("    managementCidr: ").append(toIndentedString(managementCidr)).append("\n");
    sb.append("    managementIpAddressLayoutVersion: ").append(toIndentedString(managementIpAddressLayoutVersion)).append("\n");
    sb.append("    vmwareEngineNetwork: ").append(toIndentedString(vmwareEngineNetwork)).append("\n");
    sb.append("    vmwareEngineNetworkCanonical: ").append(toIndentedString(vmwareEngineNetworkCanonical)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dnsServerIp");
    openapiFields.add("managementCidr");
    openapiFields.add("managementIpAddressLayoutVersion");
    openapiFields.add("vmwareEngineNetwork");
    openapiFields.add("vmwareEngineNetworkCanonical");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkConfig is not found in the empty JSON string", NetworkConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dnsServerIp") != null && !jsonObj.get("dnsServerIp").isJsonNull()) && !jsonObj.get("dnsServerIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsServerIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsServerIp").toString()));
      }
      if ((jsonObj.get("managementCidr") != null && !jsonObj.get("managementCidr").isJsonNull()) && !jsonObj.get("managementCidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managementCidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managementCidr").toString()));
      }
      if ((jsonObj.get("vmwareEngineNetwork") != null && !jsonObj.get("vmwareEngineNetwork").isJsonNull()) && !jsonObj.get("vmwareEngineNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmwareEngineNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmwareEngineNetwork").toString()));
      }
      if ((jsonObj.get("vmwareEngineNetworkCanonical") != null && !jsonObj.get("vmwareEngineNetworkCanonical").isJsonNull()) && !jsonObj.get("vmwareEngineNetworkCanonical").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmwareEngineNetworkCanonical` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmwareEngineNetworkCanonical").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkConfig>() {
           @Override
           public void write(JsonWriter out, NetworkConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkConfig
   * @throws IOException if the JSON string is invalid with respect to NetworkConfig
   */
  public static NetworkConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkConfig.class);
  }

  /**
   * Convert an instance of NetworkConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

