/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GrpcRouteDestination;
import org.openapitools.client.model.GrpcRouteFaultInjectionPolicy;
import org.openapitools.client.model.GrpcRouteRetryPolicy;
import org.openapitools.client.model.GrpcRouteStatefulSessionAffinityPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies how to route matched traffic.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.229170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GrpcRouteRouteAction {
  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<GrpcRouteDestination> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAULT_INJECTION_POLICY = "faultInjectionPolicy";
  @SerializedName(SERIALIZED_NAME_FAULT_INJECTION_POLICY)
  private GrpcRouteFaultInjectionPolicy faultInjectionPolicy;

  public static final String SERIALIZED_NAME_IDLE_TIMEOUT = "idleTimeout";
  @SerializedName(SERIALIZED_NAME_IDLE_TIMEOUT)
  private String idleTimeout;

  public static final String SERIALIZED_NAME_RETRY_POLICY = "retryPolicy";
  @SerializedName(SERIALIZED_NAME_RETRY_POLICY)
  private GrpcRouteRetryPolicy retryPolicy;

  public static final String SERIALIZED_NAME_STATEFUL_SESSION_AFFINITY = "statefulSessionAffinity";
  @SerializedName(SERIALIZED_NAME_STATEFUL_SESSION_AFFINITY)
  private GrpcRouteStatefulSessionAffinityPolicy statefulSessionAffinity;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public GrpcRouteRouteAction() {
  }

  public GrpcRouteRouteAction destinations(List<GrpcRouteDestination> destinations) {
    this.destinations = destinations;
    return this;
  }

  public GrpcRouteRouteAction addDestinationsItem(GrpcRouteDestination destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<GrpcRouteDestination> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<GrpcRouteDestination> destinations) {
    this.destinations = destinations;
  }


  public GrpcRouteRouteAction faultInjectionPolicy(GrpcRouteFaultInjectionPolicy faultInjectionPolicy) {
    this.faultInjectionPolicy = faultInjectionPolicy;
    return this;
  }

  /**
   * Get faultInjectionPolicy
   * @return faultInjectionPolicy
   */
  @javax.annotation.Nullable
  public GrpcRouteFaultInjectionPolicy getFaultInjectionPolicy() {
    return faultInjectionPolicy;
  }

  public void setFaultInjectionPolicy(GrpcRouteFaultInjectionPolicy faultInjectionPolicy) {
    this.faultInjectionPolicy = faultInjectionPolicy;
  }


  public GrpcRouteRouteAction idleTimeout(String idleTimeout) {
    this.idleTimeout = idleTimeout;
    return this;
  }

  /**
   * Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.
   * @return idleTimeout
   */
  @javax.annotation.Nullable
  public String getIdleTimeout() {
    return idleTimeout;
  }

  public void setIdleTimeout(String idleTimeout) {
    this.idleTimeout = idleTimeout;
  }


  public GrpcRouteRouteAction retryPolicy(GrpcRouteRetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
    return this;
  }

  /**
   * Get retryPolicy
   * @return retryPolicy
   */
  @javax.annotation.Nullable
  public GrpcRouteRetryPolicy getRetryPolicy() {
    return retryPolicy;
  }

  public void setRetryPolicy(GrpcRouteRetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
  }


  public GrpcRouteRouteAction statefulSessionAffinity(GrpcRouteStatefulSessionAffinityPolicy statefulSessionAffinity) {
    this.statefulSessionAffinity = statefulSessionAffinity;
    return this;
  }

  /**
   * Get statefulSessionAffinity
   * @return statefulSessionAffinity
   */
  @javax.annotation.Nullable
  public GrpcRouteStatefulSessionAffinityPolicy getStatefulSessionAffinity() {
    return statefulSessionAffinity;
  }

  public void setStatefulSessionAffinity(GrpcRouteStatefulSessionAffinityPolicy statefulSessionAffinity) {
    this.statefulSessionAffinity = statefulSessionAffinity;
  }


  public GrpcRouteRouteAction timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrpcRouteRouteAction grpcRouteRouteAction = (GrpcRouteRouteAction) o;
    return Objects.equals(this.destinations, grpcRouteRouteAction.destinations) &&
        Objects.equals(this.faultInjectionPolicy, grpcRouteRouteAction.faultInjectionPolicy) &&
        Objects.equals(this.idleTimeout, grpcRouteRouteAction.idleTimeout) &&
        Objects.equals(this.retryPolicy, grpcRouteRouteAction.retryPolicy) &&
        Objects.equals(this.statefulSessionAffinity, grpcRouteRouteAction.statefulSessionAffinity) &&
        Objects.equals(this.timeout, grpcRouteRouteAction.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinations, faultInjectionPolicy, idleTimeout, retryPolicy, statefulSessionAffinity, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrpcRouteRouteAction {\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    faultInjectionPolicy: ").append(toIndentedString(faultInjectionPolicy)).append("\n");
    sb.append("    idleTimeout: ").append(toIndentedString(idleTimeout)).append("\n");
    sb.append("    retryPolicy: ").append(toIndentedString(retryPolicy)).append("\n");
    sb.append("    statefulSessionAffinity: ").append(toIndentedString(statefulSessionAffinity)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinations");
    openapiFields.add("faultInjectionPolicy");
    openapiFields.add("idleTimeout");
    openapiFields.add("retryPolicy");
    openapiFields.add("statefulSessionAffinity");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GrpcRouteRouteAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GrpcRouteRouteAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GrpcRouteRouteAction is not found in the empty JSON string", GrpcRouteRouteAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GrpcRouteRouteAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GrpcRouteRouteAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            GrpcRouteDestination.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      // validate the optional field `faultInjectionPolicy`
      if (jsonObj.get("faultInjectionPolicy") != null && !jsonObj.get("faultInjectionPolicy").isJsonNull()) {
        GrpcRouteFaultInjectionPolicy.validateJsonElement(jsonObj.get("faultInjectionPolicy"));
      }
      if ((jsonObj.get("idleTimeout") != null && !jsonObj.get("idleTimeout").isJsonNull()) && !jsonObj.get("idleTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idleTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idleTimeout").toString()));
      }
      // validate the optional field `retryPolicy`
      if (jsonObj.get("retryPolicy") != null && !jsonObj.get("retryPolicy").isJsonNull()) {
        GrpcRouteRetryPolicy.validateJsonElement(jsonObj.get("retryPolicy"));
      }
      // validate the optional field `statefulSessionAffinity`
      if (jsonObj.get("statefulSessionAffinity") != null && !jsonObj.get("statefulSessionAffinity").isJsonNull()) {
        GrpcRouteStatefulSessionAffinityPolicy.validateJsonElement(jsonObj.get("statefulSessionAffinity"));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GrpcRouteRouteAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GrpcRouteRouteAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GrpcRouteRouteAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GrpcRouteRouteAction.class));

       return (TypeAdapter<T>) new TypeAdapter<GrpcRouteRouteAction>() {
           @Override
           public void write(JsonWriter out, GrpcRouteRouteAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GrpcRouteRouteAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GrpcRouteRouteAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GrpcRouteRouteAction
   * @throws IOException if the JSON string is invalid with respect to GrpcRouteRouteAction
   */
  public static GrpcRouteRouteAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GrpcRouteRouteAction.class);
  }

  /**
   * Convert an instance of GrpcRouteRouteAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

