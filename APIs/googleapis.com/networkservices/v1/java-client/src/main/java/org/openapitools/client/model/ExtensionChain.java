/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExtensionChainExtension;
import org.openapitools.client.model.ExtensionChainMatchCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single extension chain wrapper that contains the match conditions and extensions to execute.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.229170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtensionChain {
  public static final String SERIALIZED_NAME_EXTENSIONS = "extensions";
  @SerializedName(SERIALIZED_NAME_EXTENSIONS)
  private List<ExtensionChainExtension> extensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATCH_CONDITION = "matchCondition";
  @SerializedName(SERIALIZED_NAME_MATCH_CONDITION)
  private ExtensionChainMatchCondition matchCondition;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ExtensionChain() {
  }

  public ExtensionChain extensions(List<ExtensionChainExtension> extensions) {
    this.extensions = extensions;
    return this;
  }

  public ExtensionChain addExtensionsItem(ExtensionChainExtension extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new ArrayList<>();
    }
    this.extensions.add(extensionsItem);
    return this;
  }

  /**
   * Required. A set of extensions to execute for the matching request. At least one extension is required. Up to 3 extensions can be defined for each extension chain for &#x60;LbTrafficExtension&#x60; resource. &#x60;LbRouteExtension&#x60; chains are limited to 1 extension per extension chain.
   * @return extensions
   */
  @javax.annotation.Nullable
  public List<ExtensionChainExtension> getExtensions() {
    return extensions;
  }

  public void setExtensions(List<ExtensionChainExtension> extensions) {
    this.extensions = extensions;
  }


  public ExtensionChain matchCondition(ExtensionChainMatchCondition matchCondition) {
    this.matchCondition = matchCondition;
    return this;
  }

  /**
   * Get matchCondition
   * @return matchCondition
   */
  @javax.annotation.Nullable
  public ExtensionChainMatchCondition getMatchCondition() {
    return matchCondition;
  }

  public void setMatchCondition(ExtensionChainMatchCondition matchCondition) {
    this.matchCondition = matchCondition;
  }


  public ExtensionChain name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name for this extension chain. The name is logged as part of the HTTP request logs. The name must conform with RFC-1034, is restricted to lower-cased letters, numbers and hyphens, and can have a maximum length of 63 characters. Additionally, the first character must be a letter and the last a letter or a number.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtensionChain extensionChain = (ExtensionChain) o;
    return Objects.equals(this.extensions, extensionChain.extensions) &&
        Objects.equals(this.matchCondition, extensionChain.matchCondition) &&
        Objects.equals(this.name, extensionChain.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extensions, matchCondition, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtensionChain {\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    matchCondition: ").append(toIndentedString(matchCondition)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extensions");
    openapiFields.add("matchCondition");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtensionChain
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtensionChain.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtensionChain is not found in the empty JSON string", ExtensionChain.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtensionChain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtensionChain` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("extensions") != null && !jsonObj.get("extensions").isJsonNull()) {
        JsonArray jsonArrayextensions = jsonObj.getAsJsonArray("extensions");
        if (jsonArrayextensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extensions` to be an array in the JSON string but got `%s`", jsonObj.get("extensions").toString()));
          }

          // validate the optional field `extensions` (array)
          for (int i = 0; i < jsonArrayextensions.size(); i++) {
            ExtensionChainExtension.validateJsonElement(jsonArrayextensions.get(i));
          };
        }
      }
      // validate the optional field `matchCondition`
      if (jsonObj.get("matchCondition") != null && !jsonObj.get("matchCondition").isJsonNull()) {
        ExtensionChainMatchCondition.validateJsonElement(jsonObj.get("matchCondition"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtensionChain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtensionChain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtensionChain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtensionChain.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtensionChain>() {
           @Override
           public void write(JsonWriter out, ExtensionChain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtensionChain read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtensionChain given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtensionChain
   * @throws IOException if the JSON string is invalid with respect to ExtensionChain
   */
  public static ExtensionChain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtensionChain.class);
  }

  /**
   * Convert an instance of ExtensionChain to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

