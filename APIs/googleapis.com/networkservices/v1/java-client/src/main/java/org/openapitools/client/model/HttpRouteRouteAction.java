/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HttpRouteCorsPolicy;
import org.openapitools.client.model.HttpRouteDestination;
import org.openapitools.client.model.HttpRouteFaultInjectionPolicy;
import org.openapitools.client.model.HttpRouteHeaderModifier;
import org.openapitools.client.model.HttpRouteHttpDirectResponse;
import org.openapitools.client.model.HttpRouteRedirect;
import org.openapitools.client.model.HttpRouteRequestMirrorPolicy;
import org.openapitools.client.model.HttpRouteRetryPolicy;
import org.openapitools.client.model.HttpRouteStatefulSessionAffinityPolicy;
import org.openapitools.client.model.HttpRouteURLRewrite;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The specifications for routing traffic and applying associated policies.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.229170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpRouteRouteAction {
  public static final String SERIALIZED_NAME_CORS_POLICY = "corsPolicy";
  @SerializedName(SERIALIZED_NAME_CORS_POLICY)
  private HttpRouteCorsPolicy corsPolicy;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<HttpRouteDestination> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIRECT_RESPONSE = "directResponse";
  @SerializedName(SERIALIZED_NAME_DIRECT_RESPONSE)
  private HttpRouteHttpDirectResponse directResponse;

  public static final String SERIALIZED_NAME_FAULT_INJECTION_POLICY = "faultInjectionPolicy";
  @SerializedName(SERIALIZED_NAME_FAULT_INJECTION_POLICY)
  private HttpRouteFaultInjectionPolicy faultInjectionPolicy;

  public static final String SERIALIZED_NAME_IDLE_TIMEOUT = "idleTimeout";
  @SerializedName(SERIALIZED_NAME_IDLE_TIMEOUT)
  private String idleTimeout;

  public static final String SERIALIZED_NAME_REDIRECT = "redirect";
  @SerializedName(SERIALIZED_NAME_REDIRECT)
  private HttpRouteRedirect redirect;

  public static final String SERIALIZED_NAME_REQUEST_HEADER_MODIFIER = "requestHeaderModifier";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADER_MODIFIER)
  private HttpRouteHeaderModifier requestHeaderModifier;

  public static final String SERIALIZED_NAME_REQUEST_MIRROR_POLICY = "requestMirrorPolicy";
  @SerializedName(SERIALIZED_NAME_REQUEST_MIRROR_POLICY)
  private HttpRouteRequestMirrorPolicy requestMirrorPolicy;

  public static final String SERIALIZED_NAME_RESPONSE_HEADER_MODIFIER = "responseHeaderModifier";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADER_MODIFIER)
  private HttpRouteHeaderModifier responseHeaderModifier;

  public static final String SERIALIZED_NAME_RETRY_POLICY = "retryPolicy";
  @SerializedName(SERIALIZED_NAME_RETRY_POLICY)
  private HttpRouteRetryPolicy retryPolicy;

  public static final String SERIALIZED_NAME_STATEFUL_SESSION_AFFINITY = "statefulSessionAffinity";
  @SerializedName(SERIALIZED_NAME_STATEFUL_SESSION_AFFINITY)
  private HttpRouteStatefulSessionAffinityPolicy statefulSessionAffinity;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public static final String SERIALIZED_NAME_URL_REWRITE = "urlRewrite";
  @SerializedName(SERIALIZED_NAME_URL_REWRITE)
  private HttpRouteURLRewrite urlRewrite;

  public HttpRouteRouteAction() {
  }

  public HttpRouteRouteAction corsPolicy(HttpRouteCorsPolicy corsPolicy) {
    this.corsPolicy = corsPolicy;
    return this;
  }

  /**
   * Get corsPolicy
   * @return corsPolicy
   */
  @javax.annotation.Nullable
  public HttpRouteCorsPolicy getCorsPolicy() {
    return corsPolicy;
  }

  public void setCorsPolicy(HttpRouteCorsPolicy corsPolicy) {
    this.corsPolicy = corsPolicy;
  }


  public HttpRouteRouteAction destinations(List<HttpRouteDestination> destinations) {
    this.destinations = destinations;
    return this;
  }

  public HttpRouteRouteAction addDestinationsItem(HttpRouteDestination destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * The destination to which traffic should be forwarded.
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<HttpRouteDestination> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<HttpRouteDestination> destinations) {
    this.destinations = destinations;
  }


  public HttpRouteRouteAction directResponse(HttpRouteHttpDirectResponse directResponse) {
    this.directResponse = directResponse;
    return this;
  }

  /**
   * Get directResponse
   * @return directResponse
   */
  @javax.annotation.Nullable
  public HttpRouteHttpDirectResponse getDirectResponse() {
    return directResponse;
  }

  public void setDirectResponse(HttpRouteHttpDirectResponse directResponse) {
    this.directResponse = directResponse;
  }


  public HttpRouteRouteAction faultInjectionPolicy(HttpRouteFaultInjectionPolicy faultInjectionPolicy) {
    this.faultInjectionPolicy = faultInjectionPolicy;
    return this;
  }

  /**
   * Get faultInjectionPolicy
   * @return faultInjectionPolicy
   */
  @javax.annotation.Nullable
  public HttpRouteFaultInjectionPolicy getFaultInjectionPolicy() {
    return faultInjectionPolicy;
  }

  public void setFaultInjectionPolicy(HttpRouteFaultInjectionPolicy faultInjectionPolicy) {
    this.faultInjectionPolicy = faultInjectionPolicy;
  }


  public HttpRouteRouteAction idleTimeout(String idleTimeout) {
    this.idleTimeout = idleTimeout;
    return this;
  }

  /**
   * Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.
   * @return idleTimeout
   */
  @javax.annotation.Nullable
  public String getIdleTimeout() {
    return idleTimeout;
  }

  public void setIdleTimeout(String idleTimeout) {
    this.idleTimeout = idleTimeout;
  }


  public HttpRouteRouteAction redirect(HttpRouteRedirect redirect) {
    this.redirect = redirect;
    return this;
  }

  /**
   * Get redirect
   * @return redirect
   */
  @javax.annotation.Nullable
  public HttpRouteRedirect getRedirect() {
    return redirect;
  }

  public void setRedirect(HttpRouteRedirect redirect) {
    this.redirect = redirect;
  }


  public HttpRouteRouteAction requestHeaderModifier(HttpRouteHeaderModifier requestHeaderModifier) {
    this.requestHeaderModifier = requestHeaderModifier;
    return this;
  }

  /**
   * Get requestHeaderModifier
   * @return requestHeaderModifier
   */
  @javax.annotation.Nullable
  public HttpRouteHeaderModifier getRequestHeaderModifier() {
    return requestHeaderModifier;
  }

  public void setRequestHeaderModifier(HttpRouteHeaderModifier requestHeaderModifier) {
    this.requestHeaderModifier = requestHeaderModifier;
  }


  public HttpRouteRouteAction requestMirrorPolicy(HttpRouteRequestMirrorPolicy requestMirrorPolicy) {
    this.requestMirrorPolicy = requestMirrorPolicy;
    return this;
  }

  /**
   * Get requestMirrorPolicy
   * @return requestMirrorPolicy
   */
  @javax.annotation.Nullable
  public HttpRouteRequestMirrorPolicy getRequestMirrorPolicy() {
    return requestMirrorPolicy;
  }

  public void setRequestMirrorPolicy(HttpRouteRequestMirrorPolicy requestMirrorPolicy) {
    this.requestMirrorPolicy = requestMirrorPolicy;
  }


  public HttpRouteRouteAction responseHeaderModifier(HttpRouteHeaderModifier responseHeaderModifier) {
    this.responseHeaderModifier = responseHeaderModifier;
    return this;
  }

  /**
   * Get responseHeaderModifier
   * @return responseHeaderModifier
   */
  @javax.annotation.Nullable
  public HttpRouteHeaderModifier getResponseHeaderModifier() {
    return responseHeaderModifier;
  }

  public void setResponseHeaderModifier(HttpRouteHeaderModifier responseHeaderModifier) {
    this.responseHeaderModifier = responseHeaderModifier;
  }


  public HttpRouteRouteAction retryPolicy(HttpRouteRetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
    return this;
  }

  /**
   * Get retryPolicy
   * @return retryPolicy
   */
  @javax.annotation.Nullable
  public HttpRouteRetryPolicy getRetryPolicy() {
    return retryPolicy;
  }

  public void setRetryPolicy(HttpRouteRetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
  }


  public HttpRouteRouteAction statefulSessionAffinity(HttpRouteStatefulSessionAffinityPolicy statefulSessionAffinity) {
    this.statefulSessionAffinity = statefulSessionAffinity;
    return this;
  }

  /**
   * Get statefulSessionAffinity
   * @return statefulSessionAffinity
   */
  @javax.annotation.Nullable
  public HttpRouteStatefulSessionAffinityPolicy getStatefulSessionAffinity() {
    return statefulSessionAffinity;
  }

  public void setStatefulSessionAffinity(HttpRouteStatefulSessionAffinityPolicy statefulSessionAffinity) {
    this.statefulSessionAffinity = statefulSessionAffinity;
  }


  public HttpRouteRouteAction timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }


  public HttpRouteRouteAction urlRewrite(HttpRouteURLRewrite urlRewrite) {
    this.urlRewrite = urlRewrite;
    return this;
  }

  /**
   * Get urlRewrite
   * @return urlRewrite
   */
  @javax.annotation.Nullable
  public HttpRouteURLRewrite getUrlRewrite() {
    return urlRewrite;
  }

  public void setUrlRewrite(HttpRouteURLRewrite urlRewrite) {
    this.urlRewrite = urlRewrite;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpRouteRouteAction httpRouteRouteAction = (HttpRouteRouteAction) o;
    return Objects.equals(this.corsPolicy, httpRouteRouteAction.corsPolicy) &&
        Objects.equals(this.destinations, httpRouteRouteAction.destinations) &&
        Objects.equals(this.directResponse, httpRouteRouteAction.directResponse) &&
        Objects.equals(this.faultInjectionPolicy, httpRouteRouteAction.faultInjectionPolicy) &&
        Objects.equals(this.idleTimeout, httpRouteRouteAction.idleTimeout) &&
        Objects.equals(this.redirect, httpRouteRouteAction.redirect) &&
        Objects.equals(this.requestHeaderModifier, httpRouteRouteAction.requestHeaderModifier) &&
        Objects.equals(this.requestMirrorPolicy, httpRouteRouteAction.requestMirrorPolicy) &&
        Objects.equals(this.responseHeaderModifier, httpRouteRouteAction.responseHeaderModifier) &&
        Objects.equals(this.retryPolicy, httpRouteRouteAction.retryPolicy) &&
        Objects.equals(this.statefulSessionAffinity, httpRouteRouteAction.statefulSessionAffinity) &&
        Objects.equals(this.timeout, httpRouteRouteAction.timeout) &&
        Objects.equals(this.urlRewrite, httpRouteRouteAction.urlRewrite);
  }

  @Override
  public int hashCode() {
    return Objects.hash(corsPolicy, destinations, directResponse, faultInjectionPolicy, idleTimeout, redirect, requestHeaderModifier, requestMirrorPolicy, responseHeaderModifier, retryPolicy, statefulSessionAffinity, timeout, urlRewrite);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpRouteRouteAction {\n");
    sb.append("    corsPolicy: ").append(toIndentedString(corsPolicy)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    directResponse: ").append(toIndentedString(directResponse)).append("\n");
    sb.append("    faultInjectionPolicy: ").append(toIndentedString(faultInjectionPolicy)).append("\n");
    sb.append("    idleTimeout: ").append(toIndentedString(idleTimeout)).append("\n");
    sb.append("    redirect: ").append(toIndentedString(redirect)).append("\n");
    sb.append("    requestHeaderModifier: ").append(toIndentedString(requestHeaderModifier)).append("\n");
    sb.append("    requestMirrorPolicy: ").append(toIndentedString(requestMirrorPolicy)).append("\n");
    sb.append("    responseHeaderModifier: ").append(toIndentedString(responseHeaderModifier)).append("\n");
    sb.append("    retryPolicy: ").append(toIndentedString(retryPolicy)).append("\n");
    sb.append("    statefulSessionAffinity: ").append(toIndentedString(statefulSessionAffinity)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    urlRewrite: ").append(toIndentedString(urlRewrite)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("corsPolicy");
    openapiFields.add("destinations");
    openapiFields.add("directResponse");
    openapiFields.add("faultInjectionPolicy");
    openapiFields.add("idleTimeout");
    openapiFields.add("redirect");
    openapiFields.add("requestHeaderModifier");
    openapiFields.add("requestMirrorPolicy");
    openapiFields.add("responseHeaderModifier");
    openapiFields.add("retryPolicy");
    openapiFields.add("statefulSessionAffinity");
    openapiFields.add("timeout");
    openapiFields.add("urlRewrite");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpRouteRouteAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpRouteRouteAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpRouteRouteAction is not found in the empty JSON string", HttpRouteRouteAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpRouteRouteAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpRouteRouteAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `corsPolicy`
      if (jsonObj.get("corsPolicy") != null && !jsonObj.get("corsPolicy").isJsonNull()) {
        HttpRouteCorsPolicy.validateJsonElement(jsonObj.get("corsPolicy"));
      }
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            HttpRouteDestination.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      // validate the optional field `directResponse`
      if (jsonObj.get("directResponse") != null && !jsonObj.get("directResponse").isJsonNull()) {
        HttpRouteHttpDirectResponse.validateJsonElement(jsonObj.get("directResponse"));
      }
      // validate the optional field `faultInjectionPolicy`
      if (jsonObj.get("faultInjectionPolicy") != null && !jsonObj.get("faultInjectionPolicy").isJsonNull()) {
        HttpRouteFaultInjectionPolicy.validateJsonElement(jsonObj.get("faultInjectionPolicy"));
      }
      if ((jsonObj.get("idleTimeout") != null && !jsonObj.get("idleTimeout").isJsonNull()) && !jsonObj.get("idleTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idleTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idleTimeout").toString()));
      }
      // validate the optional field `redirect`
      if (jsonObj.get("redirect") != null && !jsonObj.get("redirect").isJsonNull()) {
        HttpRouteRedirect.validateJsonElement(jsonObj.get("redirect"));
      }
      // validate the optional field `requestHeaderModifier`
      if (jsonObj.get("requestHeaderModifier") != null && !jsonObj.get("requestHeaderModifier").isJsonNull()) {
        HttpRouteHeaderModifier.validateJsonElement(jsonObj.get("requestHeaderModifier"));
      }
      // validate the optional field `requestMirrorPolicy`
      if (jsonObj.get("requestMirrorPolicy") != null && !jsonObj.get("requestMirrorPolicy").isJsonNull()) {
        HttpRouteRequestMirrorPolicy.validateJsonElement(jsonObj.get("requestMirrorPolicy"));
      }
      // validate the optional field `responseHeaderModifier`
      if (jsonObj.get("responseHeaderModifier") != null && !jsonObj.get("responseHeaderModifier").isJsonNull()) {
        HttpRouteHeaderModifier.validateJsonElement(jsonObj.get("responseHeaderModifier"));
      }
      // validate the optional field `retryPolicy`
      if (jsonObj.get("retryPolicy") != null && !jsonObj.get("retryPolicy").isJsonNull()) {
        HttpRouteRetryPolicy.validateJsonElement(jsonObj.get("retryPolicy"));
      }
      // validate the optional field `statefulSessionAffinity`
      if (jsonObj.get("statefulSessionAffinity") != null && !jsonObj.get("statefulSessionAffinity").isJsonNull()) {
        HttpRouteStatefulSessionAffinityPolicy.validateJsonElement(jsonObj.get("statefulSessionAffinity"));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
      // validate the optional field `urlRewrite`
      if (jsonObj.get("urlRewrite") != null && !jsonObj.get("urlRewrite").isJsonNull()) {
        HttpRouteURLRewrite.validateJsonElement(jsonObj.get("urlRewrite"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpRouteRouteAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpRouteRouteAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpRouteRouteAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpRouteRouteAction.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpRouteRouteAction>() {
           @Override
           public void write(JsonWriter out, HttpRouteRouteAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpRouteRouteAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpRouteRouteAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpRouteRouteAction
   * @throws IOException if the JSON string is invalid with respect to HttpRouteRouteAction
   */
  public static HttpRouteRouteAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpRouteRouteAction.class);
  }

  /**
   * Convert an instance of HttpRouteRouteAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

