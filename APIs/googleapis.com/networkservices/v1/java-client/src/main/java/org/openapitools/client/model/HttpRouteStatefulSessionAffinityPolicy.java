/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The specification for cookie-based stateful session affinity where the date plane supplies a “session cookie” with the name \&quot;GSSA\&quot; which encodes a specific destination host and each request containing that cookie will be directed to that host as long as the destination host remains up and healthy. The gRPC proxyless mesh library or sidecar proxy will manage the session cookie but the client application code is responsible for copying the cookie from each RPC in the session to the next.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.229170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpRouteStatefulSessionAffinityPolicy {
  public static final String SERIALIZED_NAME_COOKIE_TTL = "cookieTtl";
  @SerializedName(SERIALIZED_NAME_COOKIE_TTL)
  private String cookieTtl;

  public HttpRouteStatefulSessionAffinityPolicy() {
  }

  public HttpRouteStatefulSessionAffinityPolicy cookieTtl(String cookieTtl) {
    this.cookieTtl = cookieTtl;
    return this;
  }

  /**
   * Required. The cookie TTL value for the Set-Cookie header generated by the data plane. The lifetime of the cookie may be set to a value from 1 to 86400 seconds (24 hours) inclusive.
   * @return cookieTtl
   */
  @javax.annotation.Nullable
  public String getCookieTtl() {
    return cookieTtl;
  }

  public void setCookieTtl(String cookieTtl) {
    this.cookieTtl = cookieTtl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpRouteStatefulSessionAffinityPolicy httpRouteStatefulSessionAffinityPolicy = (HttpRouteStatefulSessionAffinityPolicy) o;
    return Objects.equals(this.cookieTtl, httpRouteStatefulSessionAffinityPolicy.cookieTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cookieTtl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpRouteStatefulSessionAffinityPolicy {\n");
    sb.append("    cookieTtl: ").append(toIndentedString(cookieTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cookieTtl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpRouteStatefulSessionAffinityPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpRouteStatefulSessionAffinityPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpRouteStatefulSessionAffinityPolicy is not found in the empty JSON string", HttpRouteStatefulSessionAffinityPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpRouteStatefulSessionAffinityPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpRouteStatefulSessionAffinityPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cookieTtl") != null && !jsonObj.get("cookieTtl").isJsonNull()) && !jsonObj.get("cookieTtl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookieTtl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookieTtl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpRouteStatefulSessionAffinityPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpRouteStatefulSessionAffinityPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpRouteStatefulSessionAffinityPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpRouteStatefulSessionAffinityPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpRouteStatefulSessionAffinityPolicy>() {
           @Override
           public void write(JsonWriter out, HttpRouteStatefulSessionAffinityPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpRouteStatefulSessionAffinityPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpRouteStatefulSessionAffinityPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpRouteStatefulSessionAffinityPolicy
   * @throws IOException if the JSON string is invalid with respect to HttpRouteStatefulSessionAffinityPolicy
   */
  public static HttpRouteStatefulSessionAffinityPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpRouteStatefulSessionAffinityPolicy.class);
  }

  /**
   * Convert an instance of HttpRouteStatefulSessionAffinityPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

