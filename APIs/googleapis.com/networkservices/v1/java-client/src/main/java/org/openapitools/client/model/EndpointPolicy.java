/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.EndpointMatcher;
import org.openapitools.client.model.TrafficPortSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EndpointPolicy is a resource that helps apply desired configuration on the endpoints that match specific criteria. For example, this resource can be used to apply \&quot;authentication config\&quot; an all endpoints that serve on port 8080.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.229170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointPolicy {
  public static final String SERIALIZED_NAME_AUTHORIZATION_POLICY = "authorizationPolicy";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_POLICY)
  private String authorizationPolicy;

  public static final String SERIALIZED_NAME_CLIENT_TLS_POLICY = "clientTlsPolicy";
  @SerializedName(SERIALIZED_NAME_CLIENT_TLS_POLICY)
  private String clientTlsPolicy;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENDPOINT_MATCHER = "endpointMatcher";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_MATCHER)
  private EndpointMatcher endpointMatcher;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVER_TLS_POLICY = "serverTlsPolicy";
  @SerializedName(SERIALIZED_NAME_SERVER_TLS_POLICY)
  private String serverTlsPolicy;

  public static final String SERIALIZED_NAME_TRAFFIC_PORT_SELECTOR = "trafficPortSelector";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_PORT_SELECTOR)
  private TrafficPortSelector trafficPortSelector;

  /**
   * Required. The type of endpoint policy. This is primarily used to validate the configuration.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ENDPOINT_POLICY_TYPE_UNSPECIFIED("ENDPOINT_POLICY_TYPE_UNSPECIFIED"),
    
    SIDECAR_PROXY("SIDECAR_PROXY"),
    
    GRPC_SERVER("GRPC_SERVER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public EndpointPolicy() {
  }

  public EndpointPolicy(
     String createTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  public EndpointPolicy authorizationPolicy(String authorizationPolicy) {
    this.authorizationPolicy = authorizationPolicy;
    return this;
  }

  /**
   * Optional. This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic at the matched endpoints. Refer to Authorization. If this field is not specified, authorization is disabled(no authz checks) for this endpoint.
   * @return authorizationPolicy
   */
  @javax.annotation.Nullable
  public String getAuthorizationPolicy() {
    return authorizationPolicy;
  }

  public void setAuthorizationPolicy(String authorizationPolicy) {
    this.authorizationPolicy = authorizationPolicy;
  }


  public EndpointPolicy clientTlsPolicy(String clientTlsPolicy) {
    this.clientTlsPolicy = clientTlsPolicy;
    return this;
  }

  /**
   * Optional. A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from the proxy to the actual endpoints. More specifically, it is applied to the outgoing traffic from the proxy to the endpoint. This is typically used for sidecar model where the proxy identifies itself as endpoint to the control plane, with the connection between sidecar and endpoint requiring authentication. If this field is not set, authentication is disabled(open). Applicable only when EndpointPolicyType is SIDECAR_PROXY.
   * @return clientTlsPolicy
   */
  @javax.annotation.Nullable
  public String getClientTlsPolicy() {
    return clientTlsPolicy;
  }

  public void setClientTlsPolicy(String clientTlsPolicy) {
    this.clientTlsPolicy = clientTlsPolicy;
  }


  /**
   * Output only. The timestamp when the resource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public EndpointPolicy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. A free-text description of the resource. Max length 1024 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EndpointPolicy endpointMatcher(EndpointMatcher endpointMatcher) {
    this.endpointMatcher = endpointMatcher;
    return this;
  }

  /**
   * Get endpointMatcher
   * @return endpointMatcher
   */
  @javax.annotation.Nullable
  public EndpointMatcher getEndpointMatcher() {
    return endpointMatcher;
  }

  public void setEndpointMatcher(EndpointMatcher endpointMatcher) {
    this.endpointMatcher = endpointMatcher;
  }


  public EndpointPolicy labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public EndpointPolicy putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Set of label tags associated with the EndpointPolicy resource.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public EndpointPolicy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Name of the EndpointPolicy resource. It matches pattern &#x60;projects/{project}/locations/global/endpointPolicies/{endpoint_policy}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EndpointPolicy serverTlsPolicy(String serverTlsPolicy) {
    this.serverTlsPolicy = serverTlsPolicy;
    return this;
  }

  /**
   * Optional. A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be applied to terminate the inbound traffic at the identified backends. If this field is not set, authentication is disabled(open) for this endpoint.
   * @return serverTlsPolicy
   */
  @javax.annotation.Nullable
  public String getServerTlsPolicy() {
    return serverTlsPolicy;
  }

  public void setServerTlsPolicy(String serverTlsPolicy) {
    this.serverTlsPolicy = serverTlsPolicy;
  }


  public EndpointPolicy trafficPortSelector(TrafficPortSelector trafficPortSelector) {
    this.trafficPortSelector = trafficPortSelector;
    return this;
  }

  /**
   * Get trafficPortSelector
   * @return trafficPortSelector
   */
  @javax.annotation.Nullable
  public TrafficPortSelector getTrafficPortSelector() {
    return trafficPortSelector;
  }

  public void setTrafficPortSelector(TrafficPortSelector trafficPortSelector) {
    this.trafficPortSelector = trafficPortSelector;
  }


  public EndpointPolicy type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Required. The type of endpoint policy. This is primarily used to validate the configuration.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. The timestamp when the resource was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointPolicy endpointPolicy = (EndpointPolicy) o;
    return Objects.equals(this.authorizationPolicy, endpointPolicy.authorizationPolicy) &&
        Objects.equals(this.clientTlsPolicy, endpointPolicy.clientTlsPolicy) &&
        Objects.equals(this.createTime, endpointPolicy.createTime) &&
        Objects.equals(this.description, endpointPolicy.description) &&
        Objects.equals(this.endpointMatcher, endpointPolicy.endpointMatcher) &&
        Objects.equals(this.labels, endpointPolicy.labels) &&
        Objects.equals(this.name, endpointPolicy.name) &&
        Objects.equals(this.serverTlsPolicy, endpointPolicy.serverTlsPolicy) &&
        Objects.equals(this.trafficPortSelector, endpointPolicy.trafficPortSelector) &&
        Objects.equals(this.type, endpointPolicy.type) &&
        Objects.equals(this.updateTime, endpointPolicy.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationPolicy, clientTlsPolicy, createTime, description, endpointMatcher, labels, name, serverTlsPolicy, trafficPortSelector, type, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointPolicy {\n");
    sb.append("    authorizationPolicy: ").append(toIndentedString(authorizationPolicy)).append("\n");
    sb.append("    clientTlsPolicy: ").append(toIndentedString(clientTlsPolicy)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endpointMatcher: ").append(toIndentedString(endpointMatcher)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serverTlsPolicy: ").append(toIndentedString(serverTlsPolicy)).append("\n");
    sb.append("    trafficPortSelector: ").append(toIndentedString(trafficPortSelector)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationPolicy");
    openapiFields.add("clientTlsPolicy");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("endpointMatcher");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("serverTlsPolicy");
    openapiFields.add("trafficPortSelector");
    openapiFields.add("type");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointPolicy is not found in the empty JSON string", EndpointPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorizationPolicy") != null && !jsonObj.get("authorizationPolicy").isJsonNull()) && !jsonObj.get("authorizationPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationPolicy").toString()));
      }
      if ((jsonObj.get("clientTlsPolicy") != null && !jsonObj.get("clientTlsPolicy").isJsonNull()) && !jsonObj.get("clientTlsPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientTlsPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientTlsPolicy").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `endpointMatcher`
      if (jsonObj.get("endpointMatcher") != null && !jsonObj.get("endpointMatcher").isJsonNull()) {
        EndpointMatcher.validateJsonElement(jsonObj.get("endpointMatcher"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("serverTlsPolicy") != null && !jsonObj.get("serverTlsPolicy").isJsonNull()) && !jsonObj.get("serverTlsPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverTlsPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverTlsPolicy").toString()));
      }
      // validate the optional field `trafficPortSelector`
      if (jsonObj.get("trafficPortSelector") != null && !jsonObj.get("trafficPortSelector").isJsonNull()) {
        TrafficPortSelector.validateJsonElement(jsonObj.get("trafficPortSelector"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointPolicy>() {
           @Override
           public void write(JsonWriter out, EndpointPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointPolicy
   * @throws IOException if the JSON string is invalid with respect to EndpointPolicy
   */
  public static EndpointPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointPolicy.class);
  }

  /**
   * Convert an instance of EndpointPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

