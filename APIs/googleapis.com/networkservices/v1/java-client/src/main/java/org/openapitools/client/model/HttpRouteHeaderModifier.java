/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The specification for modifying HTTP header in HTTP request and HTTP response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.229170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpRouteHeaderModifier {
  public static final String SERIALIZED_NAME_ADD = "add";
  @SerializedName(SERIALIZED_NAME_ADD)
  private Map<String, String> add = new HashMap<>();

  public static final String SERIALIZED_NAME_REMOVE = "remove";
  @SerializedName(SERIALIZED_NAME_REMOVE)
  private List<String> remove = new ArrayList<>();

  public static final String SERIALIZED_NAME_SET = "set";
  @SerializedName(SERIALIZED_NAME_SET)
  private Map<String, String> set = new HashMap<>();

  public HttpRouteHeaderModifier() {
  }

  public HttpRouteHeaderModifier add(Map<String, String> add) {
    this.add = add;
    return this;
  }

  public HttpRouteHeaderModifier putAddItem(String key, String addItem) {
    if (this.add == null) {
      this.add = new HashMap<>();
    }
    this.add.put(key, addItem);
    return this;
  }

  /**
   * Add the headers with given map where key is the name of the header, value is the value of the header.
   * @return add
   */
  @javax.annotation.Nullable
  public Map<String, String> getAdd() {
    return add;
  }

  public void setAdd(Map<String, String> add) {
    this.add = add;
  }


  public HttpRouteHeaderModifier remove(List<String> remove) {
    this.remove = remove;
    return this;
  }

  public HttpRouteHeaderModifier addRemoveItem(String removeItem) {
    if (this.remove == null) {
      this.remove = new ArrayList<>();
    }
    this.remove.add(removeItem);
    return this;
  }

  /**
   * Remove headers (matching by header names) specified in the list.
   * @return remove
   */
  @javax.annotation.Nullable
  public List<String> getRemove() {
    return remove;
  }

  public void setRemove(List<String> remove) {
    this.remove = remove;
  }


  public HttpRouteHeaderModifier set(Map<String, String> set) {
    this.set = set;
    return this;
  }

  public HttpRouteHeaderModifier putSetItem(String key, String setItem) {
    if (this.set == null) {
      this.set = new HashMap<>();
    }
    this.set.put(key, setItem);
    return this;
  }

  /**
   * Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
   * @return set
   */
  @javax.annotation.Nullable
  public Map<String, String> getSet() {
    return set;
  }

  public void setSet(Map<String, String> set) {
    this.set = set;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpRouteHeaderModifier httpRouteHeaderModifier = (HttpRouteHeaderModifier) o;
    return Objects.equals(this.add, httpRouteHeaderModifier.add) &&
        Objects.equals(this.remove, httpRouteHeaderModifier.remove) &&
        Objects.equals(this.set, httpRouteHeaderModifier.set);
  }

  @Override
  public int hashCode() {
    return Objects.hash(add, remove, set);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpRouteHeaderModifier {\n");
    sb.append("    add: ").append(toIndentedString(add)).append("\n");
    sb.append("    remove: ").append(toIndentedString(remove)).append("\n");
    sb.append("    set: ").append(toIndentedString(set)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add");
    openapiFields.add("remove");
    openapiFields.add("set");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpRouteHeaderModifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpRouteHeaderModifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpRouteHeaderModifier is not found in the empty JSON string", HttpRouteHeaderModifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpRouteHeaderModifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpRouteHeaderModifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("remove") != null && !jsonObj.get("remove").isJsonNull() && !jsonObj.get("remove").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `remove` to be an array in the JSON string but got `%s`", jsonObj.get("remove").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpRouteHeaderModifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpRouteHeaderModifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpRouteHeaderModifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpRouteHeaderModifier.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpRouteHeaderModifier>() {
           @Override
           public void write(JsonWriter out, HttpRouteHeaderModifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpRouteHeaderModifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpRouteHeaderModifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpRouteHeaderModifier
   * @throws IOException if the JSON string is invalid with respect to HttpRouteHeaderModifier
   */
  public static HttpRouteHeaderModifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpRouteHeaderModifier.class);
  }

  /**
   * Convert an instance of HttpRouteHeaderModifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

