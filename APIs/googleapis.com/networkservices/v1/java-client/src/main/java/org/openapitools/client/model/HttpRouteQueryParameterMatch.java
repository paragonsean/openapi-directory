/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifications to match a query parameter in the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.229170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpRouteQueryParameterMatch {
  public static final String SERIALIZED_NAME_EXACT_MATCH = "exactMatch";
  @SerializedName(SERIALIZED_NAME_EXACT_MATCH)
  private String exactMatch;

  public static final String SERIALIZED_NAME_PRESENT_MATCH = "presentMatch";
  @SerializedName(SERIALIZED_NAME_PRESENT_MATCH)
  private Boolean presentMatch;

  public static final String SERIALIZED_NAME_QUERY_PARAMETER = "queryParameter";
  @SerializedName(SERIALIZED_NAME_QUERY_PARAMETER)
  private String queryParameter;

  public static final String SERIALIZED_NAME_REGEX_MATCH = "regexMatch";
  @SerializedName(SERIALIZED_NAME_REGEX_MATCH)
  private String regexMatch;

  public HttpRouteQueryParameterMatch() {
  }

  public HttpRouteQueryParameterMatch exactMatch(String exactMatch) {
    this.exactMatch = exactMatch;
    return this;
  }

  /**
   * The value of the query parameter must exactly match the contents of exact_match. Only one of exact_match, regex_match, or present_match must be set.
   * @return exactMatch
   */
  @javax.annotation.Nullable
  public String getExactMatch() {
    return exactMatch;
  }

  public void setExactMatch(String exactMatch) {
    this.exactMatch = exactMatch;
  }


  public HttpRouteQueryParameterMatch presentMatch(Boolean presentMatch) {
    this.presentMatch = presentMatch;
    return this;
  }

  /**
   * Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not. Only one of exact_match, regex_match, or present_match must be set.
   * @return presentMatch
   */
  @javax.annotation.Nullable
  public Boolean getPresentMatch() {
    return presentMatch;
  }

  public void setPresentMatch(Boolean presentMatch) {
    this.presentMatch = presentMatch;
  }


  public HttpRouteQueryParameterMatch queryParameter(String queryParameter) {
    this.queryParameter = queryParameter;
    return this;
  }

  /**
   * The name of the query parameter to match.
   * @return queryParameter
   */
  @javax.annotation.Nullable
  public String getQueryParameter() {
    return queryParameter;
  }

  public void setQueryParameter(String queryParameter) {
    this.queryParameter = queryParameter;
  }


  public HttpRouteQueryParameterMatch regexMatch(String regexMatch) {
    this.regexMatch = regexMatch;
    return this;
  }

  /**
   * The value of the query parameter must match the regular expression specified by regex_match. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of exact_match, regex_match, or present_match must be set.
   * @return regexMatch
   */
  @javax.annotation.Nullable
  public String getRegexMatch() {
    return regexMatch;
  }

  public void setRegexMatch(String regexMatch) {
    this.regexMatch = regexMatch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpRouteQueryParameterMatch httpRouteQueryParameterMatch = (HttpRouteQueryParameterMatch) o;
    return Objects.equals(this.exactMatch, httpRouteQueryParameterMatch.exactMatch) &&
        Objects.equals(this.presentMatch, httpRouteQueryParameterMatch.presentMatch) &&
        Objects.equals(this.queryParameter, httpRouteQueryParameterMatch.queryParameter) &&
        Objects.equals(this.regexMatch, httpRouteQueryParameterMatch.regexMatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exactMatch, presentMatch, queryParameter, regexMatch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpRouteQueryParameterMatch {\n");
    sb.append("    exactMatch: ").append(toIndentedString(exactMatch)).append("\n");
    sb.append("    presentMatch: ").append(toIndentedString(presentMatch)).append("\n");
    sb.append("    queryParameter: ").append(toIndentedString(queryParameter)).append("\n");
    sb.append("    regexMatch: ").append(toIndentedString(regexMatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exactMatch");
    openapiFields.add("presentMatch");
    openapiFields.add("queryParameter");
    openapiFields.add("regexMatch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpRouteQueryParameterMatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpRouteQueryParameterMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpRouteQueryParameterMatch is not found in the empty JSON string", HttpRouteQueryParameterMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpRouteQueryParameterMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpRouteQueryParameterMatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("exactMatch") != null && !jsonObj.get("exactMatch").isJsonNull()) && !jsonObj.get("exactMatch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exactMatch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exactMatch").toString()));
      }
      if ((jsonObj.get("queryParameter") != null && !jsonObj.get("queryParameter").isJsonNull()) && !jsonObj.get("queryParameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryParameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryParameter").toString()));
      }
      if ((jsonObj.get("regexMatch") != null && !jsonObj.get("regexMatch").isJsonNull()) && !jsonObj.get("regexMatch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regexMatch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regexMatch").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpRouteQueryParameterMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpRouteQueryParameterMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpRouteQueryParameterMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpRouteQueryParameterMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpRouteQueryParameterMatch>() {
           @Override
           public void write(JsonWriter out, HttpRouteQueryParameterMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpRouteQueryParameterMatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpRouteQueryParameterMatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpRouteQueryParameterMatch
   * @throws IOException if the JSON string is invalid with respect to HttpRouteQueryParameterMatch
   */
  public static HttpRouteQueryParameterMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpRouteQueryParameterMatch.class);
  }

  /**
   * Convert an instance of HttpRouteQueryParameterMatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

