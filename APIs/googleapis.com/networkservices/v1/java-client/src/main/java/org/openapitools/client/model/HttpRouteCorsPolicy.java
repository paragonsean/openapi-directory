/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Specification for allowing client side cross-origin requests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.229170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpRouteCorsPolicy {
  public static final String SERIALIZED_NAME_ALLOW_CREDENTIALS = "allowCredentials";
  @SerializedName(SERIALIZED_NAME_ALLOW_CREDENTIALS)
  private Boolean allowCredentials;

  public static final String SERIALIZED_NAME_ALLOW_HEADERS = "allowHeaders";
  @SerializedName(SERIALIZED_NAME_ALLOW_HEADERS)
  private List<String> allowHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOW_METHODS = "allowMethods";
  @SerializedName(SERIALIZED_NAME_ALLOW_METHODS)
  private List<String> allowMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOW_ORIGIN_REGEXES = "allowOriginRegexes";
  @SerializedName(SERIALIZED_NAME_ALLOW_ORIGIN_REGEXES)
  private List<String> allowOriginRegexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOW_ORIGINS = "allowOrigins";
  @SerializedName(SERIALIZED_NAME_ALLOW_ORIGINS)
  private List<String> allowOrigins = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_EXPOSE_HEADERS = "exposeHeaders";
  @SerializedName(SERIALIZED_NAME_EXPOSE_HEADERS)
  private List<String> exposeHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_AGE = "maxAge";
  @SerializedName(SERIALIZED_NAME_MAX_AGE)
  private String maxAge;

  public HttpRouteCorsPolicy() {
  }

  public HttpRouteCorsPolicy allowCredentials(Boolean allowCredentials) {
    this.allowCredentials = allowCredentials;
    return this;
  }

  /**
   * In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.
   * @return allowCredentials
   */
  @javax.annotation.Nullable
  public Boolean getAllowCredentials() {
    return allowCredentials;
  }

  public void setAllowCredentials(Boolean allowCredentials) {
    this.allowCredentials = allowCredentials;
  }


  public HttpRouteCorsPolicy allowHeaders(List<String> allowHeaders) {
    this.allowHeaders = allowHeaders;
    return this;
  }

  public HttpRouteCorsPolicy addAllowHeadersItem(String allowHeadersItem) {
    if (this.allowHeaders == null) {
      this.allowHeaders = new ArrayList<>();
    }
    this.allowHeaders.add(allowHeadersItem);
    return this;
  }

  /**
   * Specifies the content for Access-Control-Allow-Headers header.
   * @return allowHeaders
   */
  @javax.annotation.Nullable
  public List<String> getAllowHeaders() {
    return allowHeaders;
  }

  public void setAllowHeaders(List<String> allowHeaders) {
    this.allowHeaders = allowHeaders;
  }


  public HttpRouteCorsPolicy allowMethods(List<String> allowMethods) {
    this.allowMethods = allowMethods;
    return this;
  }

  public HttpRouteCorsPolicy addAllowMethodsItem(String allowMethodsItem) {
    if (this.allowMethods == null) {
      this.allowMethods = new ArrayList<>();
    }
    this.allowMethods.add(allowMethodsItem);
    return this;
  }

  /**
   * Specifies the content for Access-Control-Allow-Methods header.
   * @return allowMethods
   */
  @javax.annotation.Nullable
  public List<String> getAllowMethods() {
    return allowMethods;
  }

  public void setAllowMethods(List<String> allowMethods) {
    this.allowMethods = allowMethods;
  }


  public HttpRouteCorsPolicy allowOriginRegexes(List<String> allowOriginRegexes) {
    this.allowOriginRegexes = allowOriginRegexes;
    return this;
  }

  public HttpRouteCorsPolicy addAllowOriginRegexesItem(String allowOriginRegexesItem) {
    if (this.allowOriginRegexes == null) {
      this.allowOriginRegexes = new ArrayList<>();
    }
    this.allowOriginRegexes.add(allowOriginRegexesItem);
    return this;
  }

  /**
   * Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.
   * @return allowOriginRegexes
   */
  @javax.annotation.Nullable
  public List<String> getAllowOriginRegexes() {
    return allowOriginRegexes;
  }

  public void setAllowOriginRegexes(List<String> allowOriginRegexes) {
    this.allowOriginRegexes = allowOriginRegexes;
  }


  public HttpRouteCorsPolicy allowOrigins(List<String> allowOrigins) {
    this.allowOrigins = allowOrigins;
    return this;
  }

  public HttpRouteCorsPolicy addAllowOriginsItem(String allowOriginsItem) {
    if (this.allowOrigins == null) {
      this.allowOrigins = new ArrayList<>();
    }
    this.allowOrigins.add(allowOriginsItem);
    return this;
  }

  /**
   * Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.
   * @return allowOrigins
   */
  @javax.annotation.Nullable
  public List<String> getAllowOrigins() {
    return allowOrigins;
  }

  public void setAllowOrigins(List<String> allowOrigins) {
    this.allowOrigins = allowOrigins;
  }


  public HttpRouteCorsPolicy disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public HttpRouteCorsPolicy exposeHeaders(List<String> exposeHeaders) {
    this.exposeHeaders = exposeHeaders;
    return this;
  }

  public HttpRouteCorsPolicy addExposeHeadersItem(String exposeHeadersItem) {
    if (this.exposeHeaders == null) {
      this.exposeHeaders = new ArrayList<>();
    }
    this.exposeHeaders.add(exposeHeadersItem);
    return this;
  }

  /**
   * Specifies the content for Access-Control-Expose-Headers header.
   * @return exposeHeaders
   */
  @javax.annotation.Nullable
  public List<String> getExposeHeaders() {
    return exposeHeaders;
  }

  public void setExposeHeaders(List<String> exposeHeaders) {
    this.exposeHeaders = exposeHeaders;
  }


  public HttpRouteCorsPolicy maxAge(String maxAge) {
    this.maxAge = maxAge;
    return this;
  }

  /**
   * Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
   * @return maxAge
   */
  @javax.annotation.Nullable
  public String getMaxAge() {
    return maxAge;
  }

  public void setMaxAge(String maxAge) {
    this.maxAge = maxAge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpRouteCorsPolicy httpRouteCorsPolicy = (HttpRouteCorsPolicy) o;
    return Objects.equals(this.allowCredentials, httpRouteCorsPolicy.allowCredentials) &&
        Objects.equals(this.allowHeaders, httpRouteCorsPolicy.allowHeaders) &&
        Objects.equals(this.allowMethods, httpRouteCorsPolicy.allowMethods) &&
        Objects.equals(this.allowOriginRegexes, httpRouteCorsPolicy.allowOriginRegexes) &&
        Objects.equals(this.allowOrigins, httpRouteCorsPolicy.allowOrigins) &&
        Objects.equals(this.disabled, httpRouteCorsPolicy.disabled) &&
        Objects.equals(this.exposeHeaders, httpRouteCorsPolicy.exposeHeaders) &&
        Objects.equals(this.maxAge, httpRouteCorsPolicy.maxAge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowCredentials, allowHeaders, allowMethods, allowOriginRegexes, allowOrigins, disabled, exposeHeaders, maxAge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpRouteCorsPolicy {\n");
    sb.append("    allowCredentials: ").append(toIndentedString(allowCredentials)).append("\n");
    sb.append("    allowHeaders: ").append(toIndentedString(allowHeaders)).append("\n");
    sb.append("    allowMethods: ").append(toIndentedString(allowMethods)).append("\n");
    sb.append("    allowOriginRegexes: ").append(toIndentedString(allowOriginRegexes)).append("\n");
    sb.append("    allowOrigins: ").append(toIndentedString(allowOrigins)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    exposeHeaders: ").append(toIndentedString(exposeHeaders)).append("\n");
    sb.append("    maxAge: ").append(toIndentedString(maxAge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowCredentials");
    openapiFields.add("allowHeaders");
    openapiFields.add("allowMethods");
    openapiFields.add("allowOriginRegexes");
    openapiFields.add("allowOrigins");
    openapiFields.add("disabled");
    openapiFields.add("exposeHeaders");
    openapiFields.add("maxAge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpRouteCorsPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpRouteCorsPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpRouteCorsPolicy is not found in the empty JSON string", HttpRouteCorsPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpRouteCorsPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpRouteCorsPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowHeaders") != null && !jsonObj.get("allowHeaders").isJsonNull() && !jsonObj.get("allowHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("allowHeaders").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowMethods") != null && !jsonObj.get("allowMethods").isJsonNull() && !jsonObj.get("allowMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowMethods` to be an array in the JSON string but got `%s`", jsonObj.get("allowMethods").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowOriginRegexes") != null && !jsonObj.get("allowOriginRegexes").isJsonNull() && !jsonObj.get("allowOriginRegexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowOriginRegexes` to be an array in the JSON string but got `%s`", jsonObj.get("allowOriginRegexes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowOrigins") != null && !jsonObj.get("allowOrigins").isJsonNull() && !jsonObj.get("allowOrigins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowOrigins` to be an array in the JSON string but got `%s`", jsonObj.get("allowOrigins").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exposeHeaders") != null && !jsonObj.get("exposeHeaders").isJsonNull() && !jsonObj.get("exposeHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exposeHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("exposeHeaders").toString()));
      }
      if ((jsonObj.get("maxAge") != null && !jsonObj.get("maxAge").isJsonNull()) && !jsonObj.get("maxAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxAge").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpRouteCorsPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpRouteCorsPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpRouteCorsPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpRouteCorsPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpRouteCorsPolicy>() {
           @Override
           public void write(JsonWriter out, HttpRouteCorsPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpRouteCorsPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpRouteCorsPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpRouteCorsPolicy
   * @throws IOException if the JSON string is invalid with respect to HttpRouteCorsPolicy
   */
  public static HttpRouteCorsPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpRouteCorsPolicy.class);
  }

  /**
   * Convert an instance of HttpRouteCorsPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

