/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EndpointMatcherMetadataLabelMatcherMetadataLabels;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The matcher that is based on node metadata presented by xDS clients.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.229170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointMatcherMetadataLabelMatcher {
  /**
   * Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), pick up the one with older creation time.
   */
  @JsonAdapter(MetadataLabelMatchCriteriaEnum.Adapter.class)
  public enum MetadataLabelMatchCriteriaEnum {
    METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED("METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED"),
    
    MATCH_ANY("MATCH_ANY"),
    
    MATCH_ALL("MATCH_ALL");

    private String value;

    MetadataLabelMatchCriteriaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetadataLabelMatchCriteriaEnum fromValue(String value) {
      for (MetadataLabelMatchCriteriaEnum b : MetadataLabelMatchCriteriaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetadataLabelMatchCriteriaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetadataLabelMatchCriteriaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetadataLabelMatchCriteriaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetadataLabelMatchCriteriaEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetadataLabelMatchCriteriaEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METADATA_LABEL_MATCH_CRITERIA = "metadataLabelMatchCriteria";
  @SerializedName(SERIALIZED_NAME_METADATA_LABEL_MATCH_CRITERIA)
  private MetadataLabelMatchCriteriaEnum metadataLabelMatchCriteria;

  public static final String SERIALIZED_NAME_METADATA_LABELS = "metadataLabels";
  @SerializedName(SERIALIZED_NAME_METADATA_LABELS)
  private List<EndpointMatcherMetadataLabelMatcherMetadataLabels> metadataLabels = new ArrayList<>();

  public EndpointMatcherMetadataLabelMatcher() {
  }

  public EndpointMatcherMetadataLabelMatcher metadataLabelMatchCriteria(MetadataLabelMatchCriteriaEnum metadataLabelMatchCriteria) {
    this.metadataLabelMatchCriteria = metadataLabelMatchCriteria;
    return this;
  }

  /**
   * Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), pick up the one with older creation time.
   * @return metadataLabelMatchCriteria
   */
  @javax.annotation.Nullable
  public MetadataLabelMatchCriteriaEnum getMetadataLabelMatchCriteria() {
    return metadataLabelMatchCriteria;
  }

  public void setMetadataLabelMatchCriteria(MetadataLabelMatchCriteriaEnum metadataLabelMatchCriteria) {
    this.metadataLabelMatchCriteria = metadataLabelMatchCriteria;
  }


  public EndpointMatcherMetadataLabelMatcher metadataLabels(List<EndpointMatcherMetadataLabelMatcherMetadataLabels> metadataLabels) {
    this.metadataLabels = metadataLabels;
    return this;
  }

  public EndpointMatcherMetadataLabelMatcher addMetadataLabelsItem(EndpointMatcherMetadataLabelMatcherMetadataLabels metadataLabelsItem) {
    if (this.metadataLabels == null) {
      this.metadataLabels = new ArrayList<>();
    }
    this.metadataLabels.add(metadataLabelsItem);
    return this;
  }

  /**
   * The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
   * @return metadataLabels
   */
  @javax.annotation.Nullable
  public List<EndpointMatcherMetadataLabelMatcherMetadataLabels> getMetadataLabels() {
    return metadataLabels;
  }

  public void setMetadataLabels(List<EndpointMatcherMetadataLabelMatcherMetadataLabels> metadataLabels) {
    this.metadataLabels = metadataLabels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointMatcherMetadataLabelMatcher endpointMatcherMetadataLabelMatcher = (EndpointMatcherMetadataLabelMatcher) o;
    return Objects.equals(this.metadataLabelMatchCriteria, endpointMatcherMetadataLabelMatcher.metadataLabelMatchCriteria) &&
        Objects.equals(this.metadataLabels, endpointMatcherMetadataLabelMatcher.metadataLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadataLabelMatchCriteria, metadataLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointMatcherMetadataLabelMatcher {\n");
    sb.append("    metadataLabelMatchCriteria: ").append(toIndentedString(metadataLabelMatchCriteria)).append("\n");
    sb.append("    metadataLabels: ").append(toIndentedString(metadataLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metadataLabelMatchCriteria");
    openapiFields.add("metadataLabels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointMatcherMetadataLabelMatcher
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointMatcherMetadataLabelMatcher.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointMatcherMetadataLabelMatcher is not found in the empty JSON string", EndpointMatcherMetadataLabelMatcher.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointMatcherMetadataLabelMatcher.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointMatcherMetadataLabelMatcher` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("metadataLabelMatchCriteria") != null && !jsonObj.get("metadataLabelMatchCriteria").isJsonNull()) && !jsonObj.get("metadataLabelMatchCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataLabelMatchCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataLabelMatchCriteria").toString()));
      }
      // validate the optional field `metadataLabelMatchCriteria`
      if (jsonObj.get("metadataLabelMatchCriteria") != null && !jsonObj.get("metadataLabelMatchCriteria").isJsonNull()) {
        MetadataLabelMatchCriteriaEnum.validateJsonElement(jsonObj.get("metadataLabelMatchCriteria"));
      }
      if (jsonObj.get("metadataLabels") != null && !jsonObj.get("metadataLabels").isJsonNull()) {
        JsonArray jsonArraymetadataLabels = jsonObj.getAsJsonArray("metadataLabels");
        if (jsonArraymetadataLabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadataLabels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadataLabels` to be an array in the JSON string but got `%s`", jsonObj.get("metadataLabels").toString()));
          }

          // validate the optional field `metadataLabels` (array)
          for (int i = 0; i < jsonArraymetadataLabels.size(); i++) {
            EndpointMatcherMetadataLabelMatcherMetadataLabels.validateJsonElement(jsonArraymetadataLabels.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointMatcherMetadataLabelMatcher.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointMatcherMetadataLabelMatcher' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointMatcherMetadataLabelMatcher> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointMatcherMetadataLabelMatcher.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointMatcherMetadataLabelMatcher>() {
           @Override
           public void write(JsonWriter out, EndpointMatcherMetadataLabelMatcher value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointMatcherMetadataLabelMatcher read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointMatcherMetadataLabelMatcher given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointMatcherMetadataLabelMatcher
   * @throws IOException if the JSON string is invalid with respect to EndpointMatcherMetadataLabelMatcher
   */
  public static EndpointMatcherMetadataLabelMatcher fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointMatcherMetadataLabelMatcher.class);
  }

  /**
   * Convert an instance of EndpointMatcherMetadataLabelMatcher to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

