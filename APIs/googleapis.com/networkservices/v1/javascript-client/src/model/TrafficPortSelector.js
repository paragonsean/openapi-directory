/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TrafficPortSelector model module.
 * @module model/TrafficPortSelector
 * @version v1
 */
class TrafficPortSelector {
    /**
     * Constructs a new <code>TrafficPortSelector</code>.
     * Specification of a port-based selector.
     * @alias module:model/TrafficPortSelector
     */
    constructor() { 
        
        TrafficPortSelector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TrafficPortSelector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrafficPortSelector} obj Optional instance to populate.
     * @return {module:model/TrafficPortSelector} The populated <code>TrafficPortSelector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrafficPortSelector();

            if (data.hasOwnProperty('ports')) {
                obj['ports'] = ApiClient.convertToType(data['ports'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrafficPortSelector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrafficPortSelector</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['ports'])) {
            throw new Error("Expected the field `ports` to be an array in the JSON data but got " + data['ports']);
        }

        return true;
    }


}



/**
 * Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
 * @member {Array.<String>} ports
 */
TrafficPortSelector.prototype['ports'] = undefined;






export default TrafficPortSelector;

