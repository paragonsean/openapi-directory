/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GrpcRouteRetryPolicy model module.
 * @module model/GrpcRouteRetryPolicy
 * @version v1
 */
class GrpcRouteRetryPolicy {
    /**
     * Constructs a new <code>GrpcRouteRetryPolicy</code>.
     * The specifications for retries.
     * @alias module:model/GrpcRouteRetryPolicy
     */
    constructor() { 
        
        GrpcRouteRetryPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GrpcRouteRetryPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GrpcRouteRetryPolicy} obj Optional instance to populate.
     * @return {module:model/GrpcRouteRetryPolicy} The populated <code>GrpcRouteRetryPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GrpcRouteRetryPolicy();

            if (data.hasOwnProperty('numRetries')) {
                obj['numRetries'] = ApiClient.convertToType(data['numRetries'], 'Number');
            }
            if (data.hasOwnProperty('retryConditions')) {
                obj['retryConditions'] = ApiClient.convertToType(data['retryConditions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GrpcRouteRetryPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GrpcRouteRetryPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['retryConditions'])) {
            throw new Error("Expected the field `retryConditions` to be an array in the JSON data but got " + data['retryConditions']);
        }

        return true;
    }


}



/**
 * Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.
 * @member {Number} numRetries
 */
GrpcRouteRetryPolicy.prototype['numRetries'] = undefined;

/**
 * - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable
 * @member {Array.<String>} retryConditions
 */
GrpcRouteRetryPolicy.prototype['retryConditions'] = undefined;






export default GrpcRouteRetryPolicy;

