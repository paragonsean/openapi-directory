/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EndpointMatcherMetadataLabelMatcherMetadataLabels from './EndpointMatcherMetadataLabelMatcherMetadataLabels';

/**
 * The EndpointMatcherMetadataLabelMatcher model module.
 * @module model/EndpointMatcherMetadataLabelMatcher
 * @version v1
 */
class EndpointMatcherMetadataLabelMatcher {
    /**
     * Constructs a new <code>EndpointMatcherMetadataLabelMatcher</code>.
     * The matcher that is based on node metadata presented by xDS clients.
     * @alias module:model/EndpointMatcherMetadataLabelMatcher
     */
    constructor() { 
        
        EndpointMatcherMetadataLabelMatcher.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EndpointMatcherMetadataLabelMatcher</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EndpointMatcherMetadataLabelMatcher} obj Optional instance to populate.
     * @return {module:model/EndpointMatcherMetadataLabelMatcher} The populated <code>EndpointMatcherMetadataLabelMatcher</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EndpointMatcherMetadataLabelMatcher();

            if (data.hasOwnProperty('metadataLabelMatchCriteria')) {
                obj['metadataLabelMatchCriteria'] = ApiClient.convertToType(data['metadataLabelMatchCriteria'], 'String');
            }
            if (data.hasOwnProperty('metadataLabels')) {
                obj['metadataLabels'] = ApiClient.convertToType(data['metadataLabels'], [EndpointMatcherMetadataLabelMatcherMetadataLabels]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EndpointMatcherMetadataLabelMatcher</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EndpointMatcherMetadataLabelMatcher</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['metadataLabelMatchCriteria'] && !(typeof data['metadataLabelMatchCriteria'] === 'string' || data['metadataLabelMatchCriteria'] instanceof String)) {
            throw new Error("Expected the field `metadataLabelMatchCriteria` to be a primitive type in the JSON string but got " + data['metadataLabelMatchCriteria']);
        }
        if (data['metadataLabels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadataLabels'])) {
                throw new Error("Expected the field `metadataLabels` to be an array in the JSON data but got " + data['metadataLabels']);
            }
            // validate the optional field `metadataLabels` (array)
            for (const item of data['metadataLabels']) {
                EndpointMatcherMetadataLabelMatcherMetadataLabels.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), pick up the one with older creation time.
 * @member {module:model/EndpointMatcherMetadataLabelMatcher.MetadataLabelMatchCriteriaEnum} metadataLabelMatchCriteria
 */
EndpointMatcherMetadataLabelMatcher.prototype['metadataLabelMatchCriteria'] = undefined;

/**
 * The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
 * @member {Array.<module:model/EndpointMatcherMetadataLabelMatcherMetadataLabels>} metadataLabels
 */
EndpointMatcherMetadataLabelMatcher.prototype['metadataLabels'] = undefined;





/**
 * Allowed values for the <code>metadataLabelMatchCriteria</code> property.
 * @enum {String}
 * @readonly
 */
EndpointMatcherMetadataLabelMatcher['MetadataLabelMatchCriteriaEnum'] = {

    /**
     * value: "METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED"
     * @const
     */
    "METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED": "METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED",

    /**
     * value: "MATCH_ANY"
     * @const
     */
    "MATCH_ANY": "MATCH_ANY",

    /**
     * value: "MATCH_ALL"
     * @const
     */
    "MATCH_ALL": "MATCH_ALL"
};



export default EndpointMatcherMetadataLabelMatcher;

