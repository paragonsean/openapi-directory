/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HttpRouteHeaderMatch from './HttpRouteHeaderMatch';
import HttpRouteQueryParameterMatch from './HttpRouteQueryParameterMatch';

/**
 * The HttpRouteRouteMatch model module.
 * @module model/HttpRouteRouteMatch
 * @version v1
 */
class HttpRouteRouteMatch {
    /**
     * Constructs a new <code>HttpRouteRouteMatch</code>.
     * RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
     * @alias module:model/HttpRouteRouteMatch
     */
    constructor() { 
        
        HttpRouteRouteMatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpRouteRouteMatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpRouteRouteMatch} obj Optional instance to populate.
     * @return {module:model/HttpRouteRouteMatch} The populated <code>HttpRouteRouteMatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpRouteRouteMatch();

            if (data.hasOwnProperty('fullPathMatch')) {
                obj['fullPathMatch'] = ApiClient.convertToType(data['fullPathMatch'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], [HttpRouteHeaderMatch]);
            }
            if (data.hasOwnProperty('ignoreCase')) {
                obj['ignoreCase'] = ApiClient.convertToType(data['ignoreCase'], 'Boolean');
            }
            if (data.hasOwnProperty('prefixMatch')) {
                obj['prefixMatch'] = ApiClient.convertToType(data['prefixMatch'], 'String');
            }
            if (data.hasOwnProperty('queryParameters')) {
                obj['queryParameters'] = ApiClient.convertToType(data['queryParameters'], [HttpRouteQueryParameterMatch]);
            }
            if (data.hasOwnProperty('regexMatch')) {
                obj['regexMatch'] = ApiClient.convertToType(data['regexMatch'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpRouteRouteMatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpRouteRouteMatch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fullPathMatch'] && !(typeof data['fullPathMatch'] === 'string' || data['fullPathMatch'] instanceof String)) {
            throw new Error("Expected the field `fullPathMatch` to be a primitive type in the JSON string but got " + data['fullPathMatch']);
        }
        if (data['headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['headers'])) {
                throw new Error("Expected the field `headers` to be an array in the JSON data but got " + data['headers']);
            }
            // validate the optional field `headers` (array)
            for (const item of data['headers']) {
                HttpRouteHeaderMatch.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['prefixMatch'] && !(typeof data['prefixMatch'] === 'string' || data['prefixMatch'] instanceof String)) {
            throw new Error("Expected the field `prefixMatch` to be a primitive type in the JSON string but got " + data['prefixMatch']);
        }
        if (data['queryParameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queryParameters'])) {
                throw new Error("Expected the field `queryParameters` to be an array in the JSON data but got " + data['queryParameters']);
            }
            // validate the optional field `queryParameters` (array)
            for (const item of data['queryParameters']) {
                HttpRouteQueryParameterMatch.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['regexMatch'] && !(typeof data['regexMatch'] === 'string' || data['regexMatch'] instanceof String)) {
            throw new Error("Expected the field `regexMatch` to be a primitive type in the JSON string but got " + data['regexMatch']);
        }

        return true;
    }


}



/**
 * The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
 * @member {String} fullPathMatch
 */
HttpRouteRouteMatch.prototype['fullPathMatch'] = undefined;

/**
 * Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
 * @member {Array.<module:model/HttpRouteHeaderMatch>} headers
 */
HttpRouteRouteMatch.prototype['headers'] = undefined;

/**
 * Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
 * @member {Boolean} ignoreCase
 */
HttpRouteRouteMatch.prototype['ignoreCase'] = undefined;

/**
 * The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
 * @member {String} prefixMatch
 */
HttpRouteRouteMatch.prototype['prefixMatch'] = undefined;

/**
 * Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
 * @member {Array.<module:model/HttpRouteQueryParameterMatch>} queryParameters
 */
HttpRouteRouteMatch.prototype['queryParameters'] = undefined;

/**
 * The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
 * @member {String} regexMatch
 */
HttpRouteRouteMatch.prototype['regexMatch'] = undefined;






export default HttpRouteRouteMatch;

