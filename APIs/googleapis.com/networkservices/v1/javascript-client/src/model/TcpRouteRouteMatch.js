/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TcpRouteRouteMatch model module.
 * @module model/TcpRouteRouteMatch
 * @version v1
 */
class TcpRouteRouteMatch {
    /**
     * Constructs a new <code>TcpRouteRouteMatch</code>.
     * RouteMatch defines the predicate used to match requests to a given action. Multiple match types are \&quot;OR\&quot;ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
     * @alias module:model/TcpRouteRouteMatch
     */
    constructor() { 
        
        TcpRouteRouteMatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TcpRouteRouteMatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TcpRouteRouteMatch} obj Optional instance to populate.
     * @return {module:model/TcpRouteRouteMatch} The populated <code>TcpRouteRouteMatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TcpRouteRouteMatch();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TcpRouteRouteMatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TcpRouteRouteMatch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['port'] && !(typeof data['port'] === 'string' || data['port'] instanceof String)) {
            throw new Error("Expected the field `port` to be a primitive type in the JSON string but got " + data['port']);
        }

        return true;
    }


}



/**
 * Required. Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask. By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: \"10.0.0.1\" - matches against this exact IP address. \"10.0.0.0/8\" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. \"0.0.0.0/0\" - matches against any IP address'.
 * @member {String} address
 */
TcpRouteRouteMatch.prototype['address'] = undefined;

/**
 * Required. Specifies the destination port to match against.
 * @member {String} port
 */
TcpRouteRouteMatch.prototype['port'] = undefined;






export default TcpRouteRouteMatch;

