/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GrpcRouteRouteRule from './GrpcRouteRouteRule';

/**
 * The GrpcRoute model module.
 * @module model/GrpcRoute
 * @version v1
 */
class GrpcRoute {
    /**
     * Constructs a new <code>GrpcRoute</code>.
     * GrpcRoute is the resource defining how gRPC traffic routed by a Mesh or Gateway resource is routed.
     * @alias module:model/GrpcRoute
     */
    constructor() { 
        
        GrpcRoute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GrpcRoute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GrpcRoute} obj Optional instance to populate.
     * @return {module:model/GrpcRoute} The populated <code>GrpcRoute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GrpcRoute();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('gateways')) {
                obj['gateways'] = ApiClient.convertToType(data['gateways'], ['String']);
            }
            if (data.hasOwnProperty('hostnames')) {
                obj['hostnames'] = ApiClient.convertToType(data['hostnames'], ['String']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('meshes')) {
                obj['meshes'] = ApiClient.convertToType(data['meshes'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rules')) {
                obj['rules'] = ApiClient.convertToType(data['rules'], [GrpcRouteRouteRule]);
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GrpcRoute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GrpcRoute</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['gateways'])) {
            throw new Error("Expected the field `gateways` to be an array in the JSON data but got " + data['gateways']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hostnames'])) {
            throw new Error("Expected the field `hostnames` to be an array in the JSON data but got " + data['hostnames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['meshes'])) {
            throw new Error("Expected the field `meshes` to be an array in the JSON data but got " + data['meshes']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rules'])) {
                throw new Error("Expected the field `rules` to be an array in the JSON data but got " + data['rules']);
            }
            // validate the optional field `rules` (array)
            for (const item of data['rules']) {
                GrpcRouteRouteRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The timestamp when the resource was created.
 * @member {String} createTime
 */
GrpcRoute.prototype['createTime'] = undefined;

/**
 * Optional. A free-text description of the resource. Max length 1024 characters.
 * @member {String} description
 */
GrpcRoute.prototype['description'] = undefined;

/**
 * Optional. Gateways defines a list of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/_*_/locations/global/gateways/`
 * @member {Array.<String>} gateways
 */
GrpcRoute.prototype['gateways'] = undefined;

/**
 * Required. Service hostnames with an optional port for which this route describes traffic. Format: [:] Hostname is the fully qualified domain name of a network host. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. Hostname can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. `foo.example.com`) or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateway must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same route, it is not possible to associate two routes both with `*.bar.com` or both with `bar.com`. If a port is specified, then gRPC clients must use the channel URI with the port to match this rule (i.e. \"xds:///service:123\"), otherwise they must supply the URI without a port (i.e. \"xds:///service\").
 * @member {Array.<String>} hostnames
 */
GrpcRoute.prototype['hostnames'] = undefined;

/**
 * Optional. Set of label tags associated with the GrpcRoute resource.
 * @member {Object.<String, String>} labels
 */
GrpcRoute.prototype['labels'] = undefined;

/**
 * Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/_*_/locations/global/meshes/`
 * @member {Array.<String>} meshes
 */
GrpcRoute.prototype['meshes'] = undefined;

/**
 * Required. Name of the GrpcRoute resource. It matches pattern `projects/_*_/locations/global/grpcRoutes/`
 * @member {String} name
 */
GrpcRoute.prototype['name'] = undefined;

/**
 * Required. A list of detailed rules defining how to route traffic. Within a single GrpcRoute, the GrpcRoute.RouteAction associated with the first matching GrpcRoute.RouteRule will be executed. At least one rule must be supplied.
 * @member {Array.<module:model/GrpcRouteRouteRule>} rules
 */
GrpcRoute.prototype['rules'] = undefined;

/**
 * Output only. Server-defined URL of this resource
 * @member {String} selfLink
 */
GrpcRoute.prototype['selfLink'] = undefined;

/**
 * Output only. The timestamp when the resource was updated.
 * @member {String} updateTime
 */
GrpcRoute.prototype['updateTime'] = undefined;






export default GrpcRoute;

