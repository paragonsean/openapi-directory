/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HttpRouteQueryParameterMatch model module.
 * @module model/HttpRouteQueryParameterMatch
 * @version v1
 */
class HttpRouteQueryParameterMatch {
    /**
     * Constructs a new <code>HttpRouteQueryParameterMatch</code>.
     * Specifications to match a query parameter in the request.
     * @alias module:model/HttpRouteQueryParameterMatch
     */
    constructor() { 
        
        HttpRouteQueryParameterMatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpRouteQueryParameterMatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpRouteQueryParameterMatch} obj Optional instance to populate.
     * @return {module:model/HttpRouteQueryParameterMatch} The populated <code>HttpRouteQueryParameterMatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpRouteQueryParameterMatch();

            if (data.hasOwnProperty('exactMatch')) {
                obj['exactMatch'] = ApiClient.convertToType(data['exactMatch'], 'String');
            }
            if (data.hasOwnProperty('presentMatch')) {
                obj['presentMatch'] = ApiClient.convertToType(data['presentMatch'], 'Boolean');
            }
            if (data.hasOwnProperty('queryParameter')) {
                obj['queryParameter'] = ApiClient.convertToType(data['queryParameter'], 'String');
            }
            if (data.hasOwnProperty('regexMatch')) {
                obj['regexMatch'] = ApiClient.convertToType(data['regexMatch'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpRouteQueryParameterMatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpRouteQueryParameterMatch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['exactMatch'] && !(typeof data['exactMatch'] === 'string' || data['exactMatch'] instanceof String)) {
            throw new Error("Expected the field `exactMatch` to be a primitive type in the JSON string but got " + data['exactMatch']);
        }
        // ensure the json data is a string
        if (data['queryParameter'] && !(typeof data['queryParameter'] === 'string' || data['queryParameter'] instanceof String)) {
            throw new Error("Expected the field `queryParameter` to be a primitive type in the JSON string but got " + data['queryParameter']);
        }
        // ensure the json data is a string
        if (data['regexMatch'] && !(typeof data['regexMatch'] === 'string' || data['regexMatch'] instanceof String)) {
            throw new Error("Expected the field `regexMatch` to be a primitive type in the JSON string but got " + data['regexMatch']);
        }

        return true;
    }


}



/**
 * The value of the query parameter must exactly match the contents of exact_match. Only one of exact_match, regex_match, or present_match must be set.
 * @member {String} exactMatch
 */
HttpRouteQueryParameterMatch.prototype['exactMatch'] = undefined;

/**
 * Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not. Only one of exact_match, regex_match, or present_match must be set.
 * @member {Boolean} presentMatch
 */
HttpRouteQueryParameterMatch.prototype['presentMatch'] = undefined;

/**
 * The name of the query parameter to match.
 * @member {String} queryParameter
 */
HttpRouteQueryParameterMatch.prototype['queryParameter'] = undefined;

/**
 * The value of the query parameter must match the regular expression specified by regex_match. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of exact_match, regex_match, or present_match must be set.
 * @member {String} regexMatch
 */
HttpRouteQueryParameterMatch.prototype['regexMatch'] = undefined;






export default HttpRouteQueryParameterMatch;

