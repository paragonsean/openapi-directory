/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtensionChainExtension from './ExtensionChainExtension';
import ExtensionChainMatchCondition from './ExtensionChainMatchCondition';

/**
 * The ExtensionChain model module.
 * @module model/ExtensionChain
 * @version v1
 */
class ExtensionChain {
    /**
     * Constructs a new <code>ExtensionChain</code>.
     * A single extension chain wrapper that contains the match conditions and extensions to execute.
     * @alias module:model/ExtensionChain
     */
    constructor() { 
        
        ExtensionChain.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtensionChain</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtensionChain} obj Optional instance to populate.
     * @return {module:model/ExtensionChain} The populated <code>ExtensionChain</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtensionChain();

            if (data.hasOwnProperty('extensions')) {
                obj['extensions'] = ApiClient.convertToType(data['extensions'], [ExtensionChainExtension]);
            }
            if (data.hasOwnProperty('matchCondition')) {
                obj['matchCondition'] = ExtensionChainMatchCondition.constructFromObject(data['matchCondition']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtensionChain</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtensionChain</code>.
     */
    static validateJSON(data) {
        if (data['extensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['extensions'])) {
                throw new Error("Expected the field `extensions` to be an array in the JSON data but got " + data['extensions']);
            }
            // validate the optional field `extensions` (array)
            for (const item of data['extensions']) {
                ExtensionChainExtension.validateJSON(item);
            };
        }
        // validate the optional field `matchCondition`
        if (data['matchCondition']) { // data not null
          ExtensionChainMatchCondition.validateJSON(data['matchCondition']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Required. A set of extensions to execute for the matching request. At least one extension is required. Up to 3 extensions can be defined for each extension chain for `LbTrafficExtension` resource. `LbRouteExtension` chains are limited to 1 extension per extension chain.
 * @member {Array.<module:model/ExtensionChainExtension>} extensions
 */
ExtensionChain.prototype['extensions'] = undefined;

/**
 * @member {module:model/ExtensionChainMatchCondition} matchCondition
 */
ExtensionChain.prototype['matchCondition'] = undefined;

/**
 * Required. The name for this extension chain. The name is logged as part of the HTTP request logs. The name must conform with RFC-1034, is restricted to lower-cased letters, numbers and hyphens, and can have a maximum length of 63 characters. Additionally, the first character must be a letter and the last a letter or a number.
 * @member {String} name
 */
ExtensionChain.prototype['name'] = undefined;






export default ExtensionChain;

