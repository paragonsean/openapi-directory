/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HttpRouteURLRewrite model module.
 * @module model/HttpRouteURLRewrite
 * @version v1
 */
class HttpRouteURLRewrite {
    /**
     * Constructs a new <code>HttpRouteURLRewrite</code>.
     * The specification for modifying the URL of the request, prior to forwarding the request to the destination.
     * @alias module:model/HttpRouteURLRewrite
     */
    constructor() { 
        
        HttpRouteURLRewrite.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpRouteURLRewrite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpRouteURLRewrite} obj Optional instance to populate.
     * @return {module:model/HttpRouteURLRewrite} The populated <code>HttpRouteURLRewrite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpRouteURLRewrite();

            if (data.hasOwnProperty('hostRewrite')) {
                obj['hostRewrite'] = ApiClient.convertToType(data['hostRewrite'], 'String');
            }
            if (data.hasOwnProperty('pathPrefixRewrite')) {
                obj['pathPrefixRewrite'] = ApiClient.convertToType(data['pathPrefixRewrite'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpRouteURLRewrite</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpRouteURLRewrite</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hostRewrite'] && !(typeof data['hostRewrite'] === 'string' || data['hostRewrite'] instanceof String)) {
            throw new Error("Expected the field `hostRewrite` to be a primitive type in the JSON string but got " + data['hostRewrite']);
        }
        // ensure the json data is a string
        if (data['pathPrefixRewrite'] && !(typeof data['pathPrefixRewrite'] === 'string' || data['pathPrefixRewrite'] instanceof String)) {
            throw new Error("Expected the field `pathPrefixRewrite` to be a primitive type in the JSON string but got " + data['pathPrefixRewrite']);
        }

        return true;
    }


}



/**
 * Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
 * @member {String} hostRewrite
 */
HttpRouteURLRewrite.prototype['hostRewrite'] = undefined;

/**
 * Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
 * @member {String} pathPrefixRewrite
 */
HttpRouteURLRewrite.prototype['pathPrefixRewrite'] = undefined;






export default HttpRouteURLRewrite;

