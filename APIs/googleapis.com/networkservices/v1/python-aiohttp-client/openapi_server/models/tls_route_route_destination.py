# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TlsRouteRouteDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_name: str=None, weight: int=None):
        """TlsRouteRouteDestination - a model defined in OpenAPI

        :param service_name: The service_name of this TlsRouteRouteDestination.
        :param weight: The weight of this TlsRouteRouteDestination.
        """
        self.openapi_types = {
            'service_name': str,
            'weight': int
        }

        self.attribute_map = {
            'service_name': 'serviceName',
            'weight': 'weight'
        }

        self._service_name = service_name
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TlsRouteRouteDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TlsRouteRouteDestination of this TlsRouteRouteDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_name(self):
        """Gets the service_name of this TlsRouteRouteDestination.

        Required. The URL of a BackendService to route traffic to.

        :return: The service_name of this TlsRouteRouteDestination.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this TlsRouteRouteDestination.

        Required. The URL of a BackendService to route traffic to.

        :param service_name: The service_name of this TlsRouteRouteDestination.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def weight(self):
        """Gets the weight of this TlsRouteRouteDestination.

        Optional. Specifies the proportion of requests forwareded to the backend referenced by the service_name field. This is computed as: - weight/Sum(weights in destinations) Weights in all destinations does not need to sum up to 100.

        :return: The weight of this TlsRouteRouteDestination.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this TlsRouteRouteDestination.

        Optional. Specifies the proportion of requests forwareded to the backend referenced by the service_name field. This is computed as: - weight/Sum(weights in destinations) Weights in all destinations does not need to sum up to 100.

        :param weight: The weight of this TlsRouteRouteDestination.
        :type weight: int
        """

        self._weight = weight
