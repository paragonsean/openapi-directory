# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_matcher_metadata_label_matcher_metadata_labels import EndpointMatcherMetadataLabelMatcherMetadataLabels
from openapi_server import util


class EndpointMatcherMetadataLabelMatcher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata_label_match_criteria: str=None, metadata_labels: List[EndpointMatcherMetadataLabelMatcherMetadataLabels]=None):
        """EndpointMatcherMetadataLabelMatcher - a model defined in OpenAPI

        :param metadata_label_match_criteria: The metadata_label_match_criteria of this EndpointMatcherMetadataLabelMatcher.
        :param metadata_labels: The metadata_labels of this EndpointMatcherMetadataLabelMatcher.
        """
        self.openapi_types = {
            'metadata_label_match_criteria': str,
            'metadata_labels': List[EndpointMatcherMetadataLabelMatcherMetadataLabels]
        }

        self.attribute_map = {
            'metadata_label_match_criteria': 'metadataLabelMatchCriteria',
            'metadata_labels': 'metadataLabels'
        }

        self._metadata_label_match_criteria = metadata_label_match_criteria
        self._metadata_labels = metadata_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointMatcherMetadataLabelMatcher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointMatcherMetadataLabelMatcher of this EndpointMatcherMetadataLabelMatcher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata_label_match_criteria(self):
        """Gets the metadata_label_match_criteria of this EndpointMatcherMetadataLabelMatcher.

        Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), pick up the one with older creation time.

        :return: The metadata_label_match_criteria of this EndpointMatcherMetadataLabelMatcher.
        :rtype: str
        """
        return self._metadata_label_match_criteria

    @metadata_label_match_criteria.setter
    def metadata_label_match_criteria(self, metadata_label_match_criteria):
        """Sets the metadata_label_match_criteria of this EndpointMatcherMetadataLabelMatcher.

        Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), pick up the one with older creation time.

        :param metadata_label_match_criteria: The metadata_label_match_criteria of this EndpointMatcherMetadataLabelMatcher.
        :type metadata_label_match_criteria: str
        """
        allowed_values = ["METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED", "MATCH_ANY", "MATCH_ALL"]  # noqa: E501
        if metadata_label_match_criteria not in allowed_values:
            raise ValueError(
                "Invalid value for `metadata_label_match_criteria` ({0}), must be one of {1}"
                .format(metadata_label_match_criteria, allowed_values)
            )

        self._metadata_label_match_criteria = metadata_label_match_criteria

    @property
    def metadata_labels(self):
        """Gets the metadata_labels of this EndpointMatcherMetadataLabelMatcher.

        The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).

        :return: The metadata_labels of this EndpointMatcherMetadataLabelMatcher.
        :rtype: List[EndpointMatcherMetadataLabelMatcherMetadataLabels]
        """
        return self._metadata_labels

    @metadata_labels.setter
    def metadata_labels(self, metadata_labels):
        """Sets the metadata_labels of this EndpointMatcherMetadataLabelMatcher.

        The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).

        :param metadata_labels: The metadata_labels of this EndpointMatcherMetadataLabelMatcher.
        :type metadata_labels: List[EndpointMatcherMetadataLabelMatcherMetadataLabels]
        """

        self._metadata_labels = metadata_labels
