# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_matcher_metadata_label_matcher import EndpointMatcherMetadataLabelMatcher
from openapi_server import util


class EndpointMatcher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata_label_matcher: EndpointMatcherMetadataLabelMatcher=None):
        """EndpointMatcher - a model defined in OpenAPI

        :param metadata_label_matcher: The metadata_label_matcher of this EndpointMatcher.
        """
        self.openapi_types = {
            'metadata_label_matcher': EndpointMatcherMetadataLabelMatcher
        }

        self.attribute_map = {
            'metadata_label_matcher': 'metadataLabelMatcher'
        }

        self._metadata_label_matcher = metadata_label_matcher

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointMatcher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointMatcher of this EndpointMatcher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata_label_matcher(self):
        """Gets the metadata_label_matcher of this EndpointMatcher.


        :return: The metadata_label_matcher of this EndpointMatcher.
        :rtype: EndpointMatcherMetadataLabelMatcher
        """
        return self._metadata_label_matcher

    @metadata_label_matcher.setter
    def metadata_label_matcher(self, metadata_label_matcher):
        """Sets the metadata_label_matcher of this EndpointMatcher.


        :param metadata_label_matcher: The metadata_label_matcher of this EndpointMatcher.
        :type metadata_label_matcher: EndpointMatcherMetadataLabelMatcher
        """

        self._metadata_label_matcher = metadata_label_matcher
