# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_route_header_match import HttpRouteHeaderMatch
from openapi_server.models.http_route_query_parameter_match import HttpRouteQueryParameterMatch
from openapi_server import util


class HttpRouteRouteMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_path_match: str=None, headers: List[HttpRouteHeaderMatch]=None, ignore_case: bool=None, prefix_match: str=None, query_parameters: List[HttpRouteQueryParameterMatch]=None, regex_match: str=None):
        """HttpRouteRouteMatch - a model defined in OpenAPI

        :param full_path_match: The full_path_match of this HttpRouteRouteMatch.
        :param headers: The headers of this HttpRouteRouteMatch.
        :param ignore_case: The ignore_case of this HttpRouteRouteMatch.
        :param prefix_match: The prefix_match of this HttpRouteRouteMatch.
        :param query_parameters: The query_parameters of this HttpRouteRouteMatch.
        :param regex_match: The regex_match of this HttpRouteRouteMatch.
        """
        self.openapi_types = {
            'full_path_match': str,
            'headers': List[HttpRouteHeaderMatch],
            'ignore_case': bool,
            'prefix_match': str,
            'query_parameters': List[HttpRouteQueryParameterMatch],
            'regex_match': str
        }

        self.attribute_map = {
            'full_path_match': 'fullPathMatch',
            'headers': 'headers',
            'ignore_case': 'ignoreCase',
            'prefix_match': 'prefixMatch',
            'query_parameters': 'queryParameters',
            'regex_match': 'regexMatch'
        }

        self._full_path_match = full_path_match
        self._headers = headers
        self._ignore_case = ignore_case
        self._prefix_match = prefix_match
        self._query_parameters = query_parameters
        self._regex_match = regex_match

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteRouteMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRouteRouteMatch of this HttpRouteRouteMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_path_match(self):
        """Gets the full_path_match of this HttpRouteRouteMatch.

        The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.

        :return: The full_path_match of this HttpRouteRouteMatch.
        :rtype: str
        """
        return self._full_path_match

    @full_path_match.setter
    def full_path_match(self, full_path_match):
        """Sets the full_path_match of this HttpRouteRouteMatch.

        The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.

        :param full_path_match: The full_path_match of this HttpRouteRouteMatch.
        :type full_path_match: str
        """

        self._full_path_match = full_path_match

    @property
    def headers(self):
        """Gets the headers of this HttpRouteRouteMatch.

        Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.

        :return: The headers of this HttpRouteRouteMatch.
        :rtype: List[HttpRouteHeaderMatch]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HttpRouteRouteMatch.

        Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.

        :param headers: The headers of this HttpRouteRouteMatch.
        :type headers: List[HttpRouteHeaderMatch]
        """

        self._headers = headers

    @property
    def ignore_case(self):
        """Gets the ignore_case of this HttpRouteRouteMatch.

        Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.

        :return: The ignore_case of this HttpRouteRouteMatch.
        :rtype: bool
        """
        return self._ignore_case

    @ignore_case.setter
    def ignore_case(self, ignore_case):
        """Sets the ignore_case of this HttpRouteRouteMatch.

        Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.

        :param ignore_case: The ignore_case of this HttpRouteRouteMatch.
        :type ignore_case: bool
        """

        self._ignore_case = ignore_case

    @property
    def prefix_match(self):
        """Gets the prefix_match of this HttpRouteRouteMatch.

        The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.

        :return: The prefix_match of this HttpRouteRouteMatch.
        :rtype: str
        """
        return self._prefix_match

    @prefix_match.setter
    def prefix_match(self, prefix_match):
        """Sets the prefix_match of this HttpRouteRouteMatch.

        The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.

        :param prefix_match: The prefix_match of this HttpRouteRouteMatch.
        :type prefix_match: str
        """

        self._prefix_match = prefix_match

    @property
    def query_parameters(self):
        """Gets the query_parameters of this HttpRouteRouteMatch.

        Specifies a list of query parameters to match against. ALL of the query parameters must be matched.

        :return: The query_parameters of this HttpRouteRouteMatch.
        :rtype: List[HttpRouteQueryParameterMatch]
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this HttpRouteRouteMatch.

        Specifies a list of query parameters to match against. ALL of the query parameters must be matched.

        :param query_parameters: The query_parameters of this HttpRouteRouteMatch.
        :type query_parameters: List[HttpRouteQueryParameterMatch]
        """

        self._query_parameters = query_parameters

    @property
    def regex_match(self):
        """Gets the regex_match of this HttpRouteRouteMatch.

        The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.

        :return: The regex_match of this HttpRouteRouteMatch.
        :rtype: str
        """
        return self._regex_match

    @regex_match.setter
    def regex_match(self, regex_match):
        """Sets the regex_match of this HttpRouteRouteMatch.

        The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.

        :param regex_match: The regex_match of this HttpRouteRouteMatch.
        :type regex_match: str
        """

        self._regex_match = regex_match
