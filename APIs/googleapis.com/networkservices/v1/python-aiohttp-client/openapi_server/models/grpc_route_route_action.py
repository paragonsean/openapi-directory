# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grpc_route_destination import GrpcRouteDestination
from openapi_server.models.grpc_route_fault_injection_policy import GrpcRouteFaultInjectionPolicy
from openapi_server.models.grpc_route_retry_policy import GrpcRouteRetryPolicy
from openapi_server.models.grpc_route_stateful_session_affinity_policy import GrpcRouteStatefulSessionAffinityPolicy
from openapi_server import util


class GrpcRouteRouteAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destinations: List[GrpcRouteDestination]=None, fault_injection_policy: GrpcRouteFaultInjectionPolicy=None, idle_timeout: str=None, retry_policy: GrpcRouteRetryPolicy=None, stateful_session_affinity: GrpcRouteStatefulSessionAffinityPolicy=None, timeout: str=None):
        """GrpcRouteRouteAction - a model defined in OpenAPI

        :param destinations: The destinations of this GrpcRouteRouteAction.
        :param fault_injection_policy: The fault_injection_policy of this GrpcRouteRouteAction.
        :param idle_timeout: The idle_timeout of this GrpcRouteRouteAction.
        :param retry_policy: The retry_policy of this GrpcRouteRouteAction.
        :param stateful_session_affinity: The stateful_session_affinity of this GrpcRouteRouteAction.
        :param timeout: The timeout of this GrpcRouteRouteAction.
        """
        self.openapi_types = {
            'destinations': List[GrpcRouteDestination],
            'fault_injection_policy': GrpcRouteFaultInjectionPolicy,
            'idle_timeout': str,
            'retry_policy': GrpcRouteRetryPolicy,
            'stateful_session_affinity': GrpcRouteStatefulSessionAffinityPolicy,
            'timeout': str
        }

        self.attribute_map = {
            'destinations': 'destinations',
            'fault_injection_policy': 'faultInjectionPolicy',
            'idle_timeout': 'idleTimeout',
            'retry_policy': 'retryPolicy',
            'stateful_session_affinity': 'statefulSessionAffinity',
            'timeout': 'timeout'
        }

        self._destinations = destinations
        self._fault_injection_policy = fault_injection_policy
        self._idle_timeout = idle_timeout
        self._retry_policy = retry_policy
        self._stateful_session_affinity = stateful_session_affinity
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrpcRouteRouteAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrpcRouteRouteAction of this GrpcRouteRouteAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destinations(self):
        """Gets the destinations of this GrpcRouteRouteAction.

        Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.

        :return: The destinations of this GrpcRouteRouteAction.
        :rtype: List[GrpcRouteDestination]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this GrpcRouteRouteAction.

        Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.

        :param destinations: The destinations of this GrpcRouteRouteAction.
        :type destinations: List[GrpcRouteDestination]
        """

        self._destinations = destinations

    @property
    def fault_injection_policy(self):
        """Gets the fault_injection_policy of this GrpcRouteRouteAction.


        :return: The fault_injection_policy of this GrpcRouteRouteAction.
        :rtype: GrpcRouteFaultInjectionPolicy
        """
        return self._fault_injection_policy

    @fault_injection_policy.setter
    def fault_injection_policy(self, fault_injection_policy):
        """Sets the fault_injection_policy of this GrpcRouteRouteAction.


        :param fault_injection_policy: The fault_injection_policy of this GrpcRouteRouteAction.
        :type fault_injection_policy: GrpcRouteFaultInjectionPolicy
        """

        self._fault_injection_policy = fault_injection_policy

    @property
    def idle_timeout(self):
        """Gets the idle_timeout of this GrpcRouteRouteAction.

        Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.

        :return: The idle_timeout of this GrpcRouteRouteAction.
        :rtype: str
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """Sets the idle_timeout of this GrpcRouteRouteAction.

        Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.

        :param idle_timeout: The idle_timeout of this GrpcRouteRouteAction.
        :type idle_timeout: str
        """

        self._idle_timeout = idle_timeout

    @property
    def retry_policy(self):
        """Gets the retry_policy of this GrpcRouteRouteAction.


        :return: The retry_policy of this GrpcRouteRouteAction.
        :rtype: GrpcRouteRetryPolicy
        """
        return self._retry_policy

    @retry_policy.setter
    def retry_policy(self, retry_policy):
        """Sets the retry_policy of this GrpcRouteRouteAction.


        :param retry_policy: The retry_policy of this GrpcRouteRouteAction.
        :type retry_policy: GrpcRouteRetryPolicy
        """

        self._retry_policy = retry_policy

    @property
    def stateful_session_affinity(self):
        """Gets the stateful_session_affinity of this GrpcRouteRouteAction.


        :return: The stateful_session_affinity of this GrpcRouteRouteAction.
        :rtype: GrpcRouteStatefulSessionAffinityPolicy
        """
        return self._stateful_session_affinity

    @stateful_session_affinity.setter
    def stateful_session_affinity(self, stateful_session_affinity):
        """Sets the stateful_session_affinity of this GrpcRouteRouteAction.


        :param stateful_session_affinity: The stateful_session_affinity of this GrpcRouteRouteAction.
        :type stateful_session_affinity: GrpcRouteStatefulSessionAffinityPolicy
        """

        self._stateful_session_affinity = stateful_session_affinity

    @property
    def timeout(self):
        """Gets the timeout of this GrpcRouteRouteAction.

        Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.

        :return: The timeout of this GrpcRouteRouteAction.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this GrpcRouteRouteAction.

        Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.

        :param timeout: The timeout of this GrpcRouteRouteAction.
        :type timeout: str
        """

        self._timeout = timeout
