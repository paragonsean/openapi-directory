# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HttpRouteRetryPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, num_retries: int=None, per_try_timeout: str=None, retry_conditions: List[str]=None):
        """HttpRouteRetryPolicy - a model defined in OpenAPI

        :param num_retries: The num_retries of this HttpRouteRetryPolicy.
        :param per_try_timeout: The per_try_timeout of this HttpRouteRetryPolicy.
        :param retry_conditions: The retry_conditions of this HttpRouteRetryPolicy.
        """
        self.openapi_types = {
            'num_retries': int,
            'per_try_timeout': str,
            'retry_conditions': List[str]
        }

        self.attribute_map = {
            'num_retries': 'numRetries',
            'per_try_timeout': 'perTryTimeout',
            'retry_conditions': 'retryConditions'
        }

        self._num_retries = num_retries
        self._per_try_timeout = per_try_timeout
        self._retry_conditions = retry_conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteRetryPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRouteRetryPolicy of this HttpRouteRetryPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_retries(self):
        """Gets the num_retries of this HttpRouteRetryPolicy.

        Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.

        :return: The num_retries of this HttpRouteRetryPolicy.
        :rtype: int
        """
        return self._num_retries

    @num_retries.setter
    def num_retries(self, num_retries):
        """Sets the num_retries of this HttpRouteRetryPolicy.

        Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.

        :param num_retries: The num_retries of this HttpRouteRetryPolicy.
        :type num_retries: int
        """

        self._num_retries = num_retries

    @property
    def per_try_timeout(self):
        """Gets the per_try_timeout of this HttpRouteRetryPolicy.

        Specifies a non-zero timeout per retry attempt.

        :return: The per_try_timeout of this HttpRouteRetryPolicy.
        :rtype: str
        """
        return self._per_try_timeout

    @per_try_timeout.setter
    def per_try_timeout(self, per_try_timeout):
        """Sets the per_try_timeout of this HttpRouteRetryPolicy.

        Specifies a non-zero timeout per retry attempt.

        :param per_try_timeout: The per_try_timeout of this HttpRouteRetryPolicy.
        :type per_try_timeout: str
        """

        self._per_try_timeout = per_try_timeout

    @property
    def retry_conditions(self):
        """Gets the retry_conditions of this HttpRouteRetryPolicy.

        Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy will attempt a retry if the destination service responds with any 5xx response code, of if the destination service does not respond at all, example: disconnect, reset, read timeout, connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy will retry fro retriable 4xx response codes. Currently the only retriable error supported is 409. refused-stream: Proxy will retry if the destination resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.

        :return: The retry_conditions of this HttpRouteRetryPolicy.
        :rtype: List[str]
        """
        return self._retry_conditions

    @retry_conditions.setter
    def retry_conditions(self, retry_conditions):
        """Sets the retry_conditions of this HttpRouteRetryPolicy.

        Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy will attempt a retry if the destination service responds with any 5xx response code, of if the destination service does not respond at all, example: disconnect, reset, read timeout, connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy will retry fro retriable 4xx response codes. Currently the only retriable error supported is 409. refused-stream: Proxy will retry if the destination resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.

        :param retry_conditions: The retry_conditions of this HttpRouteRetryPolicy.
        :type retry_conditions: List[str]
        """

        self._retry_conditions = retry_conditions
