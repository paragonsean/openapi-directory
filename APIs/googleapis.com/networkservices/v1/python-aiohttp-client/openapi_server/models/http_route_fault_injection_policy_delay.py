# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HttpRouteFaultInjectionPolicyDelay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fixed_delay: str=None, percentage: int=None):
        """HttpRouteFaultInjectionPolicyDelay - a model defined in OpenAPI

        :param fixed_delay: The fixed_delay of this HttpRouteFaultInjectionPolicyDelay.
        :param percentage: The percentage of this HttpRouteFaultInjectionPolicyDelay.
        """
        self.openapi_types = {
            'fixed_delay': str,
            'percentage': int
        }

        self.attribute_map = {
            'fixed_delay': 'fixedDelay',
            'percentage': 'percentage'
        }

        self._fixed_delay = fixed_delay
        self._percentage = percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteFaultInjectionPolicyDelay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRouteFaultInjectionPolicyDelay of this HttpRouteFaultInjectionPolicyDelay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fixed_delay(self):
        """Gets the fixed_delay of this HttpRouteFaultInjectionPolicyDelay.

        Specify a fixed delay before forwarding the request.

        :return: The fixed_delay of this HttpRouteFaultInjectionPolicyDelay.
        :rtype: str
        """
        return self._fixed_delay

    @fixed_delay.setter
    def fixed_delay(self, fixed_delay):
        """Sets the fixed_delay of this HttpRouteFaultInjectionPolicyDelay.

        Specify a fixed delay before forwarding the request.

        :param fixed_delay: The fixed_delay of this HttpRouteFaultInjectionPolicyDelay.
        :type fixed_delay: str
        """

        self._fixed_delay = fixed_delay

    @property
    def percentage(self):
        """Gets the percentage of this HttpRouteFaultInjectionPolicyDelay.

        The percentage of traffic on which delay will be injected. The value must be between [0, 100]

        :return: The percentage of this HttpRouteFaultInjectionPolicyDelay.
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this HttpRouteFaultInjectionPolicyDelay.

        The percentage of traffic on which delay will be injected. The value must be between [0, 100]

        :param percentage: The percentage of this HttpRouteFaultInjectionPolicyDelay.
        :type percentage: int
        """

        self._percentage = percentage
