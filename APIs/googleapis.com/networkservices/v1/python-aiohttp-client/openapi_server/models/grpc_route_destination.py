# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GrpcRouteDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_name: str=None, weight: int=None):
        """GrpcRouteDestination - a model defined in OpenAPI

        :param service_name: The service_name of this GrpcRouteDestination.
        :param weight: The weight of this GrpcRouteDestination.
        """
        self.openapi_types = {
            'service_name': str,
            'weight': int
        }

        self.attribute_map = {
            'service_name': 'serviceName',
            'weight': 'weight'
        }

        self._service_name = service_name
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrpcRouteDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrpcRouteDestination of this GrpcRouteDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_name(self):
        """Gets the service_name of this GrpcRouteDestination.

        Required. The URL of a destination service to which to route traffic. Must refer to either a BackendService or ServiceDirectoryService.

        :return: The service_name of this GrpcRouteDestination.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this GrpcRouteDestination.

        Required. The URL of a destination service to which to route traffic. Must refer to either a BackendService or ServiceDirectoryService.

        :param service_name: The service_name of this GrpcRouteDestination.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def weight(self):
        """Gets the weight of this GrpcRouteDestination.

        Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: - weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.

        :return: The weight of this GrpcRouteDestination.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this GrpcRouteDestination.

        Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: - weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.

        :param weight: The weight of this GrpcRouteDestination.
        :type weight: int
        """

        self._weight = weight
