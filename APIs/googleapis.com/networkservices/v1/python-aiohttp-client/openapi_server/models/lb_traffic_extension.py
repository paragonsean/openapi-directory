# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extension_chain import ExtensionChain
from openapi_server import util


class LbTrafficExtension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, extension_chains: List[ExtensionChain]=None, forwarding_rules: List[str]=None, labels: Dict[str, str]=None, load_balancing_scheme: str=None, name: str=None, update_time: str=None):
        """LbTrafficExtension - a model defined in OpenAPI

        :param create_time: The create_time of this LbTrafficExtension.
        :param description: The description of this LbTrafficExtension.
        :param extension_chains: The extension_chains of this LbTrafficExtension.
        :param forwarding_rules: The forwarding_rules of this LbTrafficExtension.
        :param labels: The labels of this LbTrafficExtension.
        :param load_balancing_scheme: The load_balancing_scheme of this LbTrafficExtension.
        :param name: The name of this LbTrafficExtension.
        :param update_time: The update_time of this LbTrafficExtension.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'extension_chains': List[ExtensionChain],
            'forwarding_rules': List[str],
            'labels': Dict[str, str],
            'load_balancing_scheme': str,
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'extension_chains': 'extensionChains',
            'forwarding_rules': 'forwardingRules',
            'labels': 'labels',
            'load_balancing_scheme': 'loadBalancingScheme',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._extension_chains = extension_chains
        self._forwarding_rules = forwarding_rules
        self._labels = labels
        self._load_balancing_scheme = load_balancing_scheme
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LbTrafficExtension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LbTrafficExtension of this LbTrafficExtension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this LbTrafficExtension.

        Output only. The timestamp when the resource was created.

        :return: The create_time of this LbTrafficExtension.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this LbTrafficExtension.

        Output only. The timestamp when the resource was created.

        :param create_time: The create_time of this LbTrafficExtension.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this LbTrafficExtension.

        Optional. A human-readable description of the resource.

        :return: The description of this LbTrafficExtension.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LbTrafficExtension.

        Optional. A human-readable description of the resource.

        :param description: The description of this LbTrafficExtension.
        :type description: str
        """

        self._description = description

    @property
    def extension_chains(self):
        """Gets the extension_chains of this LbTrafficExtension.

        Required. A set of ordered extension chains that contain the match conditions and extensions to execute. Match conditions for each extension chain are evaluated in sequence for a given request. The first extension chain that has a condition that matches the request is executed. Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.

        :return: The extension_chains of this LbTrafficExtension.
        :rtype: List[ExtensionChain]
        """
        return self._extension_chains

    @extension_chains.setter
    def extension_chains(self, extension_chains):
        """Sets the extension_chains of this LbTrafficExtension.

        Required. A set of ordered extension chains that contain the match conditions and extensions to execute. Match conditions for each extension chain are evaluated in sequence for a given request. The first extension chain that has a condition that matches the request is executed. Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.

        :param extension_chains: The extension_chains of this LbTrafficExtension.
        :type extension_chains: List[ExtensionChain]
        """

        self._extension_chains = extension_chains

    @property
    def forwarding_rules(self):
        """Gets the forwarding_rules of this LbTrafficExtension.

        Required. A list of references to the forwarding rules to which this service extension is attached to. At least one forwarding rule is required. There can be only one `LBTrafficExtension` resource per forwarding rule.

        :return: The forwarding_rules of this LbTrafficExtension.
        :rtype: List[str]
        """
        return self._forwarding_rules

    @forwarding_rules.setter
    def forwarding_rules(self, forwarding_rules):
        """Sets the forwarding_rules of this LbTrafficExtension.

        Required. A list of references to the forwarding rules to which this service extension is attached to. At least one forwarding rule is required. There can be only one `LBTrafficExtension` resource per forwarding rule.

        :param forwarding_rules: The forwarding_rules of this LbTrafficExtension.
        :type forwarding_rules: List[str]
        """

        self._forwarding_rules = forwarding_rules

    @property
    def labels(self):
        """Gets the labels of this LbTrafficExtension.

        Optional. Set of labels associated with the `LbTrafficExtension` resource. The format must comply with [the requirements for labels](/compute/docs/labeling-resources#requirements) for Google Cloud resources.

        :return: The labels of this LbTrafficExtension.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this LbTrafficExtension.

        Optional. Set of labels associated with the `LbTrafficExtension` resource. The format must comply with [the requirements for labels](/compute/docs/labeling-resources#requirements) for Google Cloud resources.

        :param labels: The labels of this LbTrafficExtension.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def load_balancing_scheme(self):
        """Gets the load_balancing_scheme of this LbTrafficExtension.

        Required. All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. Supported values: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`. For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).

        :return: The load_balancing_scheme of this LbTrafficExtension.
        :rtype: str
        """
        return self._load_balancing_scheme

    @load_balancing_scheme.setter
    def load_balancing_scheme(self, load_balancing_scheme):
        """Sets the load_balancing_scheme of this LbTrafficExtension.

        Required. All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. Supported values: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`. For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).

        :param load_balancing_scheme: The load_balancing_scheme of this LbTrafficExtension.
        :type load_balancing_scheme: str
        """
        allowed_values = ["LOAD_BALANCING_SCHEME_UNSPECIFIED", "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]  # noqa: E501
        if load_balancing_scheme not in allowed_values:
            raise ValueError(
                "Invalid value for `load_balancing_scheme` ({0}), must be one of {1}"
                .format(load_balancing_scheme, allowed_values)
            )

        self._load_balancing_scheme = load_balancing_scheme

    @property
    def name(self):
        """Gets the name of this LbTrafficExtension.

        Required. Identifier. Name of the `LbTrafficExtension` resource in the following format: `projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}`.

        :return: The name of this LbTrafficExtension.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LbTrafficExtension.

        Required. Identifier. Name of the `LbTrafficExtension` resource in the following format: `projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}`.

        :param name: The name of this LbTrafficExtension.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this LbTrafficExtension.

        Output only. The timestamp when the resource was updated.

        :return: The update_time of this LbTrafficExtension.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this LbTrafficExtension.

        Output only. The timestamp when the resource was updated.

        :param update_time: The update_time of this LbTrafficExtension.
        :type update_time: str
        """

        self._update_time = update_time
