# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HttpRouteFaultInjectionPolicyAbort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, http_status: int=None, percentage: int=None):
        """HttpRouteFaultInjectionPolicyAbort - a model defined in OpenAPI

        :param http_status: The http_status of this HttpRouteFaultInjectionPolicyAbort.
        :param percentage: The percentage of this HttpRouteFaultInjectionPolicyAbort.
        """
        self.openapi_types = {
            'http_status': int,
            'percentage': int
        }

        self.attribute_map = {
            'http_status': 'httpStatus',
            'percentage': 'percentage'
        }

        self._http_status = http_status
        self._percentage = percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteFaultInjectionPolicyAbort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRouteFaultInjectionPolicyAbort of this HttpRouteFaultInjectionPolicyAbort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def http_status(self):
        """Gets the http_status of this HttpRouteFaultInjectionPolicyAbort.

        The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.

        :return: The http_status of this HttpRouteFaultInjectionPolicyAbort.
        :rtype: int
        """
        return self._http_status

    @http_status.setter
    def http_status(self, http_status):
        """Sets the http_status of this HttpRouteFaultInjectionPolicyAbort.

        The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.

        :param http_status: The http_status of this HttpRouteFaultInjectionPolicyAbort.
        :type http_status: int
        """

        self._http_status = http_status

    @property
    def percentage(self):
        """Gets the percentage of this HttpRouteFaultInjectionPolicyAbort.

        The percentage of traffic which will be aborted. The value must be between [0, 100]

        :return: The percentage of this HttpRouteFaultInjectionPolicyAbort.
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this HttpRouteFaultInjectionPolicyAbort.

        The percentage of traffic which will be aborted. The value must be between [0, 100]

        :param percentage: The percentage of this HttpRouteFaultInjectionPolicyAbort.
        :type percentage: int
        """

        self._percentage = percentage
