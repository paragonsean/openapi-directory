# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_lb_policy_auto_capacity_drain import ServiceLbPolicyAutoCapacityDrain
from openapi_server.models.service_lb_policy_failover_config import ServiceLbPolicyFailoverConfig
from openapi_server import util


class ServiceLbPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_capacity_drain: ServiceLbPolicyAutoCapacityDrain=None, create_time: str=None, description: str=None, failover_config: ServiceLbPolicyFailoverConfig=None, labels: Dict[str, str]=None, load_balancing_algorithm: str=None, name: str=None, update_time: str=None):
        """ServiceLbPolicy - a model defined in OpenAPI

        :param auto_capacity_drain: The auto_capacity_drain of this ServiceLbPolicy.
        :param create_time: The create_time of this ServiceLbPolicy.
        :param description: The description of this ServiceLbPolicy.
        :param failover_config: The failover_config of this ServiceLbPolicy.
        :param labels: The labels of this ServiceLbPolicy.
        :param load_balancing_algorithm: The load_balancing_algorithm of this ServiceLbPolicy.
        :param name: The name of this ServiceLbPolicy.
        :param update_time: The update_time of this ServiceLbPolicy.
        """
        self.openapi_types = {
            'auto_capacity_drain': ServiceLbPolicyAutoCapacityDrain,
            'create_time': str,
            'description': str,
            'failover_config': ServiceLbPolicyFailoverConfig,
            'labels': Dict[str, str],
            'load_balancing_algorithm': str,
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'auto_capacity_drain': 'autoCapacityDrain',
            'create_time': 'createTime',
            'description': 'description',
            'failover_config': 'failoverConfig',
            'labels': 'labels',
            'load_balancing_algorithm': 'loadBalancingAlgorithm',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._auto_capacity_drain = auto_capacity_drain
        self._create_time = create_time
        self._description = description
        self._failover_config = failover_config
        self._labels = labels
        self._load_balancing_algorithm = load_balancing_algorithm
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceLbPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceLbPolicy of this ServiceLbPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_capacity_drain(self):
        """Gets the auto_capacity_drain of this ServiceLbPolicy.


        :return: The auto_capacity_drain of this ServiceLbPolicy.
        :rtype: ServiceLbPolicyAutoCapacityDrain
        """
        return self._auto_capacity_drain

    @auto_capacity_drain.setter
    def auto_capacity_drain(self, auto_capacity_drain):
        """Sets the auto_capacity_drain of this ServiceLbPolicy.


        :param auto_capacity_drain: The auto_capacity_drain of this ServiceLbPolicy.
        :type auto_capacity_drain: ServiceLbPolicyAutoCapacityDrain
        """

        self._auto_capacity_drain = auto_capacity_drain

    @property
    def create_time(self):
        """Gets the create_time of this ServiceLbPolicy.

        Output only. The timestamp when this resource was created.

        :return: The create_time of this ServiceLbPolicy.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ServiceLbPolicy.

        Output only. The timestamp when this resource was created.

        :param create_time: The create_time of this ServiceLbPolicy.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ServiceLbPolicy.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :return: The description of this ServiceLbPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceLbPolicy.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :param description: The description of this ServiceLbPolicy.
        :type description: str
        """

        self._description = description

    @property
    def failover_config(self):
        """Gets the failover_config of this ServiceLbPolicy.


        :return: The failover_config of this ServiceLbPolicy.
        :rtype: ServiceLbPolicyFailoverConfig
        """
        return self._failover_config

    @failover_config.setter
    def failover_config(self, failover_config):
        """Sets the failover_config of this ServiceLbPolicy.


        :param failover_config: The failover_config of this ServiceLbPolicy.
        :type failover_config: ServiceLbPolicyFailoverConfig
        """

        self._failover_config = failover_config

    @property
    def labels(self):
        """Gets the labels of this ServiceLbPolicy.

        Optional. Set of label tags associated with the ServiceLbPolicy resource.

        :return: The labels of this ServiceLbPolicy.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ServiceLbPolicy.

        Optional. Set of label tags associated with the ServiceLbPolicy resource.

        :param labels: The labels of this ServiceLbPolicy.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def load_balancing_algorithm(self):
        """Gets the load_balancing_algorithm of this ServiceLbPolicy.

        Optional. The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.

        :return: The load_balancing_algorithm of this ServiceLbPolicy.
        :rtype: str
        """
        return self._load_balancing_algorithm

    @load_balancing_algorithm.setter
    def load_balancing_algorithm(self, load_balancing_algorithm):
        """Sets the load_balancing_algorithm of this ServiceLbPolicy.

        Optional. The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.

        :param load_balancing_algorithm: The load_balancing_algorithm of this ServiceLbPolicy.
        :type load_balancing_algorithm: str
        """
        allowed_values = ["LOAD_BALANCING_ALGORITHM_UNSPECIFIED", "SPRAY_TO_WORLD", "SPRAY_TO_REGION", "WATERFALL_BY_REGION", "WATERFALL_BY_ZONE"]  # noqa: E501
        if load_balancing_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `load_balancing_algorithm` ({0}), must be one of {1}"
                .format(load_balancing_algorithm, allowed_values)
            )

        self._load_balancing_algorithm = load_balancing_algorithm

    @property
    def name(self):
        """Gets the name of this ServiceLbPolicy.

        Required. Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.

        :return: The name of this ServiceLbPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceLbPolicy.

        Required. Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.

        :param name: The name of this ServiceLbPolicy.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this ServiceLbPolicy.

        Output only. The timestamp when this resource was last updated.

        :return: The update_time of this ServiceLbPolicy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ServiceLbPolicy.

        Output only. The timestamp when this resource was last updated.

        :param update_time: The update_time of this ServiceLbPolicy.
        :type update_time: str
        """

        self._update_time = update_time
