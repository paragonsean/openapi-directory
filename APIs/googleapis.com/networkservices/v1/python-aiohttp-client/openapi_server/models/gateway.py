# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Gateway(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[str]=None, certificate_urls: List[str]=None, create_time: str=None, description: str=None, envoy_headers: str=None, gateway_security_policy: str=None, ip_version: str=None, labels: Dict[str, str]=None, name: str=None, network: str=None, ports: List[int]=None, scope: str=None, self_link: str=None, server_tls_policy: str=None, subnetwork: str=None, type: str=None, update_time: str=None):
        """Gateway - a model defined in OpenAPI

        :param addresses: The addresses of this Gateway.
        :param certificate_urls: The certificate_urls of this Gateway.
        :param create_time: The create_time of this Gateway.
        :param description: The description of this Gateway.
        :param envoy_headers: The envoy_headers of this Gateway.
        :param gateway_security_policy: The gateway_security_policy of this Gateway.
        :param ip_version: The ip_version of this Gateway.
        :param labels: The labels of this Gateway.
        :param name: The name of this Gateway.
        :param network: The network of this Gateway.
        :param ports: The ports of this Gateway.
        :param scope: The scope of this Gateway.
        :param self_link: The self_link of this Gateway.
        :param server_tls_policy: The server_tls_policy of this Gateway.
        :param subnetwork: The subnetwork of this Gateway.
        :param type: The type of this Gateway.
        :param update_time: The update_time of this Gateway.
        """
        self.openapi_types = {
            'addresses': List[str],
            'certificate_urls': List[str],
            'create_time': str,
            'description': str,
            'envoy_headers': str,
            'gateway_security_policy': str,
            'ip_version': str,
            'labels': Dict[str, str],
            'name': str,
            'network': str,
            'ports': List[int],
            'scope': str,
            'self_link': str,
            'server_tls_policy': str,
            'subnetwork': str,
            'type': str,
            'update_time': str
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'certificate_urls': 'certificateUrls',
            'create_time': 'createTime',
            'description': 'description',
            'envoy_headers': 'envoyHeaders',
            'gateway_security_policy': 'gatewaySecurityPolicy',
            'ip_version': 'ipVersion',
            'labels': 'labels',
            'name': 'name',
            'network': 'network',
            'ports': 'ports',
            'scope': 'scope',
            'self_link': 'selfLink',
            'server_tls_policy': 'serverTlsPolicy',
            'subnetwork': 'subnetwork',
            'type': 'type',
            'update_time': 'updateTime'
        }

        self._addresses = addresses
        self._certificate_urls = certificate_urls
        self._create_time = create_time
        self._description = description
        self._envoy_headers = envoy_headers
        self._gateway_security_policy = gateway_security_policy
        self._ip_version = ip_version
        self._labels = labels
        self._name = name
        self._network = network
        self._ports = ports
        self._scope = scope
        self._self_link = self_link
        self._server_tls_policy = server_tls_policy
        self._subnetwork = subnetwork
        self._type = type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Gateway':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Gateway of this Gateway.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this Gateway.

        Optional. Zero or one IPv4 or IPv6 address on which the Gateway will receive the traffic. When no address is provided, an IP from the subnetwork is allocated This field only applies to gateways of type 'SECURE_WEB_GATEWAY'. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6.

        :return: The addresses of this Gateway.
        :rtype: List[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Gateway.

        Optional. Zero or one IPv4 or IPv6 address on which the Gateway will receive the traffic. When no address is provided, an IP from the subnetwork is allocated This field only applies to gateways of type 'SECURE_WEB_GATEWAY'. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6.

        :param addresses: The addresses of this Gateway.
        :type addresses: List[str]
        """

        self._addresses = addresses

    @property
    def certificate_urls(self):
        """Gets the certificate_urls of this Gateway.

        Optional. A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection. This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.

        :return: The certificate_urls of this Gateway.
        :rtype: List[str]
        """
        return self._certificate_urls

    @certificate_urls.setter
    def certificate_urls(self, certificate_urls):
        """Sets the certificate_urls of this Gateway.

        Optional. A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection. This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.

        :param certificate_urls: The certificate_urls of this Gateway.
        :type certificate_urls: List[str]
        """

        self._certificate_urls = certificate_urls

    @property
    def create_time(self):
        """Gets the create_time of this Gateway.

        Output only. The timestamp when the resource was created.

        :return: The create_time of this Gateway.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Gateway.

        Output only. The timestamp when the resource was created.

        :param create_time: The create_time of this Gateway.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Gateway.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :return: The description of this Gateway.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Gateway.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :param description: The description of this Gateway.
        :type description: str
        """

        self._description = description

    @property
    def envoy_headers(self):
        """Gets the envoy_headers of this Gateway.

        Optional. Determines if envoy will insert internal debug headers into upstream requests. Other Envoy headers may still be injected. By default, envoy will not insert any debug headers.

        :return: The envoy_headers of this Gateway.
        :rtype: str
        """
        return self._envoy_headers

    @envoy_headers.setter
    def envoy_headers(self, envoy_headers):
        """Sets the envoy_headers of this Gateway.

        Optional. Determines if envoy will insert internal debug headers into upstream requests. Other Envoy headers may still be injected. By default, envoy will not insert any debug headers.

        :param envoy_headers: The envoy_headers of this Gateway.
        :type envoy_headers: str
        """
        allowed_values = ["ENVOY_HEADERS_UNSPECIFIED", "NONE", "DEBUG_HEADERS"]  # noqa: E501
        if envoy_headers not in allowed_values:
            raise ValueError(
                "Invalid value for `envoy_headers` ({0}), must be one of {1}"
                .format(envoy_headers, allowed_values)
            )

        self._envoy_headers = envoy_headers

    @property
    def gateway_security_policy(self):
        """Gets the gateway_security_policy of this Gateway.

        Optional. A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections. For example: `projects/*/locations/*/gatewaySecurityPolicies/swg-policy`. This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.

        :return: The gateway_security_policy of this Gateway.
        :rtype: str
        """
        return self._gateway_security_policy

    @gateway_security_policy.setter
    def gateway_security_policy(self, gateway_security_policy):
        """Sets the gateway_security_policy of this Gateway.

        Optional. A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections. For example: `projects/*/locations/*/gatewaySecurityPolicies/swg-policy`. This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.

        :param gateway_security_policy: The gateway_security_policy of this Gateway.
        :type gateway_security_policy: str
        """

        self._gateway_security_policy = gateway_security_policy

    @property
    def ip_version(self):
        """Gets the ip_version of this Gateway.

        Optional. The IP Version that will be used by this gateway. Valid options are IPV4 or IPV6. Default is IPV4.

        :return: The ip_version of this Gateway.
        :rtype: str
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this Gateway.

        Optional. The IP Version that will be used by this gateway. Valid options are IPV4 or IPV6. Default is IPV4.

        :param ip_version: The ip_version of this Gateway.
        :type ip_version: str
        """
        allowed_values = ["IP_VERSION_UNSPECIFIED", "IPV4", "IPV6"]  # noqa: E501
        if ip_version not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_version` ({0}), must be one of {1}"
                .format(ip_version, allowed_values)
            )

        self._ip_version = ip_version

    @property
    def labels(self):
        """Gets the labels of this Gateway.

        Optional. Set of label tags associated with the Gateway resource.

        :return: The labels of this Gateway.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Gateway.

        Optional. Set of label tags associated with the Gateway resource.

        :param labels: The labels of this Gateway.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Gateway.

        Required. Name of the Gateway resource. It matches pattern `projects/*/locations/*/gateways/`.

        :return: The name of this Gateway.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Gateway.

        Required. Name of the Gateway resource. It matches pattern `projects/*/locations/*/gateways/`.

        :param name: The name of this Gateway.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this Gateway.

        Optional. The relative resource name identifying the VPC network that is using this configuration. For example: `projects/*/global/networks/network-1`. Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.

        :return: The network of this Gateway.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Gateway.

        Optional. The relative resource name identifying the VPC network that is using this configuration. For example: `projects/*/global/networks/network-1`. Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.

        :param network: The network of this Gateway.
        :type network: str
        """

        self._network = network

    @property
    def ports(self):
        """Gets the ports of this Gateway.

        Required. One or more port numbers (1-65535), on which the Gateway will receive traffic. The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.

        :return: The ports of this Gateway.
        :rtype: List[int]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Gateway.

        Required. One or more port numbers (1-65535), on which the Gateway will receive traffic. The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.

        :param ports: The ports of this Gateway.
        :type ports: List[int]
        """

        self._ports = ports

    @property
    def scope(self):
        """Gets the scope of this Gateway.

        Optional. Scope determines how configuration across multiple Gateway instances are merged. The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer. Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.

        :return: The scope of this Gateway.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Gateway.

        Optional. Scope determines how configuration across multiple Gateway instances are merged. The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer. Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.

        :param scope: The scope of this Gateway.
        :type scope: str
        """

        self._scope = scope

    @property
    def self_link(self):
        """Gets the self_link of this Gateway.

        Output only. Server-defined URL of this resource

        :return: The self_link of this Gateway.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Gateway.

        Output only. Server-defined URL of this resource

        :param self_link: The self_link of this Gateway.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def server_tls_policy(self):
        """Gets the server_tls_policy of this Gateway.

        Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.

        :return: The server_tls_policy of this Gateway.
        :rtype: str
        """
        return self._server_tls_policy

    @server_tls_policy.setter
    def server_tls_policy(self, server_tls_policy):
        """Sets the server_tls_policy of this Gateway.

        Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.

        :param server_tls_policy: The server_tls_policy of this Gateway.
        :type server_tls_policy: str
        """

        self._server_tls_policy = server_tls_policy

    @property
    def subnetwork(self):
        """Gets the subnetwork of this Gateway.

        Optional. The relative resource name identifying the subnetwork in which this SWG is allocated. For example: `projects/*/regions/us-central1/subnetworks/network-1` Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY\".

        :return: The subnetwork of this Gateway.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this Gateway.

        Optional. The relative resource name identifying the subnetwork in which this SWG is allocated. For example: `projects/*/regions/us-central1/subnetworks/network-1` Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY\".

        :param subnetwork: The subnetwork of this Gateway.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork

    @property
    def type(self):
        """Gets the type of this Gateway.

        Immutable. The type of the customer managed gateway. This field is required. If unspecified, an error is returned.

        :return: The type of this Gateway.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Gateway.

        Immutable. The type of the customer managed gateway. This field is required. If unspecified, an error is returned.

        :param type: The type of this Gateway.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "OPEN_MESH", "SECURE_WEB_GATEWAY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this Gateway.

        Output only. The timestamp when the resource was updated.

        :return: The update_time of this Gateway.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Gateway.

        Output only. The timestamp when the resource was updated.

        :param update_time: The update_time of this Gateway.
        :type update_time: str
        """

        self._update_time = update_time
