# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tcp_route_route_rule import TcpRouteRouteRule
from openapi_server import util


class TcpRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, gateways: List[str]=None, labels: Dict[str, str]=None, meshes: List[str]=None, name: str=None, rules: List[TcpRouteRouteRule]=None, self_link: str=None, update_time: str=None):
        """TcpRoute - a model defined in OpenAPI

        :param create_time: The create_time of this TcpRoute.
        :param description: The description of this TcpRoute.
        :param gateways: The gateways of this TcpRoute.
        :param labels: The labels of this TcpRoute.
        :param meshes: The meshes of this TcpRoute.
        :param name: The name of this TcpRoute.
        :param rules: The rules of this TcpRoute.
        :param self_link: The self_link of this TcpRoute.
        :param update_time: The update_time of this TcpRoute.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'gateways': List[str],
            'labels': Dict[str, str],
            'meshes': List[str],
            'name': str,
            'rules': List[TcpRouteRouteRule],
            'self_link': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'gateways': 'gateways',
            'labels': 'labels',
            'meshes': 'meshes',
            'name': 'name',
            'rules': 'rules',
            'self_link': 'selfLink',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._gateways = gateways
        self._labels = labels
        self._meshes = meshes
        self._name = name
        self._rules = rules
        self._self_link = self_link
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TcpRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TcpRoute of this TcpRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this TcpRoute.

        Output only. The timestamp when the resource was created.

        :return: The create_time of this TcpRoute.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TcpRoute.

        Output only. The timestamp when the resource was created.

        :param create_time: The create_time of this TcpRoute.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this TcpRoute.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :return: The description of this TcpRoute.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TcpRoute.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :param description: The description of this TcpRoute.
        :type description: str
        """

        self._description = description

    @property
    def gateways(self):
        """Gets the gateways of this TcpRoute.

        Optional. Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`

        :return: The gateways of this TcpRoute.
        :rtype: List[str]
        """
        return self._gateways

    @gateways.setter
    def gateways(self, gateways):
        """Sets the gateways of this TcpRoute.

        Optional. Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`

        :param gateways: The gateways of this TcpRoute.
        :type gateways: List[str]
        """

        self._gateways = gateways

    @property
    def labels(self):
        """Gets the labels of this TcpRoute.

        Optional. Set of label tags associated with the TcpRoute resource.

        :return: The labels of this TcpRoute.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TcpRoute.

        Optional. Set of label tags associated with the TcpRoute resource.

        :param labels: The labels of this TcpRoute.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def meshes(self):
        """Gets the meshes of this TcpRoute.

        Optional. Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR

        :return: The meshes of this TcpRoute.
        :rtype: List[str]
        """
        return self._meshes

    @meshes.setter
    def meshes(self, meshes):
        """Sets the meshes of this TcpRoute.

        Optional. Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR

        :param meshes: The meshes of this TcpRoute.
        :type meshes: List[str]
        """

        self._meshes = meshes

    @property
    def name(self):
        """Gets the name of this TcpRoute.

        Required. Name of the TcpRoute resource. It matches pattern `projects/*/locations/global/tcpRoutes/tcp_route_name>`.

        :return: The name of this TcpRoute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TcpRoute.

        Required. Name of the TcpRoute resource. It matches pattern `projects/*/locations/global/tcpRoutes/tcp_route_name>`.

        :param name: The name of this TcpRoute.
        :type name: str
        """

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this TcpRoute.

        Required. Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.

        :return: The rules of this TcpRoute.
        :rtype: List[TcpRouteRouteRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this TcpRoute.

        Required. Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.

        :param rules: The rules of this TcpRoute.
        :type rules: List[TcpRouteRouteRule]
        """

        self._rules = rules

    @property
    def self_link(self):
        """Gets the self_link of this TcpRoute.

        Output only. Server-defined URL of this resource

        :return: The self_link of this TcpRoute.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this TcpRoute.

        Output only. Server-defined URL of this resource

        :param self_link: The self_link of this TcpRoute.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def update_time(self):
        """Gets the update_time of this TcpRoute.

        Output only. The timestamp when the resource was updated.

        :return: The update_time of this TcpRoute.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TcpRoute.

        Output only. The timestamp when the resource was updated.

        :param update_time: The update_time of this TcpRoute.
        :type update_time: str
        """

        self._update_time = update_time
