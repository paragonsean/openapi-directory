# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_route_header_match_integer_range import HttpRouteHeaderMatchIntegerRange
from openapi_server import util


class HttpRouteHeaderMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exact_match: str=None, header: str=None, invert_match: bool=None, prefix_match: str=None, present_match: bool=None, range_match: HttpRouteHeaderMatchIntegerRange=None, regex_match: str=None, suffix_match: str=None):
        """HttpRouteHeaderMatch - a model defined in OpenAPI

        :param exact_match: The exact_match of this HttpRouteHeaderMatch.
        :param header: The header of this HttpRouteHeaderMatch.
        :param invert_match: The invert_match of this HttpRouteHeaderMatch.
        :param prefix_match: The prefix_match of this HttpRouteHeaderMatch.
        :param present_match: The present_match of this HttpRouteHeaderMatch.
        :param range_match: The range_match of this HttpRouteHeaderMatch.
        :param regex_match: The regex_match of this HttpRouteHeaderMatch.
        :param suffix_match: The suffix_match of this HttpRouteHeaderMatch.
        """
        self.openapi_types = {
            'exact_match': str,
            'header': str,
            'invert_match': bool,
            'prefix_match': str,
            'present_match': bool,
            'range_match': HttpRouteHeaderMatchIntegerRange,
            'regex_match': str,
            'suffix_match': str
        }

        self.attribute_map = {
            'exact_match': 'exactMatch',
            'header': 'header',
            'invert_match': 'invertMatch',
            'prefix_match': 'prefixMatch',
            'present_match': 'presentMatch',
            'range_match': 'rangeMatch',
            'regex_match': 'regexMatch',
            'suffix_match': 'suffixMatch'
        }

        self._exact_match = exact_match
        self._header = header
        self._invert_match = invert_match
        self._prefix_match = prefix_match
        self._present_match = present_match
        self._range_match = range_match
        self._regex_match = regex_match
        self._suffix_match = suffix_match

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteHeaderMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRouteHeaderMatch of this HttpRouteHeaderMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exact_match(self):
        """Gets the exact_match of this HttpRouteHeaderMatch.

        The value of the header should match exactly the content of exact_match.

        :return: The exact_match of this HttpRouteHeaderMatch.
        :rtype: str
        """
        return self._exact_match

    @exact_match.setter
    def exact_match(self, exact_match):
        """Sets the exact_match of this HttpRouteHeaderMatch.

        The value of the header should match exactly the content of exact_match.

        :param exact_match: The exact_match of this HttpRouteHeaderMatch.
        :type exact_match: str
        """

        self._exact_match = exact_match

    @property
    def header(self):
        """Gets the header of this HttpRouteHeaderMatch.

        The name of the HTTP header to match against.

        :return: The header of this HttpRouteHeaderMatch.
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this HttpRouteHeaderMatch.

        The name of the HTTP header to match against.

        :param header: The header of this HttpRouteHeaderMatch.
        :type header: str
        """

        self._header = header

    @property
    def invert_match(self):
        """Gets the invert_match of this HttpRouteHeaderMatch.

        If specified, the match result will be inverted before checking. Default value is set to false.

        :return: The invert_match of this HttpRouteHeaderMatch.
        :rtype: bool
        """
        return self._invert_match

    @invert_match.setter
    def invert_match(self, invert_match):
        """Sets the invert_match of this HttpRouteHeaderMatch.

        If specified, the match result will be inverted before checking. Default value is set to false.

        :param invert_match: The invert_match of this HttpRouteHeaderMatch.
        :type invert_match: bool
        """

        self._invert_match = invert_match

    @property
    def prefix_match(self):
        """Gets the prefix_match of this HttpRouteHeaderMatch.

        The value of the header must start with the contents of prefix_match.

        :return: The prefix_match of this HttpRouteHeaderMatch.
        :rtype: str
        """
        return self._prefix_match

    @prefix_match.setter
    def prefix_match(self, prefix_match):
        """Sets the prefix_match of this HttpRouteHeaderMatch.

        The value of the header must start with the contents of prefix_match.

        :param prefix_match: The prefix_match of this HttpRouteHeaderMatch.
        :type prefix_match: str
        """

        self._prefix_match = prefix_match

    @property
    def present_match(self):
        """Gets the present_match of this HttpRouteHeaderMatch.

        A header with header_name must exist. The match takes place whether or not the header has a value.

        :return: The present_match of this HttpRouteHeaderMatch.
        :rtype: bool
        """
        return self._present_match

    @present_match.setter
    def present_match(self, present_match):
        """Sets the present_match of this HttpRouteHeaderMatch.

        A header with header_name must exist. The match takes place whether or not the header has a value.

        :param present_match: The present_match of this HttpRouteHeaderMatch.
        :type present_match: bool
        """

        self._present_match = present_match

    @property
    def range_match(self):
        """Gets the range_match of this HttpRouteHeaderMatch.


        :return: The range_match of this HttpRouteHeaderMatch.
        :rtype: HttpRouteHeaderMatchIntegerRange
        """
        return self._range_match

    @range_match.setter
    def range_match(self, range_match):
        """Sets the range_match of this HttpRouteHeaderMatch.


        :param range_match: The range_match of this HttpRouteHeaderMatch.
        :type range_match: HttpRouteHeaderMatchIntegerRange
        """

        self._range_match = range_match

    @property
    def regex_match(self):
        """Gets the regex_match of this HttpRouteHeaderMatch.

        The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax

        :return: The regex_match of this HttpRouteHeaderMatch.
        :rtype: str
        """
        return self._regex_match

    @regex_match.setter
    def regex_match(self, regex_match):
        """Sets the regex_match of this HttpRouteHeaderMatch.

        The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax

        :param regex_match: The regex_match of this HttpRouteHeaderMatch.
        :type regex_match: str
        """

        self._regex_match = regex_match

    @property
    def suffix_match(self):
        """Gets the suffix_match of this HttpRouteHeaderMatch.

        The value of the header must end with the contents of suffix_match.

        :return: The suffix_match of this HttpRouteHeaderMatch.
        :rtype: str
        """
        return self._suffix_match

    @suffix_match.setter
    def suffix_match(self, suffix_match):
        """Sets the suffix_match of this HttpRouteHeaderMatch.

        The value of the header must end with the contents of suffix_match.

        :param suffix_match: The suffix_match of this HttpRouteHeaderMatch.
        :type suffix_match: str
        """

        self._suffix_match = suffix_match
