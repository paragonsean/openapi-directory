/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRouteCorsPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRouteCorsPolicy::OAIHttpRouteCorsPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRouteCorsPolicy::OAIHttpRouteCorsPolicy() {
    this->initializeModel();
}

OAIHttpRouteCorsPolicy::~OAIHttpRouteCorsPolicy() {}

void OAIHttpRouteCorsPolicy::initializeModel() {

    m_allow_credentials_isSet = false;
    m_allow_credentials_isValid = false;

    m_allow_headers_isSet = false;
    m_allow_headers_isValid = false;

    m_allow_methods_isSet = false;
    m_allow_methods_isValid = false;

    m_allow_origin_regexes_isSet = false;
    m_allow_origin_regexes_isValid = false;

    m_allow_origins_isSet = false;
    m_allow_origins_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_expose_headers_isSet = false;
    m_expose_headers_isValid = false;

    m_max_age_isSet = false;
    m_max_age_isValid = false;
}

void OAIHttpRouteCorsPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRouteCorsPolicy::fromJsonObject(QJsonObject json) {

    m_allow_credentials_isValid = ::OpenAPI::fromJsonValue(m_allow_credentials, json[QString("allowCredentials")]);
    m_allow_credentials_isSet = !json[QString("allowCredentials")].isNull() && m_allow_credentials_isValid;

    m_allow_headers_isValid = ::OpenAPI::fromJsonValue(m_allow_headers, json[QString("allowHeaders")]);
    m_allow_headers_isSet = !json[QString("allowHeaders")].isNull() && m_allow_headers_isValid;

    m_allow_methods_isValid = ::OpenAPI::fromJsonValue(m_allow_methods, json[QString("allowMethods")]);
    m_allow_methods_isSet = !json[QString("allowMethods")].isNull() && m_allow_methods_isValid;

    m_allow_origin_regexes_isValid = ::OpenAPI::fromJsonValue(m_allow_origin_regexes, json[QString("allowOriginRegexes")]);
    m_allow_origin_regexes_isSet = !json[QString("allowOriginRegexes")].isNull() && m_allow_origin_regexes_isValid;

    m_allow_origins_isValid = ::OpenAPI::fromJsonValue(m_allow_origins, json[QString("allowOrigins")]);
    m_allow_origins_isSet = !json[QString("allowOrigins")].isNull() && m_allow_origins_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_expose_headers_isValid = ::OpenAPI::fromJsonValue(m_expose_headers, json[QString("exposeHeaders")]);
    m_expose_headers_isSet = !json[QString("exposeHeaders")].isNull() && m_expose_headers_isValid;

    m_max_age_isValid = ::OpenAPI::fromJsonValue(m_max_age, json[QString("maxAge")]);
    m_max_age_isSet = !json[QString("maxAge")].isNull() && m_max_age_isValid;
}

QString OAIHttpRouteCorsPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRouteCorsPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_credentials_isSet) {
        obj.insert(QString("allowCredentials"), ::OpenAPI::toJsonValue(m_allow_credentials));
    }
    if (m_allow_headers.size() > 0) {
        obj.insert(QString("allowHeaders"), ::OpenAPI::toJsonValue(m_allow_headers));
    }
    if (m_allow_methods.size() > 0) {
        obj.insert(QString("allowMethods"), ::OpenAPI::toJsonValue(m_allow_methods));
    }
    if (m_allow_origin_regexes.size() > 0) {
        obj.insert(QString("allowOriginRegexes"), ::OpenAPI::toJsonValue(m_allow_origin_regexes));
    }
    if (m_allow_origins.size() > 0) {
        obj.insert(QString("allowOrigins"), ::OpenAPI::toJsonValue(m_allow_origins));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_expose_headers.size() > 0) {
        obj.insert(QString("exposeHeaders"), ::OpenAPI::toJsonValue(m_expose_headers));
    }
    if (m_max_age_isSet) {
        obj.insert(QString("maxAge"), ::OpenAPI::toJsonValue(m_max_age));
    }
    return obj;
}

bool OAIHttpRouteCorsPolicy::isAllowCredentials() const {
    return m_allow_credentials;
}
void OAIHttpRouteCorsPolicy::setAllowCredentials(const bool &allow_credentials) {
    m_allow_credentials = allow_credentials;
    m_allow_credentials_isSet = true;
}

bool OAIHttpRouteCorsPolicy::is_allow_credentials_Set() const{
    return m_allow_credentials_isSet;
}

bool OAIHttpRouteCorsPolicy::is_allow_credentials_Valid() const{
    return m_allow_credentials_isValid;
}

QList<QString> OAIHttpRouteCorsPolicy::getAllowHeaders() const {
    return m_allow_headers;
}
void OAIHttpRouteCorsPolicy::setAllowHeaders(const QList<QString> &allow_headers) {
    m_allow_headers = allow_headers;
    m_allow_headers_isSet = true;
}

bool OAIHttpRouteCorsPolicy::is_allow_headers_Set() const{
    return m_allow_headers_isSet;
}

bool OAIHttpRouteCorsPolicy::is_allow_headers_Valid() const{
    return m_allow_headers_isValid;
}

QList<QString> OAIHttpRouteCorsPolicy::getAllowMethods() const {
    return m_allow_methods;
}
void OAIHttpRouteCorsPolicy::setAllowMethods(const QList<QString> &allow_methods) {
    m_allow_methods = allow_methods;
    m_allow_methods_isSet = true;
}

bool OAIHttpRouteCorsPolicy::is_allow_methods_Set() const{
    return m_allow_methods_isSet;
}

bool OAIHttpRouteCorsPolicy::is_allow_methods_Valid() const{
    return m_allow_methods_isValid;
}

QList<QString> OAIHttpRouteCorsPolicy::getAllowOriginRegexes() const {
    return m_allow_origin_regexes;
}
void OAIHttpRouteCorsPolicy::setAllowOriginRegexes(const QList<QString> &allow_origin_regexes) {
    m_allow_origin_regexes = allow_origin_regexes;
    m_allow_origin_regexes_isSet = true;
}

bool OAIHttpRouteCorsPolicy::is_allow_origin_regexes_Set() const{
    return m_allow_origin_regexes_isSet;
}

bool OAIHttpRouteCorsPolicy::is_allow_origin_regexes_Valid() const{
    return m_allow_origin_regexes_isValid;
}

QList<QString> OAIHttpRouteCorsPolicy::getAllowOrigins() const {
    return m_allow_origins;
}
void OAIHttpRouteCorsPolicy::setAllowOrigins(const QList<QString> &allow_origins) {
    m_allow_origins = allow_origins;
    m_allow_origins_isSet = true;
}

bool OAIHttpRouteCorsPolicy::is_allow_origins_Set() const{
    return m_allow_origins_isSet;
}

bool OAIHttpRouteCorsPolicy::is_allow_origins_Valid() const{
    return m_allow_origins_isValid;
}

bool OAIHttpRouteCorsPolicy::isDisabled() const {
    return m_disabled;
}
void OAIHttpRouteCorsPolicy::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIHttpRouteCorsPolicy::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIHttpRouteCorsPolicy::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QList<QString> OAIHttpRouteCorsPolicy::getExposeHeaders() const {
    return m_expose_headers;
}
void OAIHttpRouteCorsPolicy::setExposeHeaders(const QList<QString> &expose_headers) {
    m_expose_headers = expose_headers;
    m_expose_headers_isSet = true;
}

bool OAIHttpRouteCorsPolicy::is_expose_headers_Set() const{
    return m_expose_headers_isSet;
}

bool OAIHttpRouteCorsPolicy::is_expose_headers_Valid() const{
    return m_expose_headers_isValid;
}

QString OAIHttpRouteCorsPolicy::getMaxAge() const {
    return m_max_age;
}
void OAIHttpRouteCorsPolicy::setMaxAge(const QString &max_age) {
    m_max_age = max_age;
    m_max_age_isSet = true;
}

bool OAIHttpRouteCorsPolicy::is_max_age_Set() const{
    return m_max_age_isSet;
}

bool OAIHttpRouteCorsPolicy::is_max_age_Valid() const{
    return m_max_age_isValid;
}

bool OAIHttpRouteCorsPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_origin_regexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_origins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expose_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRouteCorsPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
