/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrpcRouteMethodMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrpcRouteMethodMatch::OAIGrpcRouteMethodMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrpcRouteMethodMatch::OAIGrpcRouteMethodMatch() {
    this->initializeModel();
}

OAIGrpcRouteMethodMatch::~OAIGrpcRouteMethodMatch() {}

void OAIGrpcRouteMethodMatch::initializeModel() {

    m_case_sensitive_isSet = false;
    m_case_sensitive_isValid = false;

    m_grpc_method_isSet = false;
    m_grpc_method_isValid = false;

    m_grpc_service_isSet = false;
    m_grpc_service_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGrpcRouteMethodMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrpcRouteMethodMatch::fromJsonObject(QJsonObject json) {

    m_case_sensitive_isValid = ::OpenAPI::fromJsonValue(m_case_sensitive, json[QString("caseSensitive")]);
    m_case_sensitive_isSet = !json[QString("caseSensitive")].isNull() && m_case_sensitive_isValid;

    m_grpc_method_isValid = ::OpenAPI::fromJsonValue(m_grpc_method, json[QString("grpcMethod")]);
    m_grpc_method_isSet = !json[QString("grpcMethod")].isNull() && m_grpc_method_isValid;

    m_grpc_service_isValid = ::OpenAPI::fromJsonValue(m_grpc_service, json[QString("grpcService")]);
    m_grpc_service_isSet = !json[QString("grpcService")].isNull() && m_grpc_service_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGrpcRouteMethodMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrpcRouteMethodMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_case_sensitive_isSet) {
        obj.insert(QString("caseSensitive"), ::OpenAPI::toJsonValue(m_case_sensitive));
    }
    if (m_grpc_method_isSet) {
        obj.insert(QString("grpcMethod"), ::OpenAPI::toJsonValue(m_grpc_method));
    }
    if (m_grpc_service_isSet) {
        obj.insert(QString("grpcService"), ::OpenAPI::toJsonValue(m_grpc_service));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIGrpcRouteMethodMatch::isCaseSensitive() const {
    return m_case_sensitive;
}
void OAIGrpcRouteMethodMatch::setCaseSensitive(const bool &case_sensitive) {
    m_case_sensitive = case_sensitive;
    m_case_sensitive_isSet = true;
}

bool OAIGrpcRouteMethodMatch::is_case_sensitive_Set() const{
    return m_case_sensitive_isSet;
}

bool OAIGrpcRouteMethodMatch::is_case_sensitive_Valid() const{
    return m_case_sensitive_isValid;
}

QString OAIGrpcRouteMethodMatch::getGrpcMethod() const {
    return m_grpc_method;
}
void OAIGrpcRouteMethodMatch::setGrpcMethod(const QString &grpc_method) {
    m_grpc_method = grpc_method;
    m_grpc_method_isSet = true;
}

bool OAIGrpcRouteMethodMatch::is_grpc_method_Set() const{
    return m_grpc_method_isSet;
}

bool OAIGrpcRouteMethodMatch::is_grpc_method_Valid() const{
    return m_grpc_method_isValid;
}

QString OAIGrpcRouteMethodMatch::getGrpcService() const {
    return m_grpc_service;
}
void OAIGrpcRouteMethodMatch::setGrpcService(const QString &grpc_service) {
    m_grpc_service = grpc_service;
    m_grpc_service_isSet = true;
}

bool OAIGrpcRouteMethodMatch::is_grpc_service_Set() const{
    return m_grpc_service_isSet;
}

bool OAIGrpcRouteMethodMatch::is_grpc_service_Valid() const{
    return m_grpc_service_isValid;
}

QString OAIGrpcRouteMethodMatch::getType() const {
    return m_type;
}
void OAIGrpcRouteMethodMatch::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGrpcRouteMethodMatch::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGrpcRouteMethodMatch::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGrpcRouteMethodMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grpc_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grpc_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrpcRouteMethodMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
