/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHttpRouteRouteMatch.h
 *
 * RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
 */

#ifndef OAIHttpRouteRouteMatch_H
#define OAIHttpRouteRouteMatch_H

#include <QJsonObject>

#include "OAIHttpRouteHeaderMatch.h"
#include "OAIHttpRouteQueryParameterMatch.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHttpRouteHeaderMatch;
class OAIHttpRouteQueryParameterMatch;

class OAIHttpRouteRouteMatch : public OAIObject {
public:
    OAIHttpRouteRouteMatch();
    OAIHttpRouteRouteMatch(QString json);
    ~OAIHttpRouteRouteMatch() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFullPathMatch() const;
    void setFullPathMatch(const QString &full_path_match);
    bool is_full_path_match_Set() const;
    bool is_full_path_match_Valid() const;

    QList<OAIHttpRouteHeaderMatch> getHeaders() const;
    void setHeaders(const QList<OAIHttpRouteHeaderMatch> &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    bool isIgnoreCase() const;
    void setIgnoreCase(const bool &ignore_case);
    bool is_ignore_case_Set() const;
    bool is_ignore_case_Valid() const;

    QString getPrefixMatch() const;
    void setPrefixMatch(const QString &prefix_match);
    bool is_prefix_match_Set() const;
    bool is_prefix_match_Valid() const;

    QList<OAIHttpRouteQueryParameterMatch> getQueryParameters() const;
    void setQueryParameters(const QList<OAIHttpRouteQueryParameterMatch> &query_parameters);
    bool is_query_parameters_Set() const;
    bool is_query_parameters_Valid() const;

    QString getRegexMatch() const;
    void setRegexMatch(const QString &regex_match);
    bool is_regex_match_Set() const;
    bool is_regex_match_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_full_path_match;
    bool m_full_path_match_isSet;
    bool m_full_path_match_isValid;

    QList<OAIHttpRouteHeaderMatch> m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;

    bool m_ignore_case;
    bool m_ignore_case_isSet;
    bool m_ignore_case_isValid;

    QString m_prefix_match;
    bool m_prefix_match_isSet;
    bool m_prefix_match_isValid;

    QList<OAIHttpRouteQueryParameterMatch> m_query_parameters;
    bool m_query_parameters_isSet;
    bool m_query_parameters_isValid;

    QString m_regex_match;
    bool m_regex_match_isSet;
    bool m_regex_match_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHttpRouteRouteMatch)

#endif // OAIHttpRouteRouteMatch_H
