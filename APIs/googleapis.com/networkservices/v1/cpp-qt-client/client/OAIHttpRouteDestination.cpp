/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRouteDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRouteDestination::OAIHttpRouteDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRouteDestination::OAIHttpRouteDestination() {
    this->initializeModel();
}

OAIHttpRouteDestination::~OAIHttpRouteDestination() {}

void OAIHttpRouteDestination::initializeModel() {

    m_request_header_modifier_isSet = false;
    m_request_header_modifier_isValid = false;

    m_response_header_modifier_isSet = false;
    m_response_header_modifier_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIHttpRouteDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRouteDestination::fromJsonObject(QJsonObject json) {

    m_request_header_modifier_isValid = ::OpenAPI::fromJsonValue(m_request_header_modifier, json[QString("requestHeaderModifier")]);
    m_request_header_modifier_isSet = !json[QString("requestHeaderModifier")].isNull() && m_request_header_modifier_isValid;

    m_response_header_modifier_isValid = ::OpenAPI::fromJsonValue(m_response_header_modifier, json[QString("responseHeaderModifier")]);
    m_response_header_modifier_isSet = !json[QString("responseHeaderModifier")].isNull() && m_response_header_modifier_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIHttpRouteDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRouteDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_request_header_modifier.isSet()) {
        obj.insert(QString("requestHeaderModifier"), ::OpenAPI::toJsonValue(m_request_header_modifier));
    }
    if (m_response_header_modifier.isSet()) {
        obj.insert(QString("responseHeaderModifier"), ::OpenAPI::toJsonValue(m_response_header_modifier));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

OAIHttpRouteHeaderModifier OAIHttpRouteDestination::getRequestHeaderModifier() const {
    return m_request_header_modifier;
}
void OAIHttpRouteDestination::setRequestHeaderModifier(const OAIHttpRouteHeaderModifier &request_header_modifier) {
    m_request_header_modifier = request_header_modifier;
    m_request_header_modifier_isSet = true;
}

bool OAIHttpRouteDestination::is_request_header_modifier_Set() const{
    return m_request_header_modifier_isSet;
}

bool OAIHttpRouteDestination::is_request_header_modifier_Valid() const{
    return m_request_header_modifier_isValid;
}

OAIHttpRouteHeaderModifier OAIHttpRouteDestination::getResponseHeaderModifier() const {
    return m_response_header_modifier;
}
void OAIHttpRouteDestination::setResponseHeaderModifier(const OAIHttpRouteHeaderModifier &response_header_modifier) {
    m_response_header_modifier = response_header_modifier;
    m_response_header_modifier_isSet = true;
}

bool OAIHttpRouteDestination::is_response_header_modifier_Set() const{
    return m_response_header_modifier_isSet;
}

bool OAIHttpRouteDestination::is_response_header_modifier_Valid() const{
    return m_response_header_modifier_isValid;
}

QString OAIHttpRouteDestination::getServiceName() const {
    return m_service_name;
}
void OAIHttpRouteDestination::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIHttpRouteDestination::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIHttpRouteDestination::is_service_name_Valid() const{
    return m_service_name_isValid;
}

qint32 OAIHttpRouteDestination::getWeight() const {
    return m_weight;
}
void OAIHttpRouteDestination::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIHttpRouteDestination::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIHttpRouteDestination::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIHttpRouteDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_header_modifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_header_modifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRouteDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
