/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRouteRouteMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRouteRouteMatch::OAIHttpRouteRouteMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRouteRouteMatch::OAIHttpRouteRouteMatch() {
    this->initializeModel();
}

OAIHttpRouteRouteMatch::~OAIHttpRouteRouteMatch() {}

void OAIHttpRouteRouteMatch::initializeModel() {

    m_full_path_match_isSet = false;
    m_full_path_match_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_ignore_case_isSet = false;
    m_ignore_case_isValid = false;

    m_prefix_match_isSet = false;
    m_prefix_match_isValid = false;

    m_query_parameters_isSet = false;
    m_query_parameters_isValid = false;

    m_regex_match_isSet = false;
    m_regex_match_isValid = false;
}

void OAIHttpRouteRouteMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRouteRouteMatch::fromJsonObject(QJsonObject json) {

    m_full_path_match_isValid = ::OpenAPI::fromJsonValue(m_full_path_match, json[QString("fullPathMatch")]);
    m_full_path_match_isSet = !json[QString("fullPathMatch")].isNull() && m_full_path_match_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_ignore_case_isValid = ::OpenAPI::fromJsonValue(m_ignore_case, json[QString("ignoreCase")]);
    m_ignore_case_isSet = !json[QString("ignoreCase")].isNull() && m_ignore_case_isValid;

    m_prefix_match_isValid = ::OpenAPI::fromJsonValue(m_prefix_match, json[QString("prefixMatch")]);
    m_prefix_match_isSet = !json[QString("prefixMatch")].isNull() && m_prefix_match_isValid;

    m_query_parameters_isValid = ::OpenAPI::fromJsonValue(m_query_parameters, json[QString("queryParameters")]);
    m_query_parameters_isSet = !json[QString("queryParameters")].isNull() && m_query_parameters_isValid;

    m_regex_match_isValid = ::OpenAPI::fromJsonValue(m_regex_match, json[QString("regexMatch")]);
    m_regex_match_isSet = !json[QString("regexMatch")].isNull() && m_regex_match_isValid;
}

QString OAIHttpRouteRouteMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRouteRouteMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_full_path_match_isSet) {
        obj.insert(QString("fullPathMatch"), ::OpenAPI::toJsonValue(m_full_path_match));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_ignore_case_isSet) {
        obj.insert(QString("ignoreCase"), ::OpenAPI::toJsonValue(m_ignore_case));
    }
    if (m_prefix_match_isSet) {
        obj.insert(QString("prefixMatch"), ::OpenAPI::toJsonValue(m_prefix_match));
    }
    if (m_query_parameters.size() > 0) {
        obj.insert(QString("queryParameters"), ::OpenAPI::toJsonValue(m_query_parameters));
    }
    if (m_regex_match_isSet) {
        obj.insert(QString("regexMatch"), ::OpenAPI::toJsonValue(m_regex_match));
    }
    return obj;
}

QString OAIHttpRouteRouteMatch::getFullPathMatch() const {
    return m_full_path_match;
}
void OAIHttpRouteRouteMatch::setFullPathMatch(const QString &full_path_match) {
    m_full_path_match = full_path_match;
    m_full_path_match_isSet = true;
}

bool OAIHttpRouteRouteMatch::is_full_path_match_Set() const{
    return m_full_path_match_isSet;
}

bool OAIHttpRouteRouteMatch::is_full_path_match_Valid() const{
    return m_full_path_match_isValid;
}

QList<OAIHttpRouteHeaderMatch> OAIHttpRouteRouteMatch::getHeaders() const {
    return m_headers;
}
void OAIHttpRouteRouteMatch::setHeaders(const QList<OAIHttpRouteHeaderMatch> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIHttpRouteRouteMatch::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIHttpRouteRouteMatch::is_headers_Valid() const{
    return m_headers_isValid;
}

bool OAIHttpRouteRouteMatch::isIgnoreCase() const {
    return m_ignore_case;
}
void OAIHttpRouteRouteMatch::setIgnoreCase(const bool &ignore_case) {
    m_ignore_case = ignore_case;
    m_ignore_case_isSet = true;
}

bool OAIHttpRouteRouteMatch::is_ignore_case_Set() const{
    return m_ignore_case_isSet;
}

bool OAIHttpRouteRouteMatch::is_ignore_case_Valid() const{
    return m_ignore_case_isValid;
}

QString OAIHttpRouteRouteMatch::getPrefixMatch() const {
    return m_prefix_match;
}
void OAIHttpRouteRouteMatch::setPrefixMatch(const QString &prefix_match) {
    m_prefix_match = prefix_match;
    m_prefix_match_isSet = true;
}

bool OAIHttpRouteRouteMatch::is_prefix_match_Set() const{
    return m_prefix_match_isSet;
}

bool OAIHttpRouteRouteMatch::is_prefix_match_Valid() const{
    return m_prefix_match_isValid;
}

QList<OAIHttpRouteQueryParameterMatch> OAIHttpRouteRouteMatch::getQueryParameters() const {
    return m_query_parameters;
}
void OAIHttpRouteRouteMatch::setQueryParameters(const QList<OAIHttpRouteQueryParameterMatch> &query_parameters) {
    m_query_parameters = query_parameters;
    m_query_parameters_isSet = true;
}

bool OAIHttpRouteRouteMatch::is_query_parameters_Set() const{
    return m_query_parameters_isSet;
}

bool OAIHttpRouteRouteMatch::is_query_parameters_Valid() const{
    return m_query_parameters_isValid;
}

QString OAIHttpRouteRouteMatch::getRegexMatch() const {
    return m_regex_match;
}
void OAIHttpRouteRouteMatch::setRegexMatch(const QString &regex_match) {
    m_regex_match = regex_match;
    m_regex_match_isSet = true;
}

bool OAIHttpRouteRouteMatch::is_regex_match_Set() const{
    return m_regex_match_isSet;
}

bool OAIHttpRouteRouteMatch::is_regex_match_Valid() const{
    return m_regex_match_isValid;
}

bool OAIHttpRouteRouteMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_path_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_case_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_match_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRouteRouteMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
