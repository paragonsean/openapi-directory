/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtensionChainExtension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtensionChainExtension::OAIExtensionChainExtension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtensionChainExtension::OAIExtensionChainExtension() {
    this->initializeModel();
}

OAIExtensionChainExtension::~OAIExtensionChainExtension() {}

void OAIExtensionChainExtension::initializeModel() {

    m_authority_isSet = false;
    m_authority_isValid = false;

    m_fail_open_isSet = false;
    m_fail_open_isValid = false;

    m_forward_headers_isSet = false;
    m_forward_headers_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_supported_events_isSet = false;
    m_supported_events_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIExtensionChainExtension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtensionChainExtension::fromJsonObject(QJsonObject json) {

    m_authority_isValid = ::OpenAPI::fromJsonValue(m_authority, json[QString("authority")]);
    m_authority_isSet = !json[QString("authority")].isNull() && m_authority_isValid;

    m_fail_open_isValid = ::OpenAPI::fromJsonValue(m_fail_open, json[QString("failOpen")]);
    m_fail_open_isSet = !json[QString("failOpen")].isNull() && m_fail_open_isValid;

    m_forward_headers_isValid = ::OpenAPI::fromJsonValue(m_forward_headers, json[QString("forwardHeaders")]);
    m_forward_headers_isSet = !json[QString("forwardHeaders")].isNull() && m_forward_headers_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_supported_events_isValid = ::OpenAPI::fromJsonValue(m_supported_events, json[QString("supportedEvents")]);
    m_supported_events_isSet = !json[QString("supportedEvents")].isNull() && m_supported_events_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIExtensionChainExtension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtensionChainExtension::asJsonObject() const {
    QJsonObject obj;
    if (m_authority_isSet) {
        obj.insert(QString("authority"), ::OpenAPI::toJsonValue(m_authority));
    }
    if (m_fail_open_isSet) {
        obj.insert(QString("failOpen"), ::OpenAPI::toJsonValue(m_fail_open));
    }
    if (m_forward_headers.size() > 0) {
        obj.insert(QString("forwardHeaders"), ::OpenAPI::toJsonValue(m_forward_headers));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_supported_events.size() > 0) {
        obj.insert(QString("supportedEvents"), ::OpenAPI::toJsonValue(m_supported_events));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QString OAIExtensionChainExtension::getAuthority() const {
    return m_authority;
}
void OAIExtensionChainExtension::setAuthority(const QString &authority) {
    m_authority = authority;
    m_authority_isSet = true;
}

bool OAIExtensionChainExtension::is_authority_Set() const{
    return m_authority_isSet;
}

bool OAIExtensionChainExtension::is_authority_Valid() const{
    return m_authority_isValid;
}

bool OAIExtensionChainExtension::isFailOpen() const {
    return m_fail_open;
}
void OAIExtensionChainExtension::setFailOpen(const bool &fail_open) {
    m_fail_open = fail_open;
    m_fail_open_isSet = true;
}

bool OAIExtensionChainExtension::is_fail_open_Set() const{
    return m_fail_open_isSet;
}

bool OAIExtensionChainExtension::is_fail_open_Valid() const{
    return m_fail_open_isValid;
}

QList<QString> OAIExtensionChainExtension::getForwardHeaders() const {
    return m_forward_headers;
}
void OAIExtensionChainExtension::setForwardHeaders(const QList<QString> &forward_headers) {
    m_forward_headers = forward_headers;
    m_forward_headers_isSet = true;
}

bool OAIExtensionChainExtension::is_forward_headers_Set() const{
    return m_forward_headers_isSet;
}

bool OAIExtensionChainExtension::is_forward_headers_Valid() const{
    return m_forward_headers_isValid;
}

QString OAIExtensionChainExtension::getName() const {
    return m_name;
}
void OAIExtensionChainExtension::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExtensionChainExtension::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExtensionChainExtension::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExtensionChainExtension::getService() const {
    return m_service;
}
void OAIExtensionChainExtension::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIExtensionChainExtension::is_service_Set() const{
    return m_service_isSet;
}

bool OAIExtensionChainExtension::is_service_Valid() const{
    return m_service_isValid;
}

QList<QString> OAIExtensionChainExtension::getSupportedEvents() const {
    return m_supported_events;
}
void OAIExtensionChainExtension::setSupportedEvents(const QList<QString> &supported_events) {
    m_supported_events = supported_events;
    m_supported_events_isSet = true;
}

bool OAIExtensionChainExtension::is_supported_events_Set() const{
    return m_supported_events_isSet;
}

bool OAIExtensionChainExtension::is_supported_events_Valid() const{
    return m_supported_events_isValid;
}

QString OAIExtensionChainExtension::getTimeout() const {
    return m_timeout;
}
void OAIExtensionChainExtension::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIExtensionChainExtension::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIExtensionChainExtension::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIExtensionChainExtension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fail_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtensionChainExtension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
