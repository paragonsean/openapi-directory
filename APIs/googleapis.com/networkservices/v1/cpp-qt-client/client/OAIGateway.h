/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGateway.h
 *
 * Gateway represents the configuration for a proxy, typically a load balancer. It captures the ip:port over which the services are exposed by the proxy, along with any policy configurations. Routes have reference to to Gateways to dictate how requests should be routed by this Gateway. Next id: 32
 */

#ifndef OAIGateway_H
#define OAIGateway_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGateway : public OAIObject {
public:
    OAIGateway();
    OAIGateway(QString json);
    ~OAIGateway() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAddresses() const;
    void setAddresses(const QList<QString> &addresses);
    bool is_addresses_Set() const;
    bool is_addresses_Valid() const;

    QList<QString> getCertificateUrls() const;
    void setCertificateUrls(const QList<QString> &certificate_urls);
    bool is_certificate_urls_Set() const;
    bool is_certificate_urls_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEnvoyHeaders() const;
    void setEnvoyHeaders(const QString &envoy_headers);
    bool is_envoy_headers_Set() const;
    bool is_envoy_headers_Valid() const;

    QString getGatewaySecurityPolicy() const;
    void setGatewaySecurityPolicy(const QString &gateway_security_policy);
    bool is_gateway_security_policy_Set() const;
    bool is_gateway_security_policy_Valid() const;

    QString getIpVersion() const;
    void setIpVersion(const QString &ip_version);
    bool is_ip_version_Set() const;
    bool is_ip_version_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNetwork() const;
    void setNetwork(const QString &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    QList<qint32> getPorts() const;
    void setPorts(const QList<qint32> &ports);
    bool is_ports_Set() const;
    bool is_ports_Valid() const;

    QString getScope() const;
    void setScope(const QString &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    QString getSelfLink() const;
    void setSelfLink(const QString &self_link);
    bool is_self_link_Set() const;
    bool is_self_link_Valid() const;

    QString getServerTlsPolicy() const;
    void setServerTlsPolicy(const QString &server_tls_policy);
    bool is_server_tls_policy_Set() const;
    bool is_server_tls_policy_Valid() const;

    QString getSubnetwork() const;
    void setSubnetwork(const QString &subnetwork);
    bool is_subnetwork_Set() const;
    bool is_subnetwork_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_addresses;
    bool m_addresses_isSet;
    bool m_addresses_isValid;

    QList<QString> m_certificate_urls;
    bool m_certificate_urls_isSet;
    bool m_certificate_urls_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_envoy_headers;
    bool m_envoy_headers_isSet;
    bool m_envoy_headers_isValid;

    QString m_gateway_security_policy;
    bool m_gateway_security_policy_isSet;
    bool m_gateway_security_policy_isValid;

    QString m_ip_version;
    bool m_ip_version_isSet;
    bool m_ip_version_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    QList<qint32> m_ports;
    bool m_ports_isSet;
    bool m_ports_isValid;

    QString m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    QString m_self_link;
    bool m_self_link_isSet;
    bool m_self_link_isValid;

    QString m_server_tls_policy;
    bool m_server_tls_policy_isSet;
    bool m_server_tls_policy_isValid;

    QString m_subnetwork;
    bool m_subnetwork_isSet;
    bool m_subnetwork_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGateway)

#endif // OAIGateway_H
