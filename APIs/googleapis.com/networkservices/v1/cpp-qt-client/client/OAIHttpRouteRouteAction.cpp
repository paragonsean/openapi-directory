/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRouteRouteAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRouteRouteAction::OAIHttpRouteRouteAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRouteRouteAction::OAIHttpRouteRouteAction() {
    this->initializeModel();
}

OAIHttpRouteRouteAction::~OAIHttpRouteRouteAction() {}

void OAIHttpRouteRouteAction::initializeModel() {

    m_cors_policy_isSet = false;
    m_cors_policy_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_direct_response_isSet = false;
    m_direct_response_isValid = false;

    m_fault_injection_policy_isSet = false;
    m_fault_injection_policy_isValid = false;

    m_idle_timeout_isSet = false;
    m_idle_timeout_isValid = false;

    m_redirect_isSet = false;
    m_redirect_isValid = false;

    m_request_header_modifier_isSet = false;
    m_request_header_modifier_isValid = false;

    m_request_mirror_policy_isSet = false;
    m_request_mirror_policy_isValid = false;

    m_response_header_modifier_isSet = false;
    m_response_header_modifier_isValid = false;

    m_retry_policy_isSet = false;
    m_retry_policy_isValid = false;

    m_stateful_session_affinity_isSet = false;
    m_stateful_session_affinity_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_url_rewrite_isSet = false;
    m_url_rewrite_isValid = false;
}

void OAIHttpRouteRouteAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRouteRouteAction::fromJsonObject(QJsonObject json) {

    m_cors_policy_isValid = ::OpenAPI::fromJsonValue(m_cors_policy, json[QString("corsPolicy")]);
    m_cors_policy_isSet = !json[QString("corsPolicy")].isNull() && m_cors_policy_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_direct_response_isValid = ::OpenAPI::fromJsonValue(m_direct_response, json[QString("directResponse")]);
    m_direct_response_isSet = !json[QString("directResponse")].isNull() && m_direct_response_isValid;

    m_fault_injection_policy_isValid = ::OpenAPI::fromJsonValue(m_fault_injection_policy, json[QString("faultInjectionPolicy")]);
    m_fault_injection_policy_isSet = !json[QString("faultInjectionPolicy")].isNull() && m_fault_injection_policy_isValid;

    m_idle_timeout_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout, json[QString("idleTimeout")]);
    m_idle_timeout_isSet = !json[QString("idleTimeout")].isNull() && m_idle_timeout_isValid;

    m_redirect_isValid = ::OpenAPI::fromJsonValue(m_redirect, json[QString("redirect")]);
    m_redirect_isSet = !json[QString("redirect")].isNull() && m_redirect_isValid;

    m_request_header_modifier_isValid = ::OpenAPI::fromJsonValue(m_request_header_modifier, json[QString("requestHeaderModifier")]);
    m_request_header_modifier_isSet = !json[QString("requestHeaderModifier")].isNull() && m_request_header_modifier_isValid;

    m_request_mirror_policy_isValid = ::OpenAPI::fromJsonValue(m_request_mirror_policy, json[QString("requestMirrorPolicy")]);
    m_request_mirror_policy_isSet = !json[QString("requestMirrorPolicy")].isNull() && m_request_mirror_policy_isValid;

    m_response_header_modifier_isValid = ::OpenAPI::fromJsonValue(m_response_header_modifier, json[QString("responseHeaderModifier")]);
    m_response_header_modifier_isSet = !json[QString("responseHeaderModifier")].isNull() && m_response_header_modifier_isValid;

    m_retry_policy_isValid = ::OpenAPI::fromJsonValue(m_retry_policy, json[QString("retryPolicy")]);
    m_retry_policy_isSet = !json[QString("retryPolicy")].isNull() && m_retry_policy_isValid;

    m_stateful_session_affinity_isValid = ::OpenAPI::fromJsonValue(m_stateful_session_affinity, json[QString("statefulSessionAffinity")]);
    m_stateful_session_affinity_isSet = !json[QString("statefulSessionAffinity")].isNull() && m_stateful_session_affinity_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_url_rewrite_isValid = ::OpenAPI::fromJsonValue(m_url_rewrite, json[QString("urlRewrite")]);
    m_url_rewrite_isSet = !json[QString("urlRewrite")].isNull() && m_url_rewrite_isValid;
}

QString OAIHttpRouteRouteAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRouteRouteAction::asJsonObject() const {
    QJsonObject obj;
    if (m_cors_policy.isSet()) {
        obj.insert(QString("corsPolicy"), ::OpenAPI::toJsonValue(m_cors_policy));
    }
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_direct_response.isSet()) {
        obj.insert(QString("directResponse"), ::OpenAPI::toJsonValue(m_direct_response));
    }
    if (m_fault_injection_policy.isSet()) {
        obj.insert(QString("faultInjectionPolicy"), ::OpenAPI::toJsonValue(m_fault_injection_policy));
    }
    if (m_idle_timeout_isSet) {
        obj.insert(QString("idleTimeout"), ::OpenAPI::toJsonValue(m_idle_timeout));
    }
    if (m_redirect.isSet()) {
        obj.insert(QString("redirect"), ::OpenAPI::toJsonValue(m_redirect));
    }
    if (m_request_header_modifier.isSet()) {
        obj.insert(QString("requestHeaderModifier"), ::OpenAPI::toJsonValue(m_request_header_modifier));
    }
    if (m_request_mirror_policy.isSet()) {
        obj.insert(QString("requestMirrorPolicy"), ::OpenAPI::toJsonValue(m_request_mirror_policy));
    }
    if (m_response_header_modifier.isSet()) {
        obj.insert(QString("responseHeaderModifier"), ::OpenAPI::toJsonValue(m_response_header_modifier));
    }
    if (m_retry_policy.isSet()) {
        obj.insert(QString("retryPolicy"), ::OpenAPI::toJsonValue(m_retry_policy));
    }
    if (m_stateful_session_affinity.isSet()) {
        obj.insert(QString("statefulSessionAffinity"), ::OpenAPI::toJsonValue(m_stateful_session_affinity));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_url_rewrite.isSet()) {
        obj.insert(QString("urlRewrite"), ::OpenAPI::toJsonValue(m_url_rewrite));
    }
    return obj;
}

OAIHttpRouteCorsPolicy OAIHttpRouteRouteAction::getCorsPolicy() const {
    return m_cors_policy;
}
void OAIHttpRouteRouteAction::setCorsPolicy(const OAIHttpRouteCorsPolicy &cors_policy) {
    m_cors_policy = cors_policy;
    m_cors_policy_isSet = true;
}

bool OAIHttpRouteRouteAction::is_cors_policy_Set() const{
    return m_cors_policy_isSet;
}

bool OAIHttpRouteRouteAction::is_cors_policy_Valid() const{
    return m_cors_policy_isValid;
}

QList<OAIHttpRouteDestination> OAIHttpRouteRouteAction::getDestinations() const {
    return m_destinations;
}
void OAIHttpRouteRouteAction::setDestinations(const QList<OAIHttpRouteDestination> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIHttpRouteRouteAction::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIHttpRouteRouteAction::is_destinations_Valid() const{
    return m_destinations_isValid;
}

OAIHttpRouteHttpDirectResponse OAIHttpRouteRouteAction::getDirectResponse() const {
    return m_direct_response;
}
void OAIHttpRouteRouteAction::setDirectResponse(const OAIHttpRouteHttpDirectResponse &direct_response) {
    m_direct_response = direct_response;
    m_direct_response_isSet = true;
}

bool OAIHttpRouteRouteAction::is_direct_response_Set() const{
    return m_direct_response_isSet;
}

bool OAIHttpRouteRouteAction::is_direct_response_Valid() const{
    return m_direct_response_isValid;
}

OAIHttpRouteFaultInjectionPolicy OAIHttpRouteRouteAction::getFaultInjectionPolicy() const {
    return m_fault_injection_policy;
}
void OAIHttpRouteRouteAction::setFaultInjectionPolicy(const OAIHttpRouteFaultInjectionPolicy &fault_injection_policy) {
    m_fault_injection_policy = fault_injection_policy;
    m_fault_injection_policy_isSet = true;
}

bool OAIHttpRouteRouteAction::is_fault_injection_policy_Set() const{
    return m_fault_injection_policy_isSet;
}

bool OAIHttpRouteRouteAction::is_fault_injection_policy_Valid() const{
    return m_fault_injection_policy_isValid;
}

QString OAIHttpRouteRouteAction::getIdleTimeout() const {
    return m_idle_timeout;
}
void OAIHttpRouteRouteAction::setIdleTimeout(const QString &idle_timeout) {
    m_idle_timeout = idle_timeout;
    m_idle_timeout_isSet = true;
}

bool OAIHttpRouteRouteAction::is_idle_timeout_Set() const{
    return m_idle_timeout_isSet;
}

bool OAIHttpRouteRouteAction::is_idle_timeout_Valid() const{
    return m_idle_timeout_isValid;
}

OAIHttpRouteRedirect OAIHttpRouteRouteAction::getRedirect() const {
    return m_redirect;
}
void OAIHttpRouteRouteAction::setRedirect(const OAIHttpRouteRedirect &redirect) {
    m_redirect = redirect;
    m_redirect_isSet = true;
}

bool OAIHttpRouteRouteAction::is_redirect_Set() const{
    return m_redirect_isSet;
}

bool OAIHttpRouteRouteAction::is_redirect_Valid() const{
    return m_redirect_isValid;
}

OAIHttpRouteHeaderModifier OAIHttpRouteRouteAction::getRequestHeaderModifier() const {
    return m_request_header_modifier;
}
void OAIHttpRouteRouteAction::setRequestHeaderModifier(const OAIHttpRouteHeaderModifier &request_header_modifier) {
    m_request_header_modifier = request_header_modifier;
    m_request_header_modifier_isSet = true;
}

bool OAIHttpRouteRouteAction::is_request_header_modifier_Set() const{
    return m_request_header_modifier_isSet;
}

bool OAIHttpRouteRouteAction::is_request_header_modifier_Valid() const{
    return m_request_header_modifier_isValid;
}

OAIHttpRouteRequestMirrorPolicy OAIHttpRouteRouteAction::getRequestMirrorPolicy() const {
    return m_request_mirror_policy;
}
void OAIHttpRouteRouteAction::setRequestMirrorPolicy(const OAIHttpRouteRequestMirrorPolicy &request_mirror_policy) {
    m_request_mirror_policy = request_mirror_policy;
    m_request_mirror_policy_isSet = true;
}

bool OAIHttpRouteRouteAction::is_request_mirror_policy_Set() const{
    return m_request_mirror_policy_isSet;
}

bool OAIHttpRouteRouteAction::is_request_mirror_policy_Valid() const{
    return m_request_mirror_policy_isValid;
}

OAIHttpRouteHeaderModifier OAIHttpRouteRouteAction::getResponseHeaderModifier() const {
    return m_response_header_modifier;
}
void OAIHttpRouteRouteAction::setResponseHeaderModifier(const OAIHttpRouteHeaderModifier &response_header_modifier) {
    m_response_header_modifier = response_header_modifier;
    m_response_header_modifier_isSet = true;
}

bool OAIHttpRouteRouteAction::is_response_header_modifier_Set() const{
    return m_response_header_modifier_isSet;
}

bool OAIHttpRouteRouteAction::is_response_header_modifier_Valid() const{
    return m_response_header_modifier_isValid;
}

OAIHttpRouteRetryPolicy OAIHttpRouteRouteAction::getRetryPolicy() const {
    return m_retry_policy;
}
void OAIHttpRouteRouteAction::setRetryPolicy(const OAIHttpRouteRetryPolicy &retry_policy) {
    m_retry_policy = retry_policy;
    m_retry_policy_isSet = true;
}

bool OAIHttpRouteRouteAction::is_retry_policy_Set() const{
    return m_retry_policy_isSet;
}

bool OAIHttpRouteRouteAction::is_retry_policy_Valid() const{
    return m_retry_policy_isValid;
}

OAIHttpRouteStatefulSessionAffinityPolicy OAIHttpRouteRouteAction::getStatefulSessionAffinity() const {
    return m_stateful_session_affinity;
}
void OAIHttpRouteRouteAction::setStatefulSessionAffinity(const OAIHttpRouteStatefulSessionAffinityPolicy &stateful_session_affinity) {
    m_stateful_session_affinity = stateful_session_affinity;
    m_stateful_session_affinity_isSet = true;
}

bool OAIHttpRouteRouteAction::is_stateful_session_affinity_Set() const{
    return m_stateful_session_affinity_isSet;
}

bool OAIHttpRouteRouteAction::is_stateful_session_affinity_Valid() const{
    return m_stateful_session_affinity_isValid;
}

QString OAIHttpRouteRouteAction::getTimeout() const {
    return m_timeout;
}
void OAIHttpRouteRouteAction::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIHttpRouteRouteAction::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIHttpRouteRouteAction::is_timeout_Valid() const{
    return m_timeout_isValid;
}

OAIHttpRouteURLRewrite OAIHttpRouteRouteAction::getUrlRewrite() const {
    return m_url_rewrite;
}
void OAIHttpRouteRouteAction::setUrlRewrite(const OAIHttpRouteURLRewrite &url_rewrite) {
    m_url_rewrite = url_rewrite;
    m_url_rewrite_isSet = true;
}

bool OAIHttpRouteRouteAction::is_url_rewrite_Set() const{
    return m_url_rewrite_isSet;
}

bool OAIHttpRouteRouteAction::is_url_rewrite_Valid() const{
    return m_url_rewrite_isValid;
}

bool OAIHttpRouteRouteAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cors_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_injection_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_header_modifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_mirror_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_header_modifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stateful_session_affinity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_rewrite.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRouteRouteAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
