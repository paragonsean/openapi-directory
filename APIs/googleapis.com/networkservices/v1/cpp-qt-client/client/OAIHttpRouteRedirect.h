/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHttpRouteRedirect.h
 *
 * The specification for redirecting traffic.
 */

#ifndef OAIHttpRouteRedirect_H
#define OAIHttpRouteRedirect_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHttpRouteRedirect : public OAIObject {
public:
    OAIHttpRouteRedirect();
    OAIHttpRouteRedirect(QString json);
    ~OAIHttpRouteRedirect() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getHostRedirect() const;
    void setHostRedirect(const QString &host_redirect);
    bool is_host_redirect_Set() const;
    bool is_host_redirect_Valid() const;

    bool isHttpsRedirect() const;
    void setHttpsRedirect(const bool &https_redirect);
    bool is_https_redirect_Set() const;
    bool is_https_redirect_Valid() const;

    QString getPathRedirect() const;
    void setPathRedirect(const QString &path_redirect);
    bool is_path_redirect_Set() const;
    bool is_path_redirect_Valid() const;

    qint32 getPortRedirect() const;
    void setPortRedirect(const qint32 &port_redirect);
    bool is_port_redirect_Set() const;
    bool is_port_redirect_Valid() const;

    QString getPrefixRewrite() const;
    void setPrefixRewrite(const QString &prefix_rewrite);
    bool is_prefix_rewrite_Set() const;
    bool is_prefix_rewrite_Valid() const;

    QString getResponseCode() const;
    void setResponseCode(const QString &response_code);
    bool is_response_code_Set() const;
    bool is_response_code_Valid() const;

    bool isStripQuery() const;
    void setStripQuery(const bool &strip_query);
    bool is_strip_query_Set() const;
    bool is_strip_query_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_host_redirect;
    bool m_host_redirect_isSet;
    bool m_host_redirect_isValid;

    bool m_https_redirect;
    bool m_https_redirect_isSet;
    bool m_https_redirect_isValid;

    QString m_path_redirect;
    bool m_path_redirect_isSet;
    bool m_path_redirect_isValid;

    qint32 m_port_redirect;
    bool m_port_redirect_isSet;
    bool m_port_redirect_isValid;

    QString m_prefix_rewrite;
    bool m_prefix_rewrite_isSet;
    bool m_prefix_rewrite_isValid;

    QString m_response_code;
    bool m_response_code_isSet;
    bool m_response_code_isValid;

    bool m_strip_query;
    bool m_strip_query_isSet;
    bool m_strip_query_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHttpRouteRedirect)

#endif // OAIHttpRouteRedirect_H
