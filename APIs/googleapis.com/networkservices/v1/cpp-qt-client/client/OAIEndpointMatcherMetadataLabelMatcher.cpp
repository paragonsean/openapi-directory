/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointMatcherMetadataLabelMatcher.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointMatcherMetadataLabelMatcher::OAIEndpointMatcherMetadataLabelMatcher(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointMatcherMetadataLabelMatcher::OAIEndpointMatcherMetadataLabelMatcher() {
    this->initializeModel();
}

OAIEndpointMatcherMetadataLabelMatcher::~OAIEndpointMatcherMetadataLabelMatcher() {}

void OAIEndpointMatcherMetadataLabelMatcher::initializeModel() {

    m_metadata_label_match_criteria_isSet = false;
    m_metadata_label_match_criteria_isValid = false;

    m_metadata_labels_isSet = false;
    m_metadata_labels_isValid = false;
}

void OAIEndpointMatcherMetadataLabelMatcher::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointMatcherMetadataLabelMatcher::fromJsonObject(QJsonObject json) {

    m_metadata_label_match_criteria_isValid = ::OpenAPI::fromJsonValue(m_metadata_label_match_criteria, json[QString("metadataLabelMatchCriteria")]);
    m_metadata_label_match_criteria_isSet = !json[QString("metadataLabelMatchCriteria")].isNull() && m_metadata_label_match_criteria_isValid;

    m_metadata_labels_isValid = ::OpenAPI::fromJsonValue(m_metadata_labels, json[QString("metadataLabels")]);
    m_metadata_labels_isSet = !json[QString("metadataLabels")].isNull() && m_metadata_labels_isValid;
}

QString OAIEndpointMatcherMetadataLabelMatcher::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointMatcherMetadataLabelMatcher::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata_label_match_criteria_isSet) {
        obj.insert(QString("metadataLabelMatchCriteria"), ::OpenAPI::toJsonValue(m_metadata_label_match_criteria));
    }
    if (m_metadata_labels.size() > 0) {
        obj.insert(QString("metadataLabels"), ::OpenAPI::toJsonValue(m_metadata_labels));
    }
    return obj;
}

QString OAIEndpointMatcherMetadataLabelMatcher::getMetadataLabelMatchCriteria() const {
    return m_metadata_label_match_criteria;
}
void OAIEndpointMatcherMetadataLabelMatcher::setMetadataLabelMatchCriteria(const QString &metadata_label_match_criteria) {
    m_metadata_label_match_criteria = metadata_label_match_criteria;
    m_metadata_label_match_criteria_isSet = true;
}

bool OAIEndpointMatcherMetadataLabelMatcher::is_metadata_label_match_criteria_Set() const{
    return m_metadata_label_match_criteria_isSet;
}

bool OAIEndpointMatcherMetadataLabelMatcher::is_metadata_label_match_criteria_Valid() const{
    return m_metadata_label_match_criteria_isValid;
}

QList<OAIEndpointMatcherMetadataLabelMatcherMetadataLabels> OAIEndpointMatcherMetadataLabelMatcher::getMetadataLabels() const {
    return m_metadata_labels;
}
void OAIEndpointMatcherMetadataLabelMatcher::setMetadataLabels(const QList<OAIEndpointMatcherMetadataLabelMatcherMetadataLabels> &metadata_labels) {
    m_metadata_labels = metadata_labels;
    m_metadata_labels_isSet = true;
}

bool OAIEndpointMatcherMetadataLabelMatcher::is_metadata_labels_Set() const{
    return m_metadata_labels_isSet;
}

bool OAIEndpointMatcherMetadataLabelMatcher::is_metadata_labels_Valid() const{
    return m_metadata_labels_isValid;
}

bool OAIEndpointMatcherMetadataLabelMatcher::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata_label_match_criteria_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointMatcherMetadataLabelMatcher::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
