/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHttpRouteRouteAction.h
 *
 * The specifications for routing traffic and applying associated policies.
 */

#ifndef OAIHttpRouteRouteAction_H
#define OAIHttpRouteRouteAction_H

#include <QJsonObject>

#include "OAIHttpRouteCorsPolicy.h"
#include "OAIHttpRouteDestination.h"
#include "OAIHttpRouteFaultInjectionPolicy.h"
#include "OAIHttpRouteHeaderModifier.h"
#include "OAIHttpRouteHttpDirectResponse.h"
#include "OAIHttpRouteRedirect.h"
#include "OAIHttpRouteRequestMirrorPolicy.h"
#include "OAIHttpRouteRetryPolicy.h"
#include "OAIHttpRouteStatefulSessionAffinityPolicy.h"
#include "OAIHttpRouteURLRewrite.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHttpRouteCorsPolicy;
class OAIHttpRouteDestination;
class OAIHttpRouteHttpDirectResponse;
class OAIHttpRouteFaultInjectionPolicy;
class OAIHttpRouteRedirect;
class OAIHttpRouteHeaderModifier;
class OAIHttpRouteRequestMirrorPolicy;
class OAIHttpRouteRetryPolicy;
class OAIHttpRouteStatefulSessionAffinityPolicy;
class OAIHttpRouteURLRewrite;

class OAIHttpRouteRouteAction : public OAIObject {
public:
    OAIHttpRouteRouteAction();
    OAIHttpRouteRouteAction(QString json);
    ~OAIHttpRouteRouteAction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIHttpRouteCorsPolicy getCorsPolicy() const;
    void setCorsPolicy(const OAIHttpRouteCorsPolicy &cors_policy);
    bool is_cors_policy_Set() const;
    bool is_cors_policy_Valid() const;

    QList<OAIHttpRouteDestination> getDestinations() const;
    void setDestinations(const QList<OAIHttpRouteDestination> &destinations);
    bool is_destinations_Set() const;
    bool is_destinations_Valid() const;

    OAIHttpRouteHttpDirectResponse getDirectResponse() const;
    void setDirectResponse(const OAIHttpRouteHttpDirectResponse &direct_response);
    bool is_direct_response_Set() const;
    bool is_direct_response_Valid() const;

    OAIHttpRouteFaultInjectionPolicy getFaultInjectionPolicy() const;
    void setFaultInjectionPolicy(const OAIHttpRouteFaultInjectionPolicy &fault_injection_policy);
    bool is_fault_injection_policy_Set() const;
    bool is_fault_injection_policy_Valid() const;

    QString getIdleTimeout() const;
    void setIdleTimeout(const QString &idle_timeout);
    bool is_idle_timeout_Set() const;
    bool is_idle_timeout_Valid() const;

    OAIHttpRouteRedirect getRedirect() const;
    void setRedirect(const OAIHttpRouteRedirect &redirect);
    bool is_redirect_Set() const;
    bool is_redirect_Valid() const;

    OAIHttpRouteHeaderModifier getRequestHeaderModifier() const;
    void setRequestHeaderModifier(const OAIHttpRouteHeaderModifier &request_header_modifier);
    bool is_request_header_modifier_Set() const;
    bool is_request_header_modifier_Valid() const;

    OAIHttpRouteRequestMirrorPolicy getRequestMirrorPolicy() const;
    void setRequestMirrorPolicy(const OAIHttpRouteRequestMirrorPolicy &request_mirror_policy);
    bool is_request_mirror_policy_Set() const;
    bool is_request_mirror_policy_Valid() const;

    OAIHttpRouteHeaderModifier getResponseHeaderModifier() const;
    void setResponseHeaderModifier(const OAIHttpRouteHeaderModifier &response_header_modifier);
    bool is_response_header_modifier_Set() const;
    bool is_response_header_modifier_Valid() const;

    OAIHttpRouteRetryPolicy getRetryPolicy() const;
    void setRetryPolicy(const OAIHttpRouteRetryPolicy &retry_policy);
    bool is_retry_policy_Set() const;
    bool is_retry_policy_Valid() const;

    OAIHttpRouteStatefulSessionAffinityPolicy getStatefulSessionAffinity() const;
    void setStatefulSessionAffinity(const OAIHttpRouteStatefulSessionAffinityPolicy &stateful_session_affinity);
    bool is_stateful_session_affinity_Set() const;
    bool is_stateful_session_affinity_Valid() const;

    QString getTimeout() const;
    void setTimeout(const QString &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    OAIHttpRouteURLRewrite getUrlRewrite() const;
    void setUrlRewrite(const OAIHttpRouteURLRewrite &url_rewrite);
    bool is_url_rewrite_Set() const;
    bool is_url_rewrite_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIHttpRouteCorsPolicy m_cors_policy;
    bool m_cors_policy_isSet;
    bool m_cors_policy_isValid;

    QList<OAIHttpRouteDestination> m_destinations;
    bool m_destinations_isSet;
    bool m_destinations_isValid;

    OAIHttpRouteHttpDirectResponse m_direct_response;
    bool m_direct_response_isSet;
    bool m_direct_response_isValid;

    OAIHttpRouteFaultInjectionPolicy m_fault_injection_policy;
    bool m_fault_injection_policy_isSet;
    bool m_fault_injection_policy_isValid;

    QString m_idle_timeout;
    bool m_idle_timeout_isSet;
    bool m_idle_timeout_isValid;

    OAIHttpRouteRedirect m_redirect;
    bool m_redirect_isSet;
    bool m_redirect_isValid;

    OAIHttpRouteHeaderModifier m_request_header_modifier;
    bool m_request_header_modifier_isSet;
    bool m_request_header_modifier_isValid;

    OAIHttpRouteRequestMirrorPolicy m_request_mirror_policy;
    bool m_request_mirror_policy_isSet;
    bool m_request_mirror_policy_isValid;

    OAIHttpRouteHeaderModifier m_response_header_modifier;
    bool m_response_header_modifier_isSet;
    bool m_response_header_modifier_isValid;

    OAIHttpRouteRetryPolicy m_retry_policy;
    bool m_retry_policy_isSet;
    bool m_retry_policy_isValid;

    OAIHttpRouteStatefulSessionAffinityPolicy m_stateful_session_affinity;
    bool m_stateful_session_affinity_isSet;
    bool m_stateful_session_affinity_isValid;

    QString m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    OAIHttpRouteURLRewrite m_url_rewrite;
    bool m_url_rewrite_isSet;
    bool m_url_rewrite_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHttpRouteRouteAction)

#endif // OAIHttpRouteRouteAction_H
