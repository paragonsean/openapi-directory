/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRouteURLRewrite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRouteURLRewrite::OAIHttpRouteURLRewrite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRouteURLRewrite::OAIHttpRouteURLRewrite() {
    this->initializeModel();
}

OAIHttpRouteURLRewrite::~OAIHttpRouteURLRewrite() {}

void OAIHttpRouteURLRewrite::initializeModel() {

    m_host_rewrite_isSet = false;
    m_host_rewrite_isValid = false;

    m_path_prefix_rewrite_isSet = false;
    m_path_prefix_rewrite_isValid = false;
}

void OAIHttpRouteURLRewrite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRouteURLRewrite::fromJsonObject(QJsonObject json) {

    m_host_rewrite_isValid = ::OpenAPI::fromJsonValue(m_host_rewrite, json[QString("hostRewrite")]);
    m_host_rewrite_isSet = !json[QString("hostRewrite")].isNull() && m_host_rewrite_isValid;

    m_path_prefix_rewrite_isValid = ::OpenAPI::fromJsonValue(m_path_prefix_rewrite, json[QString("pathPrefixRewrite")]);
    m_path_prefix_rewrite_isSet = !json[QString("pathPrefixRewrite")].isNull() && m_path_prefix_rewrite_isValid;
}

QString OAIHttpRouteURLRewrite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRouteURLRewrite::asJsonObject() const {
    QJsonObject obj;
    if (m_host_rewrite_isSet) {
        obj.insert(QString("hostRewrite"), ::OpenAPI::toJsonValue(m_host_rewrite));
    }
    if (m_path_prefix_rewrite_isSet) {
        obj.insert(QString("pathPrefixRewrite"), ::OpenAPI::toJsonValue(m_path_prefix_rewrite));
    }
    return obj;
}

QString OAIHttpRouteURLRewrite::getHostRewrite() const {
    return m_host_rewrite;
}
void OAIHttpRouteURLRewrite::setHostRewrite(const QString &host_rewrite) {
    m_host_rewrite = host_rewrite;
    m_host_rewrite_isSet = true;
}

bool OAIHttpRouteURLRewrite::is_host_rewrite_Set() const{
    return m_host_rewrite_isSet;
}

bool OAIHttpRouteURLRewrite::is_host_rewrite_Valid() const{
    return m_host_rewrite_isValid;
}

QString OAIHttpRouteURLRewrite::getPathPrefixRewrite() const {
    return m_path_prefix_rewrite;
}
void OAIHttpRouteURLRewrite::setPathPrefixRewrite(const QString &path_prefix_rewrite) {
    m_path_prefix_rewrite = path_prefix_rewrite;
    m_path_prefix_rewrite_isSet = true;
}

bool OAIHttpRouteURLRewrite::is_path_prefix_rewrite_Set() const{
    return m_path_prefix_rewrite_isSet;
}

bool OAIHttpRouteURLRewrite::is_path_prefix_rewrite_Valid() const{
    return m_path_prefix_rewrite_isValid;
}

bool OAIHttpRouteURLRewrite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_rewrite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_prefix_rewrite_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRouteURLRewrite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
