/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGateway.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGateway::OAIGateway(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGateway::OAIGateway() {
    this->initializeModel();
}

OAIGateway::~OAIGateway() {}

void OAIGateway::initializeModel() {

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_certificate_urls_isSet = false;
    m_certificate_urls_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_envoy_headers_isSet = false;
    m_envoy_headers_isValid = false;

    m_gateway_security_policy_isSet = false;
    m_gateway_security_policy_isValid = false;

    m_ip_version_isSet = false;
    m_ip_version_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_ports_isSet = false;
    m_ports_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_server_tls_policy_isSet = false;
    m_server_tls_policy_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGateway::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGateway::fromJsonObject(QJsonObject json) {

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("addresses")]);
    m_addresses_isSet = !json[QString("addresses")].isNull() && m_addresses_isValid;

    m_certificate_urls_isValid = ::OpenAPI::fromJsonValue(m_certificate_urls, json[QString("certificateUrls")]);
    m_certificate_urls_isSet = !json[QString("certificateUrls")].isNull() && m_certificate_urls_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_envoy_headers_isValid = ::OpenAPI::fromJsonValue(m_envoy_headers, json[QString("envoyHeaders")]);
    m_envoy_headers_isSet = !json[QString("envoyHeaders")].isNull() && m_envoy_headers_isValid;

    m_gateway_security_policy_isValid = ::OpenAPI::fromJsonValue(m_gateway_security_policy, json[QString("gatewaySecurityPolicy")]);
    m_gateway_security_policy_isSet = !json[QString("gatewaySecurityPolicy")].isNull() && m_gateway_security_policy_isValid;

    m_ip_version_isValid = ::OpenAPI::fromJsonValue(m_ip_version, json[QString("ipVersion")]);
    m_ip_version_isSet = !json[QString("ipVersion")].isNull() && m_ip_version_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_ports_isValid = ::OpenAPI::fromJsonValue(m_ports, json[QString("ports")]);
    m_ports_isSet = !json[QString("ports")].isNull() && m_ports_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_server_tls_policy_isValid = ::OpenAPI::fromJsonValue(m_server_tls_policy, json[QString("serverTlsPolicy")]);
    m_server_tls_policy_isSet = !json[QString("serverTlsPolicy")].isNull() && m_server_tls_policy_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGateway::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGateway::asJsonObject() const {
    QJsonObject obj;
    if (m_addresses.size() > 0) {
        obj.insert(QString("addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_certificate_urls.size() > 0) {
        obj.insert(QString("certificateUrls"), ::OpenAPI::toJsonValue(m_certificate_urls));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_envoy_headers_isSet) {
        obj.insert(QString("envoyHeaders"), ::OpenAPI::toJsonValue(m_envoy_headers));
    }
    if (m_gateway_security_policy_isSet) {
        obj.insert(QString("gatewaySecurityPolicy"), ::OpenAPI::toJsonValue(m_gateway_security_policy));
    }
    if (m_ip_version_isSet) {
        obj.insert(QString("ipVersion"), ::OpenAPI::toJsonValue(m_ip_version));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_ports.size() > 0) {
        obj.insert(QString("ports"), ::OpenAPI::toJsonValue(m_ports));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_server_tls_policy_isSet) {
        obj.insert(QString("serverTlsPolicy"), ::OpenAPI::toJsonValue(m_server_tls_policy));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<QString> OAIGateway::getAddresses() const {
    return m_addresses;
}
void OAIGateway::setAddresses(const QList<QString> &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAIGateway::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAIGateway::is_addresses_Valid() const{
    return m_addresses_isValid;
}

QList<QString> OAIGateway::getCertificateUrls() const {
    return m_certificate_urls;
}
void OAIGateway::setCertificateUrls(const QList<QString> &certificate_urls) {
    m_certificate_urls = certificate_urls;
    m_certificate_urls_isSet = true;
}

bool OAIGateway::is_certificate_urls_Set() const{
    return m_certificate_urls_isSet;
}

bool OAIGateway::is_certificate_urls_Valid() const{
    return m_certificate_urls_isValid;
}

QString OAIGateway::getCreateTime() const {
    return m_create_time;
}
void OAIGateway::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGateway::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGateway::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGateway::getDescription() const {
    return m_description;
}
void OAIGateway::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGateway::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGateway::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGateway::getEnvoyHeaders() const {
    return m_envoy_headers;
}
void OAIGateway::setEnvoyHeaders(const QString &envoy_headers) {
    m_envoy_headers = envoy_headers;
    m_envoy_headers_isSet = true;
}

bool OAIGateway::is_envoy_headers_Set() const{
    return m_envoy_headers_isSet;
}

bool OAIGateway::is_envoy_headers_Valid() const{
    return m_envoy_headers_isValid;
}

QString OAIGateway::getGatewaySecurityPolicy() const {
    return m_gateway_security_policy;
}
void OAIGateway::setGatewaySecurityPolicy(const QString &gateway_security_policy) {
    m_gateway_security_policy = gateway_security_policy;
    m_gateway_security_policy_isSet = true;
}

bool OAIGateway::is_gateway_security_policy_Set() const{
    return m_gateway_security_policy_isSet;
}

bool OAIGateway::is_gateway_security_policy_Valid() const{
    return m_gateway_security_policy_isValid;
}

QString OAIGateway::getIpVersion() const {
    return m_ip_version;
}
void OAIGateway::setIpVersion(const QString &ip_version) {
    m_ip_version = ip_version;
    m_ip_version_isSet = true;
}

bool OAIGateway::is_ip_version_Set() const{
    return m_ip_version_isSet;
}

bool OAIGateway::is_ip_version_Valid() const{
    return m_ip_version_isValid;
}

QMap<QString, QString> OAIGateway::getLabels() const {
    return m_labels;
}
void OAIGateway::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGateway::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGateway::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGateway::getName() const {
    return m_name;
}
void OAIGateway::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGateway::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGateway::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGateway::getNetwork() const {
    return m_network;
}
void OAIGateway::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGateway::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGateway::is_network_Valid() const{
    return m_network_isValid;
}

QList<qint32> OAIGateway::getPorts() const {
    return m_ports;
}
void OAIGateway::setPorts(const QList<qint32> &ports) {
    m_ports = ports;
    m_ports_isSet = true;
}

bool OAIGateway::is_ports_Set() const{
    return m_ports_isSet;
}

bool OAIGateway::is_ports_Valid() const{
    return m_ports_isValid;
}

QString OAIGateway::getScope() const {
    return m_scope;
}
void OAIGateway::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIGateway::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIGateway::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIGateway::getSelfLink() const {
    return m_self_link;
}
void OAIGateway::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIGateway::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIGateway::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIGateway::getServerTlsPolicy() const {
    return m_server_tls_policy;
}
void OAIGateway::setServerTlsPolicy(const QString &server_tls_policy) {
    m_server_tls_policy = server_tls_policy;
    m_server_tls_policy_isSet = true;
}

bool OAIGateway::is_server_tls_policy_Set() const{
    return m_server_tls_policy_isSet;
}

bool OAIGateway::is_server_tls_policy_Valid() const{
    return m_server_tls_policy_isValid;
}

QString OAIGateway::getSubnetwork() const {
    return m_subnetwork;
}
void OAIGateway::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAIGateway::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAIGateway::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

QString OAIGateway::getType() const {
    return m_type;
}
void OAIGateway::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGateway::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGateway::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGateway::getUpdateTime() const {
    return m_update_time;
}
void OAIGateway::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGateway::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGateway::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGateway::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_envoy_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_security_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_tls_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGateway::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
