/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMesh.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMesh::OAIMesh(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMesh::OAIMesh() {
    this->initializeModel();
}

OAIMesh::~OAIMesh() {}

void OAIMesh::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_envoy_headers_isSet = false;
    m_envoy_headers_isValid = false;

    m_interception_port_isSet = false;
    m_interception_port_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIMesh::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMesh::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_envoy_headers_isValid = ::OpenAPI::fromJsonValue(m_envoy_headers, json[QString("envoyHeaders")]);
    m_envoy_headers_isSet = !json[QString("envoyHeaders")].isNull() && m_envoy_headers_isValid;

    m_interception_port_isValid = ::OpenAPI::fromJsonValue(m_interception_port, json[QString("interceptionPort")]);
    m_interception_port_isSet = !json[QString("interceptionPort")].isNull() && m_interception_port_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIMesh::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMesh::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_envoy_headers_isSet) {
        obj.insert(QString("envoyHeaders"), ::OpenAPI::toJsonValue(m_envoy_headers));
    }
    if (m_interception_port_isSet) {
        obj.insert(QString("interceptionPort"), ::OpenAPI::toJsonValue(m_interception_port));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIMesh::getCreateTime() const {
    return m_create_time;
}
void OAIMesh::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMesh::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMesh::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIMesh::getDescription() const {
    return m_description;
}
void OAIMesh::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMesh::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMesh::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMesh::getEnvoyHeaders() const {
    return m_envoy_headers;
}
void OAIMesh::setEnvoyHeaders(const QString &envoy_headers) {
    m_envoy_headers = envoy_headers;
    m_envoy_headers_isSet = true;
}

bool OAIMesh::is_envoy_headers_Set() const{
    return m_envoy_headers_isSet;
}

bool OAIMesh::is_envoy_headers_Valid() const{
    return m_envoy_headers_isValid;
}

qint32 OAIMesh::getInterceptionPort() const {
    return m_interception_port;
}
void OAIMesh::setInterceptionPort(const qint32 &interception_port) {
    m_interception_port = interception_port;
    m_interception_port_isSet = true;
}

bool OAIMesh::is_interception_port_Set() const{
    return m_interception_port_isSet;
}

bool OAIMesh::is_interception_port_Valid() const{
    return m_interception_port_isValid;
}

QMap<QString, QString> OAIMesh::getLabels() const {
    return m_labels;
}
void OAIMesh::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIMesh::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIMesh::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIMesh::getName() const {
    return m_name;
}
void OAIMesh::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMesh::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMesh::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMesh::getSelfLink() const {
    return m_self_link;
}
void OAIMesh::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIMesh::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIMesh::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIMesh::getUpdateTime() const {
    return m_update_time;
}
void OAIMesh::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIMesh::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIMesh::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIMesh::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_envoy_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interception_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMesh::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
