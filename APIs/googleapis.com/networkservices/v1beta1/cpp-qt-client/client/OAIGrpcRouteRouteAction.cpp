/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrpcRouteRouteAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrpcRouteRouteAction::OAIGrpcRouteRouteAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrpcRouteRouteAction::OAIGrpcRouteRouteAction() {
    this->initializeModel();
}

OAIGrpcRouteRouteAction::~OAIGrpcRouteRouteAction() {}

void OAIGrpcRouteRouteAction::initializeModel() {

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_fault_injection_policy_isSet = false;
    m_fault_injection_policy_isValid = false;

    m_idle_timeout_isSet = false;
    m_idle_timeout_isValid = false;

    m_retry_policy_isSet = false;
    m_retry_policy_isValid = false;

    m_stateful_session_affinity_isSet = false;
    m_stateful_session_affinity_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIGrpcRouteRouteAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrpcRouteRouteAction::fromJsonObject(QJsonObject json) {

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_fault_injection_policy_isValid = ::OpenAPI::fromJsonValue(m_fault_injection_policy, json[QString("faultInjectionPolicy")]);
    m_fault_injection_policy_isSet = !json[QString("faultInjectionPolicy")].isNull() && m_fault_injection_policy_isValid;

    m_idle_timeout_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout, json[QString("idleTimeout")]);
    m_idle_timeout_isSet = !json[QString("idleTimeout")].isNull() && m_idle_timeout_isValid;

    m_retry_policy_isValid = ::OpenAPI::fromJsonValue(m_retry_policy, json[QString("retryPolicy")]);
    m_retry_policy_isSet = !json[QString("retryPolicy")].isNull() && m_retry_policy_isValid;

    m_stateful_session_affinity_isValid = ::OpenAPI::fromJsonValue(m_stateful_session_affinity, json[QString("statefulSessionAffinity")]);
    m_stateful_session_affinity_isSet = !json[QString("statefulSessionAffinity")].isNull() && m_stateful_session_affinity_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIGrpcRouteRouteAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrpcRouteRouteAction::asJsonObject() const {
    QJsonObject obj;
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_fault_injection_policy.isSet()) {
        obj.insert(QString("faultInjectionPolicy"), ::OpenAPI::toJsonValue(m_fault_injection_policy));
    }
    if (m_idle_timeout_isSet) {
        obj.insert(QString("idleTimeout"), ::OpenAPI::toJsonValue(m_idle_timeout));
    }
    if (m_retry_policy.isSet()) {
        obj.insert(QString("retryPolicy"), ::OpenAPI::toJsonValue(m_retry_policy));
    }
    if (m_stateful_session_affinity.isSet()) {
        obj.insert(QString("statefulSessionAffinity"), ::OpenAPI::toJsonValue(m_stateful_session_affinity));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QList<OAIGrpcRouteDestination> OAIGrpcRouteRouteAction::getDestinations() const {
    return m_destinations;
}
void OAIGrpcRouteRouteAction::setDestinations(const QList<OAIGrpcRouteDestination> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIGrpcRouteRouteAction::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIGrpcRouteRouteAction::is_destinations_Valid() const{
    return m_destinations_isValid;
}

OAIGrpcRouteFaultInjectionPolicy OAIGrpcRouteRouteAction::getFaultInjectionPolicy() const {
    return m_fault_injection_policy;
}
void OAIGrpcRouteRouteAction::setFaultInjectionPolicy(const OAIGrpcRouteFaultInjectionPolicy &fault_injection_policy) {
    m_fault_injection_policy = fault_injection_policy;
    m_fault_injection_policy_isSet = true;
}

bool OAIGrpcRouteRouteAction::is_fault_injection_policy_Set() const{
    return m_fault_injection_policy_isSet;
}

bool OAIGrpcRouteRouteAction::is_fault_injection_policy_Valid() const{
    return m_fault_injection_policy_isValid;
}

QString OAIGrpcRouteRouteAction::getIdleTimeout() const {
    return m_idle_timeout;
}
void OAIGrpcRouteRouteAction::setIdleTimeout(const QString &idle_timeout) {
    m_idle_timeout = idle_timeout;
    m_idle_timeout_isSet = true;
}

bool OAIGrpcRouteRouteAction::is_idle_timeout_Set() const{
    return m_idle_timeout_isSet;
}

bool OAIGrpcRouteRouteAction::is_idle_timeout_Valid() const{
    return m_idle_timeout_isValid;
}

OAIGrpcRouteRetryPolicy OAIGrpcRouteRouteAction::getRetryPolicy() const {
    return m_retry_policy;
}
void OAIGrpcRouteRouteAction::setRetryPolicy(const OAIGrpcRouteRetryPolicy &retry_policy) {
    m_retry_policy = retry_policy;
    m_retry_policy_isSet = true;
}

bool OAIGrpcRouteRouteAction::is_retry_policy_Set() const{
    return m_retry_policy_isSet;
}

bool OAIGrpcRouteRouteAction::is_retry_policy_Valid() const{
    return m_retry_policy_isValid;
}

OAIGrpcRouteStatefulSessionAffinityPolicy OAIGrpcRouteRouteAction::getStatefulSessionAffinity() const {
    return m_stateful_session_affinity;
}
void OAIGrpcRouteRouteAction::setStatefulSessionAffinity(const OAIGrpcRouteStatefulSessionAffinityPolicy &stateful_session_affinity) {
    m_stateful_session_affinity = stateful_session_affinity;
    m_stateful_session_affinity_isSet = true;
}

bool OAIGrpcRouteRouteAction::is_stateful_session_affinity_Set() const{
    return m_stateful_session_affinity_isSet;
}

bool OAIGrpcRouteRouteAction::is_stateful_session_affinity_Valid() const{
    return m_stateful_session_affinity_isValid;
}

QString OAIGrpcRouteRouteAction::getTimeout() const {
    return m_timeout;
}
void OAIGrpcRouteRouteAction::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIGrpcRouteRouteAction::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIGrpcRouteRouteAction::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIGrpcRouteRouteAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_injection_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stateful_session_affinity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrpcRouteRouteAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
