/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILbTrafficExtension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILbTrafficExtension::OAILbTrafficExtension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILbTrafficExtension::OAILbTrafficExtension() {
    this->initializeModel();
}

OAILbTrafficExtension::~OAILbTrafficExtension() {}

void OAILbTrafficExtension::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_extension_chains_isSet = false;
    m_extension_chains_isValid = false;

    m_forwarding_rules_isSet = false;
    m_forwarding_rules_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_load_balancing_scheme_isSet = false;
    m_load_balancing_scheme_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAILbTrafficExtension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILbTrafficExtension::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_extension_chains_isValid = ::OpenAPI::fromJsonValue(m_extension_chains, json[QString("extensionChains")]);
    m_extension_chains_isSet = !json[QString("extensionChains")].isNull() && m_extension_chains_isValid;

    m_forwarding_rules_isValid = ::OpenAPI::fromJsonValue(m_forwarding_rules, json[QString("forwardingRules")]);
    m_forwarding_rules_isSet = !json[QString("forwardingRules")].isNull() && m_forwarding_rules_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_load_balancing_scheme_isValid = ::OpenAPI::fromJsonValue(m_load_balancing_scheme, json[QString("loadBalancingScheme")]);
    m_load_balancing_scheme_isSet = !json[QString("loadBalancingScheme")].isNull() && m_load_balancing_scheme_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAILbTrafficExtension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILbTrafficExtension::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_extension_chains.size() > 0) {
        obj.insert(QString("extensionChains"), ::OpenAPI::toJsonValue(m_extension_chains));
    }
    if (m_forwarding_rules.size() > 0) {
        obj.insert(QString("forwardingRules"), ::OpenAPI::toJsonValue(m_forwarding_rules));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_load_balancing_scheme_isSet) {
        obj.insert(QString("loadBalancingScheme"), ::OpenAPI::toJsonValue(m_load_balancing_scheme));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAILbTrafficExtension::getCreateTime() const {
    return m_create_time;
}
void OAILbTrafficExtension::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAILbTrafficExtension::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAILbTrafficExtension::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAILbTrafficExtension::getDescription() const {
    return m_description;
}
void OAILbTrafficExtension::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILbTrafficExtension::is_description_Set() const{
    return m_description_isSet;
}

bool OAILbTrafficExtension::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIExtensionChain> OAILbTrafficExtension::getExtensionChains() const {
    return m_extension_chains;
}
void OAILbTrafficExtension::setExtensionChains(const QList<OAIExtensionChain> &extension_chains) {
    m_extension_chains = extension_chains;
    m_extension_chains_isSet = true;
}

bool OAILbTrafficExtension::is_extension_chains_Set() const{
    return m_extension_chains_isSet;
}

bool OAILbTrafficExtension::is_extension_chains_Valid() const{
    return m_extension_chains_isValid;
}

QList<QString> OAILbTrafficExtension::getForwardingRules() const {
    return m_forwarding_rules;
}
void OAILbTrafficExtension::setForwardingRules(const QList<QString> &forwarding_rules) {
    m_forwarding_rules = forwarding_rules;
    m_forwarding_rules_isSet = true;
}

bool OAILbTrafficExtension::is_forwarding_rules_Set() const{
    return m_forwarding_rules_isSet;
}

bool OAILbTrafficExtension::is_forwarding_rules_Valid() const{
    return m_forwarding_rules_isValid;
}

QMap<QString, QString> OAILbTrafficExtension::getLabels() const {
    return m_labels;
}
void OAILbTrafficExtension::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAILbTrafficExtension::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAILbTrafficExtension::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAILbTrafficExtension::getLoadBalancingScheme() const {
    return m_load_balancing_scheme;
}
void OAILbTrafficExtension::setLoadBalancingScheme(const QString &load_balancing_scheme) {
    m_load_balancing_scheme = load_balancing_scheme;
    m_load_balancing_scheme_isSet = true;
}

bool OAILbTrafficExtension::is_load_balancing_scheme_Set() const{
    return m_load_balancing_scheme_isSet;
}

bool OAILbTrafficExtension::is_load_balancing_scheme_Valid() const{
    return m_load_balancing_scheme_isValid;
}

QString OAILbTrafficExtension::getName() const {
    return m_name;
}
void OAILbTrafficExtension::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILbTrafficExtension::is_name_Set() const{
    return m_name_isSet;
}

bool OAILbTrafficExtension::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILbTrafficExtension::getUpdateTime() const {
    return m_update_time;
}
void OAILbTrafficExtension::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAILbTrafficExtension::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAILbTrafficExtension::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAILbTrafficExtension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_chains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancing_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILbTrafficExtension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
