/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGrpcRouteRouteAction.h
 *
 * Specifies how to route matched traffic.
 */

#ifndef OAIGrpcRouteRouteAction_H
#define OAIGrpcRouteRouteAction_H

#include <QJsonObject>

#include "OAIGrpcRouteDestination.h"
#include "OAIGrpcRouteFaultInjectionPolicy.h"
#include "OAIGrpcRouteRetryPolicy.h"
#include "OAIGrpcRouteStatefulSessionAffinityPolicy.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGrpcRouteDestination;
class OAIGrpcRouteFaultInjectionPolicy;
class OAIGrpcRouteRetryPolicy;
class OAIGrpcRouteStatefulSessionAffinityPolicy;

class OAIGrpcRouteRouteAction : public OAIObject {
public:
    OAIGrpcRouteRouteAction();
    OAIGrpcRouteRouteAction(QString json);
    ~OAIGrpcRouteRouteAction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIGrpcRouteDestination> getDestinations() const;
    void setDestinations(const QList<OAIGrpcRouteDestination> &destinations);
    bool is_destinations_Set() const;
    bool is_destinations_Valid() const;

    OAIGrpcRouteFaultInjectionPolicy getFaultInjectionPolicy() const;
    void setFaultInjectionPolicy(const OAIGrpcRouteFaultInjectionPolicy &fault_injection_policy);
    bool is_fault_injection_policy_Set() const;
    bool is_fault_injection_policy_Valid() const;

    QString getIdleTimeout() const;
    void setIdleTimeout(const QString &idle_timeout);
    bool is_idle_timeout_Set() const;
    bool is_idle_timeout_Valid() const;

    OAIGrpcRouteRetryPolicy getRetryPolicy() const;
    void setRetryPolicy(const OAIGrpcRouteRetryPolicy &retry_policy);
    bool is_retry_policy_Set() const;
    bool is_retry_policy_Valid() const;

    OAIGrpcRouteStatefulSessionAffinityPolicy getStatefulSessionAffinity() const;
    void setStatefulSessionAffinity(const OAIGrpcRouteStatefulSessionAffinityPolicy &stateful_session_affinity);
    bool is_stateful_session_affinity_Set() const;
    bool is_stateful_session_affinity_Valid() const;

    QString getTimeout() const;
    void setTimeout(const QString &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIGrpcRouteDestination> m_destinations;
    bool m_destinations_isSet;
    bool m_destinations_isValid;

    OAIGrpcRouteFaultInjectionPolicy m_fault_injection_policy;
    bool m_fault_injection_policy_isSet;
    bool m_fault_injection_policy_isValid;

    QString m_idle_timeout;
    bool m_idle_timeout_isSet;
    bool m_idle_timeout_isValid;

    OAIGrpcRouteRetryPolicy m_retry_policy;
    bool m_retry_policy_isSet;
    bool m_retry_policy_isValid;

    OAIGrpcRouteStatefulSessionAffinityPolicy m_stateful_session_affinity;
    bool m_stateful_session_affinity_isSet;
    bool m_stateful_session_affinity_isValid;

    QString m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGrpcRouteRouteAction)

#endif // OAIGrpcRouteRouteAction_H
