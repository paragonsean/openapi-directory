/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrpcRouteFaultInjectionPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrpcRouteFaultInjectionPolicy::OAIGrpcRouteFaultInjectionPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrpcRouteFaultInjectionPolicy::OAIGrpcRouteFaultInjectionPolicy() {
    this->initializeModel();
}

OAIGrpcRouteFaultInjectionPolicy::~OAIGrpcRouteFaultInjectionPolicy() {}

void OAIGrpcRouteFaultInjectionPolicy::initializeModel() {

    m_abort_isSet = false;
    m_abort_isValid = false;

    m_delay_isSet = false;
    m_delay_isValid = false;
}

void OAIGrpcRouteFaultInjectionPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrpcRouteFaultInjectionPolicy::fromJsonObject(QJsonObject json) {

    m_abort_isValid = ::OpenAPI::fromJsonValue(m_abort, json[QString("abort")]);
    m_abort_isSet = !json[QString("abort")].isNull() && m_abort_isValid;

    m_delay_isValid = ::OpenAPI::fromJsonValue(m_delay, json[QString("delay")]);
    m_delay_isSet = !json[QString("delay")].isNull() && m_delay_isValid;
}

QString OAIGrpcRouteFaultInjectionPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrpcRouteFaultInjectionPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_abort.isSet()) {
        obj.insert(QString("abort"), ::OpenAPI::toJsonValue(m_abort));
    }
    if (m_delay.isSet()) {
        obj.insert(QString("delay"), ::OpenAPI::toJsonValue(m_delay));
    }
    return obj;
}

OAIGrpcRouteFaultInjectionPolicyAbort OAIGrpcRouteFaultInjectionPolicy::getAbort() const {
    return m_abort;
}
void OAIGrpcRouteFaultInjectionPolicy::setAbort(const OAIGrpcRouteFaultInjectionPolicyAbort &abort) {
    m_abort = abort;
    m_abort_isSet = true;
}

bool OAIGrpcRouteFaultInjectionPolicy::is_abort_Set() const{
    return m_abort_isSet;
}

bool OAIGrpcRouteFaultInjectionPolicy::is_abort_Valid() const{
    return m_abort_isValid;
}

OAIGrpcRouteFaultInjectionPolicyDelay OAIGrpcRouteFaultInjectionPolicy::getDelay() const {
    return m_delay;
}
void OAIGrpcRouteFaultInjectionPolicy::setDelay(const OAIGrpcRouteFaultInjectionPolicyDelay &delay) {
    m_delay = delay;
    m_delay_isSet = true;
}

bool OAIGrpcRouteFaultInjectionPolicy::is_delay_Set() const{
    return m_delay_isSet;
}

bool OAIGrpcRouteFaultInjectionPolicy::is_delay_Valid() const{
    return m_delay_isValid;
}

bool OAIGrpcRouteFaultInjectionPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrpcRouteFaultInjectionPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
