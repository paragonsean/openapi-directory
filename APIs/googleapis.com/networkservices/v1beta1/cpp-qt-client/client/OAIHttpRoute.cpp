/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRoute::OAIHttpRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRoute::OAIHttpRoute() {
    this->initializeModel();
}

OAIHttpRoute::~OAIHttpRoute() {}

void OAIHttpRoute::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_gateways_isSet = false;
    m_gateways_isValid = false;

    m_hostnames_isSet = false;
    m_hostnames_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_meshes_isSet = false;
    m_meshes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIHttpRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRoute::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_gateways_isValid = ::OpenAPI::fromJsonValue(m_gateways, json[QString("gateways")]);
    m_gateways_isSet = !json[QString("gateways")].isNull() && m_gateways_isValid;

    m_hostnames_isValid = ::OpenAPI::fromJsonValue(m_hostnames, json[QString("hostnames")]);
    m_hostnames_isSet = !json[QString("hostnames")].isNull() && m_hostnames_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_meshes_isValid = ::OpenAPI::fromJsonValue(m_meshes, json[QString("meshes")]);
    m_meshes_isSet = !json[QString("meshes")].isNull() && m_meshes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIHttpRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_gateways.size() > 0) {
        obj.insert(QString("gateways"), ::OpenAPI::toJsonValue(m_gateways));
    }
    if (m_hostnames.size() > 0) {
        obj.insert(QString("hostnames"), ::OpenAPI::toJsonValue(m_hostnames));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_meshes.size() > 0) {
        obj.insert(QString("meshes"), ::OpenAPI::toJsonValue(m_meshes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIHttpRoute::getCreateTime() const {
    return m_create_time;
}
void OAIHttpRoute::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIHttpRoute::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIHttpRoute::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIHttpRoute::getDescription() const {
    return m_description;
}
void OAIHttpRoute::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHttpRoute::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHttpRoute::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIHttpRoute::getGateways() const {
    return m_gateways;
}
void OAIHttpRoute::setGateways(const QList<QString> &gateways) {
    m_gateways = gateways;
    m_gateways_isSet = true;
}

bool OAIHttpRoute::is_gateways_Set() const{
    return m_gateways_isSet;
}

bool OAIHttpRoute::is_gateways_Valid() const{
    return m_gateways_isValid;
}

QList<QString> OAIHttpRoute::getHostnames() const {
    return m_hostnames;
}
void OAIHttpRoute::setHostnames(const QList<QString> &hostnames) {
    m_hostnames = hostnames;
    m_hostnames_isSet = true;
}

bool OAIHttpRoute::is_hostnames_Set() const{
    return m_hostnames_isSet;
}

bool OAIHttpRoute::is_hostnames_Valid() const{
    return m_hostnames_isValid;
}

QMap<QString, QString> OAIHttpRoute::getLabels() const {
    return m_labels;
}
void OAIHttpRoute::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIHttpRoute::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIHttpRoute::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<QString> OAIHttpRoute::getMeshes() const {
    return m_meshes;
}
void OAIHttpRoute::setMeshes(const QList<QString> &meshes) {
    m_meshes = meshes;
    m_meshes_isSet = true;
}

bool OAIHttpRoute::is_meshes_Set() const{
    return m_meshes_isSet;
}

bool OAIHttpRoute::is_meshes_Valid() const{
    return m_meshes_isValid;
}

QString OAIHttpRoute::getName() const {
    return m_name;
}
void OAIHttpRoute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHttpRoute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHttpRoute::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIHttpRouteRouteRule> OAIHttpRoute::getRules() const {
    return m_rules;
}
void OAIHttpRoute::setRules(const QList<OAIHttpRouteRouteRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIHttpRoute::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIHttpRoute::is_rules_Valid() const{
    return m_rules_isValid;
}

QString OAIHttpRoute::getSelfLink() const {
    return m_self_link;
}
void OAIHttpRoute::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIHttpRoute::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIHttpRoute::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIHttpRoute::getUpdateTime() const {
    return m_update_time;
}
void OAIHttpRoute::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIHttpRoute::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIHttpRoute::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIHttpRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateways.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostnames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meshes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
