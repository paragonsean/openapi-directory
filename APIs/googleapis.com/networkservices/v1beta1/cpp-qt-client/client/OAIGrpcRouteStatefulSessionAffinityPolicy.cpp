/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrpcRouteStatefulSessionAffinityPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrpcRouteStatefulSessionAffinityPolicy::OAIGrpcRouteStatefulSessionAffinityPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrpcRouteStatefulSessionAffinityPolicy::OAIGrpcRouteStatefulSessionAffinityPolicy() {
    this->initializeModel();
}

OAIGrpcRouteStatefulSessionAffinityPolicy::~OAIGrpcRouteStatefulSessionAffinityPolicy() {}

void OAIGrpcRouteStatefulSessionAffinityPolicy::initializeModel() {

    m_cookie_ttl_isSet = false;
    m_cookie_ttl_isValid = false;
}

void OAIGrpcRouteStatefulSessionAffinityPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrpcRouteStatefulSessionAffinityPolicy::fromJsonObject(QJsonObject json) {

    m_cookie_ttl_isValid = ::OpenAPI::fromJsonValue(m_cookie_ttl, json[QString("cookieTtl")]);
    m_cookie_ttl_isSet = !json[QString("cookieTtl")].isNull() && m_cookie_ttl_isValid;
}

QString OAIGrpcRouteStatefulSessionAffinityPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrpcRouteStatefulSessionAffinityPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_cookie_ttl_isSet) {
        obj.insert(QString("cookieTtl"), ::OpenAPI::toJsonValue(m_cookie_ttl));
    }
    return obj;
}

QString OAIGrpcRouteStatefulSessionAffinityPolicy::getCookieTtl() const {
    return m_cookie_ttl;
}
void OAIGrpcRouteStatefulSessionAffinityPolicy::setCookieTtl(const QString &cookie_ttl) {
    m_cookie_ttl = cookie_ttl;
    m_cookie_ttl_isSet = true;
}

bool OAIGrpcRouteStatefulSessionAffinityPolicy::is_cookie_ttl_Set() const{
    return m_cookie_ttl_isSet;
}

bool OAIGrpcRouteStatefulSessionAffinityPolicy::is_cookie_ttl_Valid() const{
    return m_cookie_ttl_isValid;
}

bool OAIGrpcRouteStatefulSessionAffinityPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cookie_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrpcRouteStatefulSessionAffinityPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
