/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRouteHeaderMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRouteHeaderMatch::OAIHttpRouteHeaderMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRouteHeaderMatch::OAIHttpRouteHeaderMatch() {
    this->initializeModel();
}

OAIHttpRouteHeaderMatch::~OAIHttpRouteHeaderMatch() {}

void OAIHttpRouteHeaderMatch::initializeModel() {

    m_exact_match_isSet = false;
    m_exact_match_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_invert_match_isSet = false;
    m_invert_match_isValid = false;

    m_prefix_match_isSet = false;
    m_prefix_match_isValid = false;

    m_present_match_isSet = false;
    m_present_match_isValid = false;

    m_range_match_isSet = false;
    m_range_match_isValid = false;

    m_regex_match_isSet = false;
    m_regex_match_isValid = false;

    m_suffix_match_isSet = false;
    m_suffix_match_isValid = false;
}

void OAIHttpRouteHeaderMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRouteHeaderMatch::fromJsonObject(QJsonObject json) {

    m_exact_match_isValid = ::OpenAPI::fromJsonValue(m_exact_match, json[QString("exactMatch")]);
    m_exact_match_isSet = !json[QString("exactMatch")].isNull() && m_exact_match_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_invert_match_isValid = ::OpenAPI::fromJsonValue(m_invert_match, json[QString("invertMatch")]);
    m_invert_match_isSet = !json[QString("invertMatch")].isNull() && m_invert_match_isValid;

    m_prefix_match_isValid = ::OpenAPI::fromJsonValue(m_prefix_match, json[QString("prefixMatch")]);
    m_prefix_match_isSet = !json[QString("prefixMatch")].isNull() && m_prefix_match_isValid;

    m_present_match_isValid = ::OpenAPI::fromJsonValue(m_present_match, json[QString("presentMatch")]);
    m_present_match_isSet = !json[QString("presentMatch")].isNull() && m_present_match_isValid;

    m_range_match_isValid = ::OpenAPI::fromJsonValue(m_range_match, json[QString("rangeMatch")]);
    m_range_match_isSet = !json[QString("rangeMatch")].isNull() && m_range_match_isValid;

    m_regex_match_isValid = ::OpenAPI::fromJsonValue(m_regex_match, json[QString("regexMatch")]);
    m_regex_match_isSet = !json[QString("regexMatch")].isNull() && m_regex_match_isValid;

    m_suffix_match_isValid = ::OpenAPI::fromJsonValue(m_suffix_match, json[QString("suffixMatch")]);
    m_suffix_match_isSet = !json[QString("suffixMatch")].isNull() && m_suffix_match_isValid;
}

QString OAIHttpRouteHeaderMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRouteHeaderMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_exact_match_isSet) {
        obj.insert(QString("exactMatch"), ::OpenAPI::toJsonValue(m_exact_match));
    }
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_invert_match_isSet) {
        obj.insert(QString("invertMatch"), ::OpenAPI::toJsonValue(m_invert_match));
    }
    if (m_prefix_match_isSet) {
        obj.insert(QString("prefixMatch"), ::OpenAPI::toJsonValue(m_prefix_match));
    }
    if (m_present_match_isSet) {
        obj.insert(QString("presentMatch"), ::OpenAPI::toJsonValue(m_present_match));
    }
    if (m_range_match.isSet()) {
        obj.insert(QString("rangeMatch"), ::OpenAPI::toJsonValue(m_range_match));
    }
    if (m_regex_match_isSet) {
        obj.insert(QString("regexMatch"), ::OpenAPI::toJsonValue(m_regex_match));
    }
    if (m_suffix_match_isSet) {
        obj.insert(QString("suffixMatch"), ::OpenAPI::toJsonValue(m_suffix_match));
    }
    return obj;
}

QString OAIHttpRouteHeaderMatch::getExactMatch() const {
    return m_exact_match;
}
void OAIHttpRouteHeaderMatch::setExactMatch(const QString &exact_match) {
    m_exact_match = exact_match;
    m_exact_match_isSet = true;
}

bool OAIHttpRouteHeaderMatch::is_exact_match_Set() const{
    return m_exact_match_isSet;
}

bool OAIHttpRouteHeaderMatch::is_exact_match_Valid() const{
    return m_exact_match_isValid;
}

QString OAIHttpRouteHeaderMatch::getHeader() const {
    return m_header;
}
void OAIHttpRouteHeaderMatch::setHeader(const QString &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIHttpRouteHeaderMatch::is_header_Set() const{
    return m_header_isSet;
}

bool OAIHttpRouteHeaderMatch::is_header_Valid() const{
    return m_header_isValid;
}

bool OAIHttpRouteHeaderMatch::isInvertMatch() const {
    return m_invert_match;
}
void OAIHttpRouteHeaderMatch::setInvertMatch(const bool &invert_match) {
    m_invert_match = invert_match;
    m_invert_match_isSet = true;
}

bool OAIHttpRouteHeaderMatch::is_invert_match_Set() const{
    return m_invert_match_isSet;
}

bool OAIHttpRouteHeaderMatch::is_invert_match_Valid() const{
    return m_invert_match_isValid;
}

QString OAIHttpRouteHeaderMatch::getPrefixMatch() const {
    return m_prefix_match;
}
void OAIHttpRouteHeaderMatch::setPrefixMatch(const QString &prefix_match) {
    m_prefix_match = prefix_match;
    m_prefix_match_isSet = true;
}

bool OAIHttpRouteHeaderMatch::is_prefix_match_Set() const{
    return m_prefix_match_isSet;
}

bool OAIHttpRouteHeaderMatch::is_prefix_match_Valid() const{
    return m_prefix_match_isValid;
}

bool OAIHttpRouteHeaderMatch::isPresentMatch() const {
    return m_present_match;
}
void OAIHttpRouteHeaderMatch::setPresentMatch(const bool &present_match) {
    m_present_match = present_match;
    m_present_match_isSet = true;
}

bool OAIHttpRouteHeaderMatch::is_present_match_Set() const{
    return m_present_match_isSet;
}

bool OAIHttpRouteHeaderMatch::is_present_match_Valid() const{
    return m_present_match_isValid;
}

OAIHttpRouteHeaderMatchIntegerRange OAIHttpRouteHeaderMatch::getRangeMatch() const {
    return m_range_match;
}
void OAIHttpRouteHeaderMatch::setRangeMatch(const OAIHttpRouteHeaderMatchIntegerRange &range_match) {
    m_range_match = range_match;
    m_range_match_isSet = true;
}

bool OAIHttpRouteHeaderMatch::is_range_match_Set() const{
    return m_range_match_isSet;
}

bool OAIHttpRouteHeaderMatch::is_range_match_Valid() const{
    return m_range_match_isValid;
}

QString OAIHttpRouteHeaderMatch::getRegexMatch() const {
    return m_regex_match;
}
void OAIHttpRouteHeaderMatch::setRegexMatch(const QString &regex_match) {
    m_regex_match = regex_match;
    m_regex_match_isSet = true;
}

bool OAIHttpRouteHeaderMatch::is_regex_match_Set() const{
    return m_regex_match_isSet;
}

bool OAIHttpRouteHeaderMatch::is_regex_match_Valid() const{
    return m_regex_match_isValid;
}

QString OAIHttpRouteHeaderMatch::getSuffixMatch() const {
    return m_suffix_match;
}
void OAIHttpRouteHeaderMatch::setSuffixMatch(const QString &suffix_match) {
    m_suffix_match = suffix_match;
    m_suffix_match_isSet = true;
}

bool OAIHttpRouteHeaderMatch::is_suffix_match_Set() const{
    return m_suffix_match_isSet;
}

bool OAIHttpRouteHeaderMatch::is_suffix_match_Valid() const{
    return m_suffix_match_isValid;
}

bool OAIHttpRouteHeaderMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exact_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invert_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_present_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_match_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRouteHeaderMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
