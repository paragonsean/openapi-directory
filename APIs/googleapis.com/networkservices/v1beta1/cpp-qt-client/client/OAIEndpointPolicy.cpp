/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointPolicy::OAIEndpointPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointPolicy::OAIEndpointPolicy() {
    this->initializeModel();
}

OAIEndpointPolicy::~OAIEndpointPolicy() {}

void OAIEndpointPolicy::initializeModel() {

    m_authorization_policy_isSet = false;
    m_authorization_policy_isValid = false;

    m_client_tls_policy_isSet = false;
    m_client_tls_policy_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_matcher_isSet = false;
    m_endpoint_matcher_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_server_tls_policy_isSet = false;
    m_server_tls_policy_isValid = false;

    m_traffic_port_selector_isSet = false;
    m_traffic_port_selector_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIEndpointPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointPolicy::fromJsonObject(QJsonObject json) {

    m_authorization_policy_isValid = ::OpenAPI::fromJsonValue(m_authorization_policy, json[QString("authorizationPolicy")]);
    m_authorization_policy_isSet = !json[QString("authorizationPolicy")].isNull() && m_authorization_policy_isValid;

    m_client_tls_policy_isValid = ::OpenAPI::fromJsonValue(m_client_tls_policy, json[QString("clientTlsPolicy")]);
    m_client_tls_policy_isSet = !json[QString("clientTlsPolicy")].isNull() && m_client_tls_policy_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endpoint_matcher_isValid = ::OpenAPI::fromJsonValue(m_endpoint_matcher, json[QString("endpointMatcher")]);
    m_endpoint_matcher_isSet = !json[QString("endpointMatcher")].isNull() && m_endpoint_matcher_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_server_tls_policy_isValid = ::OpenAPI::fromJsonValue(m_server_tls_policy, json[QString("serverTlsPolicy")]);
    m_server_tls_policy_isSet = !json[QString("serverTlsPolicy")].isNull() && m_server_tls_policy_isValid;

    m_traffic_port_selector_isValid = ::OpenAPI::fromJsonValue(m_traffic_port_selector, json[QString("trafficPortSelector")]);
    m_traffic_port_selector_isSet = !json[QString("trafficPortSelector")].isNull() && m_traffic_port_selector_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIEndpointPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_policy_isSet) {
        obj.insert(QString("authorizationPolicy"), ::OpenAPI::toJsonValue(m_authorization_policy));
    }
    if (m_client_tls_policy_isSet) {
        obj.insert(QString("clientTlsPolicy"), ::OpenAPI::toJsonValue(m_client_tls_policy));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_matcher.isSet()) {
        obj.insert(QString("endpointMatcher"), ::OpenAPI::toJsonValue(m_endpoint_matcher));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_server_tls_policy_isSet) {
        obj.insert(QString("serverTlsPolicy"), ::OpenAPI::toJsonValue(m_server_tls_policy));
    }
    if (m_traffic_port_selector.isSet()) {
        obj.insert(QString("trafficPortSelector"), ::OpenAPI::toJsonValue(m_traffic_port_selector));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIEndpointPolicy::getAuthorizationPolicy() const {
    return m_authorization_policy;
}
void OAIEndpointPolicy::setAuthorizationPolicy(const QString &authorization_policy) {
    m_authorization_policy = authorization_policy;
    m_authorization_policy_isSet = true;
}

bool OAIEndpointPolicy::is_authorization_policy_Set() const{
    return m_authorization_policy_isSet;
}

bool OAIEndpointPolicy::is_authorization_policy_Valid() const{
    return m_authorization_policy_isValid;
}

QString OAIEndpointPolicy::getClientTlsPolicy() const {
    return m_client_tls_policy;
}
void OAIEndpointPolicy::setClientTlsPolicy(const QString &client_tls_policy) {
    m_client_tls_policy = client_tls_policy;
    m_client_tls_policy_isSet = true;
}

bool OAIEndpointPolicy::is_client_tls_policy_Set() const{
    return m_client_tls_policy_isSet;
}

bool OAIEndpointPolicy::is_client_tls_policy_Valid() const{
    return m_client_tls_policy_isValid;
}

QString OAIEndpointPolicy::getCreateTime() const {
    return m_create_time;
}
void OAIEndpointPolicy::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIEndpointPolicy::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIEndpointPolicy::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIEndpointPolicy::getDescription() const {
    return m_description;
}
void OAIEndpointPolicy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEndpointPolicy::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEndpointPolicy::is_description_Valid() const{
    return m_description_isValid;
}

OAIEndpointMatcher OAIEndpointPolicy::getEndpointMatcher() const {
    return m_endpoint_matcher;
}
void OAIEndpointPolicy::setEndpointMatcher(const OAIEndpointMatcher &endpoint_matcher) {
    m_endpoint_matcher = endpoint_matcher;
    m_endpoint_matcher_isSet = true;
}

bool OAIEndpointPolicy::is_endpoint_matcher_Set() const{
    return m_endpoint_matcher_isSet;
}

bool OAIEndpointPolicy::is_endpoint_matcher_Valid() const{
    return m_endpoint_matcher_isValid;
}

QMap<QString, QString> OAIEndpointPolicy::getLabels() const {
    return m_labels;
}
void OAIEndpointPolicy::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIEndpointPolicy::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIEndpointPolicy::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIEndpointPolicy::getName() const {
    return m_name;
}
void OAIEndpointPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEndpointPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEndpointPolicy::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEndpointPolicy::getServerTlsPolicy() const {
    return m_server_tls_policy;
}
void OAIEndpointPolicy::setServerTlsPolicy(const QString &server_tls_policy) {
    m_server_tls_policy = server_tls_policy;
    m_server_tls_policy_isSet = true;
}

bool OAIEndpointPolicy::is_server_tls_policy_Set() const{
    return m_server_tls_policy_isSet;
}

bool OAIEndpointPolicy::is_server_tls_policy_Valid() const{
    return m_server_tls_policy_isValid;
}

OAITrafficPortSelector OAIEndpointPolicy::getTrafficPortSelector() const {
    return m_traffic_port_selector;
}
void OAIEndpointPolicy::setTrafficPortSelector(const OAITrafficPortSelector &traffic_port_selector) {
    m_traffic_port_selector = traffic_port_selector;
    m_traffic_port_selector_isSet = true;
}

bool OAIEndpointPolicy::is_traffic_port_selector_Set() const{
    return m_traffic_port_selector_isSet;
}

bool OAIEndpointPolicy::is_traffic_port_selector_Valid() const{
    return m_traffic_port_selector_isValid;
}

QString OAIEndpointPolicy::getType() const {
    return m_type;
}
void OAIEndpointPolicy::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEndpointPolicy::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEndpointPolicy::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIEndpointPolicy::getUpdateTime() const {
    return m_update_time;
}
void OAIEndpointPolicy::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIEndpointPolicy::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIEndpointPolicy::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIEndpointPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_tls_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_matcher.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_tls_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_port_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
