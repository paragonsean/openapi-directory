/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrpcRouteRetryPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrpcRouteRetryPolicy::OAIGrpcRouteRetryPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrpcRouteRetryPolicy::OAIGrpcRouteRetryPolicy() {
    this->initializeModel();
}

OAIGrpcRouteRetryPolicy::~OAIGrpcRouteRetryPolicy() {}

void OAIGrpcRouteRetryPolicy::initializeModel() {

    m_num_retries_isSet = false;
    m_num_retries_isValid = false;

    m_retry_conditions_isSet = false;
    m_retry_conditions_isValid = false;
}

void OAIGrpcRouteRetryPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrpcRouteRetryPolicy::fromJsonObject(QJsonObject json) {

    m_num_retries_isValid = ::OpenAPI::fromJsonValue(m_num_retries, json[QString("numRetries")]);
    m_num_retries_isSet = !json[QString("numRetries")].isNull() && m_num_retries_isValid;

    m_retry_conditions_isValid = ::OpenAPI::fromJsonValue(m_retry_conditions, json[QString("retryConditions")]);
    m_retry_conditions_isSet = !json[QString("retryConditions")].isNull() && m_retry_conditions_isValid;
}

QString OAIGrpcRouteRetryPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrpcRouteRetryPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_num_retries_isSet) {
        obj.insert(QString("numRetries"), ::OpenAPI::toJsonValue(m_num_retries));
    }
    if (m_retry_conditions.size() > 0) {
        obj.insert(QString("retryConditions"), ::OpenAPI::toJsonValue(m_retry_conditions));
    }
    return obj;
}

qint32 OAIGrpcRouteRetryPolicy::getNumRetries() const {
    return m_num_retries;
}
void OAIGrpcRouteRetryPolicy::setNumRetries(const qint32 &num_retries) {
    m_num_retries = num_retries;
    m_num_retries_isSet = true;
}

bool OAIGrpcRouteRetryPolicy::is_num_retries_Set() const{
    return m_num_retries_isSet;
}

bool OAIGrpcRouteRetryPolicy::is_num_retries_Valid() const{
    return m_num_retries_isValid;
}

QList<QString> OAIGrpcRouteRetryPolicy::getRetryConditions() const {
    return m_retry_conditions;
}
void OAIGrpcRouteRetryPolicy::setRetryConditions(const QList<QString> &retry_conditions) {
    m_retry_conditions = retry_conditions;
    m_retry_conditions_isSet = true;
}

bool OAIGrpcRouteRetryPolicy::is_retry_conditions_Set() const{
    return m_retry_conditions_isSet;
}

bool OAIGrpcRouteRetryPolicy::is_retry_conditions_Valid() const{
    return m_retry_conditions_isValid;
}

bool OAIGrpcRouteRetryPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_num_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrpcRouteRetryPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
