/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITlsRouteRouteMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITlsRouteRouteMatch::OAITlsRouteRouteMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITlsRouteRouteMatch::OAITlsRouteRouteMatch() {
    this->initializeModel();
}

OAITlsRouteRouteMatch::~OAITlsRouteRouteMatch() {}

void OAITlsRouteRouteMatch::initializeModel() {

    m_alpn_isSet = false;
    m_alpn_isValid = false;

    m_sni_host_isSet = false;
    m_sni_host_isValid = false;
}

void OAITlsRouteRouteMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITlsRouteRouteMatch::fromJsonObject(QJsonObject json) {

    m_alpn_isValid = ::OpenAPI::fromJsonValue(m_alpn, json[QString("alpn")]);
    m_alpn_isSet = !json[QString("alpn")].isNull() && m_alpn_isValid;

    m_sni_host_isValid = ::OpenAPI::fromJsonValue(m_sni_host, json[QString("sniHost")]);
    m_sni_host_isSet = !json[QString("sniHost")].isNull() && m_sni_host_isValid;
}

QString OAITlsRouteRouteMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITlsRouteRouteMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_alpn.size() > 0) {
        obj.insert(QString("alpn"), ::OpenAPI::toJsonValue(m_alpn));
    }
    if (m_sni_host.size() > 0) {
        obj.insert(QString("sniHost"), ::OpenAPI::toJsonValue(m_sni_host));
    }
    return obj;
}

QList<QString> OAITlsRouteRouteMatch::getAlpn() const {
    return m_alpn;
}
void OAITlsRouteRouteMatch::setAlpn(const QList<QString> &alpn) {
    m_alpn = alpn;
    m_alpn_isSet = true;
}

bool OAITlsRouteRouteMatch::is_alpn_Set() const{
    return m_alpn_isSet;
}

bool OAITlsRouteRouteMatch::is_alpn_Valid() const{
    return m_alpn_isValid;
}

QList<QString> OAITlsRouteRouteMatch::getSniHost() const {
    return m_sni_host;
}
void OAITlsRouteRouteMatch::setSniHost(const QList<QString> &sni_host) {
    m_sni_host = sni_host;
    m_sni_host_isSet = true;
}

bool OAITlsRouteRouteMatch::is_sni_host_Set() const{
    return m_sni_host_isSet;
}

bool OAITlsRouteRouteMatch::is_sni_host_Valid() const{
    return m_sni_host_isValid;
}

bool OAITlsRouteRouteMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alpn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sni_host.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITlsRouteRouteMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
