/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRouteQueryParameterMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRouteQueryParameterMatch::OAIHttpRouteQueryParameterMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRouteQueryParameterMatch::OAIHttpRouteQueryParameterMatch() {
    this->initializeModel();
}

OAIHttpRouteQueryParameterMatch::~OAIHttpRouteQueryParameterMatch() {}

void OAIHttpRouteQueryParameterMatch::initializeModel() {

    m_exact_match_isSet = false;
    m_exact_match_isValid = false;

    m_present_match_isSet = false;
    m_present_match_isValid = false;

    m_query_parameter_isSet = false;
    m_query_parameter_isValid = false;

    m_regex_match_isSet = false;
    m_regex_match_isValid = false;
}

void OAIHttpRouteQueryParameterMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRouteQueryParameterMatch::fromJsonObject(QJsonObject json) {

    m_exact_match_isValid = ::OpenAPI::fromJsonValue(m_exact_match, json[QString("exactMatch")]);
    m_exact_match_isSet = !json[QString("exactMatch")].isNull() && m_exact_match_isValid;

    m_present_match_isValid = ::OpenAPI::fromJsonValue(m_present_match, json[QString("presentMatch")]);
    m_present_match_isSet = !json[QString("presentMatch")].isNull() && m_present_match_isValid;

    m_query_parameter_isValid = ::OpenAPI::fromJsonValue(m_query_parameter, json[QString("queryParameter")]);
    m_query_parameter_isSet = !json[QString("queryParameter")].isNull() && m_query_parameter_isValid;

    m_regex_match_isValid = ::OpenAPI::fromJsonValue(m_regex_match, json[QString("regexMatch")]);
    m_regex_match_isSet = !json[QString("regexMatch")].isNull() && m_regex_match_isValid;
}

QString OAIHttpRouteQueryParameterMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRouteQueryParameterMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_exact_match_isSet) {
        obj.insert(QString("exactMatch"), ::OpenAPI::toJsonValue(m_exact_match));
    }
    if (m_present_match_isSet) {
        obj.insert(QString("presentMatch"), ::OpenAPI::toJsonValue(m_present_match));
    }
    if (m_query_parameter_isSet) {
        obj.insert(QString("queryParameter"), ::OpenAPI::toJsonValue(m_query_parameter));
    }
    if (m_regex_match_isSet) {
        obj.insert(QString("regexMatch"), ::OpenAPI::toJsonValue(m_regex_match));
    }
    return obj;
}

QString OAIHttpRouteQueryParameterMatch::getExactMatch() const {
    return m_exact_match;
}
void OAIHttpRouteQueryParameterMatch::setExactMatch(const QString &exact_match) {
    m_exact_match = exact_match;
    m_exact_match_isSet = true;
}

bool OAIHttpRouteQueryParameterMatch::is_exact_match_Set() const{
    return m_exact_match_isSet;
}

bool OAIHttpRouteQueryParameterMatch::is_exact_match_Valid() const{
    return m_exact_match_isValid;
}

bool OAIHttpRouteQueryParameterMatch::isPresentMatch() const {
    return m_present_match;
}
void OAIHttpRouteQueryParameterMatch::setPresentMatch(const bool &present_match) {
    m_present_match = present_match;
    m_present_match_isSet = true;
}

bool OAIHttpRouteQueryParameterMatch::is_present_match_Set() const{
    return m_present_match_isSet;
}

bool OAIHttpRouteQueryParameterMatch::is_present_match_Valid() const{
    return m_present_match_isValid;
}

QString OAIHttpRouteQueryParameterMatch::getQueryParameter() const {
    return m_query_parameter;
}
void OAIHttpRouteQueryParameterMatch::setQueryParameter(const QString &query_parameter) {
    m_query_parameter = query_parameter;
    m_query_parameter_isSet = true;
}

bool OAIHttpRouteQueryParameterMatch::is_query_parameter_Set() const{
    return m_query_parameter_isSet;
}

bool OAIHttpRouteQueryParameterMatch::is_query_parameter_Valid() const{
    return m_query_parameter_isValid;
}

QString OAIHttpRouteQueryParameterMatch::getRegexMatch() const {
    return m_regex_match;
}
void OAIHttpRouteQueryParameterMatch::setRegexMatch(const QString &regex_match) {
    m_regex_match = regex_match;
    m_regex_match_isSet = true;
}

bool OAIHttpRouteQueryParameterMatch::is_regex_match_Set() const{
    return m_regex_match_isSet;
}

bool OAIHttpRouteQueryParameterMatch::is_regex_match_Valid() const{
    return m_regex_match_isValid;
}

bool OAIHttpRouteQueryParameterMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exact_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_present_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_match_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRouteQueryParameterMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
