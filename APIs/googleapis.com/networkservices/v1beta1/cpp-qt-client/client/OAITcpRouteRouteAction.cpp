/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITcpRouteRouteAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITcpRouteRouteAction::OAITcpRouteRouteAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITcpRouteRouteAction::OAITcpRouteRouteAction() {
    this->initializeModel();
}

OAITcpRouteRouteAction::~OAITcpRouteRouteAction() {}

void OAITcpRouteRouteAction::initializeModel() {

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_idle_timeout_isSet = false;
    m_idle_timeout_isValid = false;

    m_original_destination_isSet = false;
    m_original_destination_isValid = false;
}

void OAITcpRouteRouteAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITcpRouteRouteAction::fromJsonObject(QJsonObject json) {

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_idle_timeout_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout, json[QString("idleTimeout")]);
    m_idle_timeout_isSet = !json[QString("idleTimeout")].isNull() && m_idle_timeout_isValid;

    m_original_destination_isValid = ::OpenAPI::fromJsonValue(m_original_destination, json[QString("originalDestination")]);
    m_original_destination_isSet = !json[QString("originalDestination")].isNull() && m_original_destination_isValid;
}

QString OAITcpRouteRouteAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITcpRouteRouteAction::asJsonObject() const {
    QJsonObject obj;
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_idle_timeout_isSet) {
        obj.insert(QString("idleTimeout"), ::OpenAPI::toJsonValue(m_idle_timeout));
    }
    if (m_original_destination_isSet) {
        obj.insert(QString("originalDestination"), ::OpenAPI::toJsonValue(m_original_destination));
    }
    return obj;
}

QList<OAITcpRouteRouteDestination> OAITcpRouteRouteAction::getDestinations() const {
    return m_destinations;
}
void OAITcpRouteRouteAction::setDestinations(const QList<OAITcpRouteRouteDestination> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAITcpRouteRouteAction::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAITcpRouteRouteAction::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QString OAITcpRouteRouteAction::getIdleTimeout() const {
    return m_idle_timeout;
}
void OAITcpRouteRouteAction::setIdleTimeout(const QString &idle_timeout) {
    m_idle_timeout = idle_timeout;
    m_idle_timeout_isSet = true;
}

bool OAITcpRouteRouteAction::is_idle_timeout_Set() const{
    return m_idle_timeout_isSet;
}

bool OAITcpRouteRouteAction::is_idle_timeout_Valid() const{
    return m_idle_timeout_isValid;
}

bool OAITcpRouteRouteAction::isOriginalDestination() const {
    return m_original_destination;
}
void OAITcpRouteRouteAction::setOriginalDestination(const bool &original_destination) {
    m_original_destination = original_destination;
    m_original_destination_isSet = true;
}

bool OAITcpRouteRouteAction::is_original_destination_Set() const{
    return m_original_destination_isSet;
}

bool OAITcpRouteRouteAction::is_original_destination_Valid() const{
    return m_original_destination_isValid;
}

bool OAITcpRouteRouteAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_destination_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITcpRouteRouteAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
