/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRouteRedirect.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRouteRedirect::OAIHttpRouteRedirect(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRouteRedirect::OAIHttpRouteRedirect() {
    this->initializeModel();
}

OAIHttpRouteRedirect::~OAIHttpRouteRedirect() {}

void OAIHttpRouteRedirect::initializeModel() {

    m_host_redirect_isSet = false;
    m_host_redirect_isValid = false;

    m_https_redirect_isSet = false;
    m_https_redirect_isValid = false;

    m_path_redirect_isSet = false;
    m_path_redirect_isValid = false;

    m_port_redirect_isSet = false;
    m_port_redirect_isValid = false;

    m_prefix_rewrite_isSet = false;
    m_prefix_rewrite_isValid = false;

    m_response_code_isSet = false;
    m_response_code_isValid = false;

    m_strip_query_isSet = false;
    m_strip_query_isValid = false;
}

void OAIHttpRouteRedirect::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRouteRedirect::fromJsonObject(QJsonObject json) {

    m_host_redirect_isValid = ::OpenAPI::fromJsonValue(m_host_redirect, json[QString("hostRedirect")]);
    m_host_redirect_isSet = !json[QString("hostRedirect")].isNull() && m_host_redirect_isValid;

    m_https_redirect_isValid = ::OpenAPI::fromJsonValue(m_https_redirect, json[QString("httpsRedirect")]);
    m_https_redirect_isSet = !json[QString("httpsRedirect")].isNull() && m_https_redirect_isValid;

    m_path_redirect_isValid = ::OpenAPI::fromJsonValue(m_path_redirect, json[QString("pathRedirect")]);
    m_path_redirect_isSet = !json[QString("pathRedirect")].isNull() && m_path_redirect_isValid;

    m_port_redirect_isValid = ::OpenAPI::fromJsonValue(m_port_redirect, json[QString("portRedirect")]);
    m_port_redirect_isSet = !json[QString("portRedirect")].isNull() && m_port_redirect_isValid;

    m_prefix_rewrite_isValid = ::OpenAPI::fromJsonValue(m_prefix_rewrite, json[QString("prefixRewrite")]);
    m_prefix_rewrite_isSet = !json[QString("prefixRewrite")].isNull() && m_prefix_rewrite_isValid;

    m_response_code_isValid = ::OpenAPI::fromJsonValue(m_response_code, json[QString("responseCode")]);
    m_response_code_isSet = !json[QString("responseCode")].isNull() && m_response_code_isValid;

    m_strip_query_isValid = ::OpenAPI::fromJsonValue(m_strip_query, json[QString("stripQuery")]);
    m_strip_query_isSet = !json[QString("stripQuery")].isNull() && m_strip_query_isValid;
}

QString OAIHttpRouteRedirect::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRouteRedirect::asJsonObject() const {
    QJsonObject obj;
    if (m_host_redirect_isSet) {
        obj.insert(QString("hostRedirect"), ::OpenAPI::toJsonValue(m_host_redirect));
    }
    if (m_https_redirect_isSet) {
        obj.insert(QString("httpsRedirect"), ::OpenAPI::toJsonValue(m_https_redirect));
    }
    if (m_path_redirect_isSet) {
        obj.insert(QString("pathRedirect"), ::OpenAPI::toJsonValue(m_path_redirect));
    }
    if (m_port_redirect_isSet) {
        obj.insert(QString("portRedirect"), ::OpenAPI::toJsonValue(m_port_redirect));
    }
    if (m_prefix_rewrite_isSet) {
        obj.insert(QString("prefixRewrite"), ::OpenAPI::toJsonValue(m_prefix_rewrite));
    }
    if (m_response_code_isSet) {
        obj.insert(QString("responseCode"), ::OpenAPI::toJsonValue(m_response_code));
    }
    if (m_strip_query_isSet) {
        obj.insert(QString("stripQuery"), ::OpenAPI::toJsonValue(m_strip_query));
    }
    return obj;
}

QString OAIHttpRouteRedirect::getHostRedirect() const {
    return m_host_redirect;
}
void OAIHttpRouteRedirect::setHostRedirect(const QString &host_redirect) {
    m_host_redirect = host_redirect;
    m_host_redirect_isSet = true;
}

bool OAIHttpRouteRedirect::is_host_redirect_Set() const{
    return m_host_redirect_isSet;
}

bool OAIHttpRouteRedirect::is_host_redirect_Valid() const{
    return m_host_redirect_isValid;
}

bool OAIHttpRouteRedirect::isHttpsRedirect() const {
    return m_https_redirect;
}
void OAIHttpRouteRedirect::setHttpsRedirect(const bool &https_redirect) {
    m_https_redirect = https_redirect;
    m_https_redirect_isSet = true;
}

bool OAIHttpRouteRedirect::is_https_redirect_Set() const{
    return m_https_redirect_isSet;
}

bool OAIHttpRouteRedirect::is_https_redirect_Valid() const{
    return m_https_redirect_isValid;
}

QString OAIHttpRouteRedirect::getPathRedirect() const {
    return m_path_redirect;
}
void OAIHttpRouteRedirect::setPathRedirect(const QString &path_redirect) {
    m_path_redirect = path_redirect;
    m_path_redirect_isSet = true;
}

bool OAIHttpRouteRedirect::is_path_redirect_Set() const{
    return m_path_redirect_isSet;
}

bool OAIHttpRouteRedirect::is_path_redirect_Valid() const{
    return m_path_redirect_isValid;
}

qint32 OAIHttpRouteRedirect::getPortRedirect() const {
    return m_port_redirect;
}
void OAIHttpRouteRedirect::setPortRedirect(const qint32 &port_redirect) {
    m_port_redirect = port_redirect;
    m_port_redirect_isSet = true;
}

bool OAIHttpRouteRedirect::is_port_redirect_Set() const{
    return m_port_redirect_isSet;
}

bool OAIHttpRouteRedirect::is_port_redirect_Valid() const{
    return m_port_redirect_isValid;
}

QString OAIHttpRouteRedirect::getPrefixRewrite() const {
    return m_prefix_rewrite;
}
void OAIHttpRouteRedirect::setPrefixRewrite(const QString &prefix_rewrite) {
    m_prefix_rewrite = prefix_rewrite;
    m_prefix_rewrite_isSet = true;
}

bool OAIHttpRouteRedirect::is_prefix_rewrite_Set() const{
    return m_prefix_rewrite_isSet;
}

bool OAIHttpRouteRedirect::is_prefix_rewrite_Valid() const{
    return m_prefix_rewrite_isValid;
}

QString OAIHttpRouteRedirect::getResponseCode() const {
    return m_response_code;
}
void OAIHttpRouteRedirect::setResponseCode(const QString &response_code) {
    m_response_code = response_code;
    m_response_code_isSet = true;
}

bool OAIHttpRouteRedirect::is_response_code_Set() const{
    return m_response_code_isSet;
}

bool OAIHttpRouteRedirect::is_response_code_Valid() const{
    return m_response_code_isValid;
}

bool OAIHttpRouteRedirect::isStripQuery() const {
    return m_strip_query;
}
void OAIHttpRouteRedirect::setStripQuery(const bool &strip_query) {
    m_strip_query = strip_query;
    m_strip_query_isSet = true;
}

bool OAIHttpRouteRedirect::is_strip_query_Set() const{
    return m_strip_query_isSet;
}

bool OAIHttpRouteRedirect::is_strip_query_Valid() const{
    return m_strip_query_isValid;
}

bool OAIHttpRouteRedirect::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_redirect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_redirect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_redirect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_redirect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_rewrite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strip_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRouteRedirect::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
