/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RouteMatch defines the predicate used to match requests to a given action. Multiple match types are \&quot;AND\&quot;ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:40.871001-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TlsRouteRouteMatch {
  public static final String SERIALIZED_NAME_ALPN = "alpn";
  @SerializedName(SERIALIZED_NAME_ALPN)
  private List<String> alpn = new ArrayList<>();

  public static final String SERIALIZED_NAME_SNI_HOST = "sniHost";
  @SerializedName(SERIALIZED_NAME_SNI_HOST)
  private List<String> sniHost = new ArrayList<>();

  public TlsRouteRouteMatch() {
  }

  public TlsRouteRouteMatch alpn(List<String> alpn) {
    this.alpn = alpn;
    return this;
  }

  public TlsRouteRouteMatch addAlpnItem(String alpnItem) {
    if (this.alpn == null) {
      this.alpn = new ArrayList<>();
    }
    this.alpn.add(alpnItem);
    return this;
  }

  /**
   * Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: \&quot;http/1.1\&quot;, \&quot;h2\&quot;. At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
   * @return alpn
   */
  @javax.annotation.Nullable
  public List<String> getAlpn() {
    return alpn;
  }

  public void setAlpn(List<String> alpn) {
    this.alpn = alpn;
  }


  public TlsRouteRouteMatch sniHost(List<String> sniHost) {
    this.sniHost = sniHost;
    return this;
  }

  public TlsRouteRouteMatch addSniHostItem(String sniHostItem) {
    if (this.sniHost == null) {
      this.sniHost = new ArrayList<>();
    }
    this.sniHost.add(sniHostItem);
    return this;
  }

  /**
   * Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. &#x60;www.example.com&#x60; will be first matched against &#x60;www.example.com&#x60;, then &#x60;*.example.com&#x60;, then &#x60;*.com.&#x60; Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
   * @return sniHost
   */
  @javax.annotation.Nullable
  public List<String> getSniHost() {
    return sniHost;
  }

  public void setSniHost(List<String> sniHost) {
    this.sniHost = sniHost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsRouteRouteMatch tlsRouteRouteMatch = (TlsRouteRouteMatch) o;
    return Objects.equals(this.alpn, tlsRouteRouteMatch.alpn) &&
        Objects.equals(this.sniHost, tlsRouteRouteMatch.sniHost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alpn, sniHost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsRouteRouteMatch {\n");
    sb.append("    alpn: ").append(toIndentedString(alpn)).append("\n");
    sb.append("    sniHost: ").append(toIndentedString(sniHost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alpn");
    openapiFields.add("sniHost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TlsRouteRouteMatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TlsRouteRouteMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TlsRouteRouteMatch is not found in the empty JSON string", TlsRouteRouteMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TlsRouteRouteMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TlsRouteRouteMatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("alpn") != null && !jsonObj.get("alpn").isJsonNull() && !jsonObj.get("alpn").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alpn` to be an array in the JSON string but got `%s`", jsonObj.get("alpn").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sniHost") != null && !jsonObj.get("sniHost").isJsonNull() && !jsonObj.get("sniHost").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sniHost` to be an array in the JSON string but got `%s`", jsonObj.get("sniHost").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TlsRouteRouteMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TlsRouteRouteMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TlsRouteRouteMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TlsRouteRouteMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<TlsRouteRouteMatch>() {
           @Override
           public void write(JsonWriter out, TlsRouteRouteMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TlsRouteRouteMatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TlsRouteRouteMatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TlsRouteRouteMatch
   * @throws IOException if the JSON string is invalid with respect to TlsRouteRouteMatch
   */
  public static TlsRouteRouteMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TlsRouteRouteMatch.class);
  }

  /**
   * Convert an instance of TlsRouteRouteMatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

