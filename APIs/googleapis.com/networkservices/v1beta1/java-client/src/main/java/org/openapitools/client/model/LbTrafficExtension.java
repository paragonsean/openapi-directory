/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ExtensionChain;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;LbTrafficExtension&#x60; is a resource that lets the extension service modify the headers and payloads of both requests and responses without impacting the choice of backend services or any other security policies associated with the backend service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:40.871001-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LbTrafficExtension {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXTENSION_CHAINS = "extensionChains";
  @SerializedName(SERIALIZED_NAME_EXTENSION_CHAINS)
  private List<ExtensionChain> extensionChains = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORWARDING_RULES = "forwardingRules";
  @SerializedName(SERIALIZED_NAME_FORWARDING_RULES)
  private List<String> forwardingRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  /**
   * Required. All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. Supported values: &#x60;INTERNAL_MANAGED&#x60;, &#x60;EXTERNAL_MANAGED&#x60;. For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
   */
  @JsonAdapter(LoadBalancingSchemeEnum.Adapter.class)
  public enum LoadBalancingSchemeEnum {
    LOAD_BALANCING_SCHEME_UNSPECIFIED("LOAD_BALANCING_SCHEME_UNSPECIFIED"),
    
    INTERNAL_MANAGED("INTERNAL_MANAGED"),
    
    EXTERNAL_MANAGED("EXTERNAL_MANAGED");

    private String value;

    LoadBalancingSchemeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoadBalancingSchemeEnum fromValue(String value) {
      for (LoadBalancingSchemeEnum b : LoadBalancingSchemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoadBalancingSchemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoadBalancingSchemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoadBalancingSchemeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoadBalancingSchemeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoadBalancingSchemeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOAD_BALANCING_SCHEME = "loadBalancingScheme";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCING_SCHEME)
  private LoadBalancingSchemeEnum loadBalancingScheme;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public LbTrafficExtension() {
  }

  public LbTrafficExtension(
     String createTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public LbTrafficExtension description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. A human-readable description of the resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LbTrafficExtension extensionChains(List<ExtensionChain> extensionChains) {
    this.extensionChains = extensionChains;
    return this;
  }

  public LbTrafficExtension addExtensionChainsItem(ExtensionChain extensionChainsItem) {
    if (this.extensionChains == null) {
      this.extensionChains = new ArrayList<>();
    }
    this.extensionChains.add(extensionChainsItem);
    return this;
  }

  /**
   * Required. A set of ordered extension chains that contain the match conditions and extensions to execute. Match conditions for each extension chain are evaluated in sequence for a given request. The first extension chain that has a condition that matches the request is executed. Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
   * @return extensionChains
   */
  @javax.annotation.Nullable
  public List<ExtensionChain> getExtensionChains() {
    return extensionChains;
  }

  public void setExtensionChains(List<ExtensionChain> extensionChains) {
    this.extensionChains = extensionChains;
  }


  public LbTrafficExtension forwardingRules(List<String> forwardingRules) {
    this.forwardingRules = forwardingRules;
    return this;
  }

  public LbTrafficExtension addForwardingRulesItem(String forwardingRulesItem) {
    if (this.forwardingRules == null) {
      this.forwardingRules = new ArrayList<>();
    }
    this.forwardingRules.add(forwardingRulesItem);
    return this;
  }

  /**
   * Required. A list of references to the forwarding rules to which this service extension is attached to. At least one forwarding rule is required. There can be only one &#x60;LBTrafficExtension&#x60; resource per forwarding rule.
   * @return forwardingRules
   */
  @javax.annotation.Nullable
  public List<String> getForwardingRules() {
    return forwardingRules;
  }

  public void setForwardingRules(List<String> forwardingRules) {
    this.forwardingRules = forwardingRules;
  }


  public LbTrafficExtension labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public LbTrafficExtension putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Set of labels associated with the &#x60;LbTrafficExtension&#x60; resource. The format must comply with [the requirements for labels](/compute/docs/labeling-resources#requirements) for Google Cloud resources.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public LbTrafficExtension loadBalancingScheme(LoadBalancingSchemeEnum loadBalancingScheme) {
    this.loadBalancingScheme = loadBalancingScheme;
    return this;
  }

  /**
   * Required. All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. Supported values: &#x60;INTERNAL_MANAGED&#x60;, &#x60;EXTERNAL_MANAGED&#x60;. For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
   * @return loadBalancingScheme
   */
  @javax.annotation.Nullable
  public LoadBalancingSchemeEnum getLoadBalancingScheme() {
    return loadBalancingScheme;
  }

  public void setLoadBalancingScheme(LoadBalancingSchemeEnum loadBalancingScheme) {
    this.loadBalancingScheme = loadBalancingScheme;
  }


  public LbTrafficExtension name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Identifier. Name of the &#x60;LbTrafficExtension&#x60; resource in the following format: &#x60;projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. The timestamp when the resource was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LbTrafficExtension lbTrafficExtension = (LbTrafficExtension) o;
    return Objects.equals(this.createTime, lbTrafficExtension.createTime) &&
        Objects.equals(this.description, lbTrafficExtension.description) &&
        Objects.equals(this.extensionChains, lbTrafficExtension.extensionChains) &&
        Objects.equals(this.forwardingRules, lbTrafficExtension.forwardingRules) &&
        Objects.equals(this.labels, lbTrafficExtension.labels) &&
        Objects.equals(this.loadBalancingScheme, lbTrafficExtension.loadBalancingScheme) &&
        Objects.equals(this.name, lbTrafficExtension.name) &&
        Objects.equals(this.updateTime, lbTrafficExtension.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, extensionChains, forwardingRules, labels, loadBalancingScheme, name, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LbTrafficExtension {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    extensionChains: ").append(toIndentedString(extensionChains)).append("\n");
    sb.append("    forwardingRules: ").append(toIndentedString(forwardingRules)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    loadBalancingScheme: ").append(toIndentedString(loadBalancingScheme)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("extensionChains");
    openapiFields.add("forwardingRules");
    openapiFields.add("labels");
    openapiFields.add("loadBalancingScheme");
    openapiFields.add("name");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LbTrafficExtension
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LbTrafficExtension.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LbTrafficExtension is not found in the empty JSON string", LbTrafficExtension.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LbTrafficExtension.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LbTrafficExtension` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("extensionChains") != null && !jsonObj.get("extensionChains").isJsonNull()) {
        JsonArray jsonArrayextensionChains = jsonObj.getAsJsonArray("extensionChains");
        if (jsonArrayextensionChains != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extensionChains").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extensionChains` to be an array in the JSON string but got `%s`", jsonObj.get("extensionChains").toString()));
          }

          // validate the optional field `extensionChains` (array)
          for (int i = 0; i < jsonArrayextensionChains.size(); i++) {
            ExtensionChain.validateJsonElement(jsonArrayextensionChains.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("forwardingRules") != null && !jsonObj.get("forwardingRules").isJsonNull() && !jsonObj.get("forwardingRules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwardingRules` to be an array in the JSON string but got `%s`", jsonObj.get("forwardingRules").toString()));
      }
      if ((jsonObj.get("loadBalancingScheme") != null && !jsonObj.get("loadBalancingScheme").isJsonNull()) && !jsonObj.get("loadBalancingScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadBalancingScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loadBalancingScheme").toString()));
      }
      // validate the optional field `loadBalancingScheme`
      if (jsonObj.get("loadBalancingScheme") != null && !jsonObj.get("loadBalancingScheme").isJsonNull()) {
        LoadBalancingSchemeEnum.validateJsonElement(jsonObj.get("loadBalancingScheme"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LbTrafficExtension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LbTrafficExtension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LbTrafficExtension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LbTrafficExtension.class));

       return (TypeAdapter<T>) new TypeAdapter<LbTrafficExtension>() {
           @Override
           public void write(JsonWriter out, LbTrafficExtension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LbTrafficExtension read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LbTrafficExtension given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LbTrafficExtension
   * @throws IOException if the JSON string is invalid with respect to LbTrafficExtension
   */
  public static LbTrafficExtension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LbTrafficExtension.class);
  }

  /**
   * Convert an instance of LbTrafficExtension to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

