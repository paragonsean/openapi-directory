/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Mesh represents a logical configuration grouping for workload to workload communication within a service mesh. Routes that point to mesh dictate how requests are routed within this logical mesh boundary.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:40.871001-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Mesh {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Optional. Determines if envoy will insert internal debug headers into upstream requests. Other Envoy headers may still be injected. By default, envoy will not insert any debug headers.
   */
  @JsonAdapter(EnvoyHeadersEnum.Adapter.class)
  public enum EnvoyHeadersEnum {
    ENVOY_HEADERS_UNSPECIFIED("ENVOY_HEADERS_UNSPECIFIED"),
    
    NONE("NONE"),
    
    DEBUG_HEADERS("DEBUG_HEADERS");

    private String value;

    EnvoyHeadersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvoyHeadersEnum fromValue(String value) {
      for (EnvoyHeadersEnum b : EnvoyHeadersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnvoyHeadersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvoyHeadersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvoyHeadersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnvoyHeadersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnvoyHeadersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENVOY_HEADERS = "envoyHeaders";
  @SerializedName(SERIALIZED_NAME_ENVOY_HEADERS)
  private EnvoyHeadersEnum envoyHeaders;

  public static final String SERIALIZED_NAME_INTERCEPTION_PORT = "interceptionPort";
  @SerializedName(SERIALIZED_NAME_INTERCEPTION_PORT)
  private Integer interceptionPort;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Mesh() {
  }

  public Mesh(
     String createTime, 
     String selfLink, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.selfLink = selfLink;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Mesh description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. A free-text description of the resource. Max length 1024 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Mesh envoyHeaders(EnvoyHeadersEnum envoyHeaders) {
    this.envoyHeaders = envoyHeaders;
    return this;
  }

  /**
   * Optional. Determines if envoy will insert internal debug headers into upstream requests. Other Envoy headers may still be injected. By default, envoy will not insert any debug headers.
   * @return envoyHeaders
   */
  @javax.annotation.Nullable
  public EnvoyHeadersEnum getEnvoyHeaders() {
    return envoyHeaders;
  }

  public void setEnvoyHeaders(EnvoyHeadersEnum envoyHeaders) {
    this.envoyHeaders = envoyHeaders;
  }


  public Mesh interceptionPort(Integer interceptionPort) {
    this.interceptionPort = interceptionPort;
    return this;
  }

  /**
   * Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy to listen on the specified port of localhost (127.0.0.1) address. The SIDECAR proxy will expect all traffic to be redirected to this port regardless of its actual ip:port destination. If unset, a port &#39;15001&#39; is used as the interception port. This is applicable only for sidecar proxy deployments.
   * @return interceptionPort
   */
  @javax.annotation.Nullable
  public Integer getInterceptionPort() {
    return interceptionPort;
  }

  public void setInterceptionPort(Integer interceptionPort) {
    this.interceptionPort = interceptionPort;
  }


  public Mesh labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Mesh putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Set of label tags associated with the Mesh resource.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Mesh name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Name of the Mesh resource. It matches pattern &#x60;projects/_*_/locations/global/meshes/&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Server-defined URL of this resource
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }



  /**
   * Output only. The timestamp when the resource was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mesh mesh = (Mesh) o;
    return Objects.equals(this.createTime, mesh.createTime) &&
        Objects.equals(this.description, mesh.description) &&
        Objects.equals(this.envoyHeaders, mesh.envoyHeaders) &&
        Objects.equals(this.interceptionPort, mesh.interceptionPort) &&
        Objects.equals(this.labels, mesh.labels) &&
        Objects.equals(this.name, mesh.name) &&
        Objects.equals(this.selfLink, mesh.selfLink) &&
        Objects.equals(this.updateTime, mesh.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, envoyHeaders, interceptionPort, labels, name, selfLink, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mesh {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    envoyHeaders: ").append(toIndentedString(envoyHeaders)).append("\n");
    sb.append("    interceptionPort: ").append(toIndentedString(interceptionPort)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("envoyHeaders");
    openapiFields.add("interceptionPort");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("selfLink");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Mesh
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Mesh.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Mesh is not found in the empty JSON string", Mesh.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Mesh.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Mesh` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("envoyHeaders") != null && !jsonObj.get("envoyHeaders").isJsonNull()) && !jsonObj.get("envoyHeaders").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `envoyHeaders` to be a primitive type in the JSON string but got `%s`", jsonObj.get("envoyHeaders").toString()));
      }
      // validate the optional field `envoyHeaders`
      if (jsonObj.get("envoyHeaders") != null && !jsonObj.get("envoyHeaders").isJsonNull()) {
        EnvoyHeadersEnum.validateJsonElement(jsonObj.get("envoyHeaders"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Mesh.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Mesh' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Mesh> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Mesh.class));

       return (TypeAdapter<T>) new TypeAdapter<Mesh>() {
           @Override
           public void write(JsonWriter out, Mesh value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Mesh read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Mesh given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Mesh
   * @throws IOException if the JSON string is invalid with respect to Mesh
   */
  public static Mesh fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Mesh.class);
  }

  /**
   * Convert an instance of Mesh to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

