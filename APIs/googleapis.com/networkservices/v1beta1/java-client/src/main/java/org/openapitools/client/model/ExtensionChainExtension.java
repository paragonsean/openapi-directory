/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single extension in the chain to execute for the matching request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:40.871001-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtensionChainExtension {
  public static final String SERIALIZED_NAME_AUTHORITY = "authority";
  @SerializedName(SERIALIZED_NAME_AUTHORITY)
  private String authority;

  public static final String SERIALIZED_NAME_FAIL_OPEN = "failOpen";
  @SerializedName(SERIALIZED_NAME_FAIL_OPEN)
  private Boolean failOpen;

  public static final String SERIALIZED_NAME_FORWARD_HEADERS = "forwardHeaders";
  @SerializedName(SERIALIZED_NAME_FORWARD_HEADERS)
  private List<String> forwardHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  /**
   * Gets or Sets supportedEvents
   */
  @JsonAdapter(SupportedEventsEnum.Adapter.class)
  public enum SupportedEventsEnum {
    EVENT_TYPE_UNSPECIFIED("EVENT_TYPE_UNSPECIFIED"),
    
    REQUEST_HEADERS("REQUEST_HEADERS"),
    
    REQUEST_BODY("REQUEST_BODY"),
    
    RESPONSE_HEADERS("RESPONSE_HEADERS"),
    
    RESPONSE_BODY("RESPONSE_BODY"),
    
    REQUEST_TRAILERS("REQUEST_TRAILERS"),
    
    RESPONSE_TRAILERS("RESPONSE_TRAILERS");

    private String value;

    SupportedEventsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedEventsEnum fromValue(String value) {
      for (SupportedEventsEnum b : SupportedEventsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportedEventsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedEventsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedEventsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportedEventsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportedEventsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTED_EVENTS = "supportedEvents";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_EVENTS)
  private List<SupportedEventsEnum> supportedEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public ExtensionChainExtension() {
  }

  public ExtensionChainExtension authority(String authority) {
    this.authority = authority;
    return this;
  }

  /**
   * Optional. The &#x60;:authority&#x60; header in the gRPC request sent from Envoy to the extension service. Required for Callout extensions.
   * @return authority
   */
  @javax.annotation.Nullable
  public String getAuthority() {
    return authority;
  }

  public void setAuthority(String authority) {
    this.authority = authority;
  }


  public ExtensionChainExtension failOpen(Boolean failOpen) {
    this.failOpen = failOpen;
    return this;
  }

  /**
   * Optional. Determines how the proxy behaves if the call to the extension fails or times out. When set to &#x60;TRUE&#x60;, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to &#x60;FALSE&#x60; or the default setting of &#x60;FALSE&#x60; is used, one of the following happens: * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer. * If response headers have been delivered, then the HTTP stream to the downstream client is reset.
   * @return failOpen
   */
  @javax.annotation.Nullable
  public Boolean getFailOpen() {
    return failOpen;
  }

  public void setFailOpen(Boolean failOpen) {
    this.failOpen = failOpen;
  }


  public ExtensionChainExtension forwardHeaders(List<String> forwardHeaders) {
    this.forwardHeaders = forwardHeaders;
    return this;
  }

  public ExtensionChainExtension addForwardHeadersItem(String forwardHeadersItem) {
    if (this.forwardHeaders == null) {
      this.forwardHeaders = new ArrayList<>();
    }
    this.forwardHeaders.add(forwardHeadersItem);
    return this;
  }

  /**
   * Optional. List of the HTTP headers to forward to the extension (from the client or backend). If omitted, all headers are sent. Each element is a string indicating the header name.
   * @return forwardHeaders
   */
  @javax.annotation.Nullable
  public List<String> getForwardHeaders() {
    return forwardHeaders;
  }

  public void setForwardHeaders(List<String> forwardHeaders) {
    this.forwardHeaders = forwardHeaders;
  }


  public ExtensionChainExtension name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name for this extension. The name is logged as part of the HTTP request logs. The name must conform with RFC-1034, is restricted to lower-cased letters, numbers and hyphens, and can have a maximum length of 63 characters. Additionally, the first character must be a letter and the last a letter or a number.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ExtensionChainExtension service(String service) {
    this.service = service;
    return this;
  }

  /**
   * Required. The reference to the service that runs the extension. Currently only callout extensions are supported here. To configure a callout extension, &#x60;service&#x60; must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format: &#x60;https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}&#x60; or &#x60;https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}&#x60;.
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public ExtensionChainExtension supportedEvents(List<SupportedEventsEnum> supportedEvents) {
    this.supportedEvents = supportedEvents;
    return this;
  }

  public ExtensionChainExtension addSupportedEventsItem(SupportedEventsEnum supportedEventsItem) {
    if (this.supportedEvents == null) {
      this.supportedEvents = new ArrayList<>();
    }
    this.supportedEvents.add(supportedEventsItem);
    return this;
  }

  /**
   * Optional. A set of events during request or response processing for which this extension is called. This field is required for the &#x60;LbTrafficExtension&#x60; resource. It&#39;s not relevant for the &#x60;LbRouteExtension&#x60; resource.
   * @return supportedEvents
   */
  @javax.annotation.Nullable
  public List<SupportedEventsEnum> getSupportedEvents() {
    return supportedEvents;
  }

  public void setSupportedEvents(List<SupportedEventsEnum> supportedEvents) {
    this.supportedEvents = supportedEvents;
  }


  public ExtensionChainExtension timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Optional. Specifies the timeout for each individual message on the stream. The timeout must be between 10-1000 milliseconds. Required for Callout extensions.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtensionChainExtension extensionChainExtension = (ExtensionChainExtension) o;
    return Objects.equals(this.authority, extensionChainExtension.authority) &&
        Objects.equals(this.failOpen, extensionChainExtension.failOpen) &&
        Objects.equals(this.forwardHeaders, extensionChainExtension.forwardHeaders) &&
        Objects.equals(this.name, extensionChainExtension.name) &&
        Objects.equals(this.service, extensionChainExtension.service) &&
        Objects.equals(this.supportedEvents, extensionChainExtension.supportedEvents) &&
        Objects.equals(this.timeout, extensionChainExtension.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authority, failOpen, forwardHeaders, name, service, supportedEvents, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtensionChainExtension {\n");
    sb.append("    authority: ").append(toIndentedString(authority)).append("\n");
    sb.append("    failOpen: ").append(toIndentedString(failOpen)).append("\n");
    sb.append("    forwardHeaders: ").append(toIndentedString(forwardHeaders)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    supportedEvents: ").append(toIndentedString(supportedEvents)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authority");
    openapiFields.add("failOpen");
    openapiFields.add("forwardHeaders");
    openapiFields.add("name");
    openapiFields.add("service");
    openapiFields.add("supportedEvents");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtensionChainExtension
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtensionChainExtension.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtensionChainExtension is not found in the empty JSON string", ExtensionChainExtension.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtensionChainExtension.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtensionChainExtension` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authority") != null && !jsonObj.get("authority").isJsonNull()) && !jsonObj.get("authority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authority").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("forwardHeaders") != null && !jsonObj.get("forwardHeaders").isJsonNull() && !jsonObj.get("forwardHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `forwardHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("forwardHeaders").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedEvents") != null && !jsonObj.get("supportedEvents").isJsonNull() && !jsonObj.get("supportedEvents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedEvents` to be an array in the JSON string but got `%s`", jsonObj.get("supportedEvents").toString()));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtensionChainExtension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtensionChainExtension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtensionChainExtension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtensionChainExtension.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtensionChainExtension>() {
           @Override
           public void write(JsonWriter out, ExtensionChainExtension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtensionChainExtension read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtensionChainExtension given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtensionChainExtension
   * @throws IOException if the JSON string is invalid with respect to ExtensionChainExtension
   */
  public static ExtensionChainExtension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtensionChainExtension.class);
  }

  /**
   * Convert an instance of ExtensionChainExtension to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

