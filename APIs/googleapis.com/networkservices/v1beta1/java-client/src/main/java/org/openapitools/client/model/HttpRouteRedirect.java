/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The specification for redirecting traffic.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:40.871001-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpRouteRedirect {
  public static final String SERIALIZED_NAME_HOST_REDIRECT = "hostRedirect";
  @SerializedName(SERIALIZED_NAME_HOST_REDIRECT)
  private String hostRedirect;

  public static final String SERIALIZED_NAME_HTTPS_REDIRECT = "httpsRedirect";
  @SerializedName(SERIALIZED_NAME_HTTPS_REDIRECT)
  private Boolean httpsRedirect;

  public static final String SERIALIZED_NAME_PATH_REDIRECT = "pathRedirect";
  @SerializedName(SERIALIZED_NAME_PATH_REDIRECT)
  private String pathRedirect;

  public static final String SERIALIZED_NAME_PORT_REDIRECT = "portRedirect";
  @SerializedName(SERIALIZED_NAME_PORT_REDIRECT)
  private Integer portRedirect;

  public static final String SERIALIZED_NAME_PREFIX_REWRITE = "prefixRewrite";
  @SerializedName(SERIALIZED_NAME_PREFIX_REWRITE)
  private String prefixRewrite;

  /**
   * The HTTP Status code to use for the redirect.
   */
  @JsonAdapter(ResponseCodeEnum.Adapter.class)
  public enum ResponseCodeEnum {
    RESPONSE_CODE_UNSPECIFIED("RESPONSE_CODE_UNSPECIFIED"),
    
    MOVED_PERMANENTLY_DEFAULT("MOVED_PERMANENTLY_DEFAULT"),
    
    FOUND("FOUND"),
    
    SEE_OTHER("SEE_OTHER"),
    
    TEMPORARY_REDIRECT("TEMPORARY_REDIRECT"),
    
    PERMANENT_REDIRECT("PERMANENT_REDIRECT");

    private String value;

    ResponseCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseCodeEnum fromValue(String value) {
      for (ResponseCodeEnum b : ResponseCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponseCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "responseCode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private ResponseCodeEnum responseCode;

  public static final String SERIALIZED_NAME_STRIP_QUERY = "stripQuery";
  @SerializedName(SERIALIZED_NAME_STRIP_QUERY)
  private Boolean stripQuery;

  public HttpRouteRedirect() {
  }

  public HttpRouteRedirect hostRedirect(String hostRedirect) {
    this.hostRedirect = hostRedirect;
    return this;
  }

  /**
   * The host that will be used in the redirect response instead of the one that was supplied in the request.
   * @return hostRedirect
   */
  @javax.annotation.Nullable
  public String getHostRedirect() {
    return hostRedirect;
  }

  public void setHostRedirect(String hostRedirect) {
    this.hostRedirect = hostRedirect;
  }


  public HttpRouteRedirect httpsRedirect(Boolean httpsRedirect) {
    this.httpsRedirect = httpsRedirect;
    return this;
  }

  /**
   * If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.
   * @return httpsRedirect
   */
  @javax.annotation.Nullable
  public Boolean getHttpsRedirect() {
    return httpsRedirect;
  }

  public void setHttpsRedirect(Boolean httpsRedirect) {
    this.httpsRedirect = httpsRedirect;
  }


  public HttpRouteRedirect pathRedirect(String pathRedirect) {
    this.pathRedirect = pathRedirect;
    return this;
  }

  /**
   * The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
   * @return pathRedirect
   */
  @javax.annotation.Nullable
  public String getPathRedirect() {
    return pathRedirect;
  }

  public void setPathRedirect(String pathRedirect) {
    this.pathRedirect = pathRedirect;
  }


  public HttpRouteRedirect portRedirect(Integer portRedirect) {
    this.portRedirect = portRedirect;
    return this;
  }

  /**
   * The port that will be used in the redirected request instead of the one that was supplied in the request.
   * @return portRedirect
   */
  @javax.annotation.Nullable
  public Integer getPortRedirect() {
    return portRedirect;
  }

  public void setPortRedirect(Integer portRedirect) {
    this.portRedirect = portRedirect;
  }


  public HttpRouteRedirect prefixRewrite(String prefixRewrite) {
    this.prefixRewrite = prefixRewrite;
    return this;
  }

  /**
   * Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.
   * @return prefixRewrite
   */
  @javax.annotation.Nullable
  public String getPrefixRewrite() {
    return prefixRewrite;
  }

  public void setPrefixRewrite(String prefixRewrite) {
    this.prefixRewrite = prefixRewrite;
  }


  public HttpRouteRedirect responseCode(ResponseCodeEnum responseCode) {
    this.responseCode = responseCode;
    return this;
  }

  /**
   * The HTTP Status code to use for the redirect.
   * @return responseCode
   */
  @javax.annotation.Nullable
  public ResponseCodeEnum getResponseCode() {
    return responseCode;
  }

  public void setResponseCode(ResponseCodeEnum responseCode) {
    this.responseCode = responseCode;
  }


  public HttpRouteRedirect stripQuery(Boolean stripQuery) {
    this.stripQuery = stripQuery;
    return this;
  }

  /**
   * if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
   * @return stripQuery
   */
  @javax.annotation.Nullable
  public Boolean getStripQuery() {
    return stripQuery;
  }

  public void setStripQuery(Boolean stripQuery) {
    this.stripQuery = stripQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpRouteRedirect httpRouteRedirect = (HttpRouteRedirect) o;
    return Objects.equals(this.hostRedirect, httpRouteRedirect.hostRedirect) &&
        Objects.equals(this.httpsRedirect, httpRouteRedirect.httpsRedirect) &&
        Objects.equals(this.pathRedirect, httpRouteRedirect.pathRedirect) &&
        Objects.equals(this.portRedirect, httpRouteRedirect.portRedirect) &&
        Objects.equals(this.prefixRewrite, httpRouteRedirect.prefixRewrite) &&
        Objects.equals(this.responseCode, httpRouteRedirect.responseCode) &&
        Objects.equals(this.stripQuery, httpRouteRedirect.stripQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostRedirect, httpsRedirect, pathRedirect, portRedirect, prefixRewrite, responseCode, stripQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpRouteRedirect {\n");
    sb.append("    hostRedirect: ").append(toIndentedString(hostRedirect)).append("\n");
    sb.append("    httpsRedirect: ").append(toIndentedString(httpsRedirect)).append("\n");
    sb.append("    pathRedirect: ").append(toIndentedString(pathRedirect)).append("\n");
    sb.append("    portRedirect: ").append(toIndentedString(portRedirect)).append("\n");
    sb.append("    prefixRewrite: ").append(toIndentedString(prefixRewrite)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    stripQuery: ").append(toIndentedString(stripQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hostRedirect");
    openapiFields.add("httpsRedirect");
    openapiFields.add("pathRedirect");
    openapiFields.add("portRedirect");
    openapiFields.add("prefixRewrite");
    openapiFields.add("responseCode");
    openapiFields.add("stripQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpRouteRedirect
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpRouteRedirect.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpRouteRedirect is not found in the empty JSON string", HttpRouteRedirect.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpRouteRedirect.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpRouteRedirect` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hostRedirect") != null && !jsonObj.get("hostRedirect").isJsonNull()) && !jsonObj.get("hostRedirect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostRedirect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostRedirect").toString()));
      }
      if ((jsonObj.get("pathRedirect") != null && !jsonObj.get("pathRedirect").isJsonNull()) && !jsonObj.get("pathRedirect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pathRedirect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pathRedirect").toString()));
      }
      if ((jsonObj.get("prefixRewrite") != null && !jsonObj.get("prefixRewrite").isJsonNull()) && !jsonObj.get("prefixRewrite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefixRewrite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefixRewrite").toString()));
      }
      if ((jsonObj.get("responseCode") != null && !jsonObj.get("responseCode").isJsonNull()) && !jsonObj.get("responseCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseCode").toString()));
      }
      // validate the optional field `responseCode`
      if (jsonObj.get("responseCode") != null && !jsonObj.get("responseCode").isJsonNull()) {
        ResponseCodeEnum.validateJsonElement(jsonObj.get("responseCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpRouteRedirect.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpRouteRedirect' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpRouteRedirect> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpRouteRedirect.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpRouteRedirect>() {
           @Override
           public void write(JsonWriter out, HttpRouteRedirect value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpRouteRedirect read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpRouteRedirect given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpRouteRedirect
   * @throws IOException if the JSON string is invalid with respect to HttpRouteRedirect
   */
  public static HttpRouteRedirect fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpRouteRedirect.class);
  }

  /**
   * Convert an instance of HttpRouteRedirect to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

