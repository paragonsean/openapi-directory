/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gateway represents the configuration for a proxy, typically a load balancer. It captures the ip:port over which the services are exposed by the proxy, along with any policy configurations. Routes have reference to to Gateways to dictate how requests should be routed by this Gateway. Next id: 32
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:40.871001-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Gateway {
  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<String> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERTIFICATE_URLS = "certificateUrls";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_URLS)
  private List<String> certificateUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Optional. Determines if envoy will insert internal debug headers into upstream requests. Other Envoy headers may still be injected. By default, envoy will not insert any debug headers.
   */
  @JsonAdapter(EnvoyHeadersEnum.Adapter.class)
  public enum EnvoyHeadersEnum {
    ENVOY_HEADERS_UNSPECIFIED("ENVOY_HEADERS_UNSPECIFIED"),
    
    NONE("NONE"),
    
    DEBUG_HEADERS("DEBUG_HEADERS");

    private String value;

    EnvoyHeadersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvoyHeadersEnum fromValue(String value) {
      for (EnvoyHeadersEnum b : EnvoyHeadersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnvoyHeadersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvoyHeadersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvoyHeadersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnvoyHeadersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnvoyHeadersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENVOY_HEADERS = "envoyHeaders";
  @SerializedName(SERIALIZED_NAME_ENVOY_HEADERS)
  private EnvoyHeadersEnum envoyHeaders;

  public static final String SERIALIZED_NAME_GATEWAY_SECURITY_POLICY = "gatewaySecurityPolicy";
  @SerializedName(SERIALIZED_NAME_GATEWAY_SECURITY_POLICY)
  private String gatewaySecurityPolicy;

  /**
   * Optional. The IP Version that will be used by this gateway. Valid options are IPV4 or IPV6. Default is IPV4.
   */
  @JsonAdapter(IpVersionEnum.Adapter.class)
  public enum IpVersionEnum {
    IP_VERSION_UNSPECIFIED("IP_VERSION_UNSPECIFIED"),
    
    IPV4("IPV4"),
    
    IPV6("IPV6");

    private String value;

    IpVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IpVersionEnum fromValue(String value) {
      for (IpVersionEnum b : IpVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IpVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IpVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IpVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IpVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IpVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IP_VERSION = "ipVersion";
  @SerializedName(SERIALIZED_NAME_IP_VERSION)
  private IpVersionEnum ipVersion;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_PORTS = "ports";
  @SerializedName(SERIALIZED_NAME_PORTS)
  private List<Integer> ports = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_SERVER_TLS_POLICY = "serverTlsPolicy";
  @SerializedName(SERIALIZED_NAME_SERVER_TLS_POLICY)
  private String serverTlsPolicy;

  public static final String SERIALIZED_NAME_SUBNETWORK = "subnetwork";
  @SerializedName(SERIALIZED_NAME_SUBNETWORK)
  private String subnetwork;

  /**
   * Immutable. The type of the customer managed gateway. This field is required. If unspecified, an error is returned.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    OPEN_MESH("OPEN_MESH"),
    
    SECURE_WEB_GATEWAY("SECURE_WEB_GATEWAY");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Gateway() {
  }

  public Gateway(
     String createTime, 
     String selfLink, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.selfLink = selfLink;
    this.updateTime = updateTime;
  }

  public Gateway addresses(List<String> addresses) {
    this.addresses = addresses;
    return this;
  }

  public Gateway addAddressesItem(String addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * Optional. Zero or one IPv4 or IPv6 address on which the Gateway will receive the traffic. When no address is provided, an IP from the subnetwork is allocated This field only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;. Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 for IPv4 and :: for IPv6.
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<String> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<String> addresses) {
    this.addresses = addresses;
  }


  public Gateway certificateUrls(List<String> certificateUrls) {
    this.certificateUrls = certificateUrls;
    return this;
  }

  public Gateway addCertificateUrlsItem(String certificateUrlsItem) {
    if (this.certificateUrls == null) {
      this.certificateUrls = new ArrayList<>();
    }
    this.certificateUrls.add(certificateUrlsItem);
    return this;
  }

  /**
   * Optional. A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection. This feature only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
   * @return certificateUrls
   */
  @javax.annotation.Nullable
  public List<String> getCertificateUrls() {
    return certificateUrls;
  }

  public void setCertificateUrls(List<String> certificateUrls) {
    this.certificateUrls = certificateUrls;
  }


  /**
   * Output only. The timestamp when the resource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Gateway description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. A free-text description of the resource. Max length 1024 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Gateway envoyHeaders(EnvoyHeadersEnum envoyHeaders) {
    this.envoyHeaders = envoyHeaders;
    return this;
  }

  /**
   * Optional. Determines if envoy will insert internal debug headers into upstream requests. Other Envoy headers may still be injected. By default, envoy will not insert any debug headers.
   * @return envoyHeaders
   */
  @javax.annotation.Nullable
  public EnvoyHeadersEnum getEnvoyHeaders() {
    return envoyHeaders;
  }

  public void setEnvoyHeaders(EnvoyHeadersEnum envoyHeaders) {
    this.envoyHeaders = envoyHeaders;
  }


  public Gateway gatewaySecurityPolicy(String gatewaySecurityPolicy) {
    this.gatewaySecurityPolicy = gatewaySecurityPolicy;
    return this;
  }

  /**
   * Optional. A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections. For example: &#x60;projects/_*_/locations/_*_/gatewaySecurityPolicies/swg-policy&#x60;. This policy is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
   * @return gatewaySecurityPolicy
   */
  @javax.annotation.Nullable
  public String getGatewaySecurityPolicy() {
    return gatewaySecurityPolicy;
  }

  public void setGatewaySecurityPolicy(String gatewaySecurityPolicy) {
    this.gatewaySecurityPolicy = gatewaySecurityPolicy;
  }


  public Gateway ipVersion(IpVersionEnum ipVersion) {
    this.ipVersion = ipVersion;
    return this;
  }

  /**
   * Optional. The IP Version that will be used by this gateway. Valid options are IPV4 or IPV6. Default is IPV4.
   * @return ipVersion
   */
  @javax.annotation.Nullable
  public IpVersionEnum getIpVersion() {
    return ipVersion;
  }

  public void setIpVersion(IpVersionEnum ipVersion) {
    this.ipVersion = ipVersion;
  }


  public Gateway labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Gateway putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Set of label tags associated with the Gateway resource.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Gateway name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Name of the Gateway resource. It matches pattern &#x60;projects/_*_/locations/_*_/gateways/&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Gateway network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Optional. The relative resource name identifying the VPC network that is using this configuration. For example: &#x60;projects/_*_/global/networks/network-1&#x60;. Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public Gateway ports(List<Integer> ports) {
    this.ports = ports;
    return this;
  }

  public Gateway addPortsItem(Integer portsItem) {
    if (this.ports == null) {
      this.ports = new ArrayList<>();
    }
    this.ports.add(portsItem);
    return this;
  }

  /**
   * Required. One or more port numbers (1-65535), on which the Gateway will receive traffic. The proxy binds to the specified ports. Gateways of type &#39;SECURE_WEB_GATEWAY&#39; are limited to 1 port. Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.
   * @return ports
   */
  @javax.annotation.Nullable
  public List<Integer> getPorts() {
    return ports;
  }

  public void setPorts(List<Integer> ports) {
    this.ports = ports;
  }


  public Gateway scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Optional. Scope determines how configuration across multiple Gateway instances are merged. The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer. Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  /**
   * Output only. Server-defined URL of this resource
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }



  public Gateway serverTlsPolicy(String serverTlsPolicy) {
    this.serverTlsPolicy = serverTlsPolicy;
    return this;
  }

  /**
   * Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
   * @return serverTlsPolicy
   */
  @javax.annotation.Nullable
  public String getServerTlsPolicy() {
    return serverTlsPolicy;
  }

  public void setServerTlsPolicy(String serverTlsPolicy) {
    this.serverTlsPolicy = serverTlsPolicy;
  }


  public Gateway subnetwork(String subnetwork) {
    this.subnetwork = subnetwork;
    return this;
  }

  /**
   * Optional. The relative resource name identifying the subnetwork in which this SWG is allocated. For example: &#x60;projects/_*_/regions/us-central1/subnetworks/network-1&#x60; Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY\&quot;.
   * @return subnetwork
   */
  @javax.annotation.Nullable
  public String getSubnetwork() {
    return subnetwork;
  }

  public void setSubnetwork(String subnetwork) {
    this.subnetwork = subnetwork;
  }


  public Gateway type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Immutable. The type of the customer managed gateway. This field is required. If unspecified, an error is returned.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. The timestamp when the resource was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Gateway gateway = (Gateway) o;
    return Objects.equals(this.addresses, gateway.addresses) &&
        Objects.equals(this.certificateUrls, gateway.certificateUrls) &&
        Objects.equals(this.createTime, gateway.createTime) &&
        Objects.equals(this.description, gateway.description) &&
        Objects.equals(this.envoyHeaders, gateway.envoyHeaders) &&
        Objects.equals(this.gatewaySecurityPolicy, gateway.gatewaySecurityPolicy) &&
        Objects.equals(this.ipVersion, gateway.ipVersion) &&
        Objects.equals(this.labels, gateway.labels) &&
        Objects.equals(this.name, gateway.name) &&
        Objects.equals(this.network, gateway.network) &&
        Objects.equals(this.ports, gateway.ports) &&
        Objects.equals(this.scope, gateway.scope) &&
        Objects.equals(this.selfLink, gateway.selfLink) &&
        Objects.equals(this.serverTlsPolicy, gateway.serverTlsPolicy) &&
        Objects.equals(this.subnetwork, gateway.subnetwork) &&
        Objects.equals(this.type, gateway.type) &&
        Objects.equals(this.updateTime, gateway.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, certificateUrls, createTime, description, envoyHeaders, gatewaySecurityPolicy, ipVersion, labels, name, network, ports, scope, selfLink, serverTlsPolicy, subnetwork, type, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Gateway {\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    certificateUrls: ").append(toIndentedString(certificateUrls)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    envoyHeaders: ").append(toIndentedString(envoyHeaders)).append("\n");
    sb.append("    gatewaySecurityPolicy: ").append(toIndentedString(gatewaySecurityPolicy)).append("\n");
    sb.append("    ipVersion: ").append(toIndentedString(ipVersion)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    serverTlsPolicy: ").append(toIndentedString(serverTlsPolicy)).append("\n");
    sb.append("    subnetwork: ").append(toIndentedString(subnetwork)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addresses");
    openapiFields.add("certificateUrls");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("envoyHeaders");
    openapiFields.add("gatewaySecurityPolicy");
    openapiFields.add("ipVersion");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("network");
    openapiFields.add("ports");
    openapiFields.add("scope");
    openapiFields.add("selfLink");
    openapiFields.add("serverTlsPolicy");
    openapiFields.add("subnetwork");
    openapiFields.add("type");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Gateway
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Gateway.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Gateway is not found in the empty JSON string", Gateway.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Gateway.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Gateway` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull() && !jsonObj.get("addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("certificateUrls") != null && !jsonObj.get("certificateUrls").isJsonNull() && !jsonObj.get("certificateUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateUrls` to be an array in the JSON string but got `%s`", jsonObj.get("certificateUrls").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("envoyHeaders") != null && !jsonObj.get("envoyHeaders").isJsonNull()) && !jsonObj.get("envoyHeaders").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `envoyHeaders` to be a primitive type in the JSON string but got `%s`", jsonObj.get("envoyHeaders").toString()));
      }
      // validate the optional field `envoyHeaders`
      if (jsonObj.get("envoyHeaders") != null && !jsonObj.get("envoyHeaders").isJsonNull()) {
        EnvoyHeadersEnum.validateJsonElement(jsonObj.get("envoyHeaders"));
      }
      if ((jsonObj.get("gatewaySecurityPolicy") != null && !jsonObj.get("gatewaySecurityPolicy").isJsonNull()) && !jsonObj.get("gatewaySecurityPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewaySecurityPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewaySecurityPolicy").toString()));
      }
      if ((jsonObj.get("ipVersion") != null && !jsonObj.get("ipVersion").isJsonNull()) && !jsonObj.get("ipVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipVersion").toString()));
      }
      // validate the optional field `ipVersion`
      if (jsonObj.get("ipVersion") != null && !jsonObj.get("ipVersion").isJsonNull()) {
        IpVersionEnum.validateJsonElement(jsonObj.get("ipVersion"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ports") != null && !jsonObj.get("ports").isJsonNull() && !jsonObj.get("ports").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ports` to be an array in the JSON string but got `%s`", jsonObj.get("ports").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("serverTlsPolicy") != null && !jsonObj.get("serverTlsPolicy").isJsonNull()) && !jsonObj.get("serverTlsPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverTlsPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverTlsPolicy").toString()));
      }
      if ((jsonObj.get("subnetwork") != null && !jsonObj.get("subnetwork").isJsonNull()) && !jsonObj.get("subnetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnetwork").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Gateway.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Gateway' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Gateway> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Gateway.class));

       return (TypeAdapter<T>) new TypeAdapter<Gateway>() {
           @Override
           public void write(JsonWriter out, Gateway value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Gateway read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Gateway given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Gateway
   * @throws IOException if the JSON string is invalid with respect to Gateway
   */
  public static Gateway fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Gateway.class);
  }

  /**
   * Convert an instance of Gateway to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

