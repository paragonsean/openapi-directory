/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.HttpRouteRouteRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HttpRoute is the resource defining how HTTP traffic should be routed by a Mesh or Gateway resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:40.871001-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpRoute {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GATEWAYS = "gateways";
  @SerializedName(SERIALIZED_NAME_GATEWAYS)
  private List<String> gateways = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOSTNAMES = "hostnames";
  @SerializedName(SERIALIZED_NAME_HOSTNAMES)
  private List<String> hostnames = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MESHES = "meshes";
  @SerializedName(SERIALIZED_NAME_MESHES)
  private List<String> meshes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<HttpRouteRouteRule> rules = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public HttpRoute() {
  }

  public HttpRoute(
     String createTime, 
     String selfLink, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.selfLink = selfLink;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public HttpRoute description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. A free-text description of the resource. Max length 1024 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public HttpRoute gateways(List<String> gateways) {
    this.gateways = gateways;
    return this;
  }

  public HttpRoute addGatewaysItem(String gatewaysItem) {
    if (this.gateways == null) {
      this.gateways = new ArrayList<>();
    }
    this.gateways.add(gatewaysItem);
    return this;
  }

  /**
   * Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: &#x60;projects/_*_/locations/global/gateways/&#x60;
   * @return gateways
   */
  @javax.annotation.Nullable
  public List<String> getGateways() {
    return gateways;
  }

  public void setGateways(List<String> gateways) {
    this.gateways = gateways;
  }


  public HttpRoute hostnames(List<String> hostnames) {
    this.hostnames = hostnames;
    return this;
  }

  public HttpRoute addHostnamesItem(String hostnamesItem) {
    if (this.hostnames == null) {
      this.hostnames = new ArrayList<>();
    }
    this.hostnames.add(hostnamesItem);
    return this;
  }

  /**
   * Required. Hostnames define a set of hosts that should match against the HTTP host header to select a HttpRoute to process the request. Hostname is the fully qualified domain name of a network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (&#x60;*.&#x60;). The wildcard label must appear by itself as the first label. Hostname can be \&quot;precise\&quot; which is a domain name without the terminating dot of a network host (e.g. &#x60;foo.example.com&#x60;) or \&quot;wildcard\&quot;, which is a domain name prefixed with a single wildcard label (e.g. &#x60;*.example.com&#x60;). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or &#39;-&#39;, and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames &#x60;*.foo.bar.com&#x60; and &#x60;*.bar.com&#x60; to be associated with the same Mesh (or Gateways under the same scope), it is not possible to associate two routes both with &#x60;*.bar.com&#x60; or both with &#x60;bar.com&#x60;.
   * @return hostnames
   */
  @javax.annotation.Nullable
  public List<String> getHostnames() {
    return hostnames;
  }

  public void setHostnames(List<String> hostnames) {
    this.hostnames = hostnames;
  }


  public HttpRoute labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public HttpRoute putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Set of label tags associated with the HttpRoute resource.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public HttpRoute meshes(List<String> meshes) {
    this.meshes = meshes;
    return this;
  }

  public HttpRoute addMeshesItem(String meshesItem) {
    if (this.meshes == null) {
      this.meshes = new ArrayList<>();
    }
    this.meshes.add(meshesItem);
    return this;
  }

  /**
   * Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: &#x60;projects/_*_/locations/global/meshes/&#x60; The attached Mesh should be of a type SIDECAR
   * @return meshes
   */
  @javax.annotation.Nullable
  public List<String> getMeshes() {
    return meshes;
  }

  public void setMeshes(List<String> meshes) {
    this.meshes = meshes;
  }


  public HttpRoute name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Name of the HttpRoute resource. It matches pattern &#x60;projects/_*_/locations/global/httpRoutes/http_route_name&gt;&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public HttpRoute rules(List<HttpRouteRouteRule> rules) {
    this.rules = rules;
    return this;
  }

  public HttpRoute addRulesItem(HttpRouteRouteRule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

  /**
   * Required. Rules that define how traffic is routed and handled. Rules will be matched sequentially based on the RouteMatch specified for the rule.
   * @return rules
   */
  @javax.annotation.Nullable
  public List<HttpRouteRouteRule> getRules() {
    return rules;
  }

  public void setRules(List<HttpRouteRouteRule> rules) {
    this.rules = rules;
  }


  /**
   * Output only. Server-defined URL of this resource
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }



  /**
   * Output only. The timestamp when the resource was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpRoute httpRoute = (HttpRoute) o;
    return Objects.equals(this.createTime, httpRoute.createTime) &&
        Objects.equals(this.description, httpRoute.description) &&
        Objects.equals(this.gateways, httpRoute.gateways) &&
        Objects.equals(this.hostnames, httpRoute.hostnames) &&
        Objects.equals(this.labels, httpRoute.labels) &&
        Objects.equals(this.meshes, httpRoute.meshes) &&
        Objects.equals(this.name, httpRoute.name) &&
        Objects.equals(this.rules, httpRoute.rules) &&
        Objects.equals(this.selfLink, httpRoute.selfLink) &&
        Objects.equals(this.updateTime, httpRoute.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, gateways, hostnames, labels, meshes, name, rules, selfLink, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpRoute {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gateways: ").append(toIndentedString(gateways)).append("\n");
    sb.append("    hostnames: ").append(toIndentedString(hostnames)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    meshes: ").append(toIndentedString(meshes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("gateways");
    openapiFields.add("hostnames");
    openapiFields.add("labels");
    openapiFields.add("meshes");
    openapiFields.add("name");
    openapiFields.add("rules");
    openapiFields.add("selfLink");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpRoute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpRoute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpRoute is not found in the empty JSON string", HttpRoute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpRoute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpRoute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gateways") != null && !jsonObj.get("gateways").isJsonNull() && !jsonObj.get("gateways").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gateways` to be an array in the JSON string but got `%s`", jsonObj.get("gateways").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hostnames") != null && !jsonObj.get("hostnames").isJsonNull() && !jsonObj.get("hostnames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostnames` to be an array in the JSON string but got `%s`", jsonObj.get("hostnames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("meshes") != null && !jsonObj.get("meshes").isJsonNull() && !jsonObj.get("meshes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `meshes` to be an array in the JSON string but got `%s`", jsonObj.get("meshes").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            HttpRouteRouteRule.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpRoute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpRoute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpRoute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpRoute.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpRoute>() {
           @Override
           public void write(JsonWriter out, HttpRoute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpRoute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpRoute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpRoute
   * @throws IOException if the JSON string is invalid with respect to HttpRoute
   */
  public static HttpRoute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpRoute.class);
  }

  /**
   * Convert an instance of HttpRoute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

