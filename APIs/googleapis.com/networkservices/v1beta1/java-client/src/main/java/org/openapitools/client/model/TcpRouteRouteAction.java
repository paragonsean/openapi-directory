/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TcpRouteRouteDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The specifications for routing traffic and applying associated policies.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:40.871001-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TcpRouteRouteAction {
  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<TcpRouteRouteDestination> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDLE_TIMEOUT = "idleTimeout";
  @SerializedName(SERIALIZED_NAME_IDLE_TIMEOUT)
  private String idleTimeout;

  public static final String SERIALIZED_NAME_ORIGINAL_DESTINATION = "originalDestination";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_DESTINATION)
  private Boolean originalDestination;

  public TcpRouteRouteAction() {
  }

  public TcpRouteRouteAction destinations(List<TcpRouteRouteDestination> destinations) {
    this.destinations = destinations;
    return this;
  }

  public TcpRouteRouteAction addDestinationsItem(TcpRouteRouteDestination destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * Optional. The destination services to which traffic should be forwarded. At least one destination service is required. Only one of route destination or original destination can be set.
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<TcpRouteRouteDestination> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<TcpRouteRouteDestination> destinations) {
    this.destinations = destinations;
  }


  public TcpRouteRouteAction idleTimeout(String idleTimeout) {
    this.idleTimeout = idleTimeout;
    return this;
  }

  /**
   * Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 30 seconds. If set to 0s, the timeout will be disabled.
   * @return idleTimeout
   */
  @javax.annotation.Nullable
  public String getIdleTimeout() {
    return idleTimeout;
  }

  public void setIdleTimeout(String idleTimeout) {
    this.idleTimeout = idleTimeout;
  }


  public TcpRouteRouteAction originalDestination(Boolean originalDestination) {
    this.originalDestination = originalDestination;
    return this;
  }

  /**
   * Optional. If true, Router will use the destination IP and port of the original connection as the destination of the request. Default is false. Only one of route destinations or original destination can be set.
   * @return originalDestination
   */
  @javax.annotation.Nullable
  public Boolean getOriginalDestination() {
    return originalDestination;
  }

  public void setOriginalDestination(Boolean originalDestination) {
    this.originalDestination = originalDestination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TcpRouteRouteAction tcpRouteRouteAction = (TcpRouteRouteAction) o;
    return Objects.equals(this.destinations, tcpRouteRouteAction.destinations) &&
        Objects.equals(this.idleTimeout, tcpRouteRouteAction.idleTimeout) &&
        Objects.equals(this.originalDestination, tcpRouteRouteAction.originalDestination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinations, idleTimeout, originalDestination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TcpRouteRouteAction {\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    idleTimeout: ").append(toIndentedString(idleTimeout)).append("\n");
    sb.append("    originalDestination: ").append(toIndentedString(originalDestination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinations");
    openapiFields.add("idleTimeout");
    openapiFields.add("originalDestination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TcpRouteRouteAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TcpRouteRouteAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TcpRouteRouteAction is not found in the empty JSON string", TcpRouteRouteAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TcpRouteRouteAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TcpRouteRouteAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            TcpRouteRouteDestination.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      if ((jsonObj.get("idleTimeout") != null && !jsonObj.get("idleTimeout").isJsonNull()) && !jsonObj.get("idleTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idleTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idleTimeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TcpRouteRouteAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TcpRouteRouteAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TcpRouteRouteAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TcpRouteRouteAction.class));

       return (TypeAdapter<T>) new TypeAdapter<TcpRouteRouteAction>() {
           @Override
           public void write(JsonWriter out, TcpRouteRouteAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TcpRouteRouteAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TcpRouteRouteAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TcpRouteRouteAction
   * @throws IOException if the JSON string is invalid with respect to TcpRouteRouteAction
   */
  public static TcpRouteRouteAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TcpRouteRouteAction.class);
  }

  /**
   * Convert an instance of TcpRouteRouteAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

