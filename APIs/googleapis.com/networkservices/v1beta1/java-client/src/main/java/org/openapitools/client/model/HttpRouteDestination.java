/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HttpRouteHeaderModifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifications of a destination to which the request should be routed to.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:40.871001-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpRouteDestination {
  public static final String SERIALIZED_NAME_REQUEST_HEADER_MODIFIER = "requestHeaderModifier";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADER_MODIFIER)
  private HttpRouteHeaderModifier requestHeaderModifier;

  public static final String SERIALIZED_NAME_RESPONSE_HEADER_MODIFIER = "responseHeaderModifier";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADER_MODIFIER)
  private HttpRouteHeaderModifier responseHeaderModifier;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public HttpRouteDestination() {
  }

  public HttpRouteDestination requestHeaderModifier(HttpRouteHeaderModifier requestHeaderModifier) {
    this.requestHeaderModifier = requestHeaderModifier;
    return this;
  }

  /**
   * Get requestHeaderModifier
   * @return requestHeaderModifier
   */
  @javax.annotation.Nullable
  public HttpRouteHeaderModifier getRequestHeaderModifier() {
    return requestHeaderModifier;
  }

  public void setRequestHeaderModifier(HttpRouteHeaderModifier requestHeaderModifier) {
    this.requestHeaderModifier = requestHeaderModifier;
  }


  public HttpRouteDestination responseHeaderModifier(HttpRouteHeaderModifier responseHeaderModifier) {
    this.responseHeaderModifier = responseHeaderModifier;
    return this;
  }

  /**
   * Get responseHeaderModifier
   * @return responseHeaderModifier
   */
  @javax.annotation.Nullable
  public HttpRouteHeaderModifier getResponseHeaderModifier() {
    return responseHeaderModifier;
  }

  public void setResponseHeaderModifier(HttpRouteHeaderModifier responseHeaderModifier) {
    this.responseHeaderModifier = responseHeaderModifier;
  }


  public HttpRouteDestination serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * The URL of a BackendService to route traffic to.
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public HttpRouteDestination weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: - weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpRouteDestination httpRouteDestination = (HttpRouteDestination) o;
    return Objects.equals(this.requestHeaderModifier, httpRouteDestination.requestHeaderModifier) &&
        Objects.equals(this.responseHeaderModifier, httpRouteDestination.responseHeaderModifier) &&
        Objects.equals(this.serviceName, httpRouteDestination.serviceName) &&
        Objects.equals(this.weight, httpRouteDestination.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestHeaderModifier, responseHeaderModifier, serviceName, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpRouteDestination {\n");
    sb.append("    requestHeaderModifier: ").append(toIndentedString(requestHeaderModifier)).append("\n");
    sb.append("    responseHeaderModifier: ").append(toIndentedString(responseHeaderModifier)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requestHeaderModifier");
    openapiFields.add("responseHeaderModifier");
    openapiFields.add("serviceName");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpRouteDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpRouteDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpRouteDestination is not found in the empty JSON string", HttpRouteDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpRouteDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpRouteDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `requestHeaderModifier`
      if (jsonObj.get("requestHeaderModifier") != null && !jsonObj.get("requestHeaderModifier").isJsonNull()) {
        HttpRouteHeaderModifier.validateJsonElement(jsonObj.get("requestHeaderModifier"));
      }
      // validate the optional field `responseHeaderModifier`
      if (jsonObj.get("responseHeaderModifier") != null && !jsonObj.get("responseHeaderModifier").isJsonNull()) {
        HttpRouteHeaderModifier.validateJsonElement(jsonObj.get("responseHeaderModifier"));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpRouteDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpRouteDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpRouteDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpRouteDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpRouteDestination>() {
           @Override
           public void write(JsonWriter out, HttpRouteDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpRouteDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpRouteDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpRouteDestination
   * @throws IOException if the JSON string is invalid with respect to HttpRouteDestination
   */
  public static HttpRouteDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpRouteDestination.class);
  }

  /**
   * Convert an instance of HttpRouteDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

