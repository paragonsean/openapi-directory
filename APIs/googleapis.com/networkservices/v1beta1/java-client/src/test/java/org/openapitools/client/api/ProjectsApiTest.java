/*
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EndpointPolicy;
import org.openapitools.client.model.Gateway;
import org.openapitools.client.model.GrpcRoute;
import org.openapitools.client.model.HttpRoute;
import org.openapitools.client.model.LbRouteExtension;
import org.openapitools.client.model.LbTrafficExtension;
import org.openapitools.client.model.ListEndpointPoliciesResponse;
import org.openapitools.client.model.ListGatewaysResponse;
import org.openapitools.client.model.ListGrpcRoutesResponse;
import org.openapitools.client.model.ListHttpRoutesResponse;
import org.openapitools.client.model.ListLbRouteExtensionsResponse;
import org.openapitools.client.model.ListLbTrafficExtensionsResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListMeshesResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListServiceBindingsResponse;
import org.openapitools.client.model.ListServiceLbPoliciesResponse;
import org.openapitools.client.model.ListTcpRoutesResponse;
import org.openapitools.client.model.ListTlsRoutesResponse;
import org.openapitools.client.model.Mesh;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.ServiceBinding;
import org.openapitools.client.model.ServiceLbPolicy;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TcpRoute;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.openapitools.client.model.TlsRoute;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new EndpointPolicy in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsEndpointPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String endpointPolicyId = null;
        EndpointPolicy endpointPolicy = null;
        Operation response = api.networkservicesProjectsLocationsEndpointPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endpointPolicyId, endpointPolicy);
        // TODO: test validations
    }

    /**
     * Lists EndpointPolicies in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsEndpointPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListEndpointPoliciesResponse response = api.networkservicesProjectsLocationsEndpointPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new Gateway in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsGatewaysCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String gatewayId = null;
        Gateway gateway = null;
        Operation response = api.networkservicesProjectsLocationsGatewaysCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, gatewayId, gateway);
        // TODO: test validations
    }

    /**
     * Lists Gateways in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsGatewaysListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListGatewaysResponse response = api.networkservicesProjectsLocationsGatewaysList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new GrpcRoute in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsGrpcRoutesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String grpcRouteId = null;
        GrpcRoute grpcRoute = null;
        Operation response = api.networkservicesProjectsLocationsGrpcRoutesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, grpcRouteId, grpcRoute);
        // TODO: test validations
    }

    /**
     * Lists GrpcRoutes in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsGrpcRoutesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListGrpcRoutesResponse response = api.networkservicesProjectsLocationsGrpcRoutesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new HttpRoute in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsHttpRoutesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String httpRouteId = null;
        HttpRoute httpRoute = null;
        Operation response = api.networkservicesProjectsLocationsHttpRoutesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, httpRouteId, httpRoute);
        // TODO: test validations
    }

    /**
     * Lists HttpRoute in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsHttpRoutesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListHttpRoutesResponse response = api.networkservicesProjectsLocationsHttpRoutesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new &#x60;LbRouteExtension&#x60; resource in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsLbRouteExtensionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String lbRouteExtensionId = null;
        String requestId = null;
        LbRouteExtension lbRouteExtension = null;
        Operation response = api.networkservicesProjectsLocationsLbRouteExtensionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, lbRouteExtensionId, requestId, lbRouteExtension);
        // TODO: test validations
    }

    /**
     * Lists &#x60;LbRouteExtension&#x60; resources in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsLbRouteExtensionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLbRouteExtensionsResponse response = api.networkservicesProjectsLocationsLbRouteExtensionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new &#x60;LbTrafficExtension&#x60; resource in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsLbTrafficExtensionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String lbTrafficExtensionId = null;
        String requestId = null;
        LbTrafficExtension lbTrafficExtension = null;
        Operation response = api.networkservicesProjectsLocationsLbTrafficExtensionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, lbTrafficExtensionId, requestId, lbTrafficExtension);
        // TODO: test validations
    }

    /**
     * Lists &#x60;LbTrafficExtension&#x60; resources in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsLbTrafficExtensionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLbTrafficExtensionsResponse response = api.networkservicesProjectsLocationsLbTrafficExtensionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.networkservicesProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new Mesh in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsMeshesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String meshId = null;
        Mesh mesh = null;
        Operation response = api.networkservicesProjectsLocationsMeshesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, meshId, mesh);
        // TODO: test validations
    }

    /**
     * Lists Meshes in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsMeshesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListMeshesResponse response = api.networkservicesProjectsLocationsMeshesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.networkservicesProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.networkservicesProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new ServiceBinding in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsServiceBindingsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String serviceBindingId = null;
        ServiceBinding serviceBinding = null;
        Operation response = api.networkservicesProjectsLocationsServiceBindingsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, serviceBindingId, serviceBinding);
        // TODO: test validations
    }

    /**
     * Lists ServiceBinding in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsServiceBindingsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServiceBindingsResponse response = api.networkservicesProjectsLocationsServiceBindingsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new ServiceLbPolicy in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsServiceLbPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String serviceLbPolicyId = null;
        ServiceLbPolicy serviceLbPolicy = null;
        Operation response = api.networkservicesProjectsLocationsServiceLbPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, serviceLbPolicyId, serviceLbPolicy);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsServiceLbPoliciesGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        Policy response = api.networkservicesProjectsLocationsServiceLbPoliciesGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Lists ServiceLbPolicies in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsServiceLbPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServiceLbPoliciesResponse response = api.networkservicesProjectsLocationsServiceLbPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsServiceLbPoliciesSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.networkservicesProjectsLocationsServiceLbPoliciesSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsServiceLbPoliciesTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.networkservicesProjectsLocationsServiceLbPoliciesTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Creates a new TcpRoute in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsTcpRoutesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String tcpRouteId = null;
        TcpRoute tcpRoute = null;
        Operation response = api.networkservicesProjectsLocationsTcpRoutesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, tcpRouteId, tcpRoute);
        // TODO: test validations
    }

    /**
     * Lists TcpRoute in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsTcpRoutesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTcpRoutesResponse response = api.networkservicesProjectsLocationsTcpRoutesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new TlsRoute in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsTlsRoutesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String tlsRouteId = null;
        TlsRoute tlsRoute = null;
        Operation response = api.networkservicesProjectsLocationsTlsRoutesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, tlsRouteId, tlsRoute);
        // TODO: test validations
    }

    /**
     * Deletes a single TlsRoute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsTlsRoutesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        Operation response = api.networkservicesProjectsLocationsTlsRoutesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId);
        // TODO: test validations
    }

    /**
     * Gets details of a single TlsRoute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsTlsRoutesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TlsRoute response = api.networkservicesProjectsLocationsTlsRoutesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists TlsRoute in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsTlsRoutesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTlsRoutesResponse response = api.networkservicesProjectsLocationsTlsRoutesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single TlsRoute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkservicesProjectsLocationsTlsRoutesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        TlsRoute tlsRoute = null;
        Operation response = api.networkservicesProjectsLocationsTlsRoutesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, tlsRoute);
        // TODO: test validations
    }

}
