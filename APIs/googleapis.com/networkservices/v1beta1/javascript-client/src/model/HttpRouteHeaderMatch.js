/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HttpRouteHeaderMatchIntegerRange from './HttpRouteHeaderMatchIntegerRange';

/**
 * The HttpRouteHeaderMatch model module.
 * @module model/HttpRouteHeaderMatch
 * @version v1beta1
 */
class HttpRouteHeaderMatch {
    /**
     * Constructs a new <code>HttpRouteHeaderMatch</code>.
     * Specifies how to select a route rule based on HTTP request headers.
     * @alias module:model/HttpRouteHeaderMatch
     */
    constructor() { 
        
        HttpRouteHeaderMatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpRouteHeaderMatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpRouteHeaderMatch} obj Optional instance to populate.
     * @return {module:model/HttpRouteHeaderMatch} The populated <code>HttpRouteHeaderMatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpRouteHeaderMatch();

            if (data.hasOwnProperty('exactMatch')) {
                obj['exactMatch'] = ApiClient.convertToType(data['exactMatch'], 'String');
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], 'String');
            }
            if (data.hasOwnProperty('invertMatch')) {
                obj['invertMatch'] = ApiClient.convertToType(data['invertMatch'], 'Boolean');
            }
            if (data.hasOwnProperty('prefixMatch')) {
                obj['prefixMatch'] = ApiClient.convertToType(data['prefixMatch'], 'String');
            }
            if (data.hasOwnProperty('presentMatch')) {
                obj['presentMatch'] = ApiClient.convertToType(data['presentMatch'], 'Boolean');
            }
            if (data.hasOwnProperty('rangeMatch')) {
                obj['rangeMatch'] = HttpRouteHeaderMatchIntegerRange.constructFromObject(data['rangeMatch']);
            }
            if (data.hasOwnProperty('regexMatch')) {
                obj['regexMatch'] = ApiClient.convertToType(data['regexMatch'], 'String');
            }
            if (data.hasOwnProperty('suffixMatch')) {
                obj['suffixMatch'] = ApiClient.convertToType(data['suffixMatch'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpRouteHeaderMatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpRouteHeaderMatch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['exactMatch'] && !(typeof data['exactMatch'] === 'string' || data['exactMatch'] instanceof String)) {
            throw new Error("Expected the field `exactMatch` to be a primitive type in the JSON string but got " + data['exactMatch']);
        }
        // ensure the json data is a string
        if (data['header'] && !(typeof data['header'] === 'string' || data['header'] instanceof String)) {
            throw new Error("Expected the field `header` to be a primitive type in the JSON string but got " + data['header']);
        }
        // ensure the json data is a string
        if (data['prefixMatch'] && !(typeof data['prefixMatch'] === 'string' || data['prefixMatch'] instanceof String)) {
            throw new Error("Expected the field `prefixMatch` to be a primitive type in the JSON string but got " + data['prefixMatch']);
        }
        // validate the optional field `rangeMatch`
        if (data['rangeMatch']) { // data not null
          HttpRouteHeaderMatchIntegerRange.validateJSON(data['rangeMatch']);
        }
        // ensure the json data is a string
        if (data['regexMatch'] && !(typeof data['regexMatch'] === 'string' || data['regexMatch'] instanceof String)) {
            throw new Error("Expected the field `regexMatch` to be a primitive type in the JSON string but got " + data['regexMatch']);
        }
        // ensure the json data is a string
        if (data['suffixMatch'] && !(typeof data['suffixMatch'] === 'string' || data['suffixMatch'] instanceof String)) {
            throw new Error("Expected the field `suffixMatch` to be a primitive type in the JSON string but got " + data['suffixMatch']);
        }

        return true;
    }


}



/**
 * The value of the header should match exactly the content of exact_match.
 * @member {String} exactMatch
 */
HttpRouteHeaderMatch.prototype['exactMatch'] = undefined;

/**
 * The name of the HTTP header to match against.
 * @member {String} header
 */
HttpRouteHeaderMatch.prototype['header'] = undefined;

/**
 * If specified, the match result will be inverted before checking. Default value is set to false.
 * @member {Boolean} invertMatch
 */
HttpRouteHeaderMatch.prototype['invertMatch'] = undefined;

/**
 * The value of the header must start with the contents of prefix_match.
 * @member {String} prefixMatch
 */
HttpRouteHeaderMatch.prototype['prefixMatch'] = undefined;

/**
 * A header with header_name must exist. The match takes place whether or not the header has a value.
 * @member {Boolean} presentMatch
 */
HttpRouteHeaderMatch.prototype['presentMatch'] = undefined;

/**
 * @member {module:model/HttpRouteHeaderMatchIntegerRange} rangeMatch
 */
HttpRouteHeaderMatch.prototype['rangeMatch'] = undefined;

/**
 * The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax
 * @member {String} regexMatch
 */
HttpRouteHeaderMatch.prototype['regexMatch'] = undefined;

/**
 * The value of the header must end with the contents of suffix_match.
 * @member {String} suffixMatch
 */
HttpRouteHeaderMatch.prototype['suffixMatch'] = undefined;






export default HttpRouteHeaderMatch;

