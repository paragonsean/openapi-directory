/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TcpRouteRouteDestination from './TcpRouteRouteDestination';

/**
 * The TcpRouteRouteAction model module.
 * @module model/TcpRouteRouteAction
 * @version v1beta1
 */
class TcpRouteRouteAction {
    /**
     * Constructs a new <code>TcpRouteRouteAction</code>.
     * The specifications for routing traffic and applying associated policies.
     * @alias module:model/TcpRouteRouteAction
     */
    constructor() { 
        
        TcpRouteRouteAction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TcpRouteRouteAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TcpRouteRouteAction} obj Optional instance to populate.
     * @return {module:model/TcpRouteRouteAction} The populated <code>TcpRouteRouteAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TcpRouteRouteAction();

            if (data.hasOwnProperty('destinations')) {
                obj['destinations'] = ApiClient.convertToType(data['destinations'], [TcpRouteRouteDestination]);
            }
            if (data.hasOwnProperty('idleTimeout')) {
                obj['idleTimeout'] = ApiClient.convertToType(data['idleTimeout'], 'String');
            }
            if (data.hasOwnProperty('originalDestination')) {
                obj['originalDestination'] = ApiClient.convertToType(data['originalDestination'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TcpRouteRouteAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TcpRouteRouteAction</code>.
     */
    static validateJSON(data) {
        if (data['destinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destinations'])) {
                throw new Error("Expected the field `destinations` to be an array in the JSON data but got " + data['destinations']);
            }
            // validate the optional field `destinations` (array)
            for (const item of data['destinations']) {
                TcpRouteRouteDestination.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['idleTimeout'] && !(typeof data['idleTimeout'] === 'string' || data['idleTimeout'] instanceof String)) {
            throw new Error("Expected the field `idleTimeout` to be a primitive type in the JSON string but got " + data['idleTimeout']);
        }

        return true;
    }


}



/**
 * Optional. The destination services to which traffic should be forwarded. At least one destination service is required. Only one of route destination or original destination can be set.
 * @member {Array.<module:model/TcpRouteRouteDestination>} destinations
 */
TcpRouteRouteAction.prototype['destinations'] = undefined;

/**
 * Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 30 seconds. If set to 0s, the timeout will be disabled.
 * @member {String} idleTimeout
 */
TcpRouteRouteAction.prototype['idleTimeout'] = undefined;

/**
 * Optional. If true, Router will use the destination IP and port of the original connection as the destination of the request. Default is false. Only one of route destinations or original destination can be set.
 * @member {Boolean} originalDestination
 */
TcpRouteRouteAction.prototype['originalDestination'] = undefined;






export default TcpRouteRouteAction;

