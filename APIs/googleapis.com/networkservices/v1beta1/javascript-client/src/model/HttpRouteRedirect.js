/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HttpRouteRedirect model module.
 * @module model/HttpRouteRedirect
 * @version v1beta1
 */
class HttpRouteRedirect {
    /**
     * Constructs a new <code>HttpRouteRedirect</code>.
     * The specification for redirecting traffic.
     * @alias module:model/HttpRouteRedirect
     */
    constructor() { 
        
        HttpRouteRedirect.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpRouteRedirect</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpRouteRedirect} obj Optional instance to populate.
     * @return {module:model/HttpRouteRedirect} The populated <code>HttpRouteRedirect</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpRouteRedirect();

            if (data.hasOwnProperty('hostRedirect')) {
                obj['hostRedirect'] = ApiClient.convertToType(data['hostRedirect'], 'String');
            }
            if (data.hasOwnProperty('httpsRedirect')) {
                obj['httpsRedirect'] = ApiClient.convertToType(data['httpsRedirect'], 'Boolean');
            }
            if (data.hasOwnProperty('pathRedirect')) {
                obj['pathRedirect'] = ApiClient.convertToType(data['pathRedirect'], 'String');
            }
            if (data.hasOwnProperty('portRedirect')) {
                obj['portRedirect'] = ApiClient.convertToType(data['portRedirect'], 'Number');
            }
            if (data.hasOwnProperty('prefixRewrite')) {
                obj['prefixRewrite'] = ApiClient.convertToType(data['prefixRewrite'], 'String');
            }
            if (data.hasOwnProperty('responseCode')) {
                obj['responseCode'] = ApiClient.convertToType(data['responseCode'], 'String');
            }
            if (data.hasOwnProperty('stripQuery')) {
                obj['stripQuery'] = ApiClient.convertToType(data['stripQuery'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpRouteRedirect</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpRouteRedirect</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hostRedirect'] && !(typeof data['hostRedirect'] === 'string' || data['hostRedirect'] instanceof String)) {
            throw new Error("Expected the field `hostRedirect` to be a primitive type in the JSON string but got " + data['hostRedirect']);
        }
        // ensure the json data is a string
        if (data['pathRedirect'] && !(typeof data['pathRedirect'] === 'string' || data['pathRedirect'] instanceof String)) {
            throw new Error("Expected the field `pathRedirect` to be a primitive type in the JSON string but got " + data['pathRedirect']);
        }
        // ensure the json data is a string
        if (data['prefixRewrite'] && !(typeof data['prefixRewrite'] === 'string' || data['prefixRewrite'] instanceof String)) {
            throw new Error("Expected the field `prefixRewrite` to be a primitive type in the JSON string but got " + data['prefixRewrite']);
        }
        // ensure the json data is a string
        if (data['responseCode'] && !(typeof data['responseCode'] === 'string' || data['responseCode'] instanceof String)) {
            throw new Error("Expected the field `responseCode` to be a primitive type in the JSON string but got " + data['responseCode']);
        }

        return true;
    }


}



/**
 * The host that will be used in the redirect response instead of the one that was supplied in the request.
 * @member {String} hostRedirect
 */
HttpRouteRedirect.prototype['hostRedirect'] = undefined;

/**
 * If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.
 * @member {Boolean} httpsRedirect
 */
HttpRouteRedirect.prototype['httpsRedirect'] = undefined;

/**
 * The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
 * @member {String} pathRedirect
 */
HttpRouteRedirect.prototype['pathRedirect'] = undefined;

/**
 * The port that will be used in the redirected request instead of the one that was supplied in the request.
 * @member {Number} portRedirect
 */
HttpRouteRedirect.prototype['portRedirect'] = undefined;

/**
 * Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.
 * @member {String} prefixRewrite
 */
HttpRouteRedirect.prototype['prefixRewrite'] = undefined;

/**
 * The HTTP Status code to use for the redirect.
 * @member {module:model/HttpRouteRedirect.ResponseCodeEnum} responseCode
 */
HttpRouteRedirect.prototype['responseCode'] = undefined;

/**
 * if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
 * @member {Boolean} stripQuery
 */
HttpRouteRedirect.prototype['stripQuery'] = undefined;





/**
 * Allowed values for the <code>responseCode</code> property.
 * @enum {String}
 * @readonly
 */
HttpRouteRedirect['ResponseCodeEnum'] = {

    /**
     * value: "RESPONSE_CODE_UNSPECIFIED"
     * @const
     */
    "RESPONSE_CODE_UNSPECIFIED": "RESPONSE_CODE_UNSPECIFIED",

    /**
     * value: "MOVED_PERMANENTLY_DEFAULT"
     * @const
     */
    "MOVED_PERMANENTLY_DEFAULT": "MOVED_PERMANENTLY_DEFAULT",

    /**
     * value: "FOUND"
     * @const
     */
    "FOUND": "FOUND",

    /**
     * value: "SEE_OTHER"
     * @const
     */
    "SEE_OTHER": "SEE_OTHER",

    /**
     * value: "TEMPORARY_REDIRECT"
     * @const
     */
    "TEMPORARY_REDIRECT": "TEMPORARY_REDIRECT",

    /**
     * value: "PERMANENT_REDIRECT"
     * @const
     */
    "PERMANENT_REDIRECT": "PERMANENT_REDIRECT"
};



export default HttpRouteRedirect;

