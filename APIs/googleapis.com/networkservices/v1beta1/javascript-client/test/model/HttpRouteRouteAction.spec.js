/**
 * Network Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetworkServicesApi);
  }
}(this, function(expect, NetworkServicesApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetworkServicesApi.HttpRouteRouteAction();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HttpRouteRouteAction', function() {
    it('should create an instance of HttpRouteRouteAction', function() {
      // uncomment below and update the code to test HttpRouteRouteAction
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be.a(NetworkServicesApi.HttpRouteRouteAction);
    });

    it('should have the property corsPolicy (base name: "corsPolicy")', function() {
      // uncomment below and update the code to test the property corsPolicy
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

    it('should have the property destinations (base name: "destinations")', function() {
      // uncomment below and update the code to test the property destinations
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

    it('should have the property directResponse (base name: "directResponse")', function() {
      // uncomment below and update the code to test the property directResponse
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

    it('should have the property faultInjectionPolicy (base name: "faultInjectionPolicy")', function() {
      // uncomment below and update the code to test the property faultInjectionPolicy
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

    it('should have the property idleTimeout (base name: "idleTimeout")', function() {
      // uncomment below and update the code to test the property idleTimeout
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

    it('should have the property redirect (base name: "redirect")', function() {
      // uncomment below and update the code to test the property redirect
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

    it('should have the property requestHeaderModifier (base name: "requestHeaderModifier")', function() {
      // uncomment below and update the code to test the property requestHeaderModifier
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

    it('should have the property requestMirrorPolicy (base name: "requestMirrorPolicy")', function() {
      // uncomment below and update the code to test the property requestMirrorPolicy
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

    it('should have the property responseHeaderModifier (base name: "responseHeaderModifier")', function() {
      // uncomment below and update the code to test the property responseHeaderModifier
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

    it('should have the property retryPolicy (base name: "retryPolicy")', function() {
      // uncomment below and update the code to test the property retryPolicy
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

    it('should have the property statefulSessionAffinity (base name: "statefulSessionAffinity")', function() {
      // uncomment below and update the code to test the property statefulSessionAffinity
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

    it('should have the property timeout (base name: "timeout")', function() {
      // uncomment below and update the code to test the property timeout
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

    it('should have the property urlRewrite (base name: "urlRewrite")', function() {
      // uncomment below and update the code to test the property urlRewrite
      //var instance = new NetworkServicesApi.HttpRouteRouteAction();
      //expect(instance).to.be();
    });

  });

}));
