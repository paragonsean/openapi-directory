# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HttpRouteRedirect(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_redirect: str=None, https_redirect: bool=None, path_redirect: str=None, port_redirect: int=None, prefix_rewrite: str=None, response_code: str=None, strip_query: bool=None):
        """HttpRouteRedirect - a model defined in OpenAPI

        :param host_redirect: The host_redirect of this HttpRouteRedirect.
        :param https_redirect: The https_redirect of this HttpRouteRedirect.
        :param path_redirect: The path_redirect of this HttpRouteRedirect.
        :param port_redirect: The port_redirect of this HttpRouteRedirect.
        :param prefix_rewrite: The prefix_rewrite of this HttpRouteRedirect.
        :param response_code: The response_code of this HttpRouteRedirect.
        :param strip_query: The strip_query of this HttpRouteRedirect.
        """
        self.openapi_types = {
            'host_redirect': str,
            'https_redirect': bool,
            'path_redirect': str,
            'port_redirect': int,
            'prefix_rewrite': str,
            'response_code': str,
            'strip_query': bool
        }

        self.attribute_map = {
            'host_redirect': 'hostRedirect',
            'https_redirect': 'httpsRedirect',
            'path_redirect': 'pathRedirect',
            'port_redirect': 'portRedirect',
            'prefix_rewrite': 'prefixRewrite',
            'response_code': 'responseCode',
            'strip_query': 'stripQuery'
        }

        self._host_redirect = host_redirect
        self._https_redirect = https_redirect
        self._path_redirect = path_redirect
        self._port_redirect = port_redirect
        self._prefix_rewrite = prefix_rewrite
        self._response_code = response_code
        self._strip_query = strip_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteRedirect':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRouteRedirect of this HttpRouteRedirect.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_redirect(self):
        """Gets the host_redirect of this HttpRouteRedirect.

        The host that will be used in the redirect response instead of the one that was supplied in the request.

        :return: The host_redirect of this HttpRouteRedirect.
        :rtype: str
        """
        return self._host_redirect

    @host_redirect.setter
    def host_redirect(self, host_redirect):
        """Sets the host_redirect of this HttpRouteRedirect.

        The host that will be used in the redirect response instead of the one that was supplied in the request.

        :param host_redirect: The host_redirect of this HttpRouteRedirect.
        :type host_redirect: str
        """

        self._host_redirect = host_redirect

    @property
    def https_redirect(self):
        """Gets the https_redirect of this HttpRouteRedirect.

        If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.

        :return: The https_redirect of this HttpRouteRedirect.
        :rtype: bool
        """
        return self._https_redirect

    @https_redirect.setter
    def https_redirect(self, https_redirect):
        """Sets the https_redirect of this HttpRouteRedirect.

        If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.

        :param https_redirect: The https_redirect of this HttpRouteRedirect.
        :type https_redirect: bool
        """

        self._https_redirect = https_redirect

    @property
    def path_redirect(self):
        """Gets the path_redirect of this HttpRouteRedirect.

        The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.

        :return: The path_redirect of this HttpRouteRedirect.
        :rtype: str
        """
        return self._path_redirect

    @path_redirect.setter
    def path_redirect(self, path_redirect):
        """Sets the path_redirect of this HttpRouteRedirect.

        The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.

        :param path_redirect: The path_redirect of this HttpRouteRedirect.
        :type path_redirect: str
        """

        self._path_redirect = path_redirect

    @property
    def port_redirect(self):
        """Gets the port_redirect of this HttpRouteRedirect.

        The port that will be used in the redirected request instead of the one that was supplied in the request.

        :return: The port_redirect of this HttpRouteRedirect.
        :rtype: int
        """
        return self._port_redirect

    @port_redirect.setter
    def port_redirect(self, port_redirect):
        """Sets the port_redirect of this HttpRouteRedirect.

        The port that will be used in the redirected request instead of the one that was supplied in the request.

        :param port_redirect: The port_redirect of this HttpRouteRedirect.
        :type port_redirect: int
        """

        self._port_redirect = port_redirect

    @property
    def prefix_rewrite(self):
        """Gets the prefix_rewrite of this HttpRouteRedirect.

        Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.

        :return: The prefix_rewrite of this HttpRouteRedirect.
        :rtype: str
        """
        return self._prefix_rewrite

    @prefix_rewrite.setter
    def prefix_rewrite(self, prefix_rewrite):
        """Sets the prefix_rewrite of this HttpRouteRedirect.

        Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.

        :param prefix_rewrite: The prefix_rewrite of this HttpRouteRedirect.
        :type prefix_rewrite: str
        """

        self._prefix_rewrite = prefix_rewrite

    @property
    def response_code(self):
        """Gets the response_code of this HttpRouteRedirect.

        The HTTP Status code to use for the redirect.

        :return: The response_code of this HttpRouteRedirect.
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this HttpRouteRedirect.

        The HTTP Status code to use for the redirect.

        :param response_code: The response_code of this HttpRouteRedirect.
        :type response_code: str
        """
        allowed_values = ["RESPONSE_CODE_UNSPECIFIED", "MOVED_PERMANENTLY_DEFAULT", "FOUND", "SEE_OTHER", "TEMPORARY_REDIRECT", "PERMANENT_REDIRECT"]  # noqa: E501
        if response_code not in allowed_values:
            raise ValueError(
                "Invalid value for `response_code` ({0}), must be one of {1}"
                .format(response_code, allowed_values)
            )

        self._response_code = response_code

    @property
    def strip_query(self):
        """Gets the strip_query of this HttpRouteRedirect.

        if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.

        :return: The strip_query of this HttpRouteRedirect.
        :rtype: bool
        """
        return self._strip_query

    @strip_query.setter
    def strip_query(self, strip_query):
        """Sets the strip_query of this HttpRouteRedirect.

        if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.

        :param strip_query: The strip_query of this HttpRouteRedirect.
        :type strip_query: bool
        """

        self._strip_query = strip_query
