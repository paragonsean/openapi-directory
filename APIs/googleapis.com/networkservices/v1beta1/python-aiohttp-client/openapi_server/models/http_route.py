# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_route_route_rule import HttpRouteRouteRule
from openapi_server import util


class HttpRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, gateways: List[str]=None, hostnames: List[str]=None, labels: Dict[str, str]=None, meshes: List[str]=None, name: str=None, rules: List[HttpRouteRouteRule]=None, self_link: str=None, update_time: str=None):
        """HttpRoute - a model defined in OpenAPI

        :param create_time: The create_time of this HttpRoute.
        :param description: The description of this HttpRoute.
        :param gateways: The gateways of this HttpRoute.
        :param hostnames: The hostnames of this HttpRoute.
        :param labels: The labels of this HttpRoute.
        :param meshes: The meshes of this HttpRoute.
        :param name: The name of this HttpRoute.
        :param rules: The rules of this HttpRoute.
        :param self_link: The self_link of this HttpRoute.
        :param update_time: The update_time of this HttpRoute.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'gateways': List[str],
            'hostnames': List[str],
            'labels': Dict[str, str],
            'meshes': List[str],
            'name': str,
            'rules': List[HttpRouteRouteRule],
            'self_link': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'gateways': 'gateways',
            'hostnames': 'hostnames',
            'labels': 'labels',
            'meshes': 'meshes',
            'name': 'name',
            'rules': 'rules',
            'self_link': 'selfLink',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._gateways = gateways
        self._hostnames = hostnames
        self._labels = labels
        self._meshes = meshes
        self._name = name
        self._rules = rules
        self._self_link = self_link
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRoute of this HttpRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this HttpRoute.

        Output only. The timestamp when the resource was created.

        :return: The create_time of this HttpRoute.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this HttpRoute.

        Output only. The timestamp when the resource was created.

        :param create_time: The create_time of this HttpRoute.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this HttpRoute.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :return: The description of this HttpRoute.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HttpRoute.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :param description: The description of this HttpRoute.
        :type description: str
        """

        self._description = description

    @property
    def gateways(self):
        """Gets the gateways of this HttpRoute.

        Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`

        :return: The gateways of this HttpRoute.
        :rtype: List[str]
        """
        return self._gateways

    @gateways.setter
    def gateways(self, gateways):
        """Sets the gateways of this HttpRoute.

        Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`

        :param gateways: The gateways of this HttpRoute.
        :type gateways: List[str]
        """

        self._gateways = gateways

    @property
    def hostnames(self):
        """Gets the hostnames of this HttpRoute.

        Required. Hostnames define a set of hosts that should match against the HTTP host header to select a HttpRoute to process the request. Hostname is the fully qualified domain name of a network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. Hostname can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. `foo.example.com`) or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same Mesh (or Gateways under the same scope), it is not possible to associate two routes both with `*.bar.com` or both with `bar.com`.

        :return: The hostnames of this HttpRoute.
        :rtype: List[str]
        """
        return self._hostnames

    @hostnames.setter
    def hostnames(self, hostnames):
        """Sets the hostnames of this HttpRoute.

        Required. Hostnames define a set of hosts that should match against the HTTP host header to select a HttpRoute to process the request. Hostname is the fully qualified domain name of a network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. Hostname can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. `foo.example.com`) or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same Mesh (or Gateways under the same scope), it is not possible to associate two routes both with `*.bar.com` or both with `bar.com`.

        :param hostnames: The hostnames of this HttpRoute.
        :type hostnames: List[str]
        """

        self._hostnames = hostnames

    @property
    def labels(self):
        """Gets the labels of this HttpRoute.

        Optional. Set of label tags associated with the HttpRoute resource.

        :return: The labels of this HttpRoute.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this HttpRoute.

        Optional. Set of label tags associated with the HttpRoute resource.

        :param labels: The labels of this HttpRoute.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def meshes(self):
        """Gets the meshes of this HttpRoute.

        Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR

        :return: The meshes of this HttpRoute.
        :rtype: List[str]
        """
        return self._meshes

    @meshes.setter
    def meshes(self, meshes):
        """Sets the meshes of this HttpRoute.

        Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR

        :param meshes: The meshes of this HttpRoute.
        :type meshes: List[str]
        """

        self._meshes = meshes

    @property
    def name(self):
        """Gets the name of this HttpRoute.

        Required. Name of the HttpRoute resource. It matches pattern `projects/*/locations/global/httpRoutes/http_route_name>`.

        :return: The name of this HttpRoute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HttpRoute.

        Required. Name of the HttpRoute resource. It matches pattern `projects/*/locations/global/httpRoutes/http_route_name>`.

        :param name: The name of this HttpRoute.
        :type name: str
        """

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this HttpRoute.

        Required. Rules that define how traffic is routed and handled. Rules will be matched sequentially based on the RouteMatch specified for the rule.

        :return: The rules of this HttpRoute.
        :rtype: List[HttpRouteRouteRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this HttpRoute.

        Required. Rules that define how traffic is routed and handled. Rules will be matched sequentially based on the RouteMatch specified for the rule.

        :param rules: The rules of this HttpRoute.
        :type rules: List[HttpRouteRouteRule]
        """

        self._rules = rules

    @property
    def self_link(self):
        """Gets the self_link of this HttpRoute.

        Output only. Server-defined URL of this resource

        :return: The self_link of this HttpRoute.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this HttpRoute.

        Output only. Server-defined URL of this resource

        :param self_link: The self_link of this HttpRoute.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def update_time(self):
        """Gets the update_time of this HttpRoute.

        Output only. The timestamp when the resource was updated.

        :return: The update_time of this HttpRoute.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this HttpRoute.

        Output only. The timestamp when the resource was updated.

        :param update_time: The update_time of this HttpRoute.
        :type update_time: str
        """

        self._update_time = update_time
