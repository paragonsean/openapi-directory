# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_route_route_action import HttpRouteRouteAction
from openapi_server.models.http_route_route_match import HttpRouteRouteMatch
from openapi_server import util


class HttpRouteRouteRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: HttpRouteRouteAction=None, matches: List[HttpRouteRouteMatch]=None):
        """HttpRouteRouteRule - a model defined in OpenAPI

        :param action: The action of this HttpRouteRouteRule.
        :param matches: The matches of this HttpRouteRouteRule.
        """
        self.openapi_types = {
            'action': HttpRouteRouteAction,
            'matches': List[HttpRouteRouteMatch]
        }

        self.attribute_map = {
            'action': 'action',
            'matches': 'matches'
        }

        self._action = action
        self._matches = matches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteRouteRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRouteRouteRule of this HttpRouteRouteRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this HttpRouteRouteRule.


        :return: The action of this HttpRouteRouteRule.
        :rtype: HttpRouteRouteAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this HttpRouteRouteRule.


        :param action: The action of this HttpRouteRouteRule.
        :type action: HttpRouteRouteAction
        """

        self._action = action

    @property
    def matches(self):
        """Gets the matches of this HttpRouteRouteRule.

        A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.

        :return: The matches of this HttpRouteRouteRule.
        :rtype: List[HttpRouteRouteMatch]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this HttpRouteRouteRule.

        A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.

        :param matches: The matches of this HttpRouteRouteRule.
        :type matches: List[HttpRouteRouteMatch]
        """

        self._matches = matches
