# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grpc_route_route_rule import GrpcRouteRouteRule
from openapi_server import util


class GrpcRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, gateways: List[str]=None, hostnames: List[str]=None, labels: Dict[str, str]=None, meshes: List[str]=None, name: str=None, rules: List[GrpcRouteRouteRule]=None, self_link: str=None, update_time: str=None):
        """GrpcRoute - a model defined in OpenAPI

        :param create_time: The create_time of this GrpcRoute.
        :param description: The description of this GrpcRoute.
        :param gateways: The gateways of this GrpcRoute.
        :param hostnames: The hostnames of this GrpcRoute.
        :param labels: The labels of this GrpcRoute.
        :param meshes: The meshes of this GrpcRoute.
        :param name: The name of this GrpcRoute.
        :param rules: The rules of this GrpcRoute.
        :param self_link: The self_link of this GrpcRoute.
        :param update_time: The update_time of this GrpcRoute.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'gateways': List[str],
            'hostnames': List[str],
            'labels': Dict[str, str],
            'meshes': List[str],
            'name': str,
            'rules': List[GrpcRouteRouteRule],
            'self_link': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'gateways': 'gateways',
            'hostnames': 'hostnames',
            'labels': 'labels',
            'meshes': 'meshes',
            'name': 'name',
            'rules': 'rules',
            'self_link': 'selfLink',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._gateways = gateways
        self._hostnames = hostnames
        self._labels = labels
        self._meshes = meshes
        self._name = name
        self._rules = rules
        self._self_link = self_link
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrpcRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrpcRoute of this GrpcRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GrpcRoute.

        Output only. The timestamp when the resource was created.

        :return: The create_time of this GrpcRoute.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GrpcRoute.

        Output only. The timestamp when the resource was created.

        :param create_time: The create_time of this GrpcRoute.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this GrpcRoute.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :return: The description of this GrpcRoute.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GrpcRoute.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :param description: The description of this GrpcRoute.
        :type description: str
        """

        self._description = description

    @property
    def gateways(self):
        """Gets the gateways of this GrpcRoute.

        Optional. Gateways defines a list of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`

        :return: The gateways of this GrpcRoute.
        :rtype: List[str]
        """
        return self._gateways

    @gateways.setter
    def gateways(self, gateways):
        """Sets the gateways of this GrpcRoute.

        Optional. Gateways defines a list of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`

        :param gateways: The gateways of this GrpcRoute.
        :type gateways: List[str]
        """

        self._gateways = gateways

    @property
    def hostnames(self):
        """Gets the hostnames of this GrpcRoute.

        Required. Service hostnames with an optional port for which this route describes traffic. Format: [:] Hostname is the fully qualified domain name of a network host. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. Hostname can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. `foo.example.com`) or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateway must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same route, it is not possible to associate two routes both with `*.bar.com` or both with `bar.com`. If a port is specified, then gRPC clients must use the channel URI with the port to match this rule (i.e. \"xds:///service:123\"), otherwise they must supply the URI without a port (i.e. \"xds:///service\").

        :return: The hostnames of this GrpcRoute.
        :rtype: List[str]
        """
        return self._hostnames

    @hostnames.setter
    def hostnames(self, hostnames):
        """Sets the hostnames of this GrpcRoute.

        Required. Service hostnames with an optional port for which this route describes traffic. Format: [:] Hostname is the fully qualified domain name of a network host. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. Hostname can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. `foo.example.com`) or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateway must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same route, it is not possible to associate two routes both with `*.bar.com` or both with `bar.com`. If a port is specified, then gRPC clients must use the channel URI with the port to match this rule (i.e. \"xds:///service:123\"), otherwise they must supply the URI without a port (i.e. \"xds:///service\").

        :param hostnames: The hostnames of this GrpcRoute.
        :type hostnames: List[str]
        """

        self._hostnames = hostnames

    @property
    def labels(self):
        """Gets the labels of this GrpcRoute.

        Optional. Set of label tags associated with the GrpcRoute resource.

        :return: The labels of this GrpcRoute.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GrpcRoute.

        Optional. Set of label tags associated with the GrpcRoute resource.

        :param labels: The labels of this GrpcRoute.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def meshes(self):
        """Gets the meshes of this GrpcRoute.

        Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/`

        :return: The meshes of this GrpcRoute.
        :rtype: List[str]
        """
        return self._meshes

    @meshes.setter
    def meshes(self, meshes):
        """Sets the meshes of this GrpcRoute.

        Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/`

        :param meshes: The meshes of this GrpcRoute.
        :type meshes: List[str]
        """

        self._meshes = meshes

    @property
    def name(self):
        """Gets the name of this GrpcRoute.

        Required. Name of the GrpcRoute resource. It matches pattern `projects/*/locations/global/grpcRoutes/`

        :return: The name of this GrpcRoute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GrpcRoute.

        Required. Name of the GrpcRoute resource. It matches pattern `projects/*/locations/global/grpcRoutes/`

        :param name: The name of this GrpcRoute.
        :type name: str
        """

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this GrpcRoute.

        Required. A list of detailed rules defining how to route traffic. Within a single GrpcRoute, the GrpcRoute.RouteAction associated with the first matching GrpcRoute.RouteRule will be executed. At least one rule must be supplied.

        :return: The rules of this GrpcRoute.
        :rtype: List[GrpcRouteRouteRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this GrpcRoute.

        Required. A list of detailed rules defining how to route traffic. Within a single GrpcRoute, the GrpcRoute.RouteAction associated with the first matching GrpcRoute.RouteRule will be executed. At least one rule must be supplied.

        :param rules: The rules of this GrpcRoute.
        :type rules: List[GrpcRouteRouteRule]
        """

        self._rules = rules

    @property
    def self_link(self):
        """Gets the self_link of this GrpcRoute.

        Output only. Server-defined URL of this resource

        :return: The self_link of this GrpcRoute.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this GrpcRoute.

        Output only. Server-defined URL of this resource

        :param self_link: The self_link of this GrpcRoute.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def update_time(self):
        """Gets the update_time of this GrpcRoute.

        Output only. The timestamp when the resource was updated.

        :return: The update_time of this GrpcRoute.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GrpcRoute.

        Output only. The timestamp when the resource was updated.

        :param update_time: The update_time of this GrpcRoute.
        :type update_time: str
        """

        self._update_time = update_time
