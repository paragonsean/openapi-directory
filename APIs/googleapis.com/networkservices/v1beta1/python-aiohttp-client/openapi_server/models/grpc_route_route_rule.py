# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grpc_route_route_action import GrpcRouteRouteAction
from openapi_server.models.grpc_route_route_match import GrpcRouteRouteMatch
from openapi_server import util


class GrpcRouteRouteRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: GrpcRouteRouteAction=None, matches: List[GrpcRouteRouteMatch]=None):
        """GrpcRouteRouteRule - a model defined in OpenAPI

        :param action: The action of this GrpcRouteRouteRule.
        :param matches: The matches of this GrpcRouteRouteRule.
        """
        self.openapi_types = {
            'action': GrpcRouteRouteAction,
            'matches': List[GrpcRouteRouteMatch]
        }

        self.attribute_map = {
            'action': 'action',
            'matches': 'matches'
        }

        self._action = action
        self._matches = matches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrpcRouteRouteRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrpcRouteRouteRule of this GrpcRouteRouteRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this GrpcRouteRouteRule.


        :return: The action of this GrpcRouteRouteRule.
        :rtype: GrpcRouteRouteAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this GrpcRouteRouteRule.


        :param action: The action of this GrpcRouteRouteRule.
        :type action: GrpcRouteRouteAction
        """

        self._action = action

    @property
    def matches(self):
        """Gets the matches of this GrpcRouteRouteRule.

        Optional. Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic.

        :return: The matches of this GrpcRouteRouteRule.
        :rtype: List[GrpcRouteRouteMatch]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this GrpcRouteRouteRule.

        Optional. Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic.

        :param matches: The matches of this GrpcRouteRouteRule.
        :type matches: List[GrpcRouteRouteMatch]
        """

        self._matches = matches
