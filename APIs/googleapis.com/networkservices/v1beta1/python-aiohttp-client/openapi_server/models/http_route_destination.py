# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_route_header_modifier import HttpRouteHeaderModifier
from openapi_server import util


class HttpRouteDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_header_modifier: HttpRouteHeaderModifier=None, response_header_modifier: HttpRouteHeaderModifier=None, service_name: str=None, weight: int=None):
        """HttpRouteDestination - a model defined in OpenAPI

        :param request_header_modifier: The request_header_modifier of this HttpRouteDestination.
        :param response_header_modifier: The response_header_modifier of this HttpRouteDestination.
        :param service_name: The service_name of this HttpRouteDestination.
        :param weight: The weight of this HttpRouteDestination.
        """
        self.openapi_types = {
            'request_header_modifier': HttpRouteHeaderModifier,
            'response_header_modifier': HttpRouteHeaderModifier,
            'service_name': str,
            'weight': int
        }

        self.attribute_map = {
            'request_header_modifier': 'requestHeaderModifier',
            'response_header_modifier': 'responseHeaderModifier',
            'service_name': 'serviceName',
            'weight': 'weight'
        }

        self._request_header_modifier = request_header_modifier
        self._response_header_modifier = response_header_modifier
        self._service_name = service_name
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRouteDestination of this HttpRouteDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_header_modifier(self):
        """Gets the request_header_modifier of this HttpRouteDestination.


        :return: The request_header_modifier of this HttpRouteDestination.
        :rtype: HttpRouteHeaderModifier
        """
        return self._request_header_modifier

    @request_header_modifier.setter
    def request_header_modifier(self, request_header_modifier):
        """Sets the request_header_modifier of this HttpRouteDestination.


        :param request_header_modifier: The request_header_modifier of this HttpRouteDestination.
        :type request_header_modifier: HttpRouteHeaderModifier
        """

        self._request_header_modifier = request_header_modifier

    @property
    def response_header_modifier(self):
        """Gets the response_header_modifier of this HttpRouteDestination.


        :return: The response_header_modifier of this HttpRouteDestination.
        :rtype: HttpRouteHeaderModifier
        """
        return self._response_header_modifier

    @response_header_modifier.setter
    def response_header_modifier(self, response_header_modifier):
        """Sets the response_header_modifier of this HttpRouteDestination.


        :param response_header_modifier: The response_header_modifier of this HttpRouteDestination.
        :type response_header_modifier: HttpRouteHeaderModifier
        """

        self._response_header_modifier = response_header_modifier

    @property
    def service_name(self):
        """Gets the service_name of this HttpRouteDestination.

        The URL of a BackendService to route traffic to.

        :return: The service_name of this HttpRouteDestination.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this HttpRouteDestination.

        The URL of a BackendService to route traffic to.

        :param service_name: The service_name of this HttpRouteDestination.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def weight(self):
        """Gets the weight of this HttpRouteDestination.

        Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: - weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.

        :return: The weight of this HttpRouteDestination.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this HttpRouteDestination.

        Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: - weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.

        :param weight: The weight of this HttpRouteDestination.
        :type weight: int
        """

        self._weight = weight
