# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Mesh(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, envoy_headers: str=None, interception_port: int=None, labels: Dict[str, str]=None, name: str=None, self_link: str=None, update_time: str=None):
        """Mesh - a model defined in OpenAPI

        :param create_time: The create_time of this Mesh.
        :param description: The description of this Mesh.
        :param envoy_headers: The envoy_headers of this Mesh.
        :param interception_port: The interception_port of this Mesh.
        :param labels: The labels of this Mesh.
        :param name: The name of this Mesh.
        :param self_link: The self_link of this Mesh.
        :param update_time: The update_time of this Mesh.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'envoy_headers': str,
            'interception_port': int,
            'labels': Dict[str, str],
            'name': str,
            'self_link': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'envoy_headers': 'envoyHeaders',
            'interception_port': 'interceptionPort',
            'labels': 'labels',
            'name': 'name',
            'self_link': 'selfLink',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._envoy_headers = envoy_headers
        self._interception_port = interception_port
        self._labels = labels
        self._name = name
        self._self_link = self_link
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Mesh':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Mesh of this Mesh.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Mesh.

        Output only. The timestamp when the resource was created.

        :return: The create_time of this Mesh.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Mesh.

        Output only. The timestamp when the resource was created.

        :param create_time: The create_time of this Mesh.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Mesh.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :return: The description of this Mesh.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Mesh.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :param description: The description of this Mesh.
        :type description: str
        """

        self._description = description

    @property
    def envoy_headers(self):
        """Gets the envoy_headers of this Mesh.

        Optional. Determines if envoy will insert internal debug headers into upstream requests. Other Envoy headers may still be injected. By default, envoy will not insert any debug headers.

        :return: The envoy_headers of this Mesh.
        :rtype: str
        """
        return self._envoy_headers

    @envoy_headers.setter
    def envoy_headers(self, envoy_headers):
        """Sets the envoy_headers of this Mesh.

        Optional. Determines if envoy will insert internal debug headers into upstream requests. Other Envoy headers may still be injected. By default, envoy will not insert any debug headers.

        :param envoy_headers: The envoy_headers of this Mesh.
        :type envoy_headers: str
        """
        allowed_values = ["ENVOY_HEADERS_UNSPECIFIED", "NONE", "DEBUG_HEADERS"]  # noqa: E501
        if envoy_headers not in allowed_values:
            raise ValueError(
                "Invalid value for `envoy_headers` ({0}), must be one of {1}"
                .format(envoy_headers, allowed_values)
            )

        self._envoy_headers = envoy_headers

    @property
    def interception_port(self):
        """Gets the interception_port of this Mesh.

        Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy to listen on the specified port of localhost (127.0.0.1) address. The SIDECAR proxy will expect all traffic to be redirected to this port regardless of its actual ip:port destination. If unset, a port '15001' is used as the interception port. This is applicable only for sidecar proxy deployments.

        :return: The interception_port of this Mesh.
        :rtype: int
        """
        return self._interception_port

    @interception_port.setter
    def interception_port(self, interception_port):
        """Sets the interception_port of this Mesh.

        Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy to listen on the specified port of localhost (127.0.0.1) address. The SIDECAR proxy will expect all traffic to be redirected to this port regardless of its actual ip:port destination. If unset, a port '15001' is used as the interception port. This is applicable only for sidecar proxy deployments.

        :param interception_port: The interception_port of this Mesh.
        :type interception_port: int
        """

        self._interception_port = interception_port

    @property
    def labels(self):
        """Gets the labels of this Mesh.

        Optional. Set of label tags associated with the Mesh resource.

        :return: The labels of this Mesh.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Mesh.

        Optional. Set of label tags associated with the Mesh resource.

        :param labels: The labels of this Mesh.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Mesh.

        Required. Name of the Mesh resource. It matches pattern `projects/*/locations/global/meshes/`.

        :return: The name of this Mesh.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Mesh.

        Required. Name of the Mesh resource. It matches pattern `projects/*/locations/global/meshes/`.

        :param name: The name of this Mesh.
        :type name: str
        """

        self._name = name

    @property
    def self_link(self):
        """Gets the self_link of this Mesh.

        Output only. Server-defined URL of this resource

        :return: The self_link of this Mesh.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Mesh.

        Output only. Server-defined URL of this resource

        :param self_link: The self_link of this Mesh.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def update_time(self):
        """Gets the update_time of this Mesh.

        Output only. The timestamp when the resource was updated.

        :return: The update_time of this Mesh.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Mesh.

        Output only. The timestamp when the resource was updated.

        :param update_time: The update_time of this Mesh.
        :type update_time: str
        """

        self._update_time = update_time
