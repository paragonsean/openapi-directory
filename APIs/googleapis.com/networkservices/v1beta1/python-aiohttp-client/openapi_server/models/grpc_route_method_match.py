# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GrpcRouteMethodMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_sensitive: bool=None, grpc_method: str=None, grpc_service: str=None, type: str=None):
        """GrpcRouteMethodMatch - a model defined in OpenAPI

        :param case_sensitive: The case_sensitive of this GrpcRouteMethodMatch.
        :param grpc_method: The grpc_method of this GrpcRouteMethodMatch.
        :param grpc_service: The grpc_service of this GrpcRouteMethodMatch.
        :param type: The type of this GrpcRouteMethodMatch.
        """
        self.openapi_types = {
            'case_sensitive': bool,
            'grpc_method': str,
            'grpc_service': str,
            'type': str
        }

        self.attribute_map = {
            'case_sensitive': 'caseSensitive',
            'grpc_method': 'grpcMethod',
            'grpc_service': 'grpcService',
            'type': 'type'
        }

        self._case_sensitive = case_sensitive
        self._grpc_method = grpc_method
        self._grpc_service = grpc_service
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrpcRouteMethodMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrpcRouteMethodMatch of this GrpcRouteMethodMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this GrpcRouteMethodMatch.

        Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.

        :return: The case_sensitive of this GrpcRouteMethodMatch.
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this GrpcRouteMethodMatch.

        Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.

        :param case_sensitive: The case_sensitive of this GrpcRouteMethodMatch.
        :type case_sensitive: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def grpc_method(self):
        """Gets the grpc_method of this GrpcRouteMethodMatch.

        Required. Name of the method to match against. If unspecified, will match all methods.

        :return: The grpc_method of this GrpcRouteMethodMatch.
        :rtype: str
        """
        return self._grpc_method

    @grpc_method.setter
    def grpc_method(self, grpc_method):
        """Sets the grpc_method of this GrpcRouteMethodMatch.

        Required. Name of the method to match against. If unspecified, will match all methods.

        :param grpc_method: The grpc_method of this GrpcRouteMethodMatch.
        :type grpc_method: str
        """

        self._grpc_method = grpc_method

    @property
    def grpc_service(self):
        """Gets the grpc_service of this GrpcRouteMethodMatch.

        Required. Name of the service to match against. If unspecified, will match all services.

        :return: The grpc_service of this GrpcRouteMethodMatch.
        :rtype: str
        """
        return self._grpc_service

    @grpc_service.setter
    def grpc_service(self, grpc_service):
        """Sets the grpc_service of this GrpcRouteMethodMatch.

        Required. Name of the service to match against. If unspecified, will match all services.

        :param grpc_service: The grpc_service of this GrpcRouteMethodMatch.
        :type grpc_service: str
        """

        self._grpc_service = grpc_service

    @property
    def type(self):
        """Gets the type of this GrpcRouteMethodMatch.

        Optional. Specifies how to match against the name. If not specified, a default value of \"EXACT\" is used.

        :return: The type of this GrpcRouteMethodMatch.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GrpcRouteMethodMatch.

        Optional. Specifies how to match against the name. If not specified, a default value of \"EXACT\" is used.

        :param type: The type of this GrpcRouteMethodMatch.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "EXACT", "REGULAR_EXPRESSION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
