# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_route_cors_policy import HttpRouteCorsPolicy
from openapi_server.models.http_route_destination import HttpRouteDestination
from openapi_server.models.http_route_fault_injection_policy import HttpRouteFaultInjectionPolicy
from openapi_server.models.http_route_header_modifier import HttpRouteHeaderModifier
from openapi_server.models.http_route_http_direct_response import HttpRouteHttpDirectResponse
from openapi_server.models.http_route_redirect import HttpRouteRedirect
from openapi_server.models.http_route_request_mirror_policy import HttpRouteRequestMirrorPolicy
from openapi_server.models.http_route_retry_policy import HttpRouteRetryPolicy
from openapi_server.models.http_route_stateful_session_affinity_policy import HttpRouteStatefulSessionAffinityPolicy
from openapi_server.models.http_route_url_rewrite import HttpRouteURLRewrite
from openapi_server import util


class HttpRouteRouteAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cors_policy: HttpRouteCorsPolicy=None, destinations: List[HttpRouteDestination]=None, direct_response: HttpRouteHttpDirectResponse=None, fault_injection_policy: HttpRouteFaultInjectionPolicy=None, idle_timeout: str=None, redirect: HttpRouteRedirect=None, request_header_modifier: HttpRouteHeaderModifier=None, request_mirror_policy: HttpRouteRequestMirrorPolicy=None, response_header_modifier: HttpRouteHeaderModifier=None, retry_policy: HttpRouteRetryPolicy=None, stateful_session_affinity: HttpRouteStatefulSessionAffinityPolicy=None, timeout: str=None, url_rewrite: HttpRouteURLRewrite=None):
        """HttpRouteRouteAction - a model defined in OpenAPI

        :param cors_policy: The cors_policy of this HttpRouteRouteAction.
        :param destinations: The destinations of this HttpRouteRouteAction.
        :param direct_response: The direct_response of this HttpRouteRouteAction.
        :param fault_injection_policy: The fault_injection_policy of this HttpRouteRouteAction.
        :param idle_timeout: The idle_timeout of this HttpRouteRouteAction.
        :param redirect: The redirect of this HttpRouteRouteAction.
        :param request_header_modifier: The request_header_modifier of this HttpRouteRouteAction.
        :param request_mirror_policy: The request_mirror_policy of this HttpRouteRouteAction.
        :param response_header_modifier: The response_header_modifier of this HttpRouteRouteAction.
        :param retry_policy: The retry_policy of this HttpRouteRouteAction.
        :param stateful_session_affinity: The stateful_session_affinity of this HttpRouteRouteAction.
        :param timeout: The timeout of this HttpRouteRouteAction.
        :param url_rewrite: The url_rewrite of this HttpRouteRouteAction.
        """
        self.openapi_types = {
            'cors_policy': HttpRouteCorsPolicy,
            'destinations': List[HttpRouteDestination],
            'direct_response': HttpRouteHttpDirectResponse,
            'fault_injection_policy': HttpRouteFaultInjectionPolicy,
            'idle_timeout': str,
            'redirect': HttpRouteRedirect,
            'request_header_modifier': HttpRouteHeaderModifier,
            'request_mirror_policy': HttpRouteRequestMirrorPolicy,
            'response_header_modifier': HttpRouteHeaderModifier,
            'retry_policy': HttpRouteRetryPolicy,
            'stateful_session_affinity': HttpRouteStatefulSessionAffinityPolicy,
            'timeout': str,
            'url_rewrite': HttpRouteURLRewrite
        }

        self.attribute_map = {
            'cors_policy': 'corsPolicy',
            'destinations': 'destinations',
            'direct_response': 'directResponse',
            'fault_injection_policy': 'faultInjectionPolicy',
            'idle_timeout': 'idleTimeout',
            'redirect': 'redirect',
            'request_header_modifier': 'requestHeaderModifier',
            'request_mirror_policy': 'requestMirrorPolicy',
            'response_header_modifier': 'responseHeaderModifier',
            'retry_policy': 'retryPolicy',
            'stateful_session_affinity': 'statefulSessionAffinity',
            'timeout': 'timeout',
            'url_rewrite': 'urlRewrite'
        }

        self._cors_policy = cors_policy
        self._destinations = destinations
        self._direct_response = direct_response
        self._fault_injection_policy = fault_injection_policy
        self._idle_timeout = idle_timeout
        self._redirect = redirect
        self._request_header_modifier = request_header_modifier
        self._request_mirror_policy = request_mirror_policy
        self._response_header_modifier = response_header_modifier
        self._retry_policy = retry_policy
        self._stateful_session_affinity = stateful_session_affinity
        self._timeout = timeout
        self._url_rewrite = url_rewrite

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteRouteAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRouteRouteAction of this HttpRouteRouteAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cors_policy(self):
        """Gets the cors_policy of this HttpRouteRouteAction.


        :return: The cors_policy of this HttpRouteRouteAction.
        :rtype: HttpRouteCorsPolicy
        """
        return self._cors_policy

    @cors_policy.setter
    def cors_policy(self, cors_policy):
        """Sets the cors_policy of this HttpRouteRouteAction.


        :param cors_policy: The cors_policy of this HttpRouteRouteAction.
        :type cors_policy: HttpRouteCorsPolicy
        """

        self._cors_policy = cors_policy

    @property
    def destinations(self):
        """Gets the destinations of this HttpRouteRouteAction.

        The destination to which traffic should be forwarded.

        :return: The destinations of this HttpRouteRouteAction.
        :rtype: List[HttpRouteDestination]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this HttpRouteRouteAction.

        The destination to which traffic should be forwarded.

        :param destinations: The destinations of this HttpRouteRouteAction.
        :type destinations: List[HttpRouteDestination]
        """

        self._destinations = destinations

    @property
    def direct_response(self):
        """Gets the direct_response of this HttpRouteRouteAction.


        :return: The direct_response of this HttpRouteRouteAction.
        :rtype: HttpRouteHttpDirectResponse
        """
        return self._direct_response

    @direct_response.setter
    def direct_response(self, direct_response):
        """Sets the direct_response of this HttpRouteRouteAction.


        :param direct_response: The direct_response of this HttpRouteRouteAction.
        :type direct_response: HttpRouteHttpDirectResponse
        """

        self._direct_response = direct_response

    @property
    def fault_injection_policy(self):
        """Gets the fault_injection_policy of this HttpRouteRouteAction.


        :return: The fault_injection_policy of this HttpRouteRouteAction.
        :rtype: HttpRouteFaultInjectionPolicy
        """
        return self._fault_injection_policy

    @fault_injection_policy.setter
    def fault_injection_policy(self, fault_injection_policy):
        """Sets the fault_injection_policy of this HttpRouteRouteAction.


        :param fault_injection_policy: The fault_injection_policy of this HttpRouteRouteAction.
        :type fault_injection_policy: HttpRouteFaultInjectionPolicy
        """

        self._fault_injection_policy = fault_injection_policy

    @property
    def idle_timeout(self):
        """Gets the idle_timeout of this HttpRouteRouteAction.

        Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.

        :return: The idle_timeout of this HttpRouteRouteAction.
        :rtype: str
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """Sets the idle_timeout of this HttpRouteRouteAction.

        Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.

        :param idle_timeout: The idle_timeout of this HttpRouteRouteAction.
        :type idle_timeout: str
        """

        self._idle_timeout = idle_timeout

    @property
    def redirect(self):
        """Gets the redirect of this HttpRouteRouteAction.


        :return: The redirect of this HttpRouteRouteAction.
        :rtype: HttpRouteRedirect
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """Sets the redirect of this HttpRouteRouteAction.


        :param redirect: The redirect of this HttpRouteRouteAction.
        :type redirect: HttpRouteRedirect
        """

        self._redirect = redirect

    @property
    def request_header_modifier(self):
        """Gets the request_header_modifier of this HttpRouteRouteAction.


        :return: The request_header_modifier of this HttpRouteRouteAction.
        :rtype: HttpRouteHeaderModifier
        """
        return self._request_header_modifier

    @request_header_modifier.setter
    def request_header_modifier(self, request_header_modifier):
        """Sets the request_header_modifier of this HttpRouteRouteAction.


        :param request_header_modifier: The request_header_modifier of this HttpRouteRouteAction.
        :type request_header_modifier: HttpRouteHeaderModifier
        """

        self._request_header_modifier = request_header_modifier

    @property
    def request_mirror_policy(self):
        """Gets the request_mirror_policy of this HttpRouteRouteAction.


        :return: The request_mirror_policy of this HttpRouteRouteAction.
        :rtype: HttpRouteRequestMirrorPolicy
        """
        return self._request_mirror_policy

    @request_mirror_policy.setter
    def request_mirror_policy(self, request_mirror_policy):
        """Sets the request_mirror_policy of this HttpRouteRouteAction.


        :param request_mirror_policy: The request_mirror_policy of this HttpRouteRouteAction.
        :type request_mirror_policy: HttpRouteRequestMirrorPolicy
        """

        self._request_mirror_policy = request_mirror_policy

    @property
    def response_header_modifier(self):
        """Gets the response_header_modifier of this HttpRouteRouteAction.


        :return: The response_header_modifier of this HttpRouteRouteAction.
        :rtype: HttpRouteHeaderModifier
        """
        return self._response_header_modifier

    @response_header_modifier.setter
    def response_header_modifier(self, response_header_modifier):
        """Sets the response_header_modifier of this HttpRouteRouteAction.


        :param response_header_modifier: The response_header_modifier of this HttpRouteRouteAction.
        :type response_header_modifier: HttpRouteHeaderModifier
        """

        self._response_header_modifier = response_header_modifier

    @property
    def retry_policy(self):
        """Gets the retry_policy of this HttpRouteRouteAction.


        :return: The retry_policy of this HttpRouteRouteAction.
        :rtype: HttpRouteRetryPolicy
        """
        return self._retry_policy

    @retry_policy.setter
    def retry_policy(self, retry_policy):
        """Sets the retry_policy of this HttpRouteRouteAction.


        :param retry_policy: The retry_policy of this HttpRouteRouteAction.
        :type retry_policy: HttpRouteRetryPolicy
        """

        self._retry_policy = retry_policy

    @property
    def stateful_session_affinity(self):
        """Gets the stateful_session_affinity of this HttpRouteRouteAction.


        :return: The stateful_session_affinity of this HttpRouteRouteAction.
        :rtype: HttpRouteStatefulSessionAffinityPolicy
        """
        return self._stateful_session_affinity

    @stateful_session_affinity.setter
    def stateful_session_affinity(self, stateful_session_affinity):
        """Sets the stateful_session_affinity of this HttpRouteRouteAction.


        :param stateful_session_affinity: The stateful_session_affinity of this HttpRouteRouteAction.
        :type stateful_session_affinity: HttpRouteStatefulSessionAffinityPolicy
        """

        self._stateful_session_affinity = stateful_session_affinity

    @property
    def timeout(self):
        """Gets the timeout of this HttpRouteRouteAction.

        Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.

        :return: The timeout of this HttpRouteRouteAction.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this HttpRouteRouteAction.

        Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.

        :param timeout: The timeout of this HttpRouteRouteAction.
        :type timeout: str
        """

        self._timeout = timeout

    @property
    def url_rewrite(self):
        """Gets the url_rewrite of this HttpRouteRouteAction.


        :return: The url_rewrite of this HttpRouteRouteAction.
        :rtype: HttpRouteURLRewrite
        """
        return self._url_rewrite

    @url_rewrite.setter
    def url_rewrite(self, url_rewrite):
        """Sets the url_rewrite of this HttpRouteRouteAction.


        :param url_rewrite: The url_rewrite of this HttpRouteRouteAction.
        :type url_rewrite: HttpRouteURLRewrite
        """

        self._url_rewrite = url_rewrite
