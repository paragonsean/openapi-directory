# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GrpcRouteRetryPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, num_retries: int=None, retry_conditions: List[str]=None):
        """GrpcRouteRetryPolicy - a model defined in OpenAPI

        :param num_retries: The num_retries of this GrpcRouteRetryPolicy.
        :param retry_conditions: The retry_conditions of this GrpcRouteRetryPolicy.
        """
        self.openapi_types = {
            'num_retries': int,
            'retry_conditions': List[str]
        }

        self.attribute_map = {
            'num_retries': 'numRetries',
            'retry_conditions': 'retryConditions'
        }

        self._num_retries = num_retries
        self._retry_conditions = retry_conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrpcRouteRetryPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrpcRouteRetryPolicy of this GrpcRouteRetryPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_retries(self):
        """Gets the num_retries of this GrpcRouteRetryPolicy.

        Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.

        :return: The num_retries of this GrpcRouteRetryPolicy.
        :rtype: int
        """
        return self._num_retries

    @num_retries.setter
    def num_retries(self, num_retries):
        """Sets the num_retries of this GrpcRouteRetryPolicy.

        Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.

        :param num_retries: The num_retries of this GrpcRouteRetryPolicy.
        :type num_retries: int
        """

        self._num_retries = num_retries

    @property
    def retry_conditions(self):
        """Gets the retry_conditions of this GrpcRouteRetryPolicy.

        - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable

        :return: The retry_conditions of this GrpcRouteRetryPolicy.
        :rtype: List[str]
        """
        return self._retry_conditions

    @retry_conditions.setter
    def retry_conditions(self, retry_conditions):
        """Sets the retry_conditions of this GrpcRouteRetryPolicy.

        - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable

        :param retry_conditions: The retry_conditions of this GrpcRouteRetryPolicy.
        :type retry_conditions: List[str]
        """

        self._retry_conditions = retry_conditions
