# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tcp_route_route_destination import TcpRouteRouteDestination
from openapi_server import util


class TcpRouteRouteAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destinations: List[TcpRouteRouteDestination]=None, idle_timeout: str=None, original_destination: bool=None):
        """TcpRouteRouteAction - a model defined in OpenAPI

        :param destinations: The destinations of this TcpRouteRouteAction.
        :param idle_timeout: The idle_timeout of this TcpRouteRouteAction.
        :param original_destination: The original_destination of this TcpRouteRouteAction.
        """
        self.openapi_types = {
            'destinations': List[TcpRouteRouteDestination],
            'idle_timeout': str,
            'original_destination': bool
        }

        self.attribute_map = {
            'destinations': 'destinations',
            'idle_timeout': 'idleTimeout',
            'original_destination': 'originalDestination'
        }

        self._destinations = destinations
        self._idle_timeout = idle_timeout
        self._original_destination = original_destination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TcpRouteRouteAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TcpRouteRouteAction of this TcpRouteRouteAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destinations(self):
        """Gets the destinations of this TcpRouteRouteAction.

        Optional. The destination services to which traffic should be forwarded. At least one destination service is required. Only one of route destination or original destination can be set.

        :return: The destinations of this TcpRouteRouteAction.
        :rtype: List[TcpRouteRouteDestination]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this TcpRouteRouteAction.

        Optional. The destination services to which traffic should be forwarded. At least one destination service is required. Only one of route destination or original destination can be set.

        :param destinations: The destinations of this TcpRouteRouteAction.
        :type destinations: List[TcpRouteRouteDestination]
        """

        self._destinations = destinations

    @property
    def idle_timeout(self):
        """Gets the idle_timeout of this TcpRouteRouteAction.

        Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 30 seconds. If set to 0s, the timeout will be disabled.

        :return: The idle_timeout of this TcpRouteRouteAction.
        :rtype: str
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """Sets the idle_timeout of this TcpRouteRouteAction.

        Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 30 seconds. If set to 0s, the timeout will be disabled.

        :param idle_timeout: The idle_timeout of this TcpRouteRouteAction.
        :type idle_timeout: str
        """

        self._idle_timeout = idle_timeout

    @property
    def original_destination(self):
        """Gets the original_destination of this TcpRouteRouteAction.

        Optional. If true, Router will use the destination IP and port of the original connection as the destination of the request. Default is false. Only one of route destinations or original destination can be set.

        :return: The original_destination of this TcpRouteRouteAction.
        :rtype: bool
        """
        return self._original_destination

    @original_destination.setter
    def original_destination(self, original_destination):
        """Sets the original_destination of this TcpRouteRouteAction.

        Optional. If true, Router will use the destination IP and port of the original connection as the destination of the request. Default is false. Only one of route destinations or original destination can be set.

        :param original_destination: The original_destination of this TcpRouteRouteAction.
        :type original_destination: bool
        """

        self._original_destination = original_destination
