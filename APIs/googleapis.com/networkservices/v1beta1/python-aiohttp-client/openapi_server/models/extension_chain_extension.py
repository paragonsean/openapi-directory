# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExtensionChainExtension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authority: str=None, fail_open: bool=None, forward_headers: List[str]=None, name: str=None, service: str=None, supported_events: List[str]=None, timeout: str=None):
        """ExtensionChainExtension - a model defined in OpenAPI

        :param authority: The authority of this ExtensionChainExtension.
        :param fail_open: The fail_open of this ExtensionChainExtension.
        :param forward_headers: The forward_headers of this ExtensionChainExtension.
        :param name: The name of this ExtensionChainExtension.
        :param service: The service of this ExtensionChainExtension.
        :param supported_events: The supported_events of this ExtensionChainExtension.
        :param timeout: The timeout of this ExtensionChainExtension.
        """
        self.openapi_types = {
            'authority': str,
            'fail_open': bool,
            'forward_headers': List[str],
            'name': str,
            'service': str,
            'supported_events': List[str],
            'timeout': str
        }

        self.attribute_map = {
            'authority': 'authority',
            'fail_open': 'failOpen',
            'forward_headers': 'forwardHeaders',
            'name': 'name',
            'service': 'service',
            'supported_events': 'supportedEvents',
            'timeout': 'timeout'
        }

        self._authority = authority
        self._fail_open = fail_open
        self._forward_headers = forward_headers
        self._name = name
        self._service = service
        self._supported_events = supported_events
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtensionChainExtension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtensionChainExtension of this ExtensionChainExtension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authority(self):
        """Gets the authority of this ExtensionChainExtension.

        Optional. The `:authority` header in the gRPC request sent from Envoy to the extension service. Required for Callout extensions.

        :return: The authority of this ExtensionChainExtension.
        :rtype: str
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this ExtensionChainExtension.

        Optional. The `:authority` header in the gRPC request sent from Envoy to the extension service. Required for Callout extensions.

        :param authority: The authority of this ExtensionChainExtension.
        :type authority: str
        """

        self._authority = authority

    @property
    def fail_open(self):
        """Gets the fail_open of this ExtensionChainExtension.

        Optional. Determines how the proxy behaves if the call to the extension fails or times out. When set to `TRUE`, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to `FALSE` or the default setting of `FALSE` is used, one of the following happens: * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer. * If response headers have been delivered, then the HTTP stream to the downstream client is reset.

        :return: The fail_open of this ExtensionChainExtension.
        :rtype: bool
        """
        return self._fail_open

    @fail_open.setter
    def fail_open(self, fail_open):
        """Sets the fail_open of this ExtensionChainExtension.

        Optional. Determines how the proxy behaves if the call to the extension fails or times out. When set to `TRUE`, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to `FALSE` or the default setting of `FALSE` is used, one of the following happens: * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer. * If response headers have been delivered, then the HTTP stream to the downstream client is reset.

        :param fail_open: The fail_open of this ExtensionChainExtension.
        :type fail_open: bool
        """

        self._fail_open = fail_open

    @property
    def forward_headers(self):
        """Gets the forward_headers of this ExtensionChainExtension.

        Optional. List of the HTTP headers to forward to the extension (from the client or backend). If omitted, all headers are sent. Each element is a string indicating the header name.

        :return: The forward_headers of this ExtensionChainExtension.
        :rtype: List[str]
        """
        return self._forward_headers

    @forward_headers.setter
    def forward_headers(self, forward_headers):
        """Sets the forward_headers of this ExtensionChainExtension.

        Optional. List of the HTTP headers to forward to the extension (from the client or backend). If omitted, all headers are sent. Each element is a string indicating the header name.

        :param forward_headers: The forward_headers of this ExtensionChainExtension.
        :type forward_headers: List[str]
        """

        self._forward_headers = forward_headers

    @property
    def name(self):
        """Gets the name of this ExtensionChainExtension.

        Required. The name for this extension. The name is logged as part of the HTTP request logs. The name must conform with RFC-1034, is restricted to lower-cased letters, numbers and hyphens, and can have a maximum length of 63 characters. Additionally, the first character must be a letter and the last a letter or a number.

        :return: The name of this ExtensionChainExtension.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExtensionChainExtension.

        Required. The name for this extension. The name is logged as part of the HTTP request logs. The name must conform with RFC-1034, is restricted to lower-cased letters, numbers and hyphens, and can have a maximum length of 63 characters. Additionally, the first character must be a letter and the last a letter or a number.

        :param name: The name of this ExtensionChainExtension.
        :type name: str
        """

        self._name = name

    @property
    def service(self):
        """Gets the service of this ExtensionChainExtension.

        Required. The reference to the service that runs the extension. Currently only callout extensions are supported here. To configure a callout extension, `service` must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format: `https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}` or `https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}`.

        :return: The service of this ExtensionChainExtension.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ExtensionChainExtension.

        Required. The reference to the service that runs the extension. Currently only callout extensions are supported here. To configure a callout extension, `service` must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format: `https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}` or `https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}`.

        :param service: The service of this ExtensionChainExtension.
        :type service: str
        """

        self._service = service

    @property
    def supported_events(self):
        """Gets the supported_events of this ExtensionChainExtension.

        Optional. A set of events during request or response processing for which this extension is called. This field is required for the `LbTrafficExtension` resource. It's not relevant for the `LbRouteExtension` resource.

        :return: The supported_events of this ExtensionChainExtension.
        :rtype: List[str]
        """
        return self._supported_events

    @supported_events.setter
    def supported_events(self, supported_events):
        """Sets the supported_events of this ExtensionChainExtension.

        Optional. A set of events during request or response processing for which this extension is called. This field is required for the `LbTrafficExtension` resource. It's not relevant for the `LbRouteExtension` resource.

        :param supported_events: The supported_events of this ExtensionChainExtension.
        :type supported_events: List[str]
        """
        allowed_values = ["EVENT_TYPE_UNSPECIFIED", "REQUEST_HEADERS", "REQUEST_BODY", "RESPONSE_HEADERS", "RESPONSE_BODY", "REQUEST_TRAILERS", "RESPONSE_TRAILERS"]  # noqa: E501
        if not set(supported_events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_events` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(supported_events) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_events = supported_events

    @property
    def timeout(self):
        """Gets the timeout of this ExtensionChainExtension.

        Optional. Specifies the timeout for each individual message on the stream. The timeout must be between 10-1000 milliseconds. Required for Callout extensions.

        :return: The timeout of this ExtensionChainExtension.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ExtensionChainExtension.

        Optional. Specifies the timeout for each individual message on the stream. The timeout must be between 10-1000 milliseconds. Required for Callout extensions.

        :param timeout: The timeout of this ExtensionChainExtension.
        :type timeout: str
        """

        self._timeout = timeout
