# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_matcher import EndpointMatcher
from openapi_server.models.traffic_port_selector import TrafficPortSelector
from openapi_server import util


class EndpointPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_policy: str=None, client_tls_policy: str=None, create_time: str=None, description: str=None, endpoint_matcher: EndpointMatcher=None, labels: Dict[str, str]=None, name: str=None, server_tls_policy: str=None, traffic_port_selector: TrafficPortSelector=None, type: str=None, update_time: str=None):
        """EndpointPolicy - a model defined in OpenAPI

        :param authorization_policy: The authorization_policy of this EndpointPolicy.
        :param client_tls_policy: The client_tls_policy of this EndpointPolicy.
        :param create_time: The create_time of this EndpointPolicy.
        :param description: The description of this EndpointPolicy.
        :param endpoint_matcher: The endpoint_matcher of this EndpointPolicy.
        :param labels: The labels of this EndpointPolicy.
        :param name: The name of this EndpointPolicy.
        :param server_tls_policy: The server_tls_policy of this EndpointPolicy.
        :param traffic_port_selector: The traffic_port_selector of this EndpointPolicy.
        :param type: The type of this EndpointPolicy.
        :param update_time: The update_time of this EndpointPolicy.
        """
        self.openapi_types = {
            'authorization_policy': str,
            'client_tls_policy': str,
            'create_time': str,
            'description': str,
            'endpoint_matcher': EndpointMatcher,
            'labels': Dict[str, str],
            'name': str,
            'server_tls_policy': str,
            'traffic_port_selector': TrafficPortSelector,
            'type': str,
            'update_time': str
        }

        self.attribute_map = {
            'authorization_policy': 'authorizationPolicy',
            'client_tls_policy': 'clientTlsPolicy',
            'create_time': 'createTime',
            'description': 'description',
            'endpoint_matcher': 'endpointMatcher',
            'labels': 'labels',
            'name': 'name',
            'server_tls_policy': 'serverTlsPolicy',
            'traffic_port_selector': 'trafficPortSelector',
            'type': 'type',
            'update_time': 'updateTime'
        }

        self._authorization_policy = authorization_policy
        self._client_tls_policy = client_tls_policy
        self._create_time = create_time
        self._description = description
        self._endpoint_matcher = endpoint_matcher
        self._labels = labels
        self._name = name
        self._server_tls_policy = server_tls_policy
        self._traffic_port_selector = traffic_port_selector
        self._type = type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointPolicy of this EndpointPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_policy(self):
        """Gets the authorization_policy of this EndpointPolicy.

        Optional. This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic at the matched endpoints. Refer to Authorization. If this field is not specified, authorization is disabled(no authz checks) for this endpoint.

        :return: The authorization_policy of this EndpointPolicy.
        :rtype: str
        """
        return self._authorization_policy

    @authorization_policy.setter
    def authorization_policy(self, authorization_policy):
        """Sets the authorization_policy of this EndpointPolicy.

        Optional. This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic at the matched endpoints. Refer to Authorization. If this field is not specified, authorization is disabled(no authz checks) for this endpoint.

        :param authorization_policy: The authorization_policy of this EndpointPolicy.
        :type authorization_policy: str
        """

        self._authorization_policy = authorization_policy

    @property
    def client_tls_policy(self):
        """Gets the client_tls_policy of this EndpointPolicy.

        Optional. A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from the proxy to the actual endpoints. More specifically, it is applied to the outgoing traffic from the proxy to the endpoint. This is typically used for sidecar model where the proxy identifies itself as endpoint to the control plane, with the connection between sidecar and endpoint requiring authentication. If this field is not set, authentication is disabled(open). Applicable only when EndpointPolicyType is SIDECAR_PROXY.

        :return: The client_tls_policy of this EndpointPolicy.
        :rtype: str
        """
        return self._client_tls_policy

    @client_tls_policy.setter
    def client_tls_policy(self, client_tls_policy):
        """Sets the client_tls_policy of this EndpointPolicy.

        Optional. A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from the proxy to the actual endpoints. More specifically, it is applied to the outgoing traffic from the proxy to the endpoint. This is typically used for sidecar model where the proxy identifies itself as endpoint to the control plane, with the connection between sidecar and endpoint requiring authentication. If this field is not set, authentication is disabled(open). Applicable only when EndpointPolicyType is SIDECAR_PROXY.

        :param client_tls_policy: The client_tls_policy of this EndpointPolicy.
        :type client_tls_policy: str
        """

        self._client_tls_policy = client_tls_policy

    @property
    def create_time(self):
        """Gets the create_time of this EndpointPolicy.

        Output only. The timestamp when the resource was created.

        :return: The create_time of this EndpointPolicy.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this EndpointPolicy.

        Output only. The timestamp when the resource was created.

        :param create_time: The create_time of this EndpointPolicy.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this EndpointPolicy.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :return: The description of this EndpointPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EndpointPolicy.

        Optional. A free-text description of the resource. Max length 1024 characters.

        :param description: The description of this EndpointPolicy.
        :type description: str
        """

        self._description = description

    @property
    def endpoint_matcher(self):
        """Gets the endpoint_matcher of this EndpointPolicy.


        :return: The endpoint_matcher of this EndpointPolicy.
        :rtype: EndpointMatcher
        """
        return self._endpoint_matcher

    @endpoint_matcher.setter
    def endpoint_matcher(self, endpoint_matcher):
        """Sets the endpoint_matcher of this EndpointPolicy.


        :param endpoint_matcher: The endpoint_matcher of this EndpointPolicy.
        :type endpoint_matcher: EndpointMatcher
        """

        self._endpoint_matcher = endpoint_matcher

    @property
    def labels(self):
        """Gets the labels of this EndpointPolicy.

        Optional. Set of label tags associated with the EndpointPolicy resource.

        :return: The labels of this EndpointPolicy.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this EndpointPolicy.

        Optional. Set of label tags associated with the EndpointPolicy resource.

        :param labels: The labels of this EndpointPolicy.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this EndpointPolicy.

        Required. Name of the EndpointPolicy resource. It matches pattern `projects/{project}/locations/global/endpointPolicies/{endpoint_policy}`.

        :return: The name of this EndpointPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EndpointPolicy.

        Required. Name of the EndpointPolicy resource. It matches pattern `projects/{project}/locations/global/endpointPolicies/{endpoint_policy}`.

        :param name: The name of this EndpointPolicy.
        :type name: str
        """

        self._name = name

    @property
    def server_tls_policy(self):
        """Gets the server_tls_policy of this EndpointPolicy.

        Optional. A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be applied to terminate the inbound traffic at the identified backends. If this field is not set, authentication is disabled(open) for this endpoint.

        :return: The server_tls_policy of this EndpointPolicy.
        :rtype: str
        """
        return self._server_tls_policy

    @server_tls_policy.setter
    def server_tls_policy(self, server_tls_policy):
        """Sets the server_tls_policy of this EndpointPolicy.

        Optional. A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be applied to terminate the inbound traffic at the identified backends. If this field is not set, authentication is disabled(open) for this endpoint.

        :param server_tls_policy: The server_tls_policy of this EndpointPolicy.
        :type server_tls_policy: str
        """

        self._server_tls_policy = server_tls_policy

    @property
    def traffic_port_selector(self):
        """Gets the traffic_port_selector of this EndpointPolicy.


        :return: The traffic_port_selector of this EndpointPolicy.
        :rtype: TrafficPortSelector
        """
        return self._traffic_port_selector

    @traffic_port_selector.setter
    def traffic_port_selector(self, traffic_port_selector):
        """Sets the traffic_port_selector of this EndpointPolicy.


        :param traffic_port_selector: The traffic_port_selector of this EndpointPolicy.
        :type traffic_port_selector: TrafficPortSelector
        """

        self._traffic_port_selector = traffic_port_selector

    @property
    def type(self):
        """Gets the type of this EndpointPolicy.

        Required. The type of endpoint policy. This is primarily used to validate the configuration.

        :return: The type of this EndpointPolicy.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EndpointPolicy.

        Required. The type of endpoint policy. This is primarily used to validate the configuration.

        :param type: The type of this EndpointPolicy.
        :type type: str
        """
        allowed_values = ["ENDPOINT_POLICY_TYPE_UNSPECIFIED", "SIDECAR_PROXY", "GRPC_SERVER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this EndpointPolicy.

        Output only. The timestamp when the resource was updated.

        :return: The update_time of this EndpointPolicy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this EndpointPolicy.

        Output only. The timestamp when the resource was updated.

        :param update_time: The update_time of this EndpointPolicy.
        :type update_time: str
        """

        self._update_time = update_time
