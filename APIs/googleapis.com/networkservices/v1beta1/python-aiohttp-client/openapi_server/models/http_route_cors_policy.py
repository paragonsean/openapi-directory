# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HttpRouteCorsPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_credentials: bool=None, allow_headers: List[str]=None, allow_methods: List[str]=None, allow_origin_regexes: List[str]=None, allow_origins: List[str]=None, disabled: bool=None, expose_headers: List[str]=None, max_age: str=None):
        """HttpRouteCorsPolicy - a model defined in OpenAPI

        :param allow_credentials: The allow_credentials of this HttpRouteCorsPolicy.
        :param allow_headers: The allow_headers of this HttpRouteCorsPolicy.
        :param allow_methods: The allow_methods of this HttpRouteCorsPolicy.
        :param allow_origin_regexes: The allow_origin_regexes of this HttpRouteCorsPolicy.
        :param allow_origins: The allow_origins of this HttpRouteCorsPolicy.
        :param disabled: The disabled of this HttpRouteCorsPolicy.
        :param expose_headers: The expose_headers of this HttpRouteCorsPolicy.
        :param max_age: The max_age of this HttpRouteCorsPolicy.
        """
        self.openapi_types = {
            'allow_credentials': bool,
            'allow_headers': List[str],
            'allow_methods': List[str],
            'allow_origin_regexes': List[str],
            'allow_origins': List[str],
            'disabled': bool,
            'expose_headers': List[str],
            'max_age': str
        }

        self.attribute_map = {
            'allow_credentials': 'allowCredentials',
            'allow_headers': 'allowHeaders',
            'allow_methods': 'allowMethods',
            'allow_origin_regexes': 'allowOriginRegexes',
            'allow_origins': 'allowOrigins',
            'disabled': 'disabled',
            'expose_headers': 'exposeHeaders',
            'max_age': 'maxAge'
        }

        self._allow_credentials = allow_credentials
        self._allow_headers = allow_headers
        self._allow_methods = allow_methods
        self._allow_origin_regexes = allow_origin_regexes
        self._allow_origins = allow_origins
        self._disabled = disabled
        self._expose_headers = expose_headers
        self._max_age = max_age

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteCorsPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRouteCorsPolicy of this HttpRouteCorsPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_credentials(self):
        """Gets the allow_credentials of this HttpRouteCorsPolicy.

        In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.

        :return: The allow_credentials of this HttpRouteCorsPolicy.
        :rtype: bool
        """
        return self._allow_credentials

    @allow_credentials.setter
    def allow_credentials(self, allow_credentials):
        """Sets the allow_credentials of this HttpRouteCorsPolicy.

        In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.

        :param allow_credentials: The allow_credentials of this HttpRouteCorsPolicy.
        :type allow_credentials: bool
        """

        self._allow_credentials = allow_credentials

    @property
    def allow_headers(self):
        """Gets the allow_headers of this HttpRouteCorsPolicy.

        Specifies the content for Access-Control-Allow-Headers header.

        :return: The allow_headers of this HttpRouteCorsPolicy.
        :rtype: List[str]
        """
        return self._allow_headers

    @allow_headers.setter
    def allow_headers(self, allow_headers):
        """Sets the allow_headers of this HttpRouteCorsPolicy.

        Specifies the content for Access-Control-Allow-Headers header.

        :param allow_headers: The allow_headers of this HttpRouteCorsPolicy.
        :type allow_headers: List[str]
        """

        self._allow_headers = allow_headers

    @property
    def allow_methods(self):
        """Gets the allow_methods of this HttpRouteCorsPolicy.

        Specifies the content for Access-Control-Allow-Methods header.

        :return: The allow_methods of this HttpRouteCorsPolicy.
        :rtype: List[str]
        """
        return self._allow_methods

    @allow_methods.setter
    def allow_methods(self, allow_methods):
        """Sets the allow_methods of this HttpRouteCorsPolicy.

        Specifies the content for Access-Control-Allow-Methods header.

        :param allow_methods: The allow_methods of this HttpRouteCorsPolicy.
        :type allow_methods: List[str]
        """

        self._allow_methods = allow_methods

    @property
    def allow_origin_regexes(self):
        """Gets the allow_origin_regexes of this HttpRouteCorsPolicy.

        Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.

        :return: The allow_origin_regexes of this HttpRouteCorsPolicy.
        :rtype: List[str]
        """
        return self._allow_origin_regexes

    @allow_origin_regexes.setter
    def allow_origin_regexes(self, allow_origin_regexes):
        """Sets the allow_origin_regexes of this HttpRouteCorsPolicy.

        Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.

        :param allow_origin_regexes: The allow_origin_regexes of this HttpRouteCorsPolicy.
        :type allow_origin_regexes: List[str]
        """

        self._allow_origin_regexes = allow_origin_regexes

    @property
    def allow_origins(self):
        """Gets the allow_origins of this HttpRouteCorsPolicy.

        Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.

        :return: The allow_origins of this HttpRouteCorsPolicy.
        :rtype: List[str]
        """
        return self._allow_origins

    @allow_origins.setter
    def allow_origins(self, allow_origins):
        """Sets the allow_origins of this HttpRouteCorsPolicy.

        Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.

        :param allow_origins: The allow_origins of this HttpRouteCorsPolicy.
        :type allow_origins: List[str]
        """

        self._allow_origins = allow_origins

    @property
    def disabled(self):
        """Gets the disabled of this HttpRouteCorsPolicy.

        If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.

        :return: The disabled of this HttpRouteCorsPolicy.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this HttpRouteCorsPolicy.

        If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.

        :param disabled: The disabled of this HttpRouteCorsPolicy.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def expose_headers(self):
        """Gets the expose_headers of this HttpRouteCorsPolicy.

        Specifies the content for Access-Control-Expose-Headers header.

        :return: The expose_headers of this HttpRouteCorsPolicy.
        :rtype: List[str]
        """
        return self._expose_headers

    @expose_headers.setter
    def expose_headers(self, expose_headers):
        """Sets the expose_headers of this HttpRouteCorsPolicy.

        Specifies the content for Access-Control-Expose-Headers header.

        :param expose_headers: The expose_headers of this HttpRouteCorsPolicy.
        :type expose_headers: List[str]
        """

        self._expose_headers = expose_headers

    @property
    def max_age(self):
        """Gets the max_age of this HttpRouteCorsPolicy.

        Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.

        :return: The max_age of this HttpRouteCorsPolicy.
        :rtype: str
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this HttpRouteCorsPolicy.

        Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.

        :param max_age: The max_age of this HttpRouteCorsPolicy.
        :type max_age: str
        """

        self._max_age = max_age
