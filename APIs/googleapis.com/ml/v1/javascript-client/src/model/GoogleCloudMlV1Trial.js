/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudMlV1Measurement from './GoogleCloudMlV1Measurement';
import GoogleCloudMlV1TrialParameter from './GoogleCloudMlV1TrialParameter';

/**
 * The GoogleCloudMlV1Trial model module.
 * @module model/GoogleCloudMlV1Trial
 * @version v1
 */
class GoogleCloudMlV1Trial {
    /**
     * Constructs a new <code>GoogleCloudMlV1Trial</code>.
     * A message representing a trial.
     * @alias module:model/GoogleCloudMlV1Trial
     */
    constructor() { 
        
        GoogleCloudMlV1Trial.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudMlV1Trial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudMlV1Trial} obj Optional instance to populate.
     * @return {module:model/GoogleCloudMlV1Trial} The populated <code>GoogleCloudMlV1Trial</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudMlV1Trial();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('finalMeasurement')) {
                obj['finalMeasurement'] = GoogleCloudMlV1Measurement.constructFromObject(data['finalMeasurement']);
            }
            if (data.hasOwnProperty('infeasibleReason')) {
                obj['infeasibleReason'] = ApiClient.convertToType(data['infeasibleReason'], 'String');
            }
            if (data.hasOwnProperty('measurements')) {
                obj['measurements'] = ApiClient.convertToType(data['measurements'], [GoogleCloudMlV1Measurement]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [GoogleCloudMlV1TrialParameter]);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('trialInfeasible')) {
                obj['trialInfeasible'] = ApiClient.convertToType(data['trialInfeasible'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudMlV1Trial</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudMlV1Trial</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // validate the optional field `finalMeasurement`
        if (data['finalMeasurement']) { // data not null
          GoogleCloudMlV1Measurement.validateJSON(data['finalMeasurement']);
        }
        // ensure the json data is a string
        if (data['infeasibleReason'] && !(typeof data['infeasibleReason'] === 'string' || data['infeasibleReason'] instanceof String)) {
            throw new Error("Expected the field `infeasibleReason` to be a primitive type in the JSON string but got " + data['infeasibleReason']);
        }
        if (data['measurements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['measurements'])) {
                throw new Error("Expected the field `measurements` to be an array in the JSON data but got " + data['measurements']);
            }
            // validate the optional field `measurements` (array)
            for (const item of data['measurements']) {
                GoogleCloudMlV1Measurement.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                GoogleCloudMlV1TrialParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. The identifier of the client that originally requested this trial.
 * @member {String} clientId
 */
GoogleCloudMlV1Trial.prototype['clientId'] = undefined;

/**
 * Output only. Time at which the trial's status changed to COMPLETED.
 * @member {String} endTime
 */
GoogleCloudMlV1Trial.prototype['endTime'] = undefined;

/**
 * @member {module:model/GoogleCloudMlV1Measurement} finalMeasurement
 */
GoogleCloudMlV1Trial.prototype['finalMeasurement'] = undefined;

/**
 * Output only. A human readable string describing why the trial is infeasible. This should only be set if trial_infeasible is true.
 * @member {String} infeasibleReason
 */
GoogleCloudMlV1Trial.prototype['infeasibleReason'] = undefined;

/**
 * A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_time). These are used for early stopping computations.
 * @member {Array.<module:model/GoogleCloudMlV1Measurement>} measurements
 */
GoogleCloudMlV1Trial.prototype['measurements'] = undefined;

/**
 * Output only. Name of the trial assigned by the service.
 * @member {String} name
 */
GoogleCloudMlV1Trial.prototype['name'] = undefined;

/**
 * The parameters of the trial.
 * @member {Array.<module:model/GoogleCloudMlV1TrialParameter>} parameters
 */
GoogleCloudMlV1Trial.prototype['parameters'] = undefined;

/**
 * Output only. Time at which the trial was started.
 * @member {String} startTime
 */
GoogleCloudMlV1Trial.prototype['startTime'] = undefined;

/**
 * The detailed state of a trial.
 * @member {module:model/GoogleCloudMlV1Trial.StateEnum} state
 */
GoogleCloudMlV1Trial.prototype['state'] = undefined;

/**
 * Output only. If true, the parameters in this trial are not attempted again.
 * @member {Boolean} trialInfeasible
 */
GoogleCloudMlV1Trial.prototype['trialInfeasible'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudMlV1Trial['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "REQUESTED"
     * @const
     */
    "REQUESTED": "REQUESTED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "STOPPING"
     * @const
     */
    "STOPPING": "STOPPING"
};



export default GoogleCloudMlV1Trial;

