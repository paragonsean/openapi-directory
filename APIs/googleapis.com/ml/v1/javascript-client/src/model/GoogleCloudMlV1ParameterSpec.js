/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudMlV1ParameterSpec model module.
 * @module model/GoogleCloudMlV1ParameterSpec
 * @version v1
 */
class GoogleCloudMlV1ParameterSpec {
    /**
     * Constructs a new <code>GoogleCloudMlV1ParameterSpec</code>.
     * Represents a single hyperparameter to optimize.
     * @alias module:model/GoogleCloudMlV1ParameterSpec
     */
    constructor() { 
        
        GoogleCloudMlV1ParameterSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudMlV1ParameterSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudMlV1ParameterSpec} obj Optional instance to populate.
     * @return {module:model/GoogleCloudMlV1ParameterSpec} The populated <code>GoogleCloudMlV1ParameterSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudMlV1ParameterSpec();

            if (data.hasOwnProperty('categoricalValues')) {
                obj['categoricalValues'] = ApiClient.convertToType(data['categoricalValues'], ['String']);
            }
            if (data.hasOwnProperty('discreteValues')) {
                obj['discreteValues'] = ApiClient.convertToType(data['discreteValues'], ['Number']);
            }
            if (data.hasOwnProperty('maxValue')) {
                obj['maxValue'] = ApiClient.convertToType(data['maxValue'], 'Number');
            }
            if (data.hasOwnProperty('minValue')) {
                obj['minValue'] = ApiClient.convertToType(data['minValue'], 'Number');
            }
            if (data.hasOwnProperty('parameterName')) {
                obj['parameterName'] = ApiClient.convertToType(data['parameterName'], 'String');
            }
            if (data.hasOwnProperty('scaleType')) {
                obj['scaleType'] = ApiClient.convertToType(data['scaleType'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudMlV1ParameterSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudMlV1ParameterSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['categoricalValues'])) {
            throw new Error("Expected the field `categoricalValues` to be an array in the JSON data but got " + data['categoricalValues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['discreteValues'])) {
            throw new Error("Expected the field `discreteValues` to be an array in the JSON data but got " + data['discreteValues']);
        }
        // ensure the json data is a string
        if (data['parameterName'] && !(typeof data['parameterName'] === 'string' || data['parameterName'] instanceof String)) {
            throw new Error("Expected the field `parameterName` to be a primitive type in the JSON string but got " + data['parameterName']);
        }
        // ensure the json data is a string
        if (data['scaleType'] && !(typeof data['scaleType'] === 'string' || data['scaleType'] instanceof String)) {
            throw new Error("Expected the field `scaleType` to be a primitive type in the JSON string but got " + data['scaleType']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Required if type is `CATEGORICAL`. The list of possible categories.
 * @member {Array.<String>} categoricalValues
 */
GoogleCloudMlV1ParameterSpec.prototype['categoricalValues'] = undefined;

/**
 * Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
 * @member {Array.<Number>} discreteValues
 */
GoogleCloudMlV1ParameterSpec.prototype['discreteValues'] = undefined;

/**
 * Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.
 * @member {Number} maxValue
 */
GoogleCloudMlV1ParameterSpec.prototype['maxValue'] = undefined;

/**
 * Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.
 * @member {Number} minValue
 */
GoogleCloudMlV1ParameterSpec.prototype['minValue'] = undefined;

/**
 * Required. The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., \"learning_rate\".
 * @member {String} parameterName
 */
GoogleCloudMlV1ParameterSpec.prototype['parameterName'] = undefined;

/**
 * Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
 * @member {module:model/GoogleCloudMlV1ParameterSpec.ScaleTypeEnum} scaleType
 */
GoogleCloudMlV1ParameterSpec.prototype['scaleType'] = undefined;

/**
 * Required. The type of the parameter.
 * @member {module:model/GoogleCloudMlV1ParameterSpec.TypeEnum} type
 */
GoogleCloudMlV1ParameterSpec.prototype['type'] = undefined;





/**
 * Allowed values for the <code>scaleType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudMlV1ParameterSpec['ScaleTypeEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "UNIT_LINEAR_SCALE"
     * @const
     */
    "UNIT_LINEAR_SCALE": "UNIT_LINEAR_SCALE",

    /**
     * value: "UNIT_LOG_SCALE"
     * @const
     */
    "UNIT_LOG_SCALE": "UNIT_LOG_SCALE",

    /**
     * value: "UNIT_REVERSE_LOG_SCALE"
     * @const
     */
    "UNIT_REVERSE_LOG_SCALE": "UNIT_REVERSE_LOG_SCALE"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudMlV1ParameterSpec['TypeEnum'] = {

    /**
     * value: "PARAMETER_TYPE_UNSPECIFIED"
     * @const
     */
    "PARAMETER_TYPE_UNSPECIFIED": "PARAMETER_TYPE_UNSPECIFIED",

    /**
     * value: "DOUBLE"
     * @const
     */
    "DOUBLE": "DOUBLE",

    /**
     * value: "INTEGER"
     * @const
     */
    "INTEGER": "INTEGER",

    /**
     * value: "CATEGORICAL"
     * @const
     */
    "CATEGORICAL": "CATEGORICAL",

    /**
     * value: "DISCRETE"
     * @const
     */
    "DISCRETE": "DISCRETE"
};



export default GoogleCloudMlV1ParameterSpec;

