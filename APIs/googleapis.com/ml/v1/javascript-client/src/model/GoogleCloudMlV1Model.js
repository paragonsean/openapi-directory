/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudMlV1Version from './GoogleCloudMlV1Version';

/**
 * The GoogleCloudMlV1Model model module.
 * @module model/GoogleCloudMlV1Model
 * @version v1
 */
class GoogleCloudMlV1Model {
    /**
     * Constructs a new <code>GoogleCloudMlV1Model</code>.
     * Represents a machine learning solution. A model can have multiple versions, each of which is a deployed, trained model ready to receive prediction requests. The model itself is just a container.
     * @alias module:model/GoogleCloudMlV1Model
     */
    constructor() { 
        
        GoogleCloudMlV1Model.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudMlV1Model</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudMlV1Model} obj Optional instance to populate.
     * @return {module:model/GoogleCloudMlV1Model} The populated <code>GoogleCloudMlV1Model</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudMlV1Model();

            if (data.hasOwnProperty('defaultVersion')) {
                obj['defaultVersion'] = GoogleCloudMlV1Version.constructFromObject(data['defaultVersion']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'Blob');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('onlinePredictionConsoleLogging')) {
                obj['onlinePredictionConsoleLogging'] = ApiClient.convertToType(data['onlinePredictionConsoleLogging'], 'Boolean');
            }
            if (data.hasOwnProperty('onlinePredictionLogging')) {
                obj['onlinePredictionLogging'] = ApiClient.convertToType(data['onlinePredictionLogging'], 'Boolean');
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudMlV1Model</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudMlV1Model</code>.
     */
    static validateJSON(data) {
        // validate the optional field `defaultVersion`
        if (data['defaultVersion']) { // data not null
          GoogleCloudMlV1Version.validateJSON(data['defaultVersion']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['regions'])) {
            throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudMlV1Version} defaultVersion
 */
GoogleCloudMlV1Model.prototype['defaultVersion'] = undefined;

/**
 * Optional. The description specified for the model when it was created.
 * @member {String} description
 */
GoogleCloudMlV1Model.prototype['description'] = undefined;

/**
 * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a model from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform model updates in order to avoid race conditions: An `etag` is returned in the response to `GetModel`, and systems are expected to put that etag in the request to `UpdateModel` to ensure that their change will be applied to the model as intended.
 * @member {Blob} etag
 */
GoogleCloudMlV1Model.prototype['etag'] = undefined;

/**
 * Optional. One or more labels that you can add, to organize your models. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels. Note that this field is not updatable for mls1* models.
 * @member {Object.<String, String>} labels
 */
GoogleCloudMlV1Model.prototype['labels'] = undefined;

/**
 * Required. The name specified for the model when it was created. The model name must be unique within the project it is created in.
 * @member {String} name
 */
GoogleCloudMlV1Model.prototype['name'] = undefined;

/**
 * Optional. If true, online prediction nodes send `stderr` and `stdout` streams to Cloud Logging. These can be more verbose than the standard access logs (see `onlinePredictionLogging`) and can incur higher cost. However, they are helpful for debugging. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high QPS. Estimate your costs before enabling this option. Default is false.
 * @member {Boolean} onlinePredictionConsoleLogging
 */
GoogleCloudMlV1Model.prototype['onlinePredictionConsoleLogging'] = undefined;

/**
 * Optional. If true, online prediction access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each request. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option. Default is false.
 * @member {Boolean} onlinePredictionLogging
 */
GoogleCloudMlV1Model.prototype['onlinePredictionLogging'] = undefined;

/**
 * Optional. The list of regions where the model is going to be deployed. Only one region per model is supported. Defaults to 'us-central1' if nothing is set. See the available regions for AI Platform services. Note: * No matter where a model is deployed, it can always be accessed by users from anywhere, both for online and batch prediction. * The region for a batch prediction job is set by the region field when submitting the batch prediction job and does not take its value from this field.
 * @member {Array.<String>} regions
 */
GoogleCloudMlV1Model.prototype['regions'] = undefined;






export default GoogleCloudMlV1Model;

