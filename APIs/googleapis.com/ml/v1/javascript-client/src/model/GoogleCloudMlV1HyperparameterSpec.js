/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudMlV1ParameterSpec from './GoogleCloudMlV1ParameterSpec';

/**
 * The GoogleCloudMlV1HyperparameterSpec model module.
 * @module model/GoogleCloudMlV1HyperparameterSpec
 * @version v1
 */
class GoogleCloudMlV1HyperparameterSpec {
    /**
     * Constructs a new <code>GoogleCloudMlV1HyperparameterSpec</code>.
     * Represents a set of hyperparameters to optimize.
     * @alias module:model/GoogleCloudMlV1HyperparameterSpec
     */
    constructor() { 
        
        GoogleCloudMlV1HyperparameterSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudMlV1HyperparameterSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudMlV1HyperparameterSpec} obj Optional instance to populate.
     * @return {module:model/GoogleCloudMlV1HyperparameterSpec} The populated <code>GoogleCloudMlV1HyperparameterSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudMlV1HyperparameterSpec();

            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('enableTrialEarlyStopping')) {
                obj['enableTrialEarlyStopping'] = ApiClient.convertToType(data['enableTrialEarlyStopping'], 'Boolean');
            }
            if (data.hasOwnProperty('goal')) {
                obj['goal'] = ApiClient.convertToType(data['goal'], 'String');
            }
            if (data.hasOwnProperty('hyperparameterMetricTag')) {
                obj['hyperparameterMetricTag'] = ApiClient.convertToType(data['hyperparameterMetricTag'], 'String');
            }
            if (data.hasOwnProperty('maxFailedTrials')) {
                obj['maxFailedTrials'] = ApiClient.convertToType(data['maxFailedTrials'], 'Number');
            }
            if (data.hasOwnProperty('maxParallelTrials')) {
                obj['maxParallelTrials'] = ApiClient.convertToType(data['maxParallelTrials'], 'Number');
            }
            if (data.hasOwnProperty('maxTrials')) {
                obj['maxTrials'] = ApiClient.convertToType(data['maxTrials'], 'Number');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], [GoogleCloudMlV1ParameterSpec]);
            }
            if (data.hasOwnProperty('resumePreviousJobId')) {
                obj['resumePreviousJobId'] = ApiClient.convertToType(data['resumePreviousJobId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudMlV1HyperparameterSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudMlV1HyperparameterSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        // ensure the json data is a string
        if (data['goal'] && !(typeof data['goal'] === 'string' || data['goal'] instanceof String)) {
            throw new Error("Expected the field `goal` to be a primitive type in the JSON string but got " + data['goal']);
        }
        // ensure the json data is a string
        if (data['hyperparameterMetricTag'] && !(typeof data['hyperparameterMetricTag'] === 'string' || data['hyperparameterMetricTag'] instanceof String)) {
            throw new Error("Expected the field `hyperparameterMetricTag` to be a primitive type in the JSON string but got " + data['hyperparameterMetricTag']);
        }
        if (data['params']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['params'])) {
                throw new Error("Expected the field `params` to be an array in the JSON data but got " + data['params']);
            }
            // validate the optional field `params` (array)
            for (const item of data['params']) {
                GoogleCloudMlV1ParameterSpec.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['resumePreviousJobId'] && !(typeof data['resumePreviousJobId'] === 'string' || data['resumePreviousJobId'] instanceof String)) {
            throw new Error("Expected the field `resumePreviousJobId` to be a primitive type in the JSON string but got " + data['resumePreviousJobId']);
        }

        return true;
    }


}



/**
 * Optional. The search algorithm specified for the hyperparameter tuning job. Uses the default AI Platform hyperparameter tuning algorithm if unspecified.
 * @member {module:model/GoogleCloudMlV1HyperparameterSpec.AlgorithmEnum} algorithm
 */
GoogleCloudMlV1HyperparameterSpec.prototype['algorithm'] = undefined;

/**
 * Optional. Indicates if the hyperparameter tuning job enables auto trial early stopping.
 * @member {Boolean} enableTrialEarlyStopping
 */
GoogleCloudMlV1HyperparameterSpec.prototype['enableTrialEarlyStopping'] = undefined;

/**
 * Required. The type of goal to use for tuning. Available types are `MAXIMIZE` and `MINIMIZE`. Defaults to `MAXIMIZE`.
 * @member {module:model/GoogleCloudMlV1HyperparameterSpec.GoalEnum} goal
 */
GoogleCloudMlV1HyperparameterSpec.prototype['goal'] = undefined;

/**
 * Optional. The TensorFlow summary tag name to use for optimizing trials. For current versions of TensorFlow, this tag name should exactly match what is shown in TensorBoard, including all scopes. For versions of TensorFlow prior to 0.12, this should be only the tag passed to tf.Summary. By default, \"training/hptuning/metric\" will be used.
 * @member {String} hyperparameterMetricTag
 */
GoogleCloudMlV1HyperparameterSpec.prototype['hyperparameterMetricTag'] = undefined;

/**
 * Optional. The number of failed trials that need to be seen before failing the hyperparameter tuning job. You can specify this field to override the default failing criteria for AI Platform hyperparameter tuning jobs. Defaults to zero, which means the service decides when a hyperparameter job should fail.
 * @member {Number} maxFailedTrials
 */
GoogleCloudMlV1HyperparameterSpec.prototype['maxFailedTrials'] = undefined;

/**
 * Optional. The number of training trials to run concurrently. You can reduce the time it takes to perform hyperparameter tuning by adding trials in parallel. However, each trail only benefits from the information gained in completed trials. That means that a trial does not get access to the results of trials running at the same time, which could reduce the quality of the overall optimization. Each trial will use the same scale tier and machine types. Defaults to one.
 * @member {Number} maxParallelTrials
 */
GoogleCloudMlV1HyperparameterSpec.prototype['maxParallelTrials'] = undefined;

/**
 * Optional. How many training trials should be attempted to optimize the specified hyperparameters. Defaults to one.
 * @member {Number} maxTrials
 */
GoogleCloudMlV1HyperparameterSpec.prototype['maxTrials'] = undefined;

/**
 * Required. The set of parameters to tune.
 * @member {Array.<module:model/GoogleCloudMlV1ParameterSpec>} params
 */
GoogleCloudMlV1HyperparameterSpec.prototype['params'] = undefined;

/**
 * Optional. The prior hyperparameter tuning job id that users hope to continue with. The job id will be used to find the corresponding vizier study guid and resume the study.
 * @member {String} resumePreviousJobId
 */
GoogleCloudMlV1HyperparameterSpec.prototype['resumePreviousJobId'] = undefined;





/**
 * Allowed values for the <code>algorithm</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudMlV1HyperparameterSpec['AlgorithmEnum'] = {

    /**
     * value: "ALGORITHM_UNSPECIFIED"
     * @const
     */
    "ALGORITHM_UNSPECIFIED": "ALGORITHM_UNSPECIFIED",

    /**
     * value: "GRID_SEARCH"
     * @const
     */
    "GRID_SEARCH": "GRID_SEARCH",

    /**
     * value: "RANDOM_SEARCH"
     * @const
     */
    "RANDOM_SEARCH": "RANDOM_SEARCH"
};


/**
 * Allowed values for the <code>goal</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudMlV1HyperparameterSpec['GoalEnum'] = {

    /**
     * value: "GOAL_TYPE_UNSPECIFIED"
     * @const
     */
    "GOAL_TYPE_UNSPECIFIED": "GOAL_TYPE_UNSPECIFIED",

    /**
     * value: "MAXIMIZE"
     * @const
     */
    "MAXIMIZE": "MAXIMIZE",

    /**
     * value: "MINIMIZE"
     * @const
     */
    "MINIMIZE": "MINIMIZE"
};



export default GoogleCloudMlV1HyperparameterSpec;

