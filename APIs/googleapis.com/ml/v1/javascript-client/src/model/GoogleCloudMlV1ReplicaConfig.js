/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudMlV1AcceleratorConfig from './GoogleCloudMlV1AcceleratorConfig';
import GoogleCloudMlV1DiskConfig from './GoogleCloudMlV1DiskConfig';

/**
 * The GoogleCloudMlV1ReplicaConfig model module.
 * @module model/GoogleCloudMlV1ReplicaConfig
 * @version v1
 */
class GoogleCloudMlV1ReplicaConfig {
    /**
     * Constructs a new <code>GoogleCloudMlV1ReplicaConfig</code>.
     * Represents the configuration for a replica in a cluster.
     * @alias module:model/GoogleCloudMlV1ReplicaConfig
     */
    constructor() { 
        
        GoogleCloudMlV1ReplicaConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudMlV1ReplicaConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudMlV1ReplicaConfig} obj Optional instance to populate.
     * @return {module:model/GoogleCloudMlV1ReplicaConfig} The populated <code>GoogleCloudMlV1ReplicaConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudMlV1ReplicaConfig();

            if (data.hasOwnProperty('acceleratorConfig')) {
                obj['acceleratorConfig'] = GoogleCloudMlV1AcceleratorConfig.constructFromObject(data['acceleratorConfig']);
            }
            if (data.hasOwnProperty('containerArgs')) {
                obj['containerArgs'] = ApiClient.convertToType(data['containerArgs'], ['String']);
            }
            if (data.hasOwnProperty('containerCommand')) {
                obj['containerCommand'] = ApiClient.convertToType(data['containerCommand'], ['String']);
            }
            if (data.hasOwnProperty('diskConfig')) {
                obj['diskConfig'] = GoogleCloudMlV1DiskConfig.constructFromObject(data['diskConfig']);
            }
            if (data.hasOwnProperty('imageUri')) {
                obj['imageUri'] = ApiClient.convertToType(data['imageUri'], 'String');
            }
            if (data.hasOwnProperty('tpuTfVersion')) {
                obj['tpuTfVersion'] = ApiClient.convertToType(data['tpuTfVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudMlV1ReplicaConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudMlV1ReplicaConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `acceleratorConfig`
        if (data['acceleratorConfig']) { // data not null
          GoogleCloudMlV1AcceleratorConfig.validateJSON(data['acceleratorConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['containerArgs'])) {
            throw new Error("Expected the field `containerArgs` to be an array in the JSON data but got " + data['containerArgs']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['containerCommand'])) {
            throw new Error("Expected the field `containerCommand` to be an array in the JSON data but got " + data['containerCommand']);
        }
        // validate the optional field `diskConfig`
        if (data['diskConfig']) { // data not null
          GoogleCloudMlV1DiskConfig.validateJSON(data['diskConfig']);
        }
        // ensure the json data is a string
        if (data['imageUri'] && !(typeof data['imageUri'] === 'string' || data['imageUri'] instanceof String)) {
            throw new Error("Expected the field `imageUri` to be a primitive type in the JSON string but got " + data['imageUri']);
        }
        // ensure the json data is a string
        if (data['tpuTfVersion'] && !(typeof data['tpuTfVersion'] === 'string' || data['tpuTfVersion'] instanceof String)) {
            throw new Error("Expected the field `tpuTfVersion` to be a primitive type in the JSON string but got " + data['tpuTfVersion']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudMlV1AcceleratorConfig} acceleratorConfig
 */
GoogleCloudMlV1ReplicaConfig.prototype['acceleratorConfig'] = undefined;

/**
 * Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
 * @member {Array.<String>} containerArgs
 */
GoogleCloudMlV1ReplicaConfig.prototype['containerArgs'] = undefined;

/**
 * The command with which the replica's custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image's ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
 * @member {Array.<String>} containerCommand
 */
GoogleCloudMlV1ReplicaConfig.prototype['containerCommand'] = undefined;

/**
 * @member {module:model/GoogleCloudMlV1DiskConfig} diskConfig
 */
GoogleCloudMlV1ReplicaConfig.prototype['diskConfig'] = undefined;

/**
 * The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).
 * @member {String} imageUri
 */
GoogleCloudMlV1ReplicaConfig.prototype['imageUri'] = undefined;

/**
 * The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`.
 * @member {String} tpuTfVersion
 */
GoogleCloudMlV1ReplicaConfig.prototype['tpuTfVersion'] = undefined;






export default GoogleCloudMlV1ReplicaConfig;

