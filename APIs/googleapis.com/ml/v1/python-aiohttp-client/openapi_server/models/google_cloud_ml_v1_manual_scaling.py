# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudMlV1ManualScaling(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodes: int=None):
        """GoogleCloudMlV1ManualScaling - a model defined in OpenAPI

        :param nodes: The nodes of this GoogleCloudMlV1ManualScaling.
        """
        self.openapi_types = {
            'nodes': int
        }

        self.attribute_map = {
            'nodes': 'nodes'
        }

        self._nodes = nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudMlV1ManualScaling':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudMlV1__ManualScaling of this GoogleCloudMlV1ManualScaling.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self):
        """Gets the nodes of this GoogleCloudMlV1ManualScaling.

        The number of nodes to allocate for this model. These nodes are always up, starting from the time the model is deployed, so the cost of operating this model will be proportional to `nodes` * number of hours since last billing cycle plus the cost for each prediction performed.

        :return: The nodes of this GoogleCloudMlV1ManualScaling.
        :rtype: int
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this GoogleCloudMlV1ManualScaling.

        The number of nodes to allocate for this model. These nodes are always up, starting from the time the model is deployed, so the cost of operating this model will be proportional to `nodes` * number of hours since last billing cycle plus the cost for each prediction performed.

        :param nodes: The nodes of this GoogleCloudMlV1ManualScaling.
        :type nodes: int
        """

        self._nodes = nodes
