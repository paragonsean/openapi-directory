# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudMlV1ParameterSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categorical_values: List[str]=None, discrete_values: List[float]=None, max_value: float=None, min_value: float=None, parameter_name: str=None, scale_type: str=None, type: str=None):
        """GoogleCloudMlV1ParameterSpec - a model defined in OpenAPI

        :param categorical_values: The categorical_values of this GoogleCloudMlV1ParameterSpec.
        :param discrete_values: The discrete_values of this GoogleCloudMlV1ParameterSpec.
        :param max_value: The max_value of this GoogleCloudMlV1ParameterSpec.
        :param min_value: The min_value of this GoogleCloudMlV1ParameterSpec.
        :param parameter_name: The parameter_name of this GoogleCloudMlV1ParameterSpec.
        :param scale_type: The scale_type of this GoogleCloudMlV1ParameterSpec.
        :param type: The type of this GoogleCloudMlV1ParameterSpec.
        """
        self.openapi_types = {
            'categorical_values': List[str],
            'discrete_values': List[float],
            'max_value': float,
            'min_value': float,
            'parameter_name': str,
            'scale_type': str,
            'type': str
        }

        self.attribute_map = {
            'categorical_values': 'categoricalValues',
            'discrete_values': 'discreteValues',
            'max_value': 'maxValue',
            'min_value': 'minValue',
            'parameter_name': 'parameterName',
            'scale_type': 'scaleType',
            'type': 'type'
        }

        self._categorical_values = categorical_values
        self._discrete_values = discrete_values
        self._max_value = max_value
        self._min_value = min_value
        self._parameter_name = parameter_name
        self._scale_type = scale_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudMlV1ParameterSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudMlV1__ParameterSpec of this GoogleCloudMlV1ParameterSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categorical_values(self):
        """Gets the categorical_values of this GoogleCloudMlV1ParameterSpec.

        Required if type is `CATEGORICAL`. The list of possible categories.

        :return: The categorical_values of this GoogleCloudMlV1ParameterSpec.
        :rtype: List[str]
        """
        return self._categorical_values

    @categorical_values.setter
    def categorical_values(self, categorical_values):
        """Sets the categorical_values of this GoogleCloudMlV1ParameterSpec.

        Required if type is `CATEGORICAL`. The list of possible categories.

        :param categorical_values: The categorical_values of this GoogleCloudMlV1ParameterSpec.
        :type categorical_values: List[str]
        """

        self._categorical_values = categorical_values

    @property
    def discrete_values(self):
        """Gets the discrete_values of this GoogleCloudMlV1ParameterSpec.

        Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.

        :return: The discrete_values of this GoogleCloudMlV1ParameterSpec.
        :rtype: List[float]
        """
        return self._discrete_values

    @discrete_values.setter
    def discrete_values(self, discrete_values):
        """Sets the discrete_values of this GoogleCloudMlV1ParameterSpec.

        Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.

        :param discrete_values: The discrete_values of this GoogleCloudMlV1ParameterSpec.
        :type discrete_values: List[float]
        """

        self._discrete_values = discrete_values

    @property
    def max_value(self):
        """Gets the max_value of this GoogleCloudMlV1ParameterSpec.

        Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.

        :return: The max_value of this GoogleCloudMlV1ParameterSpec.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this GoogleCloudMlV1ParameterSpec.

        Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.

        :param max_value: The max_value of this GoogleCloudMlV1ParameterSpec.
        :type max_value: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this GoogleCloudMlV1ParameterSpec.

        Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.

        :return: The min_value of this GoogleCloudMlV1ParameterSpec.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this GoogleCloudMlV1ParameterSpec.

        Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.

        :param min_value: The min_value of this GoogleCloudMlV1ParameterSpec.
        :type min_value: float
        """

        self._min_value = min_value

    @property
    def parameter_name(self):
        """Gets the parameter_name of this GoogleCloudMlV1ParameterSpec.

        Required. The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., \"learning_rate\".

        :return: The parameter_name of this GoogleCloudMlV1ParameterSpec.
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this GoogleCloudMlV1ParameterSpec.

        Required. The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., \"learning_rate\".

        :param parameter_name: The parameter_name of this GoogleCloudMlV1ParameterSpec.
        :type parameter_name: str
        """

        self._parameter_name = parameter_name

    @property
    def scale_type(self):
        """Gets the scale_type of this GoogleCloudMlV1ParameterSpec.

        Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).

        :return: The scale_type of this GoogleCloudMlV1ParameterSpec.
        :rtype: str
        """
        return self._scale_type

    @scale_type.setter
    def scale_type(self, scale_type):
        """Sets the scale_type of this GoogleCloudMlV1ParameterSpec.

        Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).

        :param scale_type: The scale_type of this GoogleCloudMlV1ParameterSpec.
        :type scale_type: str
        """
        allowed_values = ["NONE", "UNIT_LINEAR_SCALE", "UNIT_LOG_SCALE", "UNIT_REVERSE_LOG_SCALE"]  # noqa: E501
        if scale_type not in allowed_values:
            raise ValueError(
                "Invalid value for `scale_type` ({0}), must be one of {1}"
                .format(scale_type, allowed_values)
            )

        self._scale_type = scale_type

    @property
    def type(self):
        """Gets the type of this GoogleCloudMlV1ParameterSpec.

        Required. The type of the parameter.

        :return: The type of this GoogleCloudMlV1ParameterSpec.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudMlV1ParameterSpec.

        Required. The type of the parameter.

        :param type: The type of this GoogleCloudMlV1ParameterSpec.
        :type type: str
        """
        allowed_values = ["PARAMETER_TYPE_UNSPECIFIED", "DOUBLE", "INTEGER", "CATEGORICAL", "DISCRETE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
