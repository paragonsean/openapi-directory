# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudMlV1AcceleratorConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, type: str=None):
        """GoogleCloudMlV1AcceleratorConfig - a model defined in OpenAPI

        :param count: The count of this GoogleCloudMlV1AcceleratorConfig.
        :param type: The type of this GoogleCloudMlV1AcceleratorConfig.
        """
        self.openapi_types = {
            'count': str,
            'type': str
        }

        self.attribute_map = {
            'count': 'count',
            'type': 'type'
        }

        self._count = count
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudMlV1AcceleratorConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudMlV1__AcceleratorConfig of this GoogleCloudMlV1AcceleratorConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this GoogleCloudMlV1AcceleratorConfig.

        The number of accelerators to attach to each machine running the job.

        :return: The count of this GoogleCloudMlV1AcceleratorConfig.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GoogleCloudMlV1AcceleratorConfig.

        The number of accelerators to attach to each machine running the job.

        :param count: The count of this GoogleCloudMlV1AcceleratorConfig.
        :type count: str
        """

        self._count = count

    @property
    def type(self):
        """Gets the type of this GoogleCloudMlV1AcceleratorConfig.

        The type of accelerator to use.

        :return: The type of this GoogleCloudMlV1AcceleratorConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudMlV1AcceleratorConfig.

        The type of accelerator to use.

        :param type: The type of this GoogleCloudMlV1AcceleratorConfig.
        :type type: str
        """
        allowed_values = ["ACCELERATOR_TYPE_UNSPECIFIED", "NVIDIA_TESLA_K80", "NVIDIA_TESLA_P100", "NVIDIA_TESLA_V100", "NVIDIA_TESLA_P4", "NVIDIA_TESLA_T4", "NVIDIA_TESLA_A100", "TPU_V2", "TPU_V3", "TPU_V2_POD", "TPU_V3_POD", "TPU_V4_POD"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
