# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_ml_v1_prediction_input import GoogleCloudMlV1PredictionInput
from openapi_server.models.google_cloud_ml_v1_prediction_output import GoogleCloudMlV1PredictionOutput
from openapi_server.models.google_cloud_ml_v1_training_input import GoogleCloudMlV1TrainingInput
from openapi_server.models.google_cloud_ml_v1_training_output import GoogleCloudMlV1TrainingOutput
from openapi_server import util


class GoogleCloudMlV1Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, end_time: str=None, error_message: str=None, etag: str=None, job_id: str=None, job_position: str=None, labels: Dict[str, str]=None, prediction_input: GoogleCloudMlV1PredictionInput=None, prediction_output: GoogleCloudMlV1PredictionOutput=None, start_time: str=None, state: str=None, training_input: GoogleCloudMlV1TrainingInput=None, training_output: GoogleCloudMlV1TrainingOutput=None):
        """GoogleCloudMlV1Job - a model defined in OpenAPI

        :param create_time: The create_time of this GoogleCloudMlV1Job.
        :param end_time: The end_time of this GoogleCloudMlV1Job.
        :param error_message: The error_message of this GoogleCloudMlV1Job.
        :param etag: The etag of this GoogleCloudMlV1Job.
        :param job_id: The job_id of this GoogleCloudMlV1Job.
        :param job_position: The job_position of this GoogleCloudMlV1Job.
        :param labels: The labels of this GoogleCloudMlV1Job.
        :param prediction_input: The prediction_input of this GoogleCloudMlV1Job.
        :param prediction_output: The prediction_output of this GoogleCloudMlV1Job.
        :param start_time: The start_time of this GoogleCloudMlV1Job.
        :param state: The state of this GoogleCloudMlV1Job.
        :param training_input: The training_input of this GoogleCloudMlV1Job.
        :param training_output: The training_output of this GoogleCloudMlV1Job.
        """
        self.openapi_types = {
            'create_time': str,
            'end_time': str,
            'error_message': str,
            'etag': str,
            'job_id': str,
            'job_position': str,
            'labels': Dict[str, str],
            'prediction_input': GoogleCloudMlV1PredictionInput,
            'prediction_output': GoogleCloudMlV1PredictionOutput,
            'start_time': str,
            'state': str,
            'training_input': GoogleCloudMlV1TrainingInput,
            'training_output': GoogleCloudMlV1TrainingOutput
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'end_time': 'endTime',
            'error_message': 'errorMessage',
            'etag': 'etag',
            'job_id': 'jobId',
            'job_position': 'jobPosition',
            'labels': 'labels',
            'prediction_input': 'predictionInput',
            'prediction_output': 'predictionOutput',
            'start_time': 'startTime',
            'state': 'state',
            'training_input': 'trainingInput',
            'training_output': 'trainingOutput'
        }

        self._create_time = create_time
        self._end_time = end_time
        self._error_message = error_message
        self._etag = etag
        self._job_id = job_id
        self._job_position = job_position
        self._labels = labels
        self._prediction_input = prediction_input
        self._prediction_output = prediction_output
        self._start_time = start_time
        self._state = state
        self._training_input = training_input
        self._training_output = training_output

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudMlV1Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudMlV1__Job of this GoogleCloudMlV1Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudMlV1Job.

        Output only. When the job was created.

        :return: The create_time of this GoogleCloudMlV1Job.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudMlV1Job.

        Output only. When the job was created.

        :param create_time: The create_time of this GoogleCloudMlV1Job.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def end_time(self):
        """Gets the end_time of this GoogleCloudMlV1Job.

        Output only. When the job processing was completed.

        :return: The end_time of this GoogleCloudMlV1Job.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleCloudMlV1Job.

        Output only. When the job processing was completed.

        :param end_time: The end_time of this GoogleCloudMlV1Job.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def error_message(self):
        """Gets the error_message of this GoogleCloudMlV1Job.

        Output only. The details of a failure or a cancellation.

        :return: The error_message of this GoogleCloudMlV1Job.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this GoogleCloudMlV1Job.

        Output only. The details of a failure or a cancellation.

        :param error_message: The error_message of this GoogleCloudMlV1Job.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudMlV1Job.

        `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a job from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform job updates in order to avoid race conditions: An `etag` is returned in the response to `GetJob`, and systems are expected to put that etag in the request to `UpdateJob` to ensure that their change will be applied to the same version of the job.

        :return: The etag of this GoogleCloudMlV1Job.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudMlV1Job.

        `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a job from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform job updates in order to avoid race conditions: An `etag` is returned in the response to `GetJob`, and systems are expected to put that etag in the request to `UpdateJob` to ensure that their change will be applied to the same version of the job.

        :param etag: The etag of this GoogleCloudMlV1Job.
        :type etag: str
        """

        self._etag = etag

    @property
    def job_id(self):
        """Gets the job_id of this GoogleCloudMlV1Job.

        Required. The user-specified id of the job.

        :return: The job_id of this GoogleCloudMlV1Job.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this GoogleCloudMlV1Job.

        Required. The user-specified id of the job.

        :param job_id: The job_id of this GoogleCloudMlV1Job.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def job_position(self):
        """Gets the job_position of this GoogleCloudMlV1Job.

        Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.

        :return: The job_position of this GoogleCloudMlV1Job.
        :rtype: str
        """
        return self._job_position

    @job_position.setter
    def job_position(self, job_position):
        """Sets the job_position of this GoogleCloudMlV1Job.

        Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.

        :param job_position: The job_position of this GoogleCloudMlV1Job.
        :type job_position: str
        """

        self._job_position = job_position

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudMlV1Job.

        Optional. One or more labels that you can add, to organize your jobs. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels.

        :return: The labels of this GoogleCloudMlV1Job.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudMlV1Job.

        Optional. One or more labels that you can add, to organize your jobs. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels.

        :param labels: The labels of this GoogleCloudMlV1Job.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def prediction_input(self):
        """Gets the prediction_input of this GoogleCloudMlV1Job.


        :return: The prediction_input of this GoogleCloudMlV1Job.
        :rtype: GoogleCloudMlV1PredictionInput
        """
        return self._prediction_input

    @prediction_input.setter
    def prediction_input(self, prediction_input):
        """Sets the prediction_input of this GoogleCloudMlV1Job.


        :param prediction_input: The prediction_input of this GoogleCloudMlV1Job.
        :type prediction_input: GoogleCloudMlV1PredictionInput
        """

        self._prediction_input = prediction_input

    @property
    def prediction_output(self):
        """Gets the prediction_output of this GoogleCloudMlV1Job.


        :return: The prediction_output of this GoogleCloudMlV1Job.
        :rtype: GoogleCloudMlV1PredictionOutput
        """
        return self._prediction_output

    @prediction_output.setter
    def prediction_output(self, prediction_output):
        """Sets the prediction_output of this GoogleCloudMlV1Job.


        :param prediction_output: The prediction_output of this GoogleCloudMlV1Job.
        :type prediction_output: GoogleCloudMlV1PredictionOutput
        """

        self._prediction_output = prediction_output

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudMlV1Job.

        Output only. When the job processing was started.

        :return: The start_time of this GoogleCloudMlV1Job.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudMlV1Job.

        Output only. When the job processing was started.

        :param start_time: The start_time of this GoogleCloudMlV1Job.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this GoogleCloudMlV1Job.

        Output only. The detailed state of a job.

        :return: The state of this GoogleCloudMlV1Job.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudMlV1Job.

        Output only. The detailed state of a job.

        :param state: The state of this GoogleCloudMlV1Job.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "QUEUED", "PREPARING", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLING", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def training_input(self):
        """Gets the training_input of this GoogleCloudMlV1Job.


        :return: The training_input of this GoogleCloudMlV1Job.
        :rtype: GoogleCloudMlV1TrainingInput
        """
        return self._training_input

    @training_input.setter
    def training_input(self, training_input):
        """Sets the training_input of this GoogleCloudMlV1Job.


        :param training_input: The training_input of this GoogleCloudMlV1Job.
        :type training_input: GoogleCloudMlV1TrainingInput
        """

        self._training_input = training_input

    @property
    def training_output(self):
        """Gets the training_output of this GoogleCloudMlV1Job.


        :return: The training_output of this GoogleCloudMlV1Job.
        :rtype: GoogleCloudMlV1TrainingOutput
        """
        return self._training_output

    @training_output.setter
    def training_output(self, training_output):
        """Sets the training_output of this GoogleCloudMlV1Job.


        :param training_output: The training_output of this GoogleCloudMlV1Job.
        :type training_output: GoogleCloudMlV1TrainingOutput
        """

        self._training_output = training_output
