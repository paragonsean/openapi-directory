# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudMlV1Capability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_accelerators: List[str]=None, type: str=None):
        """GoogleCloudMlV1Capability - a model defined in OpenAPI

        :param available_accelerators: The available_accelerators of this GoogleCloudMlV1Capability.
        :param type: The type of this GoogleCloudMlV1Capability.
        """
        self.openapi_types = {
            'available_accelerators': List[str],
            'type': str
        }

        self.attribute_map = {
            'available_accelerators': 'availableAccelerators',
            'type': 'type'
        }

        self._available_accelerators = available_accelerators
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudMlV1Capability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudMlV1__Capability of this GoogleCloudMlV1Capability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_accelerators(self):
        """Gets the available_accelerators of this GoogleCloudMlV1Capability.

        Available accelerators for the capability.

        :return: The available_accelerators of this GoogleCloudMlV1Capability.
        :rtype: List[str]
        """
        return self._available_accelerators

    @available_accelerators.setter
    def available_accelerators(self, available_accelerators):
        """Sets the available_accelerators of this GoogleCloudMlV1Capability.

        Available accelerators for the capability.

        :param available_accelerators: The available_accelerators of this GoogleCloudMlV1Capability.
        :type available_accelerators: List[str]
        """
        allowed_values = ["ACCELERATOR_TYPE_UNSPECIFIED", "NVIDIA_TESLA_K80", "NVIDIA_TESLA_P100", "NVIDIA_TESLA_V100", "NVIDIA_TESLA_P4", "NVIDIA_TESLA_T4", "NVIDIA_TESLA_A100", "TPU_V2", "TPU_V3", "TPU_V2_POD", "TPU_V3_POD", "TPU_V4_POD"]  # noqa: E501
        if not set(available_accelerators).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `available_accelerators` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(available_accelerators) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._available_accelerators = available_accelerators

    @property
    def type(self):
        """Gets the type of this GoogleCloudMlV1Capability.


        :return: The type of this GoogleCloudMlV1Capability.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudMlV1Capability.


        :param type: The type of this GoogleCloudMlV1Capability.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TRAINING", "BATCH_PREDICTION", "ONLINE_PREDICTION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
