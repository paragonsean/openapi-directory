# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudMlV1EnvVar(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, value: str=None):
        """GoogleCloudMlV1EnvVar - a model defined in OpenAPI

        :param name: The name of this GoogleCloudMlV1EnvVar.
        :param value: The value of this GoogleCloudMlV1EnvVar.
        """
        self.openapi_types = {
            'name': str,
            'value': str
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value'
        }

        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudMlV1EnvVar':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudMlV1__EnvVar of this GoogleCloudMlV1EnvVar.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this GoogleCloudMlV1EnvVar.

        Name of the environment variable. Must be a [valid C identifier](https://github.com/kubernetes/kubernetes/blob/v1.18.8/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go#L258) and must not begin with the prefix `AIP_`.

        :return: The name of this GoogleCloudMlV1EnvVar.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudMlV1EnvVar.

        Name of the environment variable. Must be a [valid C identifier](https://github.com/kubernetes/kubernetes/blob/v1.18.8/staging/src/k8s.io/apimachinery/pkg/util/validation/validation.go#L258) and must not begin with the prefix `AIP_`.

        :param name: The name of this GoogleCloudMlV1EnvVar.
        :type name: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this GoogleCloudMlV1EnvVar.

        Value of the environment variable. Defaults to an empty string. In this field, you can reference [environment variables set by AI Platform Prediction](/ai-platform/prediction/docs/custom-container-requirements#aip-variables) and environment variables set earlier in the same env field as where this message occurs. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $(VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME)

        :return: The value of this GoogleCloudMlV1EnvVar.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GoogleCloudMlV1EnvVar.

        Value of the environment variable. Defaults to an empty string. In this field, you can reference [environment variables set by AI Platform Prediction](/ai-platform/prediction/docs/custom-container-requirements#aip-variables) and environment variables set earlier in the same env field as where this message occurs. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $(VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME)

        :param value: The value of this GoogleCloudMlV1EnvVar.
        :type value: str
        """

        self._value = value
