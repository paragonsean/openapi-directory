# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_ml_v1_accelerator_config import GoogleCloudMlV1AcceleratorConfig
from openapi_server.models.google_cloud_ml_v1_disk_config import GoogleCloudMlV1DiskConfig
from openapi_server import util


class GoogleCloudMlV1ReplicaConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_config: GoogleCloudMlV1AcceleratorConfig=None, container_args: List[str]=None, container_command: List[str]=None, disk_config: GoogleCloudMlV1DiskConfig=None, image_uri: str=None, tpu_tf_version: str=None):
        """GoogleCloudMlV1ReplicaConfig - a model defined in OpenAPI

        :param accelerator_config: The accelerator_config of this GoogleCloudMlV1ReplicaConfig.
        :param container_args: The container_args of this GoogleCloudMlV1ReplicaConfig.
        :param container_command: The container_command of this GoogleCloudMlV1ReplicaConfig.
        :param disk_config: The disk_config of this GoogleCloudMlV1ReplicaConfig.
        :param image_uri: The image_uri of this GoogleCloudMlV1ReplicaConfig.
        :param tpu_tf_version: The tpu_tf_version of this GoogleCloudMlV1ReplicaConfig.
        """
        self.openapi_types = {
            'accelerator_config': GoogleCloudMlV1AcceleratorConfig,
            'container_args': List[str],
            'container_command': List[str],
            'disk_config': GoogleCloudMlV1DiskConfig,
            'image_uri': str,
            'tpu_tf_version': str
        }

        self.attribute_map = {
            'accelerator_config': 'acceleratorConfig',
            'container_args': 'containerArgs',
            'container_command': 'containerCommand',
            'disk_config': 'diskConfig',
            'image_uri': 'imageUri',
            'tpu_tf_version': 'tpuTfVersion'
        }

        self._accelerator_config = accelerator_config
        self._container_args = container_args
        self._container_command = container_command
        self._disk_config = disk_config
        self._image_uri = image_uri
        self._tpu_tf_version = tpu_tf_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudMlV1ReplicaConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudMlV1__ReplicaConfig of this GoogleCloudMlV1ReplicaConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_config(self):
        """Gets the accelerator_config of this GoogleCloudMlV1ReplicaConfig.


        :return: The accelerator_config of this GoogleCloudMlV1ReplicaConfig.
        :rtype: GoogleCloudMlV1AcceleratorConfig
        """
        return self._accelerator_config

    @accelerator_config.setter
    def accelerator_config(self, accelerator_config):
        """Sets the accelerator_config of this GoogleCloudMlV1ReplicaConfig.


        :param accelerator_config: The accelerator_config of this GoogleCloudMlV1ReplicaConfig.
        :type accelerator_config: GoogleCloudMlV1AcceleratorConfig
        """

        self._accelerator_config = accelerator_config

    @property
    def container_args(self):
        """Gets the container_args of this GoogleCloudMlV1ReplicaConfig.

        Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.

        :return: The container_args of this GoogleCloudMlV1ReplicaConfig.
        :rtype: List[str]
        """
        return self._container_args

    @container_args.setter
    def container_args(self, container_args):
        """Sets the container_args of this GoogleCloudMlV1ReplicaConfig.

        Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.

        :param container_args: The container_args of this GoogleCloudMlV1ReplicaConfig.
        :type container_args: List[str]
        """

        self._container_args = container_args

    @property
    def container_command(self):
        """Gets the container_command of this GoogleCloudMlV1ReplicaConfig.

        The command with which the replica's custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image's ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.

        :return: The container_command of this GoogleCloudMlV1ReplicaConfig.
        :rtype: List[str]
        """
        return self._container_command

    @container_command.setter
    def container_command(self, container_command):
        """Sets the container_command of this GoogleCloudMlV1ReplicaConfig.

        The command with which the replica's custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image's ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.

        :param container_command: The container_command of this GoogleCloudMlV1ReplicaConfig.
        :type container_command: List[str]
        """

        self._container_command = container_command

    @property
    def disk_config(self):
        """Gets the disk_config of this GoogleCloudMlV1ReplicaConfig.


        :return: The disk_config of this GoogleCloudMlV1ReplicaConfig.
        :rtype: GoogleCloudMlV1DiskConfig
        """
        return self._disk_config

    @disk_config.setter
    def disk_config(self, disk_config):
        """Sets the disk_config of this GoogleCloudMlV1ReplicaConfig.


        :param disk_config: The disk_config of this GoogleCloudMlV1ReplicaConfig.
        :type disk_config: GoogleCloudMlV1DiskConfig
        """

        self._disk_config = disk_config

    @property
    def image_uri(self):
        """Gets the image_uri of this GoogleCloudMlV1ReplicaConfig.

        The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).

        :return: The image_uri of this GoogleCloudMlV1ReplicaConfig.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this GoogleCloudMlV1ReplicaConfig.

        The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).

        :param image_uri: The image_uri of this GoogleCloudMlV1ReplicaConfig.
        :type image_uri: str
        """

        self._image_uri = image_uri

    @property
    def tpu_tf_version(self):
        """Gets the tpu_tf_version of this GoogleCloudMlV1ReplicaConfig.

        The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`.

        :return: The tpu_tf_version of this GoogleCloudMlV1ReplicaConfig.
        :rtype: str
        """
        return self._tpu_tf_version

    @tpu_tf_version.setter
    def tpu_tf_version(self, tpu_tf_version):
        """Sets the tpu_tf_version of this GoogleCloudMlV1ReplicaConfig.

        The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`.

        :param tpu_tf_version: The tpu_tf_version of this GoogleCloudMlV1ReplicaConfig.
        :type tpu_tf_version: str
        """

        self._tpu_tf_version = tpu_tf_version
