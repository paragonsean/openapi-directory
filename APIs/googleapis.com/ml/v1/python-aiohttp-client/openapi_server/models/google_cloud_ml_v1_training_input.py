# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_ml_v1_encryption_config import GoogleCloudMlV1EncryptionConfig
from openapi_server.models.google_cloud_ml_v1_hyperparameter_spec import GoogleCloudMlV1HyperparameterSpec
from openapi_server.models.google_cloud_ml_v1_replica_config import GoogleCloudMlV1ReplicaConfig
from openapi_server.models.google_cloud_ml_v1_scheduling import GoogleCloudMlV1Scheduling
from openapi_server import util


class GoogleCloudMlV1TrainingInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: List[str]=None, enable_web_access: bool=None, encryption_config: GoogleCloudMlV1EncryptionConfig=None, evaluator_config: GoogleCloudMlV1ReplicaConfig=None, evaluator_count: str=None, evaluator_type: str=None, hyperparameters: GoogleCloudMlV1HyperparameterSpec=None, job_dir: str=None, master_config: GoogleCloudMlV1ReplicaConfig=None, master_type: str=None, network: str=None, package_uris: List[str]=None, parameter_server_config: GoogleCloudMlV1ReplicaConfig=None, parameter_server_count: str=None, parameter_server_type: str=None, python_module: str=None, python_version: str=None, region: str=None, runtime_version: str=None, scale_tier: str=None, scheduling: GoogleCloudMlV1Scheduling=None, service_account: str=None, use_chief_in_tf_config: bool=None, worker_config: GoogleCloudMlV1ReplicaConfig=None, worker_count: str=None, worker_type: str=None):
        """GoogleCloudMlV1TrainingInput - a model defined in OpenAPI

        :param args: The args of this GoogleCloudMlV1TrainingInput.
        :param enable_web_access: The enable_web_access of this GoogleCloudMlV1TrainingInput.
        :param encryption_config: The encryption_config of this GoogleCloudMlV1TrainingInput.
        :param evaluator_config: The evaluator_config of this GoogleCloudMlV1TrainingInput.
        :param evaluator_count: The evaluator_count of this GoogleCloudMlV1TrainingInput.
        :param evaluator_type: The evaluator_type of this GoogleCloudMlV1TrainingInput.
        :param hyperparameters: The hyperparameters of this GoogleCloudMlV1TrainingInput.
        :param job_dir: The job_dir of this GoogleCloudMlV1TrainingInput.
        :param master_config: The master_config of this GoogleCloudMlV1TrainingInput.
        :param master_type: The master_type of this GoogleCloudMlV1TrainingInput.
        :param network: The network of this GoogleCloudMlV1TrainingInput.
        :param package_uris: The package_uris of this GoogleCloudMlV1TrainingInput.
        :param parameter_server_config: The parameter_server_config of this GoogleCloudMlV1TrainingInput.
        :param parameter_server_count: The parameter_server_count of this GoogleCloudMlV1TrainingInput.
        :param parameter_server_type: The parameter_server_type of this GoogleCloudMlV1TrainingInput.
        :param python_module: The python_module of this GoogleCloudMlV1TrainingInput.
        :param python_version: The python_version of this GoogleCloudMlV1TrainingInput.
        :param region: The region of this GoogleCloudMlV1TrainingInput.
        :param runtime_version: The runtime_version of this GoogleCloudMlV1TrainingInput.
        :param scale_tier: The scale_tier of this GoogleCloudMlV1TrainingInput.
        :param scheduling: The scheduling of this GoogleCloudMlV1TrainingInput.
        :param service_account: The service_account of this GoogleCloudMlV1TrainingInput.
        :param use_chief_in_tf_config: The use_chief_in_tf_config of this GoogleCloudMlV1TrainingInput.
        :param worker_config: The worker_config of this GoogleCloudMlV1TrainingInput.
        :param worker_count: The worker_count of this GoogleCloudMlV1TrainingInput.
        :param worker_type: The worker_type of this GoogleCloudMlV1TrainingInput.
        """
        self.openapi_types = {
            'args': List[str],
            'enable_web_access': bool,
            'encryption_config': GoogleCloudMlV1EncryptionConfig,
            'evaluator_config': GoogleCloudMlV1ReplicaConfig,
            'evaluator_count': str,
            'evaluator_type': str,
            'hyperparameters': GoogleCloudMlV1HyperparameterSpec,
            'job_dir': str,
            'master_config': GoogleCloudMlV1ReplicaConfig,
            'master_type': str,
            'network': str,
            'package_uris': List[str],
            'parameter_server_config': GoogleCloudMlV1ReplicaConfig,
            'parameter_server_count': str,
            'parameter_server_type': str,
            'python_module': str,
            'python_version': str,
            'region': str,
            'runtime_version': str,
            'scale_tier': str,
            'scheduling': GoogleCloudMlV1Scheduling,
            'service_account': str,
            'use_chief_in_tf_config': bool,
            'worker_config': GoogleCloudMlV1ReplicaConfig,
            'worker_count': str,
            'worker_type': str
        }

        self.attribute_map = {
            'args': 'args',
            'enable_web_access': 'enableWebAccess',
            'encryption_config': 'encryptionConfig',
            'evaluator_config': 'evaluatorConfig',
            'evaluator_count': 'evaluatorCount',
            'evaluator_type': 'evaluatorType',
            'hyperparameters': 'hyperparameters',
            'job_dir': 'jobDir',
            'master_config': 'masterConfig',
            'master_type': 'masterType',
            'network': 'network',
            'package_uris': 'packageUris',
            'parameter_server_config': 'parameterServerConfig',
            'parameter_server_count': 'parameterServerCount',
            'parameter_server_type': 'parameterServerType',
            'python_module': 'pythonModule',
            'python_version': 'pythonVersion',
            'region': 'region',
            'runtime_version': 'runtimeVersion',
            'scale_tier': 'scaleTier',
            'scheduling': 'scheduling',
            'service_account': 'serviceAccount',
            'use_chief_in_tf_config': 'useChiefInTfConfig',
            'worker_config': 'workerConfig',
            'worker_count': 'workerCount',
            'worker_type': 'workerType'
        }

        self._args = args
        self._enable_web_access = enable_web_access
        self._encryption_config = encryption_config
        self._evaluator_config = evaluator_config
        self._evaluator_count = evaluator_count
        self._evaluator_type = evaluator_type
        self._hyperparameters = hyperparameters
        self._job_dir = job_dir
        self._master_config = master_config
        self._master_type = master_type
        self._network = network
        self._package_uris = package_uris
        self._parameter_server_config = parameter_server_config
        self._parameter_server_count = parameter_server_count
        self._parameter_server_type = parameter_server_type
        self._python_module = python_module
        self._python_version = python_version
        self._region = region
        self._runtime_version = runtime_version
        self._scale_tier = scale_tier
        self._scheduling = scheduling
        self._service_account = service_account
        self._use_chief_in_tf_config = use_chief_in_tf_config
        self._worker_config = worker_config
        self._worker_count = worker_count
        self._worker_type = worker_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudMlV1TrainingInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudMlV1__TrainingInput of this GoogleCloudMlV1TrainingInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this GoogleCloudMlV1TrainingInput.

        Optional. Command-line arguments passed to the training application when it starts. If your job uses a custom container, then the arguments are passed to the container's `ENTRYPOINT` command.

        :return: The args of this GoogleCloudMlV1TrainingInput.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this GoogleCloudMlV1TrainingInput.

        Optional. Command-line arguments passed to the training application when it starts. If your job uses a custom container, then the arguments are passed to the container's `ENTRYPOINT` command.

        :param args: The args of this GoogleCloudMlV1TrainingInput.
        :type args: List[str]
        """

        self._args = args

    @property
    def enable_web_access(self):
        """Gets the enable_web_access of this GoogleCloudMlV1TrainingInput.

        Optional. Whether you want AI Platform Training to enable [interactive shell access](https://cloud.google.com/ai-platform/training/docs/monitor-debug-interactive-shell) to training containers. If set to `true`, you can access interactive shells at the URIs given by TrainingOutput.web_access_uris or HyperparameterOutput.web_access_uris (within TrainingOutput.trials).

        :return: The enable_web_access of this GoogleCloudMlV1TrainingInput.
        :rtype: bool
        """
        return self._enable_web_access

    @enable_web_access.setter
    def enable_web_access(self, enable_web_access):
        """Sets the enable_web_access of this GoogleCloudMlV1TrainingInput.

        Optional. Whether you want AI Platform Training to enable [interactive shell access](https://cloud.google.com/ai-platform/training/docs/monitor-debug-interactive-shell) to training containers. If set to `true`, you can access interactive shells at the URIs given by TrainingOutput.web_access_uris or HyperparameterOutput.web_access_uris (within TrainingOutput.trials).

        :param enable_web_access: The enable_web_access of this GoogleCloudMlV1TrainingInput.
        :type enable_web_access: bool
        """

        self._enable_web_access = enable_web_access

    @property
    def encryption_config(self):
        """Gets the encryption_config of this GoogleCloudMlV1TrainingInput.


        :return: The encryption_config of this GoogleCloudMlV1TrainingInput.
        :rtype: GoogleCloudMlV1EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this GoogleCloudMlV1TrainingInput.


        :param encryption_config: The encryption_config of this GoogleCloudMlV1TrainingInput.
        :type encryption_config: GoogleCloudMlV1EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def evaluator_config(self):
        """Gets the evaluator_config of this GoogleCloudMlV1TrainingInput.


        :return: The evaluator_config of this GoogleCloudMlV1TrainingInput.
        :rtype: GoogleCloudMlV1ReplicaConfig
        """
        return self._evaluator_config

    @evaluator_config.setter
    def evaluator_config(self, evaluator_config):
        """Sets the evaluator_config of this GoogleCloudMlV1TrainingInput.


        :param evaluator_config: The evaluator_config of this GoogleCloudMlV1TrainingInput.
        :type evaluator_config: GoogleCloudMlV1ReplicaConfig
        """

        self._evaluator_config = evaluator_config

    @property
    def evaluator_count(self):
        """Gets the evaluator_count of this GoogleCloudMlV1TrainingInput.

        Optional. The number of evaluator replicas to use for the training job. Each replica in the cluster will be of the type specified in `evaluator_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `evaluator_type`. The default value is zero.

        :return: The evaluator_count of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._evaluator_count

    @evaluator_count.setter
    def evaluator_count(self, evaluator_count):
        """Sets the evaluator_count of this GoogleCloudMlV1TrainingInput.

        Optional. The number of evaluator replicas to use for the training job. Each replica in the cluster will be of the type specified in `evaluator_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `evaluator_type`. The default value is zero.

        :param evaluator_count: The evaluator_count of this GoogleCloudMlV1TrainingInput.
        :type evaluator_count: str
        """

        self._evaluator_count = evaluator_count

    @property
    def evaluator_type(self):
        """Gets the evaluator_type of this GoogleCloudMlV1TrainingInput.

        Optional. Specifies the type of virtual machine to use for your training job's evaluator nodes. The supported values are the same as those described in the entry for `masterType`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. This value must be present when `scaleTier` is set to `CUSTOM` and `evaluatorCount` is greater than zero.

        :return: The evaluator_type of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._evaluator_type

    @evaluator_type.setter
    def evaluator_type(self, evaluator_type):
        """Sets the evaluator_type of this GoogleCloudMlV1TrainingInput.

        Optional. Specifies the type of virtual machine to use for your training job's evaluator nodes. The supported values are the same as those described in the entry for `masterType`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. This value must be present when `scaleTier` is set to `CUSTOM` and `evaluatorCount` is greater than zero.

        :param evaluator_type: The evaluator_type of this GoogleCloudMlV1TrainingInput.
        :type evaluator_type: str
        """

        self._evaluator_type = evaluator_type

    @property
    def hyperparameters(self):
        """Gets the hyperparameters of this GoogleCloudMlV1TrainingInput.


        :return: The hyperparameters of this GoogleCloudMlV1TrainingInput.
        :rtype: GoogleCloudMlV1HyperparameterSpec
        """
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, hyperparameters):
        """Sets the hyperparameters of this GoogleCloudMlV1TrainingInput.


        :param hyperparameters: The hyperparameters of this GoogleCloudMlV1TrainingInput.
        :type hyperparameters: GoogleCloudMlV1HyperparameterSpec
        """

        self._hyperparameters = hyperparameters

    @property
    def job_dir(self):
        """Gets the job_dir of this GoogleCloudMlV1TrainingInput.

        Optional. A Google Cloud Storage path in which to store training outputs and other data needed for training. This path is passed to your TensorFlow program as the '--job-dir' command-line argument. The benefit of specifying this field is that Cloud ML validates the path for use in training.

        :return: The job_dir of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._job_dir

    @job_dir.setter
    def job_dir(self, job_dir):
        """Sets the job_dir of this GoogleCloudMlV1TrainingInput.

        Optional. A Google Cloud Storage path in which to store training outputs and other data needed for training. This path is passed to your TensorFlow program as the '--job-dir' command-line argument. The benefit of specifying this field is that Cloud ML validates the path for use in training.

        :param job_dir: The job_dir of this GoogleCloudMlV1TrainingInput.
        :type job_dir: str
        """

        self._job_dir = job_dir

    @property
    def master_config(self):
        """Gets the master_config of this GoogleCloudMlV1TrainingInput.


        :return: The master_config of this GoogleCloudMlV1TrainingInput.
        :rtype: GoogleCloudMlV1ReplicaConfig
        """
        return self._master_config

    @master_config.setter
    def master_config(self, master_config):
        """Sets the master_config of this GoogleCloudMlV1TrainingInput.


        :param master_config: The master_config of this GoogleCloudMlV1TrainingInput.
        :type master_config: GoogleCloudMlV1ReplicaConfig
        """

        self._master_config = master_config

    @property
    def master_type(self):
        """Gets the master_type of this GoogleCloudMlV1TrainingInput.

        Optional. Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. See the [list of compatible Compute Engine machine types](/ai-platform/training/docs/machine-types#compute-engine-machine-types). Alternatively, you can use the certain legacy machine types in this field. See the [list of legacy machine types](/ai-platform/training/docs/machine-types#legacy-machine-types). Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPUs](/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).

        :return: The master_type of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._master_type

    @master_type.setter
    def master_type(self, master_type):
        """Sets the master_type of this GoogleCloudMlV1TrainingInput.

        Optional. Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. See the [list of compatible Compute Engine machine types](/ai-platform/training/docs/machine-types#compute-engine-machine-types). Alternatively, you can use the certain legacy machine types in this field. See the [list of legacy machine types](/ai-platform/training/docs/machine-types#legacy-machine-types). Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPUs](/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).

        :param master_type: The master_type of this GoogleCloudMlV1TrainingInput.
        :type master_type: str
        """

        self._master_type = master_type

    @property
    def network(self):
        """Gets the network of this GoogleCloudMlV1TrainingInput.

        Optional. The full name of the [Compute Engine network](/vpc/docs/vpc) to which the Job is peered. For example, `projects/12345/global/networks/myVPC`. The format of this field is `projects/{project}/global/networks/{network}`, where {project} is a project number (like `12345`) and {network} is network name. Private services access must already be configured for the network. If left unspecified, the Job is not peered with any network. [Learn about using VPC Network Peering.](/ai-platform/training/docs/vpc-peering).

        :return: The network of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this GoogleCloudMlV1TrainingInput.

        Optional. The full name of the [Compute Engine network](/vpc/docs/vpc) to which the Job is peered. For example, `projects/12345/global/networks/myVPC`. The format of this field is `projects/{project}/global/networks/{network}`, where {project} is a project number (like `12345`) and {network} is network name. Private services access must already be configured for the network. If left unspecified, the Job is not peered with any network. [Learn about using VPC Network Peering.](/ai-platform/training/docs/vpc-peering).

        :param network: The network of this GoogleCloudMlV1TrainingInput.
        :type network: str
        """

        self._network = network

    @property
    def package_uris(self):
        """Gets the package_uris of this GoogleCloudMlV1TrainingInput.

        Required. The Google Cloud Storage location of the packages with the training program and any additional dependencies. The maximum number of package URIs is 100.

        :return: The package_uris of this GoogleCloudMlV1TrainingInput.
        :rtype: List[str]
        """
        return self._package_uris

    @package_uris.setter
    def package_uris(self, package_uris):
        """Sets the package_uris of this GoogleCloudMlV1TrainingInput.

        Required. The Google Cloud Storage location of the packages with the training program and any additional dependencies. The maximum number of package URIs is 100.

        :param package_uris: The package_uris of this GoogleCloudMlV1TrainingInput.
        :type package_uris: List[str]
        """

        self._package_uris = package_uris

    @property
    def parameter_server_config(self):
        """Gets the parameter_server_config of this GoogleCloudMlV1TrainingInput.


        :return: The parameter_server_config of this GoogleCloudMlV1TrainingInput.
        :rtype: GoogleCloudMlV1ReplicaConfig
        """
        return self._parameter_server_config

    @parameter_server_config.setter
    def parameter_server_config(self, parameter_server_config):
        """Sets the parameter_server_config of this GoogleCloudMlV1TrainingInput.


        :param parameter_server_config: The parameter_server_config of this GoogleCloudMlV1TrainingInput.
        :type parameter_server_config: GoogleCloudMlV1ReplicaConfig
        """

        self._parameter_server_config = parameter_server_config

    @property
    def parameter_server_count(self):
        """Gets the parameter_server_count of this GoogleCloudMlV1TrainingInput.

        Optional. The number of parameter server replicas to use for the training job. Each replica in the cluster will be of the type specified in `parameter_server_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `parameter_server_type`. The default value is zero.

        :return: The parameter_server_count of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._parameter_server_count

    @parameter_server_count.setter
    def parameter_server_count(self, parameter_server_count):
        """Sets the parameter_server_count of this GoogleCloudMlV1TrainingInput.

        Optional. The number of parameter server replicas to use for the training job. Each replica in the cluster will be of the type specified in `parameter_server_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `parameter_server_type`. The default value is zero.

        :param parameter_server_count: The parameter_server_count of this GoogleCloudMlV1TrainingInput.
        :type parameter_server_count: str
        """

        self._parameter_server_count = parameter_server_count

    @property
    def parameter_server_type(self):
        """Gets the parameter_server_type of this GoogleCloudMlV1TrainingInput.

        Optional. Specifies the type of virtual machine to use for your training job's parameter server. The supported values are the same as those described in the entry for `master_type`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. This value must be present when `scaleTier` is set to `CUSTOM` and `parameter_server_count` is greater than zero.

        :return: The parameter_server_type of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._parameter_server_type

    @parameter_server_type.setter
    def parameter_server_type(self, parameter_server_type):
        """Sets the parameter_server_type of this GoogleCloudMlV1TrainingInput.

        Optional. Specifies the type of virtual machine to use for your training job's parameter server. The supported values are the same as those described in the entry for `master_type`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. This value must be present when `scaleTier` is set to `CUSTOM` and `parameter_server_count` is greater than zero.

        :param parameter_server_type: The parameter_server_type of this GoogleCloudMlV1TrainingInput.
        :type parameter_server_type: str
        """

        self._parameter_server_type = parameter_server_type

    @property
    def python_module(self):
        """Gets the python_module of this GoogleCloudMlV1TrainingInput.

        Required. The Python module name to run after installing the packages.

        :return: The python_module of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._python_module

    @python_module.setter
    def python_module(self, python_module):
        """Sets the python_module of this GoogleCloudMlV1TrainingInput.

        Required. The Python module name to run after installing the packages.

        :param python_module: The python_module of this GoogleCloudMlV1TrainingInput.
        :type python_module: str
        """

        self._python_module = python_module

    @property
    def python_version(self):
        """Gets the python_version of this GoogleCloudMlV1TrainingInput.

        Optional. The version of Python used in training. You must either specify this field or specify `masterConfig.imageUri`. The following Python versions are available: * Python '3.7' is available when `runtime_version` is set to '1.15' or later. * Python '3.5' is available when `runtime_version` is set to a version from '1.4' to '1.14'. * Python '2.7' is available when `runtime_version` is set to '1.15' or earlier. Read more about the Python versions available for [each runtime version](/ml-engine/docs/runtime-version-list).

        :return: The python_version of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._python_version

    @python_version.setter
    def python_version(self, python_version):
        """Sets the python_version of this GoogleCloudMlV1TrainingInput.

        Optional. The version of Python used in training. You must either specify this field or specify `masterConfig.imageUri`. The following Python versions are available: * Python '3.7' is available when `runtime_version` is set to '1.15' or later. * Python '3.5' is available when `runtime_version` is set to a version from '1.4' to '1.14'. * Python '2.7' is available when `runtime_version` is set to '1.15' or earlier. Read more about the Python versions available for [each runtime version](/ml-engine/docs/runtime-version-list).

        :param python_version: The python_version of this GoogleCloudMlV1TrainingInput.
        :type python_version: str
        """

        self._python_version = python_version

    @property
    def region(self):
        """Gets the region of this GoogleCloudMlV1TrainingInput.

        Required. The region to run the training job in. See the [available regions](/ai-platform/training/docs/regions) for AI Platform Training.

        :return: The region of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this GoogleCloudMlV1TrainingInput.

        Required. The region to run the training job in. See the [available regions](/ai-platform/training/docs/regions) for AI Platform Training.

        :param region: The region of this GoogleCloudMlV1TrainingInput.
        :type region: str
        """

        self._region = region

    @property
    def runtime_version(self):
        """Gets the runtime_version of this GoogleCloudMlV1TrainingInput.

        Optional. The AI Platform runtime version to use for training. You must either specify this field or specify `masterConfig.imageUri`. For more information, see the [runtime version list](/ai-platform/training/docs/runtime-version-list) and learn [how to manage runtime versions](/ai-platform/training/docs/versioning).

        :return: The runtime_version of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._runtime_version

    @runtime_version.setter
    def runtime_version(self, runtime_version):
        """Sets the runtime_version of this GoogleCloudMlV1TrainingInput.

        Optional. The AI Platform runtime version to use for training. You must either specify this field or specify `masterConfig.imageUri`. For more information, see the [runtime version list](/ai-platform/training/docs/runtime-version-list) and learn [how to manage runtime versions](/ai-platform/training/docs/versioning).

        :param runtime_version: The runtime_version of this GoogleCloudMlV1TrainingInput.
        :type runtime_version: str
        """

        self._runtime_version = runtime_version

    @property
    def scale_tier(self):
        """Gets the scale_tier of this GoogleCloudMlV1TrainingInput.

        Required. Specifies the machine types, the number of replicas for workers and parameter servers.

        :return: The scale_tier of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._scale_tier

    @scale_tier.setter
    def scale_tier(self, scale_tier):
        """Sets the scale_tier of this GoogleCloudMlV1TrainingInput.

        Required. Specifies the machine types, the number of replicas for workers and parameter servers.

        :param scale_tier: The scale_tier of this GoogleCloudMlV1TrainingInput.
        :type scale_tier: str
        """
        allowed_values = ["BASIC", "STANDARD_1", "PREMIUM_1", "BASIC_GPU", "BASIC_TPU", "CUSTOM"]  # noqa: E501
        if scale_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `scale_tier` ({0}), must be one of {1}"
                .format(scale_tier, allowed_values)
            )

        self._scale_tier = scale_tier

    @property
    def scheduling(self):
        """Gets the scheduling of this GoogleCloudMlV1TrainingInput.


        :return: The scheduling of this GoogleCloudMlV1TrainingInput.
        :rtype: GoogleCloudMlV1Scheduling
        """
        return self._scheduling

    @scheduling.setter
    def scheduling(self, scheduling):
        """Sets the scheduling of this GoogleCloudMlV1TrainingInput.


        :param scheduling: The scheduling of this GoogleCloudMlV1TrainingInput.
        :type scheduling: GoogleCloudMlV1Scheduling
        """

        self._scheduling = scheduling

    @property
    def service_account(self):
        """Gets the service_account of this GoogleCloudMlV1TrainingInput.

        Optional. The email address of a service account to use when running the training appplication. You must have the `iam.serviceAccounts.actAs` permission for the specified service account. In addition, the AI Platform Training Google-managed service account must have the `roles/iam.serviceAccountAdmin` role for the specified service account. [Learn more about configuring a service account.](/ai-platform/training/docs/custom-service-account) If not specified, the AI Platform Training Google-managed service account is used by default.

        :return: The service_account of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this GoogleCloudMlV1TrainingInput.

        Optional. The email address of a service account to use when running the training appplication. You must have the `iam.serviceAccounts.actAs` permission for the specified service account. In addition, the AI Platform Training Google-managed service account must have the `roles/iam.serviceAccountAdmin` role for the specified service account. [Learn more about configuring a service account.](/ai-platform/training/docs/custom-service-account) If not specified, the AI Platform Training Google-managed service account is used by default.

        :param service_account: The service_account of this GoogleCloudMlV1TrainingInput.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def use_chief_in_tf_config(self):
        """Gets the use_chief_in_tf_config of this GoogleCloudMlV1TrainingInput.

        Optional. Use `chief` instead of `master` in the `TF_CONFIG` environment variable when training with a custom container. Defaults to `false`. [Learn more about this field.](/ai-platform/training/docs/distributed-training-details#chief-versus-master) This field has no effect for training jobs that don't use a custom container.

        :return: The use_chief_in_tf_config of this GoogleCloudMlV1TrainingInput.
        :rtype: bool
        """
        return self._use_chief_in_tf_config

    @use_chief_in_tf_config.setter
    def use_chief_in_tf_config(self, use_chief_in_tf_config):
        """Sets the use_chief_in_tf_config of this GoogleCloudMlV1TrainingInput.

        Optional. Use `chief` instead of `master` in the `TF_CONFIG` environment variable when training with a custom container. Defaults to `false`. [Learn more about this field.](/ai-platform/training/docs/distributed-training-details#chief-versus-master) This field has no effect for training jobs that don't use a custom container.

        :param use_chief_in_tf_config: The use_chief_in_tf_config of this GoogleCloudMlV1TrainingInput.
        :type use_chief_in_tf_config: bool
        """

        self._use_chief_in_tf_config = use_chief_in_tf_config

    @property
    def worker_config(self):
        """Gets the worker_config of this GoogleCloudMlV1TrainingInput.


        :return: The worker_config of this GoogleCloudMlV1TrainingInput.
        :rtype: GoogleCloudMlV1ReplicaConfig
        """
        return self._worker_config

    @worker_config.setter
    def worker_config(self, worker_config):
        """Sets the worker_config of this GoogleCloudMlV1TrainingInput.


        :param worker_config: The worker_config of this GoogleCloudMlV1TrainingInput.
        :type worker_config: GoogleCloudMlV1ReplicaConfig
        """

        self._worker_config = worker_config

    @property
    def worker_count(self):
        """Gets the worker_count of this GoogleCloudMlV1TrainingInput.

        Optional. The number of worker replicas to use for the training job. Each replica in the cluster will be of the type specified in `worker_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `worker_type`. The default value is zero.

        :return: The worker_count of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._worker_count

    @worker_count.setter
    def worker_count(self, worker_count):
        """Sets the worker_count of this GoogleCloudMlV1TrainingInput.

        Optional. The number of worker replicas to use for the training job. Each replica in the cluster will be of the type specified in `worker_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `worker_type`. The default value is zero.

        :param worker_count: The worker_count of this GoogleCloudMlV1TrainingInput.
        :type worker_count: str
        """

        self._worker_count = worker_count

    @property
    def worker_type(self):
        """Gets the worker_type of this GoogleCloudMlV1TrainingInput.

        Optional. Specifies the type of virtual machine to use for your training job's worker nodes. The supported values are the same as those described in the entry for `masterType`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. If you use `cloud_tpu` for this value, see special instructions for [configuring a custom TPU machine](/ml-engine/docs/tensorflow/using-tpus#configuring_a_custom_tpu_machine). This value must be present when `scaleTier` is set to `CUSTOM` and `workerCount` is greater than zero.

        :return: The worker_type of this GoogleCloudMlV1TrainingInput.
        :rtype: str
        """
        return self._worker_type

    @worker_type.setter
    def worker_type(self, worker_type):
        """Sets the worker_type of this GoogleCloudMlV1TrainingInput.

        Optional. Specifies the type of virtual machine to use for your training job's worker nodes. The supported values are the same as those described in the entry for `masterType`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. If you use `cloud_tpu` for this value, see special instructions for [configuring a custom TPU machine](/ml-engine/docs/tensorflow/using-tpus#configuring_a_custom_tpu_machine). This value must be present when `scaleTier` is set to `CUSTOM` and `workerCount` is greater than zero.

        :param worker_type: The worker_type of this GoogleCloudMlV1TrainingInput.
        :type worker_type: str
        """

        self._worker_type = worker_type
