# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_ml_v1_metric_spec import GoogleCloudMlV1MetricSpec
from openapi_server import util


class GoogleCloudMlV1AutoScaling(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_nodes: int=None, metrics: List[GoogleCloudMlV1MetricSpec]=None, min_nodes: int=None):
        """GoogleCloudMlV1AutoScaling - a model defined in OpenAPI

        :param max_nodes: The max_nodes of this GoogleCloudMlV1AutoScaling.
        :param metrics: The metrics of this GoogleCloudMlV1AutoScaling.
        :param min_nodes: The min_nodes of this GoogleCloudMlV1AutoScaling.
        """
        self.openapi_types = {
            'max_nodes': int,
            'metrics': List[GoogleCloudMlV1MetricSpec],
            'min_nodes': int
        }

        self.attribute_map = {
            'max_nodes': 'maxNodes',
            'metrics': 'metrics',
            'min_nodes': 'minNodes'
        }

        self._max_nodes = max_nodes
        self._metrics = metrics
        self._min_nodes = min_nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudMlV1AutoScaling':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudMlV1__AutoScaling of this GoogleCloudMlV1AutoScaling.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_nodes(self):
        """Gets the max_nodes of this GoogleCloudMlV1AutoScaling.

        The maximum number of nodes to scale this model under load. The actual value will depend on resource quota and availability.

        :return: The max_nodes of this GoogleCloudMlV1AutoScaling.
        :rtype: int
        """
        return self._max_nodes

    @max_nodes.setter
    def max_nodes(self, max_nodes):
        """Sets the max_nodes of this GoogleCloudMlV1AutoScaling.

        The maximum number of nodes to scale this model under load. The actual value will depend on resource quota and availability.

        :param max_nodes: The max_nodes of this GoogleCloudMlV1AutoScaling.
        :type max_nodes: int
        """

        self._max_nodes = max_nodes

    @property
    def metrics(self):
        """Gets the metrics of this GoogleCloudMlV1AutoScaling.

        MetricSpec contains the specifications to use to calculate the desired nodes count.

        :return: The metrics of this GoogleCloudMlV1AutoScaling.
        :rtype: List[GoogleCloudMlV1MetricSpec]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this GoogleCloudMlV1AutoScaling.

        MetricSpec contains the specifications to use to calculate the desired nodes count.

        :param metrics: The metrics of this GoogleCloudMlV1AutoScaling.
        :type metrics: List[GoogleCloudMlV1MetricSpec]
        """

        self._metrics = metrics

    @property
    def min_nodes(self):
        """Gets the min_nodes of this GoogleCloudMlV1AutoScaling.

        Optional. The minimum number of nodes to allocate for this model. These nodes are always up, starting from the time the model is deployed. Therefore, the cost of operating this model will be at least `rate` * `min_nodes` * number of hours since last billing cycle, where `rate` is the cost per node-hour as documented in the [pricing guide](/ml-engine/docs/pricing), even if no predictions are performed. There is additional cost for each prediction performed. Unlike manual scaling, if the load gets too heavy for the nodes that are up, the service will automatically add nodes to handle the increased load as well as scale back as traffic drops, always maintaining at least `min_nodes`. You will be charged for the time in which additional nodes are used. If `min_nodes` is not specified and AutoScaling is used with a [legacy (MLS1) machine type](/ml-engine/docs/machine-types-online-prediction), `min_nodes` defaults to 0, in which case, when traffic to a model stops (and after a cool-down period), nodes will be shut down and no charges will be incurred until traffic to the model resumes. If `min_nodes` is not specified and AutoScaling is used with a [Compute Engine (N1) machine type](/ml-engine/docs/machine-types-online-prediction), `min_nodes` defaults to 1. `min_nodes` must be at least 1 for use with a Compute Engine machine type. You can set `min_nodes` when creating the model version, and you can also update `min_nodes` for an existing version: update_body.json: { 'autoScaling': { 'minNodes': 5 } } HTTP request: PATCH https://ml.googleapis.com/v1/{name=projects/*/models/*/versions/*}?update_mask=autoScaling.minNodes -d @./update_body.json 

        :return: The min_nodes of this GoogleCloudMlV1AutoScaling.
        :rtype: int
        """
        return self._min_nodes

    @min_nodes.setter
    def min_nodes(self, min_nodes):
        """Sets the min_nodes of this GoogleCloudMlV1AutoScaling.

        Optional. The minimum number of nodes to allocate for this model. These nodes are always up, starting from the time the model is deployed. Therefore, the cost of operating this model will be at least `rate` * `min_nodes` * number of hours since last billing cycle, where `rate` is the cost per node-hour as documented in the [pricing guide](/ml-engine/docs/pricing), even if no predictions are performed. There is additional cost for each prediction performed. Unlike manual scaling, if the load gets too heavy for the nodes that are up, the service will automatically add nodes to handle the increased load as well as scale back as traffic drops, always maintaining at least `min_nodes`. You will be charged for the time in which additional nodes are used. If `min_nodes` is not specified and AutoScaling is used with a [legacy (MLS1) machine type](/ml-engine/docs/machine-types-online-prediction), `min_nodes` defaults to 0, in which case, when traffic to a model stops (and after a cool-down period), nodes will be shut down and no charges will be incurred until traffic to the model resumes. If `min_nodes` is not specified and AutoScaling is used with a [Compute Engine (N1) machine type](/ml-engine/docs/machine-types-online-prediction), `min_nodes` defaults to 1. `min_nodes` must be at least 1 for use with a Compute Engine machine type. You can set `min_nodes` when creating the model version, and you can also update `min_nodes` for an existing version: update_body.json: { 'autoScaling': { 'minNodes': 5 } } HTTP request: PATCH https://ml.googleapis.com/v1/{name=projects/*/models/*/versions/*}?update_mask=autoScaling.minNodes -d @./update_body.json 

        :param min_nodes: The min_nodes of this GoogleCloudMlV1AutoScaling.
        :type min_nodes: int
        """

        self._min_nodes = min_nodes
