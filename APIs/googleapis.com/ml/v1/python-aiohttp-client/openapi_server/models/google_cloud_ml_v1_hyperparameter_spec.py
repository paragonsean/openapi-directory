# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_ml_v1_parameter_spec import GoogleCloudMlV1ParameterSpec
from openapi_server import util


class GoogleCloudMlV1HyperparameterSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, enable_trial_early_stopping: bool=None, goal: str=None, hyperparameter_metric_tag: str=None, max_failed_trials: int=None, max_parallel_trials: int=None, max_trials: int=None, params: List[GoogleCloudMlV1ParameterSpec]=None, resume_previous_job_id: str=None):
        """GoogleCloudMlV1HyperparameterSpec - a model defined in OpenAPI

        :param algorithm: The algorithm of this GoogleCloudMlV1HyperparameterSpec.
        :param enable_trial_early_stopping: The enable_trial_early_stopping of this GoogleCloudMlV1HyperparameterSpec.
        :param goal: The goal of this GoogleCloudMlV1HyperparameterSpec.
        :param hyperparameter_metric_tag: The hyperparameter_metric_tag of this GoogleCloudMlV1HyperparameterSpec.
        :param max_failed_trials: The max_failed_trials of this GoogleCloudMlV1HyperparameterSpec.
        :param max_parallel_trials: The max_parallel_trials of this GoogleCloudMlV1HyperparameterSpec.
        :param max_trials: The max_trials of this GoogleCloudMlV1HyperparameterSpec.
        :param params: The params of this GoogleCloudMlV1HyperparameterSpec.
        :param resume_previous_job_id: The resume_previous_job_id of this GoogleCloudMlV1HyperparameterSpec.
        """
        self.openapi_types = {
            'algorithm': str,
            'enable_trial_early_stopping': bool,
            'goal': str,
            'hyperparameter_metric_tag': str,
            'max_failed_trials': int,
            'max_parallel_trials': int,
            'max_trials': int,
            'params': List[GoogleCloudMlV1ParameterSpec],
            'resume_previous_job_id': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'enable_trial_early_stopping': 'enableTrialEarlyStopping',
            'goal': 'goal',
            'hyperparameter_metric_tag': 'hyperparameterMetricTag',
            'max_failed_trials': 'maxFailedTrials',
            'max_parallel_trials': 'maxParallelTrials',
            'max_trials': 'maxTrials',
            'params': 'params',
            'resume_previous_job_id': 'resumePreviousJobId'
        }

        self._algorithm = algorithm
        self._enable_trial_early_stopping = enable_trial_early_stopping
        self._goal = goal
        self._hyperparameter_metric_tag = hyperparameter_metric_tag
        self._max_failed_trials = max_failed_trials
        self._max_parallel_trials = max_parallel_trials
        self._max_trials = max_trials
        self._params = params
        self._resume_previous_job_id = resume_previous_job_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudMlV1HyperparameterSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudMlV1__HyperparameterSpec of this GoogleCloudMlV1HyperparameterSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this GoogleCloudMlV1HyperparameterSpec.

        Optional. The search algorithm specified for the hyperparameter tuning job. Uses the default AI Platform hyperparameter tuning algorithm if unspecified.

        :return: The algorithm of this GoogleCloudMlV1HyperparameterSpec.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this GoogleCloudMlV1HyperparameterSpec.

        Optional. The search algorithm specified for the hyperparameter tuning job. Uses the default AI Platform hyperparameter tuning algorithm if unspecified.

        :param algorithm: The algorithm of this GoogleCloudMlV1HyperparameterSpec.
        :type algorithm: str
        """
        allowed_values = ["ALGORITHM_UNSPECIFIED", "GRID_SEARCH", "RANDOM_SEARCH"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def enable_trial_early_stopping(self):
        """Gets the enable_trial_early_stopping of this GoogleCloudMlV1HyperparameterSpec.

        Optional. Indicates if the hyperparameter tuning job enables auto trial early stopping.

        :return: The enable_trial_early_stopping of this GoogleCloudMlV1HyperparameterSpec.
        :rtype: bool
        """
        return self._enable_trial_early_stopping

    @enable_trial_early_stopping.setter
    def enable_trial_early_stopping(self, enable_trial_early_stopping):
        """Sets the enable_trial_early_stopping of this GoogleCloudMlV1HyperparameterSpec.

        Optional. Indicates if the hyperparameter tuning job enables auto trial early stopping.

        :param enable_trial_early_stopping: The enable_trial_early_stopping of this GoogleCloudMlV1HyperparameterSpec.
        :type enable_trial_early_stopping: bool
        """

        self._enable_trial_early_stopping = enable_trial_early_stopping

    @property
    def goal(self):
        """Gets the goal of this GoogleCloudMlV1HyperparameterSpec.

        Required. The type of goal to use for tuning. Available types are `MAXIMIZE` and `MINIMIZE`. Defaults to `MAXIMIZE`.

        :return: The goal of this GoogleCloudMlV1HyperparameterSpec.
        :rtype: str
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this GoogleCloudMlV1HyperparameterSpec.

        Required. The type of goal to use for tuning. Available types are `MAXIMIZE` and `MINIMIZE`. Defaults to `MAXIMIZE`.

        :param goal: The goal of this GoogleCloudMlV1HyperparameterSpec.
        :type goal: str
        """
        allowed_values = ["GOAL_TYPE_UNSPECIFIED", "MAXIMIZE", "MINIMIZE"]  # noqa: E501
        if goal not in allowed_values:
            raise ValueError(
                "Invalid value for `goal` ({0}), must be one of {1}"
                .format(goal, allowed_values)
            )

        self._goal = goal

    @property
    def hyperparameter_metric_tag(self):
        """Gets the hyperparameter_metric_tag of this GoogleCloudMlV1HyperparameterSpec.

        Optional. The TensorFlow summary tag name to use for optimizing trials. For current versions of TensorFlow, this tag name should exactly match what is shown in TensorBoard, including all scopes. For versions of TensorFlow prior to 0.12, this should be only the tag passed to tf.Summary. By default, \"training/hptuning/metric\" will be used.

        :return: The hyperparameter_metric_tag of this GoogleCloudMlV1HyperparameterSpec.
        :rtype: str
        """
        return self._hyperparameter_metric_tag

    @hyperparameter_metric_tag.setter
    def hyperparameter_metric_tag(self, hyperparameter_metric_tag):
        """Sets the hyperparameter_metric_tag of this GoogleCloudMlV1HyperparameterSpec.

        Optional. The TensorFlow summary tag name to use for optimizing trials. For current versions of TensorFlow, this tag name should exactly match what is shown in TensorBoard, including all scopes. For versions of TensorFlow prior to 0.12, this should be only the tag passed to tf.Summary. By default, \"training/hptuning/metric\" will be used.

        :param hyperparameter_metric_tag: The hyperparameter_metric_tag of this GoogleCloudMlV1HyperparameterSpec.
        :type hyperparameter_metric_tag: str
        """

        self._hyperparameter_metric_tag = hyperparameter_metric_tag

    @property
    def max_failed_trials(self):
        """Gets the max_failed_trials of this GoogleCloudMlV1HyperparameterSpec.

        Optional. The number of failed trials that need to be seen before failing the hyperparameter tuning job. You can specify this field to override the default failing criteria for AI Platform hyperparameter tuning jobs. Defaults to zero, which means the service decides when a hyperparameter job should fail.

        :return: The max_failed_trials of this GoogleCloudMlV1HyperparameterSpec.
        :rtype: int
        """
        return self._max_failed_trials

    @max_failed_trials.setter
    def max_failed_trials(self, max_failed_trials):
        """Sets the max_failed_trials of this GoogleCloudMlV1HyperparameterSpec.

        Optional. The number of failed trials that need to be seen before failing the hyperparameter tuning job. You can specify this field to override the default failing criteria for AI Platform hyperparameter tuning jobs. Defaults to zero, which means the service decides when a hyperparameter job should fail.

        :param max_failed_trials: The max_failed_trials of this GoogleCloudMlV1HyperparameterSpec.
        :type max_failed_trials: int
        """

        self._max_failed_trials = max_failed_trials

    @property
    def max_parallel_trials(self):
        """Gets the max_parallel_trials of this GoogleCloudMlV1HyperparameterSpec.

        Optional. The number of training trials to run concurrently. You can reduce the time it takes to perform hyperparameter tuning by adding trials in parallel. However, each trail only benefits from the information gained in completed trials. That means that a trial does not get access to the results of trials running at the same time, which could reduce the quality of the overall optimization. Each trial will use the same scale tier and machine types. Defaults to one.

        :return: The max_parallel_trials of this GoogleCloudMlV1HyperparameterSpec.
        :rtype: int
        """
        return self._max_parallel_trials

    @max_parallel_trials.setter
    def max_parallel_trials(self, max_parallel_trials):
        """Sets the max_parallel_trials of this GoogleCloudMlV1HyperparameterSpec.

        Optional. The number of training trials to run concurrently. You can reduce the time it takes to perform hyperparameter tuning by adding trials in parallel. However, each trail only benefits from the information gained in completed trials. That means that a trial does not get access to the results of trials running at the same time, which could reduce the quality of the overall optimization. Each trial will use the same scale tier and machine types. Defaults to one.

        :param max_parallel_trials: The max_parallel_trials of this GoogleCloudMlV1HyperparameterSpec.
        :type max_parallel_trials: int
        """

        self._max_parallel_trials = max_parallel_trials

    @property
    def max_trials(self):
        """Gets the max_trials of this GoogleCloudMlV1HyperparameterSpec.

        Optional. How many training trials should be attempted to optimize the specified hyperparameters. Defaults to one.

        :return: The max_trials of this GoogleCloudMlV1HyperparameterSpec.
        :rtype: int
        """
        return self._max_trials

    @max_trials.setter
    def max_trials(self, max_trials):
        """Sets the max_trials of this GoogleCloudMlV1HyperparameterSpec.

        Optional. How many training trials should be attempted to optimize the specified hyperparameters. Defaults to one.

        :param max_trials: The max_trials of this GoogleCloudMlV1HyperparameterSpec.
        :type max_trials: int
        """

        self._max_trials = max_trials

    @property
    def params(self):
        """Gets the params of this GoogleCloudMlV1HyperparameterSpec.

        Required. The set of parameters to tune.

        :return: The params of this GoogleCloudMlV1HyperparameterSpec.
        :rtype: List[GoogleCloudMlV1ParameterSpec]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this GoogleCloudMlV1HyperparameterSpec.

        Required. The set of parameters to tune.

        :param params: The params of this GoogleCloudMlV1HyperparameterSpec.
        :type params: List[GoogleCloudMlV1ParameterSpec]
        """

        self._params = params

    @property
    def resume_previous_job_id(self):
        """Gets the resume_previous_job_id of this GoogleCloudMlV1HyperparameterSpec.

        Optional. The prior hyperparameter tuning job id that users hope to continue with. The job id will be used to find the corresponding vizier study guid and resume the study.

        :return: The resume_previous_job_id of this GoogleCloudMlV1HyperparameterSpec.
        :rtype: str
        """
        return self._resume_previous_job_id

    @resume_previous_job_id.setter
    def resume_previous_job_id(self, resume_previous_job_id):
        """Sets the resume_previous_job_id of this GoogleCloudMlV1HyperparameterSpec.

        Optional. The prior hyperparameter tuning job id that users hope to continue with. The job id will be used to find the corresponding vizier study guid and resume the study.

        :param resume_previous_job_id: The resume_previous_job_id of this GoogleCloudMlV1HyperparameterSpec.
        :type resume_previous_job_id: str
        """

        self._resume_previous_job_id = resume_previous_job_id
