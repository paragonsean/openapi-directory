# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_ml_v1_version import GoogleCloudMlV1Version
from openapi_server import util


class GoogleCloudMlV1Model(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_version: GoogleCloudMlV1Version=None, description: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, online_prediction_console_logging: bool=None, online_prediction_logging: bool=None, regions: List[str]=None):
        """GoogleCloudMlV1Model - a model defined in OpenAPI

        :param default_version: The default_version of this GoogleCloudMlV1Model.
        :param description: The description of this GoogleCloudMlV1Model.
        :param etag: The etag of this GoogleCloudMlV1Model.
        :param labels: The labels of this GoogleCloudMlV1Model.
        :param name: The name of this GoogleCloudMlV1Model.
        :param online_prediction_console_logging: The online_prediction_console_logging of this GoogleCloudMlV1Model.
        :param online_prediction_logging: The online_prediction_logging of this GoogleCloudMlV1Model.
        :param regions: The regions of this GoogleCloudMlV1Model.
        """
        self.openapi_types = {
            'default_version': GoogleCloudMlV1Version,
            'description': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'online_prediction_console_logging': bool,
            'online_prediction_logging': bool,
            'regions': List[str]
        }

        self.attribute_map = {
            'default_version': 'defaultVersion',
            'description': 'description',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'online_prediction_console_logging': 'onlinePredictionConsoleLogging',
            'online_prediction_logging': 'onlinePredictionLogging',
            'regions': 'regions'
        }

        self._default_version = default_version
        self._description = description
        self._etag = etag
        self._labels = labels
        self._name = name
        self._online_prediction_console_logging = online_prediction_console_logging
        self._online_prediction_logging = online_prediction_logging
        self._regions = regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudMlV1Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudMlV1__Model of this GoogleCloudMlV1Model.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_version(self):
        """Gets the default_version of this GoogleCloudMlV1Model.


        :return: The default_version of this GoogleCloudMlV1Model.
        :rtype: GoogleCloudMlV1Version
        """
        return self._default_version

    @default_version.setter
    def default_version(self, default_version):
        """Sets the default_version of this GoogleCloudMlV1Model.


        :param default_version: The default_version of this GoogleCloudMlV1Model.
        :type default_version: GoogleCloudMlV1Version
        """

        self._default_version = default_version

    @property
    def description(self):
        """Gets the description of this GoogleCloudMlV1Model.

        Optional. The description specified for the model when it was created.

        :return: The description of this GoogleCloudMlV1Model.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudMlV1Model.

        Optional. The description specified for the model when it was created.

        :param description: The description of this GoogleCloudMlV1Model.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudMlV1Model.

        `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a model from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform model updates in order to avoid race conditions: An `etag` is returned in the response to `GetModel`, and systems are expected to put that etag in the request to `UpdateModel` to ensure that their change will be applied to the model as intended.

        :return: The etag of this GoogleCloudMlV1Model.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudMlV1Model.

        `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a model from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform model updates in order to avoid race conditions: An `etag` is returned in the response to `GetModel`, and systems are expected to put that etag in the request to `UpdateModel` to ensure that their change will be applied to the model as intended.

        :param etag: The etag of this GoogleCloudMlV1Model.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudMlV1Model.

        Optional. One or more labels that you can add, to organize your models. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels. Note that this field is not updatable for mls1* models.

        :return: The labels of this GoogleCloudMlV1Model.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudMlV1Model.

        Optional. One or more labels that you can add, to organize your models. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels. Note that this field is not updatable for mls1* models.

        :param labels: The labels of this GoogleCloudMlV1Model.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this GoogleCloudMlV1Model.

        Required. The name specified for the model when it was created. The model name must be unique within the project it is created in.

        :return: The name of this GoogleCloudMlV1Model.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudMlV1Model.

        Required. The name specified for the model when it was created. The model name must be unique within the project it is created in.

        :param name: The name of this GoogleCloudMlV1Model.
        :type name: str
        """

        self._name = name

    @property
    def online_prediction_console_logging(self):
        """Gets the online_prediction_console_logging of this GoogleCloudMlV1Model.

        Optional. If true, online prediction nodes send `stderr` and `stdout` streams to Cloud Logging. These can be more verbose than the standard access logs (see `onlinePredictionLogging`) and can incur higher cost. However, they are helpful for debugging. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high QPS. Estimate your costs before enabling this option. Default is false.

        :return: The online_prediction_console_logging of this GoogleCloudMlV1Model.
        :rtype: bool
        """
        return self._online_prediction_console_logging

    @online_prediction_console_logging.setter
    def online_prediction_console_logging(self, online_prediction_console_logging):
        """Sets the online_prediction_console_logging of this GoogleCloudMlV1Model.

        Optional. If true, online prediction nodes send `stderr` and `stdout` streams to Cloud Logging. These can be more verbose than the standard access logs (see `onlinePredictionLogging`) and can incur higher cost. However, they are helpful for debugging. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high QPS. Estimate your costs before enabling this option. Default is false.

        :param online_prediction_console_logging: The online_prediction_console_logging of this GoogleCloudMlV1Model.
        :type online_prediction_console_logging: bool
        """

        self._online_prediction_console_logging = online_prediction_console_logging

    @property
    def online_prediction_logging(self):
        """Gets the online_prediction_logging of this GoogleCloudMlV1Model.

        Optional. If true, online prediction access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each request. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option. Default is false.

        :return: The online_prediction_logging of this GoogleCloudMlV1Model.
        :rtype: bool
        """
        return self._online_prediction_logging

    @online_prediction_logging.setter
    def online_prediction_logging(self, online_prediction_logging):
        """Sets the online_prediction_logging of this GoogleCloudMlV1Model.

        Optional. If true, online prediction access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each request. Note that [logs may incur a cost](/stackdriver/pricing), especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option. Default is false.

        :param online_prediction_logging: The online_prediction_logging of this GoogleCloudMlV1Model.
        :type online_prediction_logging: bool
        """

        self._online_prediction_logging = online_prediction_logging

    @property
    def regions(self):
        """Gets the regions of this GoogleCloudMlV1Model.

        Optional. The list of regions where the model is going to be deployed. Only one region per model is supported. Defaults to 'us-central1' if nothing is set. See the available regions for AI Platform services. Note: * No matter where a model is deployed, it can always be accessed by users from anywhere, both for online and batch prediction. * The region for a batch prediction job is set by the region field when submitting the batch prediction job and does not take its value from this field.

        :return: The regions of this GoogleCloudMlV1Model.
        :rtype: List[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this GoogleCloudMlV1Model.

        Optional. The list of regions where the model is going to be deployed. Only one region per model is supported. Defaults to 'us-central1' if nothing is set. See the available regions for AI Platform services. Note: * No matter where a model is deployed, it can always be accessed by users from anywhere, both for online and batch prediction. * The region for a batch prediction job is set by the region field when submitting the batch prediction job and does not take its value from this field.

        :param regions: The regions of this GoogleCloudMlV1Model.
        :type regions: List[str]
        """

        self._regions = regions
