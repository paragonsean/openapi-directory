/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudMlV1__TrainingInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudMlV1__TrainingInput::OAIGoogleCloudMlV1__TrainingInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudMlV1__TrainingInput::OAIGoogleCloudMlV1__TrainingInput() {
    this->initializeModel();
}

OAIGoogleCloudMlV1__TrainingInput::~OAIGoogleCloudMlV1__TrainingInput() {}

void OAIGoogleCloudMlV1__TrainingInput::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_enable_web_access_isSet = false;
    m_enable_web_access_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_evaluator_config_isSet = false;
    m_evaluator_config_isValid = false;

    m_evaluator_count_isSet = false;
    m_evaluator_count_isValid = false;

    m_evaluator_type_isSet = false;
    m_evaluator_type_isValid = false;

    m_hyperparameters_isSet = false;
    m_hyperparameters_isValid = false;

    m_job_dir_isSet = false;
    m_job_dir_isValid = false;

    m_master_config_isSet = false;
    m_master_config_isValid = false;

    m_master_type_isSet = false;
    m_master_type_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_package_uris_isSet = false;
    m_package_uris_isValid = false;

    m_parameter_server_config_isSet = false;
    m_parameter_server_config_isValid = false;

    m_parameter_server_count_isSet = false;
    m_parameter_server_count_isValid = false;

    m_parameter_server_type_isSet = false;
    m_parameter_server_type_isValid = false;

    m_python_module_isSet = false;
    m_python_module_isValid = false;

    m_python_version_isSet = false;
    m_python_version_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_runtime_version_isSet = false;
    m_runtime_version_isValid = false;

    m_scale_tier_isSet = false;
    m_scale_tier_isValid = false;

    m_scheduling_isSet = false;
    m_scheduling_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_use_chief_in_tf_config_isSet = false;
    m_use_chief_in_tf_config_isValid = false;

    m_worker_config_isSet = false;
    m_worker_config_isValid = false;

    m_worker_count_isSet = false;
    m_worker_count_isValid = false;

    m_worker_type_isSet = false;
    m_worker_type_isValid = false;
}

void OAIGoogleCloudMlV1__TrainingInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudMlV1__TrainingInput::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_enable_web_access_isValid = ::OpenAPI::fromJsonValue(m_enable_web_access, json[QString("enableWebAccess")]);
    m_enable_web_access_isSet = !json[QString("enableWebAccess")].isNull() && m_enable_web_access_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_evaluator_config_isValid = ::OpenAPI::fromJsonValue(m_evaluator_config, json[QString("evaluatorConfig")]);
    m_evaluator_config_isSet = !json[QString("evaluatorConfig")].isNull() && m_evaluator_config_isValid;

    m_evaluator_count_isValid = ::OpenAPI::fromJsonValue(m_evaluator_count, json[QString("evaluatorCount")]);
    m_evaluator_count_isSet = !json[QString("evaluatorCount")].isNull() && m_evaluator_count_isValid;

    m_evaluator_type_isValid = ::OpenAPI::fromJsonValue(m_evaluator_type, json[QString("evaluatorType")]);
    m_evaluator_type_isSet = !json[QString("evaluatorType")].isNull() && m_evaluator_type_isValid;

    m_hyperparameters_isValid = ::OpenAPI::fromJsonValue(m_hyperparameters, json[QString("hyperparameters")]);
    m_hyperparameters_isSet = !json[QString("hyperparameters")].isNull() && m_hyperparameters_isValid;

    m_job_dir_isValid = ::OpenAPI::fromJsonValue(m_job_dir, json[QString("jobDir")]);
    m_job_dir_isSet = !json[QString("jobDir")].isNull() && m_job_dir_isValid;

    m_master_config_isValid = ::OpenAPI::fromJsonValue(m_master_config, json[QString("masterConfig")]);
    m_master_config_isSet = !json[QString("masterConfig")].isNull() && m_master_config_isValid;

    m_master_type_isValid = ::OpenAPI::fromJsonValue(m_master_type, json[QString("masterType")]);
    m_master_type_isSet = !json[QString("masterType")].isNull() && m_master_type_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_package_uris_isValid = ::OpenAPI::fromJsonValue(m_package_uris, json[QString("packageUris")]);
    m_package_uris_isSet = !json[QString("packageUris")].isNull() && m_package_uris_isValid;

    m_parameter_server_config_isValid = ::OpenAPI::fromJsonValue(m_parameter_server_config, json[QString("parameterServerConfig")]);
    m_parameter_server_config_isSet = !json[QString("parameterServerConfig")].isNull() && m_parameter_server_config_isValid;

    m_parameter_server_count_isValid = ::OpenAPI::fromJsonValue(m_parameter_server_count, json[QString("parameterServerCount")]);
    m_parameter_server_count_isSet = !json[QString("parameterServerCount")].isNull() && m_parameter_server_count_isValid;

    m_parameter_server_type_isValid = ::OpenAPI::fromJsonValue(m_parameter_server_type, json[QString("parameterServerType")]);
    m_parameter_server_type_isSet = !json[QString("parameterServerType")].isNull() && m_parameter_server_type_isValid;

    m_python_module_isValid = ::OpenAPI::fromJsonValue(m_python_module, json[QString("pythonModule")]);
    m_python_module_isSet = !json[QString("pythonModule")].isNull() && m_python_module_isValid;

    m_python_version_isValid = ::OpenAPI::fromJsonValue(m_python_version, json[QString("pythonVersion")]);
    m_python_version_isSet = !json[QString("pythonVersion")].isNull() && m_python_version_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_runtime_version_isValid = ::OpenAPI::fromJsonValue(m_runtime_version, json[QString("runtimeVersion")]);
    m_runtime_version_isSet = !json[QString("runtimeVersion")].isNull() && m_runtime_version_isValid;

    m_scale_tier_isValid = ::OpenAPI::fromJsonValue(m_scale_tier, json[QString("scaleTier")]);
    m_scale_tier_isSet = !json[QString("scaleTier")].isNull() && m_scale_tier_isValid;

    m_scheduling_isValid = ::OpenAPI::fromJsonValue(m_scheduling, json[QString("scheduling")]);
    m_scheduling_isSet = !json[QString("scheduling")].isNull() && m_scheduling_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_use_chief_in_tf_config_isValid = ::OpenAPI::fromJsonValue(m_use_chief_in_tf_config, json[QString("useChiefInTfConfig")]);
    m_use_chief_in_tf_config_isSet = !json[QString("useChiefInTfConfig")].isNull() && m_use_chief_in_tf_config_isValid;

    m_worker_config_isValid = ::OpenAPI::fromJsonValue(m_worker_config, json[QString("workerConfig")]);
    m_worker_config_isSet = !json[QString("workerConfig")].isNull() && m_worker_config_isValid;

    m_worker_count_isValid = ::OpenAPI::fromJsonValue(m_worker_count, json[QString("workerCount")]);
    m_worker_count_isSet = !json[QString("workerCount")].isNull() && m_worker_count_isValid;

    m_worker_type_isValid = ::OpenAPI::fromJsonValue(m_worker_type, json[QString("workerType")]);
    m_worker_type_isSet = !json[QString("workerType")].isNull() && m_worker_type_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudMlV1__TrainingInput::asJsonObject() const {
    QJsonObject obj;
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_enable_web_access_isSet) {
        obj.insert(QString("enableWebAccess"), ::OpenAPI::toJsonValue(m_enable_web_access));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_evaluator_config.isSet()) {
        obj.insert(QString("evaluatorConfig"), ::OpenAPI::toJsonValue(m_evaluator_config));
    }
    if (m_evaluator_count_isSet) {
        obj.insert(QString("evaluatorCount"), ::OpenAPI::toJsonValue(m_evaluator_count));
    }
    if (m_evaluator_type_isSet) {
        obj.insert(QString("evaluatorType"), ::OpenAPI::toJsonValue(m_evaluator_type));
    }
    if (m_hyperparameters.isSet()) {
        obj.insert(QString("hyperparameters"), ::OpenAPI::toJsonValue(m_hyperparameters));
    }
    if (m_job_dir_isSet) {
        obj.insert(QString("jobDir"), ::OpenAPI::toJsonValue(m_job_dir));
    }
    if (m_master_config.isSet()) {
        obj.insert(QString("masterConfig"), ::OpenAPI::toJsonValue(m_master_config));
    }
    if (m_master_type_isSet) {
        obj.insert(QString("masterType"), ::OpenAPI::toJsonValue(m_master_type));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_package_uris.size() > 0) {
        obj.insert(QString("packageUris"), ::OpenAPI::toJsonValue(m_package_uris));
    }
    if (m_parameter_server_config.isSet()) {
        obj.insert(QString("parameterServerConfig"), ::OpenAPI::toJsonValue(m_parameter_server_config));
    }
    if (m_parameter_server_count_isSet) {
        obj.insert(QString("parameterServerCount"), ::OpenAPI::toJsonValue(m_parameter_server_count));
    }
    if (m_parameter_server_type_isSet) {
        obj.insert(QString("parameterServerType"), ::OpenAPI::toJsonValue(m_parameter_server_type));
    }
    if (m_python_module_isSet) {
        obj.insert(QString("pythonModule"), ::OpenAPI::toJsonValue(m_python_module));
    }
    if (m_python_version_isSet) {
        obj.insert(QString("pythonVersion"), ::OpenAPI::toJsonValue(m_python_version));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_runtime_version_isSet) {
        obj.insert(QString("runtimeVersion"), ::OpenAPI::toJsonValue(m_runtime_version));
    }
    if (m_scale_tier_isSet) {
        obj.insert(QString("scaleTier"), ::OpenAPI::toJsonValue(m_scale_tier));
    }
    if (m_scheduling.isSet()) {
        obj.insert(QString("scheduling"), ::OpenAPI::toJsonValue(m_scheduling));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_use_chief_in_tf_config_isSet) {
        obj.insert(QString("useChiefInTfConfig"), ::OpenAPI::toJsonValue(m_use_chief_in_tf_config));
    }
    if (m_worker_config.isSet()) {
        obj.insert(QString("workerConfig"), ::OpenAPI::toJsonValue(m_worker_config));
    }
    if (m_worker_count_isSet) {
        obj.insert(QString("workerCount"), ::OpenAPI::toJsonValue(m_worker_count));
    }
    if (m_worker_type_isSet) {
        obj.insert(QString("workerType"), ::OpenAPI::toJsonValue(m_worker_type));
    }
    return obj;
}

QList<QString> OAIGoogleCloudMlV1__TrainingInput::getArgs() const {
    return m_args;
}
void OAIGoogleCloudMlV1__TrainingInput::setArgs(const QList<QString> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_args_Set() const{
    return m_args_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_args_Valid() const{
    return m_args_isValid;
}

bool OAIGoogleCloudMlV1__TrainingInput::isEnableWebAccess() const {
    return m_enable_web_access;
}
void OAIGoogleCloudMlV1__TrainingInput::setEnableWebAccess(const bool &enable_web_access) {
    m_enable_web_access = enable_web_access;
    m_enable_web_access_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_enable_web_access_Set() const{
    return m_enable_web_access_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_enable_web_access_Valid() const{
    return m_enable_web_access_isValid;
}

OAIGoogleCloudMlV1__EncryptionConfig OAIGoogleCloudMlV1__TrainingInput::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIGoogleCloudMlV1__TrainingInput::setEncryptionConfig(const OAIGoogleCloudMlV1__EncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

OAIGoogleCloudMlV1__ReplicaConfig OAIGoogleCloudMlV1__TrainingInput::getEvaluatorConfig() const {
    return m_evaluator_config;
}
void OAIGoogleCloudMlV1__TrainingInput::setEvaluatorConfig(const OAIGoogleCloudMlV1__ReplicaConfig &evaluator_config) {
    m_evaluator_config = evaluator_config;
    m_evaluator_config_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_evaluator_config_Set() const{
    return m_evaluator_config_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_evaluator_config_Valid() const{
    return m_evaluator_config_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getEvaluatorCount() const {
    return m_evaluator_count;
}
void OAIGoogleCloudMlV1__TrainingInput::setEvaluatorCount(const QString &evaluator_count) {
    m_evaluator_count = evaluator_count;
    m_evaluator_count_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_evaluator_count_Set() const{
    return m_evaluator_count_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_evaluator_count_Valid() const{
    return m_evaluator_count_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getEvaluatorType() const {
    return m_evaluator_type;
}
void OAIGoogleCloudMlV1__TrainingInput::setEvaluatorType(const QString &evaluator_type) {
    m_evaluator_type = evaluator_type;
    m_evaluator_type_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_evaluator_type_Set() const{
    return m_evaluator_type_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_evaluator_type_Valid() const{
    return m_evaluator_type_isValid;
}

OAIGoogleCloudMlV1__HyperparameterSpec OAIGoogleCloudMlV1__TrainingInput::getHyperparameters() const {
    return m_hyperparameters;
}
void OAIGoogleCloudMlV1__TrainingInput::setHyperparameters(const OAIGoogleCloudMlV1__HyperparameterSpec &hyperparameters) {
    m_hyperparameters = hyperparameters;
    m_hyperparameters_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_hyperparameters_Set() const{
    return m_hyperparameters_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_hyperparameters_Valid() const{
    return m_hyperparameters_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getJobDir() const {
    return m_job_dir;
}
void OAIGoogleCloudMlV1__TrainingInput::setJobDir(const QString &job_dir) {
    m_job_dir = job_dir;
    m_job_dir_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_job_dir_Set() const{
    return m_job_dir_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_job_dir_Valid() const{
    return m_job_dir_isValid;
}

OAIGoogleCloudMlV1__ReplicaConfig OAIGoogleCloudMlV1__TrainingInput::getMasterConfig() const {
    return m_master_config;
}
void OAIGoogleCloudMlV1__TrainingInput::setMasterConfig(const OAIGoogleCloudMlV1__ReplicaConfig &master_config) {
    m_master_config = master_config;
    m_master_config_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_master_config_Set() const{
    return m_master_config_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_master_config_Valid() const{
    return m_master_config_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getMasterType() const {
    return m_master_type;
}
void OAIGoogleCloudMlV1__TrainingInput::setMasterType(const QString &master_type) {
    m_master_type = master_type;
    m_master_type_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_master_type_Set() const{
    return m_master_type_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_master_type_Valid() const{
    return m_master_type_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getNetwork() const {
    return m_network;
}
void OAIGoogleCloudMlV1__TrainingInput::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_network_Valid() const{
    return m_network_isValid;
}

QList<QString> OAIGoogleCloudMlV1__TrainingInput::getPackageUris() const {
    return m_package_uris;
}
void OAIGoogleCloudMlV1__TrainingInput::setPackageUris(const QList<QString> &package_uris) {
    m_package_uris = package_uris;
    m_package_uris_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_package_uris_Set() const{
    return m_package_uris_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_package_uris_Valid() const{
    return m_package_uris_isValid;
}

OAIGoogleCloudMlV1__ReplicaConfig OAIGoogleCloudMlV1__TrainingInput::getParameterServerConfig() const {
    return m_parameter_server_config;
}
void OAIGoogleCloudMlV1__TrainingInput::setParameterServerConfig(const OAIGoogleCloudMlV1__ReplicaConfig &parameter_server_config) {
    m_parameter_server_config = parameter_server_config;
    m_parameter_server_config_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_parameter_server_config_Set() const{
    return m_parameter_server_config_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_parameter_server_config_Valid() const{
    return m_parameter_server_config_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getParameterServerCount() const {
    return m_parameter_server_count;
}
void OAIGoogleCloudMlV1__TrainingInput::setParameterServerCount(const QString &parameter_server_count) {
    m_parameter_server_count = parameter_server_count;
    m_parameter_server_count_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_parameter_server_count_Set() const{
    return m_parameter_server_count_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_parameter_server_count_Valid() const{
    return m_parameter_server_count_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getParameterServerType() const {
    return m_parameter_server_type;
}
void OAIGoogleCloudMlV1__TrainingInput::setParameterServerType(const QString &parameter_server_type) {
    m_parameter_server_type = parameter_server_type;
    m_parameter_server_type_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_parameter_server_type_Set() const{
    return m_parameter_server_type_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_parameter_server_type_Valid() const{
    return m_parameter_server_type_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getPythonModule() const {
    return m_python_module;
}
void OAIGoogleCloudMlV1__TrainingInput::setPythonModule(const QString &python_module) {
    m_python_module = python_module;
    m_python_module_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_python_module_Set() const{
    return m_python_module_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_python_module_Valid() const{
    return m_python_module_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getPythonVersion() const {
    return m_python_version;
}
void OAIGoogleCloudMlV1__TrainingInput::setPythonVersion(const QString &python_version) {
    m_python_version = python_version;
    m_python_version_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_python_version_Set() const{
    return m_python_version_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_python_version_Valid() const{
    return m_python_version_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getRegion() const {
    return m_region;
}
void OAIGoogleCloudMlV1__TrainingInput::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_region_Set() const{
    return m_region_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getRuntimeVersion() const {
    return m_runtime_version;
}
void OAIGoogleCloudMlV1__TrainingInput::setRuntimeVersion(const QString &runtime_version) {
    m_runtime_version = runtime_version;
    m_runtime_version_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_runtime_version_Set() const{
    return m_runtime_version_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_runtime_version_Valid() const{
    return m_runtime_version_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getScaleTier() const {
    return m_scale_tier;
}
void OAIGoogleCloudMlV1__TrainingInput::setScaleTier(const QString &scale_tier) {
    m_scale_tier = scale_tier;
    m_scale_tier_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_scale_tier_Set() const{
    return m_scale_tier_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_scale_tier_Valid() const{
    return m_scale_tier_isValid;
}

OAIGoogleCloudMlV1__Scheduling OAIGoogleCloudMlV1__TrainingInput::getScheduling() const {
    return m_scheduling;
}
void OAIGoogleCloudMlV1__TrainingInput::setScheduling(const OAIGoogleCloudMlV1__Scheduling &scheduling) {
    m_scheduling = scheduling;
    m_scheduling_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_scheduling_Set() const{
    return m_scheduling_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_scheduling_Valid() const{
    return m_scheduling_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getServiceAccount() const {
    return m_service_account;
}
void OAIGoogleCloudMlV1__TrainingInput::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_service_account_Valid() const{
    return m_service_account_isValid;
}

bool OAIGoogleCloudMlV1__TrainingInput::isUseChiefInTfConfig() const {
    return m_use_chief_in_tf_config;
}
void OAIGoogleCloudMlV1__TrainingInput::setUseChiefInTfConfig(const bool &use_chief_in_tf_config) {
    m_use_chief_in_tf_config = use_chief_in_tf_config;
    m_use_chief_in_tf_config_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_use_chief_in_tf_config_Set() const{
    return m_use_chief_in_tf_config_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_use_chief_in_tf_config_Valid() const{
    return m_use_chief_in_tf_config_isValid;
}

OAIGoogleCloudMlV1__ReplicaConfig OAIGoogleCloudMlV1__TrainingInput::getWorkerConfig() const {
    return m_worker_config;
}
void OAIGoogleCloudMlV1__TrainingInput::setWorkerConfig(const OAIGoogleCloudMlV1__ReplicaConfig &worker_config) {
    m_worker_config = worker_config;
    m_worker_config_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_worker_config_Set() const{
    return m_worker_config_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_worker_config_Valid() const{
    return m_worker_config_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getWorkerCount() const {
    return m_worker_count;
}
void OAIGoogleCloudMlV1__TrainingInput::setWorkerCount(const QString &worker_count) {
    m_worker_count = worker_count;
    m_worker_count_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_worker_count_Set() const{
    return m_worker_count_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_worker_count_Valid() const{
    return m_worker_count_isValid;
}

QString OAIGoogleCloudMlV1__TrainingInput::getWorkerType() const {
    return m_worker_type;
}
void OAIGoogleCloudMlV1__TrainingInput::setWorkerType(const QString &worker_type) {
    m_worker_type = worker_type;
    m_worker_type_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_worker_type_Set() const{
    return m_worker_type_isSet;
}

bool OAIGoogleCloudMlV1__TrainingInput::is_worker_type_Valid() const{
    return m_worker_type_isValid;
}

bool OAIGoogleCloudMlV1__TrainingInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_web_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluator_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluator_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperparameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_server_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_server_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_server_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_python_module_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_python_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_chief_in_tf_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudMlV1__TrainingInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
