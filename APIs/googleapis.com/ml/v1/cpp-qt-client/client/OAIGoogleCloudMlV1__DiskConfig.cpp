/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudMlV1__DiskConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudMlV1__DiskConfig::OAIGoogleCloudMlV1__DiskConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudMlV1__DiskConfig::OAIGoogleCloudMlV1__DiskConfig() {
    this->initializeModel();
}

OAIGoogleCloudMlV1__DiskConfig::~OAIGoogleCloudMlV1__DiskConfig() {}

void OAIGoogleCloudMlV1__DiskConfig::initializeModel() {

    m_boot_disk_size_gb_isSet = false;
    m_boot_disk_size_gb_isValid = false;

    m_boot_disk_type_isSet = false;
    m_boot_disk_type_isValid = false;
}

void OAIGoogleCloudMlV1__DiskConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudMlV1__DiskConfig::fromJsonObject(QJsonObject json) {

    m_boot_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_boot_disk_size_gb, json[QString("bootDiskSizeGb")]);
    m_boot_disk_size_gb_isSet = !json[QString("bootDiskSizeGb")].isNull() && m_boot_disk_size_gb_isValid;

    m_boot_disk_type_isValid = ::OpenAPI::fromJsonValue(m_boot_disk_type, json[QString("bootDiskType")]);
    m_boot_disk_type_isSet = !json[QString("bootDiskType")].isNull() && m_boot_disk_type_isValid;
}

QString OAIGoogleCloudMlV1__DiskConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudMlV1__DiskConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_boot_disk_size_gb_isSet) {
        obj.insert(QString("bootDiskSizeGb"), ::OpenAPI::toJsonValue(m_boot_disk_size_gb));
    }
    if (m_boot_disk_type_isSet) {
        obj.insert(QString("bootDiskType"), ::OpenAPI::toJsonValue(m_boot_disk_type));
    }
    return obj;
}

qint32 OAIGoogleCloudMlV1__DiskConfig::getBootDiskSizeGb() const {
    return m_boot_disk_size_gb;
}
void OAIGoogleCloudMlV1__DiskConfig::setBootDiskSizeGb(const qint32 &boot_disk_size_gb) {
    m_boot_disk_size_gb = boot_disk_size_gb;
    m_boot_disk_size_gb_isSet = true;
}

bool OAIGoogleCloudMlV1__DiskConfig::is_boot_disk_size_gb_Set() const{
    return m_boot_disk_size_gb_isSet;
}

bool OAIGoogleCloudMlV1__DiskConfig::is_boot_disk_size_gb_Valid() const{
    return m_boot_disk_size_gb_isValid;
}

QString OAIGoogleCloudMlV1__DiskConfig::getBootDiskType() const {
    return m_boot_disk_type;
}
void OAIGoogleCloudMlV1__DiskConfig::setBootDiskType(const QString &boot_disk_type) {
    m_boot_disk_type = boot_disk_type;
    m_boot_disk_type_isSet = true;
}

bool OAIGoogleCloudMlV1__DiskConfig::is_boot_disk_type_Set() const{
    return m_boot_disk_type_isSet;
}

bool OAIGoogleCloudMlV1__DiskConfig::is_boot_disk_type_Valid() const{
    return m_boot_disk_type_isValid;
}

bool OAIGoogleCloudMlV1__DiskConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boot_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudMlV1__DiskConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
