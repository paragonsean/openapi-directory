/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudMlV1__ReplicaConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudMlV1__ReplicaConfig::OAIGoogleCloudMlV1__ReplicaConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudMlV1__ReplicaConfig::OAIGoogleCloudMlV1__ReplicaConfig() {
    this->initializeModel();
}

OAIGoogleCloudMlV1__ReplicaConfig::~OAIGoogleCloudMlV1__ReplicaConfig() {}

void OAIGoogleCloudMlV1__ReplicaConfig::initializeModel() {

    m_accelerator_config_isSet = false;
    m_accelerator_config_isValid = false;

    m_container_args_isSet = false;
    m_container_args_isValid = false;

    m_container_command_isSet = false;
    m_container_command_isValid = false;

    m_disk_config_isSet = false;
    m_disk_config_isValid = false;

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;

    m_tpu_tf_version_isSet = false;
    m_tpu_tf_version_isValid = false;
}

void OAIGoogleCloudMlV1__ReplicaConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudMlV1__ReplicaConfig::fromJsonObject(QJsonObject json) {

    m_accelerator_config_isValid = ::OpenAPI::fromJsonValue(m_accelerator_config, json[QString("acceleratorConfig")]);
    m_accelerator_config_isSet = !json[QString("acceleratorConfig")].isNull() && m_accelerator_config_isValid;

    m_container_args_isValid = ::OpenAPI::fromJsonValue(m_container_args, json[QString("containerArgs")]);
    m_container_args_isSet = !json[QString("containerArgs")].isNull() && m_container_args_isValid;

    m_container_command_isValid = ::OpenAPI::fromJsonValue(m_container_command, json[QString("containerCommand")]);
    m_container_command_isSet = !json[QString("containerCommand")].isNull() && m_container_command_isValid;

    m_disk_config_isValid = ::OpenAPI::fromJsonValue(m_disk_config, json[QString("diskConfig")]);
    m_disk_config_isSet = !json[QString("diskConfig")].isNull() && m_disk_config_isValid;

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageUri")]);
    m_image_uri_isSet = !json[QString("imageUri")].isNull() && m_image_uri_isValid;

    m_tpu_tf_version_isValid = ::OpenAPI::fromJsonValue(m_tpu_tf_version, json[QString("tpuTfVersion")]);
    m_tpu_tf_version_isSet = !json[QString("tpuTfVersion")].isNull() && m_tpu_tf_version_isValid;
}

QString OAIGoogleCloudMlV1__ReplicaConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudMlV1__ReplicaConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_config.isSet()) {
        obj.insert(QString("acceleratorConfig"), ::OpenAPI::toJsonValue(m_accelerator_config));
    }
    if (m_container_args.size() > 0) {
        obj.insert(QString("containerArgs"), ::OpenAPI::toJsonValue(m_container_args));
    }
    if (m_container_command.size() > 0) {
        obj.insert(QString("containerCommand"), ::OpenAPI::toJsonValue(m_container_command));
    }
    if (m_disk_config.isSet()) {
        obj.insert(QString("diskConfig"), ::OpenAPI::toJsonValue(m_disk_config));
    }
    if (m_image_uri_isSet) {
        obj.insert(QString("imageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    if (m_tpu_tf_version_isSet) {
        obj.insert(QString("tpuTfVersion"), ::OpenAPI::toJsonValue(m_tpu_tf_version));
    }
    return obj;
}

OAIGoogleCloudMlV1__AcceleratorConfig OAIGoogleCloudMlV1__ReplicaConfig::getAcceleratorConfig() const {
    return m_accelerator_config;
}
void OAIGoogleCloudMlV1__ReplicaConfig::setAcceleratorConfig(const OAIGoogleCloudMlV1__AcceleratorConfig &accelerator_config) {
    m_accelerator_config = accelerator_config;
    m_accelerator_config_isSet = true;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::is_accelerator_config_Set() const{
    return m_accelerator_config_isSet;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::is_accelerator_config_Valid() const{
    return m_accelerator_config_isValid;
}

QList<QString> OAIGoogleCloudMlV1__ReplicaConfig::getContainerArgs() const {
    return m_container_args;
}
void OAIGoogleCloudMlV1__ReplicaConfig::setContainerArgs(const QList<QString> &container_args) {
    m_container_args = container_args;
    m_container_args_isSet = true;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::is_container_args_Set() const{
    return m_container_args_isSet;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::is_container_args_Valid() const{
    return m_container_args_isValid;
}

QList<QString> OAIGoogleCloudMlV1__ReplicaConfig::getContainerCommand() const {
    return m_container_command;
}
void OAIGoogleCloudMlV1__ReplicaConfig::setContainerCommand(const QList<QString> &container_command) {
    m_container_command = container_command;
    m_container_command_isSet = true;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::is_container_command_Set() const{
    return m_container_command_isSet;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::is_container_command_Valid() const{
    return m_container_command_isValid;
}

OAIGoogleCloudMlV1__DiskConfig OAIGoogleCloudMlV1__ReplicaConfig::getDiskConfig() const {
    return m_disk_config;
}
void OAIGoogleCloudMlV1__ReplicaConfig::setDiskConfig(const OAIGoogleCloudMlV1__DiskConfig &disk_config) {
    m_disk_config = disk_config;
    m_disk_config_isSet = true;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::is_disk_config_Set() const{
    return m_disk_config_isSet;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::is_disk_config_Valid() const{
    return m_disk_config_isValid;
}

QString OAIGoogleCloudMlV1__ReplicaConfig::getImageUri() const {
    return m_image_uri;
}
void OAIGoogleCloudMlV1__ReplicaConfig::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

QString OAIGoogleCloudMlV1__ReplicaConfig::getTpuTfVersion() const {
    return m_tpu_tf_version;
}
void OAIGoogleCloudMlV1__ReplicaConfig::setTpuTfVersion(const QString &tpu_tf_version) {
    m_tpu_tf_version = tpu_tf_version;
    m_tpu_tf_version_isSet = true;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::is_tpu_tf_version_Set() const{
    return m_tpu_tf_version_isSet;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::is_tpu_tf_version_Valid() const{
    return m_tpu_tf_version_isValid;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_command.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tpu_tf_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudMlV1__ReplicaConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
