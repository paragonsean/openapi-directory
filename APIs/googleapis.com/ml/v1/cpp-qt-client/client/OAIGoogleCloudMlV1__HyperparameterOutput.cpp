/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudMlV1__HyperparameterOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudMlV1__HyperparameterOutput::OAIGoogleCloudMlV1__HyperparameterOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudMlV1__HyperparameterOutput::OAIGoogleCloudMlV1__HyperparameterOutput() {
    this->initializeModel();
}

OAIGoogleCloudMlV1__HyperparameterOutput::~OAIGoogleCloudMlV1__HyperparameterOutput() {}

void OAIGoogleCloudMlV1__HyperparameterOutput::initializeModel() {

    m_all_metrics_isSet = false;
    m_all_metrics_isValid = false;

    m_built_in_algorithm_output_isSet = false;
    m_built_in_algorithm_output_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_final_metric_isSet = false;
    m_final_metric_isValid = false;

    m_hyperparameters_isSet = false;
    m_hyperparameters_isValid = false;

    m_is_trial_stopped_early_isSet = false;
    m_is_trial_stopped_early_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_trial_id_isSet = false;
    m_trial_id_isValid = false;

    m_web_access_uris_isSet = false;
    m_web_access_uris_isValid = false;
}

void OAIGoogleCloudMlV1__HyperparameterOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudMlV1__HyperparameterOutput::fromJsonObject(QJsonObject json) {

    m_all_metrics_isValid = ::OpenAPI::fromJsonValue(m_all_metrics, json[QString("allMetrics")]);
    m_all_metrics_isSet = !json[QString("allMetrics")].isNull() && m_all_metrics_isValid;

    m_built_in_algorithm_output_isValid = ::OpenAPI::fromJsonValue(m_built_in_algorithm_output, json[QString("builtInAlgorithmOutput")]);
    m_built_in_algorithm_output_isSet = !json[QString("builtInAlgorithmOutput")].isNull() && m_built_in_algorithm_output_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_final_metric_isValid = ::OpenAPI::fromJsonValue(m_final_metric, json[QString("finalMetric")]);
    m_final_metric_isSet = !json[QString("finalMetric")].isNull() && m_final_metric_isValid;

    m_hyperparameters_isValid = ::OpenAPI::fromJsonValue(m_hyperparameters, json[QString("hyperparameters")]);
    m_hyperparameters_isSet = !json[QString("hyperparameters")].isNull() && m_hyperparameters_isValid;

    m_is_trial_stopped_early_isValid = ::OpenAPI::fromJsonValue(m_is_trial_stopped_early, json[QString("isTrialStoppedEarly")]);
    m_is_trial_stopped_early_isSet = !json[QString("isTrialStoppedEarly")].isNull() && m_is_trial_stopped_early_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_trial_id_isValid = ::OpenAPI::fromJsonValue(m_trial_id, json[QString("trialId")]);
    m_trial_id_isSet = !json[QString("trialId")].isNull() && m_trial_id_isValid;

    m_web_access_uris_isValid = ::OpenAPI::fromJsonValue(m_web_access_uris, json[QString("webAccessUris")]);
    m_web_access_uris_isSet = !json[QString("webAccessUris")].isNull() && m_web_access_uris_isValid;
}

QString OAIGoogleCloudMlV1__HyperparameterOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudMlV1__HyperparameterOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_all_metrics.size() > 0) {
        obj.insert(QString("allMetrics"), ::OpenAPI::toJsonValue(m_all_metrics));
    }
    if (m_built_in_algorithm_output.isSet()) {
        obj.insert(QString("builtInAlgorithmOutput"), ::OpenAPI::toJsonValue(m_built_in_algorithm_output));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_final_metric.isSet()) {
        obj.insert(QString("finalMetric"), ::OpenAPI::toJsonValue(m_final_metric));
    }
    if (m_hyperparameters.size() > 0) {
        obj.insert(QString("hyperparameters"), ::OpenAPI::toJsonValue(m_hyperparameters));
    }
    if (m_is_trial_stopped_early_isSet) {
        obj.insert(QString("isTrialStoppedEarly"), ::OpenAPI::toJsonValue(m_is_trial_stopped_early));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_trial_id_isSet) {
        obj.insert(QString("trialId"), ::OpenAPI::toJsonValue(m_trial_id));
    }
    if (m_web_access_uris.size() > 0) {
        obj.insert(QString("webAccessUris"), ::OpenAPI::toJsonValue(m_web_access_uris));
    }
    return obj;
}

QList<OAIGoogleCloudMlV1_HyperparameterOutput_HyperparameterMetric> OAIGoogleCloudMlV1__HyperparameterOutput::getAllMetrics() const {
    return m_all_metrics;
}
void OAIGoogleCloudMlV1__HyperparameterOutput::setAllMetrics(const QList<OAIGoogleCloudMlV1_HyperparameterOutput_HyperparameterMetric> &all_metrics) {
    m_all_metrics = all_metrics;
    m_all_metrics_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_all_metrics_Set() const{
    return m_all_metrics_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_all_metrics_Valid() const{
    return m_all_metrics_isValid;
}

OAIGoogleCloudMlV1__BuiltInAlgorithmOutput OAIGoogleCloudMlV1__HyperparameterOutput::getBuiltInAlgorithmOutput() const {
    return m_built_in_algorithm_output;
}
void OAIGoogleCloudMlV1__HyperparameterOutput::setBuiltInAlgorithmOutput(const OAIGoogleCloudMlV1__BuiltInAlgorithmOutput &built_in_algorithm_output) {
    m_built_in_algorithm_output = built_in_algorithm_output;
    m_built_in_algorithm_output_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_built_in_algorithm_output_Set() const{
    return m_built_in_algorithm_output_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_built_in_algorithm_output_Valid() const{
    return m_built_in_algorithm_output_isValid;
}

QString OAIGoogleCloudMlV1__HyperparameterOutput::getEndTime() const {
    return m_end_time;
}
void OAIGoogleCloudMlV1__HyperparameterOutput::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIGoogleCloudMlV1_HyperparameterOutput_HyperparameterMetric OAIGoogleCloudMlV1__HyperparameterOutput::getFinalMetric() const {
    return m_final_metric;
}
void OAIGoogleCloudMlV1__HyperparameterOutput::setFinalMetric(const OAIGoogleCloudMlV1_HyperparameterOutput_HyperparameterMetric &final_metric) {
    m_final_metric = final_metric;
    m_final_metric_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_final_metric_Set() const{
    return m_final_metric_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_final_metric_Valid() const{
    return m_final_metric_isValid;
}

QMap<QString, QString> OAIGoogleCloudMlV1__HyperparameterOutput::getHyperparameters() const {
    return m_hyperparameters;
}
void OAIGoogleCloudMlV1__HyperparameterOutput::setHyperparameters(const QMap<QString, QString> &hyperparameters) {
    m_hyperparameters = hyperparameters;
    m_hyperparameters_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_hyperparameters_Set() const{
    return m_hyperparameters_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_hyperparameters_Valid() const{
    return m_hyperparameters_isValid;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::isIsTrialStoppedEarly() const {
    return m_is_trial_stopped_early;
}
void OAIGoogleCloudMlV1__HyperparameterOutput::setIsTrialStoppedEarly(const bool &is_trial_stopped_early) {
    m_is_trial_stopped_early = is_trial_stopped_early;
    m_is_trial_stopped_early_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_is_trial_stopped_early_Set() const{
    return m_is_trial_stopped_early_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_is_trial_stopped_early_Valid() const{
    return m_is_trial_stopped_early_isValid;
}

QString OAIGoogleCloudMlV1__HyperparameterOutput::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudMlV1__HyperparameterOutput::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGoogleCloudMlV1__HyperparameterOutput::getState() const {
    return m_state;
}
void OAIGoogleCloudMlV1__HyperparameterOutput::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGoogleCloudMlV1__HyperparameterOutput::getTrialId() const {
    return m_trial_id;
}
void OAIGoogleCloudMlV1__HyperparameterOutput::setTrialId(const QString &trial_id) {
    m_trial_id = trial_id;
    m_trial_id_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_trial_id_Set() const{
    return m_trial_id_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_trial_id_Valid() const{
    return m_trial_id_isValid;
}

QMap<QString, QString> OAIGoogleCloudMlV1__HyperparameterOutput::getWebAccessUris() const {
    return m_web_access_uris;
}
void OAIGoogleCloudMlV1__HyperparameterOutput::setWebAccessUris(const QMap<QString, QString> &web_access_uris) {
    m_web_access_uris = web_access_uris;
    m_web_access_uris_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_web_access_uris_Set() const{
    return m_web_access_uris_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::is_web_access_uris_Valid() const{
    return m_web_access_uris_isValid;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_built_in_algorithm_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperparameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_trial_stopped_early_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_access_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudMlV1__HyperparameterOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
