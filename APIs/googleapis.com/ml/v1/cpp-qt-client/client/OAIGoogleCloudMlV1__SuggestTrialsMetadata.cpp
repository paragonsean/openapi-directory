/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudMlV1__SuggestTrialsMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudMlV1__SuggestTrialsMetadata::OAIGoogleCloudMlV1__SuggestTrialsMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudMlV1__SuggestTrialsMetadata::OAIGoogleCloudMlV1__SuggestTrialsMetadata() {
    this->initializeModel();
}

OAIGoogleCloudMlV1__SuggestTrialsMetadata::~OAIGoogleCloudMlV1__SuggestTrialsMetadata() {}

void OAIGoogleCloudMlV1__SuggestTrialsMetadata::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_study_isSet = false;
    m_study_isValid = false;

    m_suggestion_count_isSet = false;
    m_suggestion_count_isValid = false;
}

void OAIGoogleCloudMlV1__SuggestTrialsMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudMlV1__SuggestTrialsMetadata::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_study_isValid = ::OpenAPI::fromJsonValue(m_study, json[QString("study")]);
    m_study_isSet = !json[QString("study")].isNull() && m_study_isValid;

    m_suggestion_count_isValid = ::OpenAPI::fromJsonValue(m_suggestion_count, json[QString("suggestionCount")]);
    m_suggestion_count_isSet = !json[QString("suggestionCount")].isNull() && m_suggestion_count_isValid;
}

QString OAIGoogleCloudMlV1__SuggestTrialsMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudMlV1__SuggestTrialsMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_study_isSet) {
        obj.insert(QString("study"), ::OpenAPI::toJsonValue(m_study));
    }
    if (m_suggestion_count_isSet) {
        obj.insert(QString("suggestionCount"), ::OpenAPI::toJsonValue(m_suggestion_count));
    }
    return obj;
}

QString OAIGoogleCloudMlV1__SuggestTrialsMetadata::getClientId() const {
    return m_client_id;
}
void OAIGoogleCloudMlV1__SuggestTrialsMetadata::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIGoogleCloudMlV1__SuggestTrialsMetadata::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIGoogleCloudMlV1__SuggestTrialsMetadata::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIGoogleCloudMlV1__SuggestTrialsMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudMlV1__SuggestTrialsMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudMlV1__SuggestTrialsMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudMlV1__SuggestTrialsMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudMlV1__SuggestTrialsMetadata::getStudy() const {
    return m_study;
}
void OAIGoogleCloudMlV1__SuggestTrialsMetadata::setStudy(const QString &study) {
    m_study = study;
    m_study_isSet = true;
}

bool OAIGoogleCloudMlV1__SuggestTrialsMetadata::is_study_Set() const{
    return m_study_isSet;
}

bool OAIGoogleCloudMlV1__SuggestTrialsMetadata::is_study_Valid() const{
    return m_study_isValid;
}

qint32 OAIGoogleCloudMlV1__SuggestTrialsMetadata::getSuggestionCount() const {
    return m_suggestion_count;
}
void OAIGoogleCloudMlV1__SuggestTrialsMetadata::setSuggestionCount(const qint32 &suggestion_count) {
    m_suggestion_count = suggestion_count;
    m_suggestion_count_isSet = true;
}

bool OAIGoogleCloudMlV1__SuggestTrialsMetadata::is_suggestion_count_Set() const{
    return m_suggestion_count_isSet;
}

bool OAIGoogleCloudMlV1__SuggestTrialsMetadata::is_suggestion_count_Valid() const{
    return m_suggestion_count_isValid;
}

bool OAIGoogleCloudMlV1__SuggestTrialsMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestion_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudMlV1__SuggestTrialsMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
