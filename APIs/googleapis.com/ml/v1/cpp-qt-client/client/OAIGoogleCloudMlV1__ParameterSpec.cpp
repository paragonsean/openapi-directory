/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudMlV1__ParameterSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudMlV1__ParameterSpec::OAIGoogleCloudMlV1__ParameterSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudMlV1__ParameterSpec::OAIGoogleCloudMlV1__ParameterSpec() {
    this->initializeModel();
}

OAIGoogleCloudMlV1__ParameterSpec::~OAIGoogleCloudMlV1__ParameterSpec() {}

void OAIGoogleCloudMlV1__ParameterSpec::initializeModel() {

    m_categorical_values_isSet = false;
    m_categorical_values_isValid = false;

    m_discrete_values_isSet = false;
    m_discrete_values_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_scale_type_isSet = false;
    m_scale_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudMlV1__ParameterSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudMlV1__ParameterSpec::fromJsonObject(QJsonObject json) {

    m_categorical_values_isValid = ::OpenAPI::fromJsonValue(m_categorical_values, json[QString("categoricalValues")]);
    m_categorical_values_isSet = !json[QString("categoricalValues")].isNull() && m_categorical_values_isValid;

    m_discrete_values_isValid = ::OpenAPI::fromJsonValue(m_discrete_values, json[QString("discreteValues")]);
    m_discrete_values_isSet = !json[QString("discreteValues")].isNull() && m_discrete_values_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("maxValue")]);
    m_max_value_isSet = !json[QString("maxValue")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("minValue")]);
    m_min_value_isSet = !json[QString("minValue")].isNull() && m_min_value_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("parameterName")]);
    m_parameter_name_isSet = !json[QString("parameterName")].isNull() && m_parameter_name_isValid;

    m_scale_type_isValid = ::OpenAPI::fromJsonValue(m_scale_type, json[QString("scaleType")]);
    m_scale_type_isSet = !json[QString("scaleType")].isNull() && m_scale_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudMlV1__ParameterSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudMlV1__ParameterSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_categorical_values.size() > 0) {
        obj.insert(QString("categoricalValues"), ::OpenAPI::toJsonValue(m_categorical_values));
    }
    if (m_discrete_values.size() > 0) {
        obj.insert(QString("discreteValues"), ::OpenAPI::toJsonValue(m_discrete_values));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("maxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("minValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("parameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_scale_type_isSet) {
        obj.insert(QString("scaleType"), ::OpenAPI::toJsonValue(m_scale_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIGoogleCloudMlV1__ParameterSpec::getCategoricalValues() const {
    return m_categorical_values;
}
void OAIGoogleCloudMlV1__ParameterSpec::setCategoricalValues(const QList<QString> &categorical_values) {
    m_categorical_values = categorical_values;
    m_categorical_values_isSet = true;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_categorical_values_Set() const{
    return m_categorical_values_isSet;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_categorical_values_Valid() const{
    return m_categorical_values_isValid;
}

QList<double> OAIGoogleCloudMlV1__ParameterSpec::getDiscreteValues() const {
    return m_discrete_values;
}
void OAIGoogleCloudMlV1__ParameterSpec::setDiscreteValues(const QList<double> &discrete_values) {
    m_discrete_values = discrete_values;
    m_discrete_values_isSet = true;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_discrete_values_Set() const{
    return m_discrete_values_isSet;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_discrete_values_Valid() const{
    return m_discrete_values_isValid;
}

double OAIGoogleCloudMlV1__ParameterSpec::getMaxValue() const {
    return m_max_value;
}
void OAIGoogleCloudMlV1__ParameterSpec::setMaxValue(const double &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_max_value_Valid() const{
    return m_max_value_isValid;
}

double OAIGoogleCloudMlV1__ParameterSpec::getMinValue() const {
    return m_min_value;
}
void OAIGoogleCloudMlV1__ParameterSpec::setMinValue(const double &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_min_value_Valid() const{
    return m_min_value_isValid;
}

QString OAIGoogleCloudMlV1__ParameterSpec::getParameterName() const {
    return m_parameter_name;
}
void OAIGoogleCloudMlV1__ParameterSpec::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

QString OAIGoogleCloudMlV1__ParameterSpec::getScaleType() const {
    return m_scale_type;
}
void OAIGoogleCloudMlV1__ParameterSpec::setScaleType(const QString &scale_type) {
    m_scale_type = scale_type;
    m_scale_type_isSet = true;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_scale_type_Set() const{
    return m_scale_type_isSet;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_scale_type_Valid() const{
    return m_scale_type_isValid;
}

QString OAIGoogleCloudMlV1__ParameterSpec::getType() const {
    return m_type;
}
void OAIGoogleCloudMlV1__ParameterSpec::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudMlV1__ParameterSpec::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudMlV1__ParameterSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categorical_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discrete_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudMlV1__ParameterSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
