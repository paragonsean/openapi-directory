/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudMlV1__HyperparameterSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudMlV1__HyperparameterSpec::OAIGoogleCloudMlV1__HyperparameterSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudMlV1__HyperparameterSpec::OAIGoogleCloudMlV1__HyperparameterSpec() {
    this->initializeModel();
}

OAIGoogleCloudMlV1__HyperparameterSpec::~OAIGoogleCloudMlV1__HyperparameterSpec() {}

void OAIGoogleCloudMlV1__HyperparameterSpec::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_enable_trial_early_stopping_isSet = false;
    m_enable_trial_early_stopping_isValid = false;

    m_goal_isSet = false;
    m_goal_isValid = false;

    m_hyperparameter_metric_tag_isSet = false;
    m_hyperparameter_metric_tag_isValid = false;

    m_max_failed_trials_isSet = false;
    m_max_failed_trials_isValid = false;

    m_max_parallel_trials_isSet = false;
    m_max_parallel_trials_isValid = false;

    m_max_trials_isSet = false;
    m_max_trials_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_resume_previous_job_id_isSet = false;
    m_resume_previous_job_id_isValid = false;
}

void OAIGoogleCloudMlV1__HyperparameterSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudMlV1__HyperparameterSpec::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_enable_trial_early_stopping_isValid = ::OpenAPI::fromJsonValue(m_enable_trial_early_stopping, json[QString("enableTrialEarlyStopping")]);
    m_enable_trial_early_stopping_isSet = !json[QString("enableTrialEarlyStopping")].isNull() && m_enable_trial_early_stopping_isValid;

    m_goal_isValid = ::OpenAPI::fromJsonValue(m_goal, json[QString("goal")]);
    m_goal_isSet = !json[QString("goal")].isNull() && m_goal_isValid;

    m_hyperparameter_metric_tag_isValid = ::OpenAPI::fromJsonValue(m_hyperparameter_metric_tag, json[QString("hyperparameterMetricTag")]);
    m_hyperparameter_metric_tag_isSet = !json[QString("hyperparameterMetricTag")].isNull() && m_hyperparameter_metric_tag_isValid;

    m_max_failed_trials_isValid = ::OpenAPI::fromJsonValue(m_max_failed_trials, json[QString("maxFailedTrials")]);
    m_max_failed_trials_isSet = !json[QString("maxFailedTrials")].isNull() && m_max_failed_trials_isValid;

    m_max_parallel_trials_isValid = ::OpenAPI::fromJsonValue(m_max_parallel_trials, json[QString("maxParallelTrials")]);
    m_max_parallel_trials_isSet = !json[QString("maxParallelTrials")].isNull() && m_max_parallel_trials_isValid;

    m_max_trials_isValid = ::OpenAPI::fromJsonValue(m_max_trials, json[QString("maxTrials")]);
    m_max_trials_isSet = !json[QString("maxTrials")].isNull() && m_max_trials_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_resume_previous_job_id_isValid = ::OpenAPI::fromJsonValue(m_resume_previous_job_id, json[QString("resumePreviousJobId")]);
    m_resume_previous_job_id_isSet = !json[QString("resumePreviousJobId")].isNull() && m_resume_previous_job_id_isValid;
}

QString OAIGoogleCloudMlV1__HyperparameterSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudMlV1__HyperparameterSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_enable_trial_early_stopping_isSet) {
        obj.insert(QString("enableTrialEarlyStopping"), ::OpenAPI::toJsonValue(m_enable_trial_early_stopping));
    }
    if (m_goal_isSet) {
        obj.insert(QString("goal"), ::OpenAPI::toJsonValue(m_goal));
    }
    if (m_hyperparameter_metric_tag_isSet) {
        obj.insert(QString("hyperparameterMetricTag"), ::OpenAPI::toJsonValue(m_hyperparameter_metric_tag));
    }
    if (m_max_failed_trials_isSet) {
        obj.insert(QString("maxFailedTrials"), ::OpenAPI::toJsonValue(m_max_failed_trials));
    }
    if (m_max_parallel_trials_isSet) {
        obj.insert(QString("maxParallelTrials"), ::OpenAPI::toJsonValue(m_max_parallel_trials));
    }
    if (m_max_trials_isSet) {
        obj.insert(QString("maxTrials"), ::OpenAPI::toJsonValue(m_max_trials));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_resume_previous_job_id_isSet) {
        obj.insert(QString("resumePreviousJobId"), ::OpenAPI::toJsonValue(m_resume_previous_job_id));
    }
    return obj;
}

QString OAIGoogleCloudMlV1__HyperparameterSpec::getAlgorithm() const {
    return m_algorithm;
}
void OAIGoogleCloudMlV1__HyperparameterSpec::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::isEnableTrialEarlyStopping() const {
    return m_enable_trial_early_stopping;
}
void OAIGoogleCloudMlV1__HyperparameterSpec::setEnableTrialEarlyStopping(const bool &enable_trial_early_stopping) {
    m_enable_trial_early_stopping = enable_trial_early_stopping;
    m_enable_trial_early_stopping_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_enable_trial_early_stopping_Set() const{
    return m_enable_trial_early_stopping_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_enable_trial_early_stopping_Valid() const{
    return m_enable_trial_early_stopping_isValid;
}

QString OAIGoogleCloudMlV1__HyperparameterSpec::getGoal() const {
    return m_goal;
}
void OAIGoogleCloudMlV1__HyperparameterSpec::setGoal(const QString &goal) {
    m_goal = goal;
    m_goal_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_goal_Set() const{
    return m_goal_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_goal_Valid() const{
    return m_goal_isValid;
}

QString OAIGoogleCloudMlV1__HyperparameterSpec::getHyperparameterMetricTag() const {
    return m_hyperparameter_metric_tag;
}
void OAIGoogleCloudMlV1__HyperparameterSpec::setHyperparameterMetricTag(const QString &hyperparameter_metric_tag) {
    m_hyperparameter_metric_tag = hyperparameter_metric_tag;
    m_hyperparameter_metric_tag_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_hyperparameter_metric_tag_Set() const{
    return m_hyperparameter_metric_tag_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_hyperparameter_metric_tag_Valid() const{
    return m_hyperparameter_metric_tag_isValid;
}

qint32 OAIGoogleCloudMlV1__HyperparameterSpec::getMaxFailedTrials() const {
    return m_max_failed_trials;
}
void OAIGoogleCloudMlV1__HyperparameterSpec::setMaxFailedTrials(const qint32 &max_failed_trials) {
    m_max_failed_trials = max_failed_trials;
    m_max_failed_trials_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_max_failed_trials_Set() const{
    return m_max_failed_trials_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_max_failed_trials_Valid() const{
    return m_max_failed_trials_isValid;
}

qint32 OAIGoogleCloudMlV1__HyperparameterSpec::getMaxParallelTrials() const {
    return m_max_parallel_trials;
}
void OAIGoogleCloudMlV1__HyperparameterSpec::setMaxParallelTrials(const qint32 &max_parallel_trials) {
    m_max_parallel_trials = max_parallel_trials;
    m_max_parallel_trials_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_max_parallel_trials_Set() const{
    return m_max_parallel_trials_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_max_parallel_trials_Valid() const{
    return m_max_parallel_trials_isValid;
}

qint32 OAIGoogleCloudMlV1__HyperparameterSpec::getMaxTrials() const {
    return m_max_trials;
}
void OAIGoogleCloudMlV1__HyperparameterSpec::setMaxTrials(const qint32 &max_trials) {
    m_max_trials = max_trials;
    m_max_trials_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_max_trials_Set() const{
    return m_max_trials_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_max_trials_Valid() const{
    return m_max_trials_isValid;
}

QList<OAIGoogleCloudMlV1__ParameterSpec> OAIGoogleCloudMlV1__HyperparameterSpec::getParams() const {
    return m_params;
}
void OAIGoogleCloudMlV1__HyperparameterSpec::setParams(const QList<OAIGoogleCloudMlV1__ParameterSpec> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_params_Set() const{
    return m_params_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_params_Valid() const{
    return m_params_isValid;
}

QString OAIGoogleCloudMlV1__HyperparameterSpec::getResumePreviousJobId() const {
    return m_resume_previous_job_id;
}
void OAIGoogleCloudMlV1__HyperparameterSpec::setResumePreviousJobId(const QString &resume_previous_job_id) {
    m_resume_previous_job_id = resume_previous_job_id;
    m_resume_previous_job_id_isSet = true;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_resume_previous_job_id_Set() const{
    return m_resume_previous_job_id_isSet;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::is_resume_previous_job_id_Valid() const{
    return m_resume_previous_job_id_isValid;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_trial_early_stopping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperparameter_metric_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_failed_trials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_parallel_trials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_trials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_previous_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudMlV1__HyperparameterSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
