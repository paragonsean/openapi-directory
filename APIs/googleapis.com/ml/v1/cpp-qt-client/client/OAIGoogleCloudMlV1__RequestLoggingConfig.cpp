/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudMlV1__RequestLoggingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudMlV1__RequestLoggingConfig::OAIGoogleCloudMlV1__RequestLoggingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudMlV1__RequestLoggingConfig::OAIGoogleCloudMlV1__RequestLoggingConfig() {
    this->initializeModel();
}

OAIGoogleCloudMlV1__RequestLoggingConfig::~OAIGoogleCloudMlV1__RequestLoggingConfig() {}

void OAIGoogleCloudMlV1__RequestLoggingConfig::initializeModel() {

    m_bigquery_table_name_isSet = false;
    m_bigquery_table_name_isValid = false;

    m_sampling_percentage_isSet = false;
    m_sampling_percentage_isValid = false;
}

void OAIGoogleCloudMlV1__RequestLoggingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudMlV1__RequestLoggingConfig::fromJsonObject(QJsonObject json) {

    m_bigquery_table_name_isValid = ::OpenAPI::fromJsonValue(m_bigquery_table_name, json[QString("bigqueryTableName")]);
    m_bigquery_table_name_isSet = !json[QString("bigqueryTableName")].isNull() && m_bigquery_table_name_isValid;

    m_sampling_percentage_isValid = ::OpenAPI::fromJsonValue(m_sampling_percentage, json[QString("samplingPercentage")]);
    m_sampling_percentage_isSet = !json[QString("samplingPercentage")].isNull() && m_sampling_percentage_isValid;
}

QString OAIGoogleCloudMlV1__RequestLoggingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudMlV1__RequestLoggingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_table_name_isSet) {
        obj.insert(QString("bigqueryTableName"), ::OpenAPI::toJsonValue(m_bigquery_table_name));
    }
    if (m_sampling_percentage_isSet) {
        obj.insert(QString("samplingPercentage"), ::OpenAPI::toJsonValue(m_sampling_percentage));
    }
    return obj;
}

QString OAIGoogleCloudMlV1__RequestLoggingConfig::getBigqueryTableName() const {
    return m_bigquery_table_name;
}
void OAIGoogleCloudMlV1__RequestLoggingConfig::setBigqueryTableName(const QString &bigquery_table_name) {
    m_bigquery_table_name = bigquery_table_name;
    m_bigquery_table_name_isSet = true;
}

bool OAIGoogleCloudMlV1__RequestLoggingConfig::is_bigquery_table_name_Set() const{
    return m_bigquery_table_name_isSet;
}

bool OAIGoogleCloudMlV1__RequestLoggingConfig::is_bigquery_table_name_Valid() const{
    return m_bigquery_table_name_isValid;
}

double OAIGoogleCloudMlV1__RequestLoggingConfig::getSamplingPercentage() const {
    return m_sampling_percentage;
}
void OAIGoogleCloudMlV1__RequestLoggingConfig::setSamplingPercentage(const double &sampling_percentage) {
    m_sampling_percentage = sampling_percentage;
    m_sampling_percentage_isSet = true;
}

bool OAIGoogleCloudMlV1__RequestLoggingConfig::is_sampling_percentage_Set() const{
    return m_sampling_percentage_isSet;
}

bool OAIGoogleCloudMlV1__RequestLoggingConfig::is_sampling_percentage_Valid() const{
    return m_sampling_percentage_isValid;
}

bool OAIGoogleCloudMlV1__RequestLoggingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudMlV1__RequestLoggingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
