/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudMlV1__TrainingOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudMlV1__TrainingOutput::OAIGoogleCloudMlV1__TrainingOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudMlV1__TrainingOutput::OAIGoogleCloudMlV1__TrainingOutput() {
    this->initializeModel();
}

OAIGoogleCloudMlV1__TrainingOutput::~OAIGoogleCloudMlV1__TrainingOutput() {}

void OAIGoogleCloudMlV1__TrainingOutput::initializeModel() {

    m_built_in_algorithm_output_isSet = false;
    m_built_in_algorithm_output_isValid = false;

    m_completed_trial_count_isSet = false;
    m_completed_trial_count_isValid = false;

    m_consumed_ml_units_isSet = false;
    m_consumed_ml_units_isValid = false;

    m_hyperparameter_metric_tag_isSet = false;
    m_hyperparameter_metric_tag_isValid = false;

    m_is_built_in_algorithm_job_isSet = false;
    m_is_built_in_algorithm_job_isValid = false;

    m_is_hyperparameter_tuning_job_isSet = false;
    m_is_hyperparameter_tuning_job_isValid = false;

    m_trials_isSet = false;
    m_trials_isValid = false;

    m_web_access_uris_isSet = false;
    m_web_access_uris_isValid = false;
}

void OAIGoogleCloudMlV1__TrainingOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudMlV1__TrainingOutput::fromJsonObject(QJsonObject json) {

    m_built_in_algorithm_output_isValid = ::OpenAPI::fromJsonValue(m_built_in_algorithm_output, json[QString("builtInAlgorithmOutput")]);
    m_built_in_algorithm_output_isSet = !json[QString("builtInAlgorithmOutput")].isNull() && m_built_in_algorithm_output_isValid;

    m_completed_trial_count_isValid = ::OpenAPI::fromJsonValue(m_completed_trial_count, json[QString("completedTrialCount")]);
    m_completed_trial_count_isSet = !json[QString("completedTrialCount")].isNull() && m_completed_trial_count_isValid;

    m_consumed_ml_units_isValid = ::OpenAPI::fromJsonValue(m_consumed_ml_units, json[QString("consumedMLUnits")]);
    m_consumed_ml_units_isSet = !json[QString("consumedMLUnits")].isNull() && m_consumed_ml_units_isValid;

    m_hyperparameter_metric_tag_isValid = ::OpenAPI::fromJsonValue(m_hyperparameter_metric_tag, json[QString("hyperparameterMetricTag")]);
    m_hyperparameter_metric_tag_isSet = !json[QString("hyperparameterMetricTag")].isNull() && m_hyperparameter_metric_tag_isValid;

    m_is_built_in_algorithm_job_isValid = ::OpenAPI::fromJsonValue(m_is_built_in_algorithm_job, json[QString("isBuiltInAlgorithmJob")]);
    m_is_built_in_algorithm_job_isSet = !json[QString("isBuiltInAlgorithmJob")].isNull() && m_is_built_in_algorithm_job_isValid;

    m_is_hyperparameter_tuning_job_isValid = ::OpenAPI::fromJsonValue(m_is_hyperparameter_tuning_job, json[QString("isHyperparameterTuningJob")]);
    m_is_hyperparameter_tuning_job_isSet = !json[QString("isHyperparameterTuningJob")].isNull() && m_is_hyperparameter_tuning_job_isValid;

    m_trials_isValid = ::OpenAPI::fromJsonValue(m_trials, json[QString("trials")]);
    m_trials_isSet = !json[QString("trials")].isNull() && m_trials_isValid;

    m_web_access_uris_isValid = ::OpenAPI::fromJsonValue(m_web_access_uris, json[QString("webAccessUris")]);
    m_web_access_uris_isSet = !json[QString("webAccessUris")].isNull() && m_web_access_uris_isValid;
}

QString OAIGoogleCloudMlV1__TrainingOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudMlV1__TrainingOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_built_in_algorithm_output.isSet()) {
        obj.insert(QString("builtInAlgorithmOutput"), ::OpenAPI::toJsonValue(m_built_in_algorithm_output));
    }
    if (m_completed_trial_count_isSet) {
        obj.insert(QString("completedTrialCount"), ::OpenAPI::toJsonValue(m_completed_trial_count));
    }
    if (m_consumed_ml_units_isSet) {
        obj.insert(QString("consumedMLUnits"), ::OpenAPI::toJsonValue(m_consumed_ml_units));
    }
    if (m_hyperparameter_metric_tag_isSet) {
        obj.insert(QString("hyperparameterMetricTag"), ::OpenAPI::toJsonValue(m_hyperparameter_metric_tag));
    }
    if (m_is_built_in_algorithm_job_isSet) {
        obj.insert(QString("isBuiltInAlgorithmJob"), ::OpenAPI::toJsonValue(m_is_built_in_algorithm_job));
    }
    if (m_is_hyperparameter_tuning_job_isSet) {
        obj.insert(QString("isHyperparameterTuningJob"), ::OpenAPI::toJsonValue(m_is_hyperparameter_tuning_job));
    }
    if (m_trials.size() > 0) {
        obj.insert(QString("trials"), ::OpenAPI::toJsonValue(m_trials));
    }
    if (m_web_access_uris.size() > 0) {
        obj.insert(QString("webAccessUris"), ::OpenAPI::toJsonValue(m_web_access_uris));
    }
    return obj;
}

OAIGoogleCloudMlV1__BuiltInAlgorithmOutput OAIGoogleCloudMlV1__TrainingOutput::getBuiltInAlgorithmOutput() const {
    return m_built_in_algorithm_output;
}
void OAIGoogleCloudMlV1__TrainingOutput::setBuiltInAlgorithmOutput(const OAIGoogleCloudMlV1__BuiltInAlgorithmOutput &built_in_algorithm_output) {
    m_built_in_algorithm_output = built_in_algorithm_output;
    m_built_in_algorithm_output_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_built_in_algorithm_output_Set() const{
    return m_built_in_algorithm_output_isSet;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_built_in_algorithm_output_Valid() const{
    return m_built_in_algorithm_output_isValid;
}

QString OAIGoogleCloudMlV1__TrainingOutput::getCompletedTrialCount() const {
    return m_completed_trial_count;
}
void OAIGoogleCloudMlV1__TrainingOutput::setCompletedTrialCount(const QString &completed_trial_count) {
    m_completed_trial_count = completed_trial_count;
    m_completed_trial_count_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_completed_trial_count_Set() const{
    return m_completed_trial_count_isSet;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_completed_trial_count_Valid() const{
    return m_completed_trial_count_isValid;
}

double OAIGoogleCloudMlV1__TrainingOutput::getConsumedMlUnits() const {
    return m_consumed_ml_units;
}
void OAIGoogleCloudMlV1__TrainingOutput::setConsumedMlUnits(const double &consumed_ml_units) {
    m_consumed_ml_units = consumed_ml_units;
    m_consumed_ml_units_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_consumed_ml_units_Set() const{
    return m_consumed_ml_units_isSet;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_consumed_ml_units_Valid() const{
    return m_consumed_ml_units_isValid;
}

QString OAIGoogleCloudMlV1__TrainingOutput::getHyperparameterMetricTag() const {
    return m_hyperparameter_metric_tag;
}
void OAIGoogleCloudMlV1__TrainingOutput::setHyperparameterMetricTag(const QString &hyperparameter_metric_tag) {
    m_hyperparameter_metric_tag = hyperparameter_metric_tag;
    m_hyperparameter_metric_tag_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_hyperparameter_metric_tag_Set() const{
    return m_hyperparameter_metric_tag_isSet;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_hyperparameter_metric_tag_Valid() const{
    return m_hyperparameter_metric_tag_isValid;
}

bool OAIGoogleCloudMlV1__TrainingOutput::isIsBuiltInAlgorithmJob() const {
    return m_is_built_in_algorithm_job;
}
void OAIGoogleCloudMlV1__TrainingOutput::setIsBuiltInAlgorithmJob(const bool &is_built_in_algorithm_job) {
    m_is_built_in_algorithm_job = is_built_in_algorithm_job;
    m_is_built_in_algorithm_job_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_is_built_in_algorithm_job_Set() const{
    return m_is_built_in_algorithm_job_isSet;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_is_built_in_algorithm_job_Valid() const{
    return m_is_built_in_algorithm_job_isValid;
}

bool OAIGoogleCloudMlV1__TrainingOutput::isIsHyperparameterTuningJob() const {
    return m_is_hyperparameter_tuning_job;
}
void OAIGoogleCloudMlV1__TrainingOutput::setIsHyperparameterTuningJob(const bool &is_hyperparameter_tuning_job) {
    m_is_hyperparameter_tuning_job = is_hyperparameter_tuning_job;
    m_is_hyperparameter_tuning_job_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_is_hyperparameter_tuning_job_Set() const{
    return m_is_hyperparameter_tuning_job_isSet;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_is_hyperparameter_tuning_job_Valid() const{
    return m_is_hyperparameter_tuning_job_isValid;
}

QList<OAIGoogleCloudMlV1__HyperparameterOutput> OAIGoogleCloudMlV1__TrainingOutput::getTrials() const {
    return m_trials;
}
void OAIGoogleCloudMlV1__TrainingOutput::setTrials(const QList<OAIGoogleCloudMlV1__HyperparameterOutput> &trials) {
    m_trials = trials;
    m_trials_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_trials_Set() const{
    return m_trials_isSet;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_trials_Valid() const{
    return m_trials_isValid;
}

QMap<QString, QString> OAIGoogleCloudMlV1__TrainingOutput::getWebAccessUris() const {
    return m_web_access_uris;
}
void OAIGoogleCloudMlV1__TrainingOutput::setWebAccessUris(const QMap<QString, QString> &web_access_uris) {
    m_web_access_uris = web_access_uris;
    m_web_access_uris_isSet = true;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_web_access_uris_Set() const{
    return m_web_access_uris_isSet;
}

bool OAIGoogleCloudMlV1__TrainingOutput::is_web_access_uris_Valid() const{
    return m_web_access_uris_isValid;
}

bool OAIGoogleCloudMlV1__TrainingOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_built_in_algorithm_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_trial_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed_ml_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperparameter_metric_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_built_in_algorithm_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hyperparameter_tuning_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_access_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudMlV1__TrainingOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
