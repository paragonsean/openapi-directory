/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudMlV1__SuggestTrialsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudMlV1__SuggestTrialsResponse::OAIGoogleCloudMlV1__SuggestTrialsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudMlV1__SuggestTrialsResponse::OAIGoogleCloudMlV1__SuggestTrialsResponse() {
    this->initializeModel();
}

OAIGoogleCloudMlV1__SuggestTrialsResponse::~OAIGoogleCloudMlV1__SuggestTrialsResponse() {}

void OAIGoogleCloudMlV1__SuggestTrialsResponse::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_study_state_isSet = false;
    m_study_state_isValid = false;

    m_trials_isSet = false;
    m_trials_isValid = false;
}

void OAIGoogleCloudMlV1__SuggestTrialsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudMlV1__SuggestTrialsResponse::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_study_state_isValid = ::OpenAPI::fromJsonValue(m_study_state, json[QString("studyState")]);
    m_study_state_isSet = !json[QString("studyState")].isNull() && m_study_state_isValid;

    m_trials_isValid = ::OpenAPI::fromJsonValue(m_trials, json[QString("trials")]);
    m_trials_isSet = !json[QString("trials")].isNull() && m_trials_isValid;
}

QString OAIGoogleCloudMlV1__SuggestTrialsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudMlV1__SuggestTrialsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_study_state_isSet) {
        obj.insert(QString("studyState"), ::OpenAPI::toJsonValue(m_study_state));
    }
    if (m_trials.size() > 0) {
        obj.insert(QString("trials"), ::OpenAPI::toJsonValue(m_trials));
    }
    return obj;
}

QString OAIGoogleCloudMlV1__SuggestTrialsResponse::getEndTime() const {
    return m_end_time;
}
void OAIGoogleCloudMlV1__SuggestTrialsResponse::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleCloudMlV1__SuggestTrialsResponse::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleCloudMlV1__SuggestTrialsResponse::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIGoogleCloudMlV1__SuggestTrialsResponse::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudMlV1__SuggestTrialsResponse::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudMlV1__SuggestTrialsResponse::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudMlV1__SuggestTrialsResponse::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIGoogleCloudMlV1__SuggestTrialsResponse::getStudyState() const {
    return m_study_state;
}
void OAIGoogleCloudMlV1__SuggestTrialsResponse::setStudyState(const QString &study_state) {
    m_study_state = study_state;
    m_study_state_isSet = true;
}

bool OAIGoogleCloudMlV1__SuggestTrialsResponse::is_study_state_Set() const{
    return m_study_state_isSet;
}

bool OAIGoogleCloudMlV1__SuggestTrialsResponse::is_study_state_Valid() const{
    return m_study_state_isValid;
}

QList<OAIGoogleCloudMlV1__Trial> OAIGoogleCloudMlV1__SuggestTrialsResponse::getTrials() const {
    return m_trials;
}
void OAIGoogleCloudMlV1__SuggestTrialsResponse::setTrials(const QList<OAIGoogleCloudMlV1__Trial> &trials) {
    m_trials = trials;
    m_trials_isSet = true;
}

bool OAIGoogleCloudMlV1__SuggestTrialsResponse::is_trials_Set() const{
    return m_trials_isSet;
}

bool OAIGoogleCloudMlV1__SuggestTrialsResponse::is_trials_Valid() const{
    return m_trials_isValid;
}

bool OAIGoogleCloudMlV1__SuggestTrialsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trials.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudMlV1__SuggestTrialsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
