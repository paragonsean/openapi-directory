/**
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudMlV1__AutoScaling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudMlV1__AutoScaling::OAIGoogleCloudMlV1__AutoScaling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudMlV1__AutoScaling::OAIGoogleCloudMlV1__AutoScaling() {
    this->initializeModel();
}

OAIGoogleCloudMlV1__AutoScaling::~OAIGoogleCloudMlV1__AutoScaling() {}

void OAIGoogleCloudMlV1__AutoScaling::initializeModel() {

    m_max_nodes_isSet = false;
    m_max_nodes_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_min_nodes_isSet = false;
    m_min_nodes_isValid = false;
}

void OAIGoogleCloudMlV1__AutoScaling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudMlV1__AutoScaling::fromJsonObject(QJsonObject json) {

    m_max_nodes_isValid = ::OpenAPI::fromJsonValue(m_max_nodes, json[QString("maxNodes")]);
    m_max_nodes_isSet = !json[QString("maxNodes")].isNull() && m_max_nodes_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_min_nodes_isValid = ::OpenAPI::fromJsonValue(m_min_nodes, json[QString("minNodes")]);
    m_min_nodes_isSet = !json[QString("minNodes")].isNull() && m_min_nodes_isValid;
}

QString OAIGoogleCloudMlV1__AutoScaling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudMlV1__AutoScaling::asJsonObject() const {
    QJsonObject obj;
    if (m_max_nodes_isSet) {
        obj.insert(QString("maxNodes"), ::OpenAPI::toJsonValue(m_max_nodes));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_min_nodes_isSet) {
        obj.insert(QString("minNodes"), ::OpenAPI::toJsonValue(m_min_nodes));
    }
    return obj;
}

qint32 OAIGoogleCloudMlV1__AutoScaling::getMaxNodes() const {
    return m_max_nodes;
}
void OAIGoogleCloudMlV1__AutoScaling::setMaxNodes(const qint32 &max_nodes) {
    m_max_nodes = max_nodes;
    m_max_nodes_isSet = true;
}

bool OAIGoogleCloudMlV1__AutoScaling::is_max_nodes_Set() const{
    return m_max_nodes_isSet;
}

bool OAIGoogleCloudMlV1__AutoScaling::is_max_nodes_Valid() const{
    return m_max_nodes_isValid;
}

QList<OAIGoogleCloudMlV1__MetricSpec> OAIGoogleCloudMlV1__AutoScaling::getMetrics() const {
    return m_metrics;
}
void OAIGoogleCloudMlV1__AutoScaling::setMetrics(const QList<OAIGoogleCloudMlV1__MetricSpec> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIGoogleCloudMlV1__AutoScaling::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIGoogleCloudMlV1__AutoScaling::is_metrics_Valid() const{
    return m_metrics_isValid;
}

qint32 OAIGoogleCloudMlV1__AutoScaling::getMinNodes() const {
    return m_min_nodes;
}
void OAIGoogleCloudMlV1__AutoScaling::setMinNodes(const qint32 &min_nodes) {
    m_min_nodes = min_nodes;
    m_min_nodes_isSet = true;
}

bool OAIGoogleCloudMlV1__AutoScaling::is_min_nodes_Set() const{
    return m_min_nodes_isSet;
}

bool OAIGoogleCloudMlV1__AutoScaling::is_min_nodes_Valid() const{
    return m_min_nodes_isValid;
}

bool OAIGoogleCloudMlV1__AutoScaling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudMlV1__AutoScaling::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
