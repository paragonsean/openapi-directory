/*
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single hyperparameter to optimize.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:13.643536-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudMlV1ParameterSpec {
  public static final String SERIALIZED_NAME_CATEGORICAL_VALUES = "categoricalValues";
  @SerializedName(SERIALIZED_NAME_CATEGORICAL_VALUES)
  private List<String> categoricalValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISCRETE_VALUES = "discreteValues";
  @SerializedName(SERIALIZED_NAME_DISCRETE_VALUES)
  private List<Double> discreteValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Double maxValue;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Double minValue;

  public static final String SERIALIZED_NAME_PARAMETER_NAME = "parameterName";
  @SerializedName(SERIALIZED_NAME_PARAMETER_NAME)
  private String parameterName;

  /**
   * Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., &#x60;UNIT_LINEAR_SCALE&#x60;).
   */
  @JsonAdapter(ScaleTypeEnum.Adapter.class)
  public enum ScaleTypeEnum {
    NONE("NONE"),
    
    UNIT_LINEAR_SCALE("UNIT_LINEAR_SCALE"),
    
    UNIT_LOG_SCALE("UNIT_LOG_SCALE"),
    
    UNIT_REVERSE_LOG_SCALE("UNIT_REVERSE_LOG_SCALE");

    private String value;

    ScaleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScaleTypeEnum fromValue(String value) {
      for (ScaleTypeEnum b : ScaleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScaleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScaleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScaleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScaleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScaleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCALE_TYPE = "scaleType";
  @SerializedName(SERIALIZED_NAME_SCALE_TYPE)
  private ScaleTypeEnum scaleType;

  /**
   * Required. The type of the parameter.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PARAMETER_TYPE_UNSPECIFIED("PARAMETER_TYPE_UNSPECIFIED"),
    
    DOUBLE("DOUBLE"),
    
    INTEGER("INTEGER"),
    
    CATEGORICAL("CATEGORICAL"),
    
    DISCRETE("DISCRETE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public GoogleCloudMlV1ParameterSpec() {
  }

  public GoogleCloudMlV1ParameterSpec categoricalValues(List<String> categoricalValues) {
    this.categoricalValues = categoricalValues;
    return this;
  }

  public GoogleCloudMlV1ParameterSpec addCategoricalValuesItem(String categoricalValuesItem) {
    if (this.categoricalValues == null) {
      this.categoricalValues = new ArrayList<>();
    }
    this.categoricalValues.add(categoricalValuesItem);
    return this;
  }

  /**
   * Required if type is &#x60;CATEGORICAL&#x60;. The list of possible categories.
   * @return categoricalValues
   */
  @javax.annotation.Nullable
  public List<String> getCategoricalValues() {
    return categoricalValues;
  }

  public void setCategoricalValues(List<String> categoricalValues) {
    this.categoricalValues = categoricalValues;
  }


  public GoogleCloudMlV1ParameterSpec discreteValues(List<Double> discreteValues) {
    this.discreteValues = discreteValues;
    return this;
  }

  public GoogleCloudMlV1ParameterSpec addDiscreteValuesItem(Double discreteValuesItem) {
    if (this.discreteValues == null) {
      this.discreteValues = new ArrayList<>();
    }
    this.discreteValues.add(discreteValuesItem);
    return this;
  }

  /**
   * Required if type is &#x60;DISCRETE&#x60;. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.
   * @return discreteValues
   */
  @javax.annotation.Nullable
  public List<Double> getDiscreteValues() {
    return discreteValues;
  }

  public void setDiscreteValues(List<Double> discreteValues) {
    this.discreteValues = discreteValues;
  }


  public GoogleCloudMlV1ParameterSpec maxValue(Double maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * Required if type is &#x60;DOUBLE&#x60; or &#x60;INTEGER&#x60;. This field should be unset if type is &#x60;CATEGORICAL&#x60;. This value should be integers if type is &#x60;INTEGER&#x60;.
   * @return maxValue
   */
  @javax.annotation.Nullable
  public Double getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(Double maxValue) {
    this.maxValue = maxValue;
  }


  public GoogleCloudMlV1ParameterSpec minValue(Double minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * Required if type is &#x60;DOUBLE&#x60; or &#x60;INTEGER&#x60;. This field should be unset if type is &#x60;CATEGORICAL&#x60;. This value should be integers if type is INTEGER.
   * @return minValue
   */
  @javax.annotation.Nullable
  public Double getMinValue() {
    return minValue;
  }

  public void setMinValue(Double minValue) {
    this.minValue = minValue;
  }


  public GoogleCloudMlV1ParameterSpec parameterName(String parameterName) {
    this.parameterName = parameterName;
    return this;
  }

  /**
   * Required. The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., \&quot;learning_rate\&quot;.
   * @return parameterName
   */
  @javax.annotation.Nullable
  public String getParameterName() {
    return parameterName;
  }

  public void setParameterName(String parameterName) {
    this.parameterName = parameterName;
  }


  public GoogleCloudMlV1ParameterSpec scaleType(ScaleTypeEnum scaleType) {
    this.scaleType = scaleType;
    return this;
  }

  /**
   * Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., &#x60;UNIT_LINEAR_SCALE&#x60;).
   * @return scaleType
   */
  @javax.annotation.Nullable
  public ScaleTypeEnum getScaleType() {
    return scaleType;
  }

  public void setScaleType(ScaleTypeEnum scaleType) {
    this.scaleType = scaleType;
  }


  public GoogleCloudMlV1ParameterSpec type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Required. The type of the parameter.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudMlV1ParameterSpec googleCloudMlV1ParameterSpec = (GoogleCloudMlV1ParameterSpec) o;
    return Objects.equals(this.categoricalValues, googleCloudMlV1ParameterSpec.categoricalValues) &&
        Objects.equals(this.discreteValues, googleCloudMlV1ParameterSpec.discreteValues) &&
        Objects.equals(this.maxValue, googleCloudMlV1ParameterSpec.maxValue) &&
        Objects.equals(this.minValue, googleCloudMlV1ParameterSpec.minValue) &&
        Objects.equals(this.parameterName, googleCloudMlV1ParameterSpec.parameterName) &&
        Objects.equals(this.scaleType, googleCloudMlV1ParameterSpec.scaleType) &&
        Objects.equals(this.type, googleCloudMlV1ParameterSpec.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoricalValues, discreteValues, maxValue, minValue, parameterName, scaleType, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudMlV1ParameterSpec {\n");
    sb.append("    categoricalValues: ").append(toIndentedString(categoricalValues)).append("\n");
    sb.append("    discreteValues: ").append(toIndentedString(discreteValues)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    parameterName: ").append(toIndentedString(parameterName)).append("\n");
    sb.append("    scaleType: ").append(toIndentedString(scaleType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoricalValues");
    openapiFields.add("discreteValues");
    openapiFields.add("maxValue");
    openapiFields.add("minValue");
    openapiFields.add("parameterName");
    openapiFields.add("scaleType");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudMlV1ParameterSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudMlV1ParameterSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudMlV1ParameterSpec is not found in the empty JSON string", GoogleCloudMlV1ParameterSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudMlV1ParameterSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudMlV1ParameterSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("categoricalValues") != null && !jsonObj.get("categoricalValues").isJsonNull() && !jsonObj.get("categoricalValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoricalValues` to be an array in the JSON string but got `%s`", jsonObj.get("categoricalValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("discreteValues") != null && !jsonObj.get("discreteValues").isJsonNull() && !jsonObj.get("discreteValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `discreteValues` to be an array in the JSON string but got `%s`", jsonObj.get("discreteValues").toString()));
      }
      if ((jsonObj.get("parameterName") != null && !jsonObj.get("parameterName").isJsonNull()) && !jsonObj.get("parameterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameterName").toString()));
      }
      if ((jsonObj.get("scaleType") != null && !jsonObj.get("scaleType").isJsonNull()) && !jsonObj.get("scaleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scaleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scaleType").toString()));
      }
      // validate the optional field `scaleType`
      if (jsonObj.get("scaleType") != null && !jsonObj.get("scaleType").isJsonNull()) {
        ScaleTypeEnum.validateJsonElement(jsonObj.get("scaleType"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudMlV1ParameterSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudMlV1ParameterSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudMlV1ParameterSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudMlV1ParameterSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudMlV1ParameterSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudMlV1ParameterSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudMlV1ParameterSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudMlV1ParameterSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudMlV1ParameterSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudMlV1ParameterSpec
   */
  public static GoogleCloudMlV1ParameterSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudMlV1ParameterSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudMlV1ParameterSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

