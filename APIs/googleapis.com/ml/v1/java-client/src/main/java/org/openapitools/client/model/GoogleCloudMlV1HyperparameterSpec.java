/*
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudMlV1ParameterSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a set of hyperparameters to optimize.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:13.643536-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudMlV1HyperparameterSpec {
  /**
   * Optional. The search algorithm specified for the hyperparameter tuning job. Uses the default AI Platform hyperparameter tuning algorithm if unspecified.
   */
  @JsonAdapter(AlgorithmEnum.Adapter.class)
  public enum AlgorithmEnum {
    ALGORITHM_UNSPECIFIED("ALGORITHM_UNSPECIFIED"),
    
    GRID_SEARCH("GRID_SEARCH"),
    
    RANDOM_SEARCH("RANDOM_SEARCH");

    private String value;

    AlgorithmEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlgorithmEnum fromValue(String value) {
      for (AlgorithmEnum b : AlgorithmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlgorithmEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlgorithmEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlgorithmEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlgorithmEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlgorithmEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  private AlgorithmEnum algorithm;

  public static final String SERIALIZED_NAME_ENABLE_TRIAL_EARLY_STOPPING = "enableTrialEarlyStopping";
  @SerializedName(SERIALIZED_NAME_ENABLE_TRIAL_EARLY_STOPPING)
  private Boolean enableTrialEarlyStopping;

  /**
   * Required. The type of goal to use for tuning. Available types are &#x60;MAXIMIZE&#x60; and &#x60;MINIMIZE&#x60;. Defaults to &#x60;MAXIMIZE&#x60;.
   */
  @JsonAdapter(GoalEnum.Adapter.class)
  public enum GoalEnum {
    GOAL_TYPE_UNSPECIFIED("GOAL_TYPE_UNSPECIFIED"),
    
    MAXIMIZE("MAXIMIZE"),
    
    MINIMIZE("MINIMIZE");

    private String value;

    GoalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GoalEnum fromValue(String value) {
      for (GoalEnum b : GoalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GoalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GoalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GoalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GoalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GoalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GOAL = "goal";
  @SerializedName(SERIALIZED_NAME_GOAL)
  private GoalEnum goal;

  public static final String SERIALIZED_NAME_HYPERPARAMETER_METRIC_TAG = "hyperparameterMetricTag";
  @SerializedName(SERIALIZED_NAME_HYPERPARAMETER_METRIC_TAG)
  private String hyperparameterMetricTag;

  public static final String SERIALIZED_NAME_MAX_FAILED_TRIALS = "maxFailedTrials";
  @SerializedName(SERIALIZED_NAME_MAX_FAILED_TRIALS)
  private Integer maxFailedTrials;

  public static final String SERIALIZED_NAME_MAX_PARALLEL_TRIALS = "maxParallelTrials";
  @SerializedName(SERIALIZED_NAME_MAX_PARALLEL_TRIALS)
  private Integer maxParallelTrials;

  public static final String SERIALIZED_NAME_MAX_TRIALS = "maxTrials";
  @SerializedName(SERIALIZED_NAME_MAX_TRIALS)
  private Integer maxTrials;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private List<GoogleCloudMlV1ParameterSpec> params = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESUME_PREVIOUS_JOB_ID = "resumePreviousJobId";
  @SerializedName(SERIALIZED_NAME_RESUME_PREVIOUS_JOB_ID)
  private String resumePreviousJobId;

  public GoogleCloudMlV1HyperparameterSpec() {
  }

  public GoogleCloudMlV1HyperparameterSpec algorithm(AlgorithmEnum algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  /**
   * Optional. The search algorithm specified for the hyperparameter tuning job. Uses the default AI Platform hyperparameter tuning algorithm if unspecified.
   * @return algorithm
   */
  @javax.annotation.Nullable
  public AlgorithmEnum getAlgorithm() {
    return algorithm;
  }

  public void setAlgorithm(AlgorithmEnum algorithm) {
    this.algorithm = algorithm;
  }


  public GoogleCloudMlV1HyperparameterSpec enableTrialEarlyStopping(Boolean enableTrialEarlyStopping) {
    this.enableTrialEarlyStopping = enableTrialEarlyStopping;
    return this;
  }

  /**
   * Optional. Indicates if the hyperparameter tuning job enables auto trial early stopping.
   * @return enableTrialEarlyStopping
   */
  @javax.annotation.Nullable
  public Boolean getEnableTrialEarlyStopping() {
    return enableTrialEarlyStopping;
  }

  public void setEnableTrialEarlyStopping(Boolean enableTrialEarlyStopping) {
    this.enableTrialEarlyStopping = enableTrialEarlyStopping;
  }


  public GoogleCloudMlV1HyperparameterSpec goal(GoalEnum goal) {
    this.goal = goal;
    return this;
  }

  /**
   * Required. The type of goal to use for tuning. Available types are &#x60;MAXIMIZE&#x60; and &#x60;MINIMIZE&#x60;. Defaults to &#x60;MAXIMIZE&#x60;.
   * @return goal
   */
  @javax.annotation.Nullable
  public GoalEnum getGoal() {
    return goal;
  }

  public void setGoal(GoalEnum goal) {
    this.goal = goal;
  }


  public GoogleCloudMlV1HyperparameterSpec hyperparameterMetricTag(String hyperparameterMetricTag) {
    this.hyperparameterMetricTag = hyperparameterMetricTag;
    return this;
  }

  /**
   * Optional. The TensorFlow summary tag name to use for optimizing trials. For current versions of TensorFlow, this tag name should exactly match what is shown in TensorBoard, including all scopes. For versions of TensorFlow prior to 0.12, this should be only the tag passed to tf.Summary. By default, \&quot;training/hptuning/metric\&quot; will be used.
   * @return hyperparameterMetricTag
   */
  @javax.annotation.Nullable
  public String getHyperparameterMetricTag() {
    return hyperparameterMetricTag;
  }

  public void setHyperparameterMetricTag(String hyperparameterMetricTag) {
    this.hyperparameterMetricTag = hyperparameterMetricTag;
  }


  public GoogleCloudMlV1HyperparameterSpec maxFailedTrials(Integer maxFailedTrials) {
    this.maxFailedTrials = maxFailedTrials;
    return this;
  }

  /**
   * Optional. The number of failed trials that need to be seen before failing the hyperparameter tuning job. You can specify this field to override the default failing criteria for AI Platform hyperparameter tuning jobs. Defaults to zero, which means the service decides when a hyperparameter job should fail.
   * @return maxFailedTrials
   */
  @javax.annotation.Nullable
  public Integer getMaxFailedTrials() {
    return maxFailedTrials;
  }

  public void setMaxFailedTrials(Integer maxFailedTrials) {
    this.maxFailedTrials = maxFailedTrials;
  }


  public GoogleCloudMlV1HyperparameterSpec maxParallelTrials(Integer maxParallelTrials) {
    this.maxParallelTrials = maxParallelTrials;
    return this;
  }

  /**
   * Optional. The number of training trials to run concurrently. You can reduce the time it takes to perform hyperparameter tuning by adding trials in parallel. However, each trail only benefits from the information gained in completed trials. That means that a trial does not get access to the results of trials running at the same time, which could reduce the quality of the overall optimization. Each trial will use the same scale tier and machine types. Defaults to one.
   * @return maxParallelTrials
   */
  @javax.annotation.Nullable
  public Integer getMaxParallelTrials() {
    return maxParallelTrials;
  }

  public void setMaxParallelTrials(Integer maxParallelTrials) {
    this.maxParallelTrials = maxParallelTrials;
  }


  public GoogleCloudMlV1HyperparameterSpec maxTrials(Integer maxTrials) {
    this.maxTrials = maxTrials;
    return this;
  }

  /**
   * Optional. How many training trials should be attempted to optimize the specified hyperparameters. Defaults to one.
   * @return maxTrials
   */
  @javax.annotation.Nullable
  public Integer getMaxTrials() {
    return maxTrials;
  }

  public void setMaxTrials(Integer maxTrials) {
    this.maxTrials = maxTrials;
  }


  public GoogleCloudMlV1HyperparameterSpec params(List<GoogleCloudMlV1ParameterSpec> params) {
    this.params = params;
    return this;
  }

  public GoogleCloudMlV1HyperparameterSpec addParamsItem(GoogleCloudMlV1ParameterSpec paramsItem) {
    if (this.params == null) {
      this.params = new ArrayList<>();
    }
    this.params.add(paramsItem);
    return this;
  }

  /**
   * Required. The set of parameters to tune.
   * @return params
   */
  @javax.annotation.Nullable
  public List<GoogleCloudMlV1ParameterSpec> getParams() {
    return params;
  }

  public void setParams(List<GoogleCloudMlV1ParameterSpec> params) {
    this.params = params;
  }


  public GoogleCloudMlV1HyperparameterSpec resumePreviousJobId(String resumePreviousJobId) {
    this.resumePreviousJobId = resumePreviousJobId;
    return this;
  }

  /**
   * Optional. The prior hyperparameter tuning job id that users hope to continue with. The job id will be used to find the corresponding vizier study guid and resume the study.
   * @return resumePreviousJobId
   */
  @javax.annotation.Nullable
  public String getResumePreviousJobId() {
    return resumePreviousJobId;
  }

  public void setResumePreviousJobId(String resumePreviousJobId) {
    this.resumePreviousJobId = resumePreviousJobId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudMlV1HyperparameterSpec googleCloudMlV1HyperparameterSpec = (GoogleCloudMlV1HyperparameterSpec) o;
    return Objects.equals(this.algorithm, googleCloudMlV1HyperparameterSpec.algorithm) &&
        Objects.equals(this.enableTrialEarlyStopping, googleCloudMlV1HyperparameterSpec.enableTrialEarlyStopping) &&
        Objects.equals(this.goal, googleCloudMlV1HyperparameterSpec.goal) &&
        Objects.equals(this.hyperparameterMetricTag, googleCloudMlV1HyperparameterSpec.hyperparameterMetricTag) &&
        Objects.equals(this.maxFailedTrials, googleCloudMlV1HyperparameterSpec.maxFailedTrials) &&
        Objects.equals(this.maxParallelTrials, googleCloudMlV1HyperparameterSpec.maxParallelTrials) &&
        Objects.equals(this.maxTrials, googleCloudMlV1HyperparameterSpec.maxTrials) &&
        Objects.equals(this.params, googleCloudMlV1HyperparameterSpec.params) &&
        Objects.equals(this.resumePreviousJobId, googleCloudMlV1HyperparameterSpec.resumePreviousJobId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, enableTrialEarlyStopping, goal, hyperparameterMetricTag, maxFailedTrials, maxParallelTrials, maxTrials, params, resumePreviousJobId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudMlV1HyperparameterSpec {\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    enableTrialEarlyStopping: ").append(toIndentedString(enableTrialEarlyStopping)).append("\n");
    sb.append("    goal: ").append(toIndentedString(goal)).append("\n");
    sb.append("    hyperparameterMetricTag: ").append(toIndentedString(hyperparameterMetricTag)).append("\n");
    sb.append("    maxFailedTrials: ").append(toIndentedString(maxFailedTrials)).append("\n");
    sb.append("    maxParallelTrials: ").append(toIndentedString(maxParallelTrials)).append("\n");
    sb.append("    maxTrials: ").append(toIndentedString(maxTrials)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    resumePreviousJobId: ").append(toIndentedString(resumePreviousJobId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algorithm");
    openapiFields.add("enableTrialEarlyStopping");
    openapiFields.add("goal");
    openapiFields.add("hyperparameterMetricTag");
    openapiFields.add("maxFailedTrials");
    openapiFields.add("maxParallelTrials");
    openapiFields.add("maxTrials");
    openapiFields.add("params");
    openapiFields.add("resumePreviousJobId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudMlV1HyperparameterSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudMlV1HyperparameterSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudMlV1HyperparameterSpec is not found in the empty JSON string", GoogleCloudMlV1HyperparameterSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudMlV1HyperparameterSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudMlV1HyperparameterSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("algorithm") != null && !jsonObj.get("algorithm").isJsonNull()) && !jsonObj.get("algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithm").toString()));
      }
      // validate the optional field `algorithm`
      if (jsonObj.get("algorithm") != null && !jsonObj.get("algorithm").isJsonNull()) {
        AlgorithmEnum.validateJsonElement(jsonObj.get("algorithm"));
      }
      if ((jsonObj.get("goal") != null && !jsonObj.get("goal").isJsonNull()) && !jsonObj.get("goal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goal").toString()));
      }
      // validate the optional field `goal`
      if (jsonObj.get("goal") != null && !jsonObj.get("goal").isJsonNull()) {
        GoalEnum.validateJsonElement(jsonObj.get("goal"));
      }
      if ((jsonObj.get("hyperparameterMetricTag") != null && !jsonObj.get("hyperparameterMetricTag").isJsonNull()) && !jsonObj.get("hyperparameterMetricTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperparameterMetricTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperparameterMetricTag").toString()));
      }
      if (jsonObj.get("params") != null && !jsonObj.get("params").isJsonNull()) {
        JsonArray jsonArrayparams = jsonObj.getAsJsonArray("params");
        if (jsonArrayparams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("params").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `params` to be an array in the JSON string but got `%s`", jsonObj.get("params").toString()));
          }

          // validate the optional field `params` (array)
          for (int i = 0; i < jsonArrayparams.size(); i++) {
            GoogleCloudMlV1ParameterSpec.validateJsonElement(jsonArrayparams.get(i));
          };
        }
      }
      if ((jsonObj.get("resumePreviousJobId") != null && !jsonObj.get("resumePreviousJobId").isJsonNull()) && !jsonObj.get("resumePreviousJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resumePreviousJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resumePreviousJobId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudMlV1HyperparameterSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudMlV1HyperparameterSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudMlV1HyperparameterSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudMlV1HyperparameterSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudMlV1HyperparameterSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudMlV1HyperparameterSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudMlV1HyperparameterSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudMlV1HyperparameterSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudMlV1HyperparameterSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudMlV1HyperparameterSpec
   */
  public static GoogleCloudMlV1HyperparameterSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudMlV1HyperparameterSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudMlV1HyperparameterSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

