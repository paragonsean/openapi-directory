/*
 * AI Platform Training & Prediction API
 * An API to enable creating and using machine learning models.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents input parameters for a prediction job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:13.643536-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudMlV1PredictionInput {
  public static final String SERIALIZED_NAME_BATCH_SIZE = "batchSize";
  @SerializedName(SERIALIZED_NAME_BATCH_SIZE)
  private String batchSize;

  /**
   * Required. The format of the input data files.
   */
  @JsonAdapter(DataFormatEnum.Adapter.class)
  public enum DataFormatEnum {
    DATA_FORMAT_UNSPECIFIED("DATA_FORMAT_UNSPECIFIED"),
    
    JSON("JSON"),
    
    TEXT("TEXT"),
    
    TF_RECORD("TF_RECORD"),
    
    TF_RECORD_GZIP("TF_RECORD_GZIP"),
    
    CSV("CSV");

    private String value;

    DataFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataFormatEnum fromValue(String value) {
      for (DataFormatEnum b : DataFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_FORMAT = "dataFormat";
  @SerializedName(SERIALIZED_NAME_DATA_FORMAT)
  private DataFormatEnum dataFormat;

  public static final String SERIALIZED_NAME_INPUT_PATHS = "inputPaths";
  @SerializedName(SERIALIZED_NAME_INPUT_PATHS)
  private List<String> inputPaths = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_WORKER_COUNT = "maxWorkerCount";
  @SerializedName(SERIALIZED_NAME_MAX_WORKER_COUNT)
  private String maxWorkerCount;

  public static final String SERIALIZED_NAME_MODEL_NAME = "modelName";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  /**
   * Optional. Format of the output data files, defaults to JSON.
   */
  @JsonAdapter(OutputDataFormatEnum.Adapter.class)
  public enum OutputDataFormatEnum {
    DATA_FORMAT_UNSPECIFIED("DATA_FORMAT_UNSPECIFIED"),
    
    JSON("JSON"),
    
    TEXT("TEXT"),
    
    TF_RECORD("TF_RECORD"),
    
    TF_RECORD_GZIP("TF_RECORD_GZIP"),
    
    CSV("CSV");

    private String value;

    OutputDataFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutputDataFormatEnum fromValue(String value) {
      for (OutputDataFormatEnum b : OutputDataFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutputDataFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutputDataFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutputDataFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutputDataFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutputDataFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTPUT_DATA_FORMAT = "outputDataFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DATA_FORMAT)
  private OutputDataFormatEnum outputDataFormat;

  public static final String SERIALIZED_NAME_OUTPUT_PATH = "outputPath";
  @SerializedName(SERIALIZED_NAME_OUTPUT_PATH)
  private String outputPath;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_RUNTIME_VERSION = "runtimeVersion";
  @SerializedName(SERIALIZED_NAME_RUNTIME_VERSION)
  private String runtimeVersion;

  public static final String SERIALIZED_NAME_SIGNATURE_NAME = "signatureName";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_NAME)
  private String signatureName;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_VERSION_NAME = "versionName";
  @SerializedName(SERIALIZED_NAME_VERSION_NAME)
  private String versionName;

  public GoogleCloudMlV1PredictionInput() {
  }

  public GoogleCloudMlV1PredictionInput batchSize(String batchSize) {
    this.batchSize = batchSize;
    return this;
  }

  /**
   * Optional. Number of records per batch, defaults to 64. The service will buffer batch_size number of records in memory before invoking one Tensorflow prediction call internally. So take the record size and memory available into consideration when setting this parameter.
   * @return batchSize
   */
  @javax.annotation.Nullable
  public String getBatchSize() {
    return batchSize;
  }

  public void setBatchSize(String batchSize) {
    this.batchSize = batchSize;
  }


  public GoogleCloudMlV1PredictionInput dataFormat(DataFormatEnum dataFormat) {
    this.dataFormat = dataFormat;
    return this;
  }

  /**
   * Required. The format of the input data files.
   * @return dataFormat
   */
  @javax.annotation.Nullable
  public DataFormatEnum getDataFormat() {
    return dataFormat;
  }

  public void setDataFormat(DataFormatEnum dataFormat) {
    this.dataFormat = dataFormat;
  }


  public GoogleCloudMlV1PredictionInput inputPaths(List<String> inputPaths) {
    this.inputPaths = inputPaths;
    return this;
  }

  public GoogleCloudMlV1PredictionInput addInputPathsItem(String inputPathsItem) {
    if (this.inputPaths == null) {
      this.inputPaths = new ArrayList<>();
    }
    this.inputPaths.add(inputPathsItem);
    return this;
  }

  /**
   * Required. The Cloud Storage location of the input data files. May contain wildcards.
   * @return inputPaths
   */
  @javax.annotation.Nullable
  public List<String> getInputPaths() {
    return inputPaths;
  }

  public void setInputPaths(List<String> inputPaths) {
    this.inputPaths = inputPaths;
  }


  public GoogleCloudMlV1PredictionInput maxWorkerCount(String maxWorkerCount) {
    this.maxWorkerCount = maxWorkerCount;
    return this;
  }

  /**
   * Optional. The maximum number of workers to be used for parallel processing. Defaults to 10 if not specified.
   * @return maxWorkerCount
   */
  @javax.annotation.Nullable
  public String getMaxWorkerCount() {
    return maxWorkerCount;
  }

  public void setMaxWorkerCount(String maxWorkerCount) {
    this.maxWorkerCount = maxWorkerCount;
  }


  public GoogleCloudMlV1PredictionInput modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

  /**
   * Use this field if you want to use the default version for the specified model. The string must use the following format: &#x60;\&quot;projects/YOUR_PROJECT/models/YOUR_MODEL\&quot;&#x60;
   * @return modelName
   */
  @javax.annotation.Nullable
  public String getModelName() {
    return modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public GoogleCloudMlV1PredictionInput outputDataFormat(OutputDataFormatEnum outputDataFormat) {
    this.outputDataFormat = outputDataFormat;
    return this;
  }

  /**
   * Optional. Format of the output data files, defaults to JSON.
   * @return outputDataFormat
   */
  @javax.annotation.Nullable
  public OutputDataFormatEnum getOutputDataFormat() {
    return outputDataFormat;
  }

  public void setOutputDataFormat(OutputDataFormatEnum outputDataFormat) {
    this.outputDataFormat = outputDataFormat;
  }


  public GoogleCloudMlV1PredictionInput outputPath(String outputPath) {
    this.outputPath = outputPath;
    return this;
  }

  /**
   * Required. The output Google Cloud Storage location.
   * @return outputPath
   */
  @javax.annotation.Nullable
  public String getOutputPath() {
    return outputPath;
  }

  public void setOutputPath(String outputPath) {
    this.outputPath = outputPath;
  }


  public GoogleCloudMlV1PredictionInput region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Required. The Google Compute Engine region to run the prediction job in. See the available regions for AI Platform services.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public GoogleCloudMlV1PredictionInput runtimeVersion(String runtimeVersion) {
    this.runtimeVersion = runtimeVersion;
    return this;
  }

  /**
   * Optional. The AI Platform runtime version to use for this batch prediction. If not set, AI Platform will pick the runtime version used during the CreateVersion request for this model version, or choose the latest stable version when model version information is not available such as when the model is specified by uri.
   * @return runtimeVersion
   */
  @javax.annotation.Nullable
  public String getRuntimeVersion() {
    return runtimeVersion;
  }

  public void setRuntimeVersion(String runtimeVersion) {
    this.runtimeVersion = runtimeVersion;
  }


  public GoogleCloudMlV1PredictionInput signatureName(String signatureName) {
    this.signatureName = signatureName;
    return this;
  }

  /**
   * Optional. The name of the signature defined in the SavedModel to use for this job. Please refer to [SavedModel](https://tensorflow.github.io/serving/serving_basic.html) for information about how to use signatures. Defaults to [DEFAULT_SERVING_SIGNATURE_DEF_KEY](https://www.tensorflow.org/api_docs/python/tf/saved_model/signature_constants) , which is \&quot;serving_default\&quot;.
   * @return signatureName
   */
  @javax.annotation.Nullable
  public String getSignatureName() {
    return signatureName;
  }

  public void setSignatureName(String signatureName) {
    this.signatureName = signatureName;
  }


  public GoogleCloudMlV1PredictionInput uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Use this field if you want to specify a Google Cloud Storage path for the model to use.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public GoogleCloudMlV1PredictionInput versionName(String versionName) {
    this.versionName = versionName;
    return this;
  }

  /**
   * Use this field if you want to specify a version of the model to use. The string is formatted the same way as &#x60;model_version&#x60;, with the addition of the version information: &#x60;\&quot;projects/YOUR_PROJECT/models/YOUR_MODEL/versions/YOUR_VERSION\&quot;&#x60;
   * @return versionName
   */
  @javax.annotation.Nullable
  public String getVersionName() {
    return versionName;
  }

  public void setVersionName(String versionName) {
    this.versionName = versionName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudMlV1PredictionInput googleCloudMlV1PredictionInput = (GoogleCloudMlV1PredictionInput) o;
    return Objects.equals(this.batchSize, googleCloudMlV1PredictionInput.batchSize) &&
        Objects.equals(this.dataFormat, googleCloudMlV1PredictionInput.dataFormat) &&
        Objects.equals(this.inputPaths, googleCloudMlV1PredictionInput.inputPaths) &&
        Objects.equals(this.maxWorkerCount, googleCloudMlV1PredictionInput.maxWorkerCount) &&
        Objects.equals(this.modelName, googleCloudMlV1PredictionInput.modelName) &&
        Objects.equals(this.outputDataFormat, googleCloudMlV1PredictionInput.outputDataFormat) &&
        Objects.equals(this.outputPath, googleCloudMlV1PredictionInput.outputPath) &&
        Objects.equals(this.region, googleCloudMlV1PredictionInput.region) &&
        Objects.equals(this.runtimeVersion, googleCloudMlV1PredictionInput.runtimeVersion) &&
        Objects.equals(this.signatureName, googleCloudMlV1PredictionInput.signatureName) &&
        Objects.equals(this.uri, googleCloudMlV1PredictionInput.uri) &&
        Objects.equals(this.versionName, googleCloudMlV1PredictionInput.versionName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchSize, dataFormat, inputPaths, maxWorkerCount, modelName, outputDataFormat, outputPath, region, runtimeVersion, signatureName, uri, versionName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudMlV1PredictionInput {\n");
    sb.append("    batchSize: ").append(toIndentedString(batchSize)).append("\n");
    sb.append("    dataFormat: ").append(toIndentedString(dataFormat)).append("\n");
    sb.append("    inputPaths: ").append(toIndentedString(inputPaths)).append("\n");
    sb.append("    maxWorkerCount: ").append(toIndentedString(maxWorkerCount)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    outputDataFormat: ").append(toIndentedString(outputDataFormat)).append("\n");
    sb.append("    outputPath: ").append(toIndentedString(outputPath)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    runtimeVersion: ").append(toIndentedString(runtimeVersion)).append("\n");
    sb.append("    signatureName: ").append(toIndentedString(signatureName)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    versionName: ").append(toIndentedString(versionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batchSize");
    openapiFields.add("dataFormat");
    openapiFields.add("inputPaths");
    openapiFields.add("maxWorkerCount");
    openapiFields.add("modelName");
    openapiFields.add("outputDataFormat");
    openapiFields.add("outputPath");
    openapiFields.add("region");
    openapiFields.add("runtimeVersion");
    openapiFields.add("signatureName");
    openapiFields.add("uri");
    openapiFields.add("versionName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudMlV1PredictionInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudMlV1PredictionInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudMlV1PredictionInput is not found in the empty JSON string", GoogleCloudMlV1PredictionInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudMlV1PredictionInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudMlV1PredictionInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("batchSize") != null && !jsonObj.get("batchSize").isJsonNull()) && !jsonObj.get("batchSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchSize").toString()));
      }
      if ((jsonObj.get("dataFormat") != null && !jsonObj.get("dataFormat").isJsonNull()) && !jsonObj.get("dataFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataFormat").toString()));
      }
      // validate the optional field `dataFormat`
      if (jsonObj.get("dataFormat") != null && !jsonObj.get("dataFormat").isJsonNull()) {
        DataFormatEnum.validateJsonElement(jsonObj.get("dataFormat"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inputPaths") != null && !jsonObj.get("inputPaths").isJsonNull() && !jsonObj.get("inputPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputPaths` to be an array in the JSON string but got `%s`", jsonObj.get("inputPaths").toString()));
      }
      if ((jsonObj.get("maxWorkerCount") != null && !jsonObj.get("maxWorkerCount").isJsonNull()) && !jsonObj.get("maxWorkerCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxWorkerCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxWorkerCount").toString()));
      }
      if ((jsonObj.get("modelName") != null && !jsonObj.get("modelName").isJsonNull()) && !jsonObj.get("modelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelName").toString()));
      }
      if ((jsonObj.get("outputDataFormat") != null && !jsonObj.get("outputDataFormat").isJsonNull()) && !jsonObj.get("outputDataFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputDataFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputDataFormat").toString()));
      }
      // validate the optional field `outputDataFormat`
      if (jsonObj.get("outputDataFormat") != null && !jsonObj.get("outputDataFormat").isJsonNull()) {
        OutputDataFormatEnum.validateJsonElement(jsonObj.get("outputDataFormat"));
      }
      if ((jsonObj.get("outputPath") != null && !jsonObj.get("outputPath").isJsonNull()) && !jsonObj.get("outputPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputPath").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("runtimeVersion") != null && !jsonObj.get("runtimeVersion").isJsonNull()) && !jsonObj.get("runtimeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtimeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runtimeVersion").toString()));
      }
      if ((jsonObj.get("signatureName") != null && !jsonObj.get("signatureName").isJsonNull()) && !jsonObj.get("signatureName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatureName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatureName").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("versionName") != null && !jsonObj.get("versionName").isJsonNull()) && !jsonObj.get("versionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudMlV1PredictionInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudMlV1PredictionInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudMlV1PredictionInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudMlV1PredictionInput.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudMlV1PredictionInput>() {
           @Override
           public void write(JsonWriter out, GoogleCloudMlV1PredictionInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudMlV1PredictionInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudMlV1PredictionInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudMlV1PredictionInput
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudMlV1PredictionInput
   */
  public static GoogleCloudMlV1PredictionInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudMlV1PredictionInput.class);
  }

  /**
   * Convert an instance of GoogleCloudMlV1PredictionInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

