/*
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.RestoreConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents both a request to Restore some portion of a Backup into a target GKE cluster and a record of the restore operation itself. Next id: 20
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:31.365638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Restore {
  public static final String SERIALIZED_NAME_BACKUP = "backup";
  @SerializedName(SERIALIZED_NAME_BACKUP)
  private String backup;

  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_COMPLETE_TIME = "completeTime";
  @SerializedName(SERIALIZED_NAME_COMPLETE_TIME)
  private String completeTime;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCES_EXCLUDED_COUNT = "resourcesExcludedCount";
  @SerializedName(SERIALIZED_NAME_RESOURCES_EXCLUDED_COUNT)
  private Integer resourcesExcludedCount;

  public static final String SERIALIZED_NAME_RESOURCES_FAILED_COUNT = "resourcesFailedCount";
  @SerializedName(SERIALIZED_NAME_RESOURCES_FAILED_COUNT)
  private Integer resourcesFailedCount;

  public static final String SERIALIZED_NAME_RESOURCES_RESTORED_COUNT = "resourcesRestoredCount";
  @SerializedName(SERIALIZED_NAME_RESOURCES_RESTORED_COUNT)
  private Integer resourcesRestoredCount;

  public static final String SERIALIZED_NAME_RESTORE_CONFIG = "restoreConfig";
  @SerializedName(SERIALIZED_NAME_RESTORE_CONFIG)
  private RestoreConfig restoreConfig;

  /**
   * Output only. The current state of the Restore.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    DELETING("DELETING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_REASON = "stateReason";
  @SerializedName(SERIALIZED_NAME_STATE_REASON)
  private String stateReason;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VOLUMES_RESTORED_COUNT = "volumesRestoredCount";
  @SerializedName(SERIALIZED_NAME_VOLUMES_RESTORED_COUNT)
  private Integer volumesRestoredCount;

  public Restore() {
  }

  public Restore(
     String cluster, 
     String completeTime, 
     String createTime, 
     String etag, 
     String name, 
     Integer resourcesExcludedCount, 
     Integer resourcesFailedCount, 
     Integer resourcesRestoredCount, 
     StateEnum state, 
     String stateReason, 
     String uid, 
     String updateTime, 
     Integer volumesRestoredCount
  ) {
    this();
    this.cluster = cluster;
    this.completeTime = completeTime;
    this.createTime = createTime;
    this.etag = etag;
    this.name = name;
    this.resourcesExcludedCount = resourcesExcludedCount;
    this.resourcesFailedCount = resourcesFailedCount;
    this.resourcesRestoredCount = resourcesRestoredCount;
    this.state = state;
    this.stateReason = stateReason;
    this.uid = uid;
    this.updateTime = updateTime;
    this.volumesRestoredCount = volumesRestoredCount;
  }

  public Restore backup(String backup) {
    this.backup = backup;
    return this;
  }

  /**
   * Required. Immutable. A reference to the Backup used as the source from which this Restore will restore. Note that this Backup must be a sub-resource of the RestorePlan&#39;s backup_plan. Format: &#x60;projects/_*_/locations/_*_/backupPlans/_*_/backups/_*&#x60;.
   * @return backup
   */
  @javax.annotation.Nullable
  public String getBackup() {
    return backup;
  }

  public void setBackup(String backup) {
    this.backup = backup;
  }


  /**
   * Output only. The target cluster into which this Restore will restore data. Valid formats: - &#x60;projects/_*_/locations/_*_/clusters/_*&#x60; - &#x60;projects/_*_/zones/_*_/clusters/_*&#x60; Inherited from parent RestorePlan&#39;s cluster value.
   * @return cluster
   */
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }



  /**
   * Output only. Timestamp of when the restore operation completed.
   * @return completeTime
   */
  @javax.annotation.Nullable
  public String getCompleteTime() {
    return completeTime;
  }



  /**
   * Output only. The timestamp when this Restore resource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Restore description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User specified descriptive string for this Restore.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. &#x60;etag&#x60; is used for optimistic concurrency control as a way to help prevent simultaneous updates of a restore from overwriting each other. It is strongly suggested that systems make use of the &#x60;etag&#x60; in the read-modify-write cycle to perform restore updates in order to avoid race conditions: An &#x60;etag&#x60; is returned in the response to &#x60;GetRestore&#x60;, and systems are expected to put that etag in the request to &#x60;UpdateRestore&#x60; or &#x60;DeleteRestore&#x60; to ensure that their change will be applied to the same version of the resource.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  public Restore labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Restore putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * A set of custom labels supplied by user.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The full name of the Restore resource. Format: &#x60;projects/_*_/locations/_*_/restorePlans/_*_/restores/_*&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Number of resources excluded during the restore execution.
   * @return resourcesExcludedCount
   */
  @javax.annotation.Nullable
  public Integer getResourcesExcludedCount() {
    return resourcesExcludedCount;
  }



  /**
   * Output only. Number of resources that failed to be restored during the restore execution.
   * @return resourcesFailedCount
   */
  @javax.annotation.Nullable
  public Integer getResourcesFailedCount() {
    return resourcesFailedCount;
  }



  /**
   * Output only. Number of resources restored during the restore execution.
   * @return resourcesRestoredCount
   */
  @javax.annotation.Nullable
  public Integer getResourcesRestoredCount() {
    return resourcesRestoredCount;
  }



  public Restore restoreConfig(RestoreConfig restoreConfig) {
    this.restoreConfig = restoreConfig;
    return this;
  }

  /**
   * Get restoreConfig
   * @return restoreConfig
   */
  @javax.annotation.Nullable
  public RestoreConfig getRestoreConfig() {
    return restoreConfig;
  }

  public void setRestoreConfig(RestoreConfig restoreConfig) {
    this.restoreConfig = restoreConfig;
  }


  /**
   * Output only. The current state of the Restore.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Human-readable description of why the Restore is in its current state.
   * @return stateReason
   */
  @javax.annotation.Nullable
  public String getStateReason() {
    return stateReason;
  }



  /**
   * Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The timestamp when this Restore resource was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  /**
   * Output only. Number of volumes restored during the restore execution.
   * @return volumesRestoredCount
   */
  @javax.annotation.Nullable
  public Integer getVolumesRestoredCount() {
    return volumesRestoredCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Restore restore = (Restore) o;
    return Objects.equals(this.backup, restore.backup) &&
        Objects.equals(this.cluster, restore.cluster) &&
        Objects.equals(this.completeTime, restore.completeTime) &&
        Objects.equals(this.createTime, restore.createTime) &&
        Objects.equals(this.description, restore.description) &&
        Objects.equals(this.etag, restore.etag) &&
        Objects.equals(this.labels, restore.labels) &&
        Objects.equals(this.name, restore.name) &&
        Objects.equals(this.resourcesExcludedCount, restore.resourcesExcludedCount) &&
        Objects.equals(this.resourcesFailedCount, restore.resourcesFailedCount) &&
        Objects.equals(this.resourcesRestoredCount, restore.resourcesRestoredCount) &&
        Objects.equals(this.restoreConfig, restore.restoreConfig) &&
        Objects.equals(this.state, restore.state) &&
        Objects.equals(this.stateReason, restore.stateReason) &&
        Objects.equals(this.uid, restore.uid) &&
        Objects.equals(this.updateTime, restore.updateTime) &&
        Objects.equals(this.volumesRestoredCount, restore.volumesRestoredCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backup, cluster, completeTime, createTime, description, etag, labels, name, resourcesExcludedCount, resourcesFailedCount, resourcesRestoredCount, restoreConfig, state, stateReason, uid, updateTime, volumesRestoredCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Restore {\n");
    sb.append("    backup: ").append(toIndentedString(backup)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    completeTime: ").append(toIndentedString(completeTime)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourcesExcludedCount: ").append(toIndentedString(resourcesExcludedCount)).append("\n");
    sb.append("    resourcesFailedCount: ").append(toIndentedString(resourcesFailedCount)).append("\n");
    sb.append("    resourcesRestoredCount: ").append(toIndentedString(resourcesRestoredCount)).append("\n");
    sb.append("    restoreConfig: ").append(toIndentedString(restoreConfig)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateReason: ").append(toIndentedString(stateReason)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    volumesRestoredCount: ").append(toIndentedString(volumesRestoredCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backup");
    openapiFields.add("cluster");
    openapiFields.add("completeTime");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("etag");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("resourcesExcludedCount");
    openapiFields.add("resourcesFailedCount");
    openapiFields.add("resourcesRestoredCount");
    openapiFields.add("restoreConfig");
    openapiFields.add("state");
    openapiFields.add("stateReason");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("volumesRestoredCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Restore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Restore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Restore is not found in the empty JSON string", Restore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Restore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Restore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backup") != null && !jsonObj.get("backup").isJsonNull()) && !jsonObj.get("backup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backup").toString()));
      }
      if ((jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) && !jsonObj.get("cluster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster").toString()));
      }
      if ((jsonObj.get("completeTime") != null && !jsonObj.get("completeTime").isJsonNull()) && !jsonObj.get("completeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completeTime").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `restoreConfig`
      if (jsonObj.get("restoreConfig") != null && !jsonObj.get("restoreConfig").isJsonNull()) {
        RestoreConfig.validateJsonElement(jsonObj.get("restoreConfig"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("stateReason") != null && !jsonObj.get("stateReason").isJsonNull()) && !jsonObj.get("stateReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateReason").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Restore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Restore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Restore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Restore.class));

       return (TypeAdapter<T>) new TypeAdapter<Restore>() {
           @Override
           public void write(JsonWriter out, Restore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Restore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Restore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Restore
   * @throws IOException if the JSON string is invalid with respect to Restore
   */
  public static Restore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Restore.class);
  }

  /**
   * Convert an instance of Restore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

