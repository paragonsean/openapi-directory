/*
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NamespacedName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the operation of restoring a volume from a VolumeBackup. Next id: 13
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:31.365638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeRestore {
  public static final String SERIALIZED_NAME_COMPLETE_TIME = "completeTime";
  @SerializedName(SERIALIZED_NAME_COMPLETE_TIME)
  private String completeTime;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. The current state of this VolumeRestore.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    RESTORING("RESTORING"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    DELETING("DELETING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_MESSAGE = "stateMessage";
  @SerializedName(SERIALIZED_NAME_STATE_MESSAGE)
  private String stateMessage;

  public static final String SERIALIZED_NAME_TARGET_PVC = "targetPvc";
  @SerializedName(SERIALIZED_NAME_TARGET_PVC)
  private NamespacedName targetPvc;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VOLUME_BACKUP = "volumeBackup";
  @SerializedName(SERIALIZED_NAME_VOLUME_BACKUP)
  private String volumeBackup;

  public static final String SERIALIZED_NAME_VOLUME_HANDLE = "volumeHandle";
  @SerializedName(SERIALIZED_NAME_VOLUME_HANDLE)
  private String volumeHandle;

  /**
   * Output only. The type of volume provisioned
   */
  @JsonAdapter(VolumeTypeEnum.Adapter.class)
  public enum VolumeTypeEnum {
    VOLUME_TYPE_UNSPECIFIED("VOLUME_TYPE_UNSPECIFIED"),
    
    GCE_PERSISTENT_DISK("GCE_PERSISTENT_DISK");

    private String value;

    VolumeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VolumeTypeEnum fromValue(String value) {
      for (VolumeTypeEnum b : VolumeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VolumeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VolumeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VolumeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VolumeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VolumeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VOLUME_TYPE = "volumeType";
  @SerializedName(SERIALIZED_NAME_VOLUME_TYPE)
  private VolumeTypeEnum volumeType;

  public VolumeRestore() {
  }

  public VolumeRestore(
     String completeTime, 
     String createTime, 
     String etag, 
     String name, 
     StateEnum state, 
     String stateMessage, 
     String uid, 
     String updateTime, 
     String volumeBackup, 
     String volumeHandle, 
     VolumeTypeEnum volumeType
  ) {
    this();
    this.completeTime = completeTime;
    this.createTime = createTime;
    this.etag = etag;
    this.name = name;
    this.state = state;
    this.stateMessage = stateMessage;
    this.uid = uid;
    this.updateTime = updateTime;
    this.volumeBackup = volumeBackup;
    this.volumeHandle = volumeHandle;
    this.volumeType = volumeType;
  }

  /**
   * Output only. The timestamp when the associated underlying volume restoration completed.
   * @return completeTime
   */
  @javax.annotation.Nullable
  public String getCompleteTime() {
    return completeTime;
  }



  /**
   * Output only. The timestamp when this VolumeRestore resource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. &#x60;etag&#x60; is used for optimistic concurrency control as a way to help prevent simultaneous updates of a volume restore from overwriting each other. It is strongly suggested that systems make use of the &#x60;etag&#x60; in the read-modify-write cycle to perform volume restore updates in order to avoid race conditions.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  /**
   * Output only. Full name of the VolumeRestore resource. Format: &#x60;projects/_*_/locations/_*_/restorePlans/_*_/restores/_*_/volumeRestores/_*&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The current state of this VolumeRestore.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. A human readable message explaining why the VolumeRestore is in its current state.
   * @return stateMessage
   */
  @javax.annotation.Nullable
  public String getStateMessage() {
    return stateMessage;
  }



  public VolumeRestore targetPvc(NamespacedName targetPvc) {
    this.targetPvc = targetPvc;
    return this;
  }

  /**
   * Get targetPvc
   * @return targetPvc
   */
  @javax.annotation.Nullable
  public NamespacedName getTargetPvc() {
    return targetPvc;
  }

  public void setTargetPvc(NamespacedName targetPvc) {
    this.targetPvc = targetPvc;
  }


  /**
   * Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The timestamp when this VolumeRestore resource was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  /**
   * Output only. The full name of the VolumeBackup from which the volume will be restored. Format: &#x60;projects/_*_/locations/_*_/backupPlans/_*_/backups/_*_/volumeBackups/_*&#x60;.
   * @return volumeBackup
   */
  @javax.annotation.Nullable
  public String getVolumeBackup() {
    return volumeBackup;
  }



  /**
   * Output only. A storage system-specific opaque handler to the underlying volume created for the target PVC from the volume backup.
   * @return volumeHandle
   */
  @javax.annotation.Nullable
  public String getVolumeHandle() {
    return volumeHandle;
  }



  /**
   * Output only. The type of volume provisioned
   * @return volumeType
   */
  @javax.annotation.Nullable
  public VolumeTypeEnum getVolumeType() {
    return volumeType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeRestore volumeRestore = (VolumeRestore) o;
    return Objects.equals(this.completeTime, volumeRestore.completeTime) &&
        Objects.equals(this.createTime, volumeRestore.createTime) &&
        Objects.equals(this.etag, volumeRestore.etag) &&
        Objects.equals(this.name, volumeRestore.name) &&
        Objects.equals(this.state, volumeRestore.state) &&
        Objects.equals(this.stateMessage, volumeRestore.stateMessage) &&
        Objects.equals(this.targetPvc, volumeRestore.targetPvc) &&
        Objects.equals(this.uid, volumeRestore.uid) &&
        Objects.equals(this.updateTime, volumeRestore.updateTime) &&
        Objects.equals(this.volumeBackup, volumeRestore.volumeBackup) &&
        Objects.equals(this.volumeHandle, volumeRestore.volumeHandle) &&
        Objects.equals(this.volumeType, volumeRestore.volumeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completeTime, createTime, etag, name, state, stateMessage, targetPvc, uid, updateTime, volumeBackup, volumeHandle, volumeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeRestore {\n");
    sb.append("    completeTime: ").append(toIndentedString(completeTime)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateMessage: ").append(toIndentedString(stateMessage)).append("\n");
    sb.append("    targetPvc: ").append(toIndentedString(targetPvc)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    volumeBackup: ").append(toIndentedString(volumeBackup)).append("\n");
    sb.append("    volumeHandle: ").append(toIndentedString(volumeHandle)).append("\n");
    sb.append("    volumeType: ").append(toIndentedString(volumeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completeTime");
    openapiFields.add("createTime");
    openapiFields.add("etag");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("stateMessage");
    openapiFields.add("targetPvc");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("volumeBackup");
    openapiFields.add("volumeHandle");
    openapiFields.add("volumeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeRestore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeRestore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeRestore is not found in the empty JSON string", VolumeRestore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeRestore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeRestore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("completeTime") != null && !jsonObj.get("completeTime").isJsonNull()) && !jsonObj.get("completeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completeTime").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("stateMessage") != null && !jsonObj.get("stateMessage").isJsonNull()) && !jsonObj.get("stateMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateMessage").toString()));
      }
      // validate the optional field `targetPvc`
      if (jsonObj.get("targetPvc") != null && !jsonObj.get("targetPvc").isJsonNull()) {
        NamespacedName.validateJsonElement(jsonObj.get("targetPvc"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("volumeBackup") != null && !jsonObj.get("volumeBackup").isJsonNull()) && !jsonObj.get("volumeBackup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeBackup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeBackup").toString()));
      }
      if ((jsonObj.get("volumeHandle") != null && !jsonObj.get("volumeHandle").isJsonNull()) && !jsonObj.get("volumeHandle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeHandle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeHandle").toString()));
      }
      if ((jsonObj.get("volumeType") != null && !jsonObj.get("volumeType").isJsonNull()) && !jsonObj.get("volumeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeType").toString()));
      }
      // validate the optional field `volumeType`
      if (jsonObj.get("volumeType") != null && !jsonObj.get("volumeType").isJsonNull()) {
        VolumeTypeEnum.validateJsonElement(jsonObj.get("volumeType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeRestore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeRestore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeRestore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeRestore.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeRestore>() {
           @Override
           public void write(JsonWriter out, VolumeRestore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeRestore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeRestore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeRestore
   * @throws IOException if the JSON string is invalid with respect to VolumeRestore
   */
  public static VolumeRestore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeRestore.class);
  }

  /**
   * Convert an instance of VolumeRestore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

