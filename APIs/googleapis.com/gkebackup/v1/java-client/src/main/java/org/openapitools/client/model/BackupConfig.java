/*
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EncryptionKey;
import org.openapitools.client.model.NamespacedNames;
import org.openapitools.client.model.Namespaces;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BackupConfig defines the configuration of Backups created via this BackupPlan.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:31.365638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupConfig {
  public static final String SERIALIZED_NAME_ALL_NAMESPACES = "allNamespaces";
  @SerializedName(SERIALIZED_NAME_ALL_NAMESPACES)
  private Boolean allNamespaces;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private EncryptionKey encryptionKey;

  public static final String SERIALIZED_NAME_INCLUDE_SECRETS = "includeSecrets";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SECRETS)
  private Boolean includeSecrets;

  public static final String SERIALIZED_NAME_INCLUDE_VOLUME_DATA = "includeVolumeData";
  @SerializedName(SERIALIZED_NAME_INCLUDE_VOLUME_DATA)
  private Boolean includeVolumeData;

  public static final String SERIALIZED_NAME_SELECTED_APPLICATIONS = "selectedApplications";
  @SerializedName(SERIALIZED_NAME_SELECTED_APPLICATIONS)
  private NamespacedNames selectedApplications;

  public static final String SERIALIZED_NAME_SELECTED_NAMESPACES = "selectedNamespaces";
  @SerializedName(SERIALIZED_NAME_SELECTED_NAMESPACES)
  private Namespaces selectedNamespaces;

  public BackupConfig() {
  }

  public BackupConfig allNamespaces(Boolean allNamespaces) {
    this.allNamespaces = allNamespaces;
    return this;
  }

  /**
   * If True, include all namespaced resources
   * @return allNamespaces
   */
  @javax.annotation.Nullable
  public Boolean getAllNamespaces() {
    return allNamespaces;
  }

  public void setAllNamespaces(Boolean allNamespaces) {
    this.allNamespaces = allNamespaces;
  }


  public BackupConfig encryptionKey(EncryptionKey encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * Get encryptionKey
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public EncryptionKey getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(EncryptionKey encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public BackupConfig includeSecrets(Boolean includeSecrets) {
    this.includeSecrets = includeSecrets;
    return this;
  }

  /**
   * Optional. This flag specifies whether Kubernetes Secret resources should be included when they fall into the scope of Backups. Default: False
   * @return includeSecrets
   */
  @javax.annotation.Nullable
  public Boolean getIncludeSecrets() {
    return includeSecrets;
  }

  public void setIncludeSecrets(Boolean includeSecrets) {
    this.includeSecrets = includeSecrets;
  }


  public BackupConfig includeVolumeData(Boolean includeVolumeData) {
    this.includeVolumeData = includeVolumeData;
    return this;
  }

  /**
   * Optional. This flag specifies whether volume data should be backed up when PVCs are included in the scope of a Backup. Default: False
   * @return includeVolumeData
   */
  @javax.annotation.Nullable
  public Boolean getIncludeVolumeData() {
    return includeVolumeData;
  }

  public void setIncludeVolumeData(Boolean includeVolumeData) {
    this.includeVolumeData = includeVolumeData;
  }


  public BackupConfig selectedApplications(NamespacedNames selectedApplications) {
    this.selectedApplications = selectedApplications;
    return this;
  }

  /**
   * Get selectedApplications
   * @return selectedApplications
   */
  @javax.annotation.Nullable
  public NamespacedNames getSelectedApplications() {
    return selectedApplications;
  }

  public void setSelectedApplications(NamespacedNames selectedApplications) {
    this.selectedApplications = selectedApplications;
  }


  public BackupConfig selectedNamespaces(Namespaces selectedNamespaces) {
    this.selectedNamespaces = selectedNamespaces;
    return this;
  }

  /**
   * Get selectedNamespaces
   * @return selectedNamespaces
   */
  @javax.annotation.Nullable
  public Namespaces getSelectedNamespaces() {
    return selectedNamespaces;
  }

  public void setSelectedNamespaces(Namespaces selectedNamespaces) {
    this.selectedNamespaces = selectedNamespaces;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupConfig backupConfig = (BackupConfig) o;
    return Objects.equals(this.allNamespaces, backupConfig.allNamespaces) &&
        Objects.equals(this.encryptionKey, backupConfig.encryptionKey) &&
        Objects.equals(this.includeSecrets, backupConfig.includeSecrets) &&
        Objects.equals(this.includeVolumeData, backupConfig.includeVolumeData) &&
        Objects.equals(this.selectedApplications, backupConfig.selectedApplications) &&
        Objects.equals(this.selectedNamespaces, backupConfig.selectedNamespaces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allNamespaces, encryptionKey, includeSecrets, includeVolumeData, selectedApplications, selectedNamespaces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupConfig {\n");
    sb.append("    allNamespaces: ").append(toIndentedString(allNamespaces)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    includeSecrets: ").append(toIndentedString(includeSecrets)).append("\n");
    sb.append("    includeVolumeData: ").append(toIndentedString(includeVolumeData)).append("\n");
    sb.append("    selectedApplications: ").append(toIndentedString(selectedApplications)).append("\n");
    sb.append("    selectedNamespaces: ").append(toIndentedString(selectedNamespaces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allNamespaces");
    openapiFields.add("encryptionKey");
    openapiFields.add("includeSecrets");
    openapiFields.add("includeVolumeData");
    openapiFields.add("selectedApplications");
    openapiFields.add("selectedNamespaces");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupConfig is not found in the empty JSON string", BackupConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `encryptionKey`
      if (jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) {
        EncryptionKey.validateJsonElement(jsonObj.get("encryptionKey"));
      }
      // validate the optional field `selectedApplications`
      if (jsonObj.get("selectedApplications") != null && !jsonObj.get("selectedApplications").isJsonNull()) {
        NamespacedNames.validateJsonElement(jsonObj.get("selectedApplications"));
      }
      // validate the optional field `selectedNamespaces`
      if (jsonObj.get("selectedNamespaces") != null && !jsonObj.get("selectedNamespaces").isJsonNull()) {
        Namespaces.validateJsonElement(jsonObj.get("selectedNamespaces"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupConfig>() {
           @Override
           public void write(JsonWriter out, BackupConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupConfig
   * @throws IOException if the JSON string is invalid with respect to BackupConfig
   */
  public static BackupConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupConfig.class);
  }

  /**
   * Convert an instance of BackupConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

