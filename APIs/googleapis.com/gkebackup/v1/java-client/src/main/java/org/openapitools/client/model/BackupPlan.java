/*
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.BackupConfig;
import org.openapitools.client.model.RetentionPolicy;
import org.openapitools.client.model.Schedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the configuration and scheduling for a \&quot;line\&quot; of Backups.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:31.365638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupPlan {
  public static final String SERIALIZED_NAME_BACKUP_CONFIG = "backupConfig";
  @SerializedName(SERIALIZED_NAME_BACKUP_CONFIG)
  private BackupConfig backupConfig;

  public static final String SERIALIZED_NAME_BACKUP_SCHEDULE = "backupSchedule";
  @SerializedName(SERIALIZED_NAME_BACKUP_SCHEDULE)
  private Schedule backupSchedule;

  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DEACTIVATED = "deactivated";
  @SerializedName(SERIALIZED_NAME_DEACTIVATED)
  private Boolean deactivated;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROTECTED_POD_COUNT = "protectedPodCount";
  @SerializedName(SERIALIZED_NAME_PROTECTED_POD_COUNT)
  private Integer protectedPodCount;

  public static final String SERIALIZED_NAME_RETENTION_POLICY = "retentionPolicy";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY)
  private RetentionPolicy retentionPolicy;

  /**
   * Output only. State of the BackupPlan. This State field reflects the various stages a BackupPlan can be in during the Create operation. It will be set to \&quot;DEACTIVATED\&quot; if the BackupPlan is deactivated on an Update
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CLUSTER_PENDING("CLUSTER_PENDING"),
    
    PROVISIONING("PROVISIONING"),
    
    READY("READY"),
    
    FAILED("FAILED"),
    
    DEACTIVATED("DEACTIVATED"),
    
    DELETING("DELETING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_REASON = "stateReason";
  @SerializedName(SERIALIZED_NAME_STATE_REASON)
  private String stateReason;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public BackupPlan() {
  }

  public BackupPlan(
     String createTime, 
     String etag, 
     String name, 
     Integer protectedPodCount, 
     StateEnum state, 
     String stateReason, 
     String uid, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.etag = etag;
    this.name = name;
    this.protectedPodCount = protectedPodCount;
    this.state = state;
    this.stateReason = stateReason;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  public BackupPlan backupConfig(BackupConfig backupConfig) {
    this.backupConfig = backupConfig;
    return this;
  }

  /**
   * Get backupConfig
   * @return backupConfig
   */
  @javax.annotation.Nullable
  public BackupConfig getBackupConfig() {
    return backupConfig;
  }

  public void setBackupConfig(BackupConfig backupConfig) {
    this.backupConfig = backupConfig;
  }


  public BackupPlan backupSchedule(Schedule backupSchedule) {
    this.backupSchedule = backupSchedule;
    return this;
  }

  /**
   * Get backupSchedule
   * @return backupSchedule
   */
  @javax.annotation.Nullable
  public Schedule getBackupSchedule() {
    return backupSchedule;
  }

  public void setBackupSchedule(Schedule backupSchedule) {
    this.backupSchedule = backupSchedule;
  }


  public BackupPlan cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * Required. Immutable. The source cluster from which Backups will be created via this BackupPlan. Valid formats: - &#x60;projects/_*_/locations/_*_/clusters/_*&#x60; - &#x60;projects/_*_/zones/_*_/clusters/_*&#x60;
   * @return cluster
   */
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  /**
   * Output only. The timestamp when this BackupPlan resource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public BackupPlan deactivated(Boolean deactivated) {
    this.deactivated = deactivated;
    return this;
  }

  /**
   * Optional. This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such that no further updates will be allowed (except deletes), including the deactivated field itself. It also prevents any new Backups from being created via this BackupPlan (including scheduled Backups). Default: False
   * @return deactivated
   */
  @javax.annotation.Nullable
  public Boolean getDeactivated() {
    return deactivated;
  }

  public void setDeactivated(Boolean deactivated) {
    this.deactivated = deactivated;
  }


  public BackupPlan description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. User specified descriptive string for this BackupPlan.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. &#x60;etag&#x60; is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup plan from overwriting each other. It is strongly suggested that systems make use of the &#39;etag&#39; in the read-modify-write cycle to perform BackupPlan updates in order to avoid race conditions: An &#x60;etag&#x60; is returned in the response to &#x60;GetBackupPlan&#x60;, and systems are expected to put that etag in the request to &#x60;UpdateBackupPlan&#x60; or &#x60;DeleteBackupPlan&#x60; to ensure that their change will be applied to the same version of the resource.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  public BackupPlan labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public BackupPlan putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. A set of custom labels supplied by user.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The full name of the BackupPlan resource. Format: &#x60;projects/_*_/locations/_*_/backupPlans/_*&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The number of Kubernetes Pods backed up in the last successful Backup created via this BackupPlan.
   * @return protectedPodCount
   */
  @javax.annotation.Nullable
  public Integer getProtectedPodCount() {
    return protectedPodCount;
  }



  public BackupPlan retentionPolicy(RetentionPolicy retentionPolicy) {
    this.retentionPolicy = retentionPolicy;
    return this;
  }

  /**
   * Get retentionPolicy
   * @return retentionPolicy
   */
  @javax.annotation.Nullable
  public RetentionPolicy getRetentionPolicy() {
    return retentionPolicy;
  }

  public void setRetentionPolicy(RetentionPolicy retentionPolicy) {
    this.retentionPolicy = retentionPolicy;
  }


  /**
   * Output only. State of the BackupPlan. This State field reflects the various stages a BackupPlan can be in during the Create operation. It will be set to \&quot;DEACTIVATED\&quot; if the BackupPlan is deactivated on an Update
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Human-readable description of why BackupPlan is in the current &#x60;state&#x60;
   * @return stateReason
   */
  @javax.annotation.Nullable
  public String getStateReason() {
    return stateReason;
  }



  /**
   * Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The timestamp when this BackupPlan resource was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupPlan backupPlan = (BackupPlan) o;
    return Objects.equals(this.backupConfig, backupPlan.backupConfig) &&
        Objects.equals(this.backupSchedule, backupPlan.backupSchedule) &&
        Objects.equals(this.cluster, backupPlan.cluster) &&
        Objects.equals(this.createTime, backupPlan.createTime) &&
        Objects.equals(this.deactivated, backupPlan.deactivated) &&
        Objects.equals(this.description, backupPlan.description) &&
        Objects.equals(this.etag, backupPlan.etag) &&
        Objects.equals(this.labels, backupPlan.labels) &&
        Objects.equals(this.name, backupPlan.name) &&
        Objects.equals(this.protectedPodCount, backupPlan.protectedPodCount) &&
        Objects.equals(this.retentionPolicy, backupPlan.retentionPolicy) &&
        Objects.equals(this.state, backupPlan.state) &&
        Objects.equals(this.stateReason, backupPlan.stateReason) &&
        Objects.equals(this.uid, backupPlan.uid) &&
        Objects.equals(this.updateTime, backupPlan.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupConfig, backupSchedule, cluster, createTime, deactivated, description, etag, labels, name, protectedPodCount, retentionPolicy, state, stateReason, uid, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupPlan {\n");
    sb.append("    backupConfig: ").append(toIndentedString(backupConfig)).append("\n");
    sb.append("    backupSchedule: ").append(toIndentedString(backupSchedule)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deactivated: ").append(toIndentedString(deactivated)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protectedPodCount: ").append(toIndentedString(protectedPodCount)).append("\n");
    sb.append("    retentionPolicy: ").append(toIndentedString(retentionPolicy)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateReason: ").append(toIndentedString(stateReason)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupConfig");
    openapiFields.add("backupSchedule");
    openapiFields.add("cluster");
    openapiFields.add("createTime");
    openapiFields.add("deactivated");
    openapiFields.add("description");
    openapiFields.add("etag");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("protectedPodCount");
    openapiFields.add("retentionPolicy");
    openapiFields.add("state");
    openapiFields.add("stateReason");
    openapiFields.add("uid");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupPlan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupPlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupPlan is not found in the empty JSON string", BackupPlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupPlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupPlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backupConfig`
      if (jsonObj.get("backupConfig") != null && !jsonObj.get("backupConfig").isJsonNull()) {
        BackupConfig.validateJsonElement(jsonObj.get("backupConfig"));
      }
      // validate the optional field `backupSchedule`
      if (jsonObj.get("backupSchedule") != null && !jsonObj.get("backupSchedule").isJsonNull()) {
        Schedule.validateJsonElement(jsonObj.get("backupSchedule"));
      }
      if ((jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) && !jsonObj.get("cluster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `retentionPolicy`
      if (jsonObj.get("retentionPolicy") != null && !jsonObj.get("retentionPolicy").isJsonNull()) {
        RetentionPolicy.validateJsonElement(jsonObj.get("retentionPolicy"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("stateReason") != null && !jsonObj.get("stateReason").isJsonNull()) && !jsonObj.get("stateReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateReason").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupPlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupPlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupPlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupPlan.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupPlan>() {
           @Override
           public void write(JsonWriter out, BackupPlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupPlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupPlan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupPlan
   * @throws IOException if the JSON string is invalid with respect to BackupPlan
   */
  public static BackupPlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupPlan.class);
  }

  /**
   * Convert an instance of BackupPlan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

