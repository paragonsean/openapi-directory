/*
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ClusterMetadata;
import org.openapitools.client.model.EncryptionKey;
import org.openapitools.client.model.NamespacedNames;
import org.openapitools.client.model.Namespaces;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a request to perform a single point-in-time capture of some portion of the state of a GKE cluster, the record of the backup operation itself, and an anchor for the underlying artifacts that comprise the Backup (the config backup and VolumeBackups). Next id: 29
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:31.365638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Backup {
  public static final String SERIALIZED_NAME_ALL_NAMESPACES = "allNamespaces";
  @SerializedName(SERIALIZED_NAME_ALL_NAMESPACES)
  private Boolean allNamespaces;

  public static final String SERIALIZED_NAME_CLUSTER_METADATA = "clusterMetadata";
  @SerializedName(SERIALIZED_NAME_CLUSTER_METADATA)
  private ClusterMetadata clusterMetadata;

  public static final String SERIALIZED_NAME_COMPLETE_TIME = "completeTime";
  @SerializedName(SERIALIZED_NAME_COMPLETE_TIME)
  private String completeTime;

  public static final String SERIALIZED_NAME_CONFIG_BACKUP_SIZE_BYTES = "configBackupSizeBytes";
  @SerializedName(SERIALIZED_NAME_CONFIG_BACKUP_SIZE_BYTES)
  private String configBackupSizeBytes;

  public static final String SERIALIZED_NAME_CONTAINS_SECRETS = "containsSecrets";
  @SerializedName(SERIALIZED_NAME_CONTAINS_SECRETS)
  private Boolean containsSecrets;

  public static final String SERIALIZED_NAME_CONTAINS_VOLUME_DATA = "containsVolumeData";
  @SerializedName(SERIALIZED_NAME_CONTAINS_VOLUME_DATA)
  private Boolean containsVolumeData;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DELETE_LOCK_DAYS = "deleteLockDays";
  @SerializedName(SERIALIZED_NAME_DELETE_LOCK_DAYS)
  private Integer deleteLockDays;

  public static final String SERIALIZED_NAME_DELETE_LOCK_EXPIRE_TIME = "deleteLockExpireTime";
  @SerializedName(SERIALIZED_NAME_DELETE_LOCK_EXPIRE_TIME)
  private String deleteLockExpireTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private EncryptionKey encryptionKey;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MANUAL = "manual";
  @SerializedName(SERIALIZED_NAME_MANUAL)
  private Boolean manual;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POD_COUNT = "podCount";
  @SerializedName(SERIALIZED_NAME_POD_COUNT)
  private Integer podCount;

  public static final String SERIALIZED_NAME_RESOURCE_COUNT = "resourceCount";
  @SerializedName(SERIALIZED_NAME_RESOURCE_COUNT)
  private Integer resourceCount;

  public static final String SERIALIZED_NAME_RETAIN_DAYS = "retainDays";
  @SerializedName(SERIALIZED_NAME_RETAIN_DAYS)
  private Integer retainDays;

  public static final String SERIALIZED_NAME_RETAIN_EXPIRE_TIME = "retainExpireTime";
  @SerializedName(SERIALIZED_NAME_RETAIN_EXPIRE_TIME)
  private String retainExpireTime;

  public static final String SERIALIZED_NAME_SELECTED_APPLICATIONS = "selectedApplications";
  @SerializedName(SERIALIZED_NAME_SELECTED_APPLICATIONS)
  private NamespacedNames selectedApplications;

  public static final String SERIALIZED_NAME_SELECTED_NAMESPACES = "selectedNamespaces";
  @SerializedName(SERIALIZED_NAME_SELECTED_NAMESPACES)
  private Namespaces selectedNamespaces;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "sizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  private String sizeBytes;

  /**
   * Output only. Current state of the Backup
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    DELETING("DELETING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_REASON = "stateReason";
  @SerializedName(SERIALIZED_NAME_STATE_REASON)
  private String stateReason;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VOLUME_COUNT = "volumeCount";
  @SerializedName(SERIALIZED_NAME_VOLUME_COUNT)
  private Integer volumeCount;

  public Backup() {
  }

  public Backup(
     Boolean allNamespaces, 
     String completeTime, 
     String configBackupSizeBytes, 
     Boolean containsSecrets, 
     Boolean containsVolumeData, 
     String createTime, 
     String deleteLockExpireTime, 
     String etag, 
     Boolean manual, 
     String name, 
     Integer podCount, 
     Integer resourceCount, 
     String retainExpireTime, 
     String sizeBytes, 
     StateEnum state, 
     String stateReason, 
     String uid, 
     String updateTime, 
     Integer volumeCount
  ) {
    this();
    this.allNamespaces = allNamespaces;
    this.completeTime = completeTime;
    this.configBackupSizeBytes = configBackupSizeBytes;
    this.containsSecrets = containsSecrets;
    this.containsVolumeData = containsVolumeData;
    this.createTime = createTime;
    this.deleteLockExpireTime = deleteLockExpireTime;
    this.etag = etag;
    this.manual = manual;
    this.name = name;
    this.podCount = podCount;
    this.resourceCount = resourceCount;
    this.retainExpireTime = retainExpireTime;
    this.sizeBytes = sizeBytes;
    this.state = state;
    this.stateReason = stateReason;
    this.uid = uid;
    this.updateTime = updateTime;
    this.volumeCount = volumeCount;
  }

  /**
   * Output only. If True, all namespaces were included in the Backup.
   * @return allNamespaces
   */
  @javax.annotation.Nullable
  public Boolean getAllNamespaces() {
    return allNamespaces;
  }



  public Backup clusterMetadata(ClusterMetadata clusterMetadata) {
    this.clusterMetadata = clusterMetadata;
    return this;
  }

  /**
   * Get clusterMetadata
   * @return clusterMetadata
   */
  @javax.annotation.Nullable
  public ClusterMetadata getClusterMetadata() {
    return clusterMetadata;
  }

  public void setClusterMetadata(ClusterMetadata clusterMetadata) {
    this.clusterMetadata = clusterMetadata;
  }


  /**
   * Output only. Completion time of the Backup
   * @return completeTime
   */
  @javax.annotation.Nullable
  public String getCompleteTime() {
    return completeTime;
  }



  /**
   * Output only. The size of the config backup in bytes.
   * @return configBackupSizeBytes
   */
  @javax.annotation.Nullable
  public String getConfigBackupSizeBytes() {
    return configBackupSizeBytes;
  }



  /**
   * Output only. Whether or not the Backup contains Kubernetes Secrets. Controlled by the parent BackupPlan&#39;s include_secrets value.
   * @return containsSecrets
   */
  @javax.annotation.Nullable
  public Boolean getContainsSecrets() {
    return containsSecrets;
  }



  /**
   * Output only. Whether or not the Backup contains volume data. Controlled by the parent BackupPlan&#39;s include_volume_data value.
   * @return containsVolumeData
   */
  @javax.annotation.Nullable
  public Boolean getContainsVolumeData() {
    return containsVolumeData;
  }



  /**
   * Output only. The timestamp when this Backup resource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Backup deleteLockDays(Integer deleteLockDays) {
    this.deleteLockDays = deleteLockDays;
    return this;
  }

  /**
   * Optional. Minimum age for this Backup (in days). If this field is set to a non-zero value, the Backup will be \&quot;locked\&quot; against deletion (either manual or automatic deletion) for the number of days provided (measured from the creation time of the Backup). MUST be an integer value between 0-90 (inclusive). Defaults to parent BackupPlan&#39;s backup_delete_lock_days setting and may only be increased (either at creation time or in a subsequent update).
   * @return deleteLockDays
   */
  @javax.annotation.Nullable
  public Integer getDeleteLockDays() {
    return deleteLockDays;
  }

  public void setDeleteLockDays(Integer deleteLockDays) {
    this.deleteLockDays = deleteLockDays;
  }


  /**
   * Output only. The time at which an existing delete lock will expire for this backup (calculated from create_time + delete_lock_days).
   * @return deleteLockExpireTime
   */
  @javax.annotation.Nullable
  public String getDeleteLockExpireTime() {
    return deleteLockExpireTime;
  }



  public Backup description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. User specified descriptive string for this Backup.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Backup encryptionKey(EncryptionKey encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * Get encryptionKey
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public EncryptionKey getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(EncryptionKey encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  /**
   * Output only. &#x60;etag&#x60; is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup from overwriting each other. It is strongly suggested that systems make use of the &#x60;etag&#x60; in the read-modify-write cycle to perform backup updates in order to avoid race conditions: An &#x60;etag&#x60; is returned in the response to &#x60;GetBackup&#x60;, and systems are expected to put that etag in the request to &#x60;UpdateBackup&#x60; or &#x60;DeleteBackup&#x60; to ensure that their change will be applied to the same version of the resource.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  public Backup labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Backup putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. A set of custom labels supplied by user.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. This flag indicates whether this Backup resource was created manually by a user or via a schedule in the BackupPlan. A value of True means that the Backup was created manually.
   * @return manual
   */
  @javax.annotation.Nullable
  public Boolean getManual() {
    return manual;
  }



  /**
   * Output only. The fully qualified name of the Backup. &#x60;projects/_*_/locations/_*_/backupPlans/_*_/backups/_*&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The total number of Kubernetes Pods contained in the Backup.
   * @return podCount
   */
  @javax.annotation.Nullable
  public Integer getPodCount() {
    return podCount;
  }



  /**
   * Output only. The total number of Kubernetes resources included in the Backup.
   * @return resourceCount
   */
  @javax.annotation.Nullable
  public Integer getResourceCount() {
    return resourceCount;
  }



  public Backup retainDays(Integer retainDays) {
    this.retainDays = retainDays;
    return this;
  }

  /**
   * Optional. The age (in days) after which this Backup will be automatically deleted. Must be an integer value &gt;&#x3D; 0: - If 0, no automatic deletion will occur for this Backup. - If not 0, this must be &gt;&#x3D; delete_lock_days and &lt;&#x3D; 365. Once a Backup is created, this value may only be increased. Defaults to the parent BackupPlan&#39;s backup_retain_days value.
   * @return retainDays
   */
  @javax.annotation.Nullable
  public Integer getRetainDays() {
    return retainDays;
  }

  public void setRetainDays(Integer retainDays) {
    this.retainDays = retainDays;
  }


  /**
   * Output only. The time at which this Backup will be automatically deleted (calculated from create_time + retain_days).
   * @return retainExpireTime
   */
  @javax.annotation.Nullable
  public String getRetainExpireTime() {
    return retainExpireTime;
  }



  public Backup selectedApplications(NamespacedNames selectedApplications) {
    this.selectedApplications = selectedApplications;
    return this;
  }

  /**
   * Get selectedApplications
   * @return selectedApplications
   */
  @javax.annotation.Nullable
  public NamespacedNames getSelectedApplications() {
    return selectedApplications;
  }

  public void setSelectedApplications(NamespacedNames selectedApplications) {
    this.selectedApplications = selectedApplications;
  }


  public Backup selectedNamespaces(Namespaces selectedNamespaces) {
    this.selectedNamespaces = selectedNamespaces;
    return this;
  }

  /**
   * Get selectedNamespaces
   * @return selectedNamespaces
   */
  @javax.annotation.Nullable
  public Namespaces getSelectedNamespaces() {
    return selectedNamespaces;
  }

  public void setSelectedNamespaces(Namespaces selectedNamespaces) {
    this.selectedNamespaces = selectedNamespaces;
  }


  /**
   * Output only. The total size of the Backup in bytes &#x3D; config backup size + sum(volume backup sizes)
   * @return sizeBytes
   */
  @javax.annotation.Nullable
  public String getSizeBytes() {
    return sizeBytes;
  }



  /**
   * Output only. Current state of the Backup
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Human-readable description of why the backup is in the current &#x60;state&#x60;.
   * @return stateReason
   */
  @javax.annotation.Nullable
  public String getStateReason() {
    return stateReason;
  }



  /**
   * Output only. Server generated global unique identifier of [UUID4](https://en.wikipedia.org/wiki/Universally_unique_identifier)
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The timestamp when this Backup resource was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  /**
   * Output only. The total number of volume backups contained in the Backup.
   * @return volumeCount
   */
  @javax.annotation.Nullable
  public Integer getVolumeCount() {
    return volumeCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Backup backup = (Backup) o;
    return Objects.equals(this.allNamespaces, backup.allNamespaces) &&
        Objects.equals(this.clusterMetadata, backup.clusterMetadata) &&
        Objects.equals(this.completeTime, backup.completeTime) &&
        Objects.equals(this.configBackupSizeBytes, backup.configBackupSizeBytes) &&
        Objects.equals(this.containsSecrets, backup.containsSecrets) &&
        Objects.equals(this.containsVolumeData, backup.containsVolumeData) &&
        Objects.equals(this.createTime, backup.createTime) &&
        Objects.equals(this.deleteLockDays, backup.deleteLockDays) &&
        Objects.equals(this.deleteLockExpireTime, backup.deleteLockExpireTime) &&
        Objects.equals(this.description, backup.description) &&
        Objects.equals(this.encryptionKey, backup.encryptionKey) &&
        Objects.equals(this.etag, backup.etag) &&
        Objects.equals(this.labels, backup.labels) &&
        Objects.equals(this.manual, backup.manual) &&
        Objects.equals(this.name, backup.name) &&
        Objects.equals(this.podCount, backup.podCount) &&
        Objects.equals(this.resourceCount, backup.resourceCount) &&
        Objects.equals(this.retainDays, backup.retainDays) &&
        Objects.equals(this.retainExpireTime, backup.retainExpireTime) &&
        Objects.equals(this.selectedApplications, backup.selectedApplications) &&
        Objects.equals(this.selectedNamespaces, backup.selectedNamespaces) &&
        Objects.equals(this.sizeBytes, backup.sizeBytes) &&
        Objects.equals(this.state, backup.state) &&
        Objects.equals(this.stateReason, backup.stateReason) &&
        Objects.equals(this.uid, backup.uid) &&
        Objects.equals(this.updateTime, backup.updateTime) &&
        Objects.equals(this.volumeCount, backup.volumeCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allNamespaces, clusterMetadata, completeTime, configBackupSizeBytes, containsSecrets, containsVolumeData, createTime, deleteLockDays, deleteLockExpireTime, description, encryptionKey, etag, labels, manual, name, podCount, resourceCount, retainDays, retainExpireTime, selectedApplications, selectedNamespaces, sizeBytes, state, stateReason, uid, updateTime, volumeCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Backup {\n");
    sb.append("    allNamespaces: ").append(toIndentedString(allNamespaces)).append("\n");
    sb.append("    clusterMetadata: ").append(toIndentedString(clusterMetadata)).append("\n");
    sb.append("    completeTime: ").append(toIndentedString(completeTime)).append("\n");
    sb.append("    configBackupSizeBytes: ").append(toIndentedString(configBackupSizeBytes)).append("\n");
    sb.append("    containsSecrets: ").append(toIndentedString(containsSecrets)).append("\n");
    sb.append("    containsVolumeData: ").append(toIndentedString(containsVolumeData)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deleteLockDays: ").append(toIndentedString(deleteLockDays)).append("\n");
    sb.append("    deleteLockExpireTime: ").append(toIndentedString(deleteLockExpireTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    manual: ").append(toIndentedString(manual)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    podCount: ").append(toIndentedString(podCount)).append("\n");
    sb.append("    resourceCount: ").append(toIndentedString(resourceCount)).append("\n");
    sb.append("    retainDays: ").append(toIndentedString(retainDays)).append("\n");
    sb.append("    retainExpireTime: ").append(toIndentedString(retainExpireTime)).append("\n");
    sb.append("    selectedApplications: ").append(toIndentedString(selectedApplications)).append("\n");
    sb.append("    selectedNamespaces: ").append(toIndentedString(selectedNamespaces)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateReason: ").append(toIndentedString(stateReason)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    volumeCount: ").append(toIndentedString(volumeCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allNamespaces");
    openapiFields.add("clusterMetadata");
    openapiFields.add("completeTime");
    openapiFields.add("configBackupSizeBytes");
    openapiFields.add("containsSecrets");
    openapiFields.add("containsVolumeData");
    openapiFields.add("createTime");
    openapiFields.add("deleteLockDays");
    openapiFields.add("deleteLockExpireTime");
    openapiFields.add("description");
    openapiFields.add("encryptionKey");
    openapiFields.add("etag");
    openapiFields.add("labels");
    openapiFields.add("manual");
    openapiFields.add("name");
    openapiFields.add("podCount");
    openapiFields.add("resourceCount");
    openapiFields.add("retainDays");
    openapiFields.add("retainExpireTime");
    openapiFields.add("selectedApplications");
    openapiFields.add("selectedNamespaces");
    openapiFields.add("sizeBytes");
    openapiFields.add("state");
    openapiFields.add("stateReason");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("volumeCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Backup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Backup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Backup is not found in the empty JSON string", Backup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Backup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Backup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clusterMetadata`
      if (jsonObj.get("clusterMetadata") != null && !jsonObj.get("clusterMetadata").isJsonNull()) {
        ClusterMetadata.validateJsonElement(jsonObj.get("clusterMetadata"));
      }
      if ((jsonObj.get("completeTime") != null && !jsonObj.get("completeTime").isJsonNull()) && !jsonObj.get("completeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completeTime").toString()));
      }
      if ((jsonObj.get("configBackupSizeBytes") != null && !jsonObj.get("configBackupSizeBytes").isJsonNull()) && !jsonObj.get("configBackupSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configBackupSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configBackupSizeBytes").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deleteLockExpireTime") != null && !jsonObj.get("deleteLockExpireTime").isJsonNull()) && !jsonObj.get("deleteLockExpireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteLockExpireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteLockExpireTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `encryptionKey`
      if (jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) {
        EncryptionKey.validateJsonElement(jsonObj.get("encryptionKey"));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("retainExpireTime") != null && !jsonObj.get("retainExpireTime").isJsonNull()) && !jsonObj.get("retainExpireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retainExpireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retainExpireTime").toString()));
      }
      // validate the optional field `selectedApplications`
      if (jsonObj.get("selectedApplications") != null && !jsonObj.get("selectedApplications").isJsonNull()) {
        NamespacedNames.validateJsonElement(jsonObj.get("selectedApplications"));
      }
      // validate the optional field `selectedNamespaces`
      if (jsonObj.get("selectedNamespaces") != null && !jsonObj.get("selectedNamespaces").isJsonNull()) {
        Namespaces.validateJsonElement(jsonObj.get("selectedNamespaces"));
      }
      if ((jsonObj.get("sizeBytes") != null && !jsonObj.get("sizeBytes").isJsonNull()) && !jsonObj.get("sizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeBytes").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("stateReason") != null && !jsonObj.get("stateReason").isJsonNull()) && !jsonObj.get("stateReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateReason").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Backup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Backup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Backup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Backup.class));

       return (TypeAdapter<T>) new TypeAdapter<Backup>() {
           @Override
           public void write(JsonWriter out, Backup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Backup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Backup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Backup
   * @throws IOException if the JSON string is invalid with respect to Backup
   */
  public static Backup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Backup.class);
  }

  /**
   * Convert an instance of Backup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

