/*
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RetentionPolicy defines a Backup retention policy for a BackupPlan.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:31.365638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RetentionPolicy {
  public static final String SERIALIZED_NAME_BACKUP_DELETE_LOCK_DAYS = "backupDeleteLockDays";
  @SerializedName(SERIALIZED_NAME_BACKUP_DELETE_LOCK_DAYS)
  private Integer backupDeleteLockDays;

  public static final String SERIALIZED_NAME_BACKUP_RETAIN_DAYS = "backupRetainDays";
  @SerializedName(SERIALIZED_NAME_BACKUP_RETAIN_DAYS)
  private Integer backupRetainDays;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public RetentionPolicy() {
  }

  public RetentionPolicy backupDeleteLockDays(Integer backupDeleteLockDays) {
    this.backupDeleteLockDays = backupDeleteLockDays;
    return this;
  }

  /**
   * Optional. Minimum age for Backups created via this BackupPlan (in days). This field MUST be an integer value between 0-90 (inclusive). A Backup created under this BackupPlan will NOT be deletable until it reaches Backup&#39;s (create_time + backup_delete_lock_days). Updating this field of a BackupPlan does NOT affect existing Backups under it. Backups created AFTER a successful update will inherit the new value. Default: 0 (no delete blocking)
   * @return backupDeleteLockDays
   */
  @javax.annotation.Nullable
  public Integer getBackupDeleteLockDays() {
    return backupDeleteLockDays;
  }

  public void setBackupDeleteLockDays(Integer backupDeleteLockDays) {
    this.backupDeleteLockDays = backupDeleteLockDays;
  }


  public RetentionPolicy backupRetainDays(Integer backupRetainDays) {
    this.backupRetainDays = backupRetainDays;
    return this;
  }

  /**
   * Optional. The default maximum age of a Backup created via this BackupPlan. This field MUST be an integer value &gt;&#x3D; 0 and &lt;&#x3D; 365. If specified, a Backup created under this BackupPlan will be automatically deleted after its age reaches (create_time + backup_retain_days). If not specified, Backups created under this BackupPlan will NOT be subject to automatic deletion. Updating this field does NOT affect existing Backups under it. Backups created AFTER a successful update will automatically pick up the new value. NOTE: backup_retain_days must be &gt;&#x3D; backup_delete_lock_days. If cron_schedule is defined, then this must be &lt;&#x3D; 360 * the creation interval. If rpo_config is defined, then this must be &lt;&#x3D; 360 * target_rpo_minutes / (1440minutes/day). Default: 0 (no automatic deletion)
   * @return backupRetainDays
   */
  @javax.annotation.Nullable
  public Integer getBackupRetainDays() {
    return backupRetainDays;
  }

  public void setBackupRetainDays(Integer backupRetainDays) {
    this.backupRetainDays = backupRetainDays;
  }


  public RetentionPolicy locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Optional. This flag denotes whether the retention policy of this BackupPlan is locked. If set to True, no further update is allowed on this policy, including the &#x60;locked&#x60; field itself. Default: False
   * @return locked
   */
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetentionPolicy retentionPolicy = (RetentionPolicy) o;
    return Objects.equals(this.backupDeleteLockDays, retentionPolicy.backupDeleteLockDays) &&
        Objects.equals(this.backupRetainDays, retentionPolicy.backupRetainDays) &&
        Objects.equals(this.locked, retentionPolicy.locked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupDeleteLockDays, backupRetainDays, locked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetentionPolicy {\n");
    sb.append("    backupDeleteLockDays: ").append(toIndentedString(backupDeleteLockDays)).append("\n");
    sb.append("    backupRetainDays: ").append(toIndentedString(backupRetainDays)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupDeleteLockDays");
    openapiFields.add("backupRetainDays");
    openapiFields.add("locked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RetentionPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetentionPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetentionPolicy is not found in the empty JSON string", RetentionPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RetentionPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetentionPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetentionPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetentionPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetentionPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetentionPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<RetentionPolicy>() {
           @Override
           public void write(JsonWriter out, RetentionPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetentionPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RetentionPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RetentionPolicy
   * @throws IOException if the JSON string is invalid with respect to RetentionPolicy
   */
  public static RetentionPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetentionPolicy.class);
  }

  /**
   * Convert an instance of RetentionPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

