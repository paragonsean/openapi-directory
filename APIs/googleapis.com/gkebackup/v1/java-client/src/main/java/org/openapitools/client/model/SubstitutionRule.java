/*
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GroupKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A transformation rule to be applied against Kubernetes resources as they are selected for restoration from a Backup. A rule contains both filtering logic (which resources are subject to substitution) and substitution logic.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:31.365638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubstitutionRule {
  public static final String SERIALIZED_NAME_NEW_VALUE = "newValue";
  @SerializedName(SERIALIZED_NAME_NEW_VALUE)
  private String newValue;

  public static final String SERIALIZED_NAME_ORIGINAL_VALUE_PATTERN = "originalValuePattern";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_VALUE_PATTERN)
  private String originalValuePattern;

  public static final String SERIALIZED_NAME_TARGET_GROUP_KINDS = "targetGroupKinds";
  @SerializedName(SERIALIZED_NAME_TARGET_GROUP_KINDS)
  private List<GroupKind> targetGroupKinds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_JSON_PATH = "targetJsonPath";
  @SerializedName(SERIALIZED_NAME_TARGET_JSON_PATH)
  private String targetJsonPath;

  public static final String SERIALIZED_NAME_TARGET_NAMESPACES = "targetNamespaces";
  @SerializedName(SERIALIZED_NAME_TARGET_NAMESPACES)
  private List<String> targetNamespaces = new ArrayList<>();

  public SubstitutionRule() {
  }

  public SubstitutionRule newValue(String newValue) {
    this.newValue = newValue;
    return this;
  }

  /**
   * Optional. This is the new value to set for any fields that pass the filtering and selection criteria. To remove a value from a Kubernetes resource, either leave this field unspecified, or set it to the empty string (\&quot;\&quot;).
   * @return newValue
   */
  @javax.annotation.Nullable
  public String getNewValue() {
    return newValue;
  }

  public void setNewValue(String newValue) {
    this.newValue = newValue;
  }


  public SubstitutionRule originalValuePattern(String originalValuePattern) {
    this.originalValuePattern = originalValuePattern;
    return this;
  }

  /**
   * Optional. (Filtering parameter) This is a [regular expression] (https://en.wikipedia.org/wiki/Regular_expression) that is compared against the fields matched by the target_json_path expression (and must also have passed the previous filters). Substitution will not be performed against fields whose value does not match this expression. If this field is NOT specified, then ALL fields matched by the target_json_path expression will undergo substitution. Note that an empty (e.g., \&quot;\&quot;, rather than unspecified) value for this field will only match empty fields.
   * @return originalValuePattern
   */
  @javax.annotation.Nullable
  public String getOriginalValuePattern() {
    return originalValuePattern;
  }

  public void setOriginalValuePattern(String originalValuePattern) {
    this.originalValuePattern = originalValuePattern;
  }


  public SubstitutionRule targetGroupKinds(List<GroupKind> targetGroupKinds) {
    this.targetGroupKinds = targetGroupKinds;
    return this;
  }

  public SubstitutionRule addTargetGroupKindsItem(GroupKind targetGroupKindsItem) {
    if (this.targetGroupKinds == null) {
      this.targetGroupKinds = new ArrayList<>();
    }
    this.targetGroupKinds.add(targetGroupKindsItem);
    return this;
  }

  /**
   * Optional. (Filtering parameter) Any resource subject to substitution must belong to one of the listed \&quot;types\&quot;. If this field is not provided, no type filtering will be performed (all resources of all types matching previous filtering parameters will be candidates for substitution).
   * @return targetGroupKinds
   */
  @javax.annotation.Nullable
  public List<GroupKind> getTargetGroupKinds() {
    return targetGroupKinds;
  }

  public void setTargetGroupKinds(List<GroupKind> targetGroupKinds) {
    this.targetGroupKinds = targetGroupKinds;
  }


  public SubstitutionRule targetJsonPath(String targetJsonPath) {
    this.targetJsonPath = targetJsonPath;
    return this;
  }

  /**
   * Required. This is a [JSONPath] (https://kubernetes.io/docs/reference/kubectl/jsonpath/) expression that matches specific fields of candidate resources and it operates as both a filtering parameter (resources that are not matched with this expression will not be candidates for substitution) as well as a field identifier (identifies exactly which fields out of the candidate resources will be modified).
   * @return targetJsonPath
   */
  @javax.annotation.Nullable
  public String getTargetJsonPath() {
    return targetJsonPath;
  }

  public void setTargetJsonPath(String targetJsonPath) {
    this.targetJsonPath = targetJsonPath;
  }


  public SubstitutionRule targetNamespaces(List<String> targetNamespaces) {
    this.targetNamespaces = targetNamespaces;
    return this;
  }

  public SubstitutionRule addTargetNamespacesItem(String targetNamespacesItem) {
    if (this.targetNamespaces == null) {
      this.targetNamespaces = new ArrayList<>();
    }
    this.targetNamespaces.add(targetNamespacesItem);
    return this;
  }

  /**
   * Optional. (Filtering parameter) Any resource subject to substitution must be contained within one of the listed Kubernetes Namespace in the Backup. If this field is not provided, no namespace filtering will be performed (all resources in all Namespaces, including all cluster-scoped resources, will be candidates for substitution). To mix cluster-scoped and namespaced resources in the same rule, use an empty string (\&quot;\&quot;) as one of the target namespaces.
   * @return targetNamespaces
   */
  @javax.annotation.Nullable
  public List<String> getTargetNamespaces() {
    return targetNamespaces;
  }

  public void setTargetNamespaces(List<String> targetNamespaces) {
    this.targetNamespaces = targetNamespaces;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubstitutionRule substitutionRule = (SubstitutionRule) o;
    return Objects.equals(this.newValue, substitutionRule.newValue) &&
        Objects.equals(this.originalValuePattern, substitutionRule.originalValuePattern) &&
        Objects.equals(this.targetGroupKinds, substitutionRule.targetGroupKinds) &&
        Objects.equals(this.targetJsonPath, substitutionRule.targetJsonPath) &&
        Objects.equals(this.targetNamespaces, substitutionRule.targetNamespaces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newValue, originalValuePattern, targetGroupKinds, targetJsonPath, targetNamespaces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubstitutionRule {\n");
    sb.append("    newValue: ").append(toIndentedString(newValue)).append("\n");
    sb.append("    originalValuePattern: ").append(toIndentedString(originalValuePattern)).append("\n");
    sb.append("    targetGroupKinds: ").append(toIndentedString(targetGroupKinds)).append("\n");
    sb.append("    targetJsonPath: ").append(toIndentedString(targetJsonPath)).append("\n");
    sb.append("    targetNamespaces: ").append(toIndentedString(targetNamespaces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("newValue");
    openapiFields.add("originalValuePattern");
    openapiFields.add("targetGroupKinds");
    openapiFields.add("targetJsonPath");
    openapiFields.add("targetNamespaces");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubstitutionRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubstitutionRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubstitutionRule is not found in the empty JSON string", SubstitutionRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubstitutionRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubstitutionRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("newValue") != null && !jsonObj.get("newValue").isJsonNull()) && !jsonObj.get("newValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newValue").toString()));
      }
      if ((jsonObj.get("originalValuePattern") != null && !jsonObj.get("originalValuePattern").isJsonNull()) && !jsonObj.get("originalValuePattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalValuePattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalValuePattern").toString()));
      }
      if (jsonObj.get("targetGroupKinds") != null && !jsonObj.get("targetGroupKinds").isJsonNull()) {
        JsonArray jsonArraytargetGroupKinds = jsonObj.getAsJsonArray("targetGroupKinds");
        if (jsonArraytargetGroupKinds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targetGroupKinds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targetGroupKinds` to be an array in the JSON string but got `%s`", jsonObj.get("targetGroupKinds").toString()));
          }

          // validate the optional field `targetGroupKinds` (array)
          for (int i = 0; i < jsonArraytargetGroupKinds.size(); i++) {
            GroupKind.validateJsonElement(jsonArraytargetGroupKinds.get(i));
          };
        }
      }
      if ((jsonObj.get("targetJsonPath") != null && !jsonObj.get("targetJsonPath").isJsonNull()) && !jsonObj.get("targetJsonPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetJsonPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetJsonPath").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetNamespaces") != null && !jsonObj.get("targetNamespaces").isJsonNull() && !jsonObj.get("targetNamespaces").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetNamespaces` to be an array in the JSON string but got `%s`", jsonObj.get("targetNamespaces").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubstitutionRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubstitutionRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubstitutionRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubstitutionRule.class));

       return (TypeAdapter<T>) new TypeAdapter<SubstitutionRule>() {
           @Override
           public void write(JsonWriter out, SubstitutionRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubstitutionRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubstitutionRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubstitutionRule
   * @throws IOException if the JSON string is invalid with respect to SubstitutionRule
   */
  public static SubstitutionRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubstitutionRule.class);
  }

  /**
   * Convert an instance of SubstitutionRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

