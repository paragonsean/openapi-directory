/*
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GroupKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceFilter specifies matching criteria to limit the scope of a change to a specific set of kubernetes resources that are selected for restoration from a backup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:31.365638-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceFilter {
  public static final String SERIALIZED_NAME_GROUP_KINDS = "groupKinds";
  @SerializedName(SERIALIZED_NAME_GROUP_KINDS)
  private List<GroupKind> groupKinds = new ArrayList<>();

  public static final String SERIALIZED_NAME_JSON_PATH = "jsonPath";
  @SerializedName(SERIALIZED_NAME_JSON_PATH)
  private String jsonPath;

  public static final String SERIALIZED_NAME_NAMESPACES = "namespaces";
  @SerializedName(SERIALIZED_NAME_NAMESPACES)
  private List<String> namespaces = new ArrayList<>();

  public ResourceFilter() {
  }

  public ResourceFilter groupKinds(List<GroupKind> groupKinds) {
    this.groupKinds = groupKinds;
    return this;
  }

  public ResourceFilter addGroupKindsItem(GroupKind groupKindsItem) {
    if (this.groupKinds == null) {
      this.groupKinds = new ArrayList<>();
    }
    this.groupKinds.add(groupKindsItem);
    return this;
  }

  /**
   * Optional. (Filtering parameter) Any resource subject to transformation must belong to one of the listed \&quot;types\&quot;. If this field is not provided, no type filtering will be performed (all resources of all types matching previous filtering parameters will be candidates for transformation).
   * @return groupKinds
   */
  @javax.annotation.Nullable
  public List<GroupKind> getGroupKinds() {
    return groupKinds;
  }

  public void setGroupKinds(List<GroupKind> groupKinds) {
    this.groupKinds = groupKinds;
  }


  public ResourceFilter jsonPath(String jsonPath) {
    this.jsonPath = jsonPath;
    return this;
  }

  /**
   * Optional. This is a [JSONPath] (https://github.com/json-path/JsonPath/blob/master/README.md) expression that matches specific fields of candidate resources and it operates as a filtering parameter (resources that are not matched with this expression will not be candidates for transformation).
   * @return jsonPath
   */
  @javax.annotation.Nullable
  public String getJsonPath() {
    return jsonPath;
  }

  public void setJsonPath(String jsonPath) {
    this.jsonPath = jsonPath;
  }


  public ResourceFilter namespaces(List<String> namespaces) {
    this.namespaces = namespaces;
    return this;
  }

  public ResourceFilter addNamespacesItem(String namespacesItem) {
    if (this.namespaces == null) {
      this.namespaces = new ArrayList<>();
    }
    this.namespaces.add(namespacesItem);
    return this;
  }

  /**
   * Optional. (Filtering parameter) Any resource subject to transformation must be contained within one of the listed Kubernetes Namespace in the Backup. If this field is not provided, no namespace filtering will be performed (all resources in all Namespaces, including all cluster-scoped resources, will be candidates for transformation).
   * @return namespaces
   */
  @javax.annotation.Nullable
  public List<String> getNamespaces() {
    return namespaces;
  }

  public void setNamespaces(List<String> namespaces) {
    this.namespaces = namespaces;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceFilter resourceFilter = (ResourceFilter) o;
    return Objects.equals(this.groupKinds, resourceFilter.groupKinds) &&
        Objects.equals(this.jsonPath, resourceFilter.jsonPath) &&
        Objects.equals(this.namespaces, resourceFilter.namespaces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupKinds, jsonPath, namespaces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceFilter {\n");
    sb.append("    groupKinds: ").append(toIndentedString(groupKinds)).append("\n");
    sb.append("    jsonPath: ").append(toIndentedString(jsonPath)).append("\n");
    sb.append("    namespaces: ").append(toIndentedString(namespaces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupKinds");
    openapiFields.add("jsonPath");
    openapiFields.add("namespaces");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceFilter is not found in the empty JSON string", ResourceFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("groupKinds") != null && !jsonObj.get("groupKinds").isJsonNull()) {
        JsonArray jsonArraygroupKinds = jsonObj.getAsJsonArray("groupKinds");
        if (jsonArraygroupKinds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupKinds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupKinds` to be an array in the JSON string but got `%s`", jsonObj.get("groupKinds").toString()));
          }

          // validate the optional field `groupKinds` (array)
          for (int i = 0; i < jsonArraygroupKinds.size(); i++) {
            GroupKind.validateJsonElement(jsonArraygroupKinds.get(i));
          };
        }
      }
      if ((jsonObj.get("jsonPath") != null && !jsonObj.get("jsonPath").isJsonNull()) && !jsonObj.get("jsonPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsonPath").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("namespaces") != null && !jsonObj.get("namespaces").isJsonNull() && !jsonObj.get("namespaces").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespaces` to be an array in the JSON string but got `%s`", jsonObj.get("namespaces").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceFilter>() {
           @Override
           public void write(JsonWriter out, ResourceFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceFilter
   * @throws IOException if the JSON string is invalid with respect to ResourceFilter
   */
  public static ResourceFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceFilter.class);
  }

  /**
   * Convert an instance of ResourceFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

