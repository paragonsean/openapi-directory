/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformationRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformationRule::OAITransformationRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformationRule::OAITransformationRule() {
    this->initializeModel();
}

OAITransformationRule::~OAITransformationRule() {}

void OAITransformationRule::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_field_actions_isSet = false;
    m_field_actions_isValid = false;

    m_resource_filter_isSet = false;
    m_resource_filter_isValid = false;
}

void OAITransformationRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformationRule::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_field_actions_isValid = ::OpenAPI::fromJsonValue(m_field_actions, json[QString("fieldActions")]);
    m_field_actions_isSet = !json[QString("fieldActions")].isNull() && m_field_actions_isValid;

    m_resource_filter_isValid = ::OpenAPI::fromJsonValue(m_resource_filter, json[QString("resourceFilter")]);
    m_resource_filter_isSet = !json[QString("resourceFilter")].isNull() && m_resource_filter_isValid;
}

QString OAITransformationRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformationRule::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_field_actions.size() > 0) {
        obj.insert(QString("fieldActions"), ::OpenAPI::toJsonValue(m_field_actions));
    }
    if (m_resource_filter.isSet()) {
        obj.insert(QString("resourceFilter"), ::OpenAPI::toJsonValue(m_resource_filter));
    }
    return obj;
}

QString OAITransformationRule::getDescription() const {
    return m_description;
}
void OAITransformationRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransformationRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransformationRule::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAITransformationRuleAction> OAITransformationRule::getFieldActions() const {
    return m_field_actions;
}
void OAITransformationRule::setFieldActions(const QList<OAITransformationRuleAction> &field_actions) {
    m_field_actions = field_actions;
    m_field_actions_isSet = true;
}

bool OAITransformationRule::is_field_actions_Set() const{
    return m_field_actions_isSet;
}

bool OAITransformationRule::is_field_actions_Valid() const{
    return m_field_actions_isValid;
}

OAIResourceFilter OAITransformationRule::getResourceFilter() const {
    return m_resource_filter;
}
void OAITransformationRule::setResourceFilter(const OAIResourceFilter &resource_filter) {
    m_resource_filter = resource_filter;
    m_resource_filter_isSet = true;
}

bool OAITransformationRule::is_resource_filter_Set() const{
    return m_resource_filter_isSet;
}

bool OAITransformationRule::is_resource_filter_Valid() const{
    return m_resource_filter_isValid;
}

bool OAITransformationRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformationRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
