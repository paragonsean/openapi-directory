/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRestoreConfig.h
 *
 * Configuration of a restore. Next id: 14
 */

#ifndef OAIRestoreConfig_H
#define OAIRestoreConfig_H

#include <QJsonObject>

#include "OAIClusterResourceRestoreScope.h"
#include "OAINamespacedNames.h"
#include "OAINamespaces.h"
#include "OAISubstitutionRule.h"
#include "OAITransformationRule.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClusterResourceRestoreScope;
class OAINamespaces;
class OAINamespacedNames;
class OAISubstitutionRule;
class OAITransformationRule;

class OAIRestoreConfig : public OAIObject {
public:
    OAIRestoreConfig();
    OAIRestoreConfig(QString json);
    ~OAIRestoreConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllNamespaces() const;
    void setAllNamespaces(const bool &all_namespaces);
    bool is_all_namespaces_Set() const;
    bool is_all_namespaces_Valid() const;

    QString getClusterResourceConflictPolicy() const;
    void setClusterResourceConflictPolicy(const QString &cluster_resource_conflict_policy);
    bool is_cluster_resource_conflict_policy_Set() const;
    bool is_cluster_resource_conflict_policy_Valid() const;

    OAIClusterResourceRestoreScope getClusterResourceRestoreScope() const;
    void setClusterResourceRestoreScope(const OAIClusterResourceRestoreScope &cluster_resource_restore_scope);
    bool is_cluster_resource_restore_scope_Set() const;
    bool is_cluster_resource_restore_scope_Valid() const;

    OAINamespaces getExcludedNamespaces() const;
    void setExcludedNamespaces(const OAINamespaces &excluded_namespaces);
    bool is_excluded_namespaces_Set() const;
    bool is_excluded_namespaces_Valid() const;

    QString getNamespacedResourceRestoreMode() const;
    void setNamespacedResourceRestoreMode(const QString &namespaced_resource_restore_mode);
    bool is_namespaced_resource_restore_mode_Set() const;
    bool is_namespaced_resource_restore_mode_Valid() const;

    bool isNoNamespaces() const;
    void setNoNamespaces(const bool &no_namespaces);
    bool is_no_namespaces_Set() const;
    bool is_no_namespaces_Valid() const;

    OAINamespacedNames getSelectedApplications() const;
    void setSelectedApplications(const OAINamespacedNames &selected_applications);
    bool is_selected_applications_Set() const;
    bool is_selected_applications_Valid() const;

    OAINamespaces getSelectedNamespaces() const;
    void setSelectedNamespaces(const OAINamespaces &selected_namespaces);
    bool is_selected_namespaces_Set() const;
    bool is_selected_namespaces_Valid() const;

    QList<OAISubstitutionRule> getSubstitutionRules() const;
    void setSubstitutionRules(const QList<OAISubstitutionRule> &substitution_rules);
    bool is_substitution_rules_Set() const;
    bool is_substitution_rules_Valid() const;

    QList<OAITransformationRule> getTransformationRules() const;
    void setTransformationRules(const QList<OAITransformationRule> &transformation_rules);
    bool is_transformation_rules_Set() const;
    bool is_transformation_rules_Valid() const;

    QString getVolumeDataRestorePolicy() const;
    void setVolumeDataRestorePolicy(const QString &volume_data_restore_policy);
    bool is_volume_data_restore_policy_Set() const;
    bool is_volume_data_restore_policy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_all_namespaces;
    bool m_all_namespaces_isSet;
    bool m_all_namespaces_isValid;

    QString m_cluster_resource_conflict_policy;
    bool m_cluster_resource_conflict_policy_isSet;
    bool m_cluster_resource_conflict_policy_isValid;

    OAIClusterResourceRestoreScope m_cluster_resource_restore_scope;
    bool m_cluster_resource_restore_scope_isSet;
    bool m_cluster_resource_restore_scope_isValid;

    OAINamespaces m_excluded_namespaces;
    bool m_excluded_namespaces_isSet;
    bool m_excluded_namespaces_isValid;

    QString m_namespaced_resource_restore_mode;
    bool m_namespaced_resource_restore_mode_isSet;
    bool m_namespaced_resource_restore_mode_isValid;

    bool m_no_namespaces;
    bool m_no_namespaces_isSet;
    bool m_no_namespaces_isValid;

    OAINamespacedNames m_selected_applications;
    bool m_selected_applications_isSet;
    bool m_selected_applications_isValid;

    OAINamespaces m_selected_namespaces;
    bool m_selected_namespaces_isSet;
    bool m_selected_namespaces_isValid;

    QList<OAISubstitutionRule> m_substitution_rules;
    bool m_substitution_rules_isSet;
    bool m_substitution_rules_isValid;

    QList<OAITransformationRule> m_transformation_rules;
    bool m_transformation_rules_isSet;
    bool m_transformation_rules_isValid;

    QString m_volume_data_restore_policy;
    bool m_volume_data_restore_policy_isSet;
    bool m_volume_data_restore_policy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRestoreConfig)

#endif // OAIRestoreConfig_H
