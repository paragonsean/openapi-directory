/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackup::OAIBackup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackup::OAIBackup() {
    this->initializeModel();
}

OAIBackup::~OAIBackup() {}

void OAIBackup::initializeModel() {

    m_all_namespaces_isSet = false;
    m_all_namespaces_isValid = false;

    m_cluster_metadata_isSet = false;
    m_cluster_metadata_isValid = false;

    m_complete_time_isSet = false;
    m_complete_time_isValid = false;

    m_config_backup_size_bytes_isSet = false;
    m_config_backup_size_bytes_isValid = false;

    m_contains_secrets_isSet = false;
    m_contains_secrets_isValid = false;

    m_contains_volume_data_isSet = false;
    m_contains_volume_data_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_lock_days_isSet = false;
    m_delete_lock_days_isValid = false;

    m_delete_lock_expire_time_isSet = false;
    m_delete_lock_expire_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_manual_isSet = false;
    m_manual_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pod_count_isSet = false;
    m_pod_count_isValid = false;

    m_resource_count_isSet = false;
    m_resource_count_isValid = false;

    m_retain_days_isSet = false;
    m_retain_days_isValid = false;

    m_retain_expire_time_isSet = false;
    m_retain_expire_time_isValid = false;

    m_selected_applications_isSet = false;
    m_selected_applications_isValid = false;

    m_selected_namespaces_isSet = false;
    m_selected_namespaces_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_reason_isSet = false;
    m_state_reason_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_volume_count_isSet = false;
    m_volume_count_isValid = false;
}

void OAIBackup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackup::fromJsonObject(QJsonObject json) {

    m_all_namespaces_isValid = ::OpenAPI::fromJsonValue(m_all_namespaces, json[QString("allNamespaces")]);
    m_all_namespaces_isSet = !json[QString("allNamespaces")].isNull() && m_all_namespaces_isValid;

    m_cluster_metadata_isValid = ::OpenAPI::fromJsonValue(m_cluster_metadata, json[QString("clusterMetadata")]);
    m_cluster_metadata_isSet = !json[QString("clusterMetadata")].isNull() && m_cluster_metadata_isValid;

    m_complete_time_isValid = ::OpenAPI::fromJsonValue(m_complete_time, json[QString("completeTime")]);
    m_complete_time_isSet = !json[QString("completeTime")].isNull() && m_complete_time_isValid;

    m_config_backup_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_config_backup_size_bytes, json[QString("configBackupSizeBytes")]);
    m_config_backup_size_bytes_isSet = !json[QString("configBackupSizeBytes")].isNull() && m_config_backup_size_bytes_isValid;

    m_contains_secrets_isValid = ::OpenAPI::fromJsonValue(m_contains_secrets, json[QString("containsSecrets")]);
    m_contains_secrets_isSet = !json[QString("containsSecrets")].isNull() && m_contains_secrets_isValid;

    m_contains_volume_data_isValid = ::OpenAPI::fromJsonValue(m_contains_volume_data, json[QString("containsVolumeData")]);
    m_contains_volume_data_isSet = !json[QString("containsVolumeData")].isNull() && m_contains_volume_data_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_lock_days_isValid = ::OpenAPI::fromJsonValue(m_delete_lock_days, json[QString("deleteLockDays")]);
    m_delete_lock_days_isSet = !json[QString("deleteLockDays")].isNull() && m_delete_lock_days_isValid;

    m_delete_lock_expire_time_isValid = ::OpenAPI::fromJsonValue(m_delete_lock_expire_time, json[QString("deleteLockExpireTime")]);
    m_delete_lock_expire_time_isSet = !json[QString("deleteLockExpireTime")].isNull() && m_delete_lock_expire_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("encryptionKey")]);
    m_encryption_key_isSet = !json[QString("encryptionKey")].isNull() && m_encryption_key_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_manual_isValid = ::OpenAPI::fromJsonValue(m_manual, json[QString("manual")]);
    m_manual_isSet = !json[QString("manual")].isNull() && m_manual_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pod_count_isValid = ::OpenAPI::fromJsonValue(m_pod_count, json[QString("podCount")]);
    m_pod_count_isSet = !json[QString("podCount")].isNull() && m_pod_count_isValid;

    m_resource_count_isValid = ::OpenAPI::fromJsonValue(m_resource_count, json[QString("resourceCount")]);
    m_resource_count_isSet = !json[QString("resourceCount")].isNull() && m_resource_count_isValid;

    m_retain_days_isValid = ::OpenAPI::fromJsonValue(m_retain_days, json[QString("retainDays")]);
    m_retain_days_isSet = !json[QString("retainDays")].isNull() && m_retain_days_isValid;

    m_retain_expire_time_isValid = ::OpenAPI::fromJsonValue(m_retain_expire_time, json[QString("retainExpireTime")]);
    m_retain_expire_time_isSet = !json[QString("retainExpireTime")].isNull() && m_retain_expire_time_isValid;

    m_selected_applications_isValid = ::OpenAPI::fromJsonValue(m_selected_applications, json[QString("selectedApplications")]);
    m_selected_applications_isSet = !json[QString("selectedApplications")].isNull() && m_selected_applications_isValid;

    m_selected_namespaces_isValid = ::OpenAPI::fromJsonValue(m_selected_namespaces, json[QString("selectedNamespaces")]);
    m_selected_namespaces_isSet = !json[QString("selectedNamespaces")].isNull() && m_selected_namespaces_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("sizeBytes")]);
    m_size_bytes_isSet = !json[QString("sizeBytes")].isNull() && m_size_bytes_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_reason_isValid = ::OpenAPI::fromJsonValue(m_state_reason, json[QString("stateReason")]);
    m_state_reason_isSet = !json[QString("stateReason")].isNull() && m_state_reason_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_volume_count_isValid = ::OpenAPI::fromJsonValue(m_volume_count, json[QString("volumeCount")]);
    m_volume_count_isSet = !json[QString("volumeCount")].isNull() && m_volume_count_isValid;
}

QString OAIBackup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackup::asJsonObject() const {
    QJsonObject obj;
    if (m_all_namespaces_isSet) {
        obj.insert(QString("allNamespaces"), ::OpenAPI::toJsonValue(m_all_namespaces));
    }
    if (m_cluster_metadata.isSet()) {
        obj.insert(QString("clusterMetadata"), ::OpenAPI::toJsonValue(m_cluster_metadata));
    }
    if (m_complete_time_isSet) {
        obj.insert(QString("completeTime"), ::OpenAPI::toJsonValue(m_complete_time));
    }
    if (m_config_backup_size_bytes_isSet) {
        obj.insert(QString("configBackupSizeBytes"), ::OpenAPI::toJsonValue(m_config_backup_size_bytes));
    }
    if (m_contains_secrets_isSet) {
        obj.insert(QString("containsSecrets"), ::OpenAPI::toJsonValue(m_contains_secrets));
    }
    if (m_contains_volume_data_isSet) {
        obj.insert(QString("containsVolumeData"), ::OpenAPI::toJsonValue(m_contains_volume_data));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_lock_days_isSet) {
        obj.insert(QString("deleteLockDays"), ::OpenAPI::toJsonValue(m_delete_lock_days));
    }
    if (m_delete_lock_expire_time_isSet) {
        obj.insert(QString("deleteLockExpireTime"), ::OpenAPI::toJsonValue(m_delete_lock_expire_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_encryption_key.isSet()) {
        obj.insert(QString("encryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_manual_isSet) {
        obj.insert(QString("manual"), ::OpenAPI::toJsonValue(m_manual));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pod_count_isSet) {
        obj.insert(QString("podCount"), ::OpenAPI::toJsonValue(m_pod_count));
    }
    if (m_resource_count_isSet) {
        obj.insert(QString("resourceCount"), ::OpenAPI::toJsonValue(m_resource_count));
    }
    if (m_retain_days_isSet) {
        obj.insert(QString("retainDays"), ::OpenAPI::toJsonValue(m_retain_days));
    }
    if (m_retain_expire_time_isSet) {
        obj.insert(QString("retainExpireTime"), ::OpenAPI::toJsonValue(m_retain_expire_time));
    }
    if (m_selected_applications.isSet()) {
        obj.insert(QString("selectedApplications"), ::OpenAPI::toJsonValue(m_selected_applications));
    }
    if (m_selected_namespaces.isSet()) {
        obj.insert(QString("selectedNamespaces"), ::OpenAPI::toJsonValue(m_selected_namespaces));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("sizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_reason_isSet) {
        obj.insert(QString("stateReason"), ::OpenAPI::toJsonValue(m_state_reason));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_volume_count_isSet) {
        obj.insert(QString("volumeCount"), ::OpenAPI::toJsonValue(m_volume_count));
    }
    return obj;
}

bool OAIBackup::isAllNamespaces() const {
    return m_all_namespaces;
}
void OAIBackup::setAllNamespaces(const bool &all_namespaces) {
    m_all_namespaces = all_namespaces;
    m_all_namespaces_isSet = true;
}

bool OAIBackup::is_all_namespaces_Set() const{
    return m_all_namespaces_isSet;
}

bool OAIBackup::is_all_namespaces_Valid() const{
    return m_all_namespaces_isValid;
}

OAIClusterMetadata OAIBackup::getClusterMetadata() const {
    return m_cluster_metadata;
}
void OAIBackup::setClusterMetadata(const OAIClusterMetadata &cluster_metadata) {
    m_cluster_metadata = cluster_metadata;
    m_cluster_metadata_isSet = true;
}

bool OAIBackup::is_cluster_metadata_Set() const{
    return m_cluster_metadata_isSet;
}

bool OAIBackup::is_cluster_metadata_Valid() const{
    return m_cluster_metadata_isValid;
}

QString OAIBackup::getCompleteTime() const {
    return m_complete_time;
}
void OAIBackup::setCompleteTime(const QString &complete_time) {
    m_complete_time = complete_time;
    m_complete_time_isSet = true;
}

bool OAIBackup::is_complete_time_Set() const{
    return m_complete_time_isSet;
}

bool OAIBackup::is_complete_time_Valid() const{
    return m_complete_time_isValid;
}

QString OAIBackup::getConfigBackupSizeBytes() const {
    return m_config_backup_size_bytes;
}
void OAIBackup::setConfigBackupSizeBytes(const QString &config_backup_size_bytes) {
    m_config_backup_size_bytes = config_backup_size_bytes;
    m_config_backup_size_bytes_isSet = true;
}

bool OAIBackup::is_config_backup_size_bytes_Set() const{
    return m_config_backup_size_bytes_isSet;
}

bool OAIBackup::is_config_backup_size_bytes_Valid() const{
    return m_config_backup_size_bytes_isValid;
}

bool OAIBackup::isContainsSecrets() const {
    return m_contains_secrets;
}
void OAIBackup::setContainsSecrets(const bool &contains_secrets) {
    m_contains_secrets = contains_secrets;
    m_contains_secrets_isSet = true;
}

bool OAIBackup::is_contains_secrets_Set() const{
    return m_contains_secrets_isSet;
}

bool OAIBackup::is_contains_secrets_Valid() const{
    return m_contains_secrets_isValid;
}

bool OAIBackup::isContainsVolumeData() const {
    return m_contains_volume_data;
}
void OAIBackup::setContainsVolumeData(const bool &contains_volume_data) {
    m_contains_volume_data = contains_volume_data;
    m_contains_volume_data_isSet = true;
}

bool OAIBackup::is_contains_volume_data_Set() const{
    return m_contains_volume_data_isSet;
}

bool OAIBackup::is_contains_volume_data_Valid() const{
    return m_contains_volume_data_isValid;
}

QString OAIBackup::getCreateTime() const {
    return m_create_time;
}
void OAIBackup::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBackup::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBackup::is_create_time_Valid() const{
    return m_create_time_isValid;
}

qint32 OAIBackup::getDeleteLockDays() const {
    return m_delete_lock_days;
}
void OAIBackup::setDeleteLockDays(const qint32 &delete_lock_days) {
    m_delete_lock_days = delete_lock_days;
    m_delete_lock_days_isSet = true;
}

bool OAIBackup::is_delete_lock_days_Set() const{
    return m_delete_lock_days_isSet;
}

bool OAIBackup::is_delete_lock_days_Valid() const{
    return m_delete_lock_days_isValid;
}

QString OAIBackup::getDeleteLockExpireTime() const {
    return m_delete_lock_expire_time;
}
void OAIBackup::setDeleteLockExpireTime(const QString &delete_lock_expire_time) {
    m_delete_lock_expire_time = delete_lock_expire_time;
    m_delete_lock_expire_time_isSet = true;
}

bool OAIBackup::is_delete_lock_expire_time_Set() const{
    return m_delete_lock_expire_time_isSet;
}

bool OAIBackup::is_delete_lock_expire_time_Valid() const{
    return m_delete_lock_expire_time_isValid;
}

QString OAIBackup::getDescription() const {
    return m_description;
}
void OAIBackup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBackup::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBackup::is_description_Valid() const{
    return m_description_isValid;
}

OAIEncryptionKey OAIBackup::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIBackup::setEncryptionKey(const OAIEncryptionKey &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIBackup::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIBackup::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

QString OAIBackup::getEtag() const {
    return m_etag;
}
void OAIBackup::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIBackup::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIBackup::is_etag_Valid() const{
    return m_etag_isValid;
}

QMap<QString, QString> OAIBackup::getLabels() const {
    return m_labels;
}
void OAIBackup::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIBackup::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIBackup::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAIBackup::isManual() const {
    return m_manual;
}
void OAIBackup::setManual(const bool &manual) {
    m_manual = manual;
    m_manual_isSet = true;
}

bool OAIBackup::is_manual_Set() const{
    return m_manual_isSet;
}

bool OAIBackup::is_manual_Valid() const{
    return m_manual_isValid;
}

QString OAIBackup::getName() const {
    return m_name;
}
void OAIBackup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBackup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBackup::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIBackup::getPodCount() const {
    return m_pod_count;
}
void OAIBackup::setPodCount(const qint32 &pod_count) {
    m_pod_count = pod_count;
    m_pod_count_isSet = true;
}

bool OAIBackup::is_pod_count_Set() const{
    return m_pod_count_isSet;
}

bool OAIBackup::is_pod_count_Valid() const{
    return m_pod_count_isValid;
}

qint32 OAIBackup::getResourceCount() const {
    return m_resource_count;
}
void OAIBackup::setResourceCount(const qint32 &resource_count) {
    m_resource_count = resource_count;
    m_resource_count_isSet = true;
}

bool OAIBackup::is_resource_count_Set() const{
    return m_resource_count_isSet;
}

bool OAIBackup::is_resource_count_Valid() const{
    return m_resource_count_isValid;
}

qint32 OAIBackup::getRetainDays() const {
    return m_retain_days;
}
void OAIBackup::setRetainDays(const qint32 &retain_days) {
    m_retain_days = retain_days;
    m_retain_days_isSet = true;
}

bool OAIBackup::is_retain_days_Set() const{
    return m_retain_days_isSet;
}

bool OAIBackup::is_retain_days_Valid() const{
    return m_retain_days_isValid;
}

QString OAIBackup::getRetainExpireTime() const {
    return m_retain_expire_time;
}
void OAIBackup::setRetainExpireTime(const QString &retain_expire_time) {
    m_retain_expire_time = retain_expire_time;
    m_retain_expire_time_isSet = true;
}

bool OAIBackup::is_retain_expire_time_Set() const{
    return m_retain_expire_time_isSet;
}

bool OAIBackup::is_retain_expire_time_Valid() const{
    return m_retain_expire_time_isValid;
}

OAINamespacedNames OAIBackup::getSelectedApplications() const {
    return m_selected_applications;
}
void OAIBackup::setSelectedApplications(const OAINamespacedNames &selected_applications) {
    m_selected_applications = selected_applications;
    m_selected_applications_isSet = true;
}

bool OAIBackup::is_selected_applications_Set() const{
    return m_selected_applications_isSet;
}

bool OAIBackup::is_selected_applications_Valid() const{
    return m_selected_applications_isValid;
}

OAINamespaces OAIBackup::getSelectedNamespaces() const {
    return m_selected_namespaces;
}
void OAIBackup::setSelectedNamespaces(const OAINamespaces &selected_namespaces) {
    m_selected_namespaces = selected_namespaces;
    m_selected_namespaces_isSet = true;
}

bool OAIBackup::is_selected_namespaces_Set() const{
    return m_selected_namespaces_isSet;
}

bool OAIBackup::is_selected_namespaces_Valid() const{
    return m_selected_namespaces_isValid;
}

QString OAIBackup::getSizeBytes() const {
    return m_size_bytes;
}
void OAIBackup::setSizeBytes(const QString &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAIBackup::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAIBackup::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

QString OAIBackup::getState() const {
    return m_state;
}
void OAIBackup::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBackup::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBackup::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIBackup::getStateReason() const {
    return m_state_reason;
}
void OAIBackup::setStateReason(const QString &state_reason) {
    m_state_reason = state_reason;
    m_state_reason_isSet = true;
}

bool OAIBackup::is_state_reason_Set() const{
    return m_state_reason_isSet;
}

bool OAIBackup::is_state_reason_Valid() const{
    return m_state_reason_isValid;
}

QString OAIBackup::getUid() const {
    return m_uid;
}
void OAIBackup::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIBackup::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIBackup::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIBackup::getUpdateTime() const {
    return m_update_time;
}
void OAIBackup::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIBackup::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIBackup::is_update_time_Valid() const{
    return m_update_time_isValid;
}

qint32 OAIBackup::getVolumeCount() const {
    return m_volume_count;
}
void OAIBackup::setVolumeCount(const qint32 &volume_count) {
    m_volume_count = volume_count;
    m_volume_count_isSet = true;
}

bool OAIBackup::is_volume_count_Set() const{
    return m_volume_count_isSet;
}

bool OAIBackup::is_volume_count_Valid() const{
    return m_volume_count_isValid;
}

bool OAIBackup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_namespaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_backup_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_secrets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_volume_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_lock_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_lock_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_applications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_namespaces.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
