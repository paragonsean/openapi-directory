/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreConfig::OAIRestoreConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreConfig::OAIRestoreConfig() {
    this->initializeModel();
}

OAIRestoreConfig::~OAIRestoreConfig() {}

void OAIRestoreConfig::initializeModel() {

    m_all_namespaces_isSet = false;
    m_all_namespaces_isValid = false;

    m_cluster_resource_conflict_policy_isSet = false;
    m_cluster_resource_conflict_policy_isValid = false;

    m_cluster_resource_restore_scope_isSet = false;
    m_cluster_resource_restore_scope_isValid = false;

    m_excluded_namespaces_isSet = false;
    m_excluded_namespaces_isValid = false;

    m_namespaced_resource_restore_mode_isSet = false;
    m_namespaced_resource_restore_mode_isValid = false;

    m_no_namespaces_isSet = false;
    m_no_namespaces_isValid = false;

    m_selected_applications_isSet = false;
    m_selected_applications_isValid = false;

    m_selected_namespaces_isSet = false;
    m_selected_namespaces_isValid = false;

    m_substitution_rules_isSet = false;
    m_substitution_rules_isValid = false;

    m_transformation_rules_isSet = false;
    m_transformation_rules_isValid = false;

    m_volume_data_restore_policy_isSet = false;
    m_volume_data_restore_policy_isValid = false;
}

void OAIRestoreConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreConfig::fromJsonObject(QJsonObject json) {

    m_all_namespaces_isValid = ::OpenAPI::fromJsonValue(m_all_namespaces, json[QString("allNamespaces")]);
    m_all_namespaces_isSet = !json[QString("allNamespaces")].isNull() && m_all_namespaces_isValid;

    m_cluster_resource_conflict_policy_isValid = ::OpenAPI::fromJsonValue(m_cluster_resource_conflict_policy, json[QString("clusterResourceConflictPolicy")]);
    m_cluster_resource_conflict_policy_isSet = !json[QString("clusterResourceConflictPolicy")].isNull() && m_cluster_resource_conflict_policy_isValid;

    m_cluster_resource_restore_scope_isValid = ::OpenAPI::fromJsonValue(m_cluster_resource_restore_scope, json[QString("clusterResourceRestoreScope")]);
    m_cluster_resource_restore_scope_isSet = !json[QString("clusterResourceRestoreScope")].isNull() && m_cluster_resource_restore_scope_isValid;

    m_excluded_namespaces_isValid = ::OpenAPI::fromJsonValue(m_excluded_namespaces, json[QString("excludedNamespaces")]);
    m_excluded_namespaces_isSet = !json[QString("excludedNamespaces")].isNull() && m_excluded_namespaces_isValid;

    m_namespaced_resource_restore_mode_isValid = ::OpenAPI::fromJsonValue(m_namespaced_resource_restore_mode, json[QString("namespacedResourceRestoreMode")]);
    m_namespaced_resource_restore_mode_isSet = !json[QString("namespacedResourceRestoreMode")].isNull() && m_namespaced_resource_restore_mode_isValid;

    m_no_namespaces_isValid = ::OpenAPI::fromJsonValue(m_no_namespaces, json[QString("noNamespaces")]);
    m_no_namespaces_isSet = !json[QString("noNamespaces")].isNull() && m_no_namespaces_isValid;

    m_selected_applications_isValid = ::OpenAPI::fromJsonValue(m_selected_applications, json[QString("selectedApplications")]);
    m_selected_applications_isSet = !json[QString("selectedApplications")].isNull() && m_selected_applications_isValid;

    m_selected_namespaces_isValid = ::OpenAPI::fromJsonValue(m_selected_namespaces, json[QString("selectedNamespaces")]);
    m_selected_namespaces_isSet = !json[QString("selectedNamespaces")].isNull() && m_selected_namespaces_isValid;

    m_substitution_rules_isValid = ::OpenAPI::fromJsonValue(m_substitution_rules, json[QString("substitutionRules")]);
    m_substitution_rules_isSet = !json[QString("substitutionRules")].isNull() && m_substitution_rules_isValid;

    m_transformation_rules_isValid = ::OpenAPI::fromJsonValue(m_transformation_rules, json[QString("transformationRules")]);
    m_transformation_rules_isSet = !json[QString("transformationRules")].isNull() && m_transformation_rules_isValid;

    m_volume_data_restore_policy_isValid = ::OpenAPI::fromJsonValue(m_volume_data_restore_policy, json[QString("volumeDataRestorePolicy")]);
    m_volume_data_restore_policy_isSet = !json[QString("volumeDataRestorePolicy")].isNull() && m_volume_data_restore_policy_isValid;
}

QString OAIRestoreConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_all_namespaces_isSet) {
        obj.insert(QString("allNamespaces"), ::OpenAPI::toJsonValue(m_all_namespaces));
    }
    if (m_cluster_resource_conflict_policy_isSet) {
        obj.insert(QString("clusterResourceConflictPolicy"), ::OpenAPI::toJsonValue(m_cluster_resource_conflict_policy));
    }
    if (m_cluster_resource_restore_scope.isSet()) {
        obj.insert(QString("clusterResourceRestoreScope"), ::OpenAPI::toJsonValue(m_cluster_resource_restore_scope));
    }
    if (m_excluded_namespaces.isSet()) {
        obj.insert(QString("excludedNamespaces"), ::OpenAPI::toJsonValue(m_excluded_namespaces));
    }
    if (m_namespaced_resource_restore_mode_isSet) {
        obj.insert(QString("namespacedResourceRestoreMode"), ::OpenAPI::toJsonValue(m_namespaced_resource_restore_mode));
    }
    if (m_no_namespaces_isSet) {
        obj.insert(QString("noNamespaces"), ::OpenAPI::toJsonValue(m_no_namespaces));
    }
    if (m_selected_applications.isSet()) {
        obj.insert(QString("selectedApplications"), ::OpenAPI::toJsonValue(m_selected_applications));
    }
    if (m_selected_namespaces.isSet()) {
        obj.insert(QString("selectedNamespaces"), ::OpenAPI::toJsonValue(m_selected_namespaces));
    }
    if (m_substitution_rules.size() > 0) {
        obj.insert(QString("substitutionRules"), ::OpenAPI::toJsonValue(m_substitution_rules));
    }
    if (m_transformation_rules.size() > 0) {
        obj.insert(QString("transformationRules"), ::OpenAPI::toJsonValue(m_transformation_rules));
    }
    if (m_volume_data_restore_policy_isSet) {
        obj.insert(QString("volumeDataRestorePolicy"), ::OpenAPI::toJsonValue(m_volume_data_restore_policy));
    }
    return obj;
}

bool OAIRestoreConfig::isAllNamespaces() const {
    return m_all_namespaces;
}
void OAIRestoreConfig::setAllNamespaces(const bool &all_namespaces) {
    m_all_namespaces = all_namespaces;
    m_all_namespaces_isSet = true;
}

bool OAIRestoreConfig::is_all_namespaces_Set() const{
    return m_all_namespaces_isSet;
}

bool OAIRestoreConfig::is_all_namespaces_Valid() const{
    return m_all_namespaces_isValid;
}

QString OAIRestoreConfig::getClusterResourceConflictPolicy() const {
    return m_cluster_resource_conflict_policy;
}
void OAIRestoreConfig::setClusterResourceConflictPolicy(const QString &cluster_resource_conflict_policy) {
    m_cluster_resource_conflict_policy = cluster_resource_conflict_policy;
    m_cluster_resource_conflict_policy_isSet = true;
}

bool OAIRestoreConfig::is_cluster_resource_conflict_policy_Set() const{
    return m_cluster_resource_conflict_policy_isSet;
}

bool OAIRestoreConfig::is_cluster_resource_conflict_policy_Valid() const{
    return m_cluster_resource_conflict_policy_isValid;
}

OAIClusterResourceRestoreScope OAIRestoreConfig::getClusterResourceRestoreScope() const {
    return m_cluster_resource_restore_scope;
}
void OAIRestoreConfig::setClusterResourceRestoreScope(const OAIClusterResourceRestoreScope &cluster_resource_restore_scope) {
    m_cluster_resource_restore_scope = cluster_resource_restore_scope;
    m_cluster_resource_restore_scope_isSet = true;
}

bool OAIRestoreConfig::is_cluster_resource_restore_scope_Set() const{
    return m_cluster_resource_restore_scope_isSet;
}

bool OAIRestoreConfig::is_cluster_resource_restore_scope_Valid() const{
    return m_cluster_resource_restore_scope_isValid;
}

OAINamespaces OAIRestoreConfig::getExcludedNamespaces() const {
    return m_excluded_namespaces;
}
void OAIRestoreConfig::setExcludedNamespaces(const OAINamespaces &excluded_namespaces) {
    m_excluded_namespaces = excluded_namespaces;
    m_excluded_namespaces_isSet = true;
}

bool OAIRestoreConfig::is_excluded_namespaces_Set() const{
    return m_excluded_namespaces_isSet;
}

bool OAIRestoreConfig::is_excluded_namespaces_Valid() const{
    return m_excluded_namespaces_isValid;
}

QString OAIRestoreConfig::getNamespacedResourceRestoreMode() const {
    return m_namespaced_resource_restore_mode;
}
void OAIRestoreConfig::setNamespacedResourceRestoreMode(const QString &namespaced_resource_restore_mode) {
    m_namespaced_resource_restore_mode = namespaced_resource_restore_mode;
    m_namespaced_resource_restore_mode_isSet = true;
}

bool OAIRestoreConfig::is_namespaced_resource_restore_mode_Set() const{
    return m_namespaced_resource_restore_mode_isSet;
}

bool OAIRestoreConfig::is_namespaced_resource_restore_mode_Valid() const{
    return m_namespaced_resource_restore_mode_isValid;
}

bool OAIRestoreConfig::isNoNamespaces() const {
    return m_no_namespaces;
}
void OAIRestoreConfig::setNoNamespaces(const bool &no_namespaces) {
    m_no_namespaces = no_namespaces;
    m_no_namespaces_isSet = true;
}

bool OAIRestoreConfig::is_no_namespaces_Set() const{
    return m_no_namespaces_isSet;
}

bool OAIRestoreConfig::is_no_namespaces_Valid() const{
    return m_no_namespaces_isValid;
}

OAINamespacedNames OAIRestoreConfig::getSelectedApplications() const {
    return m_selected_applications;
}
void OAIRestoreConfig::setSelectedApplications(const OAINamespacedNames &selected_applications) {
    m_selected_applications = selected_applications;
    m_selected_applications_isSet = true;
}

bool OAIRestoreConfig::is_selected_applications_Set() const{
    return m_selected_applications_isSet;
}

bool OAIRestoreConfig::is_selected_applications_Valid() const{
    return m_selected_applications_isValid;
}

OAINamespaces OAIRestoreConfig::getSelectedNamespaces() const {
    return m_selected_namespaces;
}
void OAIRestoreConfig::setSelectedNamespaces(const OAINamespaces &selected_namespaces) {
    m_selected_namespaces = selected_namespaces;
    m_selected_namespaces_isSet = true;
}

bool OAIRestoreConfig::is_selected_namespaces_Set() const{
    return m_selected_namespaces_isSet;
}

bool OAIRestoreConfig::is_selected_namespaces_Valid() const{
    return m_selected_namespaces_isValid;
}

QList<OAISubstitutionRule> OAIRestoreConfig::getSubstitutionRules() const {
    return m_substitution_rules;
}
void OAIRestoreConfig::setSubstitutionRules(const QList<OAISubstitutionRule> &substitution_rules) {
    m_substitution_rules = substitution_rules;
    m_substitution_rules_isSet = true;
}

bool OAIRestoreConfig::is_substitution_rules_Set() const{
    return m_substitution_rules_isSet;
}

bool OAIRestoreConfig::is_substitution_rules_Valid() const{
    return m_substitution_rules_isValid;
}

QList<OAITransformationRule> OAIRestoreConfig::getTransformationRules() const {
    return m_transformation_rules;
}
void OAIRestoreConfig::setTransformationRules(const QList<OAITransformationRule> &transformation_rules) {
    m_transformation_rules = transformation_rules;
    m_transformation_rules_isSet = true;
}

bool OAIRestoreConfig::is_transformation_rules_Set() const{
    return m_transformation_rules_isSet;
}

bool OAIRestoreConfig::is_transformation_rules_Valid() const{
    return m_transformation_rules_isValid;
}

QString OAIRestoreConfig::getVolumeDataRestorePolicy() const {
    return m_volume_data_restore_policy;
}
void OAIRestoreConfig::setVolumeDataRestorePolicy(const QString &volume_data_restore_policy) {
    m_volume_data_restore_policy = volume_data_restore_policy;
    m_volume_data_restore_policy_isSet = true;
}

bool OAIRestoreConfig::is_volume_data_restore_policy_Set() const{
    return m_volume_data_restore_policy_isSet;
}

bool OAIRestoreConfig::is_volume_data_restore_policy_Valid() const{
    return m_volume_data_restore_policy_isValid;
}

bool OAIRestoreConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_namespaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_resource_conflict_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_resource_restore_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_namespaces.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespaced_resource_restore_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_namespaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_applications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_namespaces.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_substitution_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformation_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_data_restore_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
