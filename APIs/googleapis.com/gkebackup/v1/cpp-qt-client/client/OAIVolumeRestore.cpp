/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeRestore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeRestore::OAIVolumeRestore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeRestore::OAIVolumeRestore() {
    this->initializeModel();
}

OAIVolumeRestore::~OAIVolumeRestore() {}

void OAIVolumeRestore::initializeModel() {

    m_complete_time_isSet = false;
    m_complete_time_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_message_isSet = false;
    m_state_message_isValid = false;

    m_target_pvc_isSet = false;
    m_target_pvc_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_volume_backup_isSet = false;
    m_volume_backup_isValid = false;

    m_volume_handle_isSet = false;
    m_volume_handle_isValid = false;

    m_volume_type_isSet = false;
    m_volume_type_isValid = false;
}

void OAIVolumeRestore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeRestore::fromJsonObject(QJsonObject json) {

    m_complete_time_isValid = ::OpenAPI::fromJsonValue(m_complete_time, json[QString("completeTime")]);
    m_complete_time_isSet = !json[QString("completeTime")].isNull() && m_complete_time_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_message_isValid = ::OpenAPI::fromJsonValue(m_state_message, json[QString("stateMessage")]);
    m_state_message_isSet = !json[QString("stateMessage")].isNull() && m_state_message_isValid;

    m_target_pvc_isValid = ::OpenAPI::fromJsonValue(m_target_pvc, json[QString("targetPvc")]);
    m_target_pvc_isSet = !json[QString("targetPvc")].isNull() && m_target_pvc_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_volume_backup_isValid = ::OpenAPI::fromJsonValue(m_volume_backup, json[QString("volumeBackup")]);
    m_volume_backup_isSet = !json[QString("volumeBackup")].isNull() && m_volume_backup_isValid;

    m_volume_handle_isValid = ::OpenAPI::fromJsonValue(m_volume_handle, json[QString("volumeHandle")]);
    m_volume_handle_isSet = !json[QString("volumeHandle")].isNull() && m_volume_handle_isValid;

    m_volume_type_isValid = ::OpenAPI::fromJsonValue(m_volume_type, json[QString("volumeType")]);
    m_volume_type_isSet = !json[QString("volumeType")].isNull() && m_volume_type_isValid;
}

QString OAIVolumeRestore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeRestore::asJsonObject() const {
    QJsonObject obj;
    if (m_complete_time_isSet) {
        obj.insert(QString("completeTime"), ::OpenAPI::toJsonValue(m_complete_time));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_message_isSet) {
        obj.insert(QString("stateMessage"), ::OpenAPI::toJsonValue(m_state_message));
    }
    if (m_target_pvc.isSet()) {
        obj.insert(QString("targetPvc"), ::OpenAPI::toJsonValue(m_target_pvc));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_volume_backup_isSet) {
        obj.insert(QString("volumeBackup"), ::OpenAPI::toJsonValue(m_volume_backup));
    }
    if (m_volume_handle_isSet) {
        obj.insert(QString("volumeHandle"), ::OpenAPI::toJsonValue(m_volume_handle));
    }
    if (m_volume_type_isSet) {
        obj.insert(QString("volumeType"), ::OpenAPI::toJsonValue(m_volume_type));
    }
    return obj;
}

QString OAIVolumeRestore::getCompleteTime() const {
    return m_complete_time;
}
void OAIVolumeRestore::setCompleteTime(const QString &complete_time) {
    m_complete_time = complete_time;
    m_complete_time_isSet = true;
}

bool OAIVolumeRestore::is_complete_time_Set() const{
    return m_complete_time_isSet;
}

bool OAIVolumeRestore::is_complete_time_Valid() const{
    return m_complete_time_isValid;
}

QString OAIVolumeRestore::getCreateTime() const {
    return m_create_time;
}
void OAIVolumeRestore::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIVolumeRestore::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIVolumeRestore::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIVolumeRestore::getEtag() const {
    return m_etag;
}
void OAIVolumeRestore::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIVolumeRestore::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIVolumeRestore::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIVolumeRestore::getName() const {
    return m_name;
}
void OAIVolumeRestore::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVolumeRestore::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVolumeRestore::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVolumeRestore::getState() const {
    return m_state;
}
void OAIVolumeRestore::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVolumeRestore::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVolumeRestore::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIVolumeRestore::getStateMessage() const {
    return m_state_message;
}
void OAIVolumeRestore::setStateMessage(const QString &state_message) {
    m_state_message = state_message;
    m_state_message_isSet = true;
}

bool OAIVolumeRestore::is_state_message_Set() const{
    return m_state_message_isSet;
}

bool OAIVolumeRestore::is_state_message_Valid() const{
    return m_state_message_isValid;
}

OAINamespacedName OAIVolumeRestore::getTargetPvc() const {
    return m_target_pvc;
}
void OAIVolumeRestore::setTargetPvc(const OAINamespacedName &target_pvc) {
    m_target_pvc = target_pvc;
    m_target_pvc_isSet = true;
}

bool OAIVolumeRestore::is_target_pvc_Set() const{
    return m_target_pvc_isSet;
}

bool OAIVolumeRestore::is_target_pvc_Valid() const{
    return m_target_pvc_isValid;
}

QString OAIVolumeRestore::getUid() const {
    return m_uid;
}
void OAIVolumeRestore::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIVolumeRestore::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIVolumeRestore::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIVolumeRestore::getUpdateTime() const {
    return m_update_time;
}
void OAIVolumeRestore::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIVolumeRestore::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIVolumeRestore::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIVolumeRestore::getVolumeBackup() const {
    return m_volume_backup;
}
void OAIVolumeRestore::setVolumeBackup(const QString &volume_backup) {
    m_volume_backup = volume_backup;
    m_volume_backup_isSet = true;
}

bool OAIVolumeRestore::is_volume_backup_Set() const{
    return m_volume_backup_isSet;
}

bool OAIVolumeRestore::is_volume_backup_Valid() const{
    return m_volume_backup_isValid;
}

QString OAIVolumeRestore::getVolumeHandle() const {
    return m_volume_handle;
}
void OAIVolumeRestore::setVolumeHandle(const QString &volume_handle) {
    m_volume_handle = volume_handle;
    m_volume_handle_isSet = true;
}

bool OAIVolumeRestore::is_volume_handle_Set() const{
    return m_volume_handle_isSet;
}

bool OAIVolumeRestore::is_volume_handle_Valid() const{
    return m_volume_handle_isValid;
}

QString OAIVolumeRestore::getVolumeType() const {
    return m_volume_type;
}
void OAIVolumeRestore::setVolumeType(const QString &volume_type) {
    m_volume_type = volume_type;
    m_volume_type_isSet = true;
}

bool OAIVolumeRestore::is_volume_type_Set() const{
    return m_volume_type_isSet;
}

bool OAIVolumeRestore::is_volume_type_Valid() const{
    return m_volume_type_isValid;
}

bool OAIVolumeRestore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_complete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_pvc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeRestore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
