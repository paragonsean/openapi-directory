/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestore::OAIRestore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestore::OAIRestore() {
    this->initializeModel();
}

OAIRestore::~OAIRestore() {}

void OAIRestore::initializeModel() {

    m_backup_isSet = false;
    m_backup_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_complete_time_isSet = false;
    m_complete_time_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resources_excluded_count_isSet = false;
    m_resources_excluded_count_isValid = false;

    m_resources_failed_count_isSet = false;
    m_resources_failed_count_isValid = false;

    m_resources_restored_count_isSet = false;
    m_resources_restored_count_isValid = false;

    m_restore_config_isSet = false;
    m_restore_config_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_reason_isSet = false;
    m_state_reason_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_volumes_restored_count_isSet = false;
    m_volumes_restored_count_isValid = false;
}

void OAIRestore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestore::fromJsonObject(QJsonObject json) {

    m_backup_isValid = ::OpenAPI::fromJsonValue(m_backup, json[QString("backup")]);
    m_backup_isSet = !json[QString("backup")].isNull() && m_backup_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_complete_time_isValid = ::OpenAPI::fromJsonValue(m_complete_time, json[QString("completeTime")]);
    m_complete_time_isSet = !json[QString("completeTime")].isNull() && m_complete_time_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resources_excluded_count_isValid = ::OpenAPI::fromJsonValue(m_resources_excluded_count, json[QString("resourcesExcludedCount")]);
    m_resources_excluded_count_isSet = !json[QString("resourcesExcludedCount")].isNull() && m_resources_excluded_count_isValid;

    m_resources_failed_count_isValid = ::OpenAPI::fromJsonValue(m_resources_failed_count, json[QString("resourcesFailedCount")]);
    m_resources_failed_count_isSet = !json[QString("resourcesFailedCount")].isNull() && m_resources_failed_count_isValid;

    m_resources_restored_count_isValid = ::OpenAPI::fromJsonValue(m_resources_restored_count, json[QString("resourcesRestoredCount")]);
    m_resources_restored_count_isSet = !json[QString("resourcesRestoredCount")].isNull() && m_resources_restored_count_isValid;

    m_restore_config_isValid = ::OpenAPI::fromJsonValue(m_restore_config, json[QString("restoreConfig")]);
    m_restore_config_isSet = !json[QString("restoreConfig")].isNull() && m_restore_config_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_reason_isValid = ::OpenAPI::fromJsonValue(m_state_reason, json[QString("stateReason")]);
    m_state_reason_isSet = !json[QString("stateReason")].isNull() && m_state_reason_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_volumes_restored_count_isValid = ::OpenAPI::fromJsonValue(m_volumes_restored_count, json[QString("volumesRestoredCount")]);
    m_volumes_restored_count_isSet = !json[QString("volumesRestoredCount")].isNull() && m_volumes_restored_count_isValid;
}

QString OAIRestore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestore::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_isSet) {
        obj.insert(QString("backup"), ::OpenAPI::toJsonValue(m_backup));
    }
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_complete_time_isSet) {
        obj.insert(QString("completeTime"), ::OpenAPI::toJsonValue(m_complete_time));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resources_excluded_count_isSet) {
        obj.insert(QString("resourcesExcludedCount"), ::OpenAPI::toJsonValue(m_resources_excluded_count));
    }
    if (m_resources_failed_count_isSet) {
        obj.insert(QString("resourcesFailedCount"), ::OpenAPI::toJsonValue(m_resources_failed_count));
    }
    if (m_resources_restored_count_isSet) {
        obj.insert(QString("resourcesRestoredCount"), ::OpenAPI::toJsonValue(m_resources_restored_count));
    }
    if (m_restore_config.isSet()) {
        obj.insert(QString("restoreConfig"), ::OpenAPI::toJsonValue(m_restore_config));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_reason_isSet) {
        obj.insert(QString("stateReason"), ::OpenAPI::toJsonValue(m_state_reason));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_volumes_restored_count_isSet) {
        obj.insert(QString("volumesRestoredCount"), ::OpenAPI::toJsonValue(m_volumes_restored_count));
    }
    return obj;
}

QString OAIRestore::getBackup() const {
    return m_backup;
}
void OAIRestore::setBackup(const QString &backup) {
    m_backup = backup;
    m_backup_isSet = true;
}

bool OAIRestore::is_backup_Set() const{
    return m_backup_isSet;
}

bool OAIRestore::is_backup_Valid() const{
    return m_backup_isValid;
}

QString OAIRestore::getCluster() const {
    return m_cluster;
}
void OAIRestore::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIRestore::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIRestore::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIRestore::getCompleteTime() const {
    return m_complete_time;
}
void OAIRestore::setCompleteTime(const QString &complete_time) {
    m_complete_time = complete_time;
    m_complete_time_isSet = true;
}

bool OAIRestore::is_complete_time_Set() const{
    return m_complete_time_isSet;
}

bool OAIRestore::is_complete_time_Valid() const{
    return m_complete_time_isValid;
}

QString OAIRestore::getCreateTime() const {
    return m_create_time;
}
void OAIRestore::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIRestore::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIRestore::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIRestore::getDescription() const {
    return m_description;
}
void OAIRestore::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRestore::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRestore::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRestore::getEtag() const {
    return m_etag;
}
void OAIRestore::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIRestore::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIRestore::is_etag_Valid() const{
    return m_etag_isValid;
}

QMap<QString, QString> OAIRestore::getLabels() const {
    return m_labels;
}
void OAIRestore::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIRestore::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIRestore::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIRestore::getName() const {
    return m_name;
}
void OAIRestore::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRestore::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRestore::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIRestore::getResourcesExcludedCount() const {
    return m_resources_excluded_count;
}
void OAIRestore::setResourcesExcludedCount(const qint32 &resources_excluded_count) {
    m_resources_excluded_count = resources_excluded_count;
    m_resources_excluded_count_isSet = true;
}

bool OAIRestore::is_resources_excluded_count_Set() const{
    return m_resources_excluded_count_isSet;
}

bool OAIRestore::is_resources_excluded_count_Valid() const{
    return m_resources_excluded_count_isValid;
}

qint32 OAIRestore::getResourcesFailedCount() const {
    return m_resources_failed_count;
}
void OAIRestore::setResourcesFailedCount(const qint32 &resources_failed_count) {
    m_resources_failed_count = resources_failed_count;
    m_resources_failed_count_isSet = true;
}

bool OAIRestore::is_resources_failed_count_Set() const{
    return m_resources_failed_count_isSet;
}

bool OAIRestore::is_resources_failed_count_Valid() const{
    return m_resources_failed_count_isValid;
}

qint32 OAIRestore::getResourcesRestoredCount() const {
    return m_resources_restored_count;
}
void OAIRestore::setResourcesRestoredCount(const qint32 &resources_restored_count) {
    m_resources_restored_count = resources_restored_count;
    m_resources_restored_count_isSet = true;
}

bool OAIRestore::is_resources_restored_count_Set() const{
    return m_resources_restored_count_isSet;
}

bool OAIRestore::is_resources_restored_count_Valid() const{
    return m_resources_restored_count_isValid;
}

OAIRestoreConfig OAIRestore::getRestoreConfig() const {
    return m_restore_config;
}
void OAIRestore::setRestoreConfig(const OAIRestoreConfig &restore_config) {
    m_restore_config = restore_config;
    m_restore_config_isSet = true;
}

bool OAIRestore::is_restore_config_Set() const{
    return m_restore_config_isSet;
}

bool OAIRestore::is_restore_config_Valid() const{
    return m_restore_config_isValid;
}

QString OAIRestore::getState() const {
    return m_state;
}
void OAIRestore::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRestore::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRestore::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRestore::getStateReason() const {
    return m_state_reason;
}
void OAIRestore::setStateReason(const QString &state_reason) {
    m_state_reason = state_reason;
    m_state_reason_isSet = true;
}

bool OAIRestore::is_state_reason_Set() const{
    return m_state_reason_isSet;
}

bool OAIRestore::is_state_reason_Valid() const{
    return m_state_reason_isValid;
}

QString OAIRestore::getUid() const {
    return m_uid;
}
void OAIRestore::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIRestore::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIRestore::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIRestore::getUpdateTime() const {
    return m_update_time;
}
void OAIRestore::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIRestore::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIRestore::is_update_time_Valid() const{
    return m_update_time_isValid;
}

qint32 OAIRestore::getVolumesRestoredCount() const {
    return m_volumes_restored_count;
}
void OAIRestore::setVolumesRestoredCount(const qint32 &volumes_restored_count) {
    m_volumes_restored_count = volumes_restored_count;
    m_volumes_restored_count_isSet = true;
}

bool OAIRestore::is_volumes_restored_count_Set() const{
    return m_volumes_restored_count_isSet;
}

bool OAIRestore::is_volumes_restored_count_Valid() const{
    return m_volumes_restored_count_isValid;
}

bool OAIRestore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_excluded_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_failed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_restored_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes_restored_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
