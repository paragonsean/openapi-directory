/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterResourceRestoreScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterResourceRestoreScope::OAIClusterResourceRestoreScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterResourceRestoreScope::OAIClusterResourceRestoreScope() {
    this->initializeModel();
}

OAIClusterResourceRestoreScope::~OAIClusterResourceRestoreScope() {}

void OAIClusterResourceRestoreScope::initializeModel() {

    m_all_group_kinds_isSet = false;
    m_all_group_kinds_isValid = false;

    m_excluded_group_kinds_isSet = false;
    m_excluded_group_kinds_isValid = false;

    m_no_group_kinds_isSet = false;
    m_no_group_kinds_isValid = false;

    m_selected_group_kinds_isSet = false;
    m_selected_group_kinds_isValid = false;
}

void OAIClusterResourceRestoreScope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterResourceRestoreScope::fromJsonObject(QJsonObject json) {

    m_all_group_kinds_isValid = ::OpenAPI::fromJsonValue(m_all_group_kinds, json[QString("allGroupKinds")]);
    m_all_group_kinds_isSet = !json[QString("allGroupKinds")].isNull() && m_all_group_kinds_isValid;

    m_excluded_group_kinds_isValid = ::OpenAPI::fromJsonValue(m_excluded_group_kinds, json[QString("excludedGroupKinds")]);
    m_excluded_group_kinds_isSet = !json[QString("excludedGroupKinds")].isNull() && m_excluded_group_kinds_isValid;

    m_no_group_kinds_isValid = ::OpenAPI::fromJsonValue(m_no_group_kinds, json[QString("noGroupKinds")]);
    m_no_group_kinds_isSet = !json[QString("noGroupKinds")].isNull() && m_no_group_kinds_isValid;

    m_selected_group_kinds_isValid = ::OpenAPI::fromJsonValue(m_selected_group_kinds, json[QString("selectedGroupKinds")]);
    m_selected_group_kinds_isSet = !json[QString("selectedGroupKinds")].isNull() && m_selected_group_kinds_isValid;
}

QString OAIClusterResourceRestoreScope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterResourceRestoreScope::asJsonObject() const {
    QJsonObject obj;
    if (m_all_group_kinds_isSet) {
        obj.insert(QString("allGroupKinds"), ::OpenAPI::toJsonValue(m_all_group_kinds));
    }
    if (m_excluded_group_kinds.size() > 0) {
        obj.insert(QString("excludedGroupKinds"), ::OpenAPI::toJsonValue(m_excluded_group_kinds));
    }
    if (m_no_group_kinds_isSet) {
        obj.insert(QString("noGroupKinds"), ::OpenAPI::toJsonValue(m_no_group_kinds));
    }
    if (m_selected_group_kinds.size() > 0) {
        obj.insert(QString("selectedGroupKinds"), ::OpenAPI::toJsonValue(m_selected_group_kinds));
    }
    return obj;
}

bool OAIClusterResourceRestoreScope::isAllGroupKinds() const {
    return m_all_group_kinds;
}
void OAIClusterResourceRestoreScope::setAllGroupKinds(const bool &all_group_kinds) {
    m_all_group_kinds = all_group_kinds;
    m_all_group_kinds_isSet = true;
}

bool OAIClusterResourceRestoreScope::is_all_group_kinds_Set() const{
    return m_all_group_kinds_isSet;
}

bool OAIClusterResourceRestoreScope::is_all_group_kinds_Valid() const{
    return m_all_group_kinds_isValid;
}

QList<OAIGroupKind> OAIClusterResourceRestoreScope::getExcludedGroupKinds() const {
    return m_excluded_group_kinds;
}
void OAIClusterResourceRestoreScope::setExcludedGroupKinds(const QList<OAIGroupKind> &excluded_group_kinds) {
    m_excluded_group_kinds = excluded_group_kinds;
    m_excluded_group_kinds_isSet = true;
}

bool OAIClusterResourceRestoreScope::is_excluded_group_kinds_Set() const{
    return m_excluded_group_kinds_isSet;
}

bool OAIClusterResourceRestoreScope::is_excluded_group_kinds_Valid() const{
    return m_excluded_group_kinds_isValid;
}

bool OAIClusterResourceRestoreScope::isNoGroupKinds() const {
    return m_no_group_kinds;
}
void OAIClusterResourceRestoreScope::setNoGroupKinds(const bool &no_group_kinds) {
    m_no_group_kinds = no_group_kinds;
    m_no_group_kinds_isSet = true;
}

bool OAIClusterResourceRestoreScope::is_no_group_kinds_Set() const{
    return m_no_group_kinds_isSet;
}

bool OAIClusterResourceRestoreScope::is_no_group_kinds_Valid() const{
    return m_no_group_kinds_isValid;
}

QList<OAIGroupKind> OAIClusterResourceRestoreScope::getSelectedGroupKinds() const {
    return m_selected_group_kinds;
}
void OAIClusterResourceRestoreScope::setSelectedGroupKinds(const QList<OAIGroupKind> &selected_group_kinds) {
    m_selected_group_kinds = selected_group_kinds;
    m_selected_group_kinds_isSet = true;
}

bool OAIClusterResourceRestoreScope::is_selected_group_kinds_Set() const{
    return m_selected_group_kinds_isSet;
}

bool OAIClusterResourceRestoreScope::is_selected_group_kinds_Valid() const{
    return m_selected_group_kinds_isValid;
}

bool OAIClusterResourceRestoreScope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_group_kinds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_group_kinds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_group_kinds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_group_kinds.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterResourceRestoreScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
