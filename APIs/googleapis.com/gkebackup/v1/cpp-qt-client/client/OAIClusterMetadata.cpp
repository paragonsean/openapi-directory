/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterMetadata::OAIClusterMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterMetadata::OAIClusterMetadata() {
    this->initializeModel();
}

OAIClusterMetadata::~OAIClusterMetadata() {}

void OAIClusterMetadata::initializeModel() {

    m_anthos_version_isSet = false;
    m_anthos_version_isValid = false;

    m_backup_crd_versions_isSet = false;
    m_backup_crd_versions_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_gke_version_isSet = false;
    m_gke_version_isValid = false;

    m_k8s_version_isSet = false;
    m_k8s_version_isValid = false;
}

void OAIClusterMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterMetadata::fromJsonObject(QJsonObject json) {

    m_anthos_version_isValid = ::OpenAPI::fromJsonValue(m_anthos_version, json[QString("anthosVersion")]);
    m_anthos_version_isSet = !json[QString("anthosVersion")].isNull() && m_anthos_version_isValid;

    m_backup_crd_versions_isValid = ::OpenAPI::fromJsonValue(m_backup_crd_versions, json[QString("backupCrdVersions")]);
    m_backup_crd_versions_isSet = !json[QString("backupCrdVersions")].isNull() && m_backup_crd_versions_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_gke_version_isValid = ::OpenAPI::fromJsonValue(m_gke_version, json[QString("gkeVersion")]);
    m_gke_version_isSet = !json[QString("gkeVersion")].isNull() && m_gke_version_isValid;

    m_k8s_version_isValid = ::OpenAPI::fromJsonValue(m_k8s_version, json[QString("k8sVersion")]);
    m_k8s_version_isSet = !json[QString("k8sVersion")].isNull() && m_k8s_version_isValid;
}

QString OAIClusterMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_anthos_version_isSet) {
        obj.insert(QString("anthosVersion"), ::OpenAPI::toJsonValue(m_anthos_version));
    }
    if (m_backup_crd_versions.size() > 0) {
        obj.insert(QString("backupCrdVersions"), ::OpenAPI::toJsonValue(m_backup_crd_versions));
    }
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_gke_version_isSet) {
        obj.insert(QString("gkeVersion"), ::OpenAPI::toJsonValue(m_gke_version));
    }
    if (m_k8s_version_isSet) {
        obj.insert(QString("k8sVersion"), ::OpenAPI::toJsonValue(m_k8s_version));
    }
    return obj;
}

QString OAIClusterMetadata::getAnthosVersion() const {
    return m_anthos_version;
}
void OAIClusterMetadata::setAnthosVersion(const QString &anthos_version) {
    m_anthos_version = anthos_version;
    m_anthos_version_isSet = true;
}

bool OAIClusterMetadata::is_anthos_version_Set() const{
    return m_anthos_version_isSet;
}

bool OAIClusterMetadata::is_anthos_version_Valid() const{
    return m_anthos_version_isValid;
}

QMap<QString, QString> OAIClusterMetadata::getBackupCrdVersions() const {
    return m_backup_crd_versions;
}
void OAIClusterMetadata::setBackupCrdVersions(const QMap<QString, QString> &backup_crd_versions) {
    m_backup_crd_versions = backup_crd_versions;
    m_backup_crd_versions_isSet = true;
}

bool OAIClusterMetadata::is_backup_crd_versions_Set() const{
    return m_backup_crd_versions_isSet;
}

bool OAIClusterMetadata::is_backup_crd_versions_Valid() const{
    return m_backup_crd_versions_isValid;
}

QString OAIClusterMetadata::getCluster() const {
    return m_cluster;
}
void OAIClusterMetadata::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIClusterMetadata::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIClusterMetadata::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIClusterMetadata::getGkeVersion() const {
    return m_gke_version;
}
void OAIClusterMetadata::setGkeVersion(const QString &gke_version) {
    m_gke_version = gke_version;
    m_gke_version_isSet = true;
}

bool OAIClusterMetadata::is_gke_version_Set() const{
    return m_gke_version_isSet;
}

bool OAIClusterMetadata::is_gke_version_Valid() const{
    return m_gke_version_isValid;
}

QString OAIClusterMetadata::getK8sVersion() const {
    return m_k8s_version;
}
void OAIClusterMetadata::setK8sVersion(const QString &k8s_version) {
    m_k8s_version = k8s_version;
    m_k8s_version_isSet = true;
}

bool OAIClusterMetadata::is_k8s_version_Set() const{
    return m_k8s_version_isSet;
}

bool OAIClusterMetadata::is_k8s_version_Valid() const{
    return m_k8s_version_isValid;
}

bool OAIClusterMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anthos_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_crd_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_k8s_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
