/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubstitutionRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubstitutionRule::OAISubstitutionRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubstitutionRule::OAISubstitutionRule() {
    this->initializeModel();
}

OAISubstitutionRule::~OAISubstitutionRule() {}

void OAISubstitutionRule::initializeModel() {

    m_new_value_isSet = false;
    m_new_value_isValid = false;

    m_original_value_pattern_isSet = false;
    m_original_value_pattern_isValid = false;

    m_target_group_kinds_isSet = false;
    m_target_group_kinds_isValid = false;

    m_target_json_path_isSet = false;
    m_target_json_path_isValid = false;

    m_target_namespaces_isSet = false;
    m_target_namespaces_isValid = false;
}

void OAISubstitutionRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubstitutionRule::fromJsonObject(QJsonObject json) {

    m_new_value_isValid = ::OpenAPI::fromJsonValue(m_new_value, json[QString("newValue")]);
    m_new_value_isSet = !json[QString("newValue")].isNull() && m_new_value_isValid;

    m_original_value_pattern_isValid = ::OpenAPI::fromJsonValue(m_original_value_pattern, json[QString("originalValuePattern")]);
    m_original_value_pattern_isSet = !json[QString("originalValuePattern")].isNull() && m_original_value_pattern_isValid;

    m_target_group_kinds_isValid = ::OpenAPI::fromJsonValue(m_target_group_kinds, json[QString("targetGroupKinds")]);
    m_target_group_kinds_isSet = !json[QString("targetGroupKinds")].isNull() && m_target_group_kinds_isValid;

    m_target_json_path_isValid = ::OpenAPI::fromJsonValue(m_target_json_path, json[QString("targetJsonPath")]);
    m_target_json_path_isSet = !json[QString("targetJsonPath")].isNull() && m_target_json_path_isValid;

    m_target_namespaces_isValid = ::OpenAPI::fromJsonValue(m_target_namespaces, json[QString("targetNamespaces")]);
    m_target_namespaces_isSet = !json[QString("targetNamespaces")].isNull() && m_target_namespaces_isValid;
}

QString OAISubstitutionRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubstitutionRule::asJsonObject() const {
    QJsonObject obj;
    if (m_new_value_isSet) {
        obj.insert(QString("newValue"), ::OpenAPI::toJsonValue(m_new_value));
    }
    if (m_original_value_pattern_isSet) {
        obj.insert(QString("originalValuePattern"), ::OpenAPI::toJsonValue(m_original_value_pattern));
    }
    if (m_target_group_kinds.size() > 0) {
        obj.insert(QString("targetGroupKinds"), ::OpenAPI::toJsonValue(m_target_group_kinds));
    }
    if (m_target_json_path_isSet) {
        obj.insert(QString("targetJsonPath"), ::OpenAPI::toJsonValue(m_target_json_path));
    }
    if (m_target_namespaces.size() > 0) {
        obj.insert(QString("targetNamespaces"), ::OpenAPI::toJsonValue(m_target_namespaces));
    }
    return obj;
}

QString OAISubstitutionRule::getNewValue() const {
    return m_new_value;
}
void OAISubstitutionRule::setNewValue(const QString &new_value) {
    m_new_value = new_value;
    m_new_value_isSet = true;
}

bool OAISubstitutionRule::is_new_value_Set() const{
    return m_new_value_isSet;
}

bool OAISubstitutionRule::is_new_value_Valid() const{
    return m_new_value_isValid;
}

QString OAISubstitutionRule::getOriginalValuePattern() const {
    return m_original_value_pattern;
}
void OAISubstitutionRule::setOriginalValuePattern(const QString &original_value_pattern) {
    m_original_value_pattern = original_value_pattern;
    m_original_value_pattern_isSet = true;
}

bool OAISubstitutionRule::is_original_value_pattern_Set() const{
    return m_original_value_pattern_isSet;
}

bool OAISubstitutionRule::is_original_value_pattern_Valid() const{
    return m_original_value_pattern_isValid;
}

QList<OAIGroupKind> OAISubstitutionRule::getTargetGroupKinds() const {
    return m_target_group_kinds;
}
void OAISubstitutionRule::setTargetGroupKinds(const QList<OAIGroupKind> &target_group_kinds) {
    m_target_group_kinds = target_group_kinds;
    m_target_group_kinds_isSet = true;
}

bool OAISubstitutionRule::is_target_group_kinds_Set() const{
    return m_target_group_kinds_isSet;
}

bool OAISubstitutionRule::is_target_group_kinds_Valid() const{
    return m_target_group_kinds_isValid;
}

QString OAISubstitutionRule::getTargetJsonPath() const {
    return m_target_json_path;
}
void OAISubstitutionRule::setTargetJsonPath(const QString &target_json_path) {
    m_target_json_path = target_json_path;
    m_target_json_path_isSet = true;
}

bool OAISubstitutionRule::is_target_json_path_Set() const{
    return m_target_json_path_isSet;
}

bool OAISubstitutionRule::is_target_json_path_Valid() const{
    return m_target_json_path_isValid;
}

QList<QString> OAISubstitutionRule::getTargetNamespaces() const {
    return m_target_namespaces;
}
void OAISubstitutionRule::setTargetNamespaces(const QList<QString> &target_namespaces) {
    m_target_namespaces = target_namespaces;
    m_target_namespaces_isSet = true;
}

bool OAISubstitutionRule::is_target_namespaces_Set() const{
    return m_target_namespaces_isSet;
}

bool OAISubstitutionRule::is_target_namespaces_Valid() const{
    return m_target_namespaces_isValid;
}

bool OAISubstitutionRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_value_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_group_kinds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_json_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_namespaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubstitutionRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
