/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespacedNames.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespacedNames::OAINamespacedNames(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespacedNames::OAINamespacedNames() {
    this->initializeModel();
}

OAINamespacedNames::~OAINamespacedNames() {}

void OAINamespacedNames::initializeModel() {

    m_namespaced_names_isSet = false;
    m_namespaced_names_isValid = false;
}

void OAINamespacedNames::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespacedNames::fromJsonObject(QJsonObject json) {

    m_namespaced_names_isValid = ::OpenAPI::fromJsonValue(m_namespaced_names, json[QString("namespacedNames")]);
    m_namespaced_names_isSet = !json[QString("namespacedNames")].isNull() && m_namespaced_names_isValid;
}

QString OAINamespacedNames::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespacedNames::asJsonObject() const {
    QJsonObject obj;
    if (m_namespaced_names.size() > 0) {
        obj.insert(QString("namespacedNames"), ::OpenAPI::toJsonValue(m_namespaced_names));
    }
    return obj;
}

QList<OAINamespacedName> OAINamespacedNames::getNamespacedNames() const {
    return m_namespaced_names;
}
void OAINamespacedNames::setNamespacedNames(const QList<OAINamespacedName> &namespaced_names) {
    m_namespaced_names = namespaced_names;
    m_namespaced_names_isSet = true;
}

bool OAINamespacedNames::is_namespaced_names_Set() const{
    return m_namespaced_names_isSet;
}

bool OAINamespacedNames::is_namespaced_names_Valid() const{
    return m_namespaced_names_isValid;
}

bool OAINamespacedNames::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_namespaced_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespacedNames::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
