/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBackupConfig.h
 *
 * BackupConfig defines the configuration of Backups created via this BackupPlan.
 */

#ifndef OAIBackupConfig_H
#define OAIBackupConfig_H

#include <QJsonObject>

#include "OAIEncryptionKey.h"
#include "OAINamespacedNames.h"
#include "OAINamespaces.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEncryptionKey;
class OAINamespacedNames;
class OAINamespaces;

class OAIBackupConfig : public OAIObject {
public:
    OAIBackupConfig();
    OAIBackupConfig(QString json);
    ~OAIBackupConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllNamespaces() const;
    void setAllNamespaces(const bool &all_namespaces);
    bool is_all_namespaces_Set() const;
    bool is_all_namespaces_Valid() const;

    OAIEncryptionKey getEncryptionKey() const;
    void setEncryptionKey(const OAIEncryptionKey &encryption_key);
    bool is_encryption_key_Set() const;
    bool is_encryption_key_Valid() const;

    bool isIncludeSecrets() const;
    void setIncludeSecrets(const bool &include_secrets);
    bool is_include_secrets_Set() const;
    bool is_include_secrets_Valid() const;

    bool isIncludeVolumeData() const;
    void setIncludeVolumeData(const bool &include_volume_data);
    bool is_include_volume_data_Set() const;
    bool is_include_volume_data_Valid() const;

    OAINamespacedNames getSelectedApplications() const;
    void setSelectedApplications(const OAINamespacedNames &selected_applications);
    bool is_selected_applications_Set() const;
    bool is_selected_applications_Valid() const;

    OAINamespaces getSelectedNamespaces() const;
    void setSelectedNamespaces(const OAINamespaces &selected_namespaces);
    bool is_selected_namespaces_Set() const;
    bool is_selected_namespaces_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_all_namespaces;
    bool m_all_namespaces_isSet;
    bool m_all_namespaces_isValid;

    OAIEncryptionKey m_encryption_key;
    bool m_encryption_key_isSet;
    bool m_encryption_key_isValid;

    bool m_include_secrets;
    bool m_include_secrets_isSet;
    bool m_include_secrets_isValid;

    bool m_include_volume_data;
    bool m_include_volume_data_isSet;
    bool m_include_volume_data_isValid;

    OAINamespacedNames m_selected_applications;
    bool m_selected_applications_isSet;
    bool m_selected_applications_isValid;

    OAINamespaces m_selected_namespaces;
    bool m_selected_namespaces_isSet;
    bool m_selected_namespaces_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBackupConfig)

#endif // OAIBackupConfig_H
