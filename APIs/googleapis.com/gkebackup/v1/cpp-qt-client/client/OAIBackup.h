/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBackup.h
 *
 * Represents a request to perform a single point-in-time capture of some portion of the state of a GKE cluster, the record of the backup operation itself, and an anchor for the underlying artifacts that comprise the Backup (the config backup and VolumeBackups). Next id: 29
 */

#ifndef OAIBackup_H
#define OAIBackup_H

#include <QJsonObject>

#include "OAIClusterMetadata.h"
#include "OAIEncryptionKey.h"
#include "OAINamespacedNames.h"
#include "OAINamespaces.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClusterMetadata;
class OAIEncryptionKey;
class OAINamespacedNames;
class OAINamespaces;

class OAIBackup : public OAIObject {
public:
    OAIBackup();
    OAIBackup(QString json);
    ~OAIBackup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllNamespaces() const;
    void setAllNamespaces(const bool &all_namespaces);
    bool is_all_namespaces_Set() const;
    bool is_all_namespaces_Valid() const;

    OAIClusterMetadata getClusterMetadata() const;
    void setClusterMetadata(const OAIClusterMetadata &cluster_metadata);
    bool is_cluster_metadata_Set() const;
    bool is_cluster_metadata_Valid() const;

    QString getCompleteTime() const;
    void setCompleteTime(const QString &complete_time);
    bool is_complete_time_Set() const;
    bool is_complete_time_Valid() const;

    QString getConfigBackupSizeBytes() const;
    void setConfigBackupSizeBytes(const QString &config_backup_size_bytes);
    bool is_config_backup_size_bytes_Set() const;
    bool is_config_backup_size_bytes_Valid() const;

    bool isContainsSecrets() const;
    void setContainsSecrets(const bool &contains_secrets);
    bool is_contains_secrets_Set() const;
    bool is_contains_secrets_Valid() const;

    bool isContainsVolumeData() const;
    void setContainsVolumeData(const bool &contains_volume_data);
    bool is_contains_volume_data_Set() const;
    bool is_contains_volume_data_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    qint32 getDeleteLockDays() const;
    void setDeleteLockDays(const qint32 &delete_lock_days);
    bool is_delete_lock_days_Set() const;
    bool is_delete_lock_days_Valid() const;

    QString getDeleteLockExpireTime() const;
    void setDeleteLockExpireTime(const QString &delete_lock_expire_time);
    bool is_delete_lock_expire_time_Set() const;
    bool is_delete_lock_expire_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIEncryptionKey getEncryptionKey() const;
    void setEncryptionKey(const OAIEncryptionKey &encryption_key);
    bool is_encryption_key_Set() const;
    bool is_encryption_key_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    bool isManual() const;
    void setManual(const bool &manual);
    bool is_manual_Set() const;
    bool is_manual_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPodCount() const;
    void setPodCount(const qint32 &pod_count);
    bool is_pod_count_Set() const;
    bool is_pod_count_Valid() const;

    qint32 getResourceCount() const;
    void setResourceCount(const qint32 &resource_count);
    bool is_resource_count_Set() const;
    bool is_resource_count_Valid() const;

    qint32 getRetainDays() const;
    void setRetainDays(const qint32 &retain_days);
    bool is_retain_days_Set() const;
    bool is_retain_days_Valid() const;

    QString getRetainExpireTime() const;
    void setRetainExpireTime(const QString &retain_expire_time);
    bool is_retain_expire_time_Set() const;
    bool is_retain_expire_time_Valid() const;

    OAINamespacedNames getSelectedApplications() const;
    void setSelectedApplications(const OAINamespacedNames &selected_applications);
    bool is_selected_applications_Set() const;
    bool is_selected_applications_Valid() const;

    OAINamespaces getSelectedNamespaces() const;
    void setSelectedNamespaces(const OAINamespaces &selected_namespaces);
    bool is_selected_namespaces_Set() const;
    bool is_selected_namespaces_Valid() const;

    QString getSizeBytes() const;
    void setSizeBytes(const QString &size_bytes);
    bool is_size_bytes_Set() const;
    bool is_size_bytes_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStateReason() const;
    void setStateReason(const QString &state_reason);
    bool is_state_reason_Set() const;
    bool is_state_reason_Valid() const;

    QString getUid() const;
    void setUid(const QString &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    qint32 getVolumeCount() const;
    void setVolumeCount(const qint32 &volume_count);
    bool is_volume_count_Set() const;
    bool is_volume_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_all_namespaces;
    bool m_all_namespaces_isSet;
    bool m_all_namespaces_isValid;

    OAIClusterMetadata m_cluster_metadata;
    bool m_cluster_metadata_isSet;
    bool m_cluster_metadata_isValid;

    QString m_complete_time;
    bool m_complete_time_isSet;
    bool m_complete_time_isValid;

    QString m_config_backup_size_bytes;
    bool m_config_backup_size_bytes_isSet;
    bool m_config_backup_size_bytes_isValid;

    bool m_contains_secrets;
    bool m_contains_secrets_isSet;
    bool m_contains_secrets_isValid;

    bool m_contains_volume_data;
    bool m_contains_volume_data_isSet;
    bool m_contains_volume_data_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    qint32 m_delete_lock_days;
    bool m_delete_lock_days_isSet;
    bool m_delete_lock_days_isValid;

    QString m_delete_lock_expire_time;
    bool m_delete_lock_expire_time_isSet;
    bool m_delete_lock_expire_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIEncryptionKey m_encryption_key;
    bool m_encryption_key_isSet;
    bool m_encryption_key_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    bool m_manual;
    bool m_manual_isSet;
    bool m_manual_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_pod_count;
    bool m_pod_count_isSet;
    bool m_pod_count_isValid;

    qint32 m_resource_count;
    bool m_resource_count_isSet;
    bool m_resource_count_isValid;

    qint32 m_retain_days;
    bool m_retain_days_isSet;
    bool m_retain_days_isValid;

    QString m_retain_expire_time;
    bool m_retain_expire_time_isSet;
    bool m_retain_expire_time_isValid;

    OAINamespacedNames m_selected_applications;
    bool m_selected_applications_isSet;
    bool m_selected_applications_isValid;

    OAINamespaces m_selected_namespaces;
    bool m_selected_namespaces_isSet;
    bool m_selected_namespaces_isValid;

    QString m_size_bytes;
    bool m_size_bytes_isSet;
    bool m_size_bytes_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_state_reason;
    bool m_state_reason_isSet;
    bool m_state_reason_isValid;

    QString m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;

    qint32 m_volume_count;
    bool m_volume_count_isSet;
    bool m_volume_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBackup)

#endif // OAIBackup_H
