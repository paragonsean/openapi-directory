/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupConfig::OAIBackupConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupConfig::OAIBackupConfig() {
    this->initializeModel();
}

OAIBackupConfig::~OAIBackupConfig() {}

void OAIBackupConfig::initializeModel() {

    m_all_namespaces_isSet = false;
    m_all_namespaces_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_include_secrets_isSet = false;
    m_include_secrets_isValid = false;

    m_include_volume_data_isSet = false;
    m_include_volume_data_isValid = false;

    m_selected_applications_isSet = false;
    m_selected_applications_isValid = false;

    m_selected_namespaces_isSet = false;
    m_selected_namespaces_isValid = false;
}

void OAIBackupConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupConfig::fromJsonObject(QJsonObject json) {

    m_all_namespaces_isValid = ::OpenAPI::fromJsonValue(m_all_namespaces, json[QString("allNamespaces")]);
    m_all_namespaces_isSet = !json[QString("allNamespaces")].isNull() && m_all_namespaces_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("encryptionKey")]);
    m_encryption_key_isSet = !json[QString("encryptionKey")].isNull() && m_encryption_key_isValid;

    m_include_secrets_isValid = ::OpenAPI::fromJsonValue(m_include_secrets, json[QString("includeSecrets")]);
    m_include_secrets_isSet = !json[QString("includeSecrets")].isNull() && m_include_secrets_isValid;

    m_include_volume_data_isValid = ::OpenAPI::fromJsonValue(m_include_volume_data, json[QString("includeVolumeData")]);
    m_include_volume_data_isSet = !json[QString("includeVolumeData")].isNull() && m_include_volume_data_isValid;

    m_selected_applications_isValid = ::OpenAPI::fromJsonValue(m_selected_applications, json[QString("selectedApplications")]);
    m_selected_applications_isSet = !json[QString("selectedApplications")].isNull() && m_selected_applications_isValid;

    m_selected_namespaces_isValid = ::OpenAPI::fromJsonValue(m_selected_namespaces, json[QString("selectedNamespaces")]);
    m_selected_namespaces_isSet = !json[QString("selectedNamespaces")].isNull() && m_selected_namespaces_isValid;
}

QString OAIBackupConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_all_namespaces_isSet) {
        obj.insert(QString("allNamespaces"), ::OpenAPI::toJsonValue(m_all_namespaces));
    }
    if (m_encryption_key.isSet()) {
        obj.insert(QString("encryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_include_secrets_isSet) {
        obj.insert(QString("includeSecrets"), ::OpenAPI::toJsonValue(m_include_secrets));
    }
    if (m_include_volume_data_isSet) {
        obj.insert(QString("includeVolumeData"), ::OpenAPI::toJsonValue(m_include_volume_data));
    }
    if (m_selected_applications.isSet()) {
        obj.insert(QString("selectedApplications"), ::OpenAPI::toJsonValue(m_selected_applications));
    }
    if (m_selected_namespaces.isSet()) {
        obj.insert(QString("selectedNamespaces"), ::OpenAPI::toJsonValue(m_selected_namespaces));
    }
    return obj;
}

bool OAIBackupConfig::isAllNamespaces() const {
    return m_all_namespaces;
}
void OAIBackupConfig::setAllNamespaces(const bool &all_namespaces) {
    m_all_namespaces = all_namespaces;
    m_all_namespaces_isSet = true;
}

bool OAIBackupConfig::is_all_namespaces_Set() const{
    return m_all_namespaces_isSet;
}

bool OAIBackupConfig::is_all_namespaces_Valid() const{
    return m_all_namespaces_isValid;
}

OAIEncryptionKey OAIBackupConfig::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIBackupConfig::setEncryptionKey(const OAIEncryptionKey &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIBackupConfig::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIBackupConfig::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

bool OAIBackupConfig::isIncludeSecrets() const {
    return m_include_secrets;
}
void OAIBackupConfig::setIncludeSecrets(const bool &include_secrets) {
    m_include_secrets = include_secrets;
    m_include_secrets_isSet = true;
}

bool OAIBackupConfig::is_include_secrets_Set() const{
    return m_include_secrets_isSet;
}

bool OAIBackupConfig::is_include_secrets_Valid() const{
    return m_include_secrets_isValid;
}

bool OAIBackupConfig::isIncludeVolumeData() const {
    return m_include_volume_data;
}
void OAIBackupConfig::setIncludeVolumeData(const bool &include_volume_data) {
    m_include_volume_data = include_volume_data;
    m_include_volume_data_isSet = true;
}

bool OAIBackupConfig::is_include_volume_data_Set() const{
    return m_include_volume_data_isSet;
}

bool OAIBackupConfig::is_include_volume_data_Valid() const{
    return m_include_volume_data_isValid;
}

OAINamespacedNames OAIBackupConfig::getSelectedApplications() const {
    return m_selected_applications;
}
void OAIBackupConfig::setSelectedApplications(const OAINamespacedNames &selected_applications) {
    m_selected_applications = selected_applications;
    m_selected_applications_isSet = true;
}

bool OAIBackupConfig::is_selected_applications_Set() const{
    return m_selected_applications_isSet;
}

bool OAIBackupConfig::is_selected_applications_Valid() const{
    return m_selected_applications_isValid;
}

OAINamespaces OAIBackupConfig::getSelectedNamespaces() const {
    return m_selected_namespaces;
}
void OAIBackupConfig::setSelectedNamespaces(const OAINamespaces &selected_namespaces) {
    m_selected_namespaces = selected_namespaces;
    m_selected_namespaces_isSet = true;
}

bool OAIBackupConfig::is_selected_namespaces_Set() const{
    return m_selected_namespaces_isSet;
}

bool OAIBackupConfig::is_selected_namespaces_Valid() const{
    return m_selected_namespaces_isValid;
}

bool OAIBackupConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_namespaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_secrets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_volume_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_applications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_namespaces.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
