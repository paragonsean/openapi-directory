/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVolumeBackup.h
 *
 * Represents the backup of a specific persistent volume as a component of a Backup - both the record of the operation and a pointer to the underlying storage-specific artifacts. Next id: 14
 */

#ifndef OAIVolumeBackup_H
#define OAIVolumeBackup_H

#include <QJsonObject>

#include "OAINamespacedName.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINamespacedName;

class OAIVolumeBackup : public OAIObject {
public:
    OAIVolumeBackup();
    OAIVolumeBackup(QString json);
    ~OAIVolumeBackup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCompleteTime() const;
    void setCompleteTime(const QString &complete_time);
    bool is_complete_time_Set() const;
    bool is_complete_time_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDiskSizeBytes() const;
    void setDiskSizeBytes(const QString &disk_size_bytes);
    bool is_disk_size_bytes_Set() const;
    bool is_disk_size_bytes_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QString getFormat() const;
    void setFormat(const QString &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINamespacedName getSourcePvc() const;
    void setSourcePvc(const OAINamespacedName &source_pvc);
    bool is_source_pvc_Set() const;
    bool is_source_pvc_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStateMessage() const;
    void setStateMessage(const QString &state_message);
    bool is_state_message_Set() const;
    bool is_state_message_Valid() const;

    QString getStorageBytes() const;
    void setStorageBytes(const QString &storage_bytes);
    bool is_storage_bytes_Set() const;
    bool is_storage_bytes_Valid() const;

    QString getUid() const;
    void setUid(const QString &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    QString getVolumeBackupHandle() const;
    void setVolumeBackupHandle(const QString &volume_backup_handle);
    bool is_volume_backup_handle_Set() const;
    bool is_volume_backup_handle_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_complete_time;
    bool m_complete_time_isSet;
    bool m_complete_time_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_disk_size_bytes;
    bool m_disk_size_bytes_isSet;
    bool m_disk_size_bytes_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QString m_format;
    bool m_format_isSet;
    bool m_format_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINamespacedName m_source_pvc;
    bool m_source_pvc_isSet;
    bool m_source_pvc_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_state_message;
    bool m_state_message_isSet;
    bool m_state_message_isValid;

    QString m_storage_bytes;
    bool m_storage_bytes_isSet;
    bool m_storage_bytes_isValid;

    QString m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;

    QString m_volume_backup_handle;
    bool m_volume_backup_handle_isSet;
    bool m_volume_backup_handle_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVolumeBackup)

#endif // OAIVolumeBackup_H
