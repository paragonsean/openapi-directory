/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceFilter::OAIResourceFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceFilter::OAIResourceFilter() {
    this->initializeModel();
}

OAIResourceFilter::~OAIResourceFilter() {}

void OAIResourceFilter::initializeModel() {

    m_group_kinds_isSet = false;
    m_group_kinds_isValid = false;

    m_json_path_isSet = false;
    m_json_path_isValid = false;

    m_namespaces_isSet = false;
    m_namespaces_isValid = false;
}

void OAIResourceFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceFilter::fromJsonObject(QJsonObject json) {

    m_group_kinds_isValid = ::OpenAPI::fromJsonValue(m_group_kinds, json[QString("groupKinds")]);
    m_group_kinds_isSet = !json[QString("groupKinds")].isNull() && m_group_kinds_isValid;

    m_json_path_isValid = ::OpenAPI::fromJsonValue(m_json_path, json[QString("jsonPath")]);
    m_json_path_isSet = !json[QString("jsonPath")].isNull() && m_json_path_isValid;

    m_namespaces_isValid = ::OpenAPI::fromJsonValue(m_namespaces, json[QString("namespaces")]);
    m_namespaces_isSet = !json[QString("namespaces")].isNull() && m_namespaces_isValid;
}

QString OAIResourceFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_group_kinds.size() > 0) {
        obj.insert(QString("groupKinds"), ::OpenAPI::toJsonValue(m_group_kinds));
    }
    if (m_json_path_isSet) {
        obj.insert(QString("jsonPath"), ::OpenAPI::toJsonValue(m_json_path));
    }
    if (m_namespaces.size() > 0) {
        obj.insert(QString("namespaces"), ::OpenAPI::toJsonValue(m_namespaces));
    }
    return obj;
}

QList<OAIGroupKind> OAIResourceFilter::getGroupKinds() const {
    return m_group_kinds;
}
void OAIResourceFilter::setGroupKinds(const QList<OAIGroupKind> &group_kinds) {
    m_group_kinds = group_kinds;
    m_group_kinds_isSet = true;
}

bool OAIResourceFilter::is_group_kinds_Set() const{
    return m_group_kinds_isSet;
}

bool OAIResourceFilter::is_group_kinds_Valid() const{
    return m_group_kinds_isValid;
}

QString OAIResourceFilter::getJsonPath() const {
    return m_json_path;
}
void OAIResourceFilter::setJsonPath(const QString &json_path) {
    m_json_path = json_path;
    m_json_path_isSet = true;
}

bool OAIResourceFilter::is_json_path_Set() const{
    return m_json_path_isSet;
}

bool OAIResourceFilter::is_json_path_Valid() const{
    return m_json_path_isValid;
}

QList<QString> OAIResourceFilter::getNamespaces() const {
    return m_namespaces;
}
void OAIResourceFilter::setNamespaces(const QList<QString> &namespaces) {
    m_namespaces = namespaces;
    m_namespaces_isSet = true;
}

bool OAIResourceFilter::is_namespaces_Set() const{
    return m_namespaces_isSet;
}

bool OAIResourceFilter::is_namespaces_Valid() const{
    return m_namespaces_isValid;
}

bool OAIResourceFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_kinds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
