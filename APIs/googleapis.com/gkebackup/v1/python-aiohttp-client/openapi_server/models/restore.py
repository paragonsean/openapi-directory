# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.restore_config import RestoreConfig
from openapi_server import util


class Restore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup: str=None, cluster: str=None, complete_time: str=None, create_time: str=None, description: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, resources_excluded_count: int=None, resources_failed_count: int=None, resources_restored_count: int=None, restore_config: RestoreConfig=None, state: str=None, state_reason: str=None, uid: str=None, update_time: str=None, volumes_restored_count: int=None):
        """Restore - a model defined in OpenAPI

        :param backup: The backup of this Restore.
        :param cluster: The cluster of this Restore.
        :param complete_time: The complete_time of this Restore.
        :param create_time: The create_time of this Restore.
        :param description: The description of this Restore.
        :param etag: The etag of this Restore.
        :param labels: The labels of this Restore.
        :param name: The name of this Restore.
        :param resources_excluded_count: The resources_excluded_count of this Restore.
        :param resources_failed_count: The resources_failed_count of this Restore.
        :param resources_restored_count: The resources_restored_count of this Restore.
        :param restore_config: The restore_config of this Restore.
        :param state: The state of this Restore.
        :param state_reason: The state_reason of this Restore.
        :param uid: The uid of this Restore.
        :param update_time: The update_time of this Restore.
        :param volumes_restored_count: The volumes_restored_count of this Restore.
        """
        self.openapi_types = {
            'backup': str,
            'cluster': str,
            'complete_time': str,
            'create_time': str,
            'description': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'resources_excluded_count': int,
            'resources_failed_count': int,
            'resources_restored_count': int,
            'restore_config': RestoreConfig,
            'state': str,
            'state_reason': str,
            'uid': str,
            'update_time': str,
            'volumes_restored_count': int
        }

        self.attribute_map = {
            'backup': 'backup',
            'cluster': 'cluster',
            'complete_time': 'completeTime',
            'create_time': 'createTime',
            'description': 'description',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'resources_excluded_count': 'resourcesExcludedCount',
            'resources_failed_count': 'resourcesFailedCount',
            'resources_restored_count': 'resourcesRestoredCount',
            'restore_config': 'restoreConfig',
            'state': 'state',
            'state_reason': 'stateReason',
            'uid': 'uid',
            'update_time': 'updateTime',
            'volumes_restored_count': 'volumesRestoredCount'
        }

        self._backup = backup
        self._cluster = cluster
        self._complete_time = complete_time
        self._create_time = create_time
        self._description = description
        self._etag = etag
        self._labels = labels
        self._name = name
        self._resources_excluded_count = resources_excluded_count
        self._resources_failed_count = resources_failed_count
        self._resources_restored_count = resources_restored_count
        self._restore_config = restore_config
        self._state = state
        self._state_reason = state_reason
        self._uid = uid
        self._update_time = update_time
        self._volumes_restored_count = volumes_restored_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Restore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Restore of this Restore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup(self):
        """Gets the backup of this Restore.

        Required. Immutable. A reference to the Backup used as the source from which this Restore will restore. Note that this Backup must be a sub-resource of the RestorePlan's backup_plan. Format: `projects/*/locations/*/backupPlans/*/backups/*`.

        :return: The backup of this Restore.
        :rtype: str
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """Sets the backup of this Restore.

        Required. Immutable. A reference to the Backup used as the source from which this Restore will restore. Note that this Backup must be a sub-resource of the RestorePlan's backup_plan. Format: `projects/*/locations/*/backupPlans/*/backups/*`.

        :param backup: The backup of this Restore.
        :type backup: str
        """

        self._backup = backup

    @property
    def cluster(self):
        """Gets the cluster of this Restore.

        Output only. The target cluster into which this Restore will restore data. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*` Inherited from parent RestorePlan's cluster value.

        :return: The cluster of this Restore.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this Restore.

        Output only. The target cluster into which this Restore will restore data. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*` Inherited from parent RestorePlan's cluster value.

        :param cluster: The cluster of this Restore.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def complete_time(self):
        """Gets the complete_time of this Restore.

        Output only. Timestamp of when the restore operation completed.

        :return: The complete_time of this Restore.
        :rtype: str
        """
        return self._complete_time

    @complete_time.setter
    def complete_time(self, complete_time):
        """Sets the complete_time of this Restore.

        Output only. Timestamp of when the restore operation completed.

        :param complete_time: The complete_time of this Restore.
        :type complete_time: str
        """

        self._complete_time = complete_time

    @property
    def create_time(self):
        """Gets the create_time of this Restore.

        Output only. The timestamp when this Restore resource was created.

        :return: The create_time of this Restore.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Restore.

        Output only. The timestamp when this Restore resource was created.

        :param create_time: The create_time of this Restore.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Restore.

        User specified descriptive string for this Restore.

        :return: The description of this Restore.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Restore.

        User specified descriptive string for this Restore.

        :param description: The description of this Restore.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this Restore.

        Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform restore updates in order to avoid race conditions: An `etag` is returned in the response to `GetRestore`, and systems are expected to put that etag in the request to `UpdateRestore` or `DeleteRestore` to ensure that their change will be applied to the same version of the resource.

        :return: The etag of this Restore.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Restore.

        Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform restore updates in order to avoid race conditions: An `etag` is returned in the response to `GetRestore`, and systems are expected to put that etag in the request to `UpdateRestore` or `DeleteRestore` to ensure that their change will be applied to the same version of the resource.

        :param etag: The etag of this Restore.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this Restore.

        A set of custom labels supplied by user.

        :return: The labels of this Restore.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Restore.

        A set of custom labels supplied by user.

        :param labels: The labels of this Restore.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Restore.

        Output only. The full name of the Restore resource. Format: `projects/*/locations/*/restorePlans/*/restores/*`

        :return: The name of this Restore.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Restore.

        Output only. The full name of the Restore resource. Format: `projects/*/locations/*/restorePlans/*/restores/*`

        :param name: The name of this Restore.
        :type name: str
        """

        self._name = name

    @property
    def resources_excluded_count(self):
        """Gets the resources_excluded_count of this Restore.

        Output only. Number of resources excluded during the restore execution.

        :return: The resources_excluded_count of this Restore.
        :rtype: int
        """
        return self._resources_excluded_count

    @resources_excluded_count.setter
    def resources_excluded_count(self, resources_excluded_count):
        """Sets the resources_excluded_count of this Restore.

        Output only. Number of resources excluded during the restore execution.

        :param resources_excluded_count: The resources_excluded_count of this Restore.
        :type resources_excluded_count: int
        """

        self._resources_excluded_count = resources_excluded_count

    @property
    def resources_failed_count(self):
        """Gets the resources_failed_count of this Restore.

        Output only. Number of resources that failed to be restored during the restore execution.

        :return: The resources_failed_count of this Restore.
        :rtype: int
        """
        return self._resources_failed_count

    @resources_failed_count.setter
    def resources_failed_count(self, resources_failed_count):
        """Sets the resources_failed_count of this Restore.

        Output only. Number of resources that failed to be restored during the restore execution.

        :param resources_failed_count: The resources_failed_count of this Restore.
        :type resources_failed_count: int
        """

        self._resources_failed_count = resources_failed_count

    @property
    def resources_restored_count(self):
        """Gets the resources_restored_count of this Restore.

        Output only. Number of resources restored during the restore execution.

        :return: The resources_restored_count of this Restore.
        :rtype: int
        """
        return self._resources_restored_count

    @resources_restored_count.setter
    def resources_restored_count(self, resources_restored_count):
        """Sets the resources_restored_count of this Restore.

        Output only. Number of resources restored during the restore execution.

        :param resources_restored_count: The resources_restored_count of this Restore.
        :type resources_restored_count: int
        """

        self._resources_restored_count = resources_restored_count

    @property
    def restore_config(self):
        """Gets the restore_config of this Restore.


        :return: The restore_config of this Restore.
        :rtype: RestoreConfig
        """
        return self._restore_config

    @restore_config.setter
    def restore_config(self, restore_config):
        """Sets the restore_config of this Restore.


        :param restore_config: The restore_config of this Restore.
        :type restore_config: RestoreConfig
        """

        self._restore_config = restore_config

    @property
    def state(self):
        """Gets the state of this Restore.

        Output only. The current state of the Restore.

        :return: The state of this Restore.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Restore.

        Output only. The current state of the Restore.

        :param state: The state of this Restore.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "IN_PROGRESS", "SUCCEEDED", "FAILED", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_reason(self):
        """Gets the state_reason of this Restore.

        Output only. Human-readable description of why the Restore is in its current state.

        :return: The state_reason of this Restore.
        :rtype: str
        """
        return self._state_reason

    @state_reason.setter
    def state_reason(self, state_reason):
        """Sets the state_reason of this Restore.

        Output only. Human-readable description of why the Restore is in its current state.

        :param state_reason: The state_reason of this Restore.
        :type state_reason: str
        """

        self._state_reason = state_reason

    @property
    def uid(self):
        """Gets the uid of this Restore.

        Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.

        :return: The uid of this Restore.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Restore.

        Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.

        :param uid: The uid of this Restore.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Restore.

        Output only. The timestamp when this Restore resource was last updated.

        :return: The update_time of this Restore.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Restore.

        Output only. The timestamp when this Restore resource was last updated.

        :param update_time: The update_time of this Restore.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def volumes_restored_count(self):
        """Gets the volumes_restored_count of this Restore.

        Output only. Number of volumes restored during the restore execution.

        :return: The volumes_restored_count of this Restore.
        :rtype: int
        """
        return self._volumes_restored_count

    @volumes_restored_count.setter
    def volumes_restored_count(self, volumes_restored_count):
        """Sets the volumes_restored_count of this Restore.

        Output only. Number of volumes restored during the restore execution.

        :param volumes_restored_count: The volumes_restored_count of this Restore.
        :type volumes_restored_count: int
        """

        self._volumes_restored_count = volumes_restored_count
