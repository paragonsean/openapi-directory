# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.namespaced_name import NamespacedName
from openapi_server import util


class VolumeBackup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complete_time: str=None, create_time: str=None, disk_size_bytes: str=None, etag: str=None, format: str=None, name: str=None, source_pvc: NamespacedName=None, state: str=None, state_message: str=None, storage_bytes: str=None, uid: str=None, update_time: str=None, volume_backup_handle: str=None):
        """VolumeBackup - a model defined in OpenAPI

        :param complete_time: The complete_time of this VolumeBackup.
        :param create_time: The create_time of this VolumeBackup.
        :param disk_size_bytes: The disk_size_bytes of this VolumeBackup.
        :param etag: The etag of this VolumeBackup.
        :param format: The format of this VolumeBackup.
        :param name: The name of this VolumeBackup.
        :param source_pvc: The source_pvc of this VolumeBackup.
        :param state: The state of this VolumeBackup.
        :param state_message: The state_message of this VolumeBackup.
        :param storage_bytes: The storage_bytes of this VolumeBackup.
        :param uid: The uid of this VolumeBackup.
        :param update_time: The update_time of this VolumeBackup.
        :param volume_backup_handle: The volume_backup_handle of this VolumeBackup.
        """
        self.openapi_types = {
            'complete_time': str,
            'create_time': str,
            'disk_size_bytes': str,
            'etag': str,
            'format': str,
            'name': str,
            'source_pvc': NamespacedName,
            'state': str,
            'state_message': str,
            'storage_bytes': str,
            'uid': str,
            'update_time': str,
            'volume_backup_handle': str
        }

        self.attribute_map = {
            'complete_time': 'completeTime',
            'create_time': 'createTime',
            'disk_size_bytes': 'diskSizeBytes',
            'etag': 'etag',
            'format': 'format',
            'name': 'name',
            'source_pvc': 'sourcePvc',
            'state': 'state',
            'state_message': 'stateMessage',
            'storage_bytes': 'storageBytes',
            'uid': 'uid',
            'update_time': 'updateTime',
            'volume_backup_handle': 'volumeBackupHandle'
        }

        self._complete_time = complete_time
        self._create_time = create_time
        self._disk_size_bytes = disk_size_bytes
        self._etag = etag
        self._format = format
        self._name = name
        self._source_pvc = source_pvc
        self._state = state
        self._state_message = state_message
        self._storage_bytes = storage_bytes
        self._uid = uid
        self._update_time = update_time
        self._volume_backup_handle = volume_backup_handle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeBackup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeBackup of this VolumeBackup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complete_time(self):
        """Gets the complete_time of this VolumeBackup.

        Output only. The timestamp when the associated underlying volume backup operation completed.

        :return: The complete_time of this VolumeBackup.
        :rtype: str
        """
        return self._complete_time

    @complete_time.setter
    def complete_time(self, complete_time):
        """Sets the complete_time of this VolumeBackup.

        Output only. The timestamp when the associated underlying volume backup operation completed.

        :param complete_time: The complete_time of this VolumeBackup.
        :type complete_time: str
        """

        self._complete_time = complete_time

    @property
    def create_time(self):
        """Gets the create_time of this VolumeBackup.

        Output only. The timestamp when this VolumeBackup resource was created.

        :return: The create_time of this VolumeBackup.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this VolumeBackup.

        Output only. The timestamp when this VolumeBackup resource was created.

        :param create_time: The create_time of this VolumeBackup.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def disk_size_bytes(self):
        """Gets the disk_size_bytes of this VolumeBackup.

        Output only. The minimum size of the disk to which this VolumeBackup can be restored.

        :return: The disk_size_bytes of this VolumeBackup.
        :rtype: str
        """
        return self._disk_size_bytes

    @disk_size_bytes.setter
    def disk_size_bytes(self, disk_size_bytes):
        """Sets the disk_size_bytes of this VolumeBackup.

        Output only. The minimum size of the disk to which this VolumeBackup can be restored.

        :param disk_size_bytes: The disk_size_bytes of this VolumeBackup.
        :type disk_size_bytes: str
        """

        self._disk_size_bytes = disk_size_bytes

    @property
    def etag(self):
        """Gets the etag of this VolumeBackup.

        Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a volume backup from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform volume backup updates in order to avoid race conditions.

        :return: The etag of this VolumeBackup.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this VolumeBackup.

        Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a volume backup from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform volume backup updates in order to avoid race conditions.

        :param etag: The etag of this VolumeBackup.
        :type etag: str
        """

        self._etag = etag

    @property
    def format(self):
        """Gets the format of this VolumeBackup.

        Output only. The format used for the volume backup.

        :return: The format of this VolumeBackup.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this VolumeBackup.

        Output only. The format used for the volume backup.

        :param format: The format of this VolumeBackup.
        :type format: str
        """
        allowed_values = ["VOLUME_BACKUP_FORMAT_UNSPECIFIED", "GCE_PERSISTENT_DISK"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def name(self):
        """Gets the name of this VolumeBackup.

        Output only. The full name of the VolumeBackup resource. Format: `projects/*/locations/*/backupPlans/*/backups/*/volumeBackups/*`.

        :return: The name of this VolumeBackup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeBackup.

        Output only. The full name of the VolumeBackup resource. Format: `projects/*/locations/*/backupPlans/*/backups/*/volumeBackups/*`.

        :param name: The name of this VolumeBackup.
        :type name: str
        """

        self._name = name

    @property
    def source_pvc(self):
        """Gets the source_pvc of this VolumeBackup.


        :return: The source_pvc of this VolumeBackup.
        :rtype: NamespacedName
        """
        return self._source_pvc

    @source_pvc.setter
    def source_pvc(self, source_pvc):
        """Sets the source_pvc of this VolumeBackup.


        :param source_pvc: The source_pvc of this VolumeBackup.
        :type source_pvc: NamespacedName
        """

        self._source_pvc = source_pvc

    @property
    def state(self):
        """Gets the state of this VolumeBackup.

        Output only. The current state of this VolumeBackup.

        :return: The state of this VolumeBackup.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VolumeBackup.

        Output only. The current state of this VolumeBackup.

        :param state: The state of this VolumeBackup.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "SNAPSHOTTING", "UPLOADING", "SUCCEEDED", "FAILED", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_message(self):
        """Gets the state_message of this VolumeBackup.

        Output only. A human readable message explaining why the VolumeBackup is in its current state.

        :return: The state_message of this VolumeBackup.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this VolumeBackup.

        Output only. A human readable message explaining why the VolumeBackup is in its current state.

        :param state_message: The state_message of this VolumeBackup.
        :type state_message: str
        """

        self._state_message = state_message

    @property
    def storage_bytes(self):
        """Gets the storage_bytes of this VolumeBackup.

        Output only. The aggregate size of the underlying artifacts associated with this VolumeBackup in the backup storage. This may change over time when multiple backups of the same volume share the same backup storage location. In particular, this is likely to increase in size when the immediately preceding backup of the same volume is deleted.

        :return: The storage_bytes of this VolumeBackup.
        :rtype: str
        """
        return self._storage_bytes

    @storage_bytes.setter
    def storage_bytes(self, storage_bytes):
        """Sets the storage_bytes of this VolumeBackup.

        Output only. The aggregate size of the underlying artifacts associated with this VolumeBackup in the backup storage. This may change over time when multiple backups of the same volume share the same backup storage location. In particular, this is likely to increase in size when the immediately preceding backup of the same volume is deleted.

        :param storage_bytes: The storage_bytes of this VolumeBackup.
        :type storage_bytes: str
        """

        self._storage_bytes = storage_bytes

    @property
    def uid(self):
        """Gets the uid of this VolumeBackup.

        Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.

        :return: The uid of this VolumeBackup.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this VolumeBackup.

        Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.

        :param uid: The uid of this VolumeBackup.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this VolumeBackup.

        Output only. The timestamp when this VolumeBackup resource was last updated.

        :return: The update_time of this VolumeBackup.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this VolumeBackup.

        Output only. The timestamp when this VolumeBackup resource was last updated.

        :param update_time: The update_time of this VolumeBackup.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def volume_backup_handle(self):
        """Gets the volume_backup_handle of this VolumeBackup.

        Output only. A storage system-specific opaque handle to the underlying volume backup.

        :return: The volume_backup_handle of this VolumeBackup.
        :rtype: str
        """
        return self._volume_backup_handle

    @volume_backup_handle.setter
    def volume_backup_handle(self, volume_backup_handle):
        """Sets the volume_backup_handle of this VolumeBackup.

        Output only. A storage system-specific opaque handle to the underlying volume backup.

        :param volume_backup_handle: The volume_backup_handle of this VolumeBackup.
        :type volume_backup_handle: str
        """

        self._volume_backup_handle = volume_backup_handle
