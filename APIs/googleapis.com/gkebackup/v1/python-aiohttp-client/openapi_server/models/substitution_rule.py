# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_kind import GroupKind
from openapi_server import util


class SubstitutionRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_value: str=None, original_value_pattern: str=None, target_group_kinds: List[GroupKind]=None, target_json_path: str=None, target_namespaces: List[str]=None):
        """SubstitutionRule - a model defined in OpenAPI

        :param new_value: The new_value of this SubstitutionRule.
        :param original_value_pattern: The original_value_pattern of this SubstitutionRule.
        :param target_group_kinds: The target_group_kinds of this SubstitutionRule.
        :param target_json_path: The target_json_path of this SubstitutionRule.
        :param target_namespaces: The target_namespaces of this SubstitutionRule.
        """
        self.openapi_types = {
            'new_value': str,
            'original_value_pattern': str,
            'target_group_kinds': List[GroupKind],
            'target_json_path': str,
            'target_namespaces': List[str]
        }

        self.attribute_map = {
            'new_value': 'newValue',
            'original_value_pattern': 'originalValuePattern',
            'target_group_kinds': 'targetGroupKinds',
            'target_json_path': 'targetJsonPath',
            'target_namespaces': 'targetNamespaces'
        }

        self._new_value = new_value
        self._original_value_pattern = original_value_pattern
        self._target_group_kinds = target_group_kinds
        self._target_json_path = target_json_path
        self._target_namespaces = target_namespaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubstitutionRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubstitutionRule of this SubstitutionRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_value(self):
        """Gets the new_value of this SubstitutionRule.

        Optional. This is the new value to set for any fields that pass the filtering and selection criteria. To remove a value from a Kubernetes resource, either leave this field unspecified, or set it to the empty string (\"\").

        :return: The new_value of this SubstitutionRule.
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this SubstitutionRule.

        Optional. This is the new value to set for any fields that pass the filtering and selection criteria. To remove a value from a Kubernetes resource, either leave this field unspecified, or set it to the empty string (\"\").

        :param new_value: The new_value of this SubstitutionRule.
        :type new_value: str
        """

        self._new_value = new_value

    @property
    def original_value_pattern(self):
        """Gets the original_value_pattern of this SubstitutionRule.

        Optional. (Filtering parameter) This is a [regular expression] (https://en.wikipedia.org/wiki/Regular_expression) that is compared against the fields matched by the target_json_path expression (and must also have passed the previous filters). Substitution will not be performed against fields whose value does not match this expression. If this field is NOT specified, then ALL fields matched by the target_json_path expression will undergo substitution. Note that an empty (e.g., \"\", rather than unspecified) value for this field will only match empty fields.

        :return: The original_value_pattern of this SubstitutionRule.
        :rtype: str
        """
        return self._original_value_pattern

    @original_value_pattern.setter
    def original_value_pattern(self, original_value_pattern):
        """Sets the original_value_pattern of this SubstitutionRule.

        Optional. (Filtering parameter) This is a [regular expression] (https://en.wikipedia.org/wiki/Regular_expression) that is compared against the fields matched by the target_json_path expression (and must also have passed the previous filters). Substitution will not be performed against fields whose value does not match this expression. If this field is NOT specified, then ALL fields matched by the target_json_path expression will undergo substitution. Note that an empty (e.g., \"\", rather than unspecified) value for this field will only match empty fields.

        :param original_value_pattern: The original_value_pattern of this SubstitutionRule.
        :type original_value_pattern: str
        """

        self._original_value_pattern = original_value_pattern

    @property
    def target_group_kinds(self):
        """Gets the target_group_kinds of this SubstitutionRule.

        Optional. (Filtering parameter) Any resource subject to substitution must belong to one of the listed \"types\". If this field is not provided, no type filtering will be performed (all resources of all types matching previous filtering parameters will be candidates for substitution).

        :return: The target_group_kinds of this SubstitutionRule.
        :rtype: List[GroupKind]
        """
        return self._target_group_kinds

    @target_group_kinds.setter
    def target_group_kinds(self, target_group_kinds):
        """Sets the target_group_kinds of this SubstitutionRule.

        Optional. (Filtering parameter) Any resource subject to substitution must belong to one of the listed \"types\". If this field is not provided, no type filtering will be performed (all resources of all types matching previous filtering parameters will be candidates for substitution).

        :param target_group_kinds: The target_group_kinds of this SubstitutionRule.
        :type target_group_kinds: List[GroupKind]
        """

        self._target_group_kinds = target_group_kinds

    @property
    def target_json_path(self):
        """Gets the target_json_path of this SubstitutionRule.

        Required. This is a [JSONPath] (https://kubernetes.io/docs/reference/kubectl/jsonpath/) expression that matches specific fields of candidate resources and it operates as both a filtering parameter (resources that are not matched with this expression will not be candidates for substitution) as well as a field identifier (identifies exactly which fields out of the candidate resources will be modified).

        :return: The target_json_path of this SubstitutionRule.
        :rtype: str
        """
        return self._target_json_path

    @target_json_path.setter
    def target_json_path(self, target_json_path):
        """Sets the target_json_path of this SubstitutionRule.

        Required. This is a [JSONPath] (https://kubernetes.io/docs/reference/kubectl/jsonpath/) expression that matches specific fields of candidate resources and it operates as both a filtering parameter (resources that are not matched with this expression will not be candidates for substitution) as well as a field identifier (identifies exactly which fields out of the candidate resources will be modified).

        :param target_json_path: The target_json_path of this SubstitutionRule.
        :type target_json_path: str
        """

        self._target_json_path = target_json_path

    @property
    def target_namespaces(self):
        """Gets the target_namespaces of this SubstitutionRule.

        Optional. (Filtering parameter) Any resource subject to substitution must be contained within one of the listed Kubernetes Namespace in the Backup. If this field is not provided, no namespace filtering will be performed (all resources in all Namespaces, including all cluster-scoped resources, will be candidates for substitution). To mix cluster-scoped and namespaced resources in the same rule, use an empty string (\"\") as one of the target namespaces.

        :return: The target_namespaces of this SubstitutionRule.
        :rtype: List[str]
        """
        return self._target_namespaces

    @target_namespaces.setter
    def target_namespaces(self, target_namespaces):
        """Sets the target_namespaces of this SubstitutionRule.

        Optional. (Filtering parameter) Any resource subject to substitution must be contained within one of the listed Kubernetes Namespace in the Backup. If this field is not provided, no namespace filtering will be performed (all resources in all Namespaces, including all cluster-scoped resources, will be candidates for substitution). To mix cluster-scoped and namespaced resources in the same rule, use an empty string (\"\") as one of the target namespaces.

        :param target_namespaces: The target_namespaces of this SubstitutionRule.
        :type target_namespaces: List[str]
        """

        self._target_namespaces = target_namespaces
