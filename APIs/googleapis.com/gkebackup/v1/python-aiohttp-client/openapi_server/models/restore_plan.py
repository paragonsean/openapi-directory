# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.restore_config import RestoreConfig
from openapi_server import util


class RestorePlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_plan: str=None, cluster: str=None, create_time: str=None, description: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, restore_config: RestoreConfig=None, state: str=None, state_reason: str=None, uid: str=None, update_time: str=None):
        """RestorePlan - a model defined in OpenAPI

        :param backup_plan: The backup_plan of this RestorePlan.
        :param cluster: The cluster of this RestorePlan.
        :param create_time: The create_time of this RestorePlan.
        :param description: The description of this RestorePlan.
        :param etag: The etag of this RestorePlan.
        :param labels: The labels of this RestorePlan.
        :param name: The name of this RestorePlan.
        :param restore_config: The restore_config of this RestorePlan.
        :param state: The state of this RestorePlan.
        :param state_reason: The state_reason of this RestorePlan.
        :param uid: The uid of this RestorePlan.
        :param update_time: The update_time of this RestorePlan.
        """
        self.openapi_types = {
            'backup_plan': str,
            'cluster': str,
            'create_time': str,
            'description': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'restore_config': RestoreConfig,
            'state': str,
            'state_reason': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'backup_plan': 'backupPlan',
            'cluster': 'cluster',
            'create_time': 'createTime',
            'description': 'description',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'restore_config': 'restoreConfig',
            'state': 'state',
            'state_reason': 'stateReason',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._backup_plan = backup_plan
        self._cluster = cluster
        self._create_time = create_time
        self._description = description
        self._etag = etag
        self._labels = labels
        self._name = name
        self._restore_config = restore_config
        self._state = state
        self._state_reason = state_reason
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestorePlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestorePlan of this RestorePlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_plan(self):
        """Gets the backup_plan of this RestorePlan.

        Required. Immutable. A reference to the BackupPlan from which Backups may be used as the source for Restores created via this RestorePlan. Format: `projects/*/locations/*/backupPlans/*`.

        :return: The backup_plan of this RestorePlan.
        :rtype: str
        """
        return self._backup_plan

    @backup_plan.setter
    def backup_plan(self, backup_plan):
        """Sets the backup_plan of this RestorePlan.

        Required. Immutable. A reference to the BackupPlan from which Backups may be used as the source for Restores created via this RestorePlan. Format: `projects/*/locations/*/backupPlans/*`.

        :param backup_plan: The backup_plan of this RestorePlan.
        :type backup_plan: str
        """

        self._backup_plan = backup_plan

    @property
    def cluster(self):
        """Gets the cluster of this RestorePlan.

        Required. Immutable. The target cluster into which Restores created via this RestorePlan will restore data. NOTE: the cluster's region must be the same as the RestorePlan. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*`

        :return: The cluster of this RestorePlan.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this RestorePlan.

        Required. Immutable. The target cluster into which Restores created via this RestorePlan will restore data. NOTE: the cluster's region must be the same as the RestorePlan. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*`

        :param cluster: The cluster of this RestorePlan.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def create_time(self):
        """Gets the create_time of this RestorePlan.

        Output only. The timestamp when this RestorePlan resource was created.

        :return: The create_time of this RestorePlan.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this RestorePlan.

        Output only. The timestamp when this RestorePlan resource was created.

        :param create_time: The create_time of this RestorePlan.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this RestorePlan.

        Optional. User specified descriptive string for this RestorePlan.

        :return: The description of this RestorePlan.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RestorePlan.

        Optional. User specified descriptive string for this RestorePlan.

        :param description: The description of this RestorePlan.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this RestorePlan.

        Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform restore updates in order to avoid race conditions: An `etag` is returned in the response to `GetRestorePlan`, and systems are expected to put that etag in the request to `UpdateRestorePlan` or `DeleteRestorePlan` to ensure that their change will be applied to the same version of the resource.

        :return: The etag of this RestorePlan.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this RestorePlan.

        Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform restore updates in order to avoid race conditions: An `etag` is returned in the response to `GetRestorePlan`, and systems are expected to put that etag in the request to `UpdateRestorePlan` or `DeleteRestorePlan` to ensure that their change will be applied to the same version of the resource.

        :param etag: The etag of this RestorePlan.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this RestorePlan.

        Optional. A set of custom labels supplied by user.

        :return: The labels of this RestorePlan.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this RestorePlan.

        Optional. A set of custom labels supplied by user.

        :param labels: The labels of this RestorePlan.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this RestorePlan.

        Output only. The full name of the RestorePlan resource. Format: `projects/*/locations/*/restorePlans/*`.

        :return: The name of this RestorePlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RestorePlan.

        Output only. The full name of the RestorePlan resource. Format: `projects/*/locations/*/restorePlans/*`.

        :param name: The name of this RestorePlan.
        :type name: str
        """

        self._name = name

    @property
    def restore_config(self):
        """Gets the restore_config of this RestorePlan.


        :return: The restore_config of this RestorePlan.
        :rtype: RestoreConfig
        """
        return self._restore_config

    @restore_config.setter
    def restore_config(self, restore_config):
        """Sets the restore_config of this RestorePlan.


        :param restore_config: The restore_config of this RestorePlan.
        :type restore_config: RestoreConfig
        """

        self._restore_config = restore_config

    @property
    def state(self):
        """Gets the state of this RestorePlan.

        Output only. State of the RestorePlan. This State field reflects the various stages a RestorePlan can be in during the Create operation.

        :return: The state of this RestorePlan.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RestorePlan.

        Output only. State of the RestorePlan. This State field reflects the various stages a RestorePlan can be in during the Create operation.

        :param state: The state of this RestorePlan.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CLUSTER_PENDING", "READY", "FAILED", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_reason(self):
        """Gets the state_reason of this RestorePlan.

        Output only. Human-readable description of why RestorePlan is in the current `state`

        :return: The state_reason of this RestorePlan.
        :rtype: str
        """
        return self._state_reason

    @state_reason.setter
    def state_reason(self, state_reason):
        """Sets the state_reason of this RestorePlan.

        Output only. Human-readable description of why RestorePlan is in the current `state`

        :param state_reason: The state_reason of this RestorePlan.
        :type state_reason: str
        """

        self._state_reason = state_reason

    @property
    def uid(self):
        """Gets the uid of this RestorePlan.

        Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.

        :return: The uid of this RestorePlan.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this RestorePlan.

        Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.

        :param uid: The uid of this RestorePlan.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this RestorePlan.

        Output only. The timestamp when this RestorePlan resource was last updated.

        :return: The update_time of this RestorePlan.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this RestorePlan.

        Output only. The timestamp when this RestorePlan resource was last updated.

        :param update_time: The update_time of this RestorePlan.
        :type update_time: str
        """

        self._update_time = update_time
