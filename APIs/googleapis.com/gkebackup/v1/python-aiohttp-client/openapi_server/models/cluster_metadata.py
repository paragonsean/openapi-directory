# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anthos_version: str=None, backup_crd_versions: Dict[str, str]=None, cluster: str=None, gke_version: str=None, k8s_version: str=None):
        """ClusterMetadata - a model defined in OpenAPI

        :param anthos_version: The anthos_version of this ClusterMetadata.
        :param backup_crd_versions: The backup_crd_versions of this ClusterMetadata.
        :param cluster: The cluster of this ClusterMetadata.
        :param gke_version: The gke_version of this ClusterMetadata.
        :param k8s_version: The k8s_version of this ClusterMetadata.
        """
        self.openapi_types = {
            'anthos_version': str,
            'backup_crd_versions': Dict[str, str],
            'cluster': str,
            'gke_version': str,
            'k8s_version': str
        }

        self.attribute_map = {
            'anthos_version': 'anthosVersion',
            'backup_crd_versions': 'backupCrdVersions',
            'cluster': 'cluster',
            'gke_version': 'gkeVersion',
            'k8s_version': 'k8sVersion'
        }

        self._anthos_version = anthos_version
        self._backup_crd_versions = backup_crd_versions
        self._cluster = cluster
        self._gke_version = gke_version
        self._k8s_version = k8s_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterMetadata of this ClusterMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anthos_version(self):
        """Gets the anthos_version of this ClusterMetadata.

        Output only. Anthos version

        :return: The anthos_version of this ClusterMetadata.
        :rtype: str
        """
        return self._anthos_version

    @anthos_version.setter
    def anthos_version(self, anthos_version):
        """Sets the anthos_version of this ClusterMetadata.

        Output only. Anthos version

        :param anthos_version: The anthos_version of this ClusterMetadata.
        :type anthos_version: str
        """

        self._anthos_version = anthos_version

    @property
    def backup_crd_versions(self):
        """Gets the backup_crd_versions of this ClusterMetadata.

        Output only. A list of the Backup for GKE CRD versions found in the cluster.

        :return: The backup_crd_versions of this ClusterMetadata.
        :rtype: Dict[str, str]
        """
        return self._backup_crd_versions

    @backup_crd_versions.setter
    def backup_crd_versions(self, backup_crd_versions):
        """Sets the backup_crd_versions of this ClusterMetadata.

        Output only. A list of the Backup for GKE CRD versions found in the cluster.

        :param backup_crd_versions: The backup_crd_versions of this ClusterMetadata.
        :type backup_crd_versions: Dict[str, str]
        """

        self._backup_crd_versions = backup_crd_versions

    @property
    def cluster(self):
        """Gets the cluster of this ClusterMetadata.

        Output only. The source cluster from which this Backup was created. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*` This is inherited from the parent BackupPlan's cluster field.

        :return: The cluster of this ClusterMetadata.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this ClusterMetadata.

        Output only. The source cluster from which this Backup was created. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*` This is inherited from the parent BackupPlan's cluster field.

        :param cluster: The cluster of this ClusterMetadata.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def gke_version(self):
        """Gets the gke_version of this ClusterMetadata.

        Output only. GKE version

        :return: The gke_version of this ClusterMetadata.
        :rtype: str
        """
        return self._gke_version

    @gke_version.setter
    def gke_version(self, gke_version):
        """Sets the gke_version of this ClusterMetadata.

        Output only. GKE version

        :param gke_version: The gke_version of this ClusterMetadata.
        :type gke_version: str
        """

        self._gke_version = gke_version

    @property
    def k8s_version(self):
        """Gets the k8s_version of this ClusterMetadata.

        Output only. The Kubernetes server version of the source cluster.

        :return: The k8s_version of this ClusterMetadata.
        :rtype: str
        """
        return self._k8s_version

    @k8s_version.setter
    def k8s_version(self, k8s_version):
        """Sets the k8s_version of this ClusterMetadata.

        Output only. The Kubernetes server version of the source cluster.

        :param k8s_version: The k8s_version of this ClusterMetadata.
        :type k8s_version: str
        """

        self._k8s_version = k8s_version
