# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_key import EncryptionKey
from openapi_server.models.namespaced_names import NamespacedNames
from openapi_server.models.namespaces import Namespaces
from openapi_server import util


class BackupConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_namespaces: bool=None, encryption_key: EncryptionKey=None, include_secrets: bool=None, include_volume_data: bool=None, selected_applications: NamespacedNames=None, selected_namespaces: Namespaces=None):
        """BackupConfig - a model defined in OpenAPI

        :param all_namespaces: The all_namespaces of this BackupConfig.
        :param encryption_key: The encryption_key of this BackupConfig.
        :param include_secrets: The include_secrets of this BackupConfig.
        :param include_volume_data: The include_volume_data of this BackupConfig.
        :param selected_applications: The selected_applications of this BackupConfig.
        :param selected_namespaces: The selected_namespaces of this BackupConfig.
        """
        self.openapi_types = {
            'all_namespaces': bool,
            'encryption_key': EncryptionKey,
            'include_secrets': bool,
            'include_volume_data': bool,
            'selected_applications': NamespacedNames,
            'selected_namespaces': Namespaces
        }

        self.attribute_map = {
            'all_namespaces': 'allNamespaces',
            'encryption_key': 'encryptionKey',
            'include_secrets': 'includeSecrets',
            'include_volume_data': 'includeVolumeData',
            'selected_applications': 'selectedApplications',
            'selected_namespaces': 'selectedNamespaces'
        }

        self._all_namespaces = all_namespaces
        self._encryption_key = encryption_key
        self._include_secrets = include_secrets
        self._include_volume_data = include_volume_data
        self._selected_applications = selected_applications
        self._selected_namespaces = selected_namespaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupConfig of this BackupConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_namespaces(self):
        """Gets the all_namespaces of this BackupConfig.

        If True, include all namespaced resources

        :return: The all_namespaces of this BackupConfig.
        :rtype: bool
        """
        return self._all_namespaces

    @all_namespaces.setter
    def all_namespaces(self, all_namespaces):
        """Sets the all_namespaces of this BackupConfig.

        If True, include all namespaced resources

        :param all_namespaces: The all_namespaces of this BackupConfig.
        :type all_namespaces: bool
        """

        self._all_namespaces = all_namespaces

    @property
    def encryption_key(self):
        """Gets the encryption_key of this BackupConfig.


        :return: The encryption_key of this BackupConfig.
        :rtype: EncryptionKey
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this BackupConfig.


        :param encryption_key: The encryption_key of this BackupConfig.
        :type encryption_key: EncryptionKey
        """

        self._encryption_key = encryption_key

    @property
    def include_secrets(self):
        """Gets the include_secrets of this BackupConfig.

        Optional. This flag specifies whether Kubernetes Secret resources should be included when they fall into the scope of Backups. Default: False

        :return: The include_secrets of this BackupConfig.
        :rtype: bool
        """
        return self._include_secrets

    @include_secrets.setter
    def include_secrets(self, include_secrets):
        """Sets the include_secrets of this BackupConfig.

        Optional. This flag specifies whether Kubernetes Secret resources should be included when they fall into the scope of Backups. Default: False

        :param include_secrets: The include_secrets of this BackupConfig.
        :type include_secrets: bool
        """

        self._include_secrets = include_secrets

    @property
    def include_volume_data(self):
        """Gets the include_volume_data of this BackupConfig.

        Optional. This flag specifies whether volume data should be backed up when PVCs are included in the scope of a Backup. Default: False

        :return: The include_volume_data of this BackupConfig.
        :rtype: bool
        """
        return self._include_volume_data

    @include_volume_data.setter
    def include_volume_data(self, include_volume_data):
        """Sets the include_volume_data of this BackupConfig.

        Optional. This flag specifies whether volume data should be backed up when PVCs are included in the scope of a Backup. Default: False

        :param include_volume_data: The include_volume_data of this BackupConfig.
        :type include_volume_data: bool
        """

        self._include_volume_data = include_volume_data

    @property
    def selected_applications(self):
        """Gets the selected_applications of this BackupConfig.


        :return: The selected_applications of this BackupConfig.
        :rtype: NamespacedNames
        """
        return self._selected_applications

    @selected_applications.setter
    def selected_applications(self, selected_applications):
        """Sets the selected_applications of this BackupConfig.


        :param selected_applications: The selected_applications of this BackupConfig.
        :type selected_applications: NamespacedNames
        """

        self._selected_applications = selected_applications

    @property
    def selected_namespaces(self):
        """Gets the selected_namespaces of this BackupConfig.


        :return: The selected_namespaces of this BackupConfig.
        :rtype: Namespaces
        """
        return self._selected_namespaces

    @selected_namespaces.setter
    def selected_namespaces(self, selected_namespaces):
        """Sets the selected_namespaces of this BackupConfig.


        :param selected_namespaces: The selected_namespaces of this BackupConfig.
        :type selected_namespaces: Namespaces
        """

        self._selected_namespaces = selected_namespaces
