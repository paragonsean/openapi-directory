# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_config import BackupConfig
from openapi_server.models.retention_policy import RetentionPolicy
from openapi_server.models.schedule import Schedule
from openapi_server import util


class BackupPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_config: BackupConfig=None, backup_schedule: Schedule=None, cluster: str=None, create_time: str=None, deactivated: bool=None, description: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, protected_pod_count: int=None, retention_policy: RetentionPolicy=None, state: str=None, state_reason: str=None, uid: str=None, update_time: str=None):
        """BackupPlan - a model defined in OpenAPI

        :param backup_config: The backup_config of this BackupPlan.
        :param backup_schedule: The backup_schedule of this BackupPlan.
        :param cluster: The cluster of this BackupPlan.
        :param create_time: The create_time of this BackupPlan.
        :param deactivated: The deactivated of this BackupPlan.
        :param description: The description of this BackupPlan.
        :param etag: The etag of this BackupPlan.
        :param labels: The labels of this BackupPlan.
        :param name: The name of this BackupPlan.
        :param protected_pod_count: The protected_pod_count of this BackupPlan.
        :param retention_policy: The retention_policy of this BackupPlan.
        :param state: The state of this BackupPlan.
        :param state_reason: The state_reason of this BackupPlan.
        :param uid: The uid of this BackupPlan.
        :param update_time: The update_time of this BackupPlan.
        """
        self.openapi_types = {
            'backup_config': BackupConfig,
            'backup_schedule': Schedule,
            'cluster': str,
            'create_time': str,
            'deactivated': bool,
            'description': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'protected_pod_count': int,
            'retention_policy': RetentionPolicy,
            'state': str,
            'state_reason': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'backup_config': 'backupConfig',
            'backup_schedule': 'backupSchedule',
            'cluster': 'cluster',
            'create_time': 'createTime',
            'deactivated': 'deactivated',
            'description': 'description',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'protected_pod_count': 'protectedPodCount',
            'retention_policy': 'retentionPolicy',
            'state': 'state',
            'state_reason': 'stateReason',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._backup_config = backup_config
        self._backup_schedule = backup_schedule
        self._cluster = cluster
        self._create_time = create_time
        self._deactivated = deactivated
        self._description = description
        self._etag = etag
        self._labels = labels
        self._name = name
        self._protected_pod_count = protected_pod_count
        self._retention_policy = retention_policy
        self._state = state
        self._state_reason = state_reason
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupPlan of this BackupPlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_config(self):
        """Gets the backup_config of this BackupPlan.


        :return: The backup_config of this BackupPlan.
        :rtype: BackupConfig
        """
        return self._backup_config

    @backup_config.setter
    def backup_config(self, backup_config):
        """Sets the backup_config of this BackupPlan.


        :param backup_config: The backup_config of this BackupPlan.
        :type backup_config: BackupConfig
        """

        self._backup_config = backup_config

    @property
    def backup_schedule(self):
        """Gets the backup_schedule of this BackupPlan.


        :return: The backup_schedule of this BackupPlan.
        :rtype: Schedule
        """
        return self._backup_schedule

    @backup_schedule.setter
    def backup_schedule(self, backup_schedule):
        """Sets the backup_schedule of this BackupPlan.


        :param backup_schedule: The backup_schedule of this BackupPlan.
        :type backup_schedule: Schedule
        """

        self._backup_schedule = backup_schedule

    @property
    def cluster(self):
        """Gets the cluster of this BackupPlan.

        Required. Immutable. The source cluster from which Backups will be created via this BackupPlan. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*`

        :return: The cluster of this BackupPlan.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this BackupPlan.

        Required. Immutable. The source cluster from which Backups will be created via this BackupPlan. Valid formats: - `projects/*/locations/*/clusters/*` - `projects/*/zones/*/clusters/*`

        :param cluster: The cluster of this BackupPlan.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def create_time(self):
        """Gets the create_time of this BackupPlan.

        Output only. The timestamp when this BackupPlan resource was created.

        :return: The create_time of this BackupPlan.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this BackupPlan.

        Output only. The timestamp when this BackupPlan resource was created.

        :param create_time: The create_time of this BackupPlan.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def deactivated(self):
        """Gets the deactivated of this BackupPlan.

        Optional. This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such that no further updates will be allowed (except deletes), including the deactivated field itself. It also prevents any new Backups from being created via this BackupPlan (including scheduled Backups). Default: False

        :return: The deactivated of this BackupPlan.
        :rtype: bool
        """
        return self._deactivated

    @deactivated.setter
    def deactivated(self, deactivated):
        """Sets the deactivated of this BackupPlan.

        Optional. This flag indicates whether this BackupPlan has been deactivated. Setting this field to True locks the BackupPlan such that no further updates will be allowed (except deletes), including the deactivated field itself. It also prevents any new Backups from being created via this BackupPlan (including scheduled Backups). Default: False

        :param deactivated: The deactivated of this BackupPlan.
        :type deactivated: bool
        """

        self._deactivated = deactivated

    @property
    def description(self):
        """Gets the description of this BackupPlan.

        Optional. User specified descriptive string for this BackupPlan.

        :return: The description of this BackupPlan.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BackupPlan.

        Optional. User specified descriptive string for this BackupPlan.

        :param description: The description of this BackupPlan.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this BackupPlan.

        Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup plan from overwriting each other. It is strongly suggested that systems make use of the 'etag' in the read-modify-write cycle to perform BackupPlan updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackupPlan`, and systems are expected to put that etag in the request to `UpdateBackupPlan` or `DeleteBackupPlan` to ensure that their change will be applied to the same version of the resource.

        :return: The etag of this BackupPlan.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this BackupPlan.

        Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup plan from overwriting each other. It is strongly suggested that systems make use of the 'etag' in the read-modify-write cycle to perform BackupPlan updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackupPlan`, and systems are expected to put that etag in the request to `UpdateBackupPlan` or `DeleteBackupPlan` to ensure that their change will be applied to the same version of the resource.

        :param etag: The etag of this BackupPlan.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this BackupPlan.

        Optional. A set of custom labels supplied by user.

        :return: The labels of this BackupPlan.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this BackupPlan.

        Optional. A set of custom labels supplied by user.

        :param labels: The labels of this BackupPlan.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this BackupPlan.

        Output only. The full name of the BackupPlan resource. Format: `projects/*/locations/*/backupPlans/*`

        :return: The name of this BackupPlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BackupPlan.

        Output only. The full name of the BackupPlan resource. Format: `projects/*/locations/*/backupPlans/*`

        :param name: The name of this BackupPlan.
        :type name: str
        """

        self._name = name

    @property
    def protected_pod_count(self):
        """Gets the protected_pod_count of this BackupPlan.

        Output only. The number of Kubernetes Pods backed up in the last successful Backup created via this BackupPlan.

        :return: The protected_pod_count of this BackupPlan.
        :rtype: int
        """
        return self._protected_pod_count

    @protected_pod_count.setter
    def protected_pod_count(self, protected_pod_count):
        """Sets the protected_pod_count of this BackupPlan.

        Output only. The number of Kubernetes Pods backed up in the last successful Backup created via this BackupPlan.

        :param protected_pod_count: The protected_pod_count of this BackupPlan.
        :type protected_pod_count: int
        """

        self._protected_pod_count = protected_pod_count

    @property
    def retention_policy(self):
        """Gets the retention_policy of this BackupPlan.


        :return: The retention_policy of this BackupPlan.
        :rtype: RetentionPolicy
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this BackupPlan.


        :param retention_policy: The retention_policy of this BackupPlan.
        :type retention_policy: RetentionPolicy
        """

        self._retention_policy = retention_policy

    @property
    def state(self):
        """Gets the state of this BackupPlan.

        Output only. State of the BackupPlan. This State field reflects the various stages a BackupPlan can be in during the Create operation. It will be set to \"DEACTIVATED\" if the BackupPlan is deactivated on an Update

        :return: The state of this BackupPlan.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BackupPlan.

        Output only. State of the BackupPlan. This State field reflects the various stages a BackupPlan can be in during the Create operation. It will be set to \"DEACTIVATED\" if the BackupPlan is deactivated on an Update

        :param state: The state of this BackupPlan.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CLUSTER_PENDING", "PROVISIONING", "READY", "FAILED", "DEACTIVATED", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_reason(self):
        """Gets the state_reason of this BackupPlan.

        Output only. Human-readable description of why BackupPlan is in the current `state`

        :return: The state_reason of this BackupPlan.
        :rtype: str
        """
        return self._state_reason

    @state_reason.setter
    def state_reason(self, state_reason):
        """Sets the state_reason of this BackupPlan.

        Output only. Human-readable description of why BackupPlan is in the current `state`

        :param state_reason: The state_reason of this BackupPlan.
        :type state_reason: str
        """

        self._state_reason = state_reason

    @property
    def uid(self):
        """Gets the uid of this BackupPlan.

        Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.

        :return: The uid of this BackupPlan.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this BackupPlan.

        Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.

        :param uid: The uid of this BackupPlan.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this BackupPlan.

        Output only. The timestamp when this BackupPlan resource was last updated.

        :return: The update_time of this BackupPlan.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this BackupPlan.

        Output only. The timestamp when this BackupPlan resource was last updated.

        :param update_time: The update_time of this BackupPlan.
        :type update_time: str
        """

        self._update_time = update_time
