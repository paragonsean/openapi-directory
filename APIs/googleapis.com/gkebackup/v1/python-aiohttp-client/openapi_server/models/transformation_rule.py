# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_filter import ResourceFilter
from openapi_server.models.transformation_rule_action import TransformationRuleAction
from openapi_server import util


class TransformationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, field_actions: List[TransformationRuleAction]=None, resource_filter: ResourceFilter=None):
        """TransformationRule - a model defined in OpenAPI

        :param description: The description of this TransformationRule.
        :param field_actions: The field_actions of this TransformationRule.
        :param resource_filter: The resource_filter of this TransformationRule.
        """
        self.openapi_types = {
            'description': str,
            'field_actions': List[TransformationRuleAction],
            'resource_filter': ResourceFilter
        }

        self.attribute_map = {
            'description': 'description',
            'field_actions': 'fieldActions',
            'resource_filter': 'resourceFilter'
        }

        self._description = description
        self._field_actions = field_actions
        self._resource_filter = resource_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransformationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransformationRule of this TransformationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TransformationRule.

        Optional. The description is a user specified string description of the transformation rule.

        :return: The description of this TransformationRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransformationRule.

        Optional. The description is a user specified string description of the transformation rule.

        :param description: The description of this TransformationRule.
        :type description: str
        """

        self._description = description

    @property
    def field_actions(self):
        """Gets the field_actions of this TransformationRule.

        Required. A list of transformation rule actions to take against candidate resources. Actions are executed in order defined - this order matters, as they could potentially interfere with each other and the first operation could affect the outcome of the second operation.

        :return: The field_actions of this TransformationRule.
        :rtype: List[TransformationRuleAction]
        """
        return self._field_actions

    @field_actions.setter
    def field_actions(self, field_actions):
        """Sets the field_actions of this TransformationRule.

        Required. A list of transformation rule actions to take against candidate resources. Actions are executed in order defined - this order matters, as they could potentially interfere with each other and the first operation could affect the outcome of the second operation.

        :param field_actions: The field_actions of this TransformationRule.
        :type field_actions: List[TransformationRuleAction]
        """

        self._field_actions = field_actions

    @property
    def resource_filter(self):
        """Gets the resource_filter of this TransformationRule.


        :return: The resource_filter of this TransformationRule.
        :rtype: ResourceFilter
        """
        return self._resource_filter

    @resource_filter.setter
    def resource_filter(self, resource_filter):
        """Sets the resource_filter of this TransformationRule.


        :param resource_filter: The resource_filter of this TransformationRule.
        :type resource_filter: ResourceFilter
        """

        self._resource_filter = resource_filter
