# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.namespaced_name import NamespacedName
from openapi_server import util


class VolumeRestore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complete_time: str=None, create_time: str=None, etag: str=None, name: str=None, state: str=None, state_message: str=None, target_pvc: NamespacedName=None, uid: str=None, update_time: str=None, volume_backup: str=None, volume_handle: str=None, volume_type: str=None):
        """VolumeRestore - a model defined in OpenAPI

        :param complete_time: The complete_time of this VolumeRestore.
        :param create_time: The create_time of this VolumeRestore.
        :param etag: The etag of this VolumeRestore.
        :param name: The name of this VolumeRestore.
        :param state: The state of this VolumeRestore.
        :param state_message: The state_message of this VolumeRestore.
        :param target_pvc: The target_pvc of this VolumeRestore.
        :param uid: The uid of this VolumeRestore.
        :param update_time: The update_time of this VolumeRestore.
        :param volume_backup: The volume_backup of this VolumeRestore.
        :param volume_handle: The volume_handle of this VolumeRestore.
        :param volume_type: The volume_type of this VolumeRestore.
        """
        self.openapi_types = {
            'complete_time': str,
            'create_time': str,
            'etag': str,
            'name': str,
            'state': str,
            'state_message': str,
            'target_pvc': NamespacedName,
            'uid': str,
            'update_time': str,
            'volume_backup': str,
            'volume_handle': str,
            'volume_type': str
        }

        self.attribute_map = {
            'complete_time': 'completeTime',
            'create_time': 'createTime',
            'etag': 'etag',
            'name': 'name',
            'state': 'state',
            'state_message': 'stateMessage',
            'target_pvc': 'targetPvc',
            'uid': 'uid',
            'update_time': 'updateTime',
            'volume_backup': 'volumeBackup',
            'volume_handle': 'volumeHandle',
            'volume_type': 'volumeType'
        }

        self._complete_time = complete_time
        self._create_time = create_time
        self._etag = etag
        self._name = name
        self._state = state
        self._state_message = state_message
        self._target_pvc = target_pvc
        self._uid = uid
        self._update_time = update_time
        self._volume_backup = volume_backup
        self._volume_handle = volume_handle
        self._volume_type = volume_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeRestore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeRestore of this VolumeRestore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complete_time(self):
        """Gets the complete_time of this VolumeRestore.

        Output only. The timestamp when the associated underlying volume restoration completed.

        :return: The complete_time of this VolumeRestore.
        :rtype: str
        """
        return self._complete_time

    @complete_time.setter
    def complete_time(self, complete_time):
        """Sets the complete_time of this VolumeRestore.

        Output only. The timestamp when the associated underlying volume restoration completed.

        :param complete_time: The complete_time of this VolumeRestore.
        :type complete_time: str
        """

        self._complete_time = complete_time

    @property
    def create_time(self):
        """Gets the create_time of this VolumeRestore.

        Output only. The timestamp when this VolumeRestore resource was created.

        :return: The create_time of this VolumeRestore.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this VolumeRestore.

        Output only. The timestamp when this VolumeRestore resource was created.

        :param create_time: The create_time of this VolumeRestore.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def etag(self):
        """Gets the etag of this VolumeRestore.

        Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a volume restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform volume restore updates in order to avoid race conditions.

        :return: The etag of this VolumeRestore.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this VolumeRestore.

        Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a volume restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform volume restore updates in order to avoid race conditions.

        :param etag: The etag of this VolumeRestore.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this VolumeRestore.

        Output only. Full name of the VolumeRestore resource. Format: `projects/*/locations/*/restorePlans/*/restores/*/volumeRestores/*`

        :return: The name of this VolumeRestore.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeRestore.

        Output only. Full name of the VolumeRestore resource. Format: `projects/*/locations/*/restorePlans/*/restores/*/volumeRestores/*`

        :param name: The name of this VolumeRestore.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this VolumeRestore.

        Output only. The current state of this VolumeRestore.

        :return: The state of this VolumeRestore.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VolumeRestore.

        Output only. The current state of this VolumeRestore.

        :param state: The state of this VolumeRestore.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "RESTORING", "SUCCEEDED", "FAILED", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_message(self):
        """Gets the state_message of this VolumeRestore.

        Output only. A human readable message explaining why the VolumeRestore is in its current state.

        :return: The state_message of this VolumeRestore.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this VolumeRestore.

        Output only. A human readable message explaining why the VolumeRestore is in its current state.

        :param state_message: The state_message of this VolumeRestore.
        :type state_message: str
        """

        self._state_message = state_message

    @property
    def target_pvc(self):
        """Gets the target_pvc of this VolumeRestore.


        :return: The target_pvc of this VolumeRestore.
        :rtype: NamespacedName
        """
        return self._target_pvc

    @target_pvc.setter
    def target_pvc(self, target_pvc):
        """Sets the target_pvc of this VolumeRestore.


        :param target_pvc: The target_pvc of this VolumeRestore.
        :type target_pvc: NamespacedName
        """

        self._target_pvc = target_pvc

    @property
    def uid(self):
        """Gets the uid of this VolumeRestore.

        Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.

        :return: The uid of this VolumeRestore.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this VolumeRestore.

        Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.

        :param uid: The uid of this VolumeRestore.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this VolumeRestore.

        Output only. The timestamp when this VolumeRestore resource was last updated.

        :return: The update_time of this VolumeRestore.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this VolumeRestore.

        Output only. The timestamp when this VolumeRestore resource was last updated.

        :param update_time: The update_time of this VolumeRestore.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def volume_backup(self):
        """Gets the volume_backup of this VolumeRestore.

        Output only. The full name of the VolumeBackup from which the volume will be restored. Format: `projects/*/locations/*/backupPlans/*/backups/*/volumeBackups/*`.

        :return: The volume_backup of this VolumeRestore.
        :rtype: str
        """
        return self._volume_backup

    @volume_backup.setter
    def volume_backup(self, volume_backup):
        """Sets the volume_backup of this VolumeRestore.

        Output only. The full name of the VolumeBackup from which the volume will be restored. Format: `projects/*/locations/*/backupPlans/*/backups/*/volumeBackups/*`.

        :param volume_backup: The volume_backup of this VolumeRestore.
        :type volume_backup: str
        """

        self._volume_backup = volume_backup

    @property
    def volume_handle(self):
        """Gets the volume_handle of this VolumeRestore.

        Output only. A storage system-specific opaque handler to the underlying volume created for the target PVC from the volume backup.

        :return: The volume_handle of this VolumeRestore.
        :rtype: str
        """
        return self._volume_handle

    @volume_handle.setter
    def volume_handle(self, volume_handle):
        """Sets the volume_handle of this VolumeRestore.

        Output only. A storage system-specific opaque handler to the underlying volume created for the target PVC from the volume backup.

        :param volume_handle: The volume_handle of this VolumeRestore.
        :type volume_handle: str
        """

        self._volume_handle = volume_handle

    @property
    def volume_type(self):
        """Gets the volume_type of this VolumeRestore.

        Output only. The type of volume provisioned

        :return: The volume_type of this VolumeRestore.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this VolumeRestore.

        Output only. The type of volume provisioned

        :param volume_type: The volume_type of this VolumeRestore.
        :type volume_type: str
        """
        allowed_values = ["VOLUME_TYPE_UNSPECIFIED", "GCE_PERSISTENT_DISK"]  # noqa: E501
        if volume_type not in allowed_values:
            raise ValueError(
                "Invalid value for `volume_type` ({0}), must be one of {1}"
                .format(volume_type, allowed_values)
            )

        self._volume_type = volume_type
