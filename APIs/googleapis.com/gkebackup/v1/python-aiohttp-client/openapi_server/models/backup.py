# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_metadata import ClusterMetadata
from openapi_server.models.encryption_key import EncryptionKey
from openapi_server.models.namespaced_names import NamespacedNames
from openapi_server.models.namespaces import Namespaces
from openapi_server import util


class Backup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_namespaces: bool=None, cluster_metadata: ClusterMetadata=None, complete_time: str=None, config_backup_size_bytes: str=None, contains_secrets: bool=None, contains_volume_data: bool=None, create_time: str=None, delete_lock_days: int=None, delete_lock_expire_time: str=None, description: str=None, encryption_key: EncryptionKey=None, etag: str=None, labels: Dict[str, str]=None, manual: bool=None, name: str=None, pod_count: int=None, resource_count: int=None, retain_days: int=None, retain_expire_time: str=None, selected_applications: NamespacedNames=None, selected_namespaces: Namespaces=None, size_bytes: str=None, state: str=None, state_reason: str=None, uid: str=None, update_time: str=None, volume_count: int=None):
        """Backup - a model defined in OpenAPI

        :param all_namespaces: The all_namespaces of this Backup.
        :param cluster_metadata: The cluster_metadata of this Backup.
        :param complete_time: The complete_time of this Backup.
        :param config_backup_size_bytes: The config_backup_size_bytes of this Backup.
        :param contains_secrets: The contains_secrets of this Backup.
        :param contains_volume_data: The contains_volume_data of this Backup.
        :param create_time: The create_time of this Backup.
        :param delete_lock_days: The delete_lock_days of this Backup.
        :param delete_lock_expire_time: The delete_lock_expire_time of this Backup.
        :param description: The description of this Backup.
        :param encryption_key: The encryption_key of this Backup.
        :param etag: The etag of this Backup.
        :param labels: The labels of this Backup.
        :param manual: The manual of this Backup.
        :param name: The name of this Backup.
        :param pod_count: The pod_count of this Backup.
        :param resource_count: The resource_count of this Backup.
        :param retain_days: The retain_days of this Backup.
        :param retain_expire_time: The retain_expire_time of this Backup.
        :param selected_applications: The selected_applications of this Backup.
        :param selected_namespaces: The selected_namespaces of this Backup.
        :param size_bytes: The size_bytes of this Backup.
        :param state: The state of this Backup.
        :param state_reason: The state_reason of this Backup.
        :param uid: The uid of this Backup.
        :param update_time: The update_time of this Backup.
        :param volume_count: The volume_count of this Backup.
        """
        self.openapi_types = {
            'all_namespaces': bool,
            'cluster_metadata': ClusterMetadata,
            'complete_time': str,
            'config_backup_size_bytes': str,
            'contains_secrets': bool,
            'contains_volume_data': bool,
            'create_time': str,
            'delete_lock_days': int,
            'delete_lock_expire_time': str,
            'description': str,
            'encryption_key': EncryptionKey,
            'etag': str,
            'labels': Dict[str, str],
            'manual': bool,
            'name': str,
            'pod_count': int,
            'resource_count': int,
            'retain_days': int,
            'retain_expire_time': str,
            'selected_applications': NamespacedNames,
            'selected_namespaces': Namespaces,
            'size_bytes': str,
            'state': str,
            'state_reason': str,
            'uid': str,
            'update_time': str,
            'volume_count': int
        }

        self.attribute_map = {
            'all_namespaces': 'allNamespaces',
            'cluster_metadata': 'clusterMetadata',
            'complete_time': 'completeTime',
            'config_backup_size_bytes': 'configBackupSizeBytes',
            'contains_secrets': 'containsSecrets',
            'contains_volume_data': 'containsVolumeData',
            'create_time': 'createTime',
            'delete_lock_days': 'deleteLockDays',
            'delete_lock_expire_time': 'deleteLockExpireTime',
            'description': 'description',
            'encryption_key': 'encryptionKey',
            'etag': 'etag',
            'labels': 'labels',
            'manual': 'manual',
            'name': 'name',
            'pod_count': 'podCount',
            'resource_count': 'resourceCount',
            'retain_days': 'retainDays',
            'retain_expire_time': 'retainExpireTime',
            'selected_applications': 'selectedApplications',
            'selected_namespaces': 'selectedNamespaces',
            'size_bytes': 'sizeBytes',
            'state': 'state',
            'state_reason': 'stateReason',
            'uid': 'uid',
            'update_time': 'updateTime',
            'volume_count': 'volumeCount'
        }

        self._all_namespaces = all_namespaces
        self._cluster_metadata = cluster_metadata
        self._complete_time = complete_time
        self._config_backup_size_bytes = config_backup_size_bytes
        self._contains_secrets = contains_secrets
        self._contains_volume_data = contains_volume_data
        self._create_time = create_time
        self._delete_lock_days = delete_lock_days
        self._delete_lock_expire_time = delete_lock_expire_time
        self._description = description
        self._encryption_key = encryption_key
        self._etag = etag
        self._labels = labels
        self._manual = manual
        self._name = name
        self._pod_count = pod_count
        self._resource_count = resource_count
        self._retain_days = retain_days
        self._retain_expire_time = retain_expire_time
        self._selected_applications = selected_applications
        self._selected_namespaces = selected_namespaces
        self._size_bytes = size_bytes
        self._state = state
        self._state_reason = state_reason
        self._uid = uid
        self._update_time = update_time
        self._volume_count = volume_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Backup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Backup of this Backup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_namespaces(self):
        """Gets the all_namespaces of this Backup.

        Output only. If True, all namespaces were included in the Backup.

        :return: The all_namespaces of this Backup.
        :rtype: bool
        """
        return self._all_namespaces

    @all_namespaces.setter
    def all_namespaces(self, all_namespaces):
        """Sets the all_namespaces of this Backup.

        Output only. If True, all namespaces were included in the Backup.

        :param all_namespaces: The all_namespaces of this Backup.
        :type all_namespaces: bool
        """

        self._all_namespaces = all_namespaces

    @property
    def cluster_metadata(self):
        """Gets the cluster_metadata of this Backup.


        :return: The cluster_metadata of this Backup.
        :rtype: ClusterMetadata
        """
        return self._cluster_metadata

    @cluster_metadata.setter
    def cluster_metadata(self, cluster_metadata):
        """Sets the cluster_metadata of this Backup.


        :param cluster_metadata: The cluster_metadata of this Backup.
        :type cluster_metadata: ClusterMetadata
        """

        self._cluster_metadata = cluster_metadata

    @property
    def complete_time(self):
        """Gets the complete_time of this Backup.

        Output only. Completion time of the Backup

        :return: The complete_time of this Backup.
        :rtype: str
        """
        return self._complete_time

    @complete_time.setter
    def complete_time(self, complete_time):
        """Sets the complete_time of this Backup.

        Output only. Completion time of the Backup

        :param complete_time: The complete_time of this Backup.
        :type complete_time: str
        """

        self._complete_time = complete_time

    @property
    def config_backup_size_bytes(self):
        """Gets the config_backup_size_bytes of this Backup.

        Output only. The size of the config backup in bytes.

        :return: The config_backup_size_bytes of this Backup.
        :rtype: str
        """
        return self._config_backup_size_bytes

    @config_backup_size_bytes.setter
    def config_backup_size_bytes(self, config_backup_size_bytes):
        """Sets the config_backup_size_bytes of this Backup.

        Output only. The size of the config backup in bytes.

        :param config_backup_size_bytes: The config_backup_size_bytes of this Backup.
        :type config_backup_size_bytes: str
        """

        self._config_backup_size_bytes = config_backup_size_bytes

    @property
    def contains_secrets(self):
        """Gets the contains_secrets of this Backup.

        Output only. Whether or not the Backup contains Kubernetes Secrets. Controlled by the parent BackupPlan's include_secrets value.

        :return: The contains_secrets of this Backup.
        :rtype: bool
        """
        return self._contains_secrets

    @contains_secrets.setter
    def contains_secrets(self, contains_secrets):
        """Sets the contains_secrets of this Backup.

        Output only. Whether or not the Backup contains Kubernetes Secrets. Controlled by the parent BackupPlan's include_secrets value.

        :param contains_secrets: The contains_secrets of this Backup.
        :type contains_secrets: bool
        """

        self._contains_secrets = contains_secrets

    @property
    def contains_volume_data(self):
        """Gets the contains_volume_data of this Backup.

        Output only. Whether or not the Backup contains volume data. Controlled by the parent BackupPlan's include_volume_data value.

        :return: The contains_volume_data of this Backup.
        :rtype: bool
        """
        return self._contains_volume_data

    @contains_volume_data.setter
    def contains_volume_data(self, contains_volume_data):
        """Sets the contains_volume_data of this Backup.

        Output only. Whether or not the Backup contains volume data. Controlled by the parent BackupPlan's include_volume_data value.

        :param contains_volume_data: The contains_volume_data of this Backup.
        :type contains_volume_data: bool
        """

        self._contains_volume_data = contains_volume_data

    @property
    def create_time(self):
        """Gets the create_time of this Backup.

        Output only. The timestamp when this Backup resource was created.

        :return: The create_time of this Backup.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Backup.

        Output only. The timestamp when this Backup resource was created.

        :param create_time: The create_time of this Backup.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_lock_days(self):
        """Gets the delete_lock_days of this Backup.

        Optional. Minimum age for this Backup (in days). If this field is set to a non-zero value, the Backup will be \"locked\" against deletion (either manual or automatic deletion) for the number of days provided (measured from the creation time of the Backup). MUST be an integer value between 0-90 (inclusive). Defaults to parent BackupPlan's backup_delete_lock_days setting and may only be increased (either at creation time or in a subsequent update).

        :return: The delete_lock_days of this Backup.
        :rtype: int
        """
        return self._delete_lock_days

    @delete_lock_days.setter
    def delete_lock_days(self, delete_lock_days):
        """Sets the delete_lock_days of this Backup.

        Optional. Minimum age for this Backup (in days). If this field is set to a non-zero value, the Backup will be \"locked\" against deletion (either manual or automatic deletion) for the number of days provided (measured from the creation time of the Backup). MUST be an integer value between 0-90 (inclusive). Defaults to parent BackupPlan's backup_delete_lock_days setting and may only be increased (either at creation time or in a subsequent update).

        :param delete_lock_days: The delete_lock_days of this Backup.
        :type delete_lock_days: int
        """

        self._delete_lock_days = delete_lock_days

    @property
    def delete_lock_expire_time(self):
        """Gets the delete_lock_expire_time of this Backup.

        Output only. The time at which an existing delete lock will expire for this backup (calculated from create_time + delete_lock_days).

        :return: The delete_lock_expire_time of this Backup.
        :rtype: str
        """
        return self._delete_lock_expire_time

    @delete_lock_expire_time.setter
    def delete_lock_expire_time(self, delete_lock_expire_time):
        """Sets the delete_lock_expire_time of this Backup.

        Output only. The time at which an existing delete lock will expire for this backup (calculated from create_time + delete_lock_days).

        :param delete_lock_expire_time: The delete_lock_expire_time of this Backup.
        :type delete_lock_expire_time: str
        """

        self._delete_lock_expire_time = delete_lock_expire_time

    @property
    def description(self):
        """Gets the description of this Backup.

        Optional. User specified descriptive string for this Backup.

        :return: The description of this Backup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Backup.

        Optional. User specified descriptive string for this Backup.

        :param description: The description of this Backup.
        :type description: str
        """

        self._description = description

    @property
    def encryption_key(self):
        """Gets the encryption_key of this Backup.


        :return: The encryption_key of this Backup.
        :rtype: EncryptionKey
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this Backup.


        :param encryption_key: The encryption_key of this Backup.
        :type encryption_key: EncryptionKey
        """

        self._encryption_key = encryption_key

    @property
    def etag(self):
        """Gets the etag of this Backup.

        Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform backup updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackup`, and systems are expected to put that etag in the request to `UpdateBackup` or `DeleteBackup` to ensure that their change will be applied to the same version of the resource.

        :return: The etag of this Backup.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Backup.

        Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform backup updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackup`, and systems are expected to put that etag in the request to `UpdateBackup` or `DeleteBackup` to ensure that their change will be applied to the same version of the resource.

        :param etag: The etag of this Backup.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this Backup.

        Optional. A set of custom labels supplied by user.

        :return: The labels of this Backup.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Backup.

        Optional. A set of custom labels supplied by user.

        :param labels: The labels of this Backup.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def manual(self):
        """Gets the manual of this Backup.

        Output only. This flag indicates whether this Backup resource was created manually by a user or via a schedule in the BackupPlan. A value of True means that the Backup was created manually.

        :return: The manual of this Backup.
        :rtype: bool
        """
        return self._manual

    @manual.setter
    def manual(self, manual):
        """Sets the manual of this Backup.

        Output only. This flag indicates whether this Backup resource was created manually by a user or via a schedule in the BackupPlan. A value of True means that the Backup was created manually.

        :param manual: The manual of this Backup.
        :type manual: bool
        """

        self._manual = manual

    @property
    def name(self):
        """Gets the name of this Backup.

        Output only. The fully qualified name of the Backup. `projects/*/locations/*/backupPlans/*/backups/*`

        :return: The name of this Backup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Backup.

        Output only. The fully qualified name of the Backup. `projects/*/locations/*/backupPlans/*/backups/*`

        :param name: The name of this Backup.
        :type name: str
        """

        self._name = name

    @property
    def pod_count(self):
        """Gets the pod_count of this Backup.

        Output only. The total number of Kubernetes Pods contained in the Backup.

        :return: The pod_count of this Backup.
        :rtype: int
        """
        return self._pod_count

    @pod_count.setter
    def pod_count(self, pod_count):
        """Sets the pod_count of this Backup.

        Output only. The total number of Kubernetes Pods contained in the Backup.

        :param pod_count: The pod_count of this Backup.
        :type pod_count: int
        """

        self._pod_count = pod_count

    @property
    def resource_count(self):
        """Gets the resource_count of this Backup.

        Output only. The total number of Kubernetes resources included in the Backup.

        :return: The resource_count of this Backup.
        :rtype: int
        """
        return self._resource_count

    @resource_count.setter
    def resource_count(self, resource_count):
        """Sets the resource_count of this Backup.

        Output only. The total number of Kubernetes resources included in the Backup.

        :param resource_count: The resource_count of this Backup.
        :type resource_count: int
        """

        self._resource_count = resource_count

    @property
    def retain_days(self):
        """Gets the retain_days of this Backup.

        Optional. The age (in days) after which this Backup will be automatically deleted. Must be an integer value >= 0: - If 0, no automatic deletion will occur for this Backup. - If not 0, this must be >= delete_lock_days and <= 365. Once a Backup is created, this value may only be increased. Defaults to the parent BackupPlan's backup_retain_days value.

        :return: The retain_days of this Backup.
        :rtype: int
        """
        return self._retain_days

    @retain_days.setter
    def retain_days(self, retain_days):
        """Sets the retain_days of this Backup.

        Optional. The age (in days) after which this Backup will be automatically deleted. Must be an integer value >= 0: - If 0, no automatic deletion will occur for this Backup. - If not 0, this must be >= delete_lock_days and <= 365. Once a Backup is created, this value may only be increased. Defaults to the parent BackupPlan's backup_retain_days value.

        :param retain_days: The retain_days of this Backup.
        :type retain_days: int
        """

        self._retain_days = retain_days

    @property
    def retain_expire_time(self):
        """Gets the retain_expire_time of this Backup.

        Output only. The time at which this Backup will be automatically deleted (calculated from create_time + retain_days).

        :return: The retain_expire_time of this Backup.
        :rtype: str
        """
        return self._retain_expire_time

    @retain_expire_time.setter
    def retain_expire_time(self, retain_expire_time):
        """Sets the retain_expire_time of this Backup.

        Output only. The time at which this Backup will be automatically deleted (calculated from create_time + retain_days).

        :param retain_expire_time: The retain_expire_time of this Backup.
        :type retain_expire_time: str
        """

        self._retain_expire_time = retain_expire_time

    @property
    def selected_applications(self):
        """Gets the selected_applications of this Backup.


        :return: The selected_applications of this Backup.
        :rtype: NamespacedNames
        """
        return self._selected_applications

    @selected_applications.setter
    def selected_applications(self, selected_applications):
        """Sets the selected_applications of this Backup.


        :param selected_applications: The selected_applications of this Backup.
        :type selected_applications: NamespacedNames
        """

        self._selected_applications = selected_applications

    @property
    def selected_namespaces(self):
        """Gets the selected_namespaces of this Backup.


        :return: The selected_namespaces of this Backup.
        :rtype: Namespaces
        """
        return self._selected_namespaces

    @selected_namespaces.setter
    def selected_namespaces(self, selected_namespaces):
        """Sets the selected_namespaces of this Backup.


        :param selected_namespaces: The selected_namespaces of this Backup.
        :type selected_namespaces: Namespaces
        """

        self._selected_namespaces = selected_namespaces

    @property
    def size_bytes(self):
        """Gets the size_bytes of this Backup.

        Output only. The total size of the Backup in bytes = config backup size + sum(volume backup sizes)

        :return: The size_bytes of this Backup.
        :rtype: str
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this Backup.

        Output only. The total size of the Backup in bytes = config backup size + sum(volume backup sizes)

        :param size_bytes: The size_bytes of this Backup.
        :type size_bytes: str
        """

        self._size_bytes = size_bytes

    @property
    def state(self):
        """Gets the state of this Backup.

        Output only. Current state of the Backup

        :return: The state of this Backup.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Backup.

        Output only. Current state of the Backup

        :param state: The state of this Backup.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "IN_PROGRESS", "SUCCEEDED", "FAILED", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_reason(self):
        """Gets the state_reason of this Backup.

        Output only. Human-readable description of why the backup is in the current `state`.

        :return: The state_reason of this Backup.
        :rtype: str
        """
        return self._state_reason

    @state_reason.setter
    def state_reason(self, state_reason):
        """Sets the state_reason of this Backup.

        Output only. Human-readable description of why the backup is in the current `state`.

        :param state_reason: The state_reason of this Backup.
        :type state_reason: str
        """

        self._state_reason = state_reason

    @property
    def uid(self):
        """Gets the uid of this Backup.

        Output only. Server generated global unique identifier of [UUID4](https://en.wikipedia.org/wiki/Universally_unique_identifier)

        :return: The uid of this Backup.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Backup.

        Output only. Server generated global unique identifier of [UUID4](https://en.wikipedia.org/wiki/Universally_unique_identifier)

        :param uid: The uid of this Backup.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Backup.

        Output only. The timestamp when this Backup resource was last updated.

        :return: The update_time of this Backup.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Backup.

        Output only. The timestamp when this Backup resource was last updated.

        :param update_time: The update_time of this Backup.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def volume_count(self):
        """Gets the volume_count of this Backup.

        Output only. The total number of volume backups contained in the Backup.

        :return: The volume_count of this Backup.
        :rtype: int
        """
        return self._volume_count

    @volume_count.setter
    def volume_count(self, volume_count):
        """Sets the volume_count of this Backup.

        Output only. The total number of volume backups contained in the Backup.

        :param volume_count: The volume_count of this Backup.
        :type volume_count: int
        """

        self._volume_count = volume_count
