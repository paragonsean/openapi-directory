# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetentionPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_delete_lock_days: int=None, backup_retain_days: int=None, locked: bool=None):
        """RetentionPolicy - a model defined in OpenAPI

        :param backup_delete_lock_days: The backup_delete_lock_days of this RetentionPolicy.
        :param backup_retain_days: The backup_retain_days of this RetentionPolicy.
        :param locked: The locked of this RetentionPolicy.
        """
        self.openapi_types = {
            'backup_delete_lock_days': int,
            'backup_retain_days': int,
            'locked': bool
        }

        self.attribute_map = {
            'backup_delete_lock_days': 'backupDeleteLockDays',
            'backup_retain_days': 'backupRetainDays',
            'locked': 'locked'
        }

        self._backup_delete_lock_days = backup_delete_lock_days
        self._backup_retain_days = backup_retain_days
        self._locked = locked

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetentionPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetentionPolicy of this RetentionPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_delete_lock_days(self):
        """Gets the backup_delete_lock_days of this RetentionPolicy.

        Optional. Minimum age for Backups created via this BackupPlan (in days). This field MUST be an integer value between 0-90 (inclusive). A Backup created under this BackupPlan will NOT be deletable until it reaches Backup's (create_time + backup_delete_lock_days). Updating this field of a BackupPlan does NOT affect existing Backups under it. Backups created AFTER a successful update will inherit the new value. Default: 0 (no delete blocking)

        :return: The backup_delete_lock_days of this RetentionPolicy.
        :rtype: int
        """
        return self._backup_delete_lock_days

    @backup_delete_lock_days.setter
    def backup_delete_lock_days(self, backup_delete_lock_days):
        """Sets the backup_delete_lock_days of this RetentionPolicy.

        Optional. Minimum age for Backups created via this BackupPlan (in days). This field MUST be an integer value between 0-90 (inclusive). A Backup created under this BackupPlan will NOT be deletable until it reaches Backup's (create_time + backup_delete_lock_days). Updating this field of a BackupPlan does NOT affect existing Backups under it. Backups created AFTER a successful update will inherit the new value. Default: 0 (no delete blocking)

        :param backup_delete_lock_days: The backup_delete_lock_days of this RetentionPolicy.
        :type backup_delete_lock_days: int
        """

        self._backup_delete_lock_days = backup_delete_lock_days

    @property
    def backup_retain_days(self):
        """Gets the backup_retain_days of this RetentionPolicy.

        Optional. The default maximum age of a Backup created via this BackupPlan. This field MUST be an integer value >= 0 and <= 365. If specified, a Backup created under this BackupPlan will be automatically deleted after its age reaches (create_time + backup_retain_days). If not specified, Backups created under this BackupPlan will NOT be subject to automatic deletion. Updating this field does NOT affect existing Backups under it. Backups created AFTER a successful update will automatically pick up the new value. NOTE: backup_retain_days must be >= backup_delete_lock_days. If cron_schedule is defined, then this must be <= 360 * the creation interval. If rpo_config is defined, then this must be <= 360 * target_rpo_minutes / (1440minutes/day). Default: 0 (no automatic deletion)

        :return: The backup_retain_days of this RetentionPolicy.
        :rtype: int
        """
        return self._backup_retain_days

    @backup_retain_days.setter
    def backup_retain_days(self, backup_retain_days):
        """Sets the backup_retain_days of this RetentionPolicy.

        Optional. The default maximum age of a Backup created via this BackupPlan. This field MUST be an integer value >= 0 and <= 365. If specified, a Backup created under this BackupPlan will be automatically deleted after its age reaches (create_time + backup_retain_days). If not specified, Backups created under this BackupPlan will NOT be subject to automatic deletion. Updating this field does NOT affect existing Backups under it. Backups created AFTER a successful update will automatically pick up the new value. NOTE: backup_retain_days must be >= backup_delete_lock_days. If cron_schedule is defined, then this must be <= 360 * the creation interval. If rpo_config is defined, then this must be <= 360 * target_rpo_minutes / (1440minutes/day). Default: 0 (no automatic deletion)

        :param backup_retain_days: The backup_retain_days of this RetentionPolicy.
        :type backup_retain_days: int
        """

        self._backup_retain_days = backup_retain_days

    @property
    def locked(self):
        """Gets the locked of this RetentionPolicy.

        Optional. This flag denotes whether the retention policy of this BackupPlan is locked. If set to True, no further update is allowed on this policy, including the `locked` field itself. Default: False

        :return: The locked of this RetentionPolicy.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this RetentionPolicy.

        Optional. This flag denotes whether the retention policy of this BackupPlan is locked. If set to True, no further update is allowed on this policy, including the `locked` field itself. Default: False

        :param locked: The locked of this RetentionPolicy.
        :type locked: bool
        """

        self._locked = locked
