# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupKind(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_group: str=None, resource_kind: str=None):
        """GroupKind - a model defined in OpenAPI

        :param resource_group: The resource_group of this GroupKind.
        :param resource_kind: The resource_kind of this GroupKind.
        """
        self.openapi_types = {
            'resource_group': str,
            'resource_kind': str
        }

        self.attribute_map = {
            'resource_group': 'resourceGroup',
            'resource_kind': 'resourceKind'
        }

        self._resource_group = resource_group
        self._resource_kind = resource_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupKind':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupKind of this GroupKind.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_group(self):
        """Gets the resource_group of this GroupKind.

        Optional. API group string of a Kubernetes resource, e.g. \"apiextensions.k8s.io\", \"storage.k8s.io\", etc. Note: use empty string for core API group

        :return: The resource_group of this GroupKind.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this GroupKind.

        Optional. API group string of a Kubernetes resource, e.g. \"apiextensions.k8s.io\", \"storage.k8s.io\", etc. Note: use empty string for core API group

        :param resource_group: The resource_group of this GroupKind.
        :type resource_group: str
        """

        self._resource_group = resource_group

    @property
    def resource_kind(self):
        """Gets the resource_kind of this GroupKind.

        Optional. Kind of a Kubernetes resource, must be in UpperCamelCase (PascalCase) and singular form. E.g. \"CustomResourceDefinition\", \"StorageClass\", etc.

        :return: The resource_kind of this GroupKind.
        :rtype: str
        """
        return self._resource_kind

    @resource_kind.setter
    def resource_kind(self, resource_kind):
        """Sets the resource_kind of this GroupKind.

        Optional. Kind of a Kubernetes resource, must be in UpperCamelCase (PascalCase) and singular form. E.g. \"CustomResourceDefinition\", \"StorageClass\", etc.

        :param resource_kind: The resource_kind of this GroupKind.
        :type resource_kind: str
        """

        self._resource_kind = resource_kind
