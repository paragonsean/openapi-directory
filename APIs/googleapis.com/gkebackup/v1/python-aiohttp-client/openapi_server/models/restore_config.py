# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_resource_restore_scope import ClusterResourceRestoreScope
from openapi_server.models.namespaced_names import NamespacedNames
from openapi_server.models.namespaces import Namespaces
from openapi_server.models.substitution_rule import SubstitutionRule
from openapi_server.models.transformation_rule import TransformationRule
from openapi_server import util


class RestoreConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_namespaces: bool=None, cluster_resource_conflict_policy: str=None, cluster_resource_restore_scope: ClusterResourceRestoreScope=None, excluded_namespaces: Namespaces=None, namespaced_resource_restore_mode: str=None, no_namespaces: bool=None, selected_applications: NamespacedNames=None, selected_namespaces: Namespaces=None, substitution_rules: List[SubstitutionRule]=None, transformation_rules: List[TransformationRule]=None, volume_data_restore_policy: str=None):
        """RestoreConfig - a model defined in OpenAPI

        :param all_namespaces: The all_namespaces of this RestoreConfig.
        :param cluster_resource_conflict_policy: The cluster_resource_conflict_policy of this RestoreConfig.
        :param cluster_resource_restore_scope: The cluster_resource_restore_scope of this RestoreConfig.
        :param excluded_namespaces: The excluded_namespaces of this RestoreConfig.
        :param namespaced_resource_restore_mode: The namespaced_resource_restore_mode of this RestoreConfig.
        :param no_namespaces: The no_namespaces of this RestoreConfig.
        :param selected_applications: The selected_applications of this RestoreConfig.
        :param selected_namespaces: The selected_namespaces of this RestoreConfig.
        :param substitution_rules: The substitution_rules of this RestoreConfig.
        :param transformation_rules: The transformation_rules of this RestoreConfig.
        :param volume_data_restore_policy: The volume_data_restore_policy of this RestoreConfig.
        """
        self.openapi_types = {
            'all_namespaces': bool,
            'cluster_resource_conflict_policy': str,
            'cluster_resource_restore_scope': ClusterResourceRestoreScope,
            'excluded_namespaces': Namespaces,
            'namespaced_resource_restore_mode': str,
            'no_namespaces': bool,
            'selected_applications': NamespacedNames,
            'selected_namespaces': Namespaces,
            'substitution_rules': List[SubstitutionRule],
            'transformation_rules': List[TransformationRule],
            'volume_data_restore_policy': str
        }

        self.attribute_map = {
            'all_namespaces': 'allNamespaces',
            'cluster_resource_conflict_policy': 'clusterResourceConflictPolicy',
            'cluster_resource_restore_scope': 'clusterResourceRestoreScope',
            'excluded_namespaces': 'excludedNamespaces',
            'namespaced_resource_restore_mode': 'namespacedResourceRestoreMode',
            'no_namespaces': 'noNamespaces',
            'selected_applications': 'selectedApplications',
            'selected_namespaces': 'selectedNamespaces',
            'substitution_rules': 'substitutionRules',
            'transformation_rules': 'transformationRules',
            'volume_data_restore_policy': 'volumeDataRestorePolicy'
        }

        self._all_namespaces = all_namespaces
        self._cluster_resource_conflict_policy = cluster_resource_conflict_policy
        self._cluster_resource_restore_scope = cluster_resource_restore_scope
        self._excluded_namespaces = excluded_namespaces
        self._namespaced_resource_restore_mode = namespaced_resource_restore_mode
        self._no_namespaces = no_namespaces
        self._selected_applications = selected_applications
        self._selected_namespaces = selected_namespaces
        self._substitution_rules = substitution_rules
        self._transformation_rules = transformation_rules
        self._volume_data_restore_policy = volume_data_restore_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestoreConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestoreConfig of this RestoreConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_namespaces(self):
        """Gets the all_namespaces of this RestoreConfig.

        Restore all namespaced resources in the Backup if set to \"True\". Specifying this field to \"False\" is an error.

        :return: The all_namespaces of this RestoreConfig.
        :rtype: bool
        """
        return self._all_namespaces

    @all_namespaces.setter
    def all_namespaces(self, all_namespaces):
        """Sets the all_namespaces of this RestoreConfig.

        Restore all namespaced resources in the Backup if set to \"True\". Specifying this field to \"False\" is an error.

        :param all_namespaces: The all_namespaces of this RestoreConfig.
        :type all_namespaces: bool
        """

        self._all_namespaces = all_namespaces

    @property
    def cluster_resource_conflict_policy(self):
        """Gets the cluster_resource_conflict_policy of this RestoreConfig.

        Optional. Defines the behavior for handling the situation where cluster-scoped resources being restored already exist in the target cluster. This MUST be set to a value other than CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if cluster_resource_restore_scope is not empty.

        :return: The cluster_resource_conflict_policy of this RestoreConfig.
        :rtype: str
        """
        return self._cluster_resource_conflict_policy

    @cluster_resource_conflict_policy.setter
    def cluster_resource_conflict_policy(self, cluster_resource_conflict_policy):
        """Sets the cluster_resource_conflict_policy of this RestoreConfig.

        Optional. Defines the behavior for handling the situation where cluster-scoped resources being restored already exist in the target cluster. This MUST be set to a value other than CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if cluster_resource_restore_scope is not empty.

        :param cluster_resource_conflict_policy: The cluster_resource_conflict_policy of this RestoreConfig.
        :type cluster_resource_conflict_policy: str
        """
        allowed_values = ["CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED", "USE_EXISTING_VERSION", "USE_BACKUP_VERSION"]  # noqa: E501
        if cluster_resource_conflict_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_resource_conflict_policy` ({0}), must be one of {1}"
                .format(cluster_resource_conflict_policy, allowed_values)
            )

        self._cluster_resource_conflict_policy = cluster_resource_conflict_policy

    @property
    def cluster_resource_restore_scope(self):
        """Gets the cluster_resource_restore_scope of this RestoreConfig.


        :return: The cluster_resource_restore_scope of this RestoreConfig.
        :rtype: ClusterResourceRestoreScope
        """
        return self._cluster_resource_restore_scope

    @cluster_resource_restore_scope.setter
    def cluster_resource_restore_scope(self, cluster_resource_restore_scope):
        """Sets the cluster_resource_restore_scope of this RestoreConfig.


        :param cluster_resource_restore_scope: The cluster_resource_restore_scope of this RestoreConfig.
        :type cluster_resource_restore_scope: ClusterResourceRestoreScope
        """

        self._cluster_resource_restore_scope = cluster_resource_restore_scope

    @property
    def excluded_namespaces(self):
        """Gets the excluded_namespaces of this RestoreConfig.


        :return: The excluded_namespaces of this RestoreConfig.
        :rtype: Namespaces
        """
        return self._excluded_namespaces

    @excluded_namespaces.setter
    def excluded_namespaces(self, excluded_namespaces):
        """Sets the excluded_namespaces of this RestoreConfig.


        :param excluded_namespaces: The excluded_namespaces of this RestoreConfig.
        :type excluded_namespaces: Namespaces
        """

        self._excluded_namespaces = excluded_namespaces

    @property
    def namespaced_resource_restore_mode(self):
        """Gets the namespaced_resource_restore_mode of this RestoreConfig.

        Optional. Defines the behavior for handling the situation where sets of namespaced resources being restored already exist in the target cluster. This MUST be set to a value other than NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.

        :return: The namespaced_resource_restore_mode of this RestoreConfig.
        :rtype: str
        """
        return self._namespaced_resource_restore_mode

    @namespaced_resource_restore_mode.setter
    def namespaced_resource_restore_mode(self, namespaced_resource_restore_mode):
        """Sets the namespaced_resource_restore_mode of this RestoreConfig.

        Optional. Defines the behavior for handling the situation where sets of namespaced resources being restored already exist in the target cluster. This MUST be set to a value other than NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.

        :param namespaced_resource_restore_mode: The namespaced_resource_restore_mode of this RestoreConfig.
        :type namespaced_resource_restore_mode: str
        """
        allowed_values = ["NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED", "DELETE_AND_RESTORE", "FAIL_ON_CONFLICT"]  # noqa: E501
        if namespaced_resource_restore_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `namespaced_resource_restore_mode` ({0}), must be one of {1}"
                .format(namespaced_resource_restore_mode, allowed_values)
            )

        self._namespaced_resource_restore_mode = namespaced_resource_restore_mode

    @property
    def no_namespaces(self):
        """Gets the no_namespaces of this RestoreConfig.

        Do not restore any namespaced resources if set to \"True\". Specifying this field to \"False\" is not allowed.

        :return: The no_namespaces of this RestoreConfig.
        :rtype: bool
        """
        return self._no_namespaces

    @no_namespaces.setter
    def no_namespaces(self, no_namespaces):
        """Sets the no_namespaces of this RestoreConfig.

        Do not restore any namespaced resources if set to \"True\". Specifying this field to \"False\" is not allowed.

        :param no_namespaces: The no_namespaces of this RestoreConfig.
        :type no_namespaces: bool
        """

        self._no_namespaces = no_namespaces

    @property
    def selected_applications(self):
        """Gets the selected_applications of this RestoreConfig.


        :return: The selected_applications of this RestoreConfig.
        :rtype: NamespacedNames
        """
        return self._selected_applications

    @selected_applications.setter
    def selected_applications(self, selected_applications):
        """Sets the selected_applications of this RestoreConfig.


        :param selected_applications: The selected_applications of this RestoreConfig.
        :type selected_applications: NamespacedNames
        """

        self._selected_applications = selected_applications

    @property
    def selected_namespaces(self):
        """Gets the selected_namespaces of this RestoreConfig.


        :return: The selected_namespaces of this RestoreConfig.
        :rtype: Namespaces
        """
        return self._selected_namespaces

    @selected_namespaces.setter
    def selected_namespaces(self, selected_namespaces):
        """Sets the selected_namespaces of this RestoreConfig.


        :param selected_namespaces: The selected_namespaces of this RestoreConfig.
        :type selected_namespaces: Namespaces
        """

        self._selected_namespaces = selected_namespaces

    @property
    def substitution_rules(self):
        """Gets the substitution_rules of this RestoreConfig.

        Optional. A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no substitution will occur.

        :return: The substitution_rules of this RestoreConfig.
        :rtype: List[SubstitutionRule]
        """
        return self._substitution_rules

    @substitution_rules.setter
    def substitution_rules(self, substitution_rules):
        """Sets the substitution_rules of this RestoreConfig.

        Optional. A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no substitution will occur.

        :param substitution_rules: The substitution_rules of this RestoreConfig.
        :type substitution_rules: List[SubstitutionRule]
        """

        self._substitution_rules = substitution_rules

    @property
    def transformation_rules(self):
        """Gets the transformation_rules of this RestoreConfig.

        Optional. A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no transformation will occur.

        :return: The transformation_rules of this RestoreConfig.
        :rtype: List[TransformationRule]
        """
        return self._transformation_rules

    @transformation_rules.setter
    def transformation_rules(self, transformation_rules):
        """Sets the transformation_rules of this RestoreConfig.

        Optional. A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no transformation will occur.

        :param transformation_rules: The transformation_rules of this RestoreConfig.
        :type transformation_rules: List[TransformationRule]
        """

        self._transformation_rules = transformation_rules

    @property
    def volume_data_restore_policy(self):
        """Gets the volume_data_restore_policy of this RestoreConfig.

        Optional. Specifies the mechanism to be used to restore volume data. Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as NO_VOLUME_DATA_RESTORATION).

        :return: The volume_data_restore_policy of this RestoreConfig.
        :rtype: str
        """
        return self._volume_data_restore_policy

    @volume_data_restore_policy.setter
    def volume_data_restore_policy(self, volume_data_restore_policy):
        """Sets the volume_data_restore_policy of this RestoreConfig.

        Optional. Specifies the mechanism to be used to restore volume data. Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as NO_VOLUME_DATA_RESTORATION).

        :param volume_data_restore_policy: The volume_data_restore_policy of this RestoreConfig.
        :type volume_data_restore_policy: str
        """
        allowed_values = ["VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED", "RESTORE_VOLUME_DATA_FROM_BACKUP", "REUSE_VOLUME_HANDLE_FROM_BACKUP", "NO_VOLUME_DATA_RESTORATION"]  # noqa: E501
        if volume_data_restore_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `volume_data_restore_policy` ({0}), must be one of {1}"
                .format(volume_data_restore_policy, allowed_values)
            )

        self._volume_data_restore_policy = volume_data_restore_policy
