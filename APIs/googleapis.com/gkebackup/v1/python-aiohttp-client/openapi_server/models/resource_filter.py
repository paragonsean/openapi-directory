# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_kind import GroupKind
from openapi_server import util


class ResourceFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_kinds: List[GroupKind]=None, json_path: str=None, namespaces: List[str]=None):
        """ResourceFilter - a model defined in OpenAPI

        :param group_kinds: The group_kinds of this ResourceFilter.
        :param json_path: The json_path of this ResourceFilter.
        :param namespaces: The namespaces of this ResourceFilter.
        """
        self.openapi_types = {
            'group_kinds': List[GroupKind],
            'json_path': str,
            'namespaces': List[str]
        }

        self.attribute_map = {
            'group_kinds': 'groupKinds',
            'json_path': 'jsonPath',
            'namespaces': 'namespaces'
        }

        self._group_kinds = group_kinds
        self._json_path = json_path
        self._namespaces = namespaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceFilter of this ResourceFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_kinds(self):
        """Gets the group_kinds of this ResourceFilter.

        Optional. (Filtering parameter) Any resource subject to transformation must belong to one of the listed \"types\". If this field is not provided, no type filtering will be performed (all resources of all types matching previous filtering parameters will be candidates for transformation).

        :return: The group_kinds of this ResourceFilter.
        :rtype: List[GroupKind]
        """
        return self._group_kinds

    @group_kinds.setter
    def group_kinds(self, group_kinds):
        """Sets the group_kinds of this ResourceFilter.

        Optional. (Filtering parameter) Any resource subject to transformation must belong to one of the listed \"types\". If this field is not provided, no type filtering will be performed (all resources of all types matching previous filtering parameters will be candidates for transformation).

        :param group_kinds: The group_kinds of this ResourceFilter.
        :type group_kinds: List[GroupKind]
        """

        self._group_kinds = group_kinds

    @property
    def json_path(self):
        """Gets the json_path of this ResourceFilter.

        Optional. This is a [JSONPath] (https://github.com/json-path/JsonPath/blob/master/README.md) expression that matches specific fields of candidate resources and it operates as a filtering parameter (resources that are not matched with this expression will not be candidates for transformation).

        :return: The json_path of this ResourceFilter.
        :rtype: str
        """
        return self._json_path

    @json_path.setter
    def json_path(self, json_path):
        """Sets the json_path of this ResourceFilter.

        Optional. This is a [JSONPath] (https://github.com/json-path/JsonPath/blob/master/README.md) expression that matches specific fields of candidate resources and it operates as a filtering parameter (resources that are not matched with this expression will not be candidates for transformation).

        :param json_path: The json_path of this ResourceFilter.
        :type json_path: str
        """

        self._json_path = json_path

    @property
    def namespaces(self):
        """Gets the namespaces of this ResourceFilter.

        Optional. (Filtering parameter) Any resource subject to transformation must be contained within one of the listed Kubernetes Namespace in the Backup. If this field is not provided, no namespace filtering will be performed (all resources in all Namespaces, including all cluster-scoped resources, will be candidates for transformation).

        :return: The namespaces of this ResourceFilter.
        :rtype: List[str]
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces):
        """Sets the namespaces of this ResourceFilter.

        Optional. (Filtering parameter) Any resource subject to transformation must be contained within one of the listed Kubernetes Namespace in the Backup. If this field is not provided, no namespace filtering will be performed (all resources in all Namespaces, including all cluster-scoped resources, will be candidates for transformation).

        :param namespaces: The namespaces of this ResourceFilter.
        :type namespaces: List[str]
        """

        self._namespaces = namespaces
