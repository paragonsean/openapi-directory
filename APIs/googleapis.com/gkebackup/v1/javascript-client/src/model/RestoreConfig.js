/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterResourceRestoreScope from './ClusterResourceRestoreScope';
import NamespacedNames from './NamespacedNames';
import Namespaces from './Namespaces';
import SubstitutionRule from './SubstitutionRule';
import TransformationRule from './TransformationRule';

/**
 * The RestoreConfig model module.
 * @module model/RestoreConfig
 * @version v1
 */
class RestoreConfig {
    /**
     * Constructs a new <code>RestoreConfig</code>.
     * Configuration of a restore. Next id: 14
     * @alias module:model/RestoreConfig
     */
    constructor() { 
        
        RestoreConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RestoreConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RestoreConfig} obj Optional instance to populate.
     * @return {module:model/RestoreConfig} The populated <code>RestoreConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestoreConfig();

            if (data.hasOwnProperty('allNamespaces')) {
                obj['allNamespaces'] = ApiClient.convertToType(data['allNamespaces'], 'Boolean');
            }
            if (data.hasOwnProperty('clusterResourceConflictPolicy')) {
                obj['clusterResourceConflictPolicy'] = ApiClient.convertToType(data['clusterResourceConflictPolicy'], 'String');
            }
            if (data.hasOwnProperty('clusterResourceRestoreScope')) {
                obj['clusterResourceRestoreScope'] = ClusterResourceRestoreScope.constructFromObject(data['clusterResourceRestoreScope']);
            }
            if (data.hasOwnProperty('excludedNamespaces')) {
                obj['excludedNamespaces'] = Namespaces.constructFromObject(data['excludedNamespaces']);
            }
            if (data.hasOwnProperty('namespacedResourceRestoreMode')) {
                obj['namespacedResourceRestoreMode'] = ApiClient.convertToType(data['namespacedResourceRestoreMode'], 'String');
            }
            if (data.hasOwnProperty('noNamespaces')) {
                obj['noNamespaces'] = ApiClient.convertToType(data['noNamespaces'], 'Boolean');
            }
            if (data.hasOwnProperty('selectedApplications')) {
                obj['selectedApplications'] = NamespacedNames.constructFromObject(data['selectedApplications']);
            }
            if (data.hasOwnProperty('selectedNamespaces')) {
                obj['selectedNamespaces'] = Namespaces.constructFromObject(data['selectedNamespaces']);
            }
            if (data.hasOwnProperty('substitutionRules')) {
                obj['substitutionRules'] = ApiClient.convertToType(data['substitutionRules'], [SubstitutionRule]);
            }
            if (data.hasOwnProperty('transformationRules')) {
                obj['transformationRules'] = ApiClient.convertToType(data['transformationRules'], [TransformationRule]);
            }
            if (data.hasOwnProperty('volumeDataRestorePolicy')) {
                obj['volumeDataRestorePolicy'] = ApiClient.convertToType(data['volumeDataRestorePolicy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestoreConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestoreConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterResourceConflictPolicy'] && !(typeof data['clusterResourceConflictPolicy'] === 'string' || data['clusterResourceConflictPolicy'] instanceof String)) {
            throw new Error("Expected the field `clusterResourceConflictPolicy` to be a primitive type in the JSON string but got " + data['clusterResourceConflictPolicy']);
        }
        // validate the optional field `clusterResourceRestoreScope`
        if (data['clusterResourceRestoreScope']) { // data not null
          ClusterResourceRestoreScope.validateJSON(data['clusterResourceRestoreScope']);
        }
        // validate the optional field `excludedNamespaces`
        if (data['excludedNamespaces']) { // data not null
          Namespaces.validateJSON(data['excludedNamespaces']);
        }
        // ensure the json data is a string
        if (data['namespacedResourceRestoreMode'] && !(typeof data['namespacedResourceRestoreMode'] === 'string' || data['namespacedResourceRestoreMode'] instanceof String)) {
            throw new Error("Expected the field `namespacedResourceRestoreMode` to be a primitive type in the JSON string but got " + data['namespacedResourceRestoreMode']);
        }
        // validate the optional field `selectedApplications`
        if (data['selectedApplications']) { // data not null
          NamespacedNames.validateJSON(data['selectedApplications']);
        }
        // validate the optional field `selectedNamespaces`
        if (data['selectedNamespaces']) { // data not null
          Namespaces.validateJSON(data['selectedNamespaces']);
        }
        if (data['substitutionRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['substitutionRules'])) {
                throw new Error("Expected the field `substitutionRules` to be an array in the JSON data but got " + data['substitutionRules']);
            }
            // validate the optional field `substitutionRules` (array)
            for (const item of data['substitutionRules']) {
                SubstitutionRule.validateJSON(item);
            };
        }
        if (data['transformationRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transformationRules'])) {
                throw new Error("Expected the field `transformationRules` to be an array in the JSON data but got " + data['transformationRules']);
            }
            // validate the optional field `transformationRules` (array)
            for (const item of data['transformationRules']) {
                TransformationRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['volumeDataRestorePolicy'] && !(typeof data['volumeDataRestorePolicy'] === 'string' || data['volumeDataRestorePolicy'] instanceof String)) {
            throw new Error("Expected the field `volumeDataRestorePolicy` to be a primitive type in the JSON string but got " + data['volumeDataRestorePolicy']);
        }

        return true;
    }


}



/**
 * Restore all namespaced resources in the Backup if set to \"True\". Specifying this field to \"False\" is an error.
 * @member {Boolean} allNamespaces
 */
RestoreConfig.prototype['allNamespaces'] = undefined;

/**
 * Optional. Defines the behavior for handling the situation where cluster-scoped resources being restored already exist in the target cluster. This MUST be set to a value other than CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED if cluster_resource_restore_scope is not empty.
 * @member {module:model/RestoreConfig.ClusterResourceConflictPolicyEnum} clusterResourceConflictPolicy
 */
RestoreConfig.prototype['clusterResourceConflictPolicy'] = undefined;

/**
 * @member {module:model/ClusterResourceRestoreScope} clusterResourceRestoreScope
 */
RestoreConfig.prototype['clusterResourceRestoreScope'] = undefined;

/**
 * @member {module:model/Namespaces} excludedNamespaces
 */
RestoreConfig.prototype['excludedNamespaces'] = undefined;

/**
 * Optional. Defines the behavior for handling the situation where sets of namespaced resources being restored already exist in the target cluster. This MUST be set to a value other than NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED.
 * @member {module:model/RestoreConfig.NamespacedResourceRestoreModeEnum} namespacedResourceRestoreMode
 */
RestoreConfig.prototype['namespacedResourceRestoreMode'] = undefined;

/**
 * Do not restore any namespaced resources if set to \"True\". Specifying this field to \"False\" is not allowed.
 * @member {Boolean} noNamespaces
 */
RestoreConfig.prototype['noNamespaces'] = undefined;

/**
 * @member {module:model/NamespacedNames} selectedApplications
 */
RestoreConfig.prototype['selectedApplications'] = undefined;

/**
 * @member {module:model/Namespaces} selectedNamespaces
 */
RestoreConfig.prototype['selectedNamespaces'] = undefined;

/**
 * Optional. A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no substitution will occur.
 * @member {Array.<module:model/SubstitutionRule>} substitutionRules
 */
RestoreConfig.prototype['substitutionRules'] = undefined;

/**
 * Optional. A list of transformation rules to be applied against Kubernetes resources as they are selected for restoration from a Backup. Rules are executed in order defined - this order matters, as changes made by a rule may impact the filtering logic of subsequent rules. An empty list means no transformation will occur.
 * @member {Array.<module:model/TransformationRule>} transformationRules
 */
RestoreConfig.prototype['transformationRules'] = undefined;

/**
 * Optional. Specifies the mechanism to be used to restore volume data. Default: VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED (will be treated as NO_VOLUME_DATA_RESTORATION).
 * @member {module:model/RestoreConfig.VolumeDataRestorePolicyEnum} volumeDataRestorePolicy
 */
RestoreConfig.prototype['volumeDataRestorePolicy'] = undefined;





/**
 * Allowed values for the <code>clusterResourceConflictPolicy</code> property.
 * @enum {String}
 * @readonly
 */
RestoreConfig['ClusterResourceConflictPolicyEnum'] = {

    /**
     * value: "CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED"
     * @const
     */
    "CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED": "CLUSTER_RESOURCE_CONFLICT_POLICY_UNSPECIFIED",

    /**
     * value: "USE_EXISTING_VERSION"
     * @const
     */
    "USE_EXISTING_VERSION": "USE_EXISTING_VERSION",

    /**
     * value: "USE_BACKUP_VERSION"
     * @const
     */
    "USE_BACKUP_VERSION": "USE_BACKUP_VERSION"
};


/**
 * Allowed values for the <code>namespacedResourceRestoreMode</code> property.
 * @enum {String}
 * @readonly
 */
RestoreConfig['NamespacedResourceRestoreModeEnum'] = {

    /**
     * value: "NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED"
     * @const
     */
    "NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED": "NAMESPACED_RESOURCE_RESTORE_MODE_UNSPECIFIED",

    /**
     * value: "DELETE_AND_RESTORE"
     * @const
     */
    "DELETE_AND_RESTORE": "DELETE_AND_RESTORE",

    /**
     * value: "FAIL_ON_CONFLICT"
     * @const
     */
    "FAIL_ON_CONFLICT": "FAIL_ON_CONFLICT"
};


/**
 * Allowed values for the <code>volumeDataRestorePolicy</code> property.
 * @enum {String}
 * @readonly
 */
RestoreConfig['VolumeDataRestorePolicyEnum'] = {

    /**
     * value: "VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED"
     * @const
     */
    "VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED": "VOLUME_DATA_RESTORE_POLICY_UNSPECIFIED",

    /**
     * value: "RESTORE_VOLUME_DATA_FROM_BACKUP"
     * @const
     */
    "RESTORE_VOLUME_DATA_FROM_BACKUP": "RESTORE_VOLUME_DATA_FROM_BACKUP",

    /**
     * value: "REUSE_VOLUME_HANDLE_FROM_BACKUP"
     * @const
     */
    "REUSE_VOLUME_HANDLE_FROM_BACKUP": "REUSE_VOLUME_HANDLE_FROM_BACKUP",

    /**
     * value: "NO_VOLUME_DATA_RESTORATION"
     * @const
     */
    "NO_VOLUME_DATA_RESTORATION": "NO_VOLUME_DATA_RESTORATION"
};



export default RestoreConfig;

