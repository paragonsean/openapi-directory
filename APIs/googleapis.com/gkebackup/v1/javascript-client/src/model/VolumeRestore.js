/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NamespacedName from './NamespacedName';

/**
 * The VolumeRestore model module.
 * @module model/VolumeRestore
 * @version v1
 */
class VolumeRestore {
    /**
     * Constructs a new <code>VolumeRestore</code>.
     * Represents the operation of restoring a volume from a VolumeBackup. Next id: 13
     * @alias module:model/VolumeRestore
     */
    constructor() { 
        
        VolumeRestore.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeRestore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeRestore} obj Optional instance to populate.
     * @return {module:model/VolumeRestore} The populated <code>VolumeRestore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeRestore();

            if (data.hasOwnProperty('completeTime')) {
                obj['completeTime'] = ApiClient.convertToType(data['completeTime'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateMessage')) {
                obj['stateMessage'] = ApiClient.convertToType(data['stateMessage'], 'String');
            }
            if (data.hasOwnProperty('targetPvc')) {
                obj['targetPvc'] = NamespacedName.constructFromObject(data['targetPvc']);
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('volumeBackup')) {
                obj['volumeBackup'] = ApiClient.convertToType(data['volumeBackup'], 'String');
            }
            if (data.hasOwnProperty('volumeHandle')) {
                obj['volumeHandle'] = ApiClient.convertToType(data['volumeHandle'], 'String');
            }
            if (data.hasOwnProperty('volumeType')) {
                obj['volumeType'] = ApiClient.convertToType(data['volumeType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeRestore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeRestore</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['completeTime'] && !(typeof data['completeTime'] === 'string' || data['completeTime'] instanceof String)) {
            throw new Error("Expected the field `completeTime` to be a primitive type in the JSON string but got " + data['completeTime']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateMessage'] && !(typeof data['stateMessage'] === 'string' || data['stateMessage'] instanceof String)) {
            throw new Error("Expected the field `stateMessage` to be a primitive type in the JSON string but got " + data['stateMessage']);
        }
        // validate the optional field `targetPvc`
        if (data['targetPvc']) { // data not null
          NamespacedName.validateJSON(data['targetPvc']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['volumeBackup'] && !(typeof data['volumeBackup'] === 'string' || data['volumeBackup'] instanceof String)) {
            throw new Error("Expected the field `volumeBackup` to be a primitive type in the JSON string but got " + data['volumeBackup']);
        }
        // ensure the json data is a string
        if (data['volumeHandle'] && !(typeof data['volumeHandle'] === 'string' || data['volumeHandle'] instanceof String)) {
            throw new Error("Expected the field `volumeHandle` to be a primitive type in the JSON string but got " + data['volumeHandle']);
        }
        // ensure the json data is a string
        if (data['volumeType'] && !(typeof data['volumeType'] === 'string' || data['volumeType'] instanceof String)) {
            throw new Error("Expected the field `volumeType` to be a primitive type in the JSON string but got " + data['volumeType']);
        }

        return true;
    }


}



/**
 * Output only. The timestamp when the associated underlying volume restoration completed.
 * @member {String} completeTime
 */
VolumeRestore.prototype['completeTime'] = undefined;

/**
 * Output only. The timestamp when this VolumeRestore resource was created.
 * @member {String} createTime
 */
VolumeRestore.prototype['createTime'] = undefined;

/**
 * Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a volume restore from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform volume restore updates in order to avoid race conditions.
 * @member {String} etag
 */
VolumeRestore.prototype['etag'] = undefined;

/**
 * Output only. Full name of the VolumeRestore resource. Format: `projects/_*_/locations/_*_/restorePlans/_*_/restores/_*_/volumeRestores/_*`
 * @member {String} name
 */
VolumeRestore.prototype['name'] = undefined;

/**
 * Output only. The current state of this VolumeRestore.
 * @member {module:model/VolumeRestore.StateEnum} state
 */
VolumeRestore.prototype['state'] = undefined;

/**
 * Output only. A human readable message explaining why the VolumeRestore is in its current state.
 * @member {String} stateMessage
 */
VolumeRestore.prototype['stateMessage'] = undefined;

/**
 * @member {module:model/NamespacedName} targetPvc
 */
VolumeRestore.prototype['targetPvc'] = undefined;

/**
 * Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
 * @member {String} uid
 */
VolumeRestore.prototype['uid'] = undefined;

/**
 * Output only. The timestamp when this VolumeRestore resource was last updated.
 * @member {String} updateTime
 */
VolumeRestore.prototype['updateTime'] = undefined;

/**
 * Output only. The full name of the VolumeBackup from which the volume will be restored. Format: `projects/_*_/locations/_*_/backupPlans/_*_/backups/_*_/volumeBackups/_*`.
 * @member {String} volumeBackup
 */
VolumeRestore.prototype['volumeBackup'] = undefined;

/**
 * Output only. A storage system-specific opaque handler to the underlying volume created for the target PVC from the volume backup.
 * @member {String} volumeHandle
 */
VolumeRestore.prototype['volumeHandle'] = undefined;

/**
 * Output only. The type of volume provisioned
 * @member {module:model/VolumeRestore.VolumeTypeEnum} volumeType
 */
VolumeRestore.prototype['volumeType'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
VolumeRestore['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "RESTORING"
     * @const
     */
    "RESTORING": "RESTORING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING"
};


/**
 * Allowed values for the <code>volumeType</code> property.
 * @enum {String}
 * @readonly
 */
VolumeRestore['VolumeTypeEnum'] = {

    /**
     * value: "VOLUME_TYPE_UNSPECIFIED"
     * @const
     */
    "VOLUME_TYPE_UNSPECIFIED": "VOLUME_TYPE_UNSPECIFIED",

    /**
     * value: "GCE_PERSISTENT_DISK"
     * @const
     */
    "GCE_PERSISTENT_DISK": "GCE_PERSISTENT_DISK"
};



export default VolumeRestore;

