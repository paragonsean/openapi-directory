/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptionKey from './EncryptionKey';
import NamespacedNames from './NamespacedNames';
import Namespaces from './Namespaces';

/**
 * The BackupConfig model module.
 * @module model/BackupConfig
 * @version v1
 */
class BackupConfig {
    /**
     * Constructs a new <code>BackupConfig</code>.
     * BackupConfig defines the configuration of Backups created via this BackupPlan.
     * @alias module:model/BackupConfig
     */
    constructor() { 
        
        BackupConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BackupConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BackupConfig} obj Optional instance to populate.
     * @return {module:model/BackupConfig} The populated <code>BackupConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BackupConfig();

            if (data.hasOwnProperty('allNamespaces')) {
                obj['allNamespaces'] = ApiClient.convertToType(data['allNamespaces'], 'Boolean');
            }
            if (data.hasOwnProperty('encryptionKey')) {
                obj['encryptionKey'] = EncryptionKey.constructFromObject(data['encryptionKey']);
            }
            if (data.hasOwnProperty('includeSecrets')) {
                obj['includeSecrets'] = ApiClient.convertToType(data['includeSecrets'], 'Boolean');
            }
            if (data.hasOwnProperty('includeVolumeData')) {
                obj['includeVolumeData'] = ApiClient.convertToType(data['includeVolumeData'], 'Boolean');
            }
            if (data.hasOwnProperty('selectedApplications')) {
                obj['selectedApplications'] = NamespacedNames.constructFromObject(data['selectedApplications']);
            }
            if (data.hasOwnProperty('selectedNamespaces')) {
                obj['selectedNamespaces'] = Namespaces.constructFromObject(data['selectedNamespaces']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BackupConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BackupConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `encryptionKey`
        if (data['encryptionKey']) { // data not null
          EncryptionKey.validateJSON(data['encryptionKey']);
        }
        // validate the optional field `selectedApplications`
        if (data['selectedApplications']) { // data not null
          NamespacedNames.validateJSON(data['selectedApplications']);
        }
        // validate the optional field `selectedNamespaces`
        if (data['selectedNamespaces']) { // data not null
          Namespaces.validateJSON(data['selectedNamespaces']);
        }

        return true;
    }


}



/**
 * If True, include all namespaced resources
 * @member {Boolean} allNamespaces
 */
BackupConfig.prototype['allNamespaces'] = undefined;

/**
 * @member {module:model/EncryptionKey} encryptionKey
 */
BackupConfig.prototype['encryptionKey'] = undefined;

/**
 * Optional. This flag specifies whether Kubernetes Secret resources should be included when they fall into the scope of Backups. Default: False
 * @member {Boolean} includeSecrets
 */
BackupConfig.prototype['includeSecrets'] = undefined;

/**
 * Optional. This flag specifies whether volume data should be backed up when PVCs are included in the scope of a Backup. Default: False
 * @member {Boolean} includeVolumeData
 */
BackupConfig.prototype['includeVolumeData'] = undefined;

/**
 * @member {module:model/NamespacedNames} selectedApplications
 */
BackupConfig.prototype['selectedApplications'] = undefined;

/**
 * @member {module:model/Namespaces} selectedNamespaces
 */
BackupConfig.prototype['selectedNamespaces'] = undefined;






export default BackupConfig;

