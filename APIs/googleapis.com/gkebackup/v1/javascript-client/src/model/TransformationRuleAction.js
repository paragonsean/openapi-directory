/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransformationRuleAction model module.
 * @module model/TransformationRuleAction
 * @version v1
 */
class TransformationRuleAction {
    /**
     * Constructs a new <code>TransformationRuleAction</code>.
     * TransformationRuleAction defines a TransformationRule action based on the JSON Patch RFC (https://www.rfc-editor.org/rfc/rfc6902)
     * @alias module:model/TransformationRuleAction
     */
    constructor() { 
        
        TransformationRuleAction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransformationRuleAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransformationRuleAction} obj Optional instance to populate.
     * @return {module:model/TransformationRuleAction} The populated <code>TransformationRuleAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransformationRuleAction();

            if (data.hasOwnProperty('fromPath')) {
                obj['fromPath'] = ApiClient.convertToType(data['fromPath'], 'String');
            }
            if (data.hasOwnProperty('op')) {
                obj['op'] = ApiClient.convertToType(data['op'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransformationRuleAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransformationRuleAction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fromPath'] && !(typeof data['fromPath'] === 'string' || data['fromPath'] instanceof String)) {
            throw new Error("Expected the field `fromPath` to be a primitive type in the JSON string but got " + data['fromPath']);
        }
        // ensure the json data is a string
        if (data['op'] && !(typeof data['op'] === 'string' || data['op'] instanceof String)) {
            throw new Error("Expected the field `op` to be a primitive type in the JSON string but got " + data['op']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * Optional. A string containing a JSON Pointer value that references the location in the target document to move the value from.
 * @member {String} fromPath
 */
TransformationRuleAction.prototype['fromPath'] = undefined;

/**
 * Required. op specifies the operation to perform.
 * @member {module:model/TransformationRuleAction.OpEnum} op
 */
TransformationRuleAction.prototype['op'] = undefined;

/**
 * Optional. A string containing a JSON-Pointer value that references a location within the target document where the operation is performed.
 * @member {String} path
 */
TransformationRuleAction.prototype['path'] = undefined;

/**
 * Optional. A string that specifies the desired value in string format to use for transformation.
 * @member {String} value
 */
TransformationRuleAction.prototype['value'] = undefined;





/**
 * Allowed values for the <code>op</code> property.
 * @enum {String}
 * @readonly
 */
TransformationRuleAction['OpEnum'] = {

    /**
     * value: "OP_UNSPECIFIED"
     * @const
     */
    "OP_UNSPECIFIED": "OP_UNSPECIFIED",

    /**
     * value: "REMOVE"
     * @const
     */
    "REMOVE": "REMOVE",

    /**
     * value: "MOVE"
     * @const
     */
    "MOVE": "MOVE",

    /**
     * value: "COPY"
     * @const
     */
    "COPY": "COPY",

    /**
     * value: "ADD"
     * @const
     */
    "ADD": "ADD",

    /**
     * value: "TEST"
     * @const
     */
    "TEST": "TEST",

    /**
     * value: "REPLACE"
     * @const
     */
    "REPLACE": "REPLACE"
};



export default TransformationRuleAction;

