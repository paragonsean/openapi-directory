/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NamespacedName from './NamespacedName';

/**
 * The VolumeBackup model module.
 * @module model/VolumeBackup
 * @version v1
 */
class VolumeBackup {
    /**
     * Constructs a new <code>VolumeBackup</code>.
     * Represents the backup of a specific persistent volume as a component of a Backup - both the record of the operation and a pointer to the underlying storage-specific artifacts. Next id: 14
     * @alias module:model/VolumeBackup
     */
    constructor() { 
        
        VolumeBackup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeBackup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeBackup} obj Optional instance to populate.
     * @return {module:model/VolumeBackup} The populated <code>VolumeBackup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeBackup();

            if (data.hasOwnProperty('completeTime')) {
                obj['completeTime'] = ApiClient.convertToType(data['completeTime'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('diskSizeBytes')) {
                obj['diskSizeBytes'] = ApiClient.convertToType(data['diskSizeBytes'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sourcePvc')) {
                obj['sourcePvc'] = NamespacedName.constructFromObject(data['sourcePvc']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateMessage')) {
                obj['stateMessage'] = ApiClient.convertToType(data['stateMessage'], 'String');
            }
            if (data.hasOwnProperty('storageBytes')) {
                obj['storageBytes'] = ApiClient.convertToType(data['storageBytes'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('volumeBackupHandle')) {
                obj['volumeBackupHandle'] = ApiClient.convertToType(data['volumeBackupHandle'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeBackup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeBackup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['completeTime'] && !(typeof data['completeTime'] === 'string' || data['completeTime'] instanceof String)) {
            throw new Error("Expected the field `completeTime` to be a primitive type in the JSON string but got " + data['completeTime']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['diskSizeBytes'] && !(typeof data['diskSizeBytes'] === 'string' || data['diskSizeBytes'] instanceof String)) {
            throw new Error("Expected the field `diskSizeBytes` to be a primitive type in the JSON string but got " + data['diskSizeBytes']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `sourcePvc`
        if (data['sourcePvc']) { // data not null
          NamespacedName.validateJSON(data['sourcePvc']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateMessage'] && !(typeof data['stateMessage'] === 'string' || data['stateMessage'] instanceof String)) {
            throw new Error("Expected the field `stateMessage` to be a primitive type in the JSON string but got " + data['stateMessage']);
        }
        // ensure the json data is a string
        if (data['storageBytes'] && !(typeof data['storageBytes'] === 'string' || data['storageBytes'] instanceof String)) {
            throw new Error("Expected the field `storageBytes` to be a primitive type in the JSON string but got " + data['storageBytes']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['volumeBackupHandle'] && !(typeof data['volumeBackupHandle'] === 'string' || data['volumeBackupHandle'] instanceof String)) {
            throw new Error("Expected the field `volumeBackupHandle` to be a primitive type in the JSON string but got " + data['volumeBackupHandle']);
        }

        return true;
    }


}



/**
 * Output only. The timestamp when the associated underlying volume backup operation completed.
 * @member {String} completeTime
 */
VolumeBackup.prototype['completeTime'] = undefined;

/**
 * Output only. The timestamp when this VolumeBackup resource was created.
 * @member {String} createTime
 */
VolumeBackup.prototype['createTime'] = undefined;

/**
 * Output only. The minimum size of the disk to which this VolumeBackup can be restored.
 * @member {String} diskSizeBytes
 */
VolumeBackup.prototype['diskSizeBytes'] = undefined;

/**
 * Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a volume backup from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform volume backup updates in order to avoid race conditions.
 * @member {String} etag
 */
VolumeBackup.prototype['etag'] = undefined;

/**
 * Output only. The format used for the volume backup.
 * @member {module:model/VolumeBackup.FormatEnum} format
 */
VolumeBackup.prototype['format'] = undefined;

/**
 * Output only. The full name of the VolumeBackup resource. Format: `projects/_*_/locations/_*_/backupPlans/_*_/backups/_*_/volumeBackups/_*`.
 * @member {String} name
 */
VolumeBackup.prototype['name'] = undefined;

/**
 * @member {module:model/NamespacedName} sourcePvc
 */
VolumeBackup.prototype['sourcePvc'] = undefined;

/**
 * Output only. The current state of this VolumeBackup.
 * @member {module:model/VolumeBackup.StateEnum} state
 */
VolumeBackup.prototype['state'] = undefined;

/**
 * Output only. A human readable message explaining why the VolumeBackup is in its current state.
 * @member {String} stateMessage
 */
VolumeBackup.prototype['stateMessage'] = undefined;

/**
 * Output only. The aggregate size of the underlying artifacts associated with this VolumeBackup in the backup storage. This may change over time when multiple backups of the same volume share the same backup storage location. In particular, this is likely to increase in size when the immediately preceding backup of the same volume is deleted.
 * @member {String} storageBytes
 */
VolumeBackup.prototype['storageBytes'] = undefined;

/**
 * Output only. Server generated global unique identifier of [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) format.
 * @member {String} uid
 */
VolumeBackup.prototype['uid'] = undefined;

/**
 * Output only. The timestamp when this VolumeBackup resource was last updated.
 * @member {String} updateTime
 */
VolumeBackup.prototype['updateTime'] = undefined;

/**
 * Output only. A storage system-specific opaque handle to the underlying volume backup.
 * @member {String} volumeBackupHandle
 */
VolumeBackup.prototype['volumeBackupHandle'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
VolumeBackup['FormatEnum'] = {

    /**
     * value: "VOLUME_BACKUP_FORMAT_UNSPECIFIED"
     * @const
     */
    "VOLUME_BACKUP_FORMAT_UNSPECIFIED": "VOLUME_BACKUP_FORMAT_UNSPECIFIED",

    /**
     * value: "GCE_PERSISTENT_DISK"
     * @const
     */
    "GCE_PERSISTENT_DISK": "GCE_PERSISTENT_DISK"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
VolumeBackup['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "SNAPSHOTTING"
     * @const
     */
    "SNAPSHOTTING": "SNAPSHOTTING",

    /**
     * value: "UPLOADING"
     * @const
     */
    "UPLOADING": "UPLOADING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING"
};



export default VolumeBackup;

