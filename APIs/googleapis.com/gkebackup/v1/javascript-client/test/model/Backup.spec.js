/**
 * Backup for GKE API
 * Backup for GKE is a managed Kubernetes workload backup and restore service for GKE clusters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BackupForGkeApi);
  }
}(this, function(expect, BackupForGkeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BackupForGkeApi.Backup();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Backup', function() {
    it('should create an instance of Backup', function() {
      // uncomment below and update the code to test Backup
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be.a(BackupForGkeApi.Backup);
    });

    it('should have the property allNamespaces (base name: "allNamespaces")', function() {
      // uncomment below and update the code to test the property allNamespaces
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property clusterMetadata (base name: "clusterMetadata")', function() {
      // uncomment below and update the code to test the property clusterMetadata
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property completeTime (base name: "completeTime")', function() {
      // uncomment below and update the code to test the property completeTime
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property configBackupSizeBytes (base name: "configBackupSizeBytes")', function() {
      // uncomment below and update the code to test the property configBackupSizeBytes
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property containsSecrets (base name: "containsSecrets")', function() {
      // uncomment below and update the code to test the property containsSecrets
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property containsVolumeData (base name: "containsVolumeData")', function() {
      // uncomment below and update the code to test the property containsVolumeData
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property deleteLockDays (base name: "deleteLockDays")', function() {
      // uncomment below and update the code to test the property deleteLockDays
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property deleteLockExpireTime (base name: "deleteLockExpireTime")', function() {
      // uncomment below and update the code to test the property deleteLockExpireTime
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property encryptionKey (base name: "encryptionKey")', function() {
      // uncomment below and update the code to test the property encryptionKey
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property etag (base name: "etag")', function() {
      // uncomment below and update the code to test the property etag
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property manual (base name: "manual")', function() {
      // uncomment below and update the code to test the property manual
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property podCount (base name: "podCount")', function() {
      // uncomment below and update the code to test the property podCount
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property resourceCount (base name: "resourceCount")', function() {
      // uncomment below and update the code to test the property resourceCount
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property retainDays (base name: "retainDays")', function() {
      // uncomment below and update the code to test the property retainDays
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property retainExpireTime (base name: "retainExpireTime")', function() {
      // uncomment below and update the code to test the property retainExpireTime
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property selectedApplications (base name: "selectedApplications")', function() {
      // uncomment below and update the code to test the property selectedApplications
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property selectedNamespaces (base name: "selectedNamespaces")', function() {
      // uncomment below and update the code to test the property selectedNamespaces
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property sizeBytes (base name: "sizeBytes")', function() {
      // uncomment below and update the code to test the property sizeBytes
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property stateReason (base name: "stateReason")', function() {
      // uncomment below and update the code to test the property stateReason
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property updateTime (base name: "updateTime")', function() {
      // uncomment below and update the code to test the property updateTime
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

    it('should have the property volumeCount (base name: "volumeCount")', function() {
      // uncomment below and update the code to test the property volumeCount
      //var instance = new BackupForGkeApi.Backup();
      //expect(instance).to.be();
    });

  });

}));
