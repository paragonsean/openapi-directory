/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckResult::OAICheckResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckResult::OAICheckResult() {
    this->initializeModel();
}

OAICheckResult::~OAICheckResult() {}

void OAICheckResult::initializeModel() {

    m_allowlist_result_isSet = false;
    m_allowlist_result_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_evaluation_result_isSet = false;
    m_evaluation_result_isValid = false;

    m_explanation_isSet = false;
    m_explanation_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICheckResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckResult::fromJsonObject(QJsonObject json) {

    m_allowlist_result_isValid = ::OpenAPI::fromJsonValue(m_allowlist_result, json[QString("allowlistResult")]);
    m_allowlist_result_isSet = !json[QString("allowlistResult")].isNull() && m_allowlist_result_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_evaluation_result_isValid = ::OpenAPI::fromJsonValue(m_evaluation_result, json[QString("evaluationResult")]);
    m_evaluation_result_isSet = !json[QString("evaluationResult")].isNull() && m_evaluation_result_isValid;

    m_explanation_isValid = ::OpenAPI::fromJsonValue(m_explanation, json[QString("explanation")]);
    m_explanation_isSet = !json[QString("explanation")].isNull() && m_explanation_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICheckResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckResult::asJsonObject() const {
    QJsonObject obj;
    if (m_allowlist_result.isSet()) {
        obj.insert(QString("allowlistResult"), ::OpenAPI::toJsonValue(m_allowlist_result));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_evaluation_result.isSet()) {
        obj.insert(QString("evaluationResult"), ::OpenAPI::toJsonValue(m_evaluation_result));
    }
    if (m_explanation_isSet) {
        obj.insert(QString("explanation"), ::OpenAPI::toJsonValue(m_explanation));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAllowlistResult OAICheckResult::getAllowlistResult() const {
    return m_allowlist_result;
}
void OAICheckResult::setAllowlistResult(const OAIAllowlistResult &allowlist_result) {
    m_allowlist_result = allowlist_result;
    m_allowlist_result_isSet = true;
}

bool OAICheckResult::is_allowlist_result_Set() const{
    return m_allowlist_result_isSet;
}

bool OAICheckResult::is_allowlist_result_Valid() const{
    return m_allowlist_result_isValid;
}

QString OAICheckResult::getDisplayName() const {
    return m_display_name;
}
void OAICheckResult::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICheckResult::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICheckResult::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIEvaluationResult OAICheckResult::getEvaluationResult() const {
    return m_evaluation_result;
}
void OAICheckResult::setEvaluationResult(const OAIEvaluationResult &evaluation_result) {
    m_evaluation_result = evaluation_result;
    m_evaluation_result_isSet = true;
}

bool OAICheckResult::is_evaluation_result_Set() const{
    return m_evaluation_result_isSet;
}

bool OAICheckResult::is_evaluation_result_Valid() const{
    return m_evaluation_result_isValid;
}

QString OAICheckResult::getExplanation() const {
    return m_explanation;
}
void OAICheckResult::setExplanation(const QString &explanation) {
    m_explanation = explanation;
    m_explanation_isSet = true;
}

bool OAICheckResult::is_explanation_Set() const{
    return m_explanation_isSet;
}

bool OAICheckResult::is_explanation_Valid() const{
    return m_explanation_isValid;
}

QString OAICheckResult::getIndex() const {
    return m_index;
}
void OAICheckResult::setIndex(const QString &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAICheckResult::is_index_Set() const{
    return m_index_isSet;
}

bool OAICheckResult::is_index_Valid() const{
    return m_index_isValid;
}

QString OAICheckResult::getType() const {
    return m_type;
}
void OAICheckResult::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICheckResult::is_type_Set() const{
    return m_type_isSet;
}

bool OAICheckResult::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICheckResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowlist_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
