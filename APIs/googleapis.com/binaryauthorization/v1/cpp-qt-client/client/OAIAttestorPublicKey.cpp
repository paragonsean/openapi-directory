/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttestorPublicKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttestorPublicKey::OAIAttestorPublicKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttestorPublicKey::OAIAttestorPublicKey() {
    this->initializeModel();
}

OAIAttestorPublicKey::~OAIAttestorPublicKey() {}

void OAIAttestorPublicKey::initializeModel() {

    m_ascii_armored_pgp_public_key_isSet = false;
    m_ascii_armored_pgp_public_key_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_pkix_public_key_isSet = false;
    m_pkix_public_key_isValid = false;
}

void OAIAttestorPublicKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttestorPublicKey::fromJsonObject(QJsonObject json) {

    m_ascii_armored_pgp_public_key_isValid = ::OpenAPI::fromJsonValue(m_ascii_armored_pgp_public_key, json[QString("asciiArmoredPgpPublicKey")]);
    m_ascii_armored_pgp_public_key_isSet = !json[QString("asciiArmoredPgpPublicKey")].isNull() && m_ascii_armored_pgp_public_key_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_pkix_public_key_isValid = ::OpenAPI::fromJsonValue(m_pkix_public_key, json[QString("pkixPublicKey")]);
    m_pkix_public_key_isSet = !json[QString("pkixPublicKey")].isNull() && m_pkix_public_key_isValid;
}

QString OAIAttestorPublicKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttestorPublicKey::asJsonObject() const {
    QJsonObject obj;
    if (m_ascii_armored_pgp_public_key_isSet) {
        obj.insert(QString("asciiArmoredPgpPublicKey"), ::OpenAPI::toJsonValue(m_ascii_armored_pgp_public_key));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_pkix_public_key.isSet()) {
        obj.insert(QString("pkixPublicKey"), ::OpenAPI::toJsonValue(m_pkix_public_key));
    }
    return obj;
}

QString OAIAttestorPublicKey::getAsciiArmoredPgpPublicKey() const {
    return m_ascii_armored_pgp_public_key;
}
void OAIAttestorPublicKey::setAsciiArmoredPgpPublicKey(const QString &ascii_armored_pgp_public_key) {
    m_ascii_armored_pgp_public_key = ascii_armored_pgp_public_key;
    m_ascii_armored_pgp_public_key_isSet = true;
}

bool OAIAttestorPublicKey::is_ascii_armored_pgp_public_key_Set() const{
    return m_ascii_armored_pgp_public_key_isSet;
}

bool OAIAttestorPublicKey::is_ascii_armored_pgp_public_key_Valid() const{
    return m_ascii_armored_pgp_public_key_isValid;
}

QString OAIAttestorPublicKey::getComment() const {
    return m_comment;
}
void OAIAttestorPublicKey::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIAttestorPublicKey::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIAttestorPublicKey::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIAttestorPublicKey::getId() const {
    return m_id;
}
void OAIAttestorPublicKey::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAttestorPublicKey::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAttestorPublicKey::is_id_Valid() const{
    return m_id_isValid;
}

OAIPkixPublicKey OAIAttestorPublicKey::getPkixPublicKey() const {
    return m_pkix_public_key;
}
void OAIAttestorPublicKey::setPkixPublicKey(const OAIPkixPublicKey &pkix_public_key) {
    m_pkix_public_key = pkix_public_key;
    m_pkix_public_key_isSet = true;
}

bool OAIAttestorPublicKey::is_pkix_public_key_Set() const{
    return m_pkix_public_key_isSet;
}

bool OAIAttestorPublicKey::is_pkix_public_key_Valid() const{
    return m_pkix_public_key_isValid;
}

bool OAIAttestorPublicKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ascii_armored_pgp_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pkix_public_key.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttestorPublicKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
