/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVulnerabilityCheck.h
 *
 * An image vulnerability check, which rejects images that violate the configured vulnerability rules.
 */

#ifndef OAIVulnerabilityCheck_H
#define OAIVulnerabilityCheck_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVulnerabilityCheck : public OAIObject {
public:
    OAIVulnerabilityCheck();
    OAIVulnerabilityCheck(QString json);
    ~OAIVulnerabilityCheck() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAllowedCves() const;
    void setAllowedCves(const QList<QString> &allowed_cves);
    bool is_allowed_cves_Set() const;
    bool is_allowed_cves_Valid() const;

    QList<QString> getBlockedCves() const;
    void setBlockedCves(const QList<QString> &blocked_cves);
    bool is_blocked_cves_Set() const;
    bool is_blocked_cves_Valid() const;

    QList<QString> getContainerAnalysisVulnerabilityProjects() const;
    void setContainerAnalysisVulnerabilityProjects(const QList<QString> &container_analysis_vulnerability_projects);
    bool is_container_analysis_vulnerability_projects_Set() const;
    bool is_container_analysis_vulnerability_projects_Valid() const;

    QString getMaximumFixableSeverity() const;
    void setMaximumFixableSeverity(const QString &maximum_fixable_severity);
    bool is_maximum_fixable_severity_Set() const;
    bool is_maximum_fixable_severity_Valid() const;

    QString getMaximumUnfixableSeverity() const;
    void setMaximumUnfixableSeverity(const QString &maximum_unfixable_severity);
    bool is_maximum_unfixable_severity_Set() const;
    bool is_maximum_unfixable_severity_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_allowed_cves;
    bool m_allowed_cves_isSet;
    bool m_allowed_cves_isValid;

    QList<QString> m_blocked_cves;
    bool m_blocked_cves_isSet;
    bool m_blocked_cves_isValid;

    QList<QString> m_container_analysis_vulnerability_projects;
    bool m_container_analysis_vulnerability_projects_isSet;
    bool m_container_analysis_vulnerability_projects_isValid;

    QString m_maximum_fixable_severity;
    bool m_maximum_fixable_severity_isSet;
    bool m_maximum_fixable_severity_isValid;

    QString m_maximum_unfixable_severity;
    bool m_maximum_unfixable_severity_isSet;
    bool m_maximum_unfixable_severity_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVulnerabilityCheck)

#endif // OAIVulnerabilityCheck_H
