/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlatformPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlatformPolicy::OAIPlatformPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlatformPolicy::OAIPlatformPolicy() {
    this->initializeModel();
}

OAIPlatformPolicy::~OAIPlatformPolicy() {}

void OAIPlatformPolicy::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_gke_policy_isSet = false;
    m_gke_policy_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIPlatformPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlatformPolicy::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_gke_policy_isValid = ::OpenAPI::fromJsonValue(m_gke_policy, json[QString("gkePolicy")]);
    m_gke_policy_isSet = !json[QString("gkePolicy")].isNull() && m_gke_policy_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIPlatformPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlatformPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_gke_policy.isSet()) {
        obj.insert(QString("gkePolicy"), ::OpenAPI::toJsonValue(m_gke_policy));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIPlatformPolicy::getDescription() const {
    return m_description;
}
void OAIPlatformPolicy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPlatformPolicy::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPlatformPolicy::is_description_Valid() const{
    return m_description_isValid;
}

OAIGkePolicy OAIPlatformPolicy::getGkePolicy() const {
    return m_gke_policy;
}
void OAIPlatformPolicy::setGkePolicy(const OAIGkePolicy &gke_policy) {
    m_gke_policy = gke_policy;
    m_gke_policy_isSet = true;
}

bool OAIPlatformPolicy::is_gke_policy_Set() const{
    return m_gke_policy_isSet;
}

bool OAIPlatformPolicy::is_gke_policy_Valid() const{
    return m_gke_policy_isValid;
}

QString OAIPlatformPolicy::getName() const {
    return m_name;
}
void OAIPlatformPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlatformPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlatformPolicy::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPlatformPolicy::getUpdateTime() const {
    return m_update_time;
}
void OAIPlatformPolicy::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIPlatformPolicy::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIPlatformPolicy::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIPlatformPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlatformPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
