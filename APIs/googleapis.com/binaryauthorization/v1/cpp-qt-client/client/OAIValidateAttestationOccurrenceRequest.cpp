/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidateAttestationOccurrenceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidateAttestationOccurrenceRequest::OAIValidateAttestationOccurrenceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidateAttestationOccurrenceRequest::OAIValidateAttestationOccurrenceRequest() {
    this->initializeModel();
}

OAIValidateAttestationOccurrenceRequest::~OAIValidateAttestationOccurrenceRequest() {}

void OAIValidateAttestationOccurrenceRequest::initializeModel() {

    m_attestation_isSet = false;
    m_attestation_isValid = false;

    m_occurrence_note_isSet = false;
    m_occurrence_note_isValid = false;

    m_occurrence_resource_uri_isSet = false;
    m_occurrence_resource_uri_isValid = false;
}

void OAIValidateAttestationOccurrenceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidateAttestationOccurrenceRequest::fromJsonObject(QJsonObject json) {

    m_attestation_isValid = ::OpenAPI::fromJsonValue(m_attestation, json[QString("attestation")]);
    m_attestation_isSet = !json[QString("attestation")].isNull() && m_attestation_isValid;

    m_occurrence_note_isValid = ::OpenAPI::fromJsonValue(m_occurrence_note, json[QString("occurrenceNote")]);
    m_occurrence_note_isSet = !json[QString("occurrenceNote")].isNull() && m_occurrence_note_isValid;

    m_occurrence_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_occurrence_resource_uri, json[QString("occurrenceResourceUri")]);
    m_occurrence_resource_uri_isSet = !json[QString("occurrenceResourceUri")].isNull() && m_occurrence_resource_uri_isValid;
}

QString OAIValidateAttestationOccurrenceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidateAttestationOccurrenceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_attestation.isSet()) {
        obj.insert(QString("attestation"), ::OpenAPI::toJsonValue(m_attestation));
    }
    if (m_occurrence_note_isSet) {
        obj.insert(QString("occurrenceNote"), ::OpenAPI::toJsonValue(m_occurrence_note));
    }
    if (m_occurrence_resource_uri_isSet) {
        obj.insert(QString("occurrenceResourceUri"), ::OpenAPI::toJsonValue(m_occurrence_resource_uri));
    }
    return obj;
}

OAIAttestationOccurrence OAIValidateAttestationOccurrenceRequest::getAttestation() const {
    return m_attestation;
}
void OAIValidateAttestationOccurrenceRequest::setAttestation(const OAIAttestationOccurrence &attestation) {
    m_attestation = attestation;
    m_attestation_isSet = true;
}

bool OAIValidateAttestationOccurrenceRequest::is_attestation_Set() const{
    return m_attestation_isSet;
}

bool OAIValidateAttestationOccurrenceRequest::is_attestation_Valid() const{
    return m_attestation_isValid;
}

QString OAIValidateAttestationOccurrenceRequest::getOccurrenceNote() const {
    return m_occurrence_note;
}
void OAIValidateAttestationOccurrenceRequest::setOccurrenceNote(const QString &occurrence_note) {
    m_occurrence_note = occurrence_note;
    m_occurrence_note_isSet = true;
}

bool OAIValidateAttestationOccurrenceRequest::is_occurrence_note_Set() const{
    return m_occurrence_note_isSet;
}

bool OAIValidateAttestationOccurrenceRequest::is_occurrence_note_Valid() const{
    return m_occurrence_note_isValid;
}

QString OAIValidateAttestationOccurrenceRequest::getOccurrenceResourceUri() const {
    return m_occurrence_resource_uri;
}
void OAIValidateAttestationOccurrenceRequest::setOccurrenceResourceUri(const QString &occurrence_resource_uri) {
    m_occurrence_resource_uri = occurrence_resource_uri;
    m_occurrence_resource_uri_isSet = true;
}

bool OAIValidateAttestationOccurrenceRequest::is_occurrence_resource_uri_Set() const{
    return m_occurrence_resource_uri_isSet;
}

bool OAIValidateAttestationOccurrenceRequest::is_occurrence_resource_uri_Valid() const{
    return m_occurrence_resource_uri_isValid;
}

bool OAIValidateAttestationOccurrenceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurrence_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurrence_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidateAttestationOccurrenceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
