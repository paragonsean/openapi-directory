/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheck::OAICheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheck::OAICheck() {
    this->initializeModel();
}

OAICheck::~OAICheck() {}

void OAICheck::initializeModel() {

    m_always_deny_isSet = false;
    m_always_deny_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_image_allowlist_isSet = false;
    m_image_allowlist_isValid = false;

    m_image_freshness_check_isSet = false;
    m_image_freshness_check_isValid = false;

    m_sigstore_signature_check_isSet = false;
    m_sigstore_signature_check_isValid = false;

    m_simple_signing_attestation_check_isSet = false;
    m_simple_signing_attestation_check_isValid = false;

    m_slsa_check_isSet = false;
    m_slsa_check_isValid = false;

    m_trusted_directory_check_isSet = false;
    m_trusted_directory_check_isValid = false;

    m_vulnerability_check_isSet = false;
    m_vulnerability_check_isValid = false;
}

void OAICheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheck::fromJsonObject(QJsonObject json) {

    m_always_deny_isValid = ::OpenAPI::fromJsonValue(m_always_deny, json[QString("alwaysDeny")]);
    m_always_deny_isSet = !json[QString("alwaysDeny")].isNull() && m_always_deny_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_image_allowlist_isValid = ::OpenAPI::fromJsonValue(m_image_allowlist, json[QString("imageAllowlist")]);
    m_image_allowlist_isSet = !json[QString("imageAllowlist")].isNull() && m_image_allowlist_isValid;

    m_image_freshness_check_isValid = ::OpenAPI::fromJsonValue(m_image_freshness_check, json[QString("imageFreshnessCheck")]);
    m_image_freshness_check_isSet = !json[QString("imageFreshnessCheck")].isNull() && m_image_freshness_check_isValid;

    m_sigstore_signature_check_isValid = ::OpenAPI::fromJsonValue(m_sigstore_signature_check, json[QString("sigstoreSignatureCheck")]);
    m_sigstore_signature_check_isSet = !json[QString("sigstoreSignatureCheck")].isNull() && m_sigstore_signature_check_isValid;

    m_simple_signing_attestation_check_isValid = ::OpenAPI::fromJsonValue(m_simple_signing_attestation_check, json[QString("simpleSigningAttestationCheck")]);
    m_simple_signing_attestation_check_isSet = !json[QString("simpleSigningAttestationCheck")].isNull() && m_simple_signing_attestation_check_isValid;

    m_slsa_check_isValid = ::OpenAPI::fromJsonValue(m_slsa_check, json[QString("slsaCheck")]);
    m_slsa_check_isSet = !json[QString("slsaCheck")].isNull() && m_slsa_check_isValid;

    m_trusted_directory_check_isValid = ::OpenAPI::fromJsonValue(m_trusted_directory_check, json[QString("trustedDirectoryCheck")]);
    m_trusted_directory_check_isSet = !json[QString("trustedDirectoryCheck")].isNull() && m_trusted_directory_check_isValid;

    m_vulnerability_check_isValid = ::OpenAPI::fromJsonValue(m_vulnerability_check, json[QString("vulnerabilityCheck")]);
    m_vulnerability_check_isSet = !json[QString("vulnerabilityCheck")].isNull() && m_vulnerability_check_isValid;
}

QString OAICheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheck::asJsonObject() const {
    QJsonObject obj;
    if (m_always_deny_isSet) {
        obj.insert(QString("alwaysDeny"), ::OpenAPI::toJsonValue(m_always_deny));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_image_allowlist.isSet()) {
        obj.insert(QString("imageAllowlist"), ::OpenAPI::toJsonValue(m_image_allowlist));
    }
    if (m_image_freshness_check.isSet()) {
        obj.insert(QString("imageFreshnessCheck"), ::OpenAPI::toJsonValue(m_image_freshness_check));
    }
    if (m_sigstore_signature_check.isSet()) {
        obj.insert(QString("sigstoreSignatureCheck"), ::OpenAPI::toJsonValue(m_sigstore_signature_check));
    }
    if (m_simple_signing_attestation_check.isSet()) {
        obj.insert(QString("simpleSigningAttestationCheck"), ::OpenAPI::toJsonValue(m_simple_signing_attestation_check));
    }
    if (m_slsa_check.isSet()) {
        obj.insert(QString("slsaCheck"), ::OpenAPI::toJsonValue(m_slsa_check));
    }
    if (m_trusted_directory_check.isSet()) {
        obj.insert(QString("trustedDirectoryCheck"), ::OpenAPI::toJsonValue(m_trusted_directory_check));
    }
    if (m_vulnerability_check.isSet()) {
        obj.insert(QString("vulnerabilityCheck"), ::OpenAPI::toJsonValue(m_vulnerability_check));
    }
    return obj;
}

bool OAICheck::isAlwaysDeny() const {
    return m_always_deny;
}
void OAICheck::setAlwaysDeny(const bool &always_deny) {
    m_always_deny = always_deny;
    m_always_deny_isSet = true;
}

bool OAICheck::is_always_deny_Set() const{
    return m_always_deny_isSet;
}

bool OAICheck::is_always_deny_Valid() const{
    return m_always_deny_isValid;
}

QString OAICheck::getDisplayName() const {
    return m_display_name;
}
void OAICheck::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICheck::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICheck::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIImageAllowlist OAICheck::getImageAllowlist() const {
    return m_image_allowlist;
}
void OAICheck::setImageAllowlist(const OAIImageAllowlist &image_allowlist) {
    m_image_allowlist = image_allowlist;
    m_image_allowlist_isSet = true;
}

bool OAICheck::is_image_allowlist_Set() const{
    return m_image_allowlist_isSet;
}

bool OAICheck::is_image_allowlist_Valid() const{
    return m_image_allowlist_isValid;
}

OAIImageFreshnessCheck OAICheck::getImageFreshnessCheck() const {
    return m_image_freshness_check;
}
void OAICheck::setImageFreshnessCheck(const OAIImageFreshnessCheck &image_freshness_check) {
    m_image_freshness_check = image_freshness_check;
    m_image_freshness_check_isSet = true;
}

bool OAICheck::is_image_freshness_check_Set() const{
    return m_image_freshness_check_isSet;
}

bool OAICheck::is_image_freshness_check_Valid() const{
    return m_image_freshness_check_isValid;
}

OAISigstoreSignatureCheck OAICheck::getSigstoreSignatureCheck() const {
    return m_sigstore_signature_check;
}
void OAICheck::setSigstoreSignatureCheck(const OAISigstoreSignatureCheck &sigstore_signature_check) {
    m_sigstore_signature_check = sigstore_signature_check;
    m_sigstore_signature_check_isSet = true;
}

bool OAICheck::is_sigstore_signature_check_Set() const{
    return m_sigstore_signature_check_isSet;
}

bool OAICheck::is_sigstore_signature_check_Valid() const{
    return m_sigstore_signature_check_isValid;
}

OAISimpleSigningAttestationCheck OAICheck::getSimpleSigningAttestationCheck() const {
    return m_simple_signing_attestation_check;
}
void OAICheck::setSimpleSigningAttestationCheck(const OAISimpleSigningAttestationCheck &simple_signing_attestation_check) {
    m_simple_signing_attestation_check = simple_signing_attestation_check;
    m_simple_signing_attestation_check_isSet = true;
}

bool OAICheck::is_simple_signing_attestation_check_Set() const{
    return m_simple_signing_attestation_check_isSet;
}

bool OAICheck::is_simple_signing_attestation_check_Valid() const{
    return m_simple_signing_attestation_check_isValid;
}

OAISlsaCheck OAICheck::getSlsaCheck() const {
    return m_slsa_check;
}
void OAICheck::setSlsaCheck(const OAISlsaCheck &slsa_check) {
    m_slsa_check = slsa_check;
    m_slsa_check_isSet = true;
}

bool OAICheck::is_slsa_check_Set() const{
    return m_slsa_check_isSet;
}

bool OAICheck::is_slsa_check_Valid() const{
    return m_slsa_check_isValid;
}

OAITrustedDirectoryCheck OAICheck::getTrustedDirectoryCheck() const {
    return m_trusted_directory_check;
}
void OAICheck::setTrustedDirectoryCheck(const OAITrustedDirectoryCheck &trusted_directory_check) {
    m_trusted_directory_check = trusted_directory_check;
    m_trusted_directory_check_isSet = true;
}

bool OAICheck::is_trusted_directory_check_Set() const{
    return m_trusted_directory_check_isSet;
}

bool OAICheck::is_trusted_directory_check_Valid() const{
    return m_trusted_directory_check_isValid;
}

OAIVulnerabilityCheck OAICheck::getVulnerabilityCheck() const {
    return m_vulnerability_check;
}
void OAICheck::setVulnerabilityCheck(const OAIVulnerabilityCheck &vulnerability_check) {
    m_vulnerability_check = vulnerability_check;
    m_vulnerability_check_isSet = true;
}

bool OAICheck::is_vulnerability_check_Set() const{
    return m_vulnerability_check_isSet;
}

bool OAICheck::is_vulnerability_check_Valid() const{
    return m_vulnerability_check_isValid;
}

bool OAICheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_always_deny_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_allowlist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_freshness_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sigstore_signature_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_signing_attestation_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slsa_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_directory_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vulnerability_check.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
