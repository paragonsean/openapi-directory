/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerificationRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerificationRule::OAIVerificationRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerificationRule::OAIVerificationRule() {
    this->initializeModel();
}

OAIVerificationRule::~OAIVerificationRule() {}

void OAIVerificationRule::initializeModel() {

    m_attestation_source_isSet = false;
    m_attestation_source_isValid = false;

    m_config_based_build_required_isSet = false;
    m_config_based_build_required_isValid = false;

    m_trusted_builder_isSet = false;
    m_trusted_builder_isValid = false;

    m_trusted_source_repo_patterns_isSet = false;
    m_trusted_source_repo_patterns_isValid = false;
}

void OAIVerificationRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerificationRule::fromJsonObject(QJsonObject json) {

    m_attestation_source_isValid = ::OpenAPI::fromJsonValue(m_attestation_source, json[QString("attestationSource")]);
    m_attestation_source_isSet = !json[QString("attestationSource")].isNull() && m_attestation_source_isValid;

    m_config_based_build_required_isValid = ::OpenAPI::fromJsonValue(m_config_based_build_required, json[QString("configBasedBuildRequired")]);
    m_config_based_build_required_isSet = !json[QString("configBasedBuildRequired")].isNull() && m_config_based_build_required_isValid;

    m_trusted_builder_isValid = ::OpenAPI::fromJsonValue(m_trusted_builder, json[QString("trustedBuilder")]);
    m_trusted_builder_isSet = !json[QString("trustedBuilder")].isNull() && m_trusted_builder_isValid;

    m_trusted_source_repo_patterns_isValid = ::OpenAPI::fromJsonValue(m_trusted_source_repo_patterns, json[QString("trustedSourceRepoPatterns")]);
    m_trusted_source_repo_patterns_isSet = !json[QString("trustedSourceRepoPatterns")].isNull() && m_trusted_source_repo_patterns_isValid;
}

QString OAIVerificationRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerificationRule::asJsonObject() const {
    QJsonObject obj;
    if (m_attestation_source.isSet()) {
        obj.insert(QString("attestationSource"), ::OpenAPI::toJsonValue(m_attestation_source));
    }
    if (m_config_based_build_required_isSet) {
        obj.insert(QString("configBasedBuildRequired"), ::OpenAPI::toJsonValue(m_config_based_build_required));
    }
    if (m_trusted_builder_isSet) {
        obj.insert(QString("trustedBuilder"), ::OpenAPI::toJsonValue(m_trusted_builder));
    }
    if (m_trusted_source_repo_patterns.size() > 0) {
        obj.insert(QString("trustedSourceRepoPatterns"), ::OpenAPI::toJsonValue(m_trusted_source_repo_patterns));
    }
    return obj;
}

OAIAttestationSource OAIVerificationRule::getAttestationSource() const {
    return m_attestation_source;
}
void OAIVerificationRule::setAttestationSource(const OAIAttestationSource &attestation_source) {
    m_attestation_source = attestation_source;
    m_attestation_source_isSet = true;
}

bool OAIVerificationRule::is_attestation_source_Set() const{
    return m_attestation_source_isSet;
}

bool OAIVerificationRule::is_attestation_source_Valid() const{
    return m_attestation_source_isValid;
}

bool OAIVerificationRule::isConfigBasedBuildRequired() const {
    return m_config_based_build_required;
}
void OAIVerificationRule::setConfigBasedBuildRequired(const bool &config_based_build_required) {
    m_config_based_build_required = config_based_build_required;
    m_config_based_build_required_isSet = true;
}

bool OAIVerificationRule::is_config_based_build_required_Set() const{
    return m_config_based_build_required_isSet;
}

bool OAIVerificationRule::is_config_based_build_required_Valid() const{
    return m_config_based_build_required_isValid;
}

QString OAIVerificationRule::getTrustedBuilder() const {
    return m_trusted_builder;
}
void OAIVerificationRule::setTrustedBuilder(const QString &trusted_builder) {
    m_trusted_builder = trusted_builder;
    m_trusted_builder_isSet = true;
}

bool OAIVerificationRule::is_trusted_builder_Set() const{
    return m_trusted_builder_isSet;
}

bool OAIVerificationRule::is_trusted_builder_Valid() const{
    return m_trusted_builder_isValid;
}

QList<QString> OAIVerificationRule::getTrustedSourceRepoPatterns() const {
    return m_trusted_source_repo_patterns;
}
void OAIVerificationRule::setTrustedSourceRepoPatterns(const QList<QString> &trusted_source_repo_patterns) {
    m_trusted_source_repo_patterns = trusted_source_repo_patterns;
    m_trusted_source_repo_patterns_isSet = true;
}

bool OAIVerificationRule::is_trusted_source_repo_patterns_Set() const{
    return m_trusted_source_repo_patterns_isSet;
}

bool OAIVerificationRule::is_trusted_source_repo_patterns_Valid() const{
    return m_trusted_source_repo_patterns_isValid;
}

bool OAIVerificationRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attestation_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_based_build_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_builder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_source_repo_patterns.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerificationRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
