/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIValidateAttestationOccurrenceRequest.h
 *
 * Request message for ValidationHelperV1.ValidateAttestationOccurrence.
 */

#ifndef OAIValidateAttestationOccurrenceRequest_H
#define OAIValidateAttestationOccurrenceRequest_H

#include <QJsonObject>

#include "OAIAttestationOccurrence.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAttestationOccurrence;

class OAIValidateAttestationOccurrenceRequest : public OAIObject {
public:
    OAIValidateAttestationOccurrenceRequest();
    OAIValidateAttestationOccurrenceRequest(QString json);
    ~OAIValidateAttestationOccurrenceRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAttestationOccurrence getAttestation() const;
    void setAttestation(const OAIAttestationOccurrence &attestation);
    bool is_attestation_Set() const;
    bool is_attestation_Valid() const;

    QString getOccurrenceNote() const;
    void setOccurrenceNote(const QString &occurrence_note);
    bool is_occurrence_note_Set() const;
    bool is_occurrence_note_Valid() const;

    QString getOccurrenceResourceUri() const;
    void setOccurrenceResourceUri(const QString &occurrence_resource_uri);
    bool is_occurrence_resource_uri_Set() const;
    bool is_occurrence_resource_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAttestationOccurrence m_attestation;
    bool m_attestation_isSet;
    bool m_attestation_isValid;

    QString m_occurrence_note;
    bool m_occurrence_note_isSet;
    bool m_occurrence_note_isValid;

    QString m_occurrence_resource_uri;
    bool m_occurrence_resource_uri_isSet;
    bool m_occurrence_resource_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIValidateAttestationOccurrenceRequest)

#endif // OAIValidateAttestationOccurrenceRequest_H
