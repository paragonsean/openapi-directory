/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicy::OAIPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicy::OAIPolicy() {
    this->initializeModel();
}

OAIPolicy::~OAIPolicy() {}

void OAIPolicy::initializeModel() {

    m_admission_whitelist_patterns_isSet = false;
    m_admission_whitelist_patterns_isValid = false;

    m_cluster_admission_rules_isSet = false;
    m_cluster_admission_rules_isValid = false;

    m_default_admission_rule_isSet = false;
    m_default_admission_rule_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_global_policy_evaluation_mode_isSet = false;
    m_global_policy_evaluation_mode_isValid = false;

    m_istio_service_identity_admission_rules_isSet = false;
    m_istio_service_identity_admission_rules_isValid = false;

    m_kubernetes_namespace_admission_rules_isSet = false;
    m_kubernetes_namespace_admission_rules_isValid = false;

    m_kubernetes_service_account_admission_rules_isSet = false;
    m_kubernetes_service_account_admission_rules_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicy::fromJsonObject(QJsonObject json) {

    m_admission_whitelist_patterns_isValid = ::OpenAPI::fromJsonValue(m_admission_whitelist_patterns, json[QString("admissionWhitelistPatterns")]);
    m_admission_whitelist_patterns_isSet = !json[QString("admissionWhitelistPatterns")].isNull() && m_admission_whitelist_patterns_isValid;

    m_cluster_admission_rules_isValid = ::OpenAPI::fromJsonValue(m_cluster_admission_rules, json[QString("clusterAdmissionRules")]);
    m_cluster_admission_rules_isSet = !json[QString("clusterAdmissionRules")].isNull() && m_cluster_admission_rules_isValid;

    m_default_admission_rule_isValid = ::OpenAPI::fromJsonValue(m_default_admission_rule, json[QString("defaultAdmissionRule")]);
    m_default_admission_rule_isSet = !json[QString("defaultAdmissionRule")].isNull() && m_default_admission_rule_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_global_policy_evaluation_mode_isValid = ::OpenAPI::fromJsonValue(m_global_policy_evaluation_mode, json[QString("globalPolicyEvaluationMode")]);
    m_global_policy_evaluation_mode_isSet = !json[QString("globalPolicyEvaluationMode")].isNull() && m_global_policy_evaluation_mode_isValid;

    m_istio_service_identity_admission_rules_isValid = ::OpenAPI::fromJsonValue(m_istio_service_identity_admission_rules, json[QString("istioServiceIdentityAdmissionRules")]);
    m_istio_service_identity_admission_rules_isSet = !json[QString("istioServiceIdentityAdmissionRules")].isNull() && m_istio_service_identity_admission_rules_isValid;

    m_kubernetes_namespace_admission_rules_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_namespace_admission_rules, json[QString("kubernetesNamespaceAdmissionRules")]);
    m_kubernetes_namespace_admission_rules_isSet = !json[QString("kubernetesNamespaceAdmissionRules")].isNull() && m_kubernetes_namespace_admission_rules_isValid;

    m_kubernetes_service_account_admission_rules_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_service_account_admission_rules, json[QString("kubernetesServiceAccountAdmissionRules")]);
    m_kubernetes_service_account_admission_rules_isSet = !json[QString("kubernetesServiceAccountAdmissionRules")].isNull() && m_kubernetes_service_account_admission_rules_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_admission_whitelist_patterns.size() > 0) {
        obj.insert(QString("admissionWhitelistPatterns"), ::OpenAPI::toJsonValue(m_admission_whitelist_patterns));
    }
    if (m_cluster_admission_rules.size() > 0) {
        obj.insert(QString("clusterAdmissionRules"), ::OpenAPI::toJsonValue(m_cluster_admission_rules));
    }
    if (m_default_admission_rule.isSet()) {
        obj.insert(QString("defaultAdmissionRule"), ::OpenAPI::toJsonValue(m_default_admission_rule));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_global_policy_evaluation_mode_isSet) {
        obj.insert(QString("globalPolicyEvaluationMode"), ::OpenAPI::toJsonValue(m_global_policy_evaluation_mode));
    }
    if (m_istio_service_identity_admission_rules.size() > 0) {
        obj.insert(QString("istioServiceIdentityAdmissionRules"), ::OpenAPI::toJsonValue(m_istio_service_identity_admission_rules));
    }
    if (m_kubernetes_namespace_admission_rules.size() > 0) {
        obj.insert(QString("kubernetesNamespaceAdmissionRules"), ::OpenAPI::toJsonValue(m_kubernetes_namespace_admission_rules));
    }
    if (m_kubernetes_service_account_admission_rules.size() > 0) {
        obj.insert(QString("kubernetesServiceAccountAdmissionRules"), ::OpenAPI::toJsonValue(m_kubernetes_service_account_admission_rules));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<OAIAdmissionWhitelistPattern> OAIPolicy::getAdmissionWhitelistPatterns() const {
    return m_admission_whitelist_patterns;
}
void OAIPolicy::setAdmissionWhitelistPatterns(const QList<OAIAdmissionWhitelistPattern> &admission_whitelist_patterns) {
    m_admission_whitelist_patterns = admission_whitelist_patterns;
    m_admission_whitelist_patterns_isSet = true;
}

bool OAIPolicy::is_admission_whitelist_patterns_Set() const{
    return m_admission_whitelist_patterns_isSet;
}

bool OAIPolicy::is_admission_whitelist_patterns_Valid() const{
    return m_admission_whitelist_patterns_isValid;
}

QMap<QString, OAIAdmissionRule> OAIPolicy::getClusterAdmissionRules() const {
    return m_cluster_admission_rules;
}
void OAIPolicy::setClusterAdmissionRules(const QMap<QString, OAIAdmissionRule> &cluster_admission_rules) {
    m_cluster_admission_rules = cluster_admission_rules;
    m_cluster_admission_rules_isSet = true;
}

bool OAIPolicy::is_cluster_admission_rules_Set() const{
    return m_cluster_admission_rules_isSet;
}

bool OAIPolicy::is_cluster_admission_rules_Valid() const{
    return m_cluster_admission_rules_isValid;
}

OAIAdmissionRule OAIPolicy::getDefaultAdmissionRule() const {
    return m_default_admission_rule;
}
void OAIPolicy::setDefaultAdmissionRule(const OAIAdmissionRule &default_admission_rule) {
    m_default_admission_rule = default_admission_rule;
    m_default_admission_rule_isSet = true;
}

bool OAIPolicy::is_default_admission_rule_Set() const{
    return m_default_admission_rule_isSet;
}

bool OAIPolicy::is_default_admission_rule_Valid() const{
    return m_default_admission_rule_isValid;
}

QString OAIPolicy::getDescription() const {
    return m_description;
}
void OAIPolicy::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPolicy::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPolicy::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPolicy::getEtag() const {
    return m_etag;
}
void OAIPolicy::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIPolicy::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIPolicy::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIPolicy::getGlobalPolicyEvaluationMode() const {
    return m_global_policy_evaluation_mode;
}
void OAIPolicy::setGlobalPolicyEvaluationMode(const QString &global_policy_evaluation_mode) {
    m_global_policy_evaluation_mode = global_policy_evaluation_mode;
    m_global_policy_evaluation_mode_isSet = true;
}

bool OAIPolicy::is_global_policy_evaluation_mode_Set() const{
    return m_global_policy_evaluation_mode_isSet;
}

bool OAIPolicy::is_global_policy_evaluation_mode_Valid() const{
    return m_global_policy_evaluation_mode_isValid;
}

QMap<QString, OAIAdmissionRule> OAIPolicy::getIstioServiceIdentityAdmissionRules() const {
    return m_istio_service_identity_admission_rules;
}
void OAIPolicy::setIstioServiceIdentityAdmissionRules(const QMap<QString, OAIAdmissionRule> &istio_service_identity_admission_rules) {
    m_istio_service_identity_admission_rules = istio_service_identity_admission_rules;
    m_istio_service_identity_admission_rules_isSet = true;
}

bool OAIPolicy::is_istio_service_identity_admission_rules_Set() const{
    return m_istio_service_identity_admission_rules_isSet;
}

bool OAIPolicy::is_istio_service_identity_admission_rules_Valid() const{
    return m_istio_service_identity_admission_rules_isValid;
}

QMap<QString, OAIAdmissionRule> OAIPolicy::getKubernetesNamespaceAdmissionRules() const {
    return m_kubernetes_namespace_admission_rules;
}
void OAIPolicy::setKubernetesNamespaceAdmissionRules(const QMap<QString, OAIAdmissionRule> &kubernetes_namespace_admission_rules) {
    m_kubernetes_namespace_admission_rules = kubernetes_namespace_admission_rules;
    m_kubernetes_namespace_admission_rules_isSet = true;
}

bool OAIPolicy::is_kubernetes_namespace_admission_rules_Set() const{
    return m_kubernetes_namespace_admission_rules_isSet;
}

bool OAIPolicy::is_kubernetes_namespace_admission_rules_Valid() const{
    return m_kubernetes_namespace_admission_rules_isValid;
}

QMap<QString, OAIAdmissionRule> OAIPolicy::getKubernetesServiceAccountAdmissionRules() const {
    return m_kubernetes_service_account_admission_rules;
}
void OAIPolicy::setKubernetesServiceAccountAdmissionRules(const QMap<QString, OAIAdmissionRule> &kubernetes_service_account_admission_rules) {
    m_kubernetes_service_account_admission_rules = kubernetes_service_account_admission_rules;
    m_kubernetes_service_account_admission_rules_isSet = true;
}

bool OAIPolicy::is_kubernetes_service_account_admission_rules_Set() const{
    return m_kubernetes_service_account_admission_rules_isSet;
}

bool OAIPolicy::is_kubernetes_service_account_admission_rules_Valid() const{
    return m_kubernetes_service_account_admission_rules_isValid;
}

QString OAIPolicy::getName() const {
    return m_name;
}
void OAIPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPolicy::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPolicy::getUpdateTime() const {
    return m_update_time;
}
void OAIPolicy::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIPolicy::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIPolicy::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admission_whitelist_patterns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_admission_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_admission_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_policy_evaluation_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_istio_service_identity_admission_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_namespace_admission_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_service_account_admission_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
