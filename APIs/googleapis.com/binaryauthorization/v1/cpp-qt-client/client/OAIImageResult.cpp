/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageResult::OAIImageResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageResult::OAIImageResult() {
    this->initializeModel();
}

OAIImageResult::~OAIImageResult() {}

void OAIImageResult::initializeModel() {

    m_allowlist_result_isSet = false;
    m_allowlist_result_isValid = false;

    m_check_set_result_isSet = false;
    m_check_set_result_isValid = false;

    m_explanation_isSet = false;
    m_explanation_isValid = false;

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;

    m_verdict_isSet = false;
    m_verdict_isValid = false;
}

void OAIImageResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageResult::fromJsonObject(QJsonObject json) {

    m_allowlist_result_isValid = ::OpenAPI::fromJsonValue(m_allowlist_result, json[QString("allowlistResult")]);
    m_allowlist_result_isSet = !json[QString("allowlistResult")].isNull() && m_allowlist_result_isValid;

    m_check_set_result_isValid = ::OpenAPI::fromJsonValue(m_check_set_result, json[QString("checkSetResult")]);
    m_check_set_result_isSet = !json[QString("checkSetResult")].isNull() && m_check_set_result_isValid;

    m_explanation_isValid = ::OpenAPI::fromJsonValue(m_explanation, json[QString("explanation")]);
    m_explanation_isSet = !json[QString("explanation")].isNull() && m_explanation_isValid;

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageUri")]);
    m_image_uri_isSet = !json[QString("imageUri")].isNull() && m_image_uri_isValid;

    m_verdict_isValid = ::OpenAPI::fromJsonValue(m_verdict, json[QString("verdict")]);
    m_verdict_isSet = !json[QString("verdict")].isNull() && m_verdict_isValid;
}

QString OAIImageResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageResult::asJsonObject() const {
    QJsonObject obj;
    if (m_allowlist_result.isSet()) {
        obj.insert(QString("allowlistResult"), ::OpenAPI::toJsonValue(m_allowlist_result));
    }
    if (m_check_set_result.isSet()) {
        obj.insert(QString("checkSetResult"), ::OpenAPI::toJsonValue(m_check_set_result));
    }
    if (m_explanation_isSet) {
        obj.insert(QString("explanation"), ::OpenAPI::toJsonValue(m_explanation));
    }
    if (m_image_uri_isSet) {
        obj.insert(QString("imageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    if (m_verdict_isSet) {
        obj.insert(QString("verdict"), ::OpenAPI::toJsonValue(m_verdict));
    }
    return obj;
}

OAIAllowlistResult OAIImageResult::getAllowlistResult() const {
    return m_allowlist_result;
}
void OAIImageResult::setAllowlistResult(const OAIAllowlistResult &allowlist_result) {
    m_allowlist_result = allowlist_result;
    m_allowlist_result_isSet = true;
}

bool OAIImageResult::is_allowlist_result_Set() const{
    return m_allowlist_result_isSet;
}

bool OAIImageResult::is_allowlist_result_Valid() const{
    return m_allowlist_result_isValid;
}

OAICheckSetResult OAIImageResult::getCheckSetResult() const {
    return m_check_set_result;
}
void OAIImageResult::setCheckSetResult(const OAICheckSetResult &check_set_result) {
    m_check_set_result = check_set_result;
    m_check_set_result_isSet = true;
}

bool OAIImageResult::is_check_set_result_Set() const{
    return m_check_set_result_isSet;
}

bool OAIImageResult::is_check_set_result_Valid() const{
    return m_check_set_result_isValid;
}

QString OAIImageResult::getExplanation() const {
    return m_explanation;
}
void OAIImageResult::setExplanation(const QString &explanation) {
    m_explanation = explanation;
    m_explanation_isSet = true;
}

bool OAIImageResult::is_explanation_Set() const{
    return m_explanation_isSet;
}

bool OAIImageResult::is_explanation_Valid() const{
    return m_explanation_isValid;
}

QString OAIImageResult::getImageUri() const {
    return m_image_uri;
}
void OAIImageResult::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIImageResult::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIImageResult::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

QString OAIImageResult::getVerdict() const {
    return m_verdict;
}
void OAIImageResult::setVerdict(const QString &verdict) {
    m_verdict = verdict;
    m_verdict_isSet = true;
}

bool OAIImageResult::is_verdict_Set() const{
    return m_verdict_isSet;
}

bool OAIImageResult::is_verdict_Valid() const{
    return m_verdict_isValid;
}

bool OAIImageResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowlist_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_set_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verdict_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
