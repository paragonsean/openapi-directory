/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimpleSigningAttestationCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimpleSigningAttestationCheck::OAISimpleSigningAttestationCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimpleSigningAttestationCheck::OAISimpleSigningAttestationCheck() {
    this->initializeModel();
}

OAISimpleSigningAttestationCheck::~OAISimpleSigningAttestationCheck() {}

void OAISimpleSigningAttestationCheck::initializeModel() {

    m_attestation_authenticators_isSet = false;
    m_attestation_authenticators_isValid = false;

    m_container_analysis_attestation_projects_isSet = false;
    m_container_analysis_attestation_projects_isValid = false;
}

void OAISimpleSigningAttestationCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimpleSigningAttestationCheck::fromJsonObject(QJsonObject json) {

    m_attestation_authenticators_isValid = ::OpenAPI::fromJsonValue(m_attestation_authenticators, json[QString("attestationAuthenticators")]);
    m_attestation_authenticators_isSet = !json[QString("attestationAuthenticators")].isNull() && m_attestation_authenticators_isValid;

    m_container_analysis_attestation_projects_isValid = ::OpenAPI::fromJsonValue(m_container_analysis_attestation_projects, json[QString("containerAnalysisAttestationProjects")]);
    m_container_analysis_attestation_projects_isSet = !json[QString("containerAnalysisAttestationProjects")].isNull() && m_container_analysis_attestation_projects_isValid;
}

QString OAISimpleSigningAttestationCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimpleSigningAttestationCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_attestation_authenticators.size() > 0) {
        obj.insert(QString("attestationAuthenticators"), ::OpenAPI::toJsonValue(m_attestation_authenticators));
    }
    if (m_container_analysis_attestation_projects.size() > 0) {
        obj.insert(QString("containerAnalysisAttestationProjects"), ::OpenAPI::toJsonValue(m_container_analysis_attestation_projects));
    }
    return obj;
}

QList<OAIAttestationAuthenticator> OAISimpleSigningAttestationCheck::getAttestationAuthenticators() const {
    return m_attestation_authenticators;
}
void OAISimpleSigningAttestationCheck::setAttestationAuthenticators(const QList<OAIAttestationAuthenticator> &attestation_authenticators) {
    m_attestation_authenticators = attestation_authenticators;
    m_attestation_authenticators_isSet = true;
}

bool OAISimpleSigningAttestationCheck::is_attestation_authenticators_Set() const{
    return m_attestation_authenticators_isSet;
}

bool OAISimpleSigningAttestationCheck::is_attestation_authenticators_Valid() const{
    return m_attestation_authenticators_isValid;
}

QList<QString> OAISimpleSigningAttestationCheck::getContainerAnalysisAttestationProjects() const {
    return m_container_analysis_attestation_projects;
}
void OAISimpleSigningAttestationCheck::setContainerAnalysisAttestationProjects(const QList<QString> &container_analysis_attestation_projects) {
    m_container_analysis_attestation_projects = container_analysis_attestation_projects;
    m_container_analysis_attestation_projects_isSet = true;
}

bool OAISimpleSigningAttestationCheck::is_container_analysis_attestation_projects_Set() const{
    return m_container_analysis_attestation_projects_isSet;
}

bool OAISimpleSigningAttestationCheck::is_container_analysis_attestation_projects_Valid() const{
    return m_container_analysis_attestation_projects_isValid;
}

bool OAISimpleSigningAttestationCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attestation_authenticators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_analysis_attestation_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimpleSigningAttestationCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
