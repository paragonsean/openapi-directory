/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIamPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIamPolicy::OAIIamPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIamPolicy::OAIIamPolicy() {
    this->initializeModel();
}

OAIIamPolicy::~OAIIamPolicy() {}

void OAIIamPolicy::initializeModel() {

    m_bindings_isSet = false;
    m_bindings_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIIamPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIamPolicy::fromJsonObject(QJsonObject json) {

    m_bindings_isValid = ::OpenAPI::fromJsonValue(m_bindings, json[QString("bindings")]);
    m_bindings_isSet = !json[QString("bindings")].isNull() && m_bindings_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIIamPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIamPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_bindings.size() > 0) {
        obj.insert(QString("bindings"), ::OpenAPI::toJsonValue(m_bindings));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIBinding> OAIIamPolicy::getBindings() const {
    return m_bindings;
}
void OAIIamPolicy::setBindings(const QList<OAIBinding> &bindings) {
    m_bindings = bindings;
    m_bindings_isSet = true;
}

bool OAIIamPolicy::is_bindings_Set() const{
    return m_bindings_isSet;
}

bool OAIIamPolicy::is_bindings_Valid() const{
    return m_bindings_isValid;
}

QByteArray OAIIamPolicy::getEtag() const {
    return m_etag;
}
void OAIIamPolicy::setEtag(const QByteArray &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIIamPolicy::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIIamPolicy::is_etag_Valid() const{
    return m_etag_isValid;
}

qint32 OAIIamPolicy::getVersion() const {
    return m_version;
}
void OAIIamPolicy::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIIamPolicy::is_version_Set() const{
    return m_version_isSet;
}

bool OAIIamPolicy::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIIamPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bindings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIamPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
