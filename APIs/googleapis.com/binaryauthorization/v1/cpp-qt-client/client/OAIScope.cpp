/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScope::OAIScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScope::OAIScope() {
    this->initializeModel();
}

OAIScope::~OAIScope() {}

void OAIScope::initializeModel() {

    m_kubernetes_namespace_isSet = false;
    m_kubernetes_namespace_isValid = false;

    m_kubernetes_service_account_isSet = false;
    m_kubernetes_service_account_isValid = false;
}

void OAIScope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScope::fromJsonObject(QJsonObject json) {

    m_kubernetes_namespace_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_namespace, json[QString("kubernetesNamespace")]);
    m_kubernetes_namespace_isSet = !json[QString("kubernetesNamespace")].isNull() && m_kubernetes_namespace_isValid;

    m_kubernetes_service_account_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_service_account, json[QString("kubernetesServiceAccount")]);
    m_kubernetes_service_account_isSet = !json[QString("kubernetesServiceAccount")].isNull() && m_kubernetes_service_account_isValid;
}

QString OAIScope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScope::asJsonObject() const {
    QJsonObject obj;
    if (m_kubernetes_namespace_isSet) {
        obj.insert(QString("kubernetesNamespace"), ::OpenAPI::toJsonValue(m_kubernetes_namespace));
    }
    if (m_kubernetes_service_account_isSet) {
        obj.insert(QString("kubernetesServiceAccount"), ::OpenAPI::toJsonValue(m_kubernetes_service_account));
    }
    return obj;
}

QString OAIScope::getKubernetesNamespace() const {
    return m_kubernetes_namespace;
}
void OAIScope::setKubernetesNamespace(const QString &kubernetes_namespace) {
    m_kubernetes_namespace = kubernetes_namespace;
    m_kubernetes_namespace_isSet = true;
}

bool OAIScope::is_kubernetes_namespace_Set() const{
    return m_kubernetes_namespace_isSet;
}

bool OAIScope::is_kubernetes_namespace_Valid() const{
    return m_kubernetes_namespace_isValid;
}

QString OAIScope::getKubernetesServiceAccount() const {
    return m_kubernetes_service_account;
}
void OAIScope::setKubernetesServiceAccount(const QString &kubernetes_service_account) {
    m_kubernetes_service_account = kubernetes_service_account;
    m_kubernetes_service_account_isSet = true;
}

bool OAIScope::is_kubernetes_service_account_Set() const{
    return m_kubernetes_service_account_isSet;
}

bool OAIScope::is_kubernetes_service_account_Valid() const{
    return m_kubernetes_service_account_isValid;
}

bool OAIScope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kubernetes_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
