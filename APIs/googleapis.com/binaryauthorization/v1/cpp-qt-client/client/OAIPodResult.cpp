/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodResult::OAIPodResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodResult::OAIPodResult() {
    this->initializeModel();
}

OAIPodResult::~OAIPodResult() {}

void OAIPodResult::initializeModel() {

    m_image_results_isSet = false;
    m_image_results_isValid = false;

    m_kubernetes_namespace_isSet = false;
    m_kubernetes_namespace_isValid = false;

    m_kubernetes_service_account_isSet = false;
    m_kubernetes_service_account_isValid = false;

    m_pod_name_isSet = false;
    m_pod_name_isValid = false;

    m_verdict_isSet = false;
    m_verdict_isValid = false;
}

void OAIPodResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodResult::fromJsonObject(QJsonObject json) {

    m_image_results_isValid = ::OpenAPI::fromJsonValue(m_image_results, json[QString("imageResults")]);
    m_image_results_isSet = !json[QString("imageResults")].isNull() && m_image_results_isValid;

    m_kubernetes_namespace_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_namespace, json[QString("kubernetesNamespace")]);
    m_kubernetes_namespace_isSet = !json[QString("kubernetesNamespace")].isNull() && m_kubernetes_namespace_isValid;

    m_kubernetes_service_account_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_service_account, json[QString("kubernetesServiceAccount")]);
    m_kubernetes_service_account_isSet = !json[QString("kubernetesServiceAccount")].isNull() && m_kubernetes_service_account_isValid;

    m_pod_name_isValid = ::OpenAPI::fromJsonValue(m_pod_name, json[QString("podName")]);
    m_pod_name_isSet = !json[QString("podName")].isNull() && m_pod_name_isValid;

    m_verdict_isValid = ::OpenAPI::fromJsonValue(m_verdict, json[QString("verdict")]);
    m_verdict_isSet = !json[QString("verdict")].isNull() && m_verdict_isValid;
}

QString OAIPodResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodResult::asJsonObject() const {
    QJsonObject obj;
    if (m_image_results.size() > 0) {
        obj.insert(QString("imageResults"), ::OpenAPI::toJsonValue(m_image_results));
    }
    if (m_kubernetes_namespace_isSet) {
        obj.insert(QString("kubernetesNamespace"), ::OpenAPI::toJsonValue(m_kubernetes_namespace));
    }
    if (m_kubernetes_service_account_isSet) {
        obj.insert(QString("kubernetesServiceAccount"), ::OpenAPI::toJsonValue(m_kubernetes_service_account));
    }
    if (m_pod_name_isSet) {
        obj.insert(QString("podName"), ::OpenAPI::toJsonValue(m_pod_name));
    }
    if (m_verdict_isSet) {
        obj.insert(QString("verdict"), ::OpenAPI::toJsonValue(m_verdict));
    }
    return obj;
}

QList<OAIImageResult> OAIPodResult::getImageResults() const {
    return m_image_results;
}
void OAIPodResult::setImageResults(const QList<OAIImageResult> &image_results) {
    m_image_results = image_results;
    m_image_results_isSet = true;
}

bool OAIPodResult::is_image_results_Set() const{
    return m_image_results_isSet;
}

bool OAIPodResult::is_image_results_Valid() const{
    return m_image_results_isValid;
}

QString OAIPodResult::getKubernetesNamespace() const {
    return m_kubernetes_namespace;
}
void OAIPodResult::setKubernetesNamespace(const QString &kubernetes_namespace) {
    m_kubernetes_namespace = kubernetes_namespace;
    m_kubernetes_namespace_isSet = true;
}

bool OAIPodResult::is_kubernetes_namespace_Set() const{
    return m_kubernetes_namespace_isSet;
}

bool OAIPodResult::is_kubernetes_namespace_Valid() const{
    return m_kubernetes_namespace_isValid;
}

QString OAIPodResult::getKubernetesServiceAccount() const {
    return m_kubernetes_service_account;
}
void OAIPodResult::setKubernetesServiceAccount(const QString &kubernetes_service_account) {
    m_kubernetes_service_account = kubernetes_service_account;
    m_kubernetes_service_account_isSet = true;
}

bool OAIPodResult::is_kubernetes_service_account_Set() const{
    return m_kubernetes_service_account_isSet;
}

bool OAIPodResult::is_kubernetes_service_account_Valid() const{
    return m_kubernetes_service_account_isValid;
}

QString OAIPodResult::getPodName() const {
    return m_pod_name;
}
void OAIPodResult::setPodName(const QString &pod_name) {
    m_pod_name = pod_name;
    m_pod_name_isSet = true;
}

bool OAIPodResult::is_pod_name_Set() const{
    return m_pod_name_isSet;
}

bool OAIPodResult::is_pod_name_Valid() const{
    return m_pod_name_isValid;
}

QString OAIPodResult::getVerdict() const {
    return m_verdict;
}
void OAIPodResult::setVerdict(const QString &verdict) {
    m_verdict = verdict;
    m_verdict_isSet = true;
}

bool OAIPodResult::is_verdict_Set() const{
    return m_verdict_isSet;
}

bool OAIPodResult::is_verdict_Valid() const{
    return m_verdict_isValid;
}

bool OAIPodResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verdict_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
