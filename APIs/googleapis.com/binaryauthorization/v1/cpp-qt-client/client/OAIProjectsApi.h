/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttestor.h"
#include "OAIEvaluateGkePolicyRequest.h"
#include "OAIEvaluateGkePolicyResponse.h"
#include "OAIIamPolicy.h"
#include "OAIListAttestorsResponse.h"
#include "OAIListPlatformPoliciesResponse.h"
#include "OAIObject.h"
#include "OAIPlatformPolicy.h"
#include "OAISetIamPolicyRequest.h"
#include "OAITestIamPermissionsRequest.h"
#include "OAITestIamPermissionsResponse.h"
#include "OAIValidateAttestationOccurrenceRequest.h"
#include "OAIValidateAttestationOccurrenceResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  attestor_id QString [optional]
    * @param[in]  oai_attestor OAIAttestor [optional]
    */
    virtual void binaryauthorization_projects_attestors_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attestor_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAttestor> &oai_attestor = ::OpenAPI::OptionalParam<OAIAttestor>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void binaryauthorization_projects_attestors_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  attestor QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_validate_attestation_occurrence_request OAIValidateAttestationOccurrenceRequest [optional]
    */
    virtual void binaryauthorization_projects_attestors_validateAttestationOccurrence(const QString &attestor, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIValidateAttestationOccurrenceRequest> &oai_validate_attestation_occurrence_request = ::OpenAPI::OptionalParam<OAIValidateAttestationOccurrenceRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_evaluate_gke_policy_request OAIEvaluateGkePolicyRequest [optional]
    */
    virtual void binaryauthorization_projects_platforms_gke_policies_evaluate(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEvaluateGkePolicyRequest> &oai_evaluate_gke_policy_request = ::OpenAPI::OptionalParam<OAIEvaluateGkePolicyRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  policy_id QString [optional]
    * @param[in]  oai_platform_policy OAIPlatformPolicy [optional]
    */
    virtual void binaryauthorization_projects_platforms_policies_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &policy_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPlatformPolicy> &oai_platform_policy = ::OpenAPI::OptionalParam<OAIPlatformPolicy>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void binaryauthorization_projects_platforms_policies_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void binaryauthorization_projects_platforms_policies_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_platform_policy OAIPlatformPolicy [optional]
    */
    virtual void binaryauthorization_projects_platforms_policies_replacePlatformPolicy(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPlatformPolicy> &oai_platform_policy = ::OpenAPI::OptionalParam<OAIPlatformPolicy>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  options_requested_policy_version qint32 [optional]
    */
    virtual void binaryauthorization_projects_policy_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &options_requested_policy_version = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_iam_policy_request OAISetIamPolicyRequest [optional]
    */
    virtual void binaryauthorization_projects_policy_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIamPolicyRequest> &oai_set_iam_policy_request = ::OpenAPI::OptionalParam<OAISetIamPolicyRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_test_iam_permissions_request OAITestIamPermissionsRequest [optional]
    */
    virtual void binaryauthorization_projects_policy_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest> &oai_test_iam_permissions_request = ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void binaryauthorization_projects_attestors_createCallback(OAIHttpRequestWorker *worker);
    void binaryauthorization_projects_attestors_listCallback(OAIHttpRequestWorker *worker);
    void binaryauthorization_projects_attestors_validateAttestationOccurrenceCallback(OAIHttpRequestWorker *worker);
    void binaryauthorization_projects_platforms_gke_policies_evaluateCallback(OAIHttpRequestWorker *worker);
    void binaryauthorization_projects_platforms_policies_createCallback(OAIHttpRequestWorker *worker);
    void binaryauthorization_projects_platforms_policies_deleteCallback(OAIHttpRequestWorker *worker);
    void binaryauthorization_projects_platforms_policies_listCallback(OAIHttpRequestWorker *worker);
    void binaryauthorization_projects_platforms_policies_replacePlatformPolicyCallback(OAIHttpRequestWorker *worker);
    void binaryauthorization_projects_policy_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void binaryauthorization_projects_policy_setIamPolicyCallback(OAIHttpRequestWorker *worker);
    void binaryauthorization_projects_policy_testIamPermissionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void binaryauthorization_projects_attestors_createSignal(OAIAttestor summary);
    void binaryauthorization_projects_attestors_listSignal(OAIListAttestorsResponse summary);
    void binaryauthorization_projects_attestors_validateAttestationOccurrenceSignal(OAIValidateAttestationOccurrenceResponse summary);
    void binaryauthorization_projects_platforms_gke_policies_evaluateSignal(OAIEvaluateGkePolicyResponse summary);
    void binaryauthorization_projects_platforms_policies_createSignal(OAIPlatformPolicy summary);
    void binaryauthorization_projects_platforms_policies_deleteSignal(OAIObject summary);
    void binaryauthorization_projects_platforms_policies_listSignal(OAIListPlatformPoliciesResponse summary);
    void binaryauthorization_projects_platforms_policies_replacePlatformPolicySignal(OAIPlatformPolicy summary);
    void binaryauthorization_projects_policy_getIamPolicySignal(OAIIamPolicy summary);
    void binaryauthorization_projects_policy_setIamPolicySignal(OAIIamPolicy summary);
    void binaryauthorization_projects_policy_testIamPermissionsSignal(OAITestIamPermissionsResponse summary);


    void binaryauthorization_projects_attestors_createSignalFull(OAIHttpRequestWorker *worker, OAIAttestor summary);
    void binaryauthorization_projects_attestors_listSignalFull(OAIHttpRequestWorker *worker, OAIListAttestorsResponse summary);
    void binaryauthorization_projects_attestors_validateAttestationOccurrenceSignalFull(OAIHttpRequestWorker *worker, OAIValidateAttestationOccurrenceResponse summary);
    void binaryauthorization_projects_platforms_gke_policies_evaluateSignalFull(OAIHttpRequestWorker *worker, OAIEvaluateGkePolicyResponse summary);
    void binaryauthorization_projects_platforms_policies_createSignalFull(OAIHttpRequestWorker *worker, OAIPlatformPolicy summary);
    void binaryauthorization_projects_platforms_policies_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void binaryauthorization_projects_platforms_policies_listSignalFull(OAIHttpRequestWorker *worker, OAIListPlatformPoliciesResponse summary);
    void binaryauthorization_projects_platforms_policies_replacePlatformPolicySignalFull(OAIHttpRequestWorker *worker, OAIPlatformPolicy summary);
    void binaryauthorization_projects_policy_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIIamPolicy summary);
    void binaryauthorization_projects_policy_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIIamPolicy summary);
    void binaryauthorization_projects_policy_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAITestIamPermissionsResponse summary);

    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_attestors_createSignalError() instead")
    void binaryauthorization_projects_attestors_createSignalE(OAIAttestor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_attestors_createSignalError(OAIAttestor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_attestors_listSignalError() instead")
    void binaryauthorization_projects_attestors_listSignalE(OAIListAttestorsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_attestors_listSignalError(OAIListAttestorsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_attestors_validateAttestationOccurrenceSignalError() instead")
    void binaryauthorization_projects_attestors_validateAttestationOccurrenceSignalE(OAIValidateAttestationOccurrenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_attestors_validateAttestationOccurrenceSignalError(OAIValidateAttestationOccurrenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_platforms_gke_policies_evaluateSignalError() instead")
    void binaryauthorization_projects_platforms_gke_policies_evaluateSignalE(OAIEvaluateGkePolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_platforms_gke_policies_evaluateSignalError(OAIEvaluateGkePolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_platforms_policies_createSignalError() instead")
    void binaryauthorization_projects_platforms_policies_createSignalE(OAIPlatformPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_platforms_policies_createSignalError(OAIPlatformPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_platforms_policies_deleteSignalError() instead")
    void binaryauthorization_projects_platforms_policies_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_platforms_policies_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_platforms_policies_listSignalError() instead")
    void binaryauthorization_projects_platforms_policies_listSignalE(OAIListPlatformPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_platforms_policies_listSignalError(OAIListPlatformPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_platforms_policies_replacePlatformPolicySignalError() instead")
    void binaryauthorization_projects_platforms_policies_replacePlatformPolicySignalE(OAIPlatformPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_platforms_policies_replacePlatformPolicySignalError(OAIPlatformPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_policy_getIamPolicySignalError() instead")
    void binaryauthorization_projects_policy_getIamPolicySignalE(OAIIamPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_policy_getIamPolicySignalError(OAIIamPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_policy_setIamPolicySignalError() instead")
    void binaryauthorization_projects_policy_setIamPolicySignalE(OAIIamPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_policy_setIamPolicySignalError(OAIIamPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_policy_testIamPermissionsSignalError() instead")
    void binaryauthorization_projects_policy_testIamPermissionsSignalE(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_policy_testIamPermissionsSignalError(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_attestors_createSignalErrorFull() instead")
    void binaryauthorization_projects_attestors_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_attestors_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_attestors_listSignalErrorFull() instead")
    void binaryauthorization_projects_attestors_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_attestors_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_attestors_validateAttestationOccurrenceSignalErrorFull() instead")
    void binaryauthorization_projects_attestors_validateAttestationOccurrenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_attestors_validateAttestationOccurrenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_platforms_gke_policies_evaluateSignalErrorFull() instead")
    void binaryauthorization_projects_platforms_gke_policies_evaluateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_platforms_gke_policies_evaluateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_platforms_policies_createSignalErrorFull() instead")
    void binaryauthorization_projects_platforms_policies_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_platforms_policies_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_platforms_policies_deleteSignalErrorFull() instead")
    void binaryauthorization_projects_platforms_policies_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_platforms_policies_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_platforms_policies_listSignalErrorFull() instead")
    void binaryauthorization_projects_platforms_policies_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_platforms_policies_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_platforms_policies_replacePlatformPolicySignalErrorFull() instead")
    void binaryauthorization_projects_platforms_policies_replacePlatformPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_platforms_policies_replacePlatformPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_policy_getIamPolicySignalErrorFull() instead")
    void binaryauthorization_projects_policy_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_policy_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_policy_setIamPolicySignalErrorFull() instead")
    void binaryauthorization_projects_policy_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_policy_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use binaryauthorization_projects_policy_testIamPermissionsSignalErrorFull() instead")
    void binaryauthorization_projects_policy_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void binaryauthorization_projects_policy_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
