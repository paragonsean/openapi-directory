/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttestationSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttestationSource::OAIAttestationSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttestationSource::OAIAttestationSource() {
    this->initializeModel();
}

OAIAttestationSource::~OAIAttestationSource() {}

void OAIAttestationSource::initializeModel() {

    m_container_analysis_attestation_projects_isSet = false;
    m_container_analysis_attestation_projects_isValid = false;
}

void OAIAttestationSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttestationSource::fromJsonObject(QJsonObject json) {

    m_container_analysis_attestation_projects_isValid = ::OpenAPI::fromJsonValue(m_container_analysis_attestation_projects, json[QString("containerAnalysisAttestationProjects")]);
    m_container_analysis_attestation_projects_isSet = !json[QString("containerAnalysisAttestationProjects")].isNull() && m_container_analysis_attestation_projects_isValid;
}

QString OAIAttestationSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttestationSource::asJsonObject() const {
    QJsonObject obj;
    if (m_container_analysis_attestation_projects.size() > 0) {
        obj.insert(QString("containerAnalysisAttestationProjects"), ::OpenAPI::toJsonValue(m_container_analysis_attestation_projects));
    }
    return obj;
}

QList<QString> OAIAttestationSource::getContainerAnalysisAttestationProjects() const {
    return m_container_analysis_attestation_projects;
}
void OAIAttestationSource::setContainerAnalysisAttestationProjects(const QList<QString> &container_analysis_attestation_projects) {
    m_container_analysis_attestation_projects = container_analysis_attestation_projects;
    m_container_analysis_attestation_projects_isSet = true;
}

bool OAIAttestationSource::is_container_analysis_attestation_projects_Set() const{
    return m_container_analysis_attestation_projects_isSet;
}

bool OAIAttestationSource::is_container_analysis_attestation_projects_Valid() const{
    return m_container_analysis_attestation_projects_isValid;
}

bool OAIAttestationSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_analysis_attestation_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttestationSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
