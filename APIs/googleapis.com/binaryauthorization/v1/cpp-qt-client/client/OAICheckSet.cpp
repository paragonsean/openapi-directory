/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckSet::OAICheckSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckSet::OAICheckSet() {
    this->initializeModel();
}

OAICheckSet::~OAICheckSet() {}

void OAICheckSet::initializeModel() {

    m_checks_isSet = false;
    m_checks_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_image_allowlist_isSet = false;
    m_image_allowlist_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAICheckSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckSet::fromJsonObject(QJsonObject json) {

    m_checks_isValid = ::OpenAPI::fromJsonValue(m_checks, json[QString("checks")]);
    m_checks_isSet = !json[QString("checks")].isNull() && m_checks_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_image_allowlist_isValid = ::OpenAPI::fromJsonValue(m_image_allowlist, json[QString("imageAllowlist")]);
    m_image_allowlist_isSet = !json[QString("imageAllowlist")].isNull() && m_image_allowlist_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAICheckSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckSet::asJsonObject() const {
    QJsonObject obj;
    if (m_checks.size() > 0) {
        obj.insert(QString("checks"), ::OpenAPI::toJsonValue(m_checks));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_image_allowlist.isSet()) {
        obj.insert(QString("imageAllowlist"), ::OpenAPI::toJsonValue(m_image_allowlist));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QList<OAICheck> OAICheckSet::getChecks() const {
    return m_checks;
}
void OAICheckSet::setChecks(const QList<OAICheck> &checks) {
    m_checks = checks;
    m_checks_isSet = true;
}

bool OAICheckSet::is_checks_Set() const{
    return m_checks_isSet;
}

bool OAICheckSet::is_checks_Valid() const{
    return m_checks_isValid;
}

QString OAICheckSet::getDisplayName() const {
    return m_display_name;
}
void OAICheckSet::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICheckSet::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICheckSet::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIImageAllowlist OAICheckSet::getImageAllowlist() const {
    return m_image_allowlist;
}
void OAICheckSet::setImageAllowlist(const OAIImageAllowlist &image_allowlist) {
    m_image_allowlist = image_allowlist;
    m_image_allowlist_isSet = true;
}

bool OAICheckSet::is_image_allowlist_Set() const{
    return m_image_allowlist_isSet;
}

bool OAICheckSet::is_image_allowlist_Valid() const{
    return m_image_allowlist_isValid;
}

OAIScope OAICheckSet::getScope() const {
    return m_scope;
}
void OAICheckSet::setScope(const OAIScope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAICheckSet::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAICheckSet::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAICheckSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_allowlist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
