/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISigstoreSignatureCheck.h
 *
 * A Sigstore signature check, which verifies the Sigstore signature associated with an image.
 */

#ifndef OAISigstoreSignatureCheck_H
#define OAISigstoreSignatureCheck_H

#include <QJsonObject>

#include "OAISigstoreAuthority.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISigstoreAuthority;

class OAISigstoreSignatureCheck : public OAIObject {
public:
    OAISigstoreSignatureCheck();
    OAISigstoreSignatureCheck(QString json);
    ~OAISigstoreSignatureCheck() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAISigstoreAuthority> getSigstoreAuthorities() const;
    void setSigstoreAuthorities(const QList<OAISigstoreAuthority> &sigstore_authorities);
    bool is_sigstore_authorities_Set() const;
    bool is_sigstore_authorities_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAISigstoreAuthority> m_sigstore_authorities;
    bool m_sigstore_authorities_isSet;
    bool m_sigstore_authorities_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISigstoreSignatureCheck)

#endif // OAISigstoreSignatureCheck_H
