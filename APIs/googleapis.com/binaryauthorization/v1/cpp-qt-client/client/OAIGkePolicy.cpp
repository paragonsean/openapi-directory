/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGkePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGkePolicy::OAIGkePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGkePolicy::OAIGkePolicy() {
    this->initializeModel();
}

OAIGkePolicy::~OAIGkePolicy() {}

void OAIGkePolicy::initializeModel() {

    m_check_sets_isSet = false;
    m_check_sets_isValid = false;

    m_image_allowlist_isSet = false;
    m_image_allowlist_isValid = false;
}

void OAIGkePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGkePolicy::fromJsonObject(QJsonObject json) {

    m_check_sets_isValid = ::OpenAPI::fromJsonValue(m_check_sets, json[QString("checkSets")]);
    m_check_sets_isSet = !json[QString("checkSets")].isNull() && m_check_sets_isValid;

    m_image_allowlist_isValid = ::OpenAPI::fromJsonValue(m_image_allowlist, json[QString("imageAllowlist")]);
    m_image_allowlist_isSet = !json[QString("imageAllowlist")].isNull() && m_image_allowlist_isValid;
}

QString OAIGkePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGkePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_check_sets.size() > 0) {
        obj.insert(QString("checkSets"), ::OpenAPI::toJsonValue(m_check_sets));
    }
    if (m_image_allowlist.isSet()) {
        obj.insert(QString("imageAllowlist"), ::OpenAPI::toJsonValue(m_image_allowlist));
    }
    return obj;
}

QList<OAICheckSet> OAIGkePolicy::getCheckSets() const {
    return m_check_sets;
}
void OAIGkePolicy::setCheckSets(const QList<OAICheckSet> &check_sets) {
    m_check_sets = check_sets;
    m_check_sets_isSet = true;
}

bool OAIGkePolicy::is_check_sets_Set() const{
    return m_check_sets_isSet;
}

bool OAIGkePolicy::is_check_sets_Valid() const{
    return m_check_sets_isValid;
}

OAIImageAllowlist OAIGkePolicy::getImageAllowlist() const {
    return m_image_allowlist;
}
void OAIGkePolicy::setImageAllowlist(const OAIImageAllowlist &image_allowlist) {
    m_image_allowlist = image_allowlist;
    m_image_allowlist_isSet = true;
}

bool OAIGkePolicy::is_image_allowlist_Set() const{
    return m_image_allowlist_isSet;
}

bool OAIGkePolicy::is_image_allowlist_Valid() const{
    return m_image_allowlist_isValid;
}

bool OAIGkePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_allowlist.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGkePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
