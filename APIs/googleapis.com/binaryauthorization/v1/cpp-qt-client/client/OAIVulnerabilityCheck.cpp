/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVulnerabilityCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVulnerabilityCheck::OAIVulnerabilityCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVulnerabilityCheck::OAIVulnerabilityCheck() {
    this->initializeModel();
}

OAIVulnerabilityCheck::~OAIVulnerabilityCheck() {}

void OAIVulnerabilityCheck::initializeModel() {

    m_allowed_cves_isSet = false;
    m_allowed_cves_isValid = false;

    m_blocked_cves_isSet = false;
    m_blocked_cves_isValid = false;

    m_container_analysis_vulnerability_projects_isSet = false;
    m_container_analysis_vulnerability_projects_isValid = false;

    m_maximum_fixable_severity_isSet = false;
    m_maximum_fixable_severity_isValid = false;

    m_maximum_unfixable_severity_isSet = false;
    m_maximum_unfixable_severity_isValid = false;
}

void OAIVulnerabilityCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVulnerabilityCheck::fromJsonObject(QJsonObject json) {

    m_allowed_cves_isValid = ::OpenAPI::fromJsonValue(m_allowed_cves, json[QString("allowedCves")]);
    m_allowed_cves_isSet = !json[QString("allowedCves")].isNull() && m_allowed_cves_isValid;

    m_blocked_cves_isValid = ::OpenAPI::fromJsonValue(m_blocked_cves, json[QString("blockedCves")]);
    m_blocked_cves_isSet = !json[QString("blockedCves")].isNull() && m_blocked_cves_isValid;

    m_container_analysis_vulnerability_projects_isValid = ::OpenAPI::fromJsonValue(m_container_analysis_vulnerability_projects, json[QString("containerAnalysisVulnerabilityProjects")]);
    m_container_analysis_vulnerability_projects_isSet = !json[QString("containerAnalysisVulnerabilityProjects")].isNull() && m_container_analysis_vulnerability_projects_isValid;

    m_maximum_fixable_severity_isValid = ::OpenAPI::fromJsonValue(m_maximum_fixable_severity, json[QString("maximumFixableSeverity")]);
    m_maximum_fixable_severity_isSet = !json[QString("maximumFixableSeverity")].isNull() && m_maximum_fixable_severity_isValid;

    m_maximum_unfixable_severity_isValid = ::OpenAPI::fromJsonValue(m_maximum_unfixable_severity, json[QString("maximumUnfixableSeverity")]);
    m_maximum_unfixable_severity_isSet = !json[QString("maximumUnfixableSeverity")].isNull() && m_maximum_unfixable_severity_isValid;
}

QString OAIVulnerabilityCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVulnerabilityCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_cves.size() > 0) {
        obj.insert(QString("allowedCves"), ::OpenAPI::toJsonValue(m_allowed_cves));
    }
    if (m_blocked_cves.size() > 0) {
        obj.insert(QString("blockedCves"), ::OpenAPI::toJsonValue(m_blocked_cves));
    }
    if (m_container_analysis_vulnerability_projects.size() > 0) {
        obj.insert(QString("containerAnalysisVulnerabilityProjects"), ::OpenAPI::toJsonValue(m_container_analysis_vulnerability_projects));
    }
    if (m_maximum_fixable_severity_isSet) {
        obj.insert(QString("maximumFixableSeverity"), ::OpenAPI::toJsonValue(m_maximum_fixable_severity));
    }
    if (m_maximum_unfixable_severity_isSet) {
        obj.insert(QString("maximumUnfixableSeverity"), ::OpenAPI::toJsonValue(m_maximum_unfixable_severity));
    }
    return obj;
}

QList<QString> OAIVulnerabilityCheck::getAllowedCves() const {
    return m_allowed_cves;
}
void OAIVulnerabilityCheck::setAllowedCves(const QList<QString> &allowed_cves) {
    m_allowed_cves = allowed_cves;
    m_allowed_cves_isSet = true;
}

bool OAIVulnerabilityCheck::is_allowed_cves_Set() const{
    return m_allowed_cves_isSet;
}

bool OAIVulnerabilityCheck::is_allowed_cves_Valid() const{
    return m_allowed_cves_isValid;
}

QList<QString> OAIVulnerabilityCheck::getBlockedCves() const {
    return m_blocked_cves;
}
void OAIVulnerabilityCheck::setBlockedCves(const QList<QString> &blocked_cves) {
    m_blocked_cves = blocked_cves;
    m_blocked_cves_isSet = true;
}

bool OAIVulnerabilityCheck::is_blocked_cves_Set() const{
    return m_blocked_cves_isSet;
}

bool OAIVulnerabilityCheck::is_blocked_cves_Valid() const{
    return m_blocked_cves_isValid;
}

QList<QString> OAIVulnerabilityCheck::getContainerAnalysisVulnerabilityProjects() const {
    return m_container_analysis_vulnerability_projects;
}
void OAIVulnerabilityCheck::setContainerAnalysisVulnerabilityProjects(const QList<QString> &container_analysis_vulnerability_projects) {
    m_container_analysis_vulnerability_projects = container_analysis_vulnerability_projects;
    m_container_analysis_vulnerability_projects_isSet = true;
}

bool OAIVulnerabilityCheck::is_container_analysis_vulnerability_projects_Set() const{
    return m_container_analysis_vulnerability_projects_isSet;
}

bool OAIVulnerabilityCheck::is_container_analysis_vulnerability_projects_Valid() const{
    return m_container_analysis_vulnerability_projects_isValid;
}

QString OAIVulnerabilityCheck::getMaximumFixableSeverity() const {
    return m_maximum_fixable_severity;
}
void OAIVulnerabilityCheck::setMaximumFixableSeverity(const QString &maximum_fixable_severity) {
    m_maximum_fixable_severity = maximum_fixable_severity;
    m_maximum_fixable_severity_isSet = true;
}

bool OAIVulnerabilityCheck::is_maximum_fixable_severity_Set() const{
    return m_maximum_fixable_severity_isSet;
}

bool OAIVulnerabilityCheck::is_maximum_fixable_severity_Valid() const{
    return m_maximum_fixable_severity_isValid;
}

QString OAIVulnerabilityCheck::getMaximumUnfixableSeverity() const {
    return m_maximum_unfixable_severity;
}
void OAIVulnerabilityCheck::setMaximumUnfixableSeverity(const QString &maximum_unfixable_severity) {
    m_maximum_unfixable_severity = maximum_unfixable_severity;
    m_maximum_unfixable_severity_isSet = true;
}

bool OAIVulnerabilityCheck::is_maximum_unfixable_severity_Set() const{
    return m_maximum_unfixable_severity_isSet;
}

bool OAIVulnerabilityCheck::is_maximum_unfixable_severity_Valid() const{
    return m_maximum_unfixable_severity_isValid;
}

bool OAIVulnerabilityCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_cves.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_cves.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_analysis_vulnerability_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_fixable_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_unfixable_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVulnerabilityCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
