/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdmissionRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdmissionRule::OAIAdmissionRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdmissionRule::OAIAdmissionRule() {
    this->initializeModel();
}

OAIAdmissionRule::~OAIAdmissionRule() {}

void OAIAdmissionRule::initializeModel() {

    m_enforcement_mode_isSet = false;
    m_enforcement_mode_isValid = false;

    m_evaluation_mode_isSet = false;
    m_evaluation_mode_isValid = false;

    m_require_attestations_by_isSet = false;
    m_require_attestations_by_isValid = false;
}

void OAIAdmissionRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdmissionRule::fromJsonObject(QJsonObject json) {

    m_enforcement_mode_isValid = ::OpenAPI::fromJsonValue(m_enforcement_mode, json[QString("enforcementMode")]);
    m_enforcement_mode_isSet = !json[QString("enforcementMode")].isNull() && m_enforcement_mode_isValid;

    m_evaluation_mode_isValid = ::OpenAPI::fromJsonValue(m_evaluation_mode, json[QString("evaluationMode")]);
    m_evaluation_mode_isSet = !json[QString("evaluationMode")].isNull() && m_evaluation_mode_isValid;

    m_require_attestations_by_isValid = ::OpenAPI::fromJsonValue(m_require_attestations_by, json[QString("requireAttestationsBy")]);
    m_require_attestations_by_isSet = !json[QString("requireAttestationsBy")].isNull() && m_require_attestations_by_isValid;
}

QString OAIAdmissionRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdmissionRule::asJsonObject() const {
    QJsonObject obj;
    if (m_enforcement_mode_isSet) {
        obj.insert(QString("enforcementMode"), ::OpenAPI::toJsonValue(m_enforcement_mode));
    }
    if (m_evaluation_mode_isSet) {
        obj.insert(QString("evaluationMode"), ::OpenAPI::toJsonValue(m_evaluation_mode));
    }
    if (m_require_attestations_by.size() > 0) {
        obj.insert(QString("requireAttestationsBy"), ::OpenAPI::toJsonValue(m_require_attestations_by));
    }
    return obj;
}

QString OAIAdmissionRule::getEnforcementMode() const {
    return m_enforcement_mode;
}
void OAIAdmissionRule::setEnforcementMode(const QString &enforcement_mode) {
    m_enforcement_mode = enforcement_mode;
    m_enforcement_mode_isSet = true;
}

bool OAIAdmissionRule::is_enforcement_mode_Set() const{
    return m_enforcement_mode_isSet;
}

bool OAIAdmissionRule::is_enforcement_mode_Valid() const{
    return m_enforcement_mode_isValid;
}

QString OAIAdmissionRule::getEvaluationMode() const {
    return m_evaluation_mode;
}
void OAIAdmissionRule::setEvaluationMode(const QString &evaluation_mode) {
    m_evaluation_mode = evaluation_mode;
    m_evaluation_mode_isSet = true;
}

bool OAIAdmissionRule::is_evaluation_mode_Set() const{
    return m_evaluation_mode_isSet;
}

bool OAIAdmissionRule::is_evaluation_mode_Valid() const{
    return m_evaluation_mode_isValid;
}

QList<QString> OAIAdmissionRule::getRequireAttestationsBy() const {
    return m_require_attestations_by;
}
void OAIAdmissionRule::setRequireAttestationsBy(const QList<QString> &require_attestations_by) {
    m_require_attestations_by = require_attestations_by;
    m_require_attestations_by_isSet = true;
}

bool OAIAdmissionRule::is_require_attestations_by_Set() const{
    return m_require_attestations_by_isSet;
}

bool OAIAdmissionRule::is_require_attestations_by_Valid() const{
    return m_require_attestations_by_isValid;
}

bool OAIAdmissionRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enforcement_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_attestations_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdmissionRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
