/*
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttestationAuthenticator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Require a signed [DSSE](https://github.com/secure-systems-lab/dsse) attestation with type SimpleSigning.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:36.269071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimpleSigningAttestationCheck {
  public static final String SERIALIZED_NAME_ATTESTATION_AUTHENTICATORS = "attestationAuthenticators";
  @SerializedName(SERIALIZED_NAME_ATTESTATION_AUTHENTICATORS)
  private List<AttestationAuthenticator> attestationAuthenticators = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINER_ANALYSIS_ATTESTATION_PROJECTS = "containerAnalysisAttestationProjects";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ANALYSIS_ATTESTATION_PROJECTS)
  private List<String> containerAnalysisAttestationProjects = new ArrayList<>();

  public SimpleSigningAttestationCheck() {
  }

  public SimpleSigningAttestationCheck attestationAuthenticators(List<AttestationAuthenticator> attestationAuthenticators) {
    this.attestationAuthenticators = attestationAuthenticators;
    return this;
  }

  public SimpleSigningAttestationCheck addAttestationAuthenticatorsItem(AttestationAuthenticator attestationAuthenticatorsItem) {
    if (this.attestationAuthenticators == null) {
      this.attestationAuthenticators = new ArrayList<>();
    }
    this.attestationAuthenticators.add(attestationAuthenticatorsItem);
    return this;
  }

  /**
   * Required. The authenticators required by this check to verify an attestation. Typically this is one or more PKIX public keys for signature verification. Only one authenticator needs to consider an attestation verified in order for an attestation to be considered fully authenticated. In otherwords, this list of authenticators is an \&quot;OR\&quot; of the authenticator results. At least one authenticator is required.
   * @return attestationAuthenticators
   */
  @javax.annotation.Nullable
  public List<AttestationAuthenticator> getAttestationAuthenticators() {
    return attestationAuthenticators;
  }

  public void setAttestationAuthenticators(List<AttestationAuthenticator> attestationAuthenticators) {
    this.attestationAuthenticators = attestationAuthenticators;
  }


  public SimpleSigningAttestationCheck containerAnalysisAttestationProjects(List<String> containerAnalysisAttestationProjects) {
    this.containerAnalysisAttestationProjects = containerAnalysisAttestationProjects;
    return this;
  }

  public SimpleSigningAttestationCheck addContainerAnalysisAttestationProjectsItem(String containerAnalysisAttestationProjectsItem) {
    if (this.containerAnalysisAttestationProjects == null) {
      this.containerAnalysisAttestationProjects = new ArrayList<>();
    }
    this.containerAnalysisAttestationProjects.add(containerAnalysisAttestationProjectsItem);
    return this;
  }

  /**
   * Optional. The projects where attestations are stored as Container Analysis Occurrences, in the format &#x60;projects/[PROJECT_ID]&#x60;. Only one attestation needs to successfully verify an image for this check to pass, so a single verified attestation found in any of &#x60;container_analysis_attestation_projects&#x60; is sufficient for the check to pass. When fetching Occurrences from Container Analysis, only &#x60;AttestationOccurrence&#x60; kinds are considered. In the future, additional Occurrence kinds may be added to the query. Maximum number of &#x60;container_analysis_attestation_projects&#x60; allowed in each &#x60;SimpleSigningAttestationCheck&#x60; is 10.
   * @return containerAnalysisAttestationProjects
   */
  @javax.annotation.Nullable
  public List<String> getContainerAnalysisAttestationProjects() {
    return containerAnalysisAttestationProjects;
  }

  public void setContainerAnalysisAttestationProjects(List<String> containerAnalysisAttestationProjects) {
    this.containerAnalysisAttestationProjects = containerAnalysisAttestationProjects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleSigningAttestationCheck simpleSigningAttestationCheck = (SimpleSigningAttestationCheck) o;
    return Objects.equals(this.attestationAuthenticators, simpleSigningAttestationCheck.attestationAuthenticators) &&
        Objects.equals(this.containerAnalysisAttestationProjects, simpleSigningAttestationCheck.containerAnalysisAttestationProjects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attestationAuthenticators, containerAnalysisAttestationProjects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleSigningAttestationCheck {\n");
    sb.append("    attestationAuthenticators: ").append(toIndentedString(attestationAuthenticators)).append("\n");
    sb.append("    containerAnalysisAttestationProjects: ").append(toIndentedString(containerAnalysisAttestationProjects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attestationAuthenticators");
    openapiFields.add("containerAnalysisAttestationProjects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimpleSigningAttestationCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimpleSigningAttestationCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimpleSigningAttestationCheck is not found in the empty JSON string", SimpleSigningAttestationCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimpleSigningAttestationCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimpleSigningAttestationCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attestationAuthenticators") != null && !jsonObj.get("attestationAuthenticators").isJsonNull()) {
        JsonArray jsonArrayattestationAuthenticators = jsonObj.getAsJsonArray("attestationAuthenticators");
        if (jsonArrayattestationAuthenticators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attestationAuthenticators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attestationAuthenticators` to be an array in the JSON string but got `%s`", jsonObj.get("attestationAuthenticators").toString()));
          }

          // validate the optional field `attestationAuthenticators` (array)
          for (int i = 0; i < jsonArrayattestationAuthenticators.size(); i++) {
            AttestationAuthenticator.validateJsonElement(jsonArrayattestationAuthenticators.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("containerAnalysisAttestationProjects") != null && !jsonObj.get("containerAnalysisAttestationProjects").isJsonNull() && !jsonObj.get("containerAnalysisAttestationProjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerAnalysisAttestationProjects` to be an array in the JSON string but got `%s`", jsonObj.get("containerAnalysisAttestationProjects").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimpleSigningAttestationCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimpleSigningAttestationCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimpleSigningAttestationCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimpleSigningAttestationCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<SimpleSigningAttestationCheck>() {
           @Override
           public void write(JsonWriter out, SimpleSigningAttestationCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimpleSigningAttestationCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimpleSigningAttestationCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimpleSigningAttestationCheck
   * @throws IOException if the JSON string is invalid with respect to SimpleSigningAttestationCheck
   */
  public static SimpleSigningAttestationCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimpleSigningAttestationCheck.class);
  }

  /**
   * Convert an instance of SimpleSigningAttestationCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

