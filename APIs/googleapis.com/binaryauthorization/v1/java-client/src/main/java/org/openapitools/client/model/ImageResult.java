/*
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AllowlistResult;
import org.openapitools.client.model.CheckSetResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result of evaluating one image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:36.269071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageResult {
  public static final String SERIALIZED_NAME_ALLOWLIST_RESULT = "allowlistResult";
  @SerializedName(SERIALIZED_NAME_ALLOWLIST_RESULT)
  private AllowlistResult allowlistResult;

  public static final String SERIALIZED_NAME_CHECK_SET_RESULT = "checkSetResult";
  @SerializedName(SERIALIZED_NAME_CHECK_SET_RESULT)
  private CheckSetResult checkSetResult;

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private String explanation;

  public static final String SERIALIZED_NAME_IMAGE_URI = "imageUri";
  @SerializedName(SERIALIZED_NAME_IMAGE_URI)
  private String imageUri;

  /**
   * The result of evaluating this image.
   */
  @JsonAdapter(VerdictEnum.Adapter.class)
  public enum VerdictEnum {
    IMAGE_VERDICT_UNSPECIFIED("IMAGE_VERDICT_UNSPECIFIED"),
    
    CONFORMANT("CONFORMANT"),
    
    NON_CONFORMANT("NON_CONFORMANT"),
    
    ERROR("ERROR");

    private String value;

    VerdictEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerdictEnum fromValue(String value) {
      for (VerdictEnum b : VerdictEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerdictEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerdictEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerdictEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerdictEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VerdictEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERDICT = "verdict";
  @SerializedName(SERIALIZED_NAME_VERDICT)
  private VerdictEnum verdict;

  public ImageResult() {
  }

  public ImageResult allowlistResult(AllowlistResult allowlistResult) {
    this.allowlistResult = allowlistResult;
    return this;
  }

  /**
   * Get allowlistResult
   * @return allowlistResult
   */
  @javax.annotation.Nullable
  public AllowlistResult getAllowlistResult() {
    return allowlistResult;
  }

  public void setAllowlistResult(AllowlistResult allowlistResult) {
    this.allowlistResult = allowlistResult;
  }


  public ImageResult checkSetResult(CheckSetResult checkSetResult) {
    this.checkSetResult = checkSetResult;
    return this;
  }

  /**
   * Get checkSetResult
   * @return checkSetResult
   */
  @javax.annotation.Nullable
  public CheckSetResult getCheckSetResult() {
    return checkSetResult;
  }

  public void setCheckSetResult(CheckSetResult checkSetResult) {
    this.checkSetResult = checkSetResult;
  }


  public ImageResult explanation(String explanation) {
    this.explanation = explanation;
    return this;
  }

  /**
   * Explanation of this image result. Only populated if no check sets were evaluated.
   * @return explanation
   */
  @javax.annotation.Nullable
  public String getExplanation() {
    return explanation;
  }

  public void setExplanation(String explanation) {
    this.explanation = explanation;
  }


  public ImageResult imageUri(String imageUri) {
    this.imageUri = imageUri;
    return this;
  }

  /**
   * Image URI from the request.
   * @return imageUri
   */
  @javax.annotation.Nullable
  public String getImageUri() {
    return imageUri;
  }

  public void setImageUri(String imageUri) {
    this.imageUri = imageUri;
  }


  public ImageResult verdict(VerdictEnum verdict) {
    this.verdict = verdict;
    return this;
  }

  /**
   * The result of evaluating this image.
   * @return verdict
   */
  @javax.annotation.Nullable
  public VerdictEnum getVerdict() {
    return verdict;
  }

  public void setVerdict(VerdictEnum verdict) {
    this.verdict = verdict;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageResult imageResult = (ImageResult) o;
    return Objects.equals(this.allowlistResult, imageResult.allowlistResult) &&
        Objects.equals(this.checkSetResult, imageResult.checkSetResult) &&
        Objects.equals(this.explanation, imageResult.explanation) &&
        Objects.equals(this.imageUri, imageResult.imageUri) &&
        Objects.equals(this.verdict, imageResult.verdict);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowlistResult, checkSetResult, explanation, imageUri, verdict);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageResult {\n");
    sb.append("    allowlistResult: ").append(toIndentedString(allowlistResult)).append("\n");
    sb.append("    checkSetResult: ").append(toIndentedString(checkSetResult)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    imageUri: ").append(toIndentedString(imageUri)).append("\n");
    sb.append("    verdict: ").append(toIndentedString(verdict)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowlistResult");
    openapiFields.add("checkSetResult");
    openapiFields.add("explanation");
    openapiFields.add("imageUri");
    openapiFields.add("verdict");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageResult is not found in the empty JSON string", ImageResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allowlistResult`
      if (jsonObj.get("allowlistResult") != null && !jsonObj.get("allowlistResult").isJsonNull()) {
        AllowlistResult.validateJsonElement(jsonObj.get("allowlistResult"));
      }
      // validate the optional field `checkSetResult`
      if (jsonObj.get("checkSetResult") != null && !jsonObj.get("checkSetResult").isJsonNull()) {
        CheckSetResult.validateJsonElement(jsonObj.get("checkSetResult"));
      }
      if ((jsonObj.get("explanation") != null && !jsonObj.get("explanation").isJsonNull()) && !jsonObj.get("explanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `explanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explanation").toString()));
      }
      if ((jsonObj.get("imageUri") != null && !jsonObj.get("imageUri").isJsonNull()) && !jsonObj.get("imageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUri").toString()));
      }
      if ((jsonObj.get("verdict") != null && !jsonObj.get("verdict").isJsonNull()) && !jsonObj.get("verdict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verdict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verdict").toString()));
      }
      // validate the optional field `verdict`
      if (jsonObj.get("verdict") != null && !jsonObj.get("verdict").isJsonNull()) {
        VerdictEnum.validateJsonElement(jsonObj.get("verdict"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageResult>() {
           @Override
           public void write(JsonWriter out, ImageResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageResult
   * @throws IOException if the JSON string is invalid with respect to ImageResult
   */
  public static ImageResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageResult.class);
  }

  /**
   * Convert an instance of ImageResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

