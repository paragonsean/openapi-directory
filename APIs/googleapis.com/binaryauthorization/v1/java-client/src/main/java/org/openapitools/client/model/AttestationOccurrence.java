/*
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Jwt;
import org.openapitools.client.model.Signature;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Occurrence that represents a single \&quot;attestation\&quot;. The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:36.269071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttestationOccurrence {
  public static final String SERIALIZED_NAME_JWTS = "jwts";
  @SerializedName(SERIALIZED_NAME_JWTS)
  private List<Jwt> jwts = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERIALIZED_PAYLOAD = "serializedPayload";
  @SerializedName(SERIALIZED_NAME_SERIALIZED_PAYLOAD)
  private byte[] serializedPayload;

  public static final String SERIALIZED_NAME_SIGNATURES = "signatures";
  @SerializedName(SERIALIZED_NAME_SIGNATURES)
  private List<Signature> signatures = new ArrayList<>();

  public AttestationOccurrence() {
  }

  public AttestationOccurrence jwts(List<Jwt> jwts) {
    this.jwts = jwts;
    return this;
  }

  public AttestationOccurrence addJwtsItem(Jwt jwtsItem) {
    if (this.jwts == null) {
      this.jwts = new ArrayList<>();
    }
    this.jwts.add(jwtsItem);
    return this;
  }

  /**
   * One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the &#x60;serialized_payload&#x60; field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the &#x60;serialized_payload&#x60; SHOULD be left empty. Each JWT SHOULD encode a claim specific to the &#x60;resource_uri&#x60; of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
   * @return jwts
   */
  @javax.annotation.Nullable
  public List<Jwt> getJwts() {
    return jwts;
  }

  public void setJwts(List<Jwt> jwts) {
    this.jwts = jwts;
  }


  public AttestationOccurrence serializedPayload(byte[] serializedPayload) {
    this.serializedPayload = serializedPayload;
    return this;
  }

  /**
   * Required. The serialized payload that is verified by one or more &#x60;signatures&#x60;.
   * @return serializedPayload
   */
  @javax.annotation.Nullable
  public byte[] getSerializedPayload() {
    return serializedPayload;
  }

  public void setSerializedPayload(byte[] serializedPayload) {
    this.serializedPayload = serializedPayload;
  }


  public AttestationOccurrence signatures(List<Signature> signatures) {
    this.signatures = signatures;
    return this;
  }

  public AttestationOccurrence addSignaturesItem(Signature signaturesItem) {
    if (this.signatures == null) {
      this.signatures = new ArrayList<>();
    }
    this.signatures.add(signaturesItem);
    return this;
  }

  /**
   * One or more signatures over &#x60;serialized_payload&#x60;. Verifier implementations should consider this attestation message verified if at least one &#x60;signature&#x60; verifies &#x60;serialized_payload&#x60;. See &#x60;Signature&#x60; in common.proto for more details on signature structure and verification.
   * @return signatures
   */
  @javax.annotation.Nullable
  public List<Signature> getSignatures() {
    return signatures;
  }

  public void setSignatures(List<Signature> signatures) {
    this.signatures = signatures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttestationOccurrence attestationOccurrence = (AttestationOccurrence) o;
    return Objects.equals(this.jwts, attestationOccurrence.jwts) &&
        Arrays.equals(this.serializedPayload, attestationOccurrence.serializedPayload) &&
        Objects.equals(this.signatures, attestationOccurrence.signatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jwts, Arrays.hashCode(serializedPayload), signatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttestationOccurrence {\n");
    sb.append("    jwts: ").append(toIndentedString(jwts)).append("\n");
    sb.append("    serializedPayload: ").append(toIndentedString(serializedPayload)).append("\n");
    sb.append("    signatures: ").append(toIndentedString(signatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jwts");
    openapiFields.add("serializedPayload");
    openapiFields.add("signatures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttestationOccurrence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttestationOccurrence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttestationOccurrence is not found in the empty JSON string", AttestationOccurrence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttestationOccurrence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttestationOccurrence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("jwts") != null && !jsonObj.get("jwts").isJsonNull()) {
        JsonArray jsonArrayjwts = jsonObj.getAsJsonArray("jwts");
        if (jsonArrayjwts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jwts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jwts` to be an array in the JSON string but got `%s`", jsonObj.get("jwts").toString()));
          }

          // validate the optional field `jwts` (array)
          for (int i = 0; i < jsonArrayjwts.size(); i++) {
            Jwt.validateJsonElement(jsonArrayjwts.get(i));
          };
        }
      }
      if (jsonObj.get("signatures") != null && !jsonObj.get("signatures").isJsonNull()) {
        JsonArray jsonArraysignatures = jsonObj.getAsJsonArray("signatures");
        if (jsonArraysignatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("signatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `signatures` to be an array in the JSON string but got `%s`", jsonObj.get("signatures").toString()));
          }

          // validate the optional field `signatures` (array)
          for (int i = 0; i < jsonArraysignatures.size(); i++) {
            Signature.validateJsonElement(jsonArraysignatures.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttestationOccurrence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttestationOccurrence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttestationOccurrence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttestationOccurrence.class));

       return (TypeAdapter<T>) new TypeAdapter<AttestationOccurrence>() {
           @Override
           public void write(JsonWriter out, AttestationOccurrence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttestationOccurrence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttestationOccurrence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttestationOccurrence
   * @throws IOException if the JSON string is invalid with respect to AttestationOccurrence
   */
  public static AttestationOccurrence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttestationOccurrence.class);
  }

  /**
   * Convert an instance of AttestationOccurrence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

