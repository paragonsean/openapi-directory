/*
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CheckSet;
import org.openapitools.client.model.ImageAllowlist;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Binary Authorization policy for a GKE cluster. This is one type of policy that can occur as a &#x60;PlatformPolicy&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:36.269071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GkePolicy {
  public static final String SERIALIZED_NAME_CHECK_SETS = "checkSets";
  @SerializedName(SERIALIZED_NAME_CHECK_SETS)
  private List<CheckSet> checkSets = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_ALLOWLIST = "imageAllowlist";
  @SerializedName(SERIALIZED_NAME_IMAGE_ALLOWLIST)
  private ImageAllowlist imageAllowlist;

  public GkePolicy() {
  }

  public GkePolicy checkSets(List<CheckSet> checkSets) {
    this.checkSets = checkSets;
    return this;
  }

  public GkePolicy addCheckSetsItem(CheckSet checkSetsItem) {
    if (this.checkSets == null) {
      this.checkSets = new ArrayList<>();
    }
    this.checkSets.add(checkSetsItem);
    return this;
  }

  /**
   * Optional. The &#x60;CheckSet&#x60; objects to apply, scoped by namespace or namespace and service account. Exactly one &#x60;CheckSet&#x60; will be evaluated for a given Pod (unless the list is empty, in which case the behavior is \&quot;always allow\&quot;). If multiple &#x60;CheckSet&#x60; objects have scopes that match the namespace and service account of the Pod being evaluated, only the &#x60;CheckSet&#x60; with the MOST SPECIFIC scope will match. &#x60;CheckSet&#x60; objects must be listed in order of decreasing specificity, i.e. if a scope matches a given service account (which must include the namespace), it must come before a &#x60;CheckSet&#x60; with a scope matching just that namespace. This property is enforced by server-side validation. The purpose of this restriction is to ensure that if more than one &#x60;CheckSet&#x60; matches a given Pod, the &#x60;CheckSet&#x60; that will be evaluated will always be the first in the list to match (because if any other matches, it must be less specific). If &#x60;check_sets&#x60; is empty, the default behavior is to allow all images. If &#x60;check_sets&#x60; is non-empty, the last &#x60;check_sets&#x60; entry must always be a &#x60;CheckSet&#x60; with no scope set, i.e. a catchall to handle any situation not caught by the preceding &#x60;CheckSet&#x60; objects.
   * @return checkSets
   */
  @javax.annotation.Nullable
  public List<CheckSet> getCheckSets() {
    return checkSets;
  }

  public void setCheckSets(List<CheckSet> checkSets) {
    this.checkSets = checkSets;
  }


  public GkePolicy imageAllowlist(ImageAllowlist imageAllowlist) {
    this.imageAllowlist = imageAllowlist;
    return this;
  }

  /**
   * Get imageAllowlist
   * @return imageAllowlist
   */
  @javax.annotation.Nullable
  public ImageAllowlist getImageAllowlist() {
    return imageAllowlist;
  }

  public void setImageAllowlist(ImageAllowlist imageAllowlist) {
    this.imageAllowlist = imageAllowlist;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GkePolicy gkePolicy = (GkePolicy) o;
    return Objects.equals(this.checkSets, gkePolicy.checkSets) &&
        Objects.equals(this.imageAllowlist, gkePolicy.imageAllowlist);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkSets, imageAllowlist);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GkePolicy {\n");
    sb.append("    checkSets: ").append(toIndentedString(checkSets)).append("\n");
    sb.append("    imageAllowlist: ").append(toIndentedString(imageAllowlist)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkSets");
    openapiFields.add("imageAllowlist");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GkePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GkePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GkePolicy is not found in the empty JSON string", GkePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GkePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GkePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("checkSets") != null && !jsonObj.get("checkSets").isJsonNull()) {
        JsonArray jsonArraycheckSets = jsonObj.getAsJsonArray("checkSets");
        if (jsonArraycheckSets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("checkSets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `checkSets` to be an array in the JSON string but got `%s`", jsonObj.get("checkSets").toString()));
          }

          // validate the optional field `checkSets` (array)
          for (int i = 0; i < jsonArraycheckSets.size(); i++) {
            CheckSet.validateJsonElement(jsonArraycheckSets.get(i));
          };
        }
      }
      // validate the optional field `imageAllowlist`
      if (jsonObj.get("imageAllowlist") != null && !jsonObj.get("imageAllowlist").isJsonNull()) {
        ImageAllowlist.validateJsonElement(jsonObj.get("imageAllowlist"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GkePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GkePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GkePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GkePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<GkePolicy>() {
           @Override
           public void write(JsonWriter out, GkePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GkePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GkePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GkePolicy
   * @throws IOException if the JSON string is invalid with respect to GkePolicy
   */
  public static GkePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GkePolicy.class);
  }

  /**
   * Convert an instance of GkePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

