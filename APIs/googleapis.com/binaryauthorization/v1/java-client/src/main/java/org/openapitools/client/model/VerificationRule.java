/*
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttestationSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies verification rules for evaluating the SLSA attestations including: which builders to trust, where to fetch the SLSA attestations generated by those builders, and other builder-specific evaluation rules such as which source repositories are trusted. An image is considered verified by the rule if any of the fetched SLSA attestations is verified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:36.269071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerificationRule {
  public static final String SERIALIZED_NAME_ATTESTATION_SOURCE = "attestationSource";
  @SerializedName(SERIALIZED_NAME_ATTESTATION_SOURCE)
  private AttestationSource attestationSource;

  public static final String SERIALIZED_NAME_CONFIG_BASED_BUILD_REQUIRED = "configBasedBuildRequired";
  @SerializedName(SERIALIZED_NAME_CONFIG_BASED_BUILD_REQUIRED)
  private Boolean configBasedBuildRequired;

  /**
   * Each verification rule is used for evaluation against provenances generated by a specific builder (group). For some of the builders, such as the Google Cloud Build, users don&#39;t need to explicitly specify their roots of trust in the policy since the evaluation service can automatically fetch them based on the builder (group).
   */
  @JsonAdapter(TrustedBuilderEnum.Adapter.class)
  public enum TrustedBuilderEnum {
    BUILDER_UNSPECIFIED("BUILDER_UNSPECIFIED"),
    
    GOOGLE_CLOUD_BUILD("GOOGLE_CLOUD_BUILD");

    private String value;

    TrustedBuilderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrustedBuilderEnum fromValue(String value) {
      for (TrustedBuilderEnum b : TrustedBuilderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrustedBuilderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrustedBuilderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrustedBuilderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrustedBuilderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrustedBuilderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRUSTED_BUILDER = "trustedBuilder";
  @SerializedName(SERIALIZED_NAME_TRUSTED_BUILDER)
  private TrustedBuilderEnum trustedBuilder;

  public static final String SERIALIZED_NAME_TRUSTED_SOURCE_REPO_PATTERNS = "trustedSourceRepoPatterns";
  @SerializedName(SERIALIZED_NAME_TRUSTED_SOURCE_REPO_PATTERNS)
  private List<String> trustedSourceRepoPatterns = new ArrayList<>();

  public VerificationRule() {
  }

  public VerificationRule attestationSource(AttestationSource attestationSource) {
    this.attestationSource = attestationSource;
    return this;
  }

  /**
   * Get attestationSource
   * @return attestationSource
   */
  @javax.annotation.Nullable
  public AttestationSource getAttestationSource() {
    return attestationSource;
  }

  public void setAttestationSource(AttestationSource attestationSource) {
    this.attestationSource = attestationSource;
  }


  public VerificationRule configBasedBuildRequired(Boolean configBasedBuildRequired) {
    this.configBasedBuildRequired = configBasedBuildRequired;
    return this;
  }

  /**
   * If true, require the image to be built from a top-level configuration. &#x60;trusted_source_repo_patterns&#x60; specifies the repositories containing this configuration.
   * @return configBasedBuildRequired
   */
  @javax.annotation.Nullable
  public Boolean getConfigBasedBuildRequired() {
    return configBasedBuildRequired;
  }

  public void setConfigBasedBuildRequired(Boolean configBasedBuildRequired) {
    this.configBasedBuildRequired = configBasedBuildRequired;
  }


  public VerificationRule trustedBuilder(TrustedBuilderEnum trustedBuilder) {
    this.trustedBuilder = trustedBuilder;
    return this;
  }

  /**
   * Each verification rule is used for evaluation against provenances generated by a specific builder (group). For some of the builders, such as the Google Cloud Build, users don&#39;t need to explicitly specify their roots of trust in the policy since the evaluation service can automatically fetch them based on the builder (group).
   * @return trustedBuilder
   */
  @javax.annotation.Nullable
  public TrustedBuilderEnum getTrustedBuilder() {
    return trustedBuilder;
  }

  public void setTrustedBuilder(TrustedBuilderEnum trustedBuilder) {
    this.trustedBuilder = trustedBuilder;
  }


  public VerificationRule trustedSourceRepoPatterns(List<String> trustedSourceRepoPatterns) {
    this.trustedSourceRepoPatterns = trustedSourceRepoPatterns;
    return this;
  }

  public VerificationRule addTrustedSourceRepoPatternsItem(String trustedSourceRepoPatternsItem) {
    if (this.trustedSourceRepoPatterns == null) {
      this.trustedSourceRepoPatterns = new ArrayList<>();
    }
    this.trustedSourceRepoPatterns.add(trustedSourceRepoPatternsItem);
    return this;
  }

  /**
   * List of trusted source code repository URL patterns. These patterns match the full repository URL without its scheme (e.g. &#x60;https://&#x60;). The patterns must not include schemes. For example, the pattern &#x60;source.cloud.google.com/my-project/my-repo-name&#x60; matches the following URLs: - &#x60;source.cloud.google.com/my-project/my-repo-name&#x60; - &#x60;git+ssh://source.cloud.google.com/my-project/my-repo-name&#x60; - &#x60;https://source.cloud.google.com/my-project/my-repo-name&#x60; A pattern matches a URL either exactly or with &#x60;*&#x60; wildcards. &#x60;*&#x60; can be used in only two ways: 1. trailing &#x60;*&#x60; after hosturi/ to match varying endings; 2. trailing &#x60;**&#x60; after hosturi/ to match &#x60;/&#x60; as well. &#x60;*&#x60; and &#x60;**&#x60; can only be used as wildcards and can only occur at the end of the pattern after a &#x60;/&#x60;. (So it&#39;s not possible to match a URL that contains literal &#x60;*&#x60;.) For example: - &#x60;github.com/my-project/my-repo&#x60; is valid to match a single repo - &#x60;github.com/my-project/_*&#x60; will match all direct repos in &#x60;my-project&#x60; - &#x60;github.com/_**&#x60; matches all repos in GitHub
   * @return trustedSourceRepoPatterns
   */
  @javax.annotation.Nullable
  public List<String> getTrustedSourceRepoPatterns() {
    return trustedSourceRepoPatterns;
  }

  public void setTrustedSourceRepoPatterns(List<String> trustedSourceRepoPatterns) {
    this.trustedSourceRepoPatterns = trustedSourceRepoPatterns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerificationRule verificationRule = (VerificationRule) o;
    return Objects.equals(this.attestationSource, verificationRule.attestationSource) &&
        Objects.equals(this.configBasedBuildRequired, verificationRule.configBasedBuildRequired) &&
        Objects.equals(this.trustedBuilder, verificationRule.trustedBuilder) &&
        Objects.equals(this.trustedSourceRepoPatterns, verificationRule.trustedSourceRepoPatterns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attestationSource, configBasedBuildRequired, trustedBuilder, trustedSourceRepoPatterns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerificationRule {\n");
    sb.append("    attestationSource: ").append(toIndentedString(attestationSource)).append("\n");
    sb.append("    configBasedBuildRequired: ").append(toIndentedString(configBasedBuildRequired)).append("\n");
    sb.append("    trustedBuilder: ").append(toIndentedString(trustedBuilder)).append("\n");
    sb.append("    trustedSourceRepoPatterns: ").append(toIndentedString(trustedSourceRepoPatterns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attestationSource");
    openapiFields.add("configBasedBuildRequired");
    openapiFields.add("trustedBuilder");
    openapiFields.add("trustedSourceRepoPatterns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerificationRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerificationRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerificationRule is not found in the empty JSON string", VerificationRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerificationRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerificationRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attestationSource`
      if (jsonObj.get("attestationSource") != null && !jsonObj.get("attestationSource").isJsonNull()) {
        AttestationSource.validateJsonElement(jsonObj.get("attestationSource"));
      }
      if ((jsonObj.get("trustedBuilder") != null && !jsonObj.get("trustedBuilder").isJsonNull()) && !jsonObj.get("trustedBuilder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustedBuilder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustedBuilder").toString()));
      }
      // validate the optional field `trustedBuilder`
      if (jsonObj.get("trustedBuilder") != null && !jsonObj.get("trustedBuilder").isJsonNull()) {
        TrustedBuilderEnum.validateJsonElement(jsonObj.get("trustedBuilder"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("trustedSourceRepoPatterns") != null && !jsonObj.get("trustedSourceRepoPatterns").isJsonNull() && !jsonObj.get("trustedSourceRepoPatterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustedSourceRepoPatterns` to be an array in the JSON string but got `%s`", jsonObj.get("trustedSourceRepoPatterns").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerificationRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerificationRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerificationRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerificationRule.class));

       return (TypeAdapter<T>) new TypeAdapter<VerificationRule>() {
           @Override
           public void write(JsonWriter out, VerificationRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerificationRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerificationRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerificationRule
   * @throws IOException if the JSON string is invalid with respect to VerificationRule
   */
  public static VerificationRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerificationRule.class);
  }

  /**
   * Convert an instance of VerificationRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

