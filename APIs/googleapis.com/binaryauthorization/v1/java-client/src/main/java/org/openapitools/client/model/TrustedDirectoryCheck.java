/*
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A trusted directory check, which rejects images that do not come from the set of user-configured trusted directories.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:36.269071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrustedDirectoryCheck {
  public static final String SERIALIZED_NAME_TRUSTED_DIR_PATTERNS = "trustedDirPatterns";
  @SerializedName(SERIALIZED_NAME_TRUSTED_DIR_PATTERNS)
  private List<String> trustedDirPatterns = new ArrayList<>();

  public TrustedDirectoryCheck() {
  }

  public TrustedDirectoryCheck trustedDirPatterns(List<String> trustedDirPatterns) {
    this.trustedDirPatterns = trustedDirPatterns;
    return this;
  }

  public TrustedDirectoryCheck addTrustedDirPatternsItem(String trustedDirPatternsItem) {
    if (this.trustedDirPatterns == null) {
      this.trustedDirPatterns = new ArrayList<>();
    }
    this.trustedDirPatterns.add(trustedDirPatternsItem);
    return this;
  }

  /**
   * Required. List of trusted directory patterns. A pattern is in the form \&quot;registry/path/to/directory\&quot;. The registry domain part is defined as two or more dot-separated words, e.g., &#x60;us.pkg.dev&#x60;, or &#x60;gcr.io&#x60;. Additionally, &#x60;*&#x60; can be used in three ways as wildcards: 1. leading &#x60;*&#x60; to match varying prefixes in registry subdomain (useful for location prefixes); 2. trailing &#x60;*&#x60; after registry/ to match varying endings; 3. trailing &#x60;**&#x60; after registry/ to match \&quot;/\&quot; as well. For example: -- &#x60;gcr.io/my-project/my-repo&#x60; is valid to match a single directory -- &#x60;*-docker.pkg.dev/my-project/my-repo&#x60; or &#x60;*.gcr.io/my-project&#x60; are valid to match varying prefixes -- &#x60;gcr.io/my-project/_*&#x60; will match all direct directories in &#x60;my-project&#x60; -- &#x60;gcr.io/my-project/_**&#x60; would match all directories in &#x60;my-project&#x60; -- &#x60;gcr.i*&#x60; is not allowed since the registry is not completely specified -- &#x60;sub*domain.gcr.io/nginx&#x60; is not valid because only leading &#x60;*&#x60; or trailing &#x60;*&#x60; are allowed. -- &#x60;*pkg.dev/my-project/my-repo&#x60; is not valid because leading &#x60;*&#x60; can only match subdomain -- &#x60;**-docker.pkg.dev&#x60; is not valid because one leading &#x60;*&#x60; is allowed, and that it cannot match &#x60;/&#x60;
   * @return trustedDirPatterns
   */
  @javax.annotation.Nullable
  public List<String> getTrustedDirPatterns() {
    return trustedDirPatterns;
  }

  public void setTrustedDirPatterns(List<String> trustedDirPatterns) {
    this.trustedDirPatterns = trustedDirPatterns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrustedDirectoryCheck trustedDirectoryCheck = (TrustedDirectoryCheck) o;
    return Objects.equals(this.trustedDirPatterns, trustedDirectoryCheck.trustedDirPatterns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trustedDirPatterns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrustedDirectoryCheck {\n");
    sb.append("    trustedDirPatterns: ").append(toIndentedString(trustedDirPatterns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("trustedDirPatterns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrustedDirectoryCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrustedDirectoryCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrustedDirectoryCheck is not found in the empty JSON string", TrustedDirectoryCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrustedDirectoryCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrustedDirectoryCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("trustedDirPatterns") != null && !jsonObj.get("trustedDirPatterns").isJsonNull() && !jsonObj.get("trustedDirPatterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustedDirPatterns` to be an array in the JSON string but got `%s`", jsonObj.get("trustedDirPatterns").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrustedDirectoryCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrustedDirectoryCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrustedDirectoryCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrustedDirectoryCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<TrustedDirectoryCheck>() {
           @Override
           public void write(JsonWriter out, TrustedDirectoryCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrustedDirectoryCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrustedDirectoryCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrustedDirectoryCheck
   * @throws IOException if the JSON string is invalid with respect to TrustedDirectoryCheck
   */
  public static TrustedDirectoryCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrustedDirectoryCheck.class);
  }

  /**
   * Convert an instance of TrustedDirectoryCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

