/*
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AllowlistResult;
import org.openapitools.client.model.CheckResults;
import org.openapitools.client.model.Scope;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result of evaluating one check set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:36.269071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckSetResult {
  public static final String SERIALIZED_NAME_ALLOWLIST_RESULT = "allowlistResult";
  @SerializedName(SERIALIZED_NAME_ALLOWLIST_RESULT)
  private AllowlistResult allowlistResult;

  public static final String SERIALIZED_NAME_CHECK_RESULTS = "checkResults";
  @SerializedName(SERIALIZED_NAME_CHECK_RESULTS)
  private CheckResults checkResults;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private String explanation;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private String index;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private Scope scope;

  public CheckSetResult() {
  }

  public CheckSetResult allowlistResult(AllowlistResult allowlistResult) {
    this.allowlistResult = allowlistResult;
    return this;
  }

  /**
   * Get allowlistResult
   * @return allowlistResult
   */
  @javax.annotation.Nullable
  public AllowlistResult getAllowlistResult() {
    return allowlistResult;
  }

  public void setAllowlistResult(AllowlistResult allowlistResult) {
    this.allowlistResult = allowlistResult;
  }


  public CheckSetResult checkResults(CheckResults checkResults) {
    this.checkResults = checkResults;
    return this;
  }

  /**
   * Get checkResults
   * @return checkResults
   */
  @javax.annotation.Nullable
  public CheckResults getCheckResults() {
    return checkResults;
  }

  public void setCheckResults(CheckResults checkResults) {
    this.checkResults = checkResults;
  }


  public CheckSetResult displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the check set.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CheckSetResult explanation(String explanation) {
    this.explanation = explanation;
    return this;
  }

  /**
   * Explanation of this check set result. Only populated if no checks were evaluated.
   * @return explanation
   */
  @javax.annotation.Nullable
  public String getExplanation() {
    return explanation;
  }

  public void setExplanation(String explanation) {
    this.explanation = explanation;
  }


  public CheckSetResult index(String index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the check set.
   * @return index
   */
  @javax.annotation.Nullable
  public String getIndex() {
    return index;
  }

  public void setIndex(String index) {
    this.index = index;
  }


  public CheckSetResult scope(Scope scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public Scope getScope() {
    return scope;
  }

  public void setScope(Scope scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckSetResult checkSetResult = (CheckSetResult) o;
    return Objects.equals(this.allowlistResult, checkSetResult.allowlistResult) &&
        Objects.equals(this.checkResults, checkSetResult.checkResults) &&
        Objects.equals(this.displayName, checkSetResult.displayName) &&
        Objects.equals(this.explanation, checkSetResult.explanation) &&
        Objects.equals(this.index, checkSetResult.index) &&
        Objects.equals(this.scope, checkSetResult.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowlistResult, checkResults, displayName, explanation, index, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckSetResult {\n");
    sb.append("    allowlistResult: ").append(toIndentedString(allowlistResult)).append("\n");
    sb.append("    checkResults: ").append(toIndentedString(checkResults)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowlistResult");
    openapiFields.add("checkResults");
    openapiFields.add("displayName");
    openapiFields.add("explanation");
    openapiFields.add("index");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckSetResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckSetResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckSetResult is not found in the empty JSON string", CheckSetResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckSetResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckSetResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allowlistResult`
      if (jsonObj.get("allowlistResult") != null && !jsonObj.get("allowlistResult").isJsonNull()) {
        AllowlistResult.validateJsonElement(jsonObj.get("allowlistResult"));
      }
      // validate the optional field `checkResults`
      if (jsonObj.get("checkResults") != null && !jsonObj.get("checkResults").isJsonNull()) {
        CheckResults.validateJsonElement(jsonObj.get("checkResults"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("explanation") != null && !jsonObj.get("explanation").isJsonNull()) && !jsonObj.get("explanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `explanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explanation").toString()));
      }
      if ((jsonObj.get("index") != null && !jsonObj.get("index").isJsonNull()) && !jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      // validate the optional field `scope`
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) {
        Scope.validateJsonElement(jsonObj.get("scope"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckSetResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckSetResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckSetResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckSetResult.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckSetResult>() {
           @Override
           public void write(JsonWriter out, CheckSetResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckSetResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckSetResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckSetResult
   * @throws IOException if the JSON string is invalid with respect to CheckSetResult
   */
  public static CheckSetResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckSetResult.class);
  }

  /**
   * Convert an instance of CheckSetResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

