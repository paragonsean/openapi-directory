/*
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageAllowlist;
import org.openapitools.client.model.ImageFreshnessCheck;
import org.openapitools.client.model.SigstoreSignatureCheck;
import org.openapitools.client.model.SimpleSigningAttestationCheck;
import org.openapitools.client.model.SlsaCheck;
import org.openapitools.client.model.TrustedDirectoryCheck;
import org.openapitools.client.model.VulnerabilityCheck;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single check to perform against a Pod. Checks are grouped into &#x60;CheckSet&#x60; objects, which are defined by the top-level policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:36.269071-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Check {
  public static final String SERIALIZED_NAME_ALWAYS_DENY = "alwaysDeny";
  @SerializedName(SERIALIZED_NAME_ALWAYS_DENY)
  private Boolean alwaysDeny;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_IMAGE_ALLOWLIST = "imageAllowlist";
  @SerializedName(SERIALIZED_NAME_IMAGE_ALLOWLIST)
  private ImageAllowlist imageAllowlist;

  public static final String SERIALIZED_NAME_IMAGE_FRESHNESS_CHECK = "imageFreshnessCheck";
  @SerializedName(SERIALIZED_NAME_IMAGE_FRESHNESS_CHECK)
  private ImageFreshnessCheck imageFreshnessCheck;

  public static final String SERIALIZED_NAME_SIGSTORE_SIGNATURE_CHECK = "sigstoreSignatureCheck";
  @SerializedName(SERIALIZED_NAME_SIGSTORE_SIGNATURE_CHECK)
  private SigstoreSignatureCheck sigstoreSignatureCheck;

  public static final String SERIALIZED_NAME_SIMPLE_SIGNING_ATTESTATION_CHECK = "simpleSigningAttestationCheck";
  @SerializedName(SERIALIZED_NAME_SIMPLE_SIGNING_ATTESTATION_CHECK)
  private SimpleSigningAttestationCheck simpleSigningAttestationCheck;

  public static final String SERIALIZED_NAME_SLSA_CHECK = "slsaCheck";
  @SerializedName(SERIALIZED_NAME_SLSA_CHECK)
  private SlsaCheck slsaCheck;

  public static final String SERIALIZED_NAME_TRUSTED_DIRECTORY_CHECK = "trustedDirectoryCheck";
  @SerializedName(SERIALIZED_NAME_TRUSTED_DIRECTORY_CHECK)
  private TrustedDirectoryCheck trustedDirectoryCheck;

  public static final String SERIALIZED_NAME_VULNERABILITY_CHECK = "vulnerabilityCheck";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY_CHECK)
  private VulnerabilityCheck vulnerabilityCheck;

  public Check() {
  }

  public Check alwaysDeny(Boolean alwaysDeny) {
    this.alwaysDeny = alwaysDeny;
    return this;
  }

  /**
   * Optional. A special-case check that always denies. Note that this still only applies when the scope of the &#x60;CheckSet&#x60; applies and the image isn&#39;t exempted by an image allowlist. This check is primarily useful for testing, or to set the default behavior for all unmatched scopes to \&quot;deny\&quot;.
   * @return alwaysDeny
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysDeny() {
    return alwaysDeny;
  }

  public void setAlwaysDeny(Boolean alwaysDeny) {
    this.alwaysDeny = alwaysDeny;
  }


  public Check displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. A user-provided name for this check. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Check imageAllowlist(ImageAllowlist imageAllowlist) {
    this.imageAllowlist = imageAllowlist;
    return this;
  }

  /**
   * Get imageAllowlist
   * @return imageAllowlist
   */
  @javax.annotation.Nullable
  public ImageAllowlist getImageAllowlist() {
    return imageAllowlist;
  }

  public void setImageAllowlist(ImageAllowlist imageAllowlist) {
    this.imageAllowlist = imageAllowlist;
  }


  public Check imageFreshnessCheck(ImageFreshnessCheck imageFreshnessCheck) {
    this.imageFreshnessCheck = imageFreshnessCheck;
    return this;
  }

  /**
   * Get imageFreshnessCheck
   * @return imageFreshnessCheck
   */
  @javax.annotation.Nullable
  public ImageFreshnessCheck getImageFreshnessCheck() {
    return imageFreshnessCheck;
  }

  public void setImageFreshnessCheck(ImageFreshnessCheck imageFreshnessCheck) {
    this.imageFreshnessCheck = imageFreshnessCheck;
  }


  public Check sigstoreSignatureCheck(SigstoreSignatureCheck sigstoreSignatureCheck) {
    this.sigstoreSignatureCheck = sigstoreSignatureCheck;
    return this;
  }

  /**
   * Get sigstoreSignatureCheck
   * @return sigstoreSignatureCheck
   */
  @javax.annotation.Nullable
  public SigstoreSignatureCheck getSigstoreSignatureCheck() {
    return sigstoreSignatureCheck;
  }

  public void setSigstoreSignatureCheck(SigstoreSignatureCheck sigstoreSignatureCheck) {
    this.sigstoreSignatureCheck = sigstoreSignatureCheck;
  }


  public Check simpleSigningAttestationCheck(SimpleSigningAttestationCheck simpleSigningAttestationCheck) {
    this.simpleSigningAttestationCheck = simpleSigningAttestationCheck;
    return this;
  }

  /**
   * Get simpleSigningAttestationCheck
   * @return simpleSigningAttestationCheck
   */
  @javax.annotation.Nullable
  public SimpleSigningAttestationCheck getSimpleSigningAttestationCheck() {
    return simpleSigningAttestationCheck;
  }

  public void setSimpleSigningAttestationCheck(SimpleSigningAttestationCheck simpleSigningAttestationCheck) {
    this.simpleSigningAttestationCheck = simpleSigningAttestationCheck;
  }


  public Check slsaCheck(SlsaCheck slsaCheck) {
    this.slsaCheck = slsaCheck;
    return this;
  }

  /**
   * Get slsaCheck
   * @return slsaCheck
   */
  @javax.annotation.Nullable
  public SlsaCheck getSlsaCheck() {
    return slsaCheck;
  }

  public void setSlsaCheck(SlsaCheck slsaCheck) {
    this.slsaCheck = slsaCheck;
  }


  public Check trustedDirectoryCheck(TrustedDirectoryCheck trustedDirectoryCheck) {
    this.trustedDirectoryCheck = trustedDirectoryCheck;
    return this;
  }

  /**
   * Get trustedDirectoryCheck
   * @return trustedDirectoryCheck
   */
  @javax.annotation.Nullable
  public TrustedDirectoryCheck getTrustedDirectoryCheck() {
    return trustedDirectoryCheck;
  }

  public void setTrustedDirectoryCheck(TrustedDirectoryCheck trustedDirectoryCheck) {
    this.trustedDirectoryCheck = trustedDirectoryCheck;
  }


  public Check vulnerabilityCheck(VulnerabilityCheck vulnerabilityCheck) {
    this.vulnerabilityCheck = vulnerabilityCheck;
    return this;
  }

  /**
   * Get vulnerabilityCheck
   * @return vulnerabilityCheck
   */
  @javax.annotation.Nullable
  public VulnerabilityCheck getVulnerabilityCheck() {
    return vulnerabilityCheck;
  }

  public void setVulnerabilityCheck(VulnerabilityCheck vulnerabilityCheck) {
    this.vulnerabilityCheck = vulnerabilityCheck;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Check check = (Check) o;
    return Objects.equals(this.alwaysDeny, check.alwaysDeny) &&
        Objects.equals(this.displayName, check.displayName) &&
        Objects.equals(this.imageAllowlist, check.imageAllowlist) &&
        Objects.equals(this.imageFreshnessCheck, check.imageFreshnessCheck) &&
        Objects.equals(this.sigstoreSignatureCheck, check.sigstoreSignatureCheck) &&
        Objects.equals(this.simpleSigningAttestationCheck, check.simpleSigningAttestationCheck) &&
        Objects.equals(this.slsaCheck, check.slsaCheck) &&
        Objects.equals(this.trustedDirectoryCheck, check.trustedDirectoryCheck) &&
        Objects.equals(this.vulnerabilityCheck, check.vulnerabilityCheck);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alwaysDeny, displayName, imageAllowlist, imageFreshnessCheck, sigstoreSignatureCheck, simpleSigningAttestationCheck, slsaCheck, trustedDirectoryCheck, vulnerabilityCheck);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Check {\n");
    sb.append("    alwaysDeny: ").append(toIndentedString(alwaysDeny)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    imageAllowlist: ").append(toIndentedString(imageAllowlist)).append("\n");
    sb.append("    imageFreshnessCheck: ").append(toIndentedString(imageFreshnessCheck)).append("\n");
    sb.append("    sigstoreSignatureCheck: ").append(toIndentedString(sigstoreSignatureCheck)).append("\n");
    sb.append("    simpleSigningAttestationCheck: ").append(toIndentedString(simpleSigningAttestationCheck)).append("\n");
    sb.append("    slsaCheck: ").append(toIndentedString(slsaCheck)).append("\n");
    sb.append("    trustedDirectoryCheck: ").append(toIndentedString(trustedDirectoryCheck)).append("\n");
    sb.append("    vulnerabilityCheck: ").append(toIndentedString(vulnerabilityCheck)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alwaysDeny");
    openapiFields.add("displayName");
    openapiFields.add("imageAllowlist");
    openapiFields.add("imageFreshnessCheck");
    openapiFields.add("sigstoreSignatureCheck");
    openapiFields.add("simpleSigningAttestationCheck");
    openapiFields.add("slsaCheck");
    openapiFields.add("trustedDirectoryCheck");
    openapiFields.add("vulnerabilityCheck");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Check
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Check.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Check is not found in the empty JSON string", Check.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Check.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Check` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `imageAllowlist`
      if (jsonObj.get("imageAllowlist") != null && !jsonObj.get("imageAllowlist").isJsonNull()) {
        ImageAllowlist.validateJsonElement(jsonObj.get("imageAllowlist"));
      }
      // validate the optional field `imageFreshnessCheck`
      if (jsonObj.get("imageFreshnessCheck") != null && !jsonObj.get("imageFreshnessCheck").isJsonNull()) {
        ImageFreshnessCheck.validateJsonElement(jsonObj.get("imageFreshnessCheck"));
      }
      // validate the optional field `sigstoreSignatureCheck`
      if (jsonObj.get("sigstoreSignatureCheck") != null && !jsonObj.get("sigstoreSignatureCheck").isJsonNull()) {
        SigstoreSignatureCheck.validateJsonElement(jsonObj.get("sigstoreSignatureCheck"));
      }
      // validate the optional field `simpleSigningAttestationCheck`
      if (jsonObj.get("simpleSigningAttestationCheck") != null && !jsonObj.get("simpleSigningAttestationCheck").isJsonNull()) {
        SimpleSigningAttestationCheck.validateJsonElement(jsonObj.get("simpleSigningAttestationCheck"));
      }
      // validate the optional field `slsaCheck`
      if (jsonObj.get("slsaCheck") != null && !jsonObj.get("slsaCheck").isJsonNull()) {
        SlsaCheck.validateJsonElement(jsonObj.get("slsaCheck"));
      }
      // validate the optional field `trustedDirectoryCheck`
      if (jsonObj.get("trustedDirectoryCheck") != null && !jsonObj.get("trustedDirectoryCheck").isJsonNull()) {
        TrustedDirectoryCheck.validateJsonElement(jsonObj.get("trustedDirectoryCheck"));
      }
      // validate the optional field `vulnerabilityCheck`
      if (jsonObj.get("vulnerabilityCheck") != null && !jsonObj.get("vulnerabilityCheck").isJsonNull()) {
        VulnerabilityCheck.validateJsonElement(jsonObj.get("vulnerabilityCheck"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Check.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Check' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Check> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Check.class));

       return (TypeAdapter<T>) new TypeAdapter<Check>() {
           @Override
           public void write(JsonWriter out, Check value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Check read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Check given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Check
   * @throws IOException if the JSON string is invalid with respect to Check
   */
  public static Check fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Check.class);
  }

  /**
   * Convert an instance of Check to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

