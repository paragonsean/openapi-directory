/*
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Attestor;
import org.openapitools.client.model.EvaluateGkePolicyRequest;
import org.openapitools.client.model.EvaluateGkePolicyResponse;
import org.openapitools.client.model.IamPolicy;
import org.openapitools.client.model.ListAttestorsResponse;
import org.openapitools.client.model.ListPlatformPoliciesResponse;
import org.openapitools.client.model.PlatformPolicy;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.openapitools.client.model.ValidateAttestationOccurrenceRequest;
import org.openapitools.client.model.ValidateAttestationOccurrenceResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates an attestor, and returns a copy of the new attestor. Returns &#x60;NOT_FOUND&#x60; if the project does not exist, &#x60;INVALID_ARGUMENT&#x60; if the request is malformed, &#x60;ALREADY_EXISTS&#x60; if the attestor already exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void binaryauthorizationProjectsAttestorsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String attestorId = null;
        Attestor attestor = null;
        Attestor response = api.binaryauthorizationProjectsAttestorsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, attestorId, attestor);
        // TODO: test validations
    }

    /**
     * Lists attestors. Returns &#x60;INVALID_ARGUMENT&#x60; if the project does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void binaryauthorizationProjectsAttestorsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAttestorsResponse response = api.binaryauthorizationProjectsAttestorsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Returns whether the given &#x60;Attestation&#x60; for the given image URI was signed by the given &#x60;Attestor&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void binaryauthorizationProjectsAttestorsValidateAttestationOccurrenceTest() throws ApiException {
        String attestor = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ValidateAttestationOccurrenceRequest validateAttestationOccurrenceRequest = null;
        ValidateAttestationOccurrenceResponse response = api.binaryauthorizationProjectsAttestorsValidateAttestationOccurrence(attestor, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, validateAttestationOccurrenceRequest);
        // TODO: test validations
    }

    /**
     * Evaluates a Kubernetes object versus a GKE platform policy. Returns &#x60;NOT_FOUND&#x60; if the policy doesn&#39;t exist, &#x60;INVALID_ARGUMENT&#x60; if the policy or request is malformed and &#x60;PERMISSION_DENIED&#x60; if the client does not have sufficient permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void binaryauthorizationProjectsPlatformsGkePoliciesEvaluateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EvaluateGkePolicyRequest evaluateGkePolicyRequest = null;
        EvaluateGkePolicyResponse response = api.binaryauthorizationProjectsPlatformsGkePoliciesEvaluate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, evaluateGkePolicyRequest);
        // TODO: test validations
    }

    /**
     * Creates a platform policy, and returns a copy of it. Returns &#x60;NOT_FOUND&#x60; if the project or platform doesn&#39;t exist, &#x60;INVALID_ARGUMENT&#x60; if the request is malformed, &#x60;ALREADY_EXISTS&#x60; if the policy already exists, and &#x60;INVALID_ARGUMENT&#x60; if the policy contains a platform-specific policy that does not match the platform value specified in the URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void binaryauthorizationProjectsPlatformsPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String policyId = null;
        PlatformPolicy platformPolicy = null;
        PlatformPolicy response = api.binaryauthorizationProjectsPlatformsPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, policyId, platformPolicy);
        // TODO: test validations
    }

    /**
     * Deletes a platform policy. Returns &#x60;NOT_FOUND&#x60; if the policy doesn&#39;t exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void binaryauthorizationProjectsPlatformsPoliciesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.binaryauthorizationProjectsPlatformsPoliciesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists platform policies owned by a project in the specified platform. Returns &#x60;INVALID_ARGUMENT&#x60; if the project or the platform doesn&#39;t exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void binaryauthorizationProjectsPlatformsPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPlatformPoliciesResponse response = api.binaryauthorizationProjectsPlatformsPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Replaces a platform policy. Returns &#x60;NOT_FOUND&#x60; if the policy doesn&#39;t exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void binaryauthorizationProjectsPlatformsPoliciesReplacePlatformPolicyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PlatformPolicy platformPolicy = null;
        PlatformPolicy response = api.binaryauthorizationProjectsPlatformsPoliciesReplacePlatformPolicy(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, platformPolicy);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void binaryauthorizationProjectsPolicyGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        IamPolicy response = api.binaryauthorizationProjectsPolicyGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void binaryauthorizationProjectsPolicySetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        IamPolicy response = api.binaryauthorizationProjectsPolicySetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void binaryauthorizationProjectsPolicyTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.binaryauthorizationProjectsPolicyTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

}
