/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdmissionRule from './AdmissionRule';
import AdmissionWhitelistPattern from './AdmissionWhitelistPattern';

/**
 * The Policy model module.
 * @module model/Policy
 * @version v1
 */
class Policy {
    /**
     * Constructs a new <code>Policy</code>.
     * A policy for container image binary authorization.
     * @alias module:model/Policy
     */
    constructor() { 
        
        Policy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Policy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Policy} obj Optional instance to populate.
     * @return {module:model/Policy} The populated <code>Policy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Policy();

            if (data.hasOwnProperty('admissionWhitelistPatterns')) {
                obj['admissionWhitelistPatterns'] = ApiClient.convertToType(data['admissionWhitelistPatterns'], [AdmissionWhitelistPattern]);
            }
            if (data.hasOwnProperty('clusterAdmissionRules')) {
                obj['clusterAdmissionRules'] = ApiClient.convertToType(data['clusterAdmissionRules'], {'String': AdmissionRule});
            }
            if (data.hasOwnProperty('defaultAdmissionRule')) {
                obj['defaultAdmissionRule'] = AdmissionRule.constructFromObject(data['defaultAdmissionRule']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('globalPolicyEvaluationMode')) {
                obj['globalPolicyEvaluationMode'] = ApiClient.convertToType(data['globalPolicyEvaluationMode'], 'String');
            }
            if (data.hasOwnProperty('istioServiceIdentityAdmissionRules')) {
                obj['istioServiceIdentityAdmissionRules'] = ApiClient.convertToType(data['istioServiceIdentityAdmissionRules'], {'String': AdmissionRule});
            }
            if (data.hasOwnProperty('kubernetesNamespaceAdmissionRules')) {
                obj['kubernetesNamespaceAdmissionRules'] = ApiClient.convertToType(data['kubernetesNamespaceAdmissionRules'], {'String': AdmissionRule});
            }
            if (data.hasOwnProperty('kubernetesServiceAccountAdmissionRules')) {
                obj['kubernetesServiceAccountAdmissionRules'] = ApiClient.convertToType(data['kubernetesServiceAccountAdmissionRules'], {'String': AdmissionRule});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Policy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Policy</code>.
     */
    static validateJSON(data) {
        if (data['admissionWhitelistPatterns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['admissionWhitelistPatterns'])) {
                throw new Error("Expected the field `admissionWhitelistPatterns` to be an array in the JSON data but got " + data['admissionWhitelistPatterns']);
            }
            // validate the optional field `admissionWhitelistPatterns` (array)
            for (const item of data['admissionWhitelistPatterns']) {
                AdmissionWhitelistPattern.validateJSON(item);
            };
        }
        // validate the optional field `defaultAdmissionRule`
        if (data['defaultAdmissionRule']) { // data not null
          AdmissionRule.validateJSON(data['defaultAdmissionRule']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['globalPolicyEvaluationMode'] && !(typeof data['globalPolicyEvaluationMode'] === 'string' || data['globalPolicyEvaluationMode'] instanceof String)) {
            throw new Error("Expected the field `globalPolicyEvaluationMode` to be a primitive type in the JSON string but got " + data['globalPolicyEvaluationMode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Optional. Admission policy allowlisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies.
 * @member {Array.<module:model/AdmissionWhitelistPattern>} admissionWhitelistPatterns
 */
Policy.prototype['admissionWhitelistPatterns'] = undefined;

/**
 * Optional. Per-cluster admission rules. Cluster spec format: `location.clusterId`. There can be at most one admission rule per cluster spec. A `location` is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For `clusterId` syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.
 * @member {Object.<String, module:model/AdmissionRule>} clusterAdmissionRules
 */
Policy.prototype['clusterAdmissionRules'] = undefined;

/**
 * @member {module:model/AdmissionRule} defaultAdmissionRule
 */
Policy.prototype['defaultAdmissionRule'] = undefined;

/**
 * Optional. A descriptive comment.
 * @member {String} description
 */
Policy.prototype['description'] = undefined;

/**
 * Optional. A checksum, returned by the server, that can be sent on update requests to ensure the policy has an up-to-date value before attempting to update it. See https://google.aip.dev/154.
 * @member {String} etag
 */
Policy.prototype['etag'] = undefined;

/**
 * Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy.
 * @member {module:model/Policy.GlobalPolicyEvaluationModeEnum} globalPolicyEvaluationMode
 */
Policy.prototype['globalPolicyEvaluationMode'] = undefined;

/**
 * Optional. Per-istio-service-identity admission rules. Istio service identity spec format: `spiffe:///ns//sa/` or `/ns//sa/` e.g. `spiffe://example.com/ns/test-ns/sa/default`
 * @member {Object.<String, module:model/AdmissionRule>} istioServiceIdentityAdmissionRules
 */
Policy.prototype['istioServiceIdentityAdmissionRules'] = undefined;

/**
 * Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format: `[a-z.-]+`, e.g. `some-namespace`
 * @member {Object.<String, module:model/AdmissionRule>} kubernetesNamespaceAdmissionRules
 */
Policy.prototype['kubernetesNamespaceAdmissionRules'] = undefined;

/**
 * Optional. Per-kubernetes-service-account admission rules. Service account spec format: `namespace:serviceaccount`. e.g. `test-ns:default`
 * @member {Object.<String, module:model/AdmissionRule>} kubernetesServiceAccountAdmissionRules
 */
Policy.prototype['kubernetesServiceAccountAdmissionRules'] = undefined;

/**
 * Output only. The resource name, in the format `projects/_*_/policy`. There is at most one policy per project.
 * @member {String} name
 */
Policy.prototype['name'] = undefined;

/**
 * Output only. Time when the policy was last updated.
 * @member {String} updateTime
 */
Policy.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>globalPolicyEvaluationMode</code> property.
 * @enum {String}
 * @readonly
 */
Policy['GlobalPolicyEvaluationModeEnum'] = {

    /**
     * value: "GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED"
     * @const
     */
    "GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED": "GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED",

    /**
     * value: "ENABLE"
     * @const
     */
    "ENABLE": "ENABLE",

    /**
     * value: "DISABLE"
     * @const
     */
    "DISABLE": "DISABLE"
};



export default Policy;

