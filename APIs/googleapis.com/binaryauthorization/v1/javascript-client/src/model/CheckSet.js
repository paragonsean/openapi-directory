/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Check from './Check';
import ImageAllowlist from './ImageAllowlist';
import Scope from './Scope';

/**
 * The CheckSet model module.
 * @module model/CheckSet
 * @version v1
 */
class CheckSet {
    /**
     * Constructs a new <code>CheckSet</code>.
     * A conjunction of policy checks, scoped to a particular namespace or Kubernetes service account. In order for evaluation of a &#x60;CheckSet&#x60; to return \&quot;allowed\&quot; for a given image in a given Pod, one of the following conditions must be satisfied: * The image is explicitly exempted by an entry in &#x60;image_allowlist&#x60;, OR * ALL of the &#x60;checks&#x60; evaluate to \&quot;allowed\&quot;.
     * @alias module:model/CheckSet
     */
    constructor() { 
        
        CheckSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckSet} obj Optional instance to populate.
     * @return {module:model/CheckSet} The populated <code>CheckSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckSet();

            if (data.hasOwnProperty('checks')) {
                obj['checks'] = ApiClient.convertToType(data['checks'], [Check]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('imageAllowlist')) {
                obj['imageAllowlist'] = ImageAllowlist.constructFromObject(data['imageAllowlist']);
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = Scope.constructFromObject(data['scope']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckSet</code>.
     */
    static validateJSON(data) {
        if (data['checks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['checks'])) {
                throw new Error("Expected the field `checks` to be an array in the JSON data but got " + data['checks']);
            }
            // validate the optional field `checks` (array)
            for (const item of data['checks']) {
                Check.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `imageAllowlist`
        if (data['imageAllowlist']) { // data not null
          ImageAllowlist.validateJSON(data['imageAllowlist']);
        }
        // validate the optional field `scope`
        if (data['scope']) { // data not null
          Scope.validateJSON(data['scope']);
        }

        return true;
    }


}



/**
 * Optional. The checks to apply. The ultimate result of evaluating the check set will be \"allow\" if and only if every check in `checks` evaluates to \"allow\". If `checks` is empty, the default behavior is \"always allow\".
 * @member {Array.<module:model/Check>} checks
 */
CheckSet.prototype['checks'] = undefined;

/**
 * Optional. A user-provided name for this `CheckSet`. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.
 * @member {String} displayName
 */
CheckSet.prototype['displayName'] = undefined;

/**
 * @member {module:model/ImageAllowlist} imageAllowlist
 */
CheckSet.prototype['imageAllowlist'] = undefined;

/**
 * @member {module:model/Scope} scope
 */
CheckSet.prototype['scope'] = undefined;






export default CheckSet;

