/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VulnerabilityCheck model module.
 * @module model/VulnerabilityCheck
 * @version v1
 */
class VulnerabilityCheck {
    /**
     * Constructs a new <code>VulnerabilityCheck</code>.
     * An image vulnerability check, which rejects images that violate the configured vulnerability rules.
     * @alias module:model/VulnerabilityCheck
     */
    constructor() { 
        
        VulnerabilityCheck.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VulnerabilityCheck</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VulnerabilityCheck} obj Optional instance to populate.
     * @return {module:model/VulnerabilityCheck} The populated <code>VulnerabilityCheck</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VulnerabilityCheck();

            if (data.hasOwnProperty('allowedCves')) {
                obj['allowedCves'] = ApiClient.convertToType(data['allowedCves'], ['String']);
            }
            if (data.hasOwnProperty('blockedCves')) {
                obj['blockedCves'] = ApiClient.convertToType(data['blockedCves'], ['String']);
            }
            if (data.hasOwnProperty('containerAnalysisVulnerabilityProjects')) {
                obj['containerAnalysisVulnerabilityProjects'] = ApiClient.convertToType(data['containerAnalysisVulnerabilityProjects'], ['String']);
            }
            if (data.hasOwnProperty('maximumFixableSeverity')) {
                obj['maximumFixableSeverity'] = ApiClient.convertToType(data['maximumFixableSeverity'], 'String');
            }
            if (data.hasOwnProperty('maximumUnfixableSeverity')) {
                obj['maximumUnfixableSeverity'] = ApiClient.convertToType(data['maximumUnfixableSeverity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VulnerabilityCheck</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VulnerabilityCheck</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedCves'])) {
            throw new Error("Expected the field `allowedCves` to be an array in the JSON data but got " + data['allowedCves']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blockedCves'])) {
            throw new Error("Expected the field `blockedCves` to be an array in the JSON data but got " + data['blockedCves']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['containerAnalysisVulnerabilityProjects'])) {
            throw new Error("Expected the field `containerAnalysisVulnerabilityProjects` to be an array in the JSON data but got " + data['containerAnalysisVulnerabilityProjects']);
        }
        // ensure the json data is a string
        if (data['maximumFixableSeverity'] && !(typeof data['maximumFixableSeverity'] === 'string' || data['maximumFixableSeverity'] instanceof String)) {
            throw new Error("Expected the field `maximumFixableSeverity` to be a primitive type in the JSON string but got " + data['maximumFixableSeverity']);
        }
        // ensure the json data is a string
        if (data['maximumUnfixableSeverity'] && !(typeof data['maximumUnfixableSeverity'] === 'string' || data['maximumUnfixableSeverity'] instanceof String)) {
            throw new Error("Expected the field `maximumUnfixableSeverity` to be a primitive type in the JSON string but got " + data['maximumUnfixableSeverity']);
        }

        return true;
    }


}



/**
 * Optional. A list of specific CVEs to ignore even if the vulnerability level violates `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will allow vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.
 * @member {Array.<String>} allowedCves
 */
VulnerabilityCheck.prototype['allowedCves'] = undefined;

/**
 * Optional. A list of specific CVEs to always raise warnings about even if the vulnerability level meets `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will block vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.
 * @member {Array.<String>} blockedCves
 */
VulnerabilityCheck.prototype['blockedCves'] = undefined;

/**
 * Optional. The projects where vulnerabilities are stored as Container Analysis Occurrences. Each project is expressed in the resource format of `projects/[PROJECT_ID]`, e.g., `projects/my-gcp-project`. An attempt will be made for each project to fetch vulnerabilities, and all valid vulnerabilities will be used to check against the vulnerability policy. If no valid scan is found in all projects configured here, an error will be returned for the check. Maximum number of `container_analysis_vulnerability_projects` allowed in each `VulnerabilityCheck` is 10.
 * @member {Array.<String>} containerAnalysisVulnerabilityProjects
 */
VulnerabilityCheck.prototype['containerAnalysisVulnerabilityProjects'] = undefined;

/**
 * Required. The threshold for severity for which a fix is currently available. This field is required and must be set.
 * @member {module:model/VulnerabilityCheck.MaximumFixableSeverityEnum} maximumFixableSeverity
 */
VulnerabilityCheck.prototype['maximumFixableSeverity'] = undefined;

/**
 * Required. The threshold for severity for which a fix isn't currently available. This field is required and must be set.
 * @member {module:model/VulnerabilityCheck.MaximumUnfixableSeverityEnum} maximumUnfixableSeverity
 */
VulnerabilityCheck.prototype['maximumUnfixableSeverity'] = undefined;





/**
 * Allowed values for the <code>maximumFixableSeverity</code> property.
 * @enum {String}
 * @readonly
 */
VulnerabilityCheck['MaximumFixableSeverityEnum'] = {

    /**
     * value: "MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED"
     * @const
     */
    "MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED": "MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED",

    /**
     * value: "BLOCK_ALL"
     * @const
     */
    "BLOCK_ALL": "BLOCK_ALL",

    /**
     * value: "MINIMAL"
     * @const
     */
    "MINIMAL": "MINIMAL",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH",

    /**
     * value: "CRITICAL"
     * @const
     */
    "CRITICAL": "CRITICAL",

    /**
     * value: "ALLOW_ALL"
     * @const
     */
    "ALLOW_ALL": "ALLOW_ALL"
};


/**
 * Allowed values for the <code>maximumUnfixableSeverity</code> property.
 * @enum {String}
 * @readonly
 */
VulnerabilityCheck['MaximumUnfixableSeverityEnum'] = {

    /**
     * value: "MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED"
     * @const
     */
    "MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED": "MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED",

    /**
     * value: "BLOCK_ALL"
     * @const
     */
    "BLOCK_ALL": "BLOCK_ALL",

    /**
     * value: "MINIMAL"
     * @const
     */
    "MINIMAL": "MINIMAL",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH",

    /**
     * value: "CRITICAL"
     * @const
     */
    "CRITICAL": "CRITICAL",

    /**
     * value: "ALLOW_ALL"
     * @const
     */
    "ALLOW_ALL": "ALLOW_ALL"
};



export default VulnerabilityCheck;

