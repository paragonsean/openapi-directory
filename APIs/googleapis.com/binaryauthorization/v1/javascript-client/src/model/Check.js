/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageAllowlist from './ImageAllowlist';
import ImageFreshnessCheck from './ImageFreshnessCheck';
import SigstoreSignatureCheck from './SigstoreSignatureCheck';
import SimpleSigningAttestationCheck from './SimpleSigningAttestationCheck';
import SlsaCheck from './SlsaCheck';
import TrustedDirectoryCheck from './TrustedDirectoryCheck';
import VulnerabilityCheck from './VulnerabilityCheck';

/**
 * The Check model module.
 * @module model/Check
 * @version v1
 */
class Check {
    /**
     * Constructs a new <code>Check</code>.
     * A single check to perform against a Pod. Checks are grouped into &#x60;CheckSet&#x60; objects, which are defined by the top-level policy.
     * @alias module:model/Check
     */
    constructor() { 
        
        Check.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Check</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Check} obj Optional instance to populate.
     * @return {module:model/Check} The populated <code>Check</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Check();

            if (data.hasOwnProperty('alwaysDeny')) {
                obj['alwaysDeny'] = ApiClient.convertToType(data['alwaysDeny'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('imageAllowlist')) {
                obj['imageAllowlist'] = ImageAllowlist.constructFromObject(data['imageAllowlist']);
            }
            if (data.hasOwnProperty('imageFreshnessCheck')) {
                obj['imageFreshnessCheck'] = ImageFreshnessCheck.constructFromObject(data['imageFreshnessCheck']);
            }
            if (data.hasOwnProperty('sigstoreSignatureCheck')) {
                obj['sigstoreSignatureCheck'] = SigstoreSignatureCheck.constructFromObject(data['sigstoreSignatureCheck']);
            }
            if (data.hasOwnProperty('simpleSigningAttestationCheck')) {
                obj['simpleSigningAttestationCheck'] = SimpleSigningAttestationCheck.constructFromObject(data['simpleSigningAttestationCheck']);
            }
            if (data.hasOwnProperty('slsaCheck')) {
                obj['slsaCheck'] = SlsaCheck.constructFromObject(data['slsaCheck']);
            }
            if (data.hasOwnProperty('trustedDirectoryCheck')) {
                obj['trustedDirectoryCheck'] = TrustedDirectoryCheck.constructFromObject(data['trustedDirectoryCheck']);
            }
            if (data.hasOwnProperty('vulnerabilityCheck')) {
                obj['vulnerabilityCheck'] = VulnerabilityCheck.constructFromObject(data['vulnerabilityCheck']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Check</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Check</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `imageAllowlist`
        if (data['imageAllowlist']) { // data not null
          ImageAllowlist.validateJSON(data['imageAllowlist']);
        }
        // validate the optional field `imageFreshnessCheck`
        if (data['imageFreshnessCheck']) { // data not null
          ImageFreshnessCheck.validateJSON(data['imageFreshnessCheck']);
        }
        // validate the optional field `sigstoreSignatureCheck`
        if (data['sigstoreSignatureCheck']) { // data not null
          SigstoreSignatureCheck.validateJSON(data['sigstoreSignatureCheck']);
        }
        // validate the optional field `simpleSigningAttestationCheck`
        if (data['simpleSigningAttestationCheck']) { // data not null
          SimpleSigningAttestationCheck.validateJSON(data['simpleSigningAttestationCheck']);
        }
        // validate the optional field `slsaCheck`
        if (data['slsaCheck']) { // data not null
          SlsaCheck.validateJSON(data['slsaCheck']);
        }
        // validate the optional field `trustedDirectoryCheck`
        if (data['trustedDirectoryCheck']) { // data not null
          TrustedDirectoryCheck.validateJSON(data['trustedDirectoryCheck']);
        }
        // validate the optional field `vulnerabilityCheck`
        if (data['vulnerabilityCheck']) { // data not null
          VulnerabilityCheck.validateJSON(data['vulnerabilityCheck']);
        }

        return true;
    }


}



/**
 * Optional. A special-case check that always denies. Note that this still only applies when the scope of the `CheckSet` applies and the image isn't exempted by an image allowlist. This check is primarily useful for testing, or to set the default behavior for all unmatched scopes to \"deny\".
 * @member {Boolean} alwaysDeny
 */
Check.prototype['alwaysDeny'] = undefined;

/**
 * Optional. A user-provided name for this check. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.
 * @member {String} displayName
 */
Check.prototype['displayName'] = undefined;

/**
 * @member {module:model/ImageAllowlist} imageAllowlist
 */
Check.prototype['imageAllowlist'] = undefined;

/**
 * @member {module:model/ImageFreshnessCheck} imageFreshnessCheck
 */
Check.prototype['imageFreshnessCheck'] = undefined;

/**
 * @member {module:model/SigstoreSignatureCheck} sigstoreSignatureCheck
 */
Check.prototype['sigstoreSignatureCheck'] = undefined;

/**
 * @member {module:model/SimpleSigningAttestationCheck} simpleSigningAttestationCheck
 */
Check.prototype['simpleSigningAttestationCheck'] = undefined;

/**
 * @member {module:model/SlsaCheck} slsaCheck
 */
Check.prototype['slsaCheck'] = undefined;

/**
 * @member {module:model/TrustedDirectoryCheck} trustedDirectoryCheck
 */
Check.prototype['trustedDirectoryCheck'] = undefined;

/**
 * @member {module:model/VulnerabilityCheck} vulnerabilityCheck
 */
Check.prototype['vulnerabilityCheck'] = undefined;






export default Check;

