/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VerificationRule from './VerificationRule';

/**
 * The SlsaCheck model module.
 * @module model/SlsaCheck
 * @version v1
 */
class SlsaCheck {
    /**
     * Constructs a new <code>SlsaCheck</code>.
     * A SLSA provenance attestation check, which ensures that images are built by a trusted builder using source code from its trusted repositories only.
     * @alias module:model/SlsaCheck
     */
    constructor() { 
        
        SlsaCheck.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SlsaCheck</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SlsaCheck} obj Optional instance to populate.
     * @return {module:model/SlsaCheck} The populated <code>SlsaCheck</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SlsaCheck();

            if (data.hasOwnProperty('rules')) {
                obj['rules'] = ApiClient.convertToType(data['rules'], [VerificationRule]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SlsaCheck</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SlsaCheck</code>.
     */
    static validateJSON(data) {
        if (data['rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rules'])) {
                throw new Error("Expected the field `rules` to be an array in the JSON data but got " + data['rules']);
            }
            // validate the optional field `rules` (array)
            for (const item of data['rules']) {
                VerificationRule.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Specifies a list of verification rules for the SLSA attestations. An image is considered compliant with the SlsaCheck if any of the rules are satisfied.
 * @member {Array.<module:model/VerificationRule>} rules
 */
SlsaCheck.prototype['rules'] = undefined;






export default SlsaCheck;

