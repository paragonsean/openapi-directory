/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttestationSource from './AttestationSource';

/**
 * The VerificationRule model module.
 * @module model/VerificationRule
 * @version v1
 */
class VerificationRule {
    /**
     * Constructs a new <code>VerificationRule</code>.
     * Specifies verification rules for evaluating the SLSA attestations including: which builders to trust, where to fetch the SLSA attestations generated by those builders, and other builder-specific evaluation rules such as which source repositories are trusted. An image is considered verified by the rule if any of the fetched SLSA attestations is verified.
     * @alias module:model/VerificationRule
     */
    constructor() { 
        
        VerificationRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VerificationRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerificationRule} obj Optional instance to populate.
     * @return {module:model/VerificationRule} The populated <code>VerificationRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerificationRule();

            if (data.hasOwnProperty('attestationSource')) {
                obj['attestationSource'] = AttestationSource.constructFromObject(data['attestationSource']);
            }
            if (data.hasOwnProperty('configBasedBuildRequired')) {
                obj['configBasedBuildRequired'] = ApiClient.convertToType(data['configBasedBuildRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('trustedBuilder')) {
                obj['trustedBuilder'] = ApiClient.convertToType(data['trustedBuilder'], 'String');
            }
            if (data.hasOwnProperty('trustedSourceRepoPatterns')) {
                obj['trustedSourceRepoPatterns'] = ApiClient.convertToType(data['trustedSourceRepoPatterns'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerificationRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerificationRule</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attestationSource`
        if (data['attestationSource']) { // data not null
          AttestationSource.validateJSON(data['attestationSource']);
        }
        // ensure the json data is a string
        if (data['trustedBuilder'] && !(typeof data['trustedBuilder'] === 'string' || data['trustedBuilder'] instanceof String)) {
            throw new Error("Expected the field `trustedBuilder` to be a primitive type in the JSON string but got " + data['trustedBuilder']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['trustedSourceRepoPatterns'])) {
            throw new Error("Expected the field `trustedSourceRepoPatterns` to be an array in the JSON data but got " + data['trustedSourceRepoPatterns']);
        }

        return true;
    }


}



/**
 * @member {module:model/AttestationSource} attestationSource
 */
VerificationRule.prototype['attestationSource'] = undefined;

/**
 * If true, require the image to be built from a top-level configuration. `trusted_source_repo_patterns` specifies the repositories containing this configuration.
 * @member {Boolean} configBasedBuildRequired
 */
VerificationRule.prototype['configBasedBuildRequired'] = undefined;

/**
 * Each verification rule is used for evaluation against provenances generated by a specific builder (group). For some of the builders, such as the Google Cloud Build, users don't need to explicitly specify their roots of trust in the policy since the evaluation service can automatically fetch them based on the builder (group).
 * @member {module:model/VerificationRule.TrustedBuilderEnum} trustedBuilder
 */
VerificationRule.prototype['trustedBuilder'] = undefined;

/**
 * List of trusted source code repository URL patterns. These patterns match the full repository URL without its scheme (e.g. `https://`). The patterns must not include schemes. For example, the pattern `source.cloud.google.com/my-project/my-repo-name` matches the following URLs: - `source.cloud.google.com/my-project/my-repo-name` - `git+ssh://source.cloud.google.com/my-project/my-repo-name` - `https://source.cloud.google.com/my-project/my-repo-name` A pattern matches a URL either exactly or with `*` wildcards. `*` can be used in only two ways: 1. trailing `*` after hosturi/ to match varying endings; 2. trailing `**` after hosturi/ to match `/` as well. `*` and `**` can only be used as wildcards and can only occur at the end of the pattern after a `/`. (So it's not possible to match a URL that contains literal `*`.) For example: - `github.com/my-project/my-repo` is valid to match a single repo - `github.com/my-project/_*` will match all direct repos in `my-project` - `github.com/_**` matches all repos in GitHub
 * @member {Array.<String>} trustedSourceRepoPatterns
 */
VerificationRule.prototype['trustedSourceRepoPatterns'] = undefined;





/**
 * Allowed values for the <code>trustedBuilder</code> property.
 * @enum {String}
 * @readonly
 */
VerificationRule['TrustedBuilderEnum'] = {

    /**
     * value: "BUILDER_UNSPECIFIED"
     * @const
     */
    "BUILDER_UNSPECIFIED": "BUILDER_UNSPECIFIED",

    /**
     * value: "GOOGLE_CLOUD_BUILD"
     * @const
     */
    "GOOGLE_CLOUD_BUILD": "GOOGLE_CLOUD_BUILD"
};



export default VerificationRule;

