/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckSet from './CheckSet';
import ImageAllowlist from './ImageAllowlist';

/**
 * The GkePolicy model module.
 * @module model/GkePolicy
 * @version v1
 */
class GkePolicy {
    /**
     * Constructs a new <code>GkePolicy</code>.
     * A Binary Authorization policy for a GKE cluster. This is one type of policy that can occur as a &#x60;PlatformPolicy&#x60;.
     * @alias module:model/GkePolicy
     */
    constructor() { 
        
        GkePolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GkePolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GkePolicy} obj Optional instance to populate.
     * @return {module:model/GkePolicy} The populated <code>GkePolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GkePolicy();

            if (data.hasOwnProperty('checkSets')) {
                obj['checkSets'] = ApiClient.convertToType(data['checkSets'], [CheckSet]);
            }
            if (data.hasOwnProperty('imageAllowlist')) {
                obj['imageAllowlist'] = ImageAllowlist.constructFromObject(data['imageAllowlist']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GkePolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GkePolicy</code>.
     */
    static validateJSON(data) {
        if (data['checkSets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['checkSets'])) {
                throw new Error("Expected the field `checkSets` to be an array in the JSON data but got " + data['checkSets']);
            }
            // validate the optional field `checkSets` (array)
            for (const item of data['checkSets']) {
                CheckSet.validateJSON(item);
            };
        }
        // validate the optional field `imageAllowlist`
        if (data['imageAllowlist']) { // data not null
          ImageAllowlist.validateJSON(data['imageAllowlist']);
        }

        return true;
    }


}



/**
 * Optional. The `CheckSet` objects to apply, scoped by namespace or namespace and service account. Exactly one `CheckSet` will be evaluated for a given Pod (unless the list is empty, in which case the behavior is \"always allow\"). If multiple `CheckSet` objects have scopes that match the namespace and service account of the Pod being evaluated, only the `CheckSet` with the MOST SPECIFIC scope will match. `CheckSet` objects must be listed in order of decreasing specificity, i.e. if a scope matches a given service account (which must include the namespace), it must come before a `CheckSet` with a scope matching just that namespace. This property is enforced by server-side validation. The purpose of this restriction is to ensure that if more than one `CheckSet` matches a given Pod, the `CheckSet` that will be evaluated will always be the first in the list to match (because if any other matches, it must be less specific). If `check_sets` is empty, the default behavior is to allow all images. If `check_sets` is non-empty, the last `check_sets` entry must always be a `CheckSet` with no scope set, i.e. a catchall to handle any situation not caught by the preceding `CheckSet` objects.
 * @member {Array.<module:model/CheckSet>} checkSets
 */
GkePolicy.prototype['checkSets'] = undefined;

/**
 * @member {module:model/ImageAllowlist} imageAllowlist
 */
GkePolicy.prototype['imageAllowlist'] = undefined;






export default GkePolicy;

