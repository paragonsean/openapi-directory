/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PkixPublicKeySet from './PkixPublicKeySet';

/**
 * The AttestationAuthenticator model module.
 * @module model/AttestationAuthenticator
 * @version v1
 */
class AttestationAuthenticator {
    /**
     * Constructs a new <code>AttestationAuthenticator</code>.
     * An attestation authenticator that will be used to verify attestations. Typically this is just a set of public keys. Conceptually, an authenticator can be treated as always returning either \&quot;authenticated\&quot; or \&quot;not authenticated\&quot; when presented with a signed attestation (almost always assumed to be a [DSSE](https://github.com/secure-systems-lab/dsse) attestation). The details of how an authenticator makes this decision are specific to the type of &#39;authenticator&#39; that this message wraps.
     * @alias module:model/AttestationAuthenticator
     */
    constructor() { 
        
        AttestationAuthenticator.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttestationAuthenticator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttestationAuthenticator} obj Optional instance to populate.
     * @return {module:model/AttestationAuthenticator} The populated <code>AttestationAuthenticator</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttestationAuthenticator();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('pkixPublicKeySet')) {
                obj['pkixPublicKeySet'] = PkixPublicKeySet.constructFromObject(data['pkixPublicKeySet']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttestationAuthenticator</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttestationAuthenticator</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `pkixPublicKeySet`
        if (data['pkixPublicKeySet']) { // data not null
          PkixPublicKeySet.validateJSON(data['pkixPublicKeySet']);
        }

        return true;
    }


}



/**
 * Optional. A user-provided name for this `AttestationAuthenticator`. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.
 * @member {String} displayName
 */
AttestationAuthenticator.prototype['displayName'] = undefined;

/**
 * @member {module:model/PkixPublicKeySet} pkixPublicKeySet
 */
AttestationAuthenticator.prototype['pkixPublicKeySet'] = undefined;






export default AttestationAuthenticator;

