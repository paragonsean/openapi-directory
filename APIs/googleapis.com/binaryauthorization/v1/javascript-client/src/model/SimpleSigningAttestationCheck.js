/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttestationAuthenticator from './AttestationAuthenticator';

/**
 * The SimpleSigningAttestationCheck model module.
 * @module model/SimpleSigningAttestationCheck
 * @version v1
 */
class SimpleSigningAttestationCheck {
    /**
     * Constructs a new <code>SimpleSigningAttestationCheck</code>.
     * Require a signed [DSSE](https://github.com/secure-systems-lab/dsse) attestation with type SimpleSigning.
     * @alias module:model/SimpleSigningAttestationCheck
     */
    constructor() { 
        
        SimpleSigningAttestationCheck.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SimpleSigningAttestationCheck</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleSigningAttestationCheck} obj Optional instance to populate.
     * @return {module:model/SimpleSigningAttestationCheck} The populated <code>SimpleSigningAttestationCheck</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleSigningAttestationCheck();

            if (data.hasOwnProperty('attestationAuthenticators')) {
                obj['attestationAuthenticators'] = ApiClient.convertToType(data['attestationAuthenticators'], [AttestationAuthenticator]);
            }
            if (data.hasOwnProperty('containerAnalysisAttestationProjects')) {
                obj['containerAnalysisAttestationProjects'] = ApiClient.convertToType(data['containerAnalysisAttestationProjects'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimpleSigningAttestationCheck</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimpleSigningAttestationCheck</code>.
     */
    static validateJSON(data) {
        if (data['attestationAuthenticators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attestationAuthenticators'])) {
                throw new Error("Expected the field `attestationAuthenticators` to be an array in the JSON data but got " + data['attestationAuthenticators']);
            }
            // validate the optional field `attestationAuthenticators` (array)
            for (const item of data['attestationAuthenticators']) {
                AttestationAuthenticator.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['containerAnalysisAttestationProjects'])) {
            throw new Error("Expected the field `containerAnalysisAttestationProjects` to be an array in the JSON data but got " + data['containerAnalysisAttestationProjects']);
        }

        return true;
    }


}



/**
 * Required. The authenticators required by this check to verify an attestation. Typically this is one or more PKIX public keys for signature verification. Only one authenticator needs to consider an attestation verified in order for an attestation to be considered fully authenticated. In otherwords, this list of authenticators is an \"OR\" of the authenticator results. At least one authenticator is required.
 * @member {Array.<module:model/AttestationAuthenticator>} attestationAuthenticators
 */
SimpleSigningAttestationCheck.prototype['attestationAuthenticators'] = undefined;

/**
 * Optional. The projects where attestations are stored as Container Analysis Occurrences, in the format `projects/[PROJECT_ID]`. Only one attestation needs to successfully verify an image for this check to pass, so a single verified attestation found in any of `container_analysis_attestation_projects` is sufficient for the check to pass. When fetching Occurrences from Container Analysis, only `AttestationOccurrence` kinds are considered. In the future, additional Occurrence kinds may be added to the query. Maximum number of `container_analysis_attestation_projects` allowed in each `SimpleSigningAttestationCheck` is 10.
 * @member {Array.<String>} containerAnalysisAttestationProjects
 */
SimpleSigningAttestationCheck.prototype['containerAnalysisAttestationProjects'] = undefined;






export default SimpleSigningAttestationCheck;

