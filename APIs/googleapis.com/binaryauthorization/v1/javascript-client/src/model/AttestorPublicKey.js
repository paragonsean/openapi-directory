/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PkixPublicKey from './PkixPublicKey';

/**
 * The AttestorPublicKey model module.
 * @module model/AttestorPublicKey
 * @version v1
 */
class AttestorPublicKey {
    /**
     * Constructs a new <code>AttestorPublicKey</code>.
     * An attestor public key that will be used to verify attestations signed by this attestor.
     * @alias module:model/AttestorPublicKey
     */
    constructor() { 
        
        AttestorPublicKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttestorPublicKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttestorPublicKey} obj Optional instance to populate.
     * @return {module:model/AttestorPublicKey} The populated <code>AttestorPublicKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttestorPublicKey();

            if (data.hasOwnProperty('asciiArmoredPgpPublicKey')) {
                obj['asciiArmoredPgpPublicKey'] = ApiClient.convertToType(data['asciiArmoredPgpPublicKey'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('pkixPublicKey')) {
                obj['pkixPublicKey'] = PkixPublicKey.constructFromObject(data['pkixPublicKey']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttestorPublicKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttestorPublicKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['asciiArmoredPgpPublicKey'] && !(typeof data['asciiArmoredPgpPublicKey'] === 'string' || data['asciiArmoredPgpPublicKey'] instanceof String)) {
            throw new Error("Expected the field `asciiArmoredPgpPublicKey` to be a primitive type in the JSON string but got " + data['asciiArmoredPgpPublicKey']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `pkixPublicKey`
        if (data['pkixPublicKey']) { // data not null
          PkixPublicKey.validateJSON(data['pkixPublicKey']);
        }

        return true;
    }


}



/**
 * ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The Binary Authorization API handlers will calculate the ID and fill it in automatically. Binary Authorization computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID.
 * @member {String} asciiArmoredPgpPublicKey
 */
AttestorPublicKey.prototype['asciiArmoredPgpPublicKey'] = undefined;

/**
 * Optional. A descriptive comment. This field may be updated.
 * @member {String} comment
 */
AttestorPublicKey.prototype['comment'] = undefined;

/**
 * The ID of this public key. Signatures verified by Binary Authorization must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details.
 * @member {String} id
 */
AttestorPublicKey.prototype['id'] = undefined;

/**
 * @member {module:model/PkixPublicKey} pkixPublicKey
 */
AttestorPublicKey.prototype['pkixPublicKey'] = undefined;






export default AttestorPublicKey;

