/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PkixPublicKey model module.
 * @module model/PkixPublicKey
 * @version v1
 */
class PkixPublicKey {
    /**
     * Constructs a new <code>PkixPublicKey</code>.
     * A public key in the PkixPublicKey [format](https://tools.ietf.org/html/rfc5280#section-4.1.2.7). Public keys of this type are typically textually encoded using the PEM format.
     * @alias module:model/PkixPublicKey
     */
    constructor() { 
        
        PkixPublicKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PkixPublicKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PkixPublicKey} obj Optional instance to populate.
     * @return {module:model/PkixPublicKey} The populated <code>PkixPublicKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PkixPublicKey();

            if (data.hasOwnProperty('keyId')) {
                obj['keyId'] = ApiClient.convertToType(data['keyId'], 'String');
            }
            if (data.hasOwnProperty('publicKeyPem')) {
                obj['publicKeyPem'] = ApiClient.convertToType(data['publicKeyPem'], 'String');
            }
            if (data.hasOwnProperty('signatureAlgorithm')) {
                obj['signatureAlgorithm'] = ApiClient.convertToType(data['signatureAlgorithm'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PkixPublicKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PkixPublicKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keyId'] && !(typeof data['keyId'] === 'string' || data['keyId'] instanceof String)) {
            throw new Error("Expected the field `keyId` to be a primitive type in the JSON string but got " + data['keyId']);
        }
        // ensure the json data is a string
        if (data['publicKeyPem'] && !(typeof data['publicKeyPem'] === 'string' || data['publicKeyPem'] instanceof String)) {
            throw new Error("Expected the field `publicKeyPem` to be a primitive type in the JSON string but got " + data['publicKeyPem']);
        }
        // ensure the json data is a string
        if (data['signatureAlgorithm'] && !(typeof data['signatureAlgorithm'] === 'string' || data['signatureAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `signatureAlgorithm` to be a primitive type in the JSON string but got " + data['signatureAlgorithm']);
        }

        return true;
    }


}



/**
 * Optional. The ID of this public key. Signatures verified by Binary Authorization must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. This may be explicitly provided by the caller, but it MUST be a valid RFC3986 URI. If `key_id` is left blank and this `PkixPublicKey` is not used in the context of a wrapper (see next paragraph), a default key ID will be computed based on the digest of the DER encoding of the public key. If this `PkixPublicKey` is used in the context of a wrapper that has its own notion of key ID (e.g. `AttestorPublicKey`), then this field can either: * Match that value exactly. * Or be left blank, in which case it behaves exactly as though it is equal to that wrapper value.
 * @member {String} keyId
 */
PkixPublicKey.prototype['keyId'] = undefined;

/**
 * A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13
 * @member {String} publicKeyPem
 */
PkixPublicKey.prototype['publicKeyPem'] = undefined;

/**
 * The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).
 * @member {module:model/PkixPublicKey.SignatureAlgorithmEnum} signatureAlgorithm
 */
PkixPublicKey.prototype['signatureAlgorithm'] = undefined;





/**
 * Allowed values for the <code>signatureAlgorithm</code> property.
 * @enum {String}
 * @readonly
 */
PkixPublicKey['SignatureAlgorithmEnum'] = {

    /**
     * value: "SIGNATURE_ALGORITHM_UNSPECIFIED"
     * @const
     */
    "SIGNATURE_ALGORITHM_UNSPECIFIED": "SIGNATURE_ALGORITHM_UNSPECIFIED",

    /**
     * value: "RSA_PSS_2048_SHA256"
     * @const
     */
    "RSA_PSS_2048_SHA256": "RSA_PSS_2048_SHA256",

    /**
     * value: "RSA_SIGN_PSS_2048_SHA256"
     * @const
     */
    "RSA_SIGN_PSS_2048_SHA256": "RSA_SIGN_PSS_2048_SHA256",

    /**
     * value: "RSA_PSS_3072_SHA256"
     * @const
     */
    "RSA_PSS_3072_SHA256": "RSA_PSS_3072_SHA256",

    /**
     * value: "RSA_SIGN_PSS_3072_SHA256"
     * @const
     */
    "RSA_SIGN_PSS_3072_SHA256": "RSA_SIGN_PSS_3072_SHA256",

    /**
     * value: "RSA_PSS_4096_SHA256"
     * @const
     */
    "RSA_PSS_4096_SHA256": "RSA_PSS_4096_SHA256",

    /**
     * value: "RSA_SIGN_PSS_4096_SHA256"
     * @const
     */
    "RSA_SIGN_PSS_4096_SHA256": "RSA_SIGN_PSS_4096_SHA256",

    /**
     * value: "RSA_PSS_4096_SHA512"
     * @const
     */
    "RSA_PSS_4096_SHA512": "RSA_PSS_4096_SHA512",

    /**
     * value: "RSA_SIGN_PSS_4096_SHA512"
     * @const
     */
    "RSA_SIGN_PSS_4096_SHA512": "RSA_SIGN_PSS_4096_SHA512",

    /**
     * value: "RSA_SIGN_PKCS1_2048_SHA256"
     * @const
     */
    "RSA_SIGN_PKCS1_2048_SHA256": "RSA_SIGN_PKCS1_2048_SHA256",

    /**
     * value: "RSA_SIGN_PKCS1_3072_SHA256"
     * @const
     */
    "RSA_SIGN_PKCS1_3072_SHA256": "RSA_SIGN_PKCS1_3072_SHA256",

    /**
     * value: "RSA_SIGN_PKCS1_4096_SHA256"
     * @const
     */
    "RSA_SIGN_PKCS1_4096_SHA256": "RSA_SIGN_PKCS1_4096_SHA256",

    /**
     * value: "RSA_SIGN_PKCS1_4096_SHA512"
     * @const
     */
    "RSA_SIGN_PKCS1_4096_SHA512": "RSA_SIGN_PKCS1_4096_SHA512",

    /**
     * value: "ECDSA_P256_SHA256"
     * @const
     */
    "ECDSA_P256_SHA256": "ECDSA_P256_SHA256",

    /**
     * value: "EC_SIGN_P256_SHA256"
     * @const
     */
    "EC_SIGN_P256_SHA256": "EC_SIGN_P256_SHA256",

    /**
     * value: "ECDSA_P384_SHA384"
     * @const
     */
    "ECDSA_P384_SHA384": "ECDSA_P384_SHA384",

    /**
     * value: "EC_SIGN_P384_SHA384"
     * @const
     */
    "EC_SIGN_P384_SHA384": "EC_SIGN_P384_SHA384",

    /**
     * value: "ECDSA_P521_SHA512"
     * @const
     */
    "ECDSA_P521_SHA512": "ECDSA_P521_SHA512",

    /**
     * value: "EC_SIGN_P521_SHA512"
     * @const
     */
    "EC_SIGN_P521_SHA512": "EC_SIGN_P521_SHA512"
};



export default PkixPublicKey;

