# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attestation_source import AttestationSource
from openapi_server import util


class VerificationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attestation_source: AttestationSource=None, config_based_build_required: bool=None, trusted_builder: str=None, trusted_source_repo_patterns: List[str]=None):
        """VerificationRule - a model defined in OpenAPI

        :param attestation_source: The attestation_source of this VerificationRule.
        :param config_based_build_required: The config_based_build_required of this VerificationRule.
        :param trusted_builder: The trusted_builder of this VerificationRule.
        :param trusted_source_repo_patterns: The trusted_source_repo_patterns of this VerificationRule.
        """
        self.openapi_types = {
            'attestation_source': AttestationSource,
            'config_based_build_required': bool,
            'trusted_builder': str,
            'trusted_source_repo_patterns': List[str]
        }

        self.attribute_map = {
            'attestation_source': 'attestationSource',
            'config_based_build_required': 'configBasedBuildRequired',
            'trusted_builder': 'trustedBuilder',
            'trusted_source_repo_patterns': 'trustedSourceRepoPatterns'
        }

        self._attestation_source = attestation_source
        self._config_based_build_required = config_based_build_required
        self._trusted_builder = trusted_builder
        self._trusted_source_repo_patterns = trusted_source_repo_patterns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerificationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerificationRule of this VerificationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attestation_source(self):
        """Gets the attestation_source of this VerificationRule.


        :return: The attestation_source of this VerificationRule.
        :rtype: AttestationSource
        """
        return self._attestation_source

    @attestation_source.setter
    def attestation_source(self, attestation_source):
        """Sets the attestation_source of this VerificationRule.


        :param attestation_source: The attestation_source of this VerificationRule.
        :type attestation_source: AttestationSource
        """

        self._attestation_source = attestation_source

    @property
    def config_based_build_required(self):
        """Gets the config_based_build_required of this VerificationRule.

        If true, require the image to be built from a top-level configuration. `trusted_source_repo_patterns` specifies the repositories containing this configuration.

        :return: The config_based_build_required of this VerificationRule.
        :rtype: bool
        """
        return self._config_based_build_required

    @config_based_build_required.setter
    def config_based_build_required(self, config_based_build_required):
        """Sets the config_based_build_required of this VerificationRule.

        If true, require the image to be built from a top-level configuration. `trusted_source_repo_patterns` specifies the repositories containing this configuration.

        :param config_based_build_required: The config_based_build_required of this VerificationRule.
        :type config_based_build_required: bool
        """

        self._config_based_build_required = config_based_build_required

    @property
    def trusted_builder(self):
        """Gets the trusted_builder of this VerificationRule.

        Each verification rule is used for evaluation against provenances generated by a specific builder (group). For some of the builders, such as the Google Cloud Build, users don't need to explicitly specify their roots of trust in the policy since the evaluation service can automatically fetch them based on the builder (group).

        :return: The trusted_builder of this VerificationRule.
        :rtype: str
        """
        return self._trusted_builder

    @trusted_builder.setter
    def trusted_builder(self, trusted_builder):
        """Sets the trusted_builder of this VerificationRule.

        Each verification rule is used for evaluation against provenances generated by a specific builder (group). For some of the builders, such as the Google Cloud Build, users don't need to explicitly specify their roots of trust in the policy since the evaluation service can automatically fetch them based on the builder (group).

        :param trusted_builder: The trusted_builder of this VerificationRule.
        :type trusted_builder: str
        """
        allowed_values = ["BUILDER_UNSPECIFIED", "GOOGLE_CLOUD_BUILD"]  # noqa: E501
        if trusted_builder not in allowed_values:
            raise ValueError(
                "Invalid value for `trusted_builder` ({0}), must be one of {1}"
                .format(trusted_builder, allowed_values)
            )

        self._trusted_builder = trusted_builder

    @property
    def trusted_source_repo_patterns(self):
        """Gets the trusted_source_repo_patterns of this VerificationRule.

        List of trusted source code repository URL patterns. These patterns match the full repository URL without its scheme (e.g. `https://`). The patterns must not include schemes. For example, the pattern `source.cloud.google.com/my-project/my-repo-name` matches the following URLs: - `source.cloud.google.com/my-project/my-repo-name` - `git+ssh://source.cloud.google.com/my-project/my-repo-name` - `https://source.cloud.google.com/my-project/my-repo-name` A pattern matches a URL either exactly or with `*` wildcards. `*` can be used in only two ways: 1. trailing `*` after hosturi/ to match varying endings; 2. trailing `**` after hosturi/ to match `/` as well. `*` and `**` can only be used as wildcards and can only occur at the end of the pattern after a `/`. (So it's not possible to match a URL that contains literal `*`.) For example: - `github.com/my-project/my-repo` is valid to match a single repo - `github.com/my-project/*` will match all direct repos in `my-project` - `github.com/**` matches all repos in GitHub

        :return: The trusted_source_repo_patterns of this VerificationRule.
        :rtype: List[str]
        """
        return self._trusted_source_repo_patterns

    @trusted_source_repo_patterns.setter
    def trusted_source_repo_patterns(self, trusted_source_repo_patterns):
        """Sets the trusted_source_repo_patterns of this VerificationRule.

        List of trusted source code repository URL patterns. These patterns match the full repository URL without its scheme (e.g. `https://`). The patterns must not include schemes. For example, the pattern `source.cloud.google.com/my-project/my-repo-name` matches the following URLs: - `source.cloud.google.com/my-project/my-repo-name` - `git+ssh://source.cloud.google.com/my-project/my-repo-name` - `https://source.cloud.google.com/my-project/my-repo-name` A pattern matches a URL either exactly or with `*` wildcards. `*` can be used in only two ways: 1. trailing `*` after hosturi/ to match varying endings; 2. trailing `**` after hosturi/ to match `/` as well. `*` and `**` can only be used as wildcards and can only occur at the end of the pattern after a `/`. (So it's not possible to match a URL that contains literal `*`.) For example: - `github.com/my-project/my-repo` is valid to match a single repo - `github.com/my-project/*` will match all direct repos in `my-project` - `github.com/**` matches all repos in GitHub

        :param trusted_source_repo_patterns: The trusted_source_repo_patterns of this VerificationRule.
        :type trusted_source_repo_patterns: List[str]
        """

        self._trusted_source_repo_patterns = trusted_source_repo_patterns
