# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_result import ImageResult
from openapi_server import util


class PodResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_results: List[ImageResult]=None, kubernetes_namespace: str=None, kubernetes_service_account: str=None, pod_name: str=None, verdict: str=None):
        """PodResult - a model defined in OpenAPI

        :param image_results: The image_results of this PodResult.
        :param kubernetes_namespace: The kubernetes_namespace of this PodResult.
        :param kubernetes_service_account: The kubernetes_service_account of this PodResult.
        :param pod_name: The pod_name of this PodResult.
        :param verdict: The verdict of this PodResult.
        """
        self.openapi_types = {
            'image_results': List[ImageResult],
            'kubernetes_namespace': str,
            'kubernetes_service_account': str,
            'pod_name': str,
            'verdict': str
        }

        self.attribute_map = {
            'image_results': 'imageResults',
            'kubernetes_namespace': 'kubernetesNamespace',
            'kubernetes_service_account': 'kubernetesServiceAccount',
            'pod_name': 'podName',
            'verdict': 'verdict'
        }

        self._image_results = image_results
        self._kubernetes_namespace = kubernetes_namespace
        self._kubernetes_service_account = kubernetes_service_account
        self._pod_name = pod_name
        self._verdict = verdict

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PodResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PodResult of this PodResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_results(self):
        """Gets the image_results of this PodResult.

        Per-image details.

        :return: The image_results of this PodResult.
        :rtype: List[ImageResult]
        """
        return self._image_results

    @image_results.setter
    def image_results(self, image_results):
        """Sets the image_results of this PodResult.

        Per-image details.

        :param image_results: The image_results of this PodResult.
        :type image_results: List[ImageResult]
        """

        self._image_results = image_results

    @property
    def kubernetes_namespace(self):
        """Gets the kubernetes_namespace of this PodResult.

        The Kubernetes namespace of the Pod.

        :return: The kubernetes_namespace of this PodResult.
        :rtype: str
        """
        return self._kubernetes_namespace

    @kubernetes_namespace.setter
    def kubernetes_namespace(self, kubernetes_namespace):
        """Sets the kubernetes_namespace of this PodResult.

        The Kubernetes namespace of the Pod.

        :param kubernetes_namespace: The kubernetes_namespace of this PodResult.
        :type kubernetes_namespace: str
        """

        self._kubernetes_namespace = kubernetes_namespace

    @property
    def kubernetes_service_account(self):
        """Gets the kubernetes_service_account of this PodResult.

        The Kubernetes service account of the Pod.

        :return: The kubernetes_service_account of this PodResult.
        :rtype: str
        """
        return self._kubernetes_service_account

    @kubernetes_service_account.setter
    def kubernetes_service_account(self, kubernetes_service_account):
        """Sets the kubernetes_service_account of this PodResult.

        The Kubernetes service account of the Pod.

        :param kubernetes_service_account: The kubernetes_service_account of this PodResult.
        :type kubernetes_service_account: str
        """

        self._kubernetes_service_account = kubernetes_service_account

    @property
    def pod_name(self):
        """Gets the pod_name of this PodResult.

        The name of the Pod.

        :return: The pod_name of this PodResult.
        :rtype: str
        """
        return self._pod_name

    @pod_name.setter
    def pod_name(self, pod_name):
        """Sets the pod_name of this PodResult.

        The name of the Pod.

        :param pod_name: The pod_name of this PodResult.
        :type pod_name: str
        """

        self._pod_name = pod_name

    @property
    def verdict(self):
        """Gets the verdict of this PodResult.

        The result of evaluating this Pod.

        :return: The verdict of this PodResult.
        :rtype: str
        """
        return self._verdict

    @verdict.setter
    def verdict(self, verdict):
        """Sets the verdict of this PodResult.

        The result of evaluating this Pod.

        :param verdict: The verdict of this PodResult.
        :type verdict: str
        """
        allowed_values = ["POD_VERDICT_UNSPECIFIED", "CONFORMANT", "NON_CONFORMANT", "ERROR"]  # noqa: E501
        if verdict not in allowed_values:
            raise ValueError(
                "Invalid value for `verdict` ({0}), must be one of {1}"
                .format(verdict, allowed_values)
            )

        self._verdict = verdict
