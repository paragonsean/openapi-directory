# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Scope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kubernetes_namespace: str=None, kubernetes_service_account: str=None):
        """Scope - a model defined in OpenAPI

        :param kubernetes_namespace: The kubernetes_namespace of this Scope.
        :param kubernetes_service_account: The kubernetes_service_account of this Scope.
        """
        self.openapi_types = {
            'kubernetes_namespace': str,
            'kubernetes_service_account': str
        }

        self.attribute_map = {
            'kubernetes_namespace': 'kubernetesNamespace',
            'kubernetes_service_account': 'kubernetesServiceAccount'
        }

        self._kubernetes_namespace = kubernetes_namespace
        self._kubernetes_service_account = kubernetes_service_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Scope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Scope of this Scope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kubernetes_namespace(self):
        """Gets the kubernetes_namespace of this Scope.

        Optional. Matches all Kubernetes service accounts in the provided namespace, unless a more specific `kubernetes_service_account` scope already matched.

        :return: The kubernetes_namespace of this Scope.
        :rtype: str
        """
        return self._kubernetes_namespace

    @kubernetes_namespace.setter
    def kubernetes_namespace(self, kubernetes_namespace):
        """Sets the kubernetes_namespace of this Scope.

        Optional. Matches all Kubernetes service accounts in the provided namespace, unless a more specific `kubernetes_service_account` scope already matched.

        :param kubernetes_namespace: The kubernetes_namespace of this Scope.
        :type kubernetes_namespace: str
        """

        self._kubernetes_namespace = kubernetes_namespace

    @property
    def kubernetes_service_account(self):
        """Gets the kubernetes_service_account of this Scope.

        Optional. Matches a single Kubernetes service account, e.g. `my-namespace:my-service-account`. `kubernetes_service_account` scope is always more specific than `kubernetes_namespace` scope for the same namespace.

        :return: The kubernetes_service_account of this Scope.
        :rtype: str
        """
        return self._kubernetes_service_account

    @kubernetes_service_account.setter
    def kubernetes_service_account(self, kubernetes_service_account):
        """Sets the kubernetes_service_account of this Scope.

        Optional. Matches a single Kubernetes service account, e.g. `my-namespace:my-service-account`. `kubernetes_service_account` scope is always more specific than `kubernetes_namespace` scope for the same namespace.

        :param kubernetes_service_account: The kubernetes_service_account of this Scope.
        :type kubernetes_service_account: str
        """

        self._kubernetes_service_account = kubernetes_service_account
