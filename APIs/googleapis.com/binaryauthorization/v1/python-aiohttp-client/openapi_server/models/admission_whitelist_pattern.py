# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdmissionWhitelistPattern(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name_pattern: str=None):
        """AdmissionWhitelistPattern - a model defined in OpenAPI

        :param name_pattern: The name_pattern of this AdmissionWhitelistPattern.
        """
        self.openapi_types = {
            'name_pattern': str
        }

        self.attribute_map = {
            'name_pattern': 'namePattern'
        }

        self._name_pattern = name_pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdmissionWhitelistPattern':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdmissionWhitelistPattern of this AdmissionWhitelistPattern.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name_pattern(self):
        """Gets the name_pattern of this AdmissionWhitelistPattern.

        An image name pattern to allowlist, in the form `registry/path/to/image`. This supports a trailing `*` wildcard, but this is allowed only in text after the `registry/` part. This also supports a trailing `**` wildcard which matches subdirectories of a given entry.

        :return: The name_pattern of this AdmissionWhitelistPattern.
        :rtype: str
        """
        return self._name_pattern

    @name_pattern.setter
    def name_pattern(self, name_pattern):
        """Sets the name_pattern of this AdmissionWhitelistPattern.

        An image name pattern to allowlist, in the form `registry/path/to/image`. This supports a trailing `*` wildcard, but this is allowed only in text after the `registry/` part. This also supports a trailing `**` wildcard which matches subdirectories of a given entry.

        :param name_pattern: The name_pattern of this AdmissionWhitelistPattern.
        :type name_pattern: str
        """

        self._name_pattern = name_pattern
