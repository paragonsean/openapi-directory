# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_set import CheckSet
from openapi_server.models.image_allowlist import ImageAllowlist
from openapi_server import util


class GkePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_sets: List[CheckSet]=None, image_allowlist: ImageAllowlist=None):
        """GkePolicy - a model defined in OpenAPI

        :param check_sets: The check_sets of this GkePolicy.
        :param image_allowlist: The image_allowlist of this GkePolicy.
        """
        self.openapi_types = {
            'check_sets': List[CheckSet],
            'image_allowlist': ImageAllowlist
        }

        self.attribute_map = {
            'check_sets': 'checkSets',
            'image_allowlist': 'imageAllowlist'
        }

        self._check_sets = check_sets
        self._image_allowlist = image_allowlist

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GkePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GkePolicy of this GkePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_sets(self):
        """Gets the check_sets of this GkePolicy.

        Optional. The `CheckSet` objects to apply, scoped by namespace or namespace and service account. Exactly one `CheckSet` will be evaluated for a given Pod (unless the list is empty, in which case the behavior is \"always allow\"). If multiple `CheckSet` objects have scopes that match the namespace and service account of the Pod being evaluated, only the `CheckSet` with the MOST SPECIFIC scope will match. `CheckSet` objects must be listed in order of decreasing specificity, i.e. if a scope matches a given service account (which must include the namespace), it must come before a `CheckSet` with a scope matching just that namespace. This property is enforced by server-side validation. The purpose of this restriction is to ensure that if more than one `CheckSet` matches a given Pod, the `CheckSet` that will be evaluated will always be the first in the list to match (because if any other matches, it must be less specific). If `check_sets` is empty, the default behavior is to allow all images. If `check_sets` is non-empty, the last `check_sets` entry must always be a `CheckSet` with no scope set, i.e. a catchall to handle any situation not caught by the preceding `CheckSet` objects.

        :return: The check_sets of this GkePolicy.
        :rtype: List[CheckSet]
        """
        return self._check_sets

    @check_sets.setter
    def check_sets(self, check_sets):
        """Sets the check_sets of this GkePolicy.

        Optional. The `CheckSet` objects to apply, scoped by namespace or namespace and service account. Exactly one `CheckSet` will be evaluated for a given Pod (unless the list is empty, in which case the behavior is \"always allow\"). If multiple `CheckSet` objects have scopes that match the namespace and service account of the Pod being evaluated, only the `CheckSet` with the MOST SPECIFIC scope will match. `CheckSet` objects must be listed in order of decreasing specificity, i.e. if a scope matches a given service account (which must include the namespace), it must come before a `CheckSet` with a scope matching just that namespace. This property is enforced by server-side validation. The purpose of this restriction is to ensure that if more than one `CheckSet` matches a given Pod, the `CheckSet` that will be evaluated will always be the first in the list to match (because if any other matches, it must be less specific). If `check_sets` is empty, the default behavior is to allow all images. If `check_sets` is non-empty, the last `check_sets` entry must always be a `CheckSet` with no scope set, i.e. a catchall to handle any situation not caught by the preceding `CheckSet` objects.

        :param check_sets: The check_sets of this GkePolicy.
        :type check_sets: List[CheckSet]
        """

        self._check_sets = check_sets

    @property
    def image_allowlist(self):
        """Gets the image_allowlist of this GkePolicy.


        :return: The image_allowlist of this GkePolicy.
        :rtype: ImageAllowlist
        """
        return self._image_allowlist

    @image_allowlist.setter
    def image_allowlist(self, image_allowlist):
        """Sets the image_allowlist of this GkePolicy.


        :param image_allowlist: The image_allowlist of this GkePolicy.
        :type image_allowlist: ImageAllowlist
        """

        self._image_allowlist = image_allowlist
