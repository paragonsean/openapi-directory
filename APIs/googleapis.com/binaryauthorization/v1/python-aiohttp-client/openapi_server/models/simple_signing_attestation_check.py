# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attestation_authenticator import AttestationAuthenticator
from openapi_server import util


class SimpleSigningAttestationCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attestation_authenticators: List[AttestationAuthenticator]=None, container_analysis_attestation_projects: List[str]=None):
        """SimpleSigningAttestationCheck - a model defined in OpenAPI

        :param attestation_authenticators: The attestation_authenticators of this SimpleSigningAttestationCheck.
        :param container_analysis_attestation_projects: The container_analysis_attestation_projects of this SimpleSigningAttestationCheck.
        """
        self.openapi_types = {
            'attestation_authenticators': List[AttestationAuthenticator],
            'container_analysis_attestation_projects': List[str]
        }

        self.attribute_map = {
            'attestation_authenticators': 'attestationAuthenticators',
            'container_analysis_attestation_projects': 'containerAnalysisAttestationProjects'
        }

        self._attestation_authenticators = attestation_authenticators
        self._container_analysis_attestation_projects = container_analysis_attestation_projects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimpleSigningAttestationCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SimpleSigningAttestationCheck of this SimpleSigningAttestationCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attestation_authenticators(self):
        """Gets the attestation_authenticators of this SimpleSigningAttestationCheck.

        Required. The authenticators required by this check to verify an attestation. Typically this is one or more PKIX public keys for signature verification. Only one authenticator needs to consider an attestation verified in order for an attestation to be considered fully authenticated. In otherwords, this list of authenticators is an \"OR\" of the authenticator results. At least one authenticator is required.

        :return: The attestation_authenticators of this SimpleSigningAttestationCheck.
        :rtype: List[AttestationAuthenticator]
        """
        return self._attestation_authenticators

    @attestation_authenticators.setter
    def attestation_authenticators(self, attestation_authenticators):
        """Sets the attestation_authenticators of this SimpleSigningAttestationCheck.

        Required. The authenticators required by this check to verify an attestation. Typically this is one or more PKIX public keys for signature verification. Only one authenticator needs to consider an attestation verified in order for an attestation to be considered fully authenticated. In otherwords, this list of authenticators is an \"OR\" of the authenticator results. At least one authenticator is required.

        :param attestation_authenticators: The attestation_authenticators of this SimpleSigningAttestationCheck.
        :type attestation_authenticators: List[AttestationAuthenticator]
        """

        self._attestation_authenticators = attestation_authenticators

    @property
    def container_analysis_attestation_projects(self):
        """Gets the container_analysis_attestation_projects of this SimpleSigningAttestationCheck.

        Optional. The projects where attestations are stored as Container Analysis Occurrences, in the format `projects/[PROJECT_ID]`. Only one attestation needs to successfully verify an image for this check to pass, so a single verified attestation found in any of `container_analysis_attestation_projects` is sufficient for the check to pass. When fetching Occurrences from Container Analysis, only `AttestationOccurrence` kinds are considered. In the future, additional Occurrence kinds may be added to the query. Maximum number of `container_analysis_attestation_projects` allowed in each `SimpleSigningAttestationCheck` is 10.

        :return: The container_analysis_attestation_projects of this SimpleSigningAttestationCheck.
        :rtype: List[str]
        """
        return self._container_analysis_attestation_projects

    @container_analysis_attestation_projects.setter
    def container_analysis_attestation_projects(self, container_analysis_attestation_projects):
        """Sets the container_analysis_attestation_projects of this SimpleSigningAttestationCheck.

        Optional. The projects where attestations are stored as Container Analysis Occurrences, in the format `projects/[PROJECT_ID]`. Only one attestation needs to successfully verify an image for this check to pass, so a single verified attestation found in any of `container_analysis_attestation_projects` is sufficient for the check to pass. When fetching Occurrences from Container Analysis, only `AttestationOccurrence` kinds are considered. In the future, additional Occurrence kinds may be added to the query. Maximum number of `container_analysis_attestation_projects` allowed in each `SimpleSigningAttestationCheck` is 10.

        :param container_analysis_attestation_projects: The container_analysis_attestation_projects of this SimpleSigningAttestationCheck.
        :type container_analysis_attestation_projects: List[str]
        """

        self._container_analysis_attestation_projects = container_analysis_attestation_projects
