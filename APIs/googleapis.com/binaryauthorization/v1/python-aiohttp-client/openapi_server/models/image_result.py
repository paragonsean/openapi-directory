# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allowlist_result import AllowlistResult
from openapi_server.models.check_set_result import CheckSetResult
from openapi_server import util


class ImageResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowlist_result: AllowlistResult=None, check_set_result: CheckSetResult=None, explanation: str=None, image_uri: str=None, verdict: str=None):
        """ImageResult - a model defined in OpenAPI

        :param allowlist_result: The allowlist_result of this ImageResult.
        :param check_set_result: The check_set_result of this ImageResult.
        :param explanation: The explanation of this ImageResult.
        :param image_uri: The image_uri of this ImageResult.
        :param verdict: The verdict of this ImageResult.
        """
        self.openapi_types = {
            'allowlist_result': AllowlistResult,
            'check_set_result': CheckSetResult,
            'explanation': str,
            'image_uri': str,
            'verdict': str
        }

        self.attribute_map = {
            'allowlist_result': 'allowlistResult',
            'check_set_result': 'checkSetResult',
            'explanation': 'explanation',
            'image_uri': 'imageUri',
            'verdict': 'verdict'
        }

        self._allowlist_result = allowlist_result
        self._check_set_result = check_set_result
        self._explanation = explanation
        self._image_uri = image_uri
        self._verdict = verdict

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageResult of this ImageResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowlist_result(self):
        """Gets the allowlist_result of this ImageResult.


        :return: The allowlist_result of this ImageResult.
        :rtype: AllowlistResult
        """
        return self._allowlist_result

    @allowlist_result.setter
    def allowlist_result(self, allowlist_result):
        """Sets the allowlist_result of this ImageResult.


        :param allowlist_result: The allowlist_result of this ImageResult.
        :type allowlist_result: AllowlistResult
        """

        self._allowlist_result = allowlist_result

    @property
    def check_set_result(self):
        """Gets the check_set_result of this ImageResult.


        :return: The check_set_result of this ImageResult.
        :rtype: CheckSetResult
        """
        return self._check_set_result

    @check_set_result.setter
    def check_set_result(self, check_set_result):
        """Sets the check_set_result of this ImageResult.


        :param check_set_result: The check_set_result of this ImageResult.
        :type check_set_result: CheckSetResult
        """

        self._check_set_result = check_set_result

    @property
    def explanation(self):
        """Gets the explanation of this ImageResult.

        Explanation of this image result. Only populated if no check sets were evaluated.

        :return: The explanation of this ImageResult.
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this ImageResult.

        Explanation of this image result. Only populated if no check sets were evaluated.

        :param explanation: The explanation of this ImageResult.
        :type explanation: str
        """

        self._explanation = explanation

    @property
    def image_uri(self):
        """Gets the image_uri of this ImageResult.

        Image URI from the request.

        :return: The image_uri of this ImageResult.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this ImageResult.

        Image URI from the request.

        :param image_uri: The image_uri of this ImageResult.
        :type image_uri: str
        """

        self._image_uri = image_uri

    @property
    def verdict(self):
        """Gets the verdict of this ImageResult.

        The result of evaluating this image.

        :return: The verdict of this ImageResult.
        :rtype: str
        """
        return self._verdict

    @verdict.setter
    def verdict(self, verdict):
        """Sets the verdict of this ImageResult.

        The result of evaluating this image.

        :param verdict: The verdict of this ImageResult.
        :type verdict: str
        """
        allowed_values = ["IMAGE_VERDICT_UNSPECIFIED", "CONFORMANT", "NON_CONFORMANT", "ERROR"]  # noqa: E501
        if verdict not in allowed_values:
            raise ValueError(
                "Invalid value for `verdict` ({0}), must be one of {1}"
                .format(verdict, allowed_values)
            )

        self._verdict = verdict
