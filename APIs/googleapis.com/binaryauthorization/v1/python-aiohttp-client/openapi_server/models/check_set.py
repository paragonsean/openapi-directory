# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check import Check
from openapi_server.models.image_allowlist import ImageAllowlist
from openapi_server.models.scope import Scope
from openapi_server import util


class CheckSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checks: List[Check]=None, display_name: str=None, image_allowlist: ImageAllowlist=None, scope: Scope=None):
        """CheckSet - a model defined in OpenAPI

        :param checks: The checks of this CheckSet.
        :param display_name: The display_name of this CheckSet.
        :param image_allowlist: The image_allowlist of this CheckSet.
        :param scope: The scope of this CheckSet.
        """
        self.openapi_types = {
            'checks': List[Check],
            'display_name': str,
            'image_allowlist': ImageAllowlist,
            'scope': Scope
        }

        self.attribute_map = {
            'checks': 'checks',
            'display_name': 'displayName',
            'image_allowlist': 'imageAllowlist',
            'scope': 'scope'
        }

        self._checks = checks
        self._display_name = display_name
        self._image_allowlist = image_allowlist
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckSet of this CheckSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checks(self):
        """Gets the checks of this CheckSet.

        Optional. The checks to apply. The ultimate result of evaluating the check set will be \"allow\" if and only if every check in `checks` evaluates to \"allow\". If `checks` is empty, the default behavior is \"always allow\".

        :return: The checks of this CheckSet.
        :rtype: List[Check]
        """
        return self._checks

    @checks.setter
    def checks(self, checks):
        """Sets the checks of this CheckSet.

        Optional. The checks to apply. The ultimate result of evaluating the check set will be \"allow\" if and only if every check in `checks` evaluates to \"allow\". If `checks` is empty, the default behavior is \"always allow\".

        :param checks: The checks of this CheckSet.
        :type checks: List[Check]
        """

        self._checks = checks

    @property
    def display_name(self):
        """Gets the display_name of this CheckSet.

        Optional. A user-provided name for this `CheckSet`. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.

        :return: The display_name of this CheckSet.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CheckSet.

        Optional. A user-provided name for this `CheckSet`. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.

        :param display_name: The display_name of this CheckSet.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def image_allowlist(self):
        """Gets the image_allowlist of this CheckSet.


        :return: The image_allowlist of this CheckSet.
        :rtype: ImageAllowlist
        """
        return self._image_allowlist

    @image_allowlist.setter
    def image_allowlist(self, image_allowlist):
        """Sets the image_allowlist of this CheckSet.


        :param image_allowlist: The image_allowlist of this CheckSet.
        :type image_allowlist: ImageAllowlist
        """

        self._image_allowlist = image_allowlist

    @property
    def scope(self):
        """Gets the scope of this CheckSet.


        :return: The scope of this CheckSet.
        :rtype: Scope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CheckSet.


        :param scope: The scope of this CheckSet.
        :type scope: Scope
        """

        self._scope = scope
