# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_allowlist import ImageAllowlist
from openapi_server.models.image_freshness_check import ImageFreshnessCheck
from openapi_server.models.sigstore_signature_check import SigstoreSignatureCheck
from openapi_server.models.simple_signing_attestation_check import SimpleSigningAttestationCheck
from openapi_server.models.slsa_check import SlsaCheck
from openapi_server.models.trusted_directory_check import TrustedDirectoryCheck
from openapi_server.models.vulnerability_check import VulnerabilityCheck
from openapi_server import util


class Check(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, always_deny: bool=None, display_name: str=None, image_allowlist: ImageAllowlist=None, image_freshness_check: ImageFreshnessCheck=None, sigstore_signature_check: SigstoreSignatureCheck=None, simple_signing_attestation_check: SimpleSigningAttestationCheck=None, slsa_check: SlsaCheck=None, trusted_directory_check: TrustedDirectoryCheck=None, vulnerability_check: VulnerabilityCheck=None):
        """Check - a model defined in OpenAPI

        :param always_deny: The always_deny of this Check.
        :param display_name: The display_name of this Check.
        :param image_allowlist: The image_allowlist of this Check.
        :param image_freshness_check: The image_freshness_check of this Check.
        :param sigstore_signature_check: The sigstore_signature_check of this Check.
        :param simple_signing_attestation_check: The simple_signing_attestation_check of this Check.
        :param slsa_check: The slsa_check of this Check.
        :param trusted_directory_check: The trusted_directory_check of this Check.
        :param vulnerability_check: The vulnerability_check of this Check.
        """
        self.openapi_types = {
            'always_deny': bool,
            'display_name': str,
            'image_allowlist': ImageAllowlist,
            'image_freshness_check': ImageFreshnessCheck,
            'sigstore_signature_check': SigstoreSignatureCheck,
            'simple_signing_attestation_check': SimpleSigningAttestationCheck,
            'slsa_check': SlsaCheck,
            'trusted_directory_check': TrustedDirectoryCheck,
            'vulnerability_check': VulnerabilityCheck
        }

        self.attribute_map = {
            'always_deny': 'alwaysDeny',
            'display_name': 'displayName',
            'image_allowlist': 'imageAllowlist',
            'image_freshness_check': 'imageFreshnessCheck',
            'sigstore_signature_check': 'sigstoreSignatureCheck',
            'simple_signing_attestation_check': 'simpleSigningAttestationCheck',
            'slsa_check': 'slsaCheck',
            'trusted_directory_check': 'trustedDirectoryCheck',
            'vulnerability_check': 'vulnerabilityCheck'
        }

        self._always_deny = always_deny
        self._display_name = display_name
        self._image_allowlist = image_allowlist
        self._image_freshness_check = image_freshness_check
        self._sigstore_signature_check = sigstore_signature_check
        self._simple_signing_attestation_check = simple_signing_attestation_check
        self._slsa_check = slsa_check
        self._trusted_directory_check = trusted_directory_check
        self._vulnerability_check = vulnerability_check

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Check':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check of this Check.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def always_deny(self):
        """Gets the always_deny of this Check.

        Optional. A special-case check that always denies. Note that this still only applies when the scope of the `CheckSet` applies and the image isn't exempted by an image allowlist. This check is primarily useful for testing, or to set the default behavior for all unmatched scopes to \"deny\".

        :return: The always_deny of this Check.
        :rtype: bool
        """
        return self._always_deny

    @always_deny.setter
    def always_deny(self, always_deny):
        """Sets the always_deny of this Check.

        Optional. A special-case check that always denies. Note that this still only applies when the scope of the `CheckSet` applies and the image isn't exempted by an image allowlist. This check is primarily useful for testing, or to set the default behavior for all unmatched scopes to \"deny\".

        :param always_deny: The always_deny of this Check.
        :type always_deny: bool
        """

        self._always_deny = always_deny

    @property
    def display_name(self):
        """Gets the display_name of this Check.

        Optional. A user-provided name for this check. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.

        :return: The display_name of this Check.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Check.

        Optional. A user-provided name for this check. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.

        :param display_name: The display_name of this Check.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def image_allowlist(self):
        """Gets the image_allowlist of this Check.


        :return: The image_allowlist of this Check.
        :rtype: ImageAllowlist
        """
        return self._image_allowlist

    @image_allowlist.setter
    def image_allowlist(self, image_allowlist):
        """Sets the image_allowlist of this Check.


        :param image_allowlist: The image_allowlist of this Check.
        :type image_allowlist: ImageAllowlist
        """

        self._image_allowlist = image_allowlist

    @property
    def image_freshness_check(self):
        """Gets the image_freshness_check of this Check.


        :return: The image_freshness_check of this Check.
        :rtype: ImageFreshnessCheck
        """
        return self._image_freshness_check

    @image_freshness_check.setter
    def image_freshness_check(self, image_freshness_check):
        """Sets the image_freshness_check of this Check.


        :param image_freshness_check: The image_freshness_check of this Check.
        :type image_freshness_check: ImageFreshnessCheck
        """

        self._image_freshness_check = image_freshness_check

    @property
    def sigstore_signature_check(self):
        """Gets the sigstore_signature_check of this Check.


        :return: The sigstore_signature_check of this Check.
        :rtype: SigstoreSignatureCheck
        """
        return self._sigstore_signature_check

    @sigstore_signature_check.setter
    def sigstore_signature_check(self, sigstore_signature_check):
        """Sets the sigstore_signature_check of this Check.


        :param sigstore_signature_check: The sigstore_signature_check of this Check.
        :type sigstore_signature_check: SigstoreSignatureCheck
        """

        self._sigstore_signature_check = sigstore_signature_check

    @property
    def simple_signing_attestation_check(self):
        """Gets the simple_signing_attestation_check of this Check.


        :return: The simple_signing_attestation_check of this Check.
        :rtype: SimpleSigningAttestationCheck
        """
        return self._simple_signing_attestation_check

    @simple_signing_attestation_check.setter
    def simple_signing_attestation_check(self, simple_signing_attestation_check):
        """Sets the simple_signing_attestation_check of this Check.


        :param simple_signing_attestation_check: The simple_signing_attestation_check of this Check.
        :type simple_signing_attestation_check: SimpleSigningAttestationCheck
        """

        self._simple_signing_attestation_check = simple_signing_attestation_check

    @property
    def slsa_check(self):
        """Gets the slsa_check of this Check.


        :return: The slsa_check of this Check.
        :rtype: SlsaCheck
        """
        return self._slsa_check

    @slsa_check.setter
    def slsa_check(self, slsa_check):
        """Sets the slsa_check of this Check.


        :param slsa_check: The slsa_check of this Check.
        :type slsa_check: SlsaCheck
        """

        self._slsa_check = slsa_check

    @property
    def trusted_directory_check(self):
        """Gets the trusted_directory_check of this Check.


        :return: The trusted_directory_check of this Check.
        :rtype: TrustedDirectoryCheck
        """
        return self._trusted_directory_check

    @trusted_directory_check.setter
    def trusted_directory_check(self, trusted_directory_check):
        """Sets the trusted_directory_check of this Check.


        :param trusted_directory_check: The trusted_directory_check of this Check.
        :type trusted_directory_check: TrustedDirectoryCheck
        """

        self._trusted_directory_check = trusted_directory_check

    @property
    def vulnerability_check(self):
        """Gets the vulnerability_check of this Check.


        :return: The vulnerability_check of this Check.
        :rtype: VulnerabilityCheck
        """
        return self._vulnerability_check

    @vulnerability_check.setter
    def vulnerability_check(self, vulnerability_check):
        """Sets the vulnerability_check of this Check.


        :param vulnerability_check: The vulnerability_check of this Check.
        :type vulnerability_check: VulnerabilityCheck
        """

        self._vulnerability_check = vulnerability_check
