# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VulnerabilityCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_cves: List[str]=None, blocked_cves: List[str]=None, container_analysis_vulnerability_projects: List[str]=None, maximum_fixable_severity: str=None, maximum_unfixable_severity: str=None):
        """VulnerabilityCheck - a model defined in OpenAPI

        :param allowed_cves: The allowed_cves of this VulnerabilityCheck.
        :param blocked_cves: The blocked_cves of this VulnerabilityCheck.
        :param container_analysis_vulnerability_projects: The container_analysis_vulnerability_projects of this VulnerabilityCheck.
        :param maximum_fixable_severity: The maximum_fixable_severity of this VulnerabilityCheck.
        :param maximum_unfixable_severity: The maximum_unfixable_severity of this VulnerabilityCheck.
        """
        self.openapi_types = {
            'allowed_cves': List[str],
            'blocked_cves': List[str],
            'container_analysis_vulnerability_projects': List[str],
            'maximum_fixable_severity': str,
            'maximum_unfixable_severity': str
        }

        self.attribute_map = {
            'allowed_cves': 'allowedCves',
            'blocked_cves': 'blockedCves',
            'container_analysis_vulnerability_projects': 'containerAnalysisVulnerabilityProjects',
            'maximum_fixable_severity': 'maximumFixableSeverity',
            'maximum_unfixable_severity': 'maximumUnfixableSeverity'
        }

        self._allowed_cves = allowed_cves
        self._blocked_cves = blocked_cves
        self._container_analysis_vulnerability_projects = container_analysis_vulnerability_projects
        self._maximum_fixable_severity = maximum_fixable_severity
        self._maximum_unfixable_severity = maximum_unfixable_severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VulnerabilityCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VulnerabilityCheck of this VulnerabilityCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_cves(self):
        """Gets the allowed_cves of this VulnerabilityCheck.

        Optional. A list of specific CVEs to ignore even if the vulnerability level violates `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will allow vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.

        :return: The allowed_cves of this VulnerabilityCheck.
        :rtype: List[str]
        """
        return self._allowed_cves

    @allowed_cves.setter
    def allowed_cves(self, allowed_cves):
        """Sets the allowed_cves of this VulnerabilityCheck.

        Optional. A list of specific CVEs to ignore even if the vulnerability level violates `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will allow vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.

        :param allowed_cves: The allowed_cves of this VulnerabilityCheck.
        :type allowed_cves: List[str]
        """

        self._allowed_cves = allowed_cves

    @property
    def blocked_cves(self):
        """Gets the blocked_cves of this VulnerabilityCheck.

        Optional. A list of specific CVEs to always raise warnings about even if the vulnerability level meets `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will block vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.

        :return: The blocked_cves of this VulnerabilityCheck.
        :rtype: List[str]
        """
        return self._blocked_cves

    @blocked_cves.setter
    def blocked_cves(self, blocked_cves):
        """Sets the blocked_cves of this VulnerabilityCheck.

        Optional. A list of specific CVEs to always raise warnings about even if the vulnerability level meets `maximumUnfixableSeverity` or `maximumFixableSeverity`. CVEs are listed in the format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will block vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.

        :param blocked_cves: The blocked_cves of this VulnerabilityCheck.
        :type blocked_cves: List[str]
        """

        self._blocked_cves = blocked_cves

    @property
    def container_analysis_vulnerability_projects(self):
        """Gets the container_analysis_vulnerability_projects of this VulnerabilityCheck.

        Optional. The projects where vulnerabilities are stored as Container Analysis Occurrences. Each project is expressed in the resource format of `projects/[PROJECT_ID]`, e.g., `projects/my-gcp-project`. An attempt will be made for each project to fetch vulnerabilities, and all valid vulnerabilities will be used to check against the vulnerability policy. If no valid scan is found in all projects configured here, an error will be returned for the check. Maximum number of `container_analysis_vulnerability_projects` allowed in each `VulnerabilityCheck` is 10.

        :return: The container_analysis_vulnerability_projects of this VulnerabilityCheck.
        :rtype: List[str]
        """
        return self._container_analysis_vulnerability_projects

    @container_analysis_vulnerability_projects.setter
    def container_analysis_vulnerability_projects(self, container_analysis_vulnerability_projects):
        """Sets the container_analysis_vulnerability_projects of this VulnerabilityCheck.

        Optional. The projects where vulnerabilities are stored as Container Analysis Occurrences. Each project is expressed in the resource format of `projects/[PROJECT_ID]`, e.g., `projects/my-gcp-project`. An attempt will be made for each project to fetch vulnerabilities, and all valid vulnerabilities will be used to check against the vulnerability policy. If no valid scan is found in all projects configured here, an error will be returned for the check. Maximum number of `container_analysis_vulnerability_projects` allowed in each `VulnerabilityCheck` is 10.

        :param container_analysis_vulnerability_projects: The container_analysis_vulnerability_projects of this VulnerabilityCheck.
        :type container_analysis_vulnerability_projects: List[str]
        """

        self._container_analysis_vulnerability_projects = container_analysis_vulnerability_projects

    @property
    def maximum_fixable_severity(self):
        """Gets the maximum_fixable_severity of this VulnerabilityCheck.

        Required. The threshold for severity for which a fix is currently available. This field is required and must be set.

        :return: The maximum_fixable_severity of this VulnerabilityCheck.
        :rtype: str
        """
        return self._maximum_fixable_severity

    @maximum_fixable_severity.setter
    def maximum_fixable_severity(self, maximum_fixable_severity):
        """Sets the maximum_fixable_severity of this VulnerabilityCheck.

        Required. The threshold for severity for which a fix is currently available. This field is required and must be set.

        :param maximum_fixable_severity: The maximum_fixable_severity of this VulnerabilityCheck.
        :type maximum_fixable_severity: str
        """
        allowed_values = ["MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED", "BLOCK_ALL", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL", "ALLOW_ALL"]  # noqa: E501
        if maximum_fixable_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `maximum_fixable_severity` ({0}), must be one of {1}"
                .format(maximum_fixable_severity, allowed_values)
            )

        self._maximum_fixable_severity = maximum_fixable_severity

    @property
    def maximum_unfixable_severity(self):
        """Gets the maximum_unfixable_severity of this VulnerabilityCheck.

        Required. The threshold for severity for which a fix isn't currently available. This field is required and must be set.

        :return: The maximum_unfixable_severity of this VulnerabilityCheck.
        :rtype: str
        """
        return self._maximum_unfixable_severity

    @maximum_unfixable_severity.setter
    def maximum_unfixable_severity(self, maximum_unfixable_severity):
        """Sets the maximum_unfixable_severity of this VulnerabilityCheck.

        Required. The threshold for severity for which a fix isn't currently available. This field is required and must be set.

        :param maximum_unfixable_severity: The maximum_unfixable_severity of this VulnerabilityCheck.
        :type maximum_unfixable_severity: str
        """
        allowed_values = ["MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED", "BLOCK_ALL", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL", "ALLOW_ALL"]  # noqa: E501
        if maximum_unfixable_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `maximum_unfixable_severity` ({0}), must be one of {1}"
                .format(maximum_unfixable_severity, allowed_values)
            )

        self._maximum_unfixable_severity = maximum_unfixable_severity
