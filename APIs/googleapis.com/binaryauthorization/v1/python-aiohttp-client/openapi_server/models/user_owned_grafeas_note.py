# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attestor_public_key import AttestorPublicKey
from openapi_server import util


class UserOwnedGrafeasNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delegation_service_account_email: str=None, note_reference: str=None, public_keys: List[AttestorPublicKey]=None):
        """UserOwnedGrafeasNote - a model defined in OpenAPI

        :param delegation_service_account_email: The delegation_service_account_email of this UserOwnedGrafeasNote.
        :param note_reference: The note_reference of this UserOwnedGrafeasNote.
        :param public_keys: The public_keys of this UserOwnedGrafeasNote.
        """
        self.openapi_types = {
            'delegation_service_account_email': str,
            'note_reference': str,
            'public_keys': List[AttestorPublicKey]
        }

        self.attribute_map = {
            'delegation_service_account_email': 'delegationServiceAccountEmail',
            'note_reference': 'noteReference',
            'public_keys': 'publicKeys'
        }

        self._delegation_service_account_email = delegation_service_account_email
        self._note_reference = note_reference
        self._public_keys = public_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserOwnedGrafeasNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserOwnedGrafeasNote of this UserOwnedGrafeasNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delegation_service_account_email(self):
        """Gets the delegation_service_account_email of this UserOwnedGrafeasNote.

        Output only. This field will contain the service account email address that this attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern.

        :return: The delegation_service_account_email of this UserOwnedGrafeasNote.
        :rtype: str
        """
        return self._delegation_service_account_email

    @delegation_service_account_email.setter
    def delegation_service_account_email(self, delegation_service_account_email):
        """Sets the delegation_service_account_email of this UserOwnedGrafeasNote.

        Output only. This field will contain the service account email address that this attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern.

        :param delegation_service_account_email: The delegation_service_account_email of this UserOwnedGrafeasNote.
        :type delegation_service_account_email: str
        """

        self._delegation_service_account_email = delegation_service_account_email

    @property
    def note_reference(self):
        """Gets the note_reference of this UserOwnedGrafeasNote.

        Required. The Grafeas resource name of a Attestation.Authority Note, created by the user, in the format: `projects/*/notes/*`. This field may not be updated. An attestation by this attestor is stored as a Grafeas Attestation.Authority Occurrence that names a container image and that links to this Note. Grafeas is an external dependency.

        :return: The note_reference of this UserOwnedGrafeasNote.
        :rtype: str
        """
        return self._note_reference

    @note_reference.setter
    def note_reference(self, note_reference):
        """Sets the note_reference of this UserOwnedGrafeasNote.

        Required. The Grafeas resource name of a Attestation.Authority Note, created by the user, in the format: `projects/*/notes/*`. This field may not be updated. An attestation by this attestor is stored as a Grafeas Attestation.Authority Occurrence that names a container image and that links to this Note. Grafeas is an external dependency.

        :param note_reference: The note_reference of this UserOwnedGrafeasNote.
        :type note_reference: str
        """

        self._note_reference = note_reference

    @property
    def public_keys(self):
        """Gets the public_keys of this UserOwnedGrafeasNote.

        Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist.

        :return: The public_keys of this UserOwnedGrafeasNote.
        :rtype: List[AttestorPublicKey]
        """
        return self._public_keys

    @public_keys.setter
    def public_keys(self, public_keys):
        """Sets the public_keys of this UserOwnedGrafeasNote.

        Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist.

        :param public_keys: The public_keys of this UserOwnedGrafeasNote.
        :type public_keys: List[AttestorPublicKey]
        """

        self._public_keys = public_keys
