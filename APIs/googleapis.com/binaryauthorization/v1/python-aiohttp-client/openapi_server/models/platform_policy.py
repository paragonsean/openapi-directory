# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gke_policy import GkePolicy
from openapi_server import util


class PlatformPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, gke_policy: GkePolicy=None, name: str=None, update_time: str=None):
        """PlatformPolicy - a model defined in OpenAPI

        :param description: The description of this PlatformPolicy.
        :param gke_policy: The gke_policy of this PlatformPolicy.
        :param name: The name of this PlatformPolicy.
        :param update_time: The update_time of this PlatformPolicy.
        """
        self.openapi_types = {
            'description': str,
            'gke_policy': GkePolicy,
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'description': 'description',
            'gke_policy': 'gkePolicy',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._description = description
        self._gke_policy = gke_policy
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlatformPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlatformPolicy of this PlatformPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PlatformPolicy.

        Optional. A description comment about the policy.

        :return: The description of this PlatformPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlatformPolicy.

        Optional. A description comment about the policy.

        :param description: The description of this PlatformPolicy.
        :type description: str
        """

        self._description = description

    @property
    def gke_policy(self):
        """Gets the gke_policy of this PlatformPolicy.


        :return: The gke_policy of this PlatformPolicy.
        :rtype: GkePolicy
        """
        return self._gke_policy

    @gke_policy.setter
    def gke_policy(self, gke_policy):
        """Sets the gke_policy of this PlatformPolicy.


        :param gke_policy: The gke_policy of this PlatformPolicy.
        :type gke_policy: GkePolicy
        """

        self._gke_policy = gke_policy

    @property
    def name(self):
        """Gets the name of this PlatformPolicy.

        Output only. The relative resource name of the Binary Authorization platform policy, in the form of `projects/*/platforms/*/policies/*`.

        :return: The name of this PlatformPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlatformPolicy.

        Output only. The relative resource name of the Binary Authorization platform policy, in the form of `projects/*/platforms/*/policies/*`.

        :param name: The name of this PlatformPolicy.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this PlatformPolicy.

        Output only. Time when the policy was last updated.

        :return: The update_time of this PlatformPolicy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this PlatformPolicy.

        Output only. Time when the policy was last updated.

        :param update_time: The update_time of this PlatformPolicy.
        :type update_time: str
        """

        self._update_time = update_time
