# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EvaluationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, verdict: str=None):
        """EvaluationResult - a model defined in OpenAPI

        :param verdict: The verdict of this EvaluationResult.
        """
        self.openapi_types = {
            'verdict': str
        }

        self.attribute_map = {
            'verdict': 'verdict'
        }

        self._verdict = verdict

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluationResult of this EvaluationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def verdict(self):
        """Gets the verdict of this EvaluationResult.

        The result of evaluating this check.

        :return: The verdict of this EvaluationResult.
        :rtype: str
        """
        return self._verdict

    @verdict.setter
    def verdict(self, verdict):
        """Sets the verdict of this EvaluationResult.

        The result of evaluating this check.

        :param verdict: The verdict of this EvaluationResult.
        :type verdict: str
        """
        allowed_values = ["CHECK_VERDICT_UNSPECIFIED", "CONFORMANT", "NON_CONFORMANT", "ERROR"]  # noqa: E501
        if verdict not in allowed_values:
            raise ValueError(
                "Invalid value for `verdict` ({0}), must be one of {1}"
                .format(verdict, allowed_values)
            )

        self._verdict = verdict
