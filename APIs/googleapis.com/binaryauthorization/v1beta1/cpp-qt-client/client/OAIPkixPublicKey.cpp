/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPkixPublicKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPkixPublicKey::OAIPkixPublicKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPkixPublicKey::OAIPkixPublicKey() {
    this->initializeModel();
}

OAIPkixPublicKey::~OAIPkixPublicKey() {}

void OAIPkixPublicKey::initializeModel() {

    m_public_key_pem_isSet = false;
    m_public_key_pem_isValid = false;

    m_signature_algorithm_isSet = false;
    m_signature_algorithm_isValid = false;
}

void OAIPkixPublicKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPkixPublicKey::fromJsonObject(QJsonObject json) {

    m_public_key_pem_isValid = ::OpenAPI::fromJsonValue(m_public_key_pem, json[QString("publicKeyPem")]);
    m_public_key_pem_isSet = !json[QString("publicKeyPem")].isNull() && m_public_key_pem_isValid;

    m_signature_algorithm_isValid = ::OpenAPI::fromJsonValue(m_signature_algorithm, json[QString("signatureAlgorithm")]);
    m_signature_algorithm_isSet = !json[QString("signatureAlgorithm")].isNull() && m_signature_algorithm_isValid;
}

QString OAIPkixPublicKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPkixPublicKey::asJsonObject() const {
    QJsonObject obj;
    if (m_public_key_pem_isSet) {
        obj.insert(QString("publicKeyPem"), ::OpenAPI::toJsonValue(m_public_key_pem));
    }
    if (m_signature_algorithm_isSet) {
        obj.insert(QString("signatureAlgorithm"), ::OpenAPI::toJsonValue(m_signature_algorithm));
    }
    return obj;
}

QString OAIPkixPublicKey::getPublicKeyPem() const {
    return m_public_key_pem;
}
void OAIPkixPublicKey::setPublicKeyPem(const QString &public_key_pem) {
    m_public_key_pem = public_key_pem;
    m_public_key_pem_isSet = true;
}

bool OAIPkixPublicKey::is_public_key_pem_Set() const{
    return m_public_key_pem_isSet;
}

bool OAIPkixPublicKey::is_public_key_pem_Valid() const{
    return m_public_key_pem_isValid;
}

QString OAIPkixPublicKey::getSignatureAlgorithm() const {
    return m_signature_algorithm;
}
void OAIPkixPublicKey::setSignatureAlgorithm(const QString &signature_algorithm) {
    m_signature_algorithm = signature_algorithm;
    m_signature_algorithm_isSet = true;
}

bool OAIPkixPublicKey::is_signature_algorithm_Set() const{
    return m_signature_algorithm_isSet;
}

bool OAIPkixPublicKey::is_signature_algorithm_Valid() const{
    return m_signature_algorithm_isValid;
}

bool OAIPkixPublicKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_public_key_pem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPkixPublicKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
