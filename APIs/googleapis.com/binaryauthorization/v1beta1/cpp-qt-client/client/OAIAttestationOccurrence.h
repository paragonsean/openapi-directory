/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAttestationOccurrence.h
 *
 * Occurrence that represents a single \&quot;attestation\&quot;. The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
 */

#ifndef OAIAttestationOccurrence_H
#define OAIAttestationOccurrence_H

#include <QJsonObject>

#include "OAIJwt.h"
#include "OAISignature.h"
#include <QByteArray>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIJwt;
class OAISignature;

class OAIAttestationOccurrence : public OAIObject {
public:
    OAIAttestationOccurrence();
    OAIAttestationOccurrence(QString json);
    ~OAIAttestationOccurrence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIJwt> getJwts() const;
    void setJwts(const QList<OAIJwt> &jwts);
    bool is_jwts_Set() const;
    bool is_jwts_Valid() const;

    QByteArray getSerializedPayload() const;
    void setSerializedPayload(const QByteArray &serialized_payload);
    bool is_serialized_payload_Set() const;
    bool is_serialized_payload_Valid() const;

    QList<OAISignature> getSignatures() const;
    void setSignatures(const QList<OAISignature> &signatures);
    bool is_signatures_Set() const;
    bool is_signatures_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIJwt> m_jwts;
    bool m_jwts_isSet;
    bool m_jwts_isValid;

    QByteArray m_serialized_payload;
    bool m_serialized_payload_isSet;
    bool m_serialized_payload_isValid;

    QList<OAISignature> m_signatures;
    bool m_signatures_isSet;
    bool m_signatures_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAttestationOccurrence)

#endif // OAIAttestationOccurrence_H
