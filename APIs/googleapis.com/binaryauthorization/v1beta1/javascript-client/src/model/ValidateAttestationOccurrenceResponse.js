/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValidateAttestationOccurrenceResponse model module.
 * @module model/ValidateAttestationOccurrenceResponse
 * @version v1beta1
 */
class ValidateAttestationOccurrenceResponse {
    /**
     * Constructs a new <code>ValidateAttestationOccurrenceResponse</code>.
     * Response message for ValidationHelperV1.ValidateAttestationOccurrence.
     * @alias module:model/ValidateAttestationOccurrenceResponse
     */
    constructor() { 
        
        ValidateAttestationOccurrenceResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValidateAttestationOccurrenceResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValidateAttestationOccurrenceResponse} obj Optional instance to populate.
     * @return {module:model/ValidateAttestationOccurrenceResponse} The populated <code>ValidateAttestationOccurrenceResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValidateAttestationOccurrenceResponse();

            if (data.hasOwnProperty('denialReason')) {
                obj['denialReason'] = ApiClient.convertToType(data['denialReason'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValidateAttestationOccurrenceResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValidateAttestationOccurrenceResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['denialReason'] && !(typeof data['denialReason'] === 'string' || data['denialReason'] instanceof String)) {
            throw new Error("Expected the field `denialReason` to be a primitive type in the JSON string but got " + data['denialReason']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }

        return true;
    }


}



/**
 * The reason for denial if the Attestation couldn't be validated.
 * @member {String} denialReason
 */
ValidateAttestationOccurrenceResponse.prototype['denialReason'] = undefined;

/**
 * The result of the Attestation validation.
 * @member {module:model/ValidateAttestationOccurrenceResponse.ResultEnum} result
 */
ValidateAttestationOccurrenceResponse.prototype['result'] = undefined;





/**
 * Allowed values for the <code>result</code> property.
 * @enum {String}
 * @readonly
 */
ValidateAttestationOccurrenceResponse['ResultEnum'] = {

    /**
     * value: "RESULT_UNSPECIFIED"
     * @const
     */
    "RESULT_UNSPECIFIED": "RESULT_UNSPECIFIED",

    /**
     * value: "VERIFIED"
     * @const
     */
    "VERIFIED": "VERIFIED",

    /**
     * value: "ATTESTATION_NOT_VERIFIABLE"
     * @const
     */
    "ATTESTATION_NOT_VERIFIABLE": "ATTESTATION_NOT_VERIFIABLE"
};



export default ValidateAttestationOccurrenceResponse;

