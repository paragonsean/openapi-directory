/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttestorPublicKey from './AttestorPublicKey';

/**
 * The UserOwnedDrydockNote model module.
 * @module model/UserOwnedDrydockNote
 * @version v1beta1
 */
class UserOwnedDrydockNote {
    /**
     * Constructs a new <code>UserOwnedDrydockNote</code>.
     * An user owned drydock note references a Drydock ATTESTATION_AUTHORITY Note created by the user.
     * @alias module:model/UserOwnedDrydockNote
     */
    constructor() { 
        
        UserOwnedDrydockNote.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserOwnedDrydockNote</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserOwnedDrydockNote} obj Optional instance to populate.
     * @return {module:model/UserOwnedDrydockNote} The populated <code>UserOwnedDrydockNote</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserOwnedDrydockNote();

            if (data.hasOwnProperty('delegationServiceAccountEmail')) {
                obj['delegationServiceAccountEmail'] = ApiClient.convertToType(data['delegationServiceAccountEmail'], 'String');
            }
            if (data.hasOwnProperty('noteReference')) {
                obj['noteReference'] = ApiClient.convertToType(data['noteReference'], 'String');
            }
            if (data.hasOwnProperty('publicKeys')) {
                obj['publicKeys'] = ApiClient.convertToType(data['publicKeys'], [AttestorPublicKey]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserOwnedDrydockNote</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserOwnedDrydockNote</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['delegationServiceAccountEmail'] && !(typeof data['delegationServiceAccountEmail'] === 'string' || data['delegationServiceAccountEmail'] instanceof String)) {
            throw new Error("Expected the field `delegationServiceAccountEmail` to be a primitive type in the JSON string but got " + data['delegationServiceAccountEmail']);
        }
        // ensure the json data is a string
        if (data['noteReference'] && !(typeof data['noteReference'] === 'string' || data['noteReference'] instanceof String)) {
            throw new Error("Expected the field `noteReference` to be a primitive type in the JSON string but got " + data['noteReference']);
        }
        if (data['publicKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['publicKeys'])) {
                throw new Error("Expected the field `publicKeys` to be an array in the JSON data but got " + data['publicKeys']);
            }
            // validate the optional field `publicKeys` (array)
            for (const item of data['publicKeys']) {
                AttestorPublicKey.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern.
 * @member {String} delegationServiceAccountEmail
 */
UserOwnedDrydockNote.prototype['delegationServiceAccountEmail'] = undefined;

/**
 * Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note, created by the user, in the format: `projects/_*_/notes/_*` (or the legacy `providers/_*_/notes/_*`). This field may not be updated. An attestation by this attestor is stored as a Drydock ATTESTATION_AUTHORITY Occurrence that names a container image and that links to this Note. Drydock is an external dependency.
 * @member {String} noteReference
 */
UserOwnedDrydockNote.prototype['noteReference'] = undefined;

/**
 * Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist.
 * @member {Array.<module:model/AttestorPublicKey>} publicKeys
 */
UserOwnedDrydockNote.prototype['publicKeys'] = undefined;






export default UserOwnedDrydockNote;

