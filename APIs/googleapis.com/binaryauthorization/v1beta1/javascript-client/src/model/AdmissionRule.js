/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdmissionRule model module.
 * @module model/AdmissionRule
 * @version v1beta1
 */
class AdmissionRule {
    /**
     * Constructs a new <code>AdmissionRule</code>.
     * An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation.
     * @alias module:model/AdmissionRule
     */
    constructor() { 
        
        AdmissionRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdmissionRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdmissionRule} obj Optional instance to populate.
     * @return {module:model/AdmissionRule} The populated <code>AdmissionRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdmissionRule();

            if (data.hasOwnProperty('enforcementMode')) {
                obj['enforcementMode'] = ApiClient.convertToType(data['enforcementMode'], 'String');
            }
            if (data.hasOwnProperty('evaluationMode')) {
                obj['evaluationMode'] = ApiClient.convertToType(data['evaluationMode'], 'String');
            }
            if (data.hasOwnProperty('requireAttestationsBy')) {
                obj['requireAttestationsBy'] = ApiClient.convertToType(data['requireAttestationsBy'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdmissionRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdmissionRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['enforcementMode'] && !(typeof data['enforcementMode'] === 'string' || data['enforcementMode'] instanceof String)) {
            throw new Error("Expected the field `enforcementMode` to be a primitive type in the JSON string but got " + data['enforcementMode']);
        }
        // ensure the json data is a string
        if (data['evaluationMode'] && !(typeof data['evaluationMode'] === 'string' || data['evaluationMode'] instanceof String)) {
            throw new Error("Expected the field `evaluationMode` to be a primitive type in the JSON string but got " + data['evaluationMode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requireAttestationsBy'])) {
            throw new Error("Expected the field `requireAttestationsBy` to be an array in the JSON data but got " + data['requireAttestationsBy']);
        }

        return true;
    }


}



/**
 * Required. The action when a pod creation is denied by the admission rule.
 * @member {module:model/AdmissionRule.EnforcementModeEnum} enforcementMode
 */
AdmissionRule.prototype['enforcementMode'] = undefined;

/**
 * Required. How this admission rule will be evaluated.
 * @member {module:model/AdmissionRule.EvaluationModeEnum} evaluationMode
 */
AdmissionRule.prototype['evaluationMode'] = undefined;

/**
 * Optional. The resource names of the attestors that must attest to a container image, in the format `projects/_*_/attestors/_*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty.
 * @member {Array.<String>} requireAttestationsBy
 */
AdmissionRule.prototype['requireAttestationsBy'] = undefined;





/**
 * Allowed values for the <code>enforcementMode</code> property.
 * @enum {String}
 * @readonly
 */
AdmissionRule['EnforcementModeEnum'] = {

    /**
     * value: "ENFORCEMENT_MODE_UNSPECIFIED"
     * @const
     */
    "ENFORCEMENT_MODE_UNSPECIFIED": "ENFORCEMENT_MODE_UNSPECIFIED",

    /**
     * value: "ENFORCED_BLOCK_AND_AUDIT_LOG"
     * @const
     */
    "ENFORCED_BLOCK_AND_AUDIT_LOG": "ENFORCED_BLOCK_AND_AUDIT_LOG",

    /**
     * value: "DRYRUN_AUDIT_LOG_ONLY"
     * @const
     */
    "DRYRUN_AUDIT_LOG_ONLY": "DRYRUN_AUDIT_LOG_ONLY"
};


/**
 * Allowed values for the <code>evaluationMode</code> property.
 * @enum {String}
 * @readonly
 */
AdmissionRule['EvaluationModeEnum'] = {

    /**
     * value: "EVALUATION_MODE_UNSPECIFIED"
     * @const
     */
    "EVALUATION_MODE_UNSPECIFIED": "EVALUATION_MODE_UNSPECIFIED",

    /**
     * value: "ALWAYS_ALLOW"
     * @const
     */
    "ALWAYS_ALLOW": "ALWAYS_ALLOW",

    /**
     * value: "REQUIRE_ATTESTATION"
     * @const
     */
    "REQUIRE_ATTESTATION": "REQUIRE_ATTESTATION",

    /**
     * value: "ALWAYS_DENY"
     * @const
     */
    "ALWAYS_DENY": "ALWAYS_DENY"
};



export default AdmissionRule;

