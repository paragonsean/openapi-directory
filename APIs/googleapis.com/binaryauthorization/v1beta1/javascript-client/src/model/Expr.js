/**
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Expr model module.
 * @module model/Expr
 * @version v1beta1
 */
class Expr {
    /**
     * Constructs a new <code>Expr</code>.
     * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \&quot;Summary size limit\&quot; description: \&quot;Determines if a summary is less than 100 chars\&quot; expression: \&quot;document.summary.size() &lt; 100\&quot; Example (Equality): title: \&quot;Requestor is owner\&quot; description: \&quot;Determines if requestor is the document owner\&quot; expression: \&quot;document.owner &#x3D;&#x3D; request.auth.claims.email\&quot; Example (Logic): title: \&quot;Public documents\&quot; description: \&quot;Determine whether the document should be publicly visible\&quot; expression: \&quot;document.type !&#x3D; &#39;private&#39; &amp;&amp; document.type !&#x3D; &#39;internal&#39;\&quot; Example (Data Manipulation): title: \&quot;Notification string\&quot; description: \&quot;Create a notification string with a timestamp.\&quot; expression: \&quot;&#39;New message received at &#39; + string(document.create_time)\&quot; The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
     * @alias module:model/Expr
     */
    constructor() { 
        
        Expr.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Expr</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Expr} obj Optional instance to populate.
     * @return {module:model/Expr} The populated <code>Expr</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Expr();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Expr</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Expr</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
 * @member {String} description
 */
Expr.prototype['description'] = undefined;

/**
 * Textual representation of an expression in Common Expression Language syntax.
 * @member {String} expression
 */
Expr.prototype['expression'] = undefined;

/**
 * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
 * @member {String} location
 */
Expr.prototype['location'] = undefined;

/**
 * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
 * @member {String} title
 */
Expr.prototype['title'] = undefined;






export default Expr;

