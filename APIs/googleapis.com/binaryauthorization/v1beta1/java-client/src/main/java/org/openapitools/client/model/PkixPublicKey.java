/*
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A public key in the PkixPublicKey format (see https://tools.ietf.org/html/rfc5280#section-4.1.2.7 for details). Public keys of this type are typically textually encoded using the PEM format.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:34.556318-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PkixPublicKey {
  public static final String SERIALIZED_NAME_PUBLIC_KEY_PEM = "publicKeyPem";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY_PEM)
  private String publicKeyPem;

  /**
   * The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in &#x60;public_key_pem&#x60; (i.e. this algorithm must match that of the public key).
   */
  @JsonAdapter(SignatureAlgorithmEnum.Adapter.class)
  public enum SignatureAlgorithmEnum {
    SIGNATURE_ALGORITHM_UNSPECIFIED("SIGNATURE_ALGORITHM_UNSPECIFIED"),
    
    RSA_PSS_2048_SHA256("RSA_PSS_2048_SHA256"),
    
    RSA_SIGN_PSS_2048_SHA256("RSA_SIGN_PSS_2048_SHA256"),
    
    RSA_PSS_3072_SHA256("RSA_PSS_3072_SHA256"),
    
    RSA_SIGN_PSS_3072_SHA256("RSA_SIGN_PSS_3072_SHA256"),
    
    RSA_PSS_4096_SHA256("RSA_PSS_4096_SHA256"),
    
    RSA_SIGN_PSS_4096_SHA256("RSA_SIGN_PSS_4096_SHA256"),
    
    RSA_PSS_4096_SHA512("RSA_PSS_4096_SHA512"),
    
    RSA_SIGN_PSS_4096_SHA512("RSA_SIGN_PSS_4096_SHA512"),
    
    RSA_SIGN_PKCS1_2048_SHA256("RSA_SIGN_PKCS1_2048_SHA256"),
    
    RSA_SIGN_PKCS1_3072_SHA256("RSA_SIGN_PKCS1_3072_SHA256"),
    
    RSA_SIGN_PKCS1_4096_SHA256("RSA_SIGN_PKCS1_4096_SHA256"),
    
    RSA_SIGN_PKCS1_4096_SHA512("RSA_SIGN_PKCS1_4096_SHA512"),
    
    ECDSA_P256_SHA256("ECDSA_P256_SHA256"),
    
    EC_SIGN_P256_SHA256("EC_SIGN_P256_SHA256"),
    
    ECDSA_P384_SHA384("ECDSA_P384_SHA384"),
    
    EC_SIGN_P384_SHA384("EC_SIGN_P384_SHA384"),
    
    ECDSA_P521_SHA512("ECDSA_P521_SHA512"),
    
    EC_SIGN_P521_SHA512("EC_SIGN_P521_SHA512");

    private String value;

    SignatureAlgorithmEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignatureAlgorithmEnum fromValue(String value) {
      for (SignatureAlgorithmEnum b : SignatureAlgorithmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignatureAlgorithmEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignatureAlgorithmEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignatureAlgorithmEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignatureAlgorithmEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignatureAlgorithmEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNATURE_ALGORITHM = "signatureAlgorithm";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_ALGORITHM)
  private SignatureAlgorithmEnum signatureAlgorithm;

  public PkixPublicKey() {
  }

  public PkixPublicKey publicKeyPem(String publicKeyPem) {
    this.publicKeyPem = publicKeyPem;
    return this;
  }

  /**
   * A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13
   * @return publicKeyPem
   */
  @javax.annotation.Nullable
  public String getPublicKeyPem() {
    return publicKeyPem;
  }

  public void setPublicKeyPem(String publicKeyPem) {
    this.publicKeyPem = publicKeyPem;
  }


  public PkixPublicKey signatureAlgorithm(SignatureAlgorithmEnum signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
  }

  /**
   * The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in &#x60;public_key_pem&#x60; (i.e. this algorithm must match that of the public key).
   * @return signatureAlgorithm
   */
  @javax.annotation.Nullable
  public SignatureAlgorithmEnum getSignatureAlgorithm() {
    return signatureAlgorithm;
  }

  public void setSignatureAlgorithm(SignatureAlgorithmEnum signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PkixPublicKey pkixPublicKey = (PkixPublicKey) o;
    return Objects.equals(this.publicKeyPem, pkixPublicKey.publicKeyPem) &&
        Objects.equals(this.signatureAlgorithm, pkixPublicKey.signatureAlgorithm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(publicKeyPem, signatureAlgorithm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PkixPublicKey {\n");
    sb.append("    publicKeyPem: ").append(toIndentedString(publicKeyPem)).append("\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("publicKeyPem");
    openapiFields.add("signatureAlgorithm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PkixPublicKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PkixPublicKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PkixPublicKey is not found in the empty JSON string", PkixPublicKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PkixPublicKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PkixPublicKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("publicKeyPem") != null && !jsonObj.get("publicKeyPem").isJsonNull()) && !jsonObj.get("publicKeyPem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicKeyPem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicKeyPem").toString()));
      }
      if ((jsonObj.get("signatureAlgorithm") != null && !jsonObj.get("signatureAlgorithm").isJsonNull()) && !jsonObj.get("signatureAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatureAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatureAlgorithm").toString()));
      }
      // validate the optional field `signatureAlgorithm`
      if (jsonObj.get("signatureAlgorithm") != null && !jsonObj.get("signatureAlgorithm").isJsonNull()) {
        SignatureAlgorithmEnum.validateJsonElement(jsonObj.get("signatureAlgorithm"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PkixPublicKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PkixPublicKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PkixPublicKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PkixPublicKey.class));

       return (TypeAdapter<T>) new TypeAdapter<PkixPublicKey>() {
           @Override
           public void write(JsonWriter out, PkixPublicKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PkixPublicKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PkixPublicKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PkixPublicKey
   * @throws IOException if the JSON string is invalid with respect to PkixPublicKey
   */
  public static PkixPublicKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PkixPublicKey.class);
  }

  /**
   * Convert an instance of PkixPublicKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

