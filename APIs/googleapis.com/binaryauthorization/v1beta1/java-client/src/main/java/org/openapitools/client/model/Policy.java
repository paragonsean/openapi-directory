/*
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AdmissionRule;
import org.openapitools.client.model.AdmissionWhitelistPattern;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A policy for Binary Authorization.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:34.556318-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Policy {
  public static final String SERIALIZED_NAME_ADMISSION_WHITELIST_PATTERNS = "admissionWhitelistPatterns";
  @SerializedName(SERIALIZED_NAME_ADMISSION_WHITELIST_PATTERNS)
  private List<AdmissionWhitelistPattern> admissionWhitelistPatterns = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_ADMISSION_RULES = "clusterAdmissionRules";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ADMISSION_RULES)
  private Map<String, AdmissionRule> clusterAdmissionRules = new HashMap<>();

  public static final String SERIALIZED_NAME_DEFAULT_ADMISSION_RULE = "defaultAdmissionRule";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ADMISSION_RULE)
  private AdmissionRule defaultAdmissionRule;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  /**
   * Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy.
   */
  @JsonAdapter(GlobalPolicyEvaluationModeEnum.Adapter.class)
  public enum GlobalPolicyEvaluationModeEnum {
    GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED("GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED"),
    
    ENABLE("ENABLE"),
    
    DISABLE("DISABLE");

    private String value;

    GlobalPolicyEvaluationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GlobalPolicyEvaluationModeEnum fromValue(String value) {
      for (GlobalPolicyEvaluationModeEnum b : GlobalPolicyEvaluationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GlobalPolicyEvaluationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GlobalPolicyEvaluationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GlobalPolicyEvaluationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GlobalPolicyEvaluationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GlobalPolicyEvaluationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GLOBAL_POLICY_EVALUATION_MODE = "globalPolicyEvaluationMode";
  @SerializedName(SERIALIZED_NAME_GLOBAL_POLICY_EVALUATION_MODE)
  private GlobalPolicyEvaluationModeEnum globalPolicyEvaluationMode;

  public static final String SERIALIZED_NAME_ISTIO_SERVICE_IDENTITY_ADMISSION_RULES = "istioServiceIdentityAdmissionRules";
  @SerializedName(SERIALIZED_NAME_ISTIO_SERVICE_IDENTITY_ADMISSION_RULES)
  private Map<String, AdmissionRule> istioServiceIdentityAdmissionRules = new HashMap<>();

  public static final String SERIALIZED_NAME_KUBERNETES_NAMESPACE_ADMISSION_RULES = "kubernetesNamespaceAdmissionRules";
  @SerializedName(SERIALIZED_NAME_KUBERNETES_NAMESPACE_ADMISSION_RULES)
  private Map<String, AdmissionRule> kubernetesNamespaceAdmissionRules = new HashMap<>();

  public static final String SERIALIZED_NAME_KUBERNETES_SERVICE_ACCOUNT_ADMISSION_RULES = "kubernetesServiceAccountAdmissionRules";
  @SerializedName(SERIALIZED_NAME_KUBERNETES_SERVICE_ACCOUNT_ADMISSION_RULES)
  private Map<String, AdmissionRule> kubernetesServiceAccountAdmissionRules = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Policy() {
  }

  public Policy(
     String name, 
     String updateTime
  ) {
    this();
    this.name = name;
    this.updateTime = updateTime;
  }

  public Policy admissionWhitelistPatterns(List<AdmissionWhitelistPattern> admissionWhitelistPatterns) {
    this.admissionWhitelistPatterns = admissionWhitelistPatterns;
    return this;
  }

  public Policy addAdmissionWhitelistPatternsItem(AdmissionWhitelistPattern admissionWhitelistPatternsItem) {
    if (this.admissionWhitelistPatterns == null) {
      this.admissionWhitelistPatterns = new ArrayList<>();
    }
    this.admissionWhitelistPatterns.add(admissionWhitelistPatternsItem);
    return this;
  }

  /**
   * Optional. Admission policy allowlisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies.
   * @return admissionWhitelistPatterns
   */
  @javax.annotation.Nullable
  public List<AdmissionWhitelistPattern> getAdmissionWhitelistPatterns() {
    return admissionWhitelistPatterns;
  }

  public void setAdmissionWhitelistPatterns(List<AdmissionWhitelistPattern> admissionWhitelistPatterns) {
    this.admissionWhitelistPatterns = admissionWhitelistPatterns;
  }


  public Policy clusterAdmissionRules(Map<String, AdmissionRule> clusterAdmissionRules) {
    this.clusterAdmissionRules = clusterAdmissionRules;
    return this;
  }

  public Policy putClusterAdmissionRulesItem(String key, AdmissionRule clusterAdmissionRulesItem) {
    if (this.clusterAdmissionRules == null) {
      this.clusterAdmissionRules = new HashMap<>();
    }
    this.clusterAdmissionRules.put(key, clusterAdmissionRulesItem);
    return this;
  }

  /**
   * Optional. Per-cluster admission rules. Cluster spec format: &#x60;location.clusterId&#x60;. There can be at most one admission rule per cluster spec. A &#x60;location&#x60; is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For &#x60;clusterId&#x60; syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.
   * @return clusterAdmissionRules
   */
  @javax.annotation.Nullable
  public Map<String, AdmissionRule> getClusterAdmissionRules() {
    return clusterAdmissionRules;
  }

  public void setClusterAdmissionRules(Map<String, AdmissionRule> clusterAdmissionRules) {
    this.clusterAdmissionRules = clusterAdmissionRules;
  }


  public Policy defaultAdmissionRule(AdmissionRule defaultAdmissionRule) {
    this.defaultAdmissionRule = defaultAdmissionRule;
    return this;
  }

  /**
   * Get defaultAdmissionRule
   * @return defaultAdmissionRule
   */
  @javax.annotation.Nullable
  public AdmissionRule getDefaultAdmissionRule() {
    return defaultAdmissionRule;
  }

  public void setDefaultAdmissionRule(AdmissionRule defaultAdmissionRule) {
    this.defaultAdmissionRule = defaultAdmissionRule;
  }


  public Policy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. A descriptive comment.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Policy etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. A checksum, returned by the server, that can be sent on update requests to ensure the policy has an up-to-date value before attempting to update it. See https://google.aip.dev/154.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Policy globalPolicyEvaluationMode(GlobalPolicyEvaluationModeEnum globalPolicyEvaluationMode) {
    this.globalPolicyEvaluationMode = globalPolicyEvaluationMode;
    return this;
  }

  /**
   * Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy.
   * @return globalPolicyEvaluationMode
   */
  @javax.annotation.Nullable
  public GlobalPolicyEvaluationModeEnum getGlobalPolicyEvaluationMode() {
    return globalPolicyEvaluationMode;
  }

  public void setGlobalPolicyEvaluationMode(GlobalPolicyEvaluationModeEnum globalPolicyEvaluationMode) {
    this.globalPolicyEvaluationMode = globalPolicyEvaluationMode;
  }


  public Policy istioServiceIdentityAdmissionRules(Map<String, AdmissionRule> istioServiceIdentityAdmissionRules) {
    this.istioServiceIdentityAdmissionRules = istioServiceIdentityAdmissionRules;
    return this;
  }

  public Policy putIstioServiceIdentityAdmissionRulesItem(String key, AdmissionRule istioServiceIdentityAdmissionRulesItem) {
    if (this.istioServiceIdentityAdmissionRules == null) {
      this.istioServiceIdentityAdmissionRules = new HashMap<>();
    }
    this.istioServiceIdentityAdmissionRules.put(key, istioServiceIdentityAdmissionRulesItem);
    return this;
  }

  /**
   * Optional. Per-istio-service-identity admission rules. Istio service identity spec format: &#x60;spiffe:///ns//sa/&#x60; or &#x60;/ns//sa/&#x60; e.g. &#x60;spiffe://example.com/ns/test-ns/sa/default&#x60;
   * @return istioServiceIdentityAdmissionRules
   */
  @javax.annotation.Nullable
  public Map<String, AdmissionRule> getIstioServiceIdentityAdmissionRules() {
    return istioServiceIdentityAdmissionRules;
  }

  public void setIstioServiceIdentityAdmissionRules(Map<String, AdmissionRule> istioServiceIdentityAdmissionRules) {
    this.istioServiceIdentityAdmissionRules = istioServiceIdentityAdmissionRules;
  }


  public Policy kubernetesNamespaceAdmissionRules(Map<String, AdmissionRule> kubernetesNamespaceAdmissionRules) {
    this.kubernetesNamespaceAdmissionRules = kubernetesNamespaceAdmissionRules;
    return this;
  }

  public Policy putKubernetesNamespaceAdmissionRulesItem(String key, AdmissionRule kubernetesNamespaceAdmissionRulesItem) {
    if (this.kubernetesNamespaceAdmissionRules == null) {
      this.kubernetesNamespaceAdmissionRules = new HashMap<>();
    }
    this.kubernetesNamespaceAdmissionRules.put(key, kubernetesNamespaceAdmissionRulesItem);
    return this;
  }

  /**
   * Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format: &#x60;[a-z.-]+&#x60;, e.g. &#x60;some-namespace&#x60;
   * @return kubernetesNamespaceAdmissionRules
   */
  @javax.annotation.Nullable
  public Map<String, AdmissionRule> getKubernetesNamespaceAdmissionRules() {
    return kubernetesNamespaceAdmissionRules;
  }

  public void setKubernetesNamespaceAdmissionRules(Map<String, AdmissionRule> kubernetesNamespaceAdmissionRules) {
    this.kubernetesNamespaceAdmissionRules = kubernetesNamespaceAdmissionRules;
  }


  public Policy kubernetesServiceAccountAdmissionRules(Map<String, AdmissionRule> kubernetesServiceAccountAdmissionRules) {
    this.kubernetesServiceAccountAdmissionRules = kubernetesServiceAccountAdmissionRules;
    return this;
  }

  public Policy putKubernetesServiceAccountAdmissionRulesItem(String key, AdmissionRule kubernetesServiceAccountAdmissionRulesItem) {
    if (this.kubernetesServiceAccountAdmissionRules == null) {
      this.kubernetesServiceAccountAdmissionRules = new HashMap<>();
    }
    this.kubernetesServiceAccountAdmissionRules.put(key, kubernetesServiceAccountAdmissionRulesItem);
    return this;
  }

  /**
   * Optional. Per-kubernetes-service-account admission rules. Service account spec format: &#x60;namespace:serviceaccount&#x60;. e.g. &#x60;test-ns:default&#x60;
   * @return kubernetesServiceAccountAdmissionRules
   */
  @javax.annotation.Nullable
  public Map<String, AdmissionRule> getKubernetesServiceAccountAdmissionRules() {
    return kubernetesServiceAccountAdmissionRules;
  }

  public void setKubernetesServiceAccountAdmissionRules(Map<String, AdmissionRule> kubernetesServiceAccountAdmissionRules) {
    this.kubernetesServiceAccountAdmissionRules = kubernetesServiceAccountAdmissionRules;
  }


  /**
   * Output only. The resource name, in the format &#x60;projects/_*_/policy&#x60;. There is at most one policy per project.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Time when the policy was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Policy policy = (Policy) o;
    return Objects.equals(this.admissionWhitelistPatterns, policy.admissionWhitelistPatterns) &&
        Objects.equals(this.clusterAdmissionRules, policy.clusterAdmissionRules) &&
        Objects.equals(this.defaultAdmissionRule, policy.defaultAdmissionRule) &&
        Objects.equals(this.description, policy.description) &&
        Objects.equals(this.etag, policy.etag) &&
        Objects.equals(this.globalPolicyEvaluationMode, policy.globalPolicyEvaluationMode) &&
        Objects.equals(this.istioServiceIdentityAdmissionRules, policy.istioServiceIdentityAdmissionRules) &&
        Objects.equals(this.kubernetesNamespaceAdmissionRules, policy.kubernetesNamespaceAdmissionRules) &&
        Objects.equals(this.kubernetesServiceAccountAdmissionRules, policy.kubernetesServiceAccountAdmissionRules) &&
        Objects.equals(this.name, policy.name) &&
        Objects.equals(this.updateTime, policy.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admissionWhitelistPatterns, clusterAdmissionRules, defaultAdmissionRule, description, etag, globalPolicyEvaluationMode, istioServiceIdentityAdmissionRules, kubernetesNamespaceAdmissionRules, kubernetesServiceAccountAdmissionRules, name, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Policy {\n");
    sb.append("    admissionWhitelistPatterns: ").append(toIndentedString(admissionWhitelistPatterns)).append("\n");
    sb.append("    clusterAdmissionRules: ").append(toIndentedString(clusterAdmissionRules)).append("\n");
    sb.append("    defaultAdmissionRule: ").append(toIndentedString(defaultAdmissionRule)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    globalPolicyEvaluationMode: ").append(toIndentedString(globalPolicyEvaluationMode)).append("\n");
    sb.append("    istioServiceIdentityAdmissionRules: ").append(toIndentedString(istioServiceIdentityAdmissionRules)).append("\n");
    sb.append("    kubernetesNamespaceAdmissionRules: ").append(toIndentedString(kubernetesNamespaceAdmissionRules)).append("\n");
    sb.append("    kubernetesServiceAccountAdmissionRules: ").append(toIndentedString(kubernetesServiceAccountAdmissionRules)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admissionWhitelistPatterns");
    openapiFields.add("clusterAdmissionRules");
    openapiFields.add("defaultAdmissionRule");
    openapiFields.add("description");
    openapiFields.add("etag");
    openapiFields.add("globalPolicyEvaluationMode");
    openapiFields.add("istioServiceIdentityAdmissionRules");
    openapiFields.add("kubernetesNamespaceAdmissionRules");
    openapiFields.add("kubernetesServiceAccountAdmissionRules");
    openapiFields.add("name");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Policy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Policy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Policy is not found in the empty JSON string", Policy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Policy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Policy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("admissionWhitelistPatterns") != null && !jsonObj.get("admissionWhitelistPatterns").isJsonNull()) {
        JsonArray jsonArrayadmissionWhitelistPatterns = jsonObj.getAsJsonArray("admissionWhitelistPatterns");
        if (jsonArrayadmissionWhitelistPatterns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("admissionWhitelistPatterns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `admissionWhitelistPatterns` to be an array in the JSON string but got `%s`", jsonObj.get("admissionWhitelistPatterns").toString()));
          }

          // validate the optional field `admissionWhitelistPatterns` (array)
          for (int i = 0; i < jsonArrayadmissionWhitelistPatterns.size(); i++) {
            AdmissionWhitelistPattern.validateJsonElement(jsonArrayadmissionWhitelistPatterns.get(i));
          };
        }
      }
      // validate the optional field `defaultAdmissionRule`
      if (jsonObj.get("defaultAdmissionRule") != null && !jsonObj.get("defaultAdmissionRule").isJsonNull()) {
        AdmissionRule.validateJsonElement(jsonObj.get("defaultAdmissionRule"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("globalPolicyEvaluationMode") != null && !jsonObj.get("globalPolicyEvaluationMode").isJsonNull()) && !jsonObj.get("globalPolicyEvaluationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalPolicyEvaluationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("globalPolicyEvaluationMode").toString()));
      }
      // validate the optional field `globalPolicyEvaluationMode`
      if (jsonObj.get("globalPolicyEvaluationMode") != null && !jsonObj.get("globalPolicyEvaluationMode").isJsonNull()) {
        GlobalPolicyEvaluationModeEnum.validateJsonElement(jsonObj.get("globalPolicyEvaluationMode"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Policy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Policy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Policy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Policy.class));

       return (TypeAdapter<T>) new TypeAdapter<Policy>() {
           @Override
           public void write(JsonWriter out, Policy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Policy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Policy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Policy
   * @throws IOException if the JSON string is invalid with respect to Policy
   */
  public static Policy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Policy.class);
  }

  /**
   * Convert an instance of Policy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

