/*
 * Binary Authorization API
 * The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:34.556318-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdmissionRule {
  /**
   * Required. The action when a pod creation is denied by the admission rule.
   */
  @JsonAdapter(EnforcementModeEnum.Adapter.class)
  public enum EnforcementModeEnum {
    ENFORCEMENT_MODE_UNSPECIFIED("ENFORCEMENT_MODE_UNSPECIFIED"),
    
    ENFORCED_BLOCK_AND_AUDIT_LOG("ENFORCED_BLOCK_AND_AUDIT_LOG"),
    
    DRYRUN_AUDIT_LOG_ONLY("DRYRUN_AUDIT_LOG_ONLY");

    private String value;

    EnforcementModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnforcementModeEnum fromValue(String value) {
      for (EnforcementModeEnum b : EnforcementModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnforcementModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnforcementModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnforcementModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnforcementModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnforcementModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENFORCEMENT_MODE = "enforcementMode";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_MODE)
  private EnforcementModeEnum enforcementMode;

  /**
   * Required. How this admission rule will be evaluated.
   */
  @JsonAdapter(EvaluationModeEnum.Adapter.class)
  public enum EvaluationModeEnum {
    EVALUATION_MODE_UNSPECIFIED("EVALUATION_MODE_UNSPECIFIED"),
    
    ALWAYS_ALLOW("ALWAYS_ALLOW"),
    
    REQUIRE_ATTESTATION("REQUIRE_ATTESTATION"),
    
    ALWAYS_DENY("ALWAYS_DENY");

    private String value;

    EvaluationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EvaluationModeEnum fromValue(String value) {
      for (EvaluationModeEnum b : EvaluationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EvaluationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EvaluationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EvaluationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EvaluationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EvaluationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVALUATION_MODE = "evaluationMode";
  @SerializedName(SERIALIZED_NAME_EVALUATION_MODE)
  private EvaluationModeEnum evaluationMode;

  public static final String SERIALIZED_NAME_REQUIRE_ATTESTATIONS_BY = "requireAttestationsBy";
  @SerializedName(SERIALIZED_NAME_REQUIRE_ATTESTATIONS_BY)
  private List<String> requireAttestationsBy = new ArrayList<>();

  public AdmissionRule() {
  }

  public AdmissionRule enforcementMode(EnforcementModeEnum enforcementMode) {
    this.enforcementMode = enforcementMode;
    return this;
  }

  /**
   * Required. The action when a pod creation is denied by the admission rule.
   * @return enforcementMode
   */
  @javax.annotation.Nullable
  public EnforcementModeEnum getEnforcementMode() {
    return enforcementMode;
  }

  public void setEnforcementMode(EnforcementModeEnum enforcementMode) {
    this.enforcementMode = enforcementMode;
  }


  public AdmissionRule evaluationMode(EvaluationModeEnum evaluationMode) {
    this.evaluationMode = evaluationMode;
    return this;
  }

  /**
   * Required. How this admission rule will be evaluated.
   * @return evaluationMode
   */
  @javax.annotation.Nullable
  public EvaluationModeEnum getEvaluationMode() {
    return evaluationMode;
  }

  public void setEvaluationMode(EvaluationModeEnum evaluationMode) {
    this.evaluationMode = evaluationMode;
  }


  public AdmissionRule requireAttestationsBy(List<String> requireAttestationsBy) {
    this.requireAttestationsBy = requireAttestationsBy;
    return this;
  }

  public AdmissionRule addRequireAttestationsByItem(String requireAttestationsByItem) {
    if (this.requireAttestationsBy == null) {
      this.requireAttestationsBy = new ArrayList<>();
    }
    this.requireAttestationsBy.add(requireAttestationsByItem);
    return this;
  }

  /**
   * Optional. The resource names of the attestors that must attest to a container image, in the format &#x60;projects/_*_/attestors/_*&#x60;. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty.
   * @return requireAttestationsBy
   */
  @javax.annotation.Nullable
  public List<String> getRequireAttestationsBy() {
    return requireAttestationsBy;
  }

  public void setRequireAttestationsBy(List<String> requireAttestationsBy) {
    this.requireAttestationsBy = requireAttestationsBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdmissionRule admissionRule = (AdmissionRule) o;
    return Objects.equals(this.enforcementMode, admissionRule.enforcementMode) &&
        Objects.equals(this.evaluationMode, admissionRule.evaluationMode) &&
        Objects.equals(this.requireAttestationsBy, admissionRule.requireAttestationsBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enforcementMode, evaluationMode, requireAttestationsBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdmissionRule {\n");
    sb.append("    enforcementMode: ").append(toIndentedString(enforcementMode)).append("\n");
    sb.append("    evaluationMode: ").append(toIndentedString(evaluationMode)).append("\n");
    sb.append("    requireAttestationsBy: ").append(toIndentedString(requireAttestationsBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enforcementMode");
    openapiFields.add("evaluationMode");
    openapiFields.add("requireAttestationsBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdmissionRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdmissionRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdmissionRule is not found in the empty JSON string", AdmissionRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdmissionRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdmissionRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("enforcementMode") != null && !jsonObj.get("enforcementMode").isJsonNull()) && !jsonObj.get("enforcementMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforcementMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enforcementMode").toString()));
      }
      // validate the optional field `enforcementMode`
      if (jsonObj.get("enforcementMode") != null && !jsonObj.get("enforcementMode").isJsonNull()) {
        EnforcementModeEnum.validateJsonElement(jsonObj.get("enforcementMode"));
      }
      if ((jsonObj.get("evaluationMode") != null && !jsonObj.get("evaluationMode").isJsonNull()) && !jsonObj.get("evaluationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationMode").toString()));
      }
      // validate the optional field `evaluationMode`
      if (jsonObj.get("evaluationMode") != null && !jsonObj.get("evaluationMode").isJsonNull()) {
        EvaluationModeEnum.validateJsonElement(jsonObj.get("evaluationMode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requireAttestationsBy") != null && !jsonObj.get("requireAttestationsBy").isJsonNull() && !jsonObj.get("requireAttestationsBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requireAttestationsBy` to be an array in the JSON string but got `%s`", jsonObj.get("requireAttestationsBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdmissionRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdmissionRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdmissionRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdmissionRule.class));

       return (TypeAdapter<T>) new TypeAdapter<AdmissionRule>() {
           @Override
           public void write(JsonWriter out, AdmissionRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdmissionRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdmissionRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdmissionRule
   * @throws IOException if the JSON string is invalid with respect to AdmissionRule
   */
  public static AdmissionRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdmissionRule.class);
  }

  /**
   * Convert an instance of AdmissionRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

