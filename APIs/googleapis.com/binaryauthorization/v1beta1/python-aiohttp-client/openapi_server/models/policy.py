# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admission_rule import AdmissionRule
from openapi_server.models.admission_whitelist_pattern import AdmissionWhitelistPattern
from openapi_server import util


class Policy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admission_whitelist_patterns: List[AdmissionWhitelistPattern]=None, cluster_admission_rules: Dict[str, AdmissionRule]=None, default_admission_rule: AdmissionRule=None, description: str=None, etag: str=None, global_policy_evaluation_mode: str=None, istio_service_identity_admission_rules: Dict[str, AdmissionRule]=None, kubernetes_namespace_admission_rules: Dict[str, AdmissionRule]=None, kubernetes_service_account_admission_rules: Dict[str, AdmissionRule]=None, name: str=None, update_time: str=None):
        """Policy - a model defined in OpenAPI

        :param admission_whitelist_patterns: The admission_whitelist_patterns of this Policy.
        :param cluster_admission_rules: The cluster_admission_rules of this Policy.
        :param default_admission_rule: The default_admission_rule of this Policy.
        :param description: The description of this Policy.
        :param etag: The etag of this Policy.
        :param global_policy_evaluation_mode: The global_policy_evaluation_mode of this Policy.
        :param istio_service_identity_admission_rules: The istio_service_identity_admission_rules of this Policy.
        :param kubernetes_namespace_admission_rules: The kubernetes_namespace_admission_rules of this Policy.
        :param kubernetes_service_account_admission_rules: The kubernetes_service_account_admission_rules of this Policy.
        :param name: The name of this Policy.
        :param update_time: The update_time of this Policy.
        """
        self.openapi_types = {
            'admission_whitelist_patterns': List[AdmissionWhitelistPattern],
            'cluster_admission_rules': Dict[str, AdmissionRule],
            'default_admission_rule': AdmissionRule,
            'description': str,
            'etag': str,
            'global_policy_evaluation_mode': str,
            'istio_service_identity_admission_rules': Dict[str, AdmissionRule],
            'kubernetes_namespace_admission_rules': Dict[str, AdmissionRule],
            'kubernetes_service_account_admission_rules': Dict[str, AdmissionRule],
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'admission_whitelist_patterns': 'admissionWhitelistPatterns',
            'cluster_admission_rules': 'clusterAdmissionRules',
            'default_admission_rule': 'defaultAdmissionRule',
            'description': 'description',
            'etag': 'etag',
            'global_policy_evaluation_mode': 'globalPolicyEvaluationMode',
            'istio_service_identity_admission_rules': 'istioServiceIdentityAdmissionRules',
            'kubernetes_namespace_admission_rules': 'kubernetesNamespaceAdmissionRules',
            'kubernetes_service_account_admission_rules': 'kubernetesServiceAccountAdmissionRules',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._admission_whitelist_patterns = admission_whitelist_patterns
        self._cluster_admission_rules = cluster_admission_rules
        self._default_admission_rule = default_admission_rule
        self._description = description
        self._etag = etag
        self._global_policy_evaluation_mode = global_policy_evaluation_mode
        self._istio_service_identity_admission_rules = istio_service_identity_admission_rules
        self._kubernetes_namespace_admission_rules = kubernetes_namespace_admission_rules
        self._kubernetes_service_account_admission_rules = kubernetes_service_account_admission_rules
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Policy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Policy of this Policy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admission_whitelist_patterns(self):
        """Gets the admission_whitelist_patterns of this Policy.

        Optional. Admission policy allowlisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies.

        :return: The admission_whitelist_patterns of this Policy.
        :rtype: List[AdmissionWhitelistPattern]
        """
        return self._admission_whitelist_patterns

    @admission_whitelist_patterns.setter
    def admission_whitelist_patterns(self, admission_whitelist_patterns):
        """Sets the admission_whitelist_patterns of this Policy.

        Optional. Admission policy allowlisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies.

        :param admission_whitelist_patterns: The admission_whitelist_patterns of this Policy.
        :type admission_whitelist_patterns: List[AdmissionWhitelistPattern]
        """

        self._admission_whitelist_patterns = admission_whitelist_patterns

    @property
    def cluster_admission_rules(self):
        """Gets the cluster_admission_rules of this Policy.

        Optional. Per-cluster admission rules. Cluster spec format: `location.clusterId`. There can be at most one admission rule per cluster spec. A `location` is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For `clusterId` syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.

        :return: The cluster_admission_rules of this Policy.
        :rtype: Dict[str, AdmissionRule]
        """
        return self._cluster_admission_rules

    @cluster_admission_rules.setter
    def cluster_admission_rules(self, cluster_admission_rules):
        """Sets the cluster_admission_rules of this Policy.

        Optional. Per-cluster admission rules. Cluster spec format: `location.clusterId`. There can be at most one admission rule per cluster spec. A `location` is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For `clusterId` syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.

        :param cluster_admission_rules: The cluster_admission_rules of this Policy.
        :type cluster_admission_rules: Dict[str, AdmissionRule]
        """

        self._cluster_admission_rules = cluster_admission_rules

    @property
    def default_admission_rule(self):
        """Gets the default_admission_rule of this Policy.


        :return: The default_admission_rule of this Policy.
        :rtype: AdmissionRule
        """
        return self._default_admission_rule

    @default_admission_rule.setter
    def default_admission_rule(self, default_admission_rule):
        """Sets the default_admission_rule of this Policy.


        :param default_admission_rule: The default_admission_rule of this Policy.
        :type default_admission_rule: AdmissionRule
        """

        self._default_admission_rule = default_admission_rule

    @property
    def description(self):
        """Gets the description of this Policy.

        Optional. A descriptive comment.

        :return: The description of this Policy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Policy.

        Optional. A descriptive comment.

        :param description: The description of this Policy.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this Policy.

        Optional. A checksum, returned by the server, that can be sent on update requests to ensure the policy has an up-to-date value before attempting to update it. See https://google.aip.dev/154.

        :return: The etag of this Policy.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Policy.

        Optional. A checksum, returned by the server, that can be sent on update requests to ensure the policy has an up-to-date value before attempting to update it. See https://google.aip.dev/154.

        :param etag: The etag of this Policy.
        :type etag: str
        """

        self._etag = etag

    @property
    def global_policy_evaluation_mode(self):
        """Gets the global_policy_evaluation_mode of this Policy.

        Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy.

        :return: The global_policy_evaluation_mode of this Policy.
        :rtype: str
        """
        return self._global_policy_evaluation_mode

    @global_policy_evaluation_mode.setter
    def global_policy_evaluation_mode(self, global_policy_evaluation_mode):
        """Sets the global_policy_evaluation_mode of this Policy.

        Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy.

        :param global_policy_evaluation_mode: The global_policy_evaluation_mode of this Policy.
        :type global_policy_evaluation_mode: str
        """
        allowed_values = ["GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED", "ENABLE", "DISABLE"]  # noqa: E501
        if global_policy_evaluation_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `global_policy_evaluation_mode` ({0}), must be one of {1}"
                .format(global_policy_evaluation_mode, allowed_values)
            )

        self._global_policy_evaluation_mode = global_policy_evaluation_mode

    @property
    def istio_service_identity_admission_rules(self):
        """Gets the istio_service_identity_admission_rules of this Policy.

        Optional. Per-istio-service-identity admission rules. Istio service identity spec format: `spiffe:///ns//sa/` or `/ns//sa/` e.g. `spiffe://example.com/ns/test-ns/sa/default`

        :return: The istio_service_identity_admission_rules of this Policy.
        :rtype: Dict[str, AdmissionRule]
        """
        return self._istio_service_identity_admission_rules

    @istio_service_identity_admission_rules.setter
    def istio_service_identity_admission_rules(self, istio_service_identity_admission_rules):
        """Sets the istio_service_identity_admission_rules of this Policy.

        Optional. Per-istio-service-identity admission rules. Istio service identity spec format: `spiffe:///ns//sa/` or `/ns//sa/` e.g. `spiffe://example.com/ns/test-ns/sa/default`

        :param istio_service_identity_admission_rules: The istio_service_identity_admission_rules of this Policy.
        :type istio_service_identity_admission_rules: Dict[str, AdmissionRule]
        """

        self._istio_service_identity_admission_rules = istio_service_identity_admission_rules

    @property
    def kubernetes_namespace_admission_rules(self):
        """Gets the kubernetes_namespace_admission_rules of this Policy.

        Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format: `[a-z.-]+`, e.g. `some-namespace`

        :return: The kubernetes_namespace_admission_rules of this Policy.
        :rtype: Dict[str, AdmissionRule]
        """
        return self._kubernetes_namespace_admission_rules

    @kubernetes_namespace_admission_rules.setter
    def kubernetes_namespace_admission_rules(self, kubernetes_namespace_admission_rules):
        """Sets the kubernetes_namespace_admission_rules of this Policy.

        Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format: `[a-z.-]+`, e.g. `some-namespace`

        :param kubernetes_namespace_admission_rules: The kubernetes_namespace_admission_rules of this Policy.
        :type kubernetes_namespace_admission_rules: Dict[str, AdmissionRule]
        """

        self._kubernetes_namespace_admission_rules = kubernetes_namespace_admission_rules

    @property
    def kubernetes_service_account_admission_rules(self):
        """Gets the kubernetes_service_account_admission_rules of this Policy.

        Optional. Per-kubernetes-service-account admission rules. Service account spec format: `namespace:serviceaccount`. e.g. `test-ns:default`

        :return: The kubernetes_service_account_admission_rules of this Policy.
        :rtype: Dict[str, AdmissionRule]
        """
        return self._kubernetes_service_account_admission_rules

    @kubernetes_service_account_admission_rules.setter
    def kubernetes_service_account_admission_rules(self, kubernetes_service_account_admission_rules):
        """Sets the kubernetes_service_account_admission_rules of this Policy.

        Optional. Per-kubernetes-service-account admission rules. Service account spec format: `namespace:serviceaccount`. e.g. `test-ns:default`

        :param kubernetes_service_account_admission_rules: The kubernetes_service_account_admission_rules of this Policy.
        :type kubernetes_service_account_admission_rules: Dict[str, AdmissionRule]
        """

        self._kubernetes_service_account_admission_rules = kubernetes_service_account_admission_rules

    @property
    def name(self):
        """Gets the name of this Policy.

        Output only. The resource name, in the format `projects/*/policy`. There is at most one policy per project.

        :return: The name of this Policy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Policy.

        Output only. The resource name, in the format `projects/*/policy`. There is at most one policy per project.

        :param name: The name of this Policy.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this Policy.

        Output only. Time when the policy was last updated.

        :return: The update_time of this Policy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Policy.

        Output only. Time when the policy was last updated.

        :param update_time: The update_time of this Policy.
        :type update_time: str
        """

        self._update_time = update_time
