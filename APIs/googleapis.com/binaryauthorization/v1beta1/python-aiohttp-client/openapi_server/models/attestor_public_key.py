# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pkix_public_key import PkixPublicKey
from openapi_server import util


class AttestorPublicKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ascii_armored_pgp_public_key: str=None, comment: str=None, id: str=None, pkix_public_key: PkixPublicKey=None):
        """AttestorPublicKey - a model defined in OpenAPI

        :param ascii_armored_pgp_public_key: The ascii_armored_pgp_public_key of this AttestorPublicKey.
        :param comment: The comment of this AttestorPublicKey.
        :param id: The id of this AttestorPublicKey.
        :param pkix_public_key: The pkix_public_key of this AttestorPublicKey.
        """
        self.openapi_types = {
            'ascii_armored_pgp_public_key': str,
            'comment': str,
            'id': str,
            'pkix_public_key': PkixPublicKey
        }

        self.attribute_map = {
            'ascii_armored_pgp_public_key': 'asciiArmoredPgpPublicKey',
            'comment': 'comment',
            'id': 'id',
            'pkix_public_key': 'pkixPublicKey'
        }

        self._ascii_armored_pgp_public_key = ascii_armored_pgp_public_key
        self._comment = comment
        self._id = id
        self._pkix_public_key = pkix_public_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttestorPublicKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttestorPublicKey of this AttestorPublicKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ascii_armored_pgp_public_key(self):
        """Gets the ascii_armored_pgp_public_key of this AttestorPublicKey.

        ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID.

        :return: The ascii_armored_pgp_public_key of this AttestorPublicKey.
        :rtype: str
        """
        return self._ascii_armored_pgp_public_key

    @ascii_armored_pgp_public_key.setter
    def ascii_armored_pgp_public_key(self, ascii_armored_pgp_public_key):
        """Sets the ascii_armored_pgp_public_key of this AttestorPublicKey.

        ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID.

        :param ascii_armored_pgp_public_key: The ascii_armored_pgp_public_key of this AttestorPublicKey.
        :type ascii_armored_pgp_public_key: str
        """

        self._ascii_armored_pgp_public_key = ascii_armored_pgp_public_key

    @property
    def comment(self):
        """Gets the comment of this AttestorPublicKey.

        Optional. A descriptive comment. This field may be updated.

        :return: The comment of this AttestorPublicKey.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AttestorPublicKey.

        Optional. A descriptive comment. This field may be updated.

        :param comment: The comment of this AttestorPublicKey.
        :type comment: str
        """

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this AttestorPublicKey.

        The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details.

        :return: The id of this AttestorPublicKey.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttestorPublicKey.

        The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details.

        :param id: The id of this AttestorPublicKey.
        :type id: str
        """

        self._id = id

    @property
    def pkix_public_key(self):
        """Gets the pkix_public_key of this AttestorPublicKey.


        :return: The pkix_public_key of this AttestorPublicKey.
        :rtype: PkixPublicKey
        """
        return self._pkix_public_key

    @pkix_public_key.setter
    def pkix_public_key(self, pkix_public_key):
        """Sets the pkix_public_key of this AttestorPublicKey.


        :param pkix_public_key: The pkix_public_key of this AttestorPublicKey.
        :type pkix_public_key: PkixPublicKey
        """

        self._pkix_public_key = pkix_public_key
