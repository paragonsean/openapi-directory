# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PkixPublicKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, public_key_pem: str=None, signature_algorithm: str=None):
        """PkixPublicKey - a model defined in OpenAPI

        :param public_key_pem: The public_key_pem of this PkixPublicKey.
        :param signature_algorithm: The signature_algorithm of this PkixPublicKey.
        """
        self.openapi_types = {
            'public_key_pem': str,
            'signature_algorithm': str
        }

        self.attribute_map = {
            'public_key_pem': 'publicKeyPem',
            'signature_algorithm': 'signatureAlgorithm'
        }

        self._public_key_pem = public_key_pem
        self._signature_algorithm = signature_algorithm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PkixPublicKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PkixPublicKey of this PkixPublicKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def public_key_pem(self):
        """Gets the public_key_pem of this PkixPublicKey.

        A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13

        :return: The public_key_pem of this PkixPublicKey.
        :rtype: str
        """
        return self._public_key_pem

    @public_key_pem.setter
    def public_key_pem(self, public_key_pem):
        """Sets the public_key_pem of this PkixPublicKey.

        A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13

        :param public_key_pem: The public_key_pem of this PkixPublicKey.
        :type public_key_pem: str
        """

        self._public_key_pem = public_key_pem

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this PkixPublicKey.

        The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).

        :return: The signature_algorithm of this PkixPublicKey.
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this PkixPublicKey.

        The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).

        :param signature_algorithm: The signature_algorithm of this PkixPublicKey.
        :type signature_algorithm: str
        """
        allowed_values = ["SIGNATURE_ALGORITHM_UNSPECIFIED", "RSA_PSS_2048_SHA256", "RSA_SIGN_PSS_2048_SHA256", "RSA_PSS_3072_SHA256", "RSA_SIGN_PSS_3072_SHA256", "RSA_PSS_4096_SHA256", "RSA_SIGN_PSS_4096_SHA256", "RSA_PSS_4096_SHA512", "RSA_SIGN_PSS_4096_SHA512", "RSA_SIGN_PKCS1_2048_SHA256", "RSA_SIGN_PKCS1_3072_SHA256", "RSA_SIGN_PKCS1_4096_SHA256", "RSA_SIGN_PKCS1_4096_SHA512", "ECDSA_P256_SHA256", "EC_SIGN_P256_SHA256", "ECDSA_P384_SHA384", "EC_SIGN_P384_SHA384", "ECDSA_P521_SHA512", "EC_SIGN_P521_SHA512"]  # noqa: E501
        if signature_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `signature_algorithm` ({0}), must be one of {1}"
                .format(signature_algorithm, allowed_values)
            )

        self._signature_algorithm = signature_algorithm
