# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdmissionRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enforcement_mode: str=None, evaluation_mode: str=None, require_attestations_by: List[str]=None):
        """AdmissionRule - a model defined in OpenAPI

        :param enforcement_mode: The enforcement_mode of this AdmissionRule.
        :param evaluation_mode: The evaluation_mode of this AdmissionRule.
        :param require_attestations_by: The require_attestations_by of this AdmissionRule.
        """
        self.openapi_types = {
            'enforcement_mode': str,
            'evaluation_mode': str,
            'require_attestations_by': List[str]
        }

        self.attribute_map = {
            'enforcement_mode': 'enforcementMode',
            'evaluation_mode': 'evaluationMode',
            'require_attestations_by': 'requireAttestationsBy'
        }

        self._enforcement_mode = enforcement_mode
        self._evaluation_mode = evaluation_mode
        self._require_attestations_by = require_attestations_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdmissionRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdmissionRule of this AdmissionRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enforcement_mode(self):
        """Gets the enforcement_mode of this AdmissionRule.

        Required. The action when a pod creation is denied by the admission rule.

        :return: The enforcement_mode of this AdmissionRule.
        :rtype: str
        """
        return self._enforcement_mode

    @enforcement_mode.setter
    def enforcement_mode(self, enforcement_mode):
        """Sets the enforcement_mode of this AdmissionRule.

        Required. The action when a pod creation is denied by the admission rule.

        :param enforcement_mode: The enforcement_mode of this AdmissionRule.
        :type enforcement_mode: str
        """
        allowed_values = ["ENFORCEMENT_MODE_UNSPECIFIED", "ENFORCED_BLOCK_AND_AUDIT_LOG", "DRYRUN_AUDIT_LOG_ONLY"]  # noqa: E501
        if enforcement_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `enforcement_mode` ({0}), must be one of {1}"
                .format(enforcement_mode, allowed_values)
            )

        self._enforcement_mode = enforcement_mode

    @property
    def evaluation_mode(self):
        """Gets the evaluation_mode of this AdmissionRule.

        Required. How this admission rule will be evaluated.

        :return: The evaluation_mode of this AdmissionRule.
        :rtype: str
        """
        return self._evaluation_mode

    @evaluation_mode.setter
    def evaluation_mode(self, evaluation_mode):
        """Sets the evaluation_mode of this AdmissionRule.

        Required. How this admission rule will be evaluated.

        :param evaluation_mode: The evaluation_mode of this AdmissionRule.
        :type evaluation_mode: str
        """
        allowed_values = ["EVALUATION_MODE_UNSPECIFIED", "ALWAYS_ALLOW", "REQUIRE_ATTESTATION", "ALWAYS_DENY"]  # noqa: E501
        if evaluation_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_mode` ({0}), must be one of {1}"
                .format(evaluation_mode, allowed_values)
            )

        self._evaluation_mode = evaluation_mode

    @property
    def require_attestations_by(self):
        """Gets the require_attestations_by of this AdmissionRule.

        Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty.

        :return: The require_attestations_by of this AdmissionRule.
        :rtype: List[str]
        """
        return self._require_attestations_by

    @require_attestations_by.setter
    def require_attestations_by(self, require_attestations_by):
        """Sets the require_attestations_by of this AdmissionRule.

        Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty.

        :param require_attestations_by: The require_attestations_by of this AdmissionRule.
        :type require_attestations_by: List[str]
        """

        self._require_attestations_by = require_attestations_by
