# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidateAttestationOccurrenceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, denial_reason: str=None, result: str=None):
        """ValidateAttestationOccurrenceResponse - a model defined in OpenAPI

        :param denial_reason: The denial_reason of this ValidateAttestationOccurrenceResponse.
        :param result: The result of this ValidateAttestationOccurrenceResponse.
        """
        self.openapi_types = {
            'denial_reason': str,
            'result': str
        }

        self.attribute_map = {
            'denial_reason': 'denialReason',
            'result': 'result'
        }

        self._denial_reason = denial_reason
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidateAttestationOccurrenceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidateAttestationOccurrenceResponse of this ValidateAttestationOccurrenceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def denial_reason(self):
        """Gets the denial_reason of this ValidateAttestationOccurrenceResponse.

        The reason for denial if the Attestation couldn't be validated.

        :return: The denial_reason of this ValidateAttestationOccurrenceResponse.
        :rtype: str
        """
        return self._denial_reason

    @denial_reason.setter
    def denial_reason(self, denial_reason):
        """Sets the denial_reason of this ValidateAttestationOccurrenceResponse.

        The reason for denial if the Attestation couldn't be validated.

        :param denial_reason: The denial_reason of this ValidateAttestationOccurrenceResponse.
        :type denial_reason: str
        """

        self._denial_reason = denial_reason

    @property
    def result(self):
        """Gets the result of this ValidateAttestationOccurrenceResponse.

        The result of the Attestation validation.

        :return: The result of this ValidateAttestationOccurrenceResponse.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ValidateAttestationOccurrenceResponse.

        The result of the Attestation validation.

        :param result: The result of this ValidateAttestationOccurrenceResponse.
        :type result: str
        """
        allowed_values = ["RESULT_UNSPECIFIED", "VERIFIED", "ATTESTATION_NOT_VERIFIABLE"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result
