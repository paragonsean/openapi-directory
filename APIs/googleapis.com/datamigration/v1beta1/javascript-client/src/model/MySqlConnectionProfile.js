/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SslConfig from './SslConfig';

/**
 * The MySqlConnectionProfile model module.
 * @module model/MySqlConnectionProfile
 * @version v1beta1
 */
class MySqlConnectionProfile {
    /**
     * Constructs a new <code>MySqlConnectionProfile</code>.
     * Specifies connection parameters required specifically for MySQL databases.
     * @alias module:model/MySqlConnectionProfile
     */
    constructor() { 
        
        MySqlConnectionProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MySqlConnectionProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MySqlConnectionProfile} obj Optional instance to populate.
     * @return {module:model/MySqlConnectionProfile} The populated <code>MySqlConnectionProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MySqlConnectionProfile();

            if (data.hasOwnProperty('cloudSqlId')) {
                obj['cloudSqlId'] = ApiClient.convertToType(data['cloudSqlId'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('passwordSet')) {
                obj['passwordSet'] = ApiClient.convertToType(data['passwordSet'], 'Boolean');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('ssl')) {
                obj['ssl'] = SslConfig.constructFromObject(data['ssl']);
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MySqlConnectionProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MySqlConnectionProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cloudSqlId'] && !(typeof data['cloudSqlId'] === 'string' || data['cloudSqlId'] instanceof String)) {
            throw new Error("Expected the field `cloudSqlId` to be a primitive type in the JSON string but got " + data['cloudSqlId']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // validate the optional field `ssl`
        if (data['ssl']) { // data not null
          SslConfig.validateJSON(data['ssl']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
 * @member {String} cloudSqlId
 */
MySqlConnectionProfile.prototype['cloudSqlId'] = undefined;

/**
 * Required. The IP or hostname of the source MySQL database.
 * @member {String} host
 */
MySqlConnectionProfile.prototype['host'] = undefined;

/**
 * Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
 * @member {String} password
 */
MySqlConnectionProfile.prototype['password'] = undefined;

/**
 * Output only. Indicates If this connection profile password is stored.
 * @member {Boolean} passwordSet
 */
MySqlConnectionProfile.prototype['passwordSet'] = undefined;

/**
 * Required. The network port of the source MySQL database.
 * @member {Number} port
 */
MySqlConnectionProfile.prototype['port'] = undefined;

/**
 * @member {module:model/SslConfig} ssl
 */
MySqlConnectionProfile.prototype['ssl'] = undefined;

/**
 * Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
 * @member {String} username
 */
MySqlConnectionProfile.prototype['username'] = undefined;






export default MySqlConnectionProfile;

