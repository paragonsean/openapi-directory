/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReverseSshConnectivity model module.
 * @module model/ReverseSshConnectivity
 * @version v1beta1
 */
class ReverseSshConnectivity {
    /**
     * Constructs a new <code>ReverseSshConnectivity</code>.
     * The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1beta1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
     * @alias module:model/ReverseSshConnectivity
     */
    constructor() { 
        
        ReverseSshConnectivity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReverseSshConnectivity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReverseSshConnectivity} obj Optional instance to populate.
     * @return {module:model/ReverseSshConnectivity} The populated <code>ReverseSshConnectivity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReverseSshConnectivity();

            if (data.hasOwnProperty('vm')) {
                obj['vm'] = ApiClient.convertToType(data['vm'], 'String');
            }
            if (data.hasOwnProperty('vmIp')) {
                obj['vmIp'] = ApiClient.convertToType(data['vmIp'], 'String');
            }
            if (data.hasOwnProperty('vmPort')) {
                obj['vmPort'] = ApiClient.convertToType(data['vmPort'], 'Number');
            }
            if (data.hasOwnProperty('vpc')) {
                obj['vpc'] = ApiClient.convertToType(data['vpc'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReverseSshConnectivity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReverseSshConnectivity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['vm'] && !(typeof data['vm'] === 'string' || data['vm'] instanceof String)) {
            throw new Error("Expected the field `vm` to be a primitive type in the JSON string but got " + data['vm']);
        }
        // ensure the json data is a string
        if (data['vmIp'] && !(typeof data['vmIp'] === 'string' || data['vmIp'] instanceof String)) {
            throw new Error("Expected the field `vmIp` to be a primitive type in the JSON string but got " + data['vmIp']);
        }
        // ensure the json data is a string
        if (data['vpc'] && !(typeof data['vpc'] === 'string' || data['vpc'] instanceof String)) {
            throw new Error("Expected the field `vpc` to be a primitive type in the JSON string but got " + data['vpc']);
        }

        return true;
    }


}



/**
 * The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
 * @member {String} vm
 */
ReverseSshConnectivity.prototype['vm'] = undefined;

/**
 * Required. The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
 * @member {String} vmIp
 */
ReverseSshConnectivity.prototype['vmIp'] = undefined;

/**
 * Required. The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
 * @member {Number} vmPort
 */
ReverseSshConnectivity.prototype['vmPort'] = undefined;

/**
 * The name of the VPC to peer with the Cloud SQL private network.
 * @member {String} vpc
 */
ReverseSshConnectivity.prototype['vpc'] = undefined;






export default ReverseSshConnectivity;

