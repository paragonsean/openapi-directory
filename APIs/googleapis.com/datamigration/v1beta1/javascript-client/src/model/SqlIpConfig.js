/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SqlAclEntry from './SqlAclEntry';

/**
 * The SqlIpConfig model module.
 * @module model/SqlIpConfig
 * @version v1beta1
 */
class SqlIpConfig {
    /**
     * Constructs a new <code>SqlIpConfig</code>.
     * IP Management configuration.
     * @alias module:model/SqlIpConfig
     */
    constructor() { 
        
        SqlIpConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SqlIpConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SqlIpConfig} obj Optional instance to populate.
     * @return {module:model/SqlIpConfig} The populated <code>SqlIpConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SqlIpConfig();

            if (data.hasOwnProperty('authorizedNetworks')) {
                obj['authorizedNetworks'] = ApiClient.convertToType(data['authorizedNetworks'], [SqlAclEntry]);
            }
            if (data.hasOwnProperty('enableIpv4')) {
                obj['enableIpv4'] = ApiClient.convertToType(data['enableIpv4'], 'Boolean');
            }
            if (data.hasOwnProperty('privateNetwork')) {
                obj['privateNetwork'] = ApiClient.convertToType(data['privateNetwork'], 'String');
            }
            if (data.hasOwnProperty('requireSsl')) {
                obj['requireSsl'] = ApiClient.convertToType(data['requireSsl'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SqlIpConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SqlIpConfig</code>.
     */
    static validateJSON(data) {
        if (data['authorizedNetworks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authorizedNetworks'])) {
                throw new Error("Expected the field `authorizedNetworks` to be an array in the JSON data but got " + data['authorizedNetworks']);
            }
            // validate the optional field `authorizedNetworks` (array)
            for (const item of data['authorizedNetworks']) {
                SqlAclEntry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['privateNetwork'] && !(typeof data['privateNetwork'] === 'string' || data['privateNetwork'] instanceof String)) {
            throw new Error("Expected the field `privateNetwork` to be a primitive type in the JSON string but got " + data['privateNetwork']);
        }

        return true;
    }


}



/**
 * The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).
 * @member {Array.<module:model/SqlAclEntry>} authorizedNetworks
 */
SqlIpConfig.prototype['authorizedNetworks'] = undefined;

/**
 * Whether the instance is assigned a public IP address or not.
 * @member {Boolean} enableIpv4
 */
SqlIpConfig.prototype['enableIpv4'] = undefined;

/**
 * The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
 * @member {String} privateNetwork
 */
SqlIpConfig.prototype['privateNetwork'] = undefined;

/**
 * Whether SSL connections over IP should be enforced or not.
 * @member {Boolean} requireSsl
 */
SqlIpConfig.prototype['requireSsl'] = undefined;






export default SqlIpConfig;

