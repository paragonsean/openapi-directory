# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ssl_config import SslConfig
from openapi_server import util


class MySqlConnectionProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_sql_id: str=None, host: str=None, password: str=None, password_set: bool=None, port: int=None, ssl: SslConfig=None, username: str=None):
        """MySqlConnectionProfile - a model defined in OpenAPI

        :param cloud_sql_id: The cloud_sql_id of this MySqlConnectionProfile.
        :param host: The host of this MySqlConnectionProfile.
        :param password: The password of this MySqlConnectionProfile.
        :param password_set: The password_set of this MySqlConnectionProfile.
        :param port: The port of this MySqlConnectionProfile.
        :param ssl: The ssl of this MySqlConnectionProfile.
        :param username: The username of this MySqlConnectionProfile.
        """
        self.openapi_types = {
            'cloud_sql_id': str,
            'host': str,
            'password': str,
            'password_set': bool,
            'port': int,
            'ssl': SslConfig,
            'username': str
        }

        self.attribute_map = {
            'cloud_sql_id': 'cloudSqlId',
            'host': 'host',
            'password': 'password',
            'password_set': 'passwordSet',
            'port': 'port',
            'ssl': 'ssl',
            'username': 'username'
        }

        self._cloud_sql_id = cloud_sql_id
        self._host = host
        self._password = password
        self._password_set = password_set
        self._port = port
        self._ssl = ssl
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MySqlConnectionProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MySqlConnectionProfile of this MySqlConnectionProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_sql_id(self):
        """Gets the cloud_sql_id of this MySqlConnectionProfile.

        If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.

        :return: The cloud_sql_id of this MySqlConnectionProfile.
        :rtype: str
        """
        return self._cloud_sql_id

    @cloud_sql_id.setter
    def cloud_sql_id(self, cloud_sql_id):
        """Sets the cloud_sql_id of this MySqlConnectionProfile.

        If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.

        :param cloud_sql_id: The cloud_sql_id of this MySqlConnectionProfile.
        :type cloud_sql_id: str
        """

        self._cloud_sql_id = cloud_sql_id

    @property
    def host(self):
        """Gets the host of this MySqlConnectionProfile.

        Required. The IP or hostname of the source MySQL database.

        :return: The host of this MySqlConnectionProfile.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this MySqlConnectionProfile.

        Required. The IP or hostname of the source MySQL database.

        :param host: The host of this MySqlConnectionProfile.
        :type host: str
        """

        self._host = host

    @property
    def password(self):
        """Gets the password of this MySqlConnectionProfile.

        Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.

        :return: The password of this MySqlConnectionProfile.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this MySqlConnectionProfile.

        Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.

        :param password: The password of this MySqlConnectionProfile.
        :type password: str
        """

        self._password = password

    @property
    def password_set(self):
        """Gets the password_set of this MySqlConnectionProfile.

        Output only. Indicates If this connection profile password is stored.

        :return: The password_set of this MySqlConnectionProfile.
        :rtype: bool
        """
        return self._password_set

    @password_set.setter
    def password_set(self, password_set):
        """Sets the password_set of this MySqlConnectionProfile.

        Output only. Indicates If this connection profile password is stored.

        :param password_set: The password_set of this MySqlConnectionProfile.
        :type password_set: bool
        """

        self._password_set = password_set

    @property
    def port(self):
        """Gets the port of this MySqlConnectionProfile.

        Required. The network port of the source MySQL database.

        :return: The port of this MySqlConnectionProfile.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this MySqlConnectionProfile.

        Required. The network port of the source MySQL database.

        :param port: The port of this MySqlConnectionProfile.
        :type port: int
        """

        self._port = port

    @property
    def ssl(self):
        """Gets the ssl of this MySqlConnectionProfile.


        :return: The ssl of this MySqlConnectionProfile.
        :rtype: SslConfig
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this MySqlConnectionProfile.


        :param ssl: The ssl of this MySqlConnectionProfile.
        :type ssl: SslConfig
        """

        self._ssl = ssl

    @property
    def username(self):
        """Gets the username of this MySqlConnectionProfile.

        Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.

        :return: The username of this MySqlConnectionProfile.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MySqlConnectionProfile.

        Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.

        :param username: The username of this MySqlConnectionProfile.
        :type username: str
        """

        self._username = username
