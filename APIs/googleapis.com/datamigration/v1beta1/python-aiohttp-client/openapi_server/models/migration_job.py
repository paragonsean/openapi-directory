# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database_type import DatabaseType
from openapi_server.models.reverse_ssh_connectivity import ReverseSshConnectivity
from openapi_server.models.status import Status
from openapi_server.models.vpc_peering_connectivity import VpcPeeringConnectivity
from openapi_server import util


class MigrationJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, destination: str=None, destination_database: DatabaseType=None, display_name: str=None, dump_path: str=None, duration: str=None, end_time: str=None, error: Status=None, labels: Dict[str, str]=None, name: str=None, phase: str=None, reverse_ssh_connectivity: ReverseSshConnectivity=None, source: str=None, source_database: DatabaseType=None, state: str=None, static_ip_connectivity: object=None, type: str=None, update_time: str=None, vpc_peering_connectivity: VpcPeeringConnectivity=None):
        """MigrationJob - a model defined in OpenAPI

        :param create_time: The create_time of this MigrationJob.
        :param destination: The destination of this MigrationJob.
        :param destination_database: The destination_database of this MigrationJob.
        :param display_name: The display_name of this MigrationJob.
        :param dump_path: The dump_path of this MigrationJob.
        :param duration: The duration of this MigrationJob.
        :param end_time: The end_time of this MigrationJob.
        :param error: The error of this MigrationJob.
        :param labels: The labels of this MigrationJob.
        :param name: The name of this MigrationJob.
        :param phase: The phase of this MigrationJob.
        :param reverse_ssh_connectivity: The reverse_ssh_connectivity of this MigrationJob.
        :param source: The source of this MigrationJob.
        :param source_database: The source_database of this MigrationJob.
        :param state: The state of this MigrationJob.
        :param static_ip_connectivity: The static_ip_connectivity of this MigrationJob.
        :param type: The type of this MigrationJob.
        :param update_time: The update_time of this MigrationJob.
        :param vpc_peering_connectivity: The vpc_peering_connectivity of this MigrationJob.
        """
        self.openapi_types = {
            'create_time': str,
            'destination': str,
            'destination_database': DatabaseType,
            'display_name': str,
            'dump_path': str,
            'duration': str,
            'end_time': str,
            'error': Status,
            'labels': Dict[str, str],
            'name': str,
            'phase': str,
            'reverse_ssh_connectivity': ReverseSshConnectivity,
            'source': str,
            'source_database': DatabaseType,
            'state': str,
            'static_ip_connectivity': object,
            'type': str,
            'update_time': str,
            'vpc_peering_connectivity': VpcPeeringConnectivity
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'destination': 'destination',
            'destination_database': 'destinationDatabase',
            'display_name': 'displayName',
            'dump_path': 'dumpPath',
            'duration': 'duration',
            'end_time': 'endTime',
            'error': 'error',
            'labels': 'labels',
            'name': 'name',
            'phase': 'phase',
            'reverse_ssh_connectivity': 'reverseSshConnectivity',
            'source': 'source',
            'source_database': 'sourceDatabase',
            'state': 'state',
            'static_ip_connectivity': 'staticIpConnectivity',
            'type': 'type',
            'update_time': 'updateTime',
            'vpc_peering_connectivity': 'vpcPeeringConnectivity'
        }

        self._create_time = create_time
        self._destination = destination
        self._destination_database = destination_database
        self._display_name = display_name
        self._dump_path = dump_path
        self._duration = duration
        self._end_time = end_time
        self._error = error
        self._labels = labels
        self._name = name
        self._phase = phase
        self._reverse_ssh_connectivity = reverse_ssh_connectivity
        self._source = source
        self._source_database = source_database
        self._state = state
        self._static_ip_connectivity = static_ip_connectivity
        self._type = type
        self._update_time = update_time
        self._vpc_peering_connectivity = vpc_peering_connectivity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MigrationJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MigrationJob of this MigrationJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this MigrationJob.

        Output only. The timestamp when the migration job resource was created. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".

        :return: The create_time of this MigrationJob.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MigrationJob.

        Output only. The timestamp when the migration job resource was created. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".

        :param create_time: The create_time of this MigrationJob.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def destination(self):
        """Gets the destination of this MigrationJob.

        Required. The resource name (URI) of the destination connection profile.

        :return: The destination of this MigrationJob.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this MigrationJob.

        Required. The resource name (URI) of the destination connection profile.

        :param destination: The destination of this MigrationJob.
        :type destination: str
        """

        self._destination = destination

    @property
    def destination_database(self):
        """Gets the destination_database of this MigrationJob.


        :return: The destination_database of this MigrationJob.
        :rtype: DatabaseType
        """
        return self._destination_database

    @destination_database.setter
    def destination_database(self, destination_database):
        """Sets the destination_database of this MigrationJob.


        :param destination_database: The destination_database of this MigrationJob.
        :type destination_database: DatabaseType
        """

        self._destination_database = destination_database

    @property
    def display_name(self):
        """Gets the display_name of this MigrationJob.

        The migration job display name.

        :return: The display_name of this MigrationJob.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MigrationJob.

        The migration job display name.

        :param display_name: The display_name of this MigrationJob.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def dump_path(self):
        """Gets the dump_path of this MigrationJob.

        The path to the dump file in Google Cloud Storage, in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).

        :return: The dump_path of this MigrationJob.
        :rtype: str
        """
        return self._dump_path

    @dump_path.setter
    def dump_path(self, dump_path):
        """Sets the dump_path of this MigrationJob.

        The path to the dump file in Google Cloud Storage, in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]).

        :param dump_path: The dump_path of this MigrationJob.
        :type dump_path: str
        """

        self._dump_path = dump_path

    @property
    def duration(self):
        """Gets the duration of this MigrationJob.

        Output only. The duration of the migration job (in seconds). A duration in seconds with up to nine fractional digits, terminated by 's'. Example: \"3.5s\".

        :return: The duration of this MigrationJob.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MigrationJob.

        Output only. The duration of the migration job (in seconds). A duration in seconds with up to nine fractional digits, terminated by 's'. Example: \"3.5s\".

        :param duration: The duration of this MigrationJob.
        :type duration: str
        """

        self._duration = duration

    @property
    def end_time(self):
        """Gets the end_time of this MigrationJob.

        Output only. If the migration job is completed, the time when it was completed.

        :return: The end_time of this MigrationJob.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MigrationJob.

        Output only. If the migration job is completed, the time when it was completed.

        :param end_time: The end_time of this MigrationJob.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def error(self):
        """Gets the error of this MigrationJob.


        :return: The error of this MigrationJob.
        :rtype: Status
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this MigrationJob.


        :param error: The error of this MigrationJob.
        :type error: Status
        """

        self._error = error

    @property
    def labels(self):
        """Gets the labels of this MigrationJob.

        The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \"key\": \"value\" pairs. Example: `{ \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }`.

        :return: The labels of this MigrationJob.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this MigrationJob.

        The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \"key\": \"value\" pairs. Example: `{ \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }`.

        :param labels: The labels of this MigrationJob.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this MigrationJob.

        The name (URI) of this migration job resource, in the form of: projects/{project}/locations/{location}/migrationJobs/{migrationJob}.

        :return: The name of this MigrationJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MigrationJob.

        The name (URI) of this migration job resource, in the form of: projects/{project}/locations/{location}/migrationJobs/{migrationJob}.

        :param name: The name of this MigrationJob.
        :type name: str
        """

        self._name = name

    @property
    def phase(self):
        """Gets the phase of this MigrationJob.

        Output only. The current migration job phase.

        :return: The phase of this MigrationJob.
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this MigrationJob.

        Output only. The current migration job phase.

        :param phase: The phase of this MigrationJob.
        :type phase: str
        """
        allowed_values = ["PHASE_UNSPECIFIED", "FULL_DUMP", "CDC", "PROMOTE_IN_PROGRESS", "WAITING_FOR_SOURCE_WRITES_TO_STOP", "PREPARING_THE_DUMP"]  # noqa: E501
        if phase not in allowed_values:
            raise ValueError(
                "Invalid value for `phase` ({0}), must be one of {1}"
                .format(phase, allowed_values)
            )

        self._phase = phase

    @property
    def reverse_ssh_connectivity(self):
        """Gets the reverse_ssh_connectivity of this MigrationJob.


        :return: The reverse_ssh_connectivity of this MigrationJob.
        :rtype: ReverseSshConnectivity
        """
        return self._reverse_ssh_connectivity

    @reverse_ssh_connectivity.setter
    def reverse_ssh_connectivity(self, reverse_ssh_connectivity):
        """Sets the reverse_ssh_connectivity of this MigrationJob.


        :param reverse_ssh_connectivity: The reverse_ssh_connectivity of this MigrationJob.
        :type reverse_ssh_connectivity: ReverseSshConnectivity
        """

        self._reverse_ssh_connectivity = reverse_ssh_connectivity

    @property
    def source(self):
        """Gets the source of this MigrationJob.

        Required. The resource name (URI) of the source connection profile.

        :return: The source of this MigrationJob.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MigrationJob.

        Required. The resource name (URI) of the source connection profile.

        :param source: The source of this MigrationJob.
        :type source: str
        """

        self._source = source

    @property
    def source_database(self):
        """Gets the source_database of this MigrationJob.


        :return: The source_database of this MigrationJob.
        :rtype: DatabaseType
        """
        return self._source_database

    @source_database.setter
    def source_database(self, source_database):
        """Sets the source_database of this MigrationJob.


        :param source_database: The source_database of this MigrationJob.
        :type source_database: DatabaseType
        """

        self._source_database = source_database

    @property
    def state(self):
        """Gets the state of this MigrationJob.

        The current migration job state.

        :return: The state of this MigrationJob.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MigrationJob.

        The current migration job state.

        :param state: The state of this MigrationJob.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "MAINTENANCE", "DRAFT", "CREATING", "NOT_STARTED", "RUNNING", "FAILED", "COMPLETED", "DELETING", "STOPPING", "STOPPED", "DELETED", "UPDATING", "STARTING", "RESTARTING", "RESUMING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def static_ip_connectivity(self):
        """Gets the static_ip_connectivity of this MigrationJob.

        The source database will allow incoming connections from the destination database's public IP. You can retrieve the Cloud SQL instance's public IP from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.

        :return: The static_ip_connectivity of this MigrationJob.
        :rtype: object
        """
        return self._static_ip_connectivity

    @static_ip_connectivity.setter
    def static_ip_connectivity(self, static_ip_connectivity):
        """Sets the static_ip_connectivity of this MigrationJob.

        The source database will allow incoming connections from the destination database's public IP. You can retrieve the Cloud SQL instance's public IP from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.

        :param static_ip_connectivity: The static_ip_connectivity of this MigrationJob.
        :type static_ip_connectivity: object
        """

        self._static_ip_connectivity = static_ip_connectivity

    @property
    def type(self):
        """Gets the type of this MigrationJob.

        Required. The migration job type.

        :return: The type of this MigrationJob.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MigrationJob.

        Required. The migration job type.

        :param type: The type of this MigrationJob.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "ONE_TIME", "CONTINUOUS"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this MigrationJob.

        Output only. The timestamp when the migration job resource was last updated. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".

        :return: The update_time of this MigrationJob.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this MigrationJob.

        Output only. The timestamp when the migration job resource was last updated. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".

        :param update_time: The update_time of this MigrationJob.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def vpc_peering_connectivity(self):
        """Gets the vpc_peering_connectivity of this MigrationJob.


        :return: The vpc_peering_connectivity of this MigrationJob.
        :rtype: VpcPeeringConnectivity
        """
        return self._vpc_peering_connectivity

    @vpc_peering_connectivity.setter
    def vpc_peering_connectivity(self, vpc_peering_connectivity):
        """Sets the vpc_peering_connectivity of this MigrationJob.


        :param vpc_peering_connectivity: The vpc_peering_connectivity of this MigrationJob.
        :type vpc_peering_connectivity: VpcPeeringConnectivity
        """

        self._vpc_peering_connectivity = vpc_peering_connectivity
