# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sql_acl_entry import SqlAclEntry
from openapi_server import util


class SqlIpConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorized_networks: List[SqlAclEntry]=None, enable_ipv4: bool=None, private_network: str=None, require_ssl: bool=None):
        """SqlIpConfig - a model defined in OpenAPI

        :param authorized_networks: The authorized_networks of this SqlIpConfig.
        :param enable_ipv4: The enable_ipv4 of this SqlIpConfig.
        :param private_network: The private_network of this SqlIpConfig.
        :param require_ssl: The require_ssl of this SqlIpConfig.
        """
        self.openapi_types = {
            'authorized_networks': List[SqlAclEntry],
            'enable_ipv4': bool,
            'private_network': str,
            'require_ssl': bool
        }

        self.attribute_map = {
            'authorized_networks': 'authorizedNetworks',
            'enable_ipv4': 'enableIpv4',
            'private_network': 'privateNetwork',
            'require_ssl': 'requireSsl'
        }

        self._authorized_networks = authorized_networks
        self._enable_ipv4 = enable_ipv4
        self._private_network = private_network
        self._require_ssl = require_ssl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlIpConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlIpConfig of this SqlIpConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorized_networks(self):
        """Gets the authorized_networks of this SqlIpConfig.

        The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).

        :return: The authorized_networks of this SqlIpConfig.
        :rtype: List[SqlAclEntry]
        """
        return self._authorized_networks

    @authorized_networks.setter
    def authorized_networks(self, authorized_networks):
        """Sets the authorized_networks of this SqlIpConfig.

        The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).

        :param authorized_networks: The authorized_networks of this SqlIpConfig.
        :type authorized_networks: List[SqlAclEntry]
        """

        self._authorized_networks = authorized_networks

    @property
    def enable_ipv4(self):
        """Gets the enable_ipv4 of this SqlIpConfig.

        Whether the instance is assigned a public IP address or not.

        :return: The enable_ipv4 of this SqlIpConfig.
        :rtype: bool
        """
        return self._enable_ipv4

    @enable_ipv4.setter
    def enable_ipv4(self, enable_ipv4):
        """Sets the enable_ipv4 of this SqlIpConfig.

        Whether the instance is assigned a public IP address or not.

        :param enable_ipv4: The enable_ipv4 of this SqlIpConfig.
        :type enable_ipv4: bool
        """

        self._enable_ipv4 = enable_ipv4

    @property
    def private_network(self):
        """Gets the private_network of this SqlIpConfig.

        The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.

        :return: The private_network of this SqlIpConfig.
        :rtype: str
        """
        return self._private_network

    @private_network.setter
    def private_network(self, private_network):
        """Sets the private_network of this SqlIpConfig.

        The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.

        :param private_network: The private_network of this SqlIpConfig.
        :type private_network: str
        """

        self._private_network = private_network

    @property
    def require_ssl(self):
        """Gets the require_ssl of this SqlIpConfig.

        Whether SSL connections over IP should be enforced or not.

        :return: The require_ssl of this SqlIpConfig.
        :rtype: bool
        """
        return self._require_ssl

    @require_ssl.setter
    def require_ssl(self, require_ssl):
        """Sets the require_ssl of this SqlIpConfig.

        Whether SSL connections over IP should be enforced or not.

        :param require_ssl: The require_ssl of this SqlIpConfig.
        :type require_ssl: bool
        """

        self._require_ssl = require_ssl
