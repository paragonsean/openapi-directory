# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SslConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_certificate: str=None, client_certificate: str=None, client_key: str=None, type: str=None):
        """SslConfig - a model defined in OpenAPI

        :param ca_certificate: The ca_certificate of this SslConfig.
        :param client_certificate: The client_certificate of this SslConfig.
        :param client_key: The client_key of this SslConfig.
        :param type: The type of this SslConfig.
        """
        self.openapi_types = {
            'ca_certificate': str,
            'client_certificate': str,
            'client_key': str,
            'type': str
        }

        self.attribute_map = {
            'ca_certificate': 'caCertificate',
            'client_certificate': 'clientCertificate',
            'client_key': 'clientKey',
            'type': 'type'
        }

        self._ca_certificate = ca_certificate
        self._client_certificate = client_certificate
        self._client_key = client_key
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SslConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SslConfig of this SslConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_certificate(self):
        """Gets the ca_certificate of this SslConfig.

        Required. Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.

        :return: The ca_certificate of this SslConfig.
        :rtype: str
        """
        return self._ca_certificate

    @ca_certificate.setter
    def ca_certificate(self, ca_certificate):
        """Sets the ca_certificate of this SslConfig.

        Required. Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.

        :param ca_certificate: The ca_certificate of this SslConfig.
        :type ca_certificate: str
        """

        self._ca_certificate = ca_certificate

    @property
    def client_certificate(self):
        """Gets the client_certificate of this SslConfig.

        Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.

        :return: The client_certificate of this SslConfig.
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this SslConfig.

        Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.

        :param client_certificate: The client_certificate of this SslConfig.
        :type client_certificate: str
        """

        self._client_certificate = client_certificate

    @property
    def client_key(self):
        """Gets the client_key of this SslConfig.

        Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.

        :return: The client_key of this SslConfig.
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this SslConfig.

        Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.

        :param client_key: The client_key of this SslConfig.
        :type client_key: str
        """

        self._client_key = client_key

    @property
    def type(self):
        """Gets the type of this SslConfig.

        Output only. The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'.

        :return: The type of this SslConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SslConfig.

        Output only. The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'.

        :param type: The type of this SslConfig.
        :type type: str
        """
        allowed_values = ["SSL_TYPE_UNSPECIFIED", "SERVER_ONLY", "SERVER_CLIENT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
