# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_sql_connection_profile import CloudSqlConnectionProfile
from openapi_server.models.my_sql_connection_profile import MySqlConnectionProfile
from openapi_server.models.status import Status
from openapi_server import util


class ConnectionProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloudsql: CloudSqlConnectionProfile=None, create_time: str=None, display_name: str=None, error: Status=None, labels: Dict[str, str]=None, mysql: MySqlConnectionProfile=None, name: str=None, provider: str=None, state: str=None, update_time: str=None):
        """ConnectionProfile - a model defined in OpenAPI

        :param cloudsql: The cloudsql of this ConnectionProfile.
        :param create_time: The create_time of this ConnectionProfile.
        :param display_name: The display_name of this ConnectionProfile.
        :param error: The error of this ConnectionProfile.
        :param labels: The labels of this ConnectionProfile.
        :param mysql: The mysql of this ConnectionProfile.
        :param name: The name of this ConnectionProfile.
        :param provider: The provider of this ConnectionProfile.
        :param state: The state of this ConnectionProfile.
        :param update_time: The update_time of this ConnectionProfile.
        """
        self.openapi_types = {
            'cloudsql': CloudSqlConnectionProfile,
            'create_time': str,
            'display_name': str,
            'error': Status,
            'labels': Dict[str, str],
            'mysql': MySqlConnectionProfile,
            'name': str,
            'provider': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'cloudsql': 'cloudsql',
            'create_time': 'createTime',
            'display_name': 'displayName',
            'error': 'error',
            'labels': 'labels',
            'mysql': 'mysql',
            'name': 'name',
            'provider': 'provider',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._cloudsql = cloudsql
        self._create_time = create_time
        self._display_name = display_name
        self._error = error
        self._labels = labels
        self._mysql = mysql
        self._name = name
        self._provider = provider
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionProfile of this ConnectionProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloudsql(self):
        """Gets the cloudsql of this ConnectionProfile.


        :return: The cloudsql of this ConnectionProfile.
        :rtype: CloudSqlConnectionProfile
        """
        return self._cloudsql

    @cloudsql.setter
    def cloudsql(self, cloudsql):
        """Sets the cloudsql of this ConnectionProfile.


        :param cloudsql: The cloudsql of this ConnectionProfile.
        :type cloudsql: CloudSqlConnectionProfile
        """

        self._cloudsql = cloudsql

    @property
    def create_time(self):
        """Gets the create_time of this ConnectionProfile.

        Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".

        :return: The create_time of this ConnectionProfile.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ConnectionProfile.

        Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".

        :param create_time: The create_time of this ConnectionProfile.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this ConnectionProfile.

        The connection profile display name.

        :return: The display_name of this ConnectionProfile.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConnectionProfile.

        The connection profile display name.

        :param display_name: The display_name of this ConnectionProfile.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def error(self):
        """Gets the error of this ConnectionProfile.


        :return: The error of this ConnectionProfile.
        :rtype: Status
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ConnectionProfile.


        :param error: The error of this ConnectionProfile.
        :type error: Status
        """

        self._error = error

    @property
    def labels(self):
        """Gets the labels of this ConnectionProfile.

        The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \"key\": \"value\" pairs. Example: `{ \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }`.

        :return: The labels of this ConnectionProfile.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ConnectionProfile.

        The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \"key\": \"value\" pairs. Example: `{ \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }`.

        :param labels: The labels of this ConnectionProfile.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mysql(self):
        """Gets the mysql of this ConnectionProfile.


        :return: The mysql of this ConnectionProfile.
        :rtype: MySqlConnectionProfile
        """
        return self._mysql

    @mysql.setter
    def mysql(self, mysql):
        """Sets the mysql of this ConnectionProfile.


        :param mysql: The mysql of this ConnectionProfile.
        :type mysql: MySqlConnectionProfile
        """

        self._mysql = mysql

    @property
    def name(self):
        """Gets the name of this ConnectionProfile.

        The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.

        :return: The name of this ConnectionProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectionProfile.

        The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.

        :param name: The name of this ConnectionProfile.
        :type name: str
        """

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this ConnectionProfile.

        The database provider.

        :return: The provider of this ConnectionProfile.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ConnectionProfile.

        The database provider.

        :param provider: The provider of this ConnectionProfile.
        :type provider: str
        """
        allowed_values = ["DATABASE_PROVIDER_UNSPECIFIED", "CLOUDSQL", "RDS"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def state(self):
        """Gets the state of this ConnectionProfile.

        The current connection profile state (e.g. DRAFT, READY, or FAILED).

        :return: The state of this ConnectionProfile.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConnectionProfile.

        The current connection profile state (e.g. DRAFT, READY, or FAILED).

        :param state: The state of this ConnectionProfile.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "DRAFT", "CREATING", "READY", "UPDATING", "DELETING", "DELETED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this ConnectionProfile.

        Output only. The timestamp when the resource was last updated. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".

        :return: The update_time of this ConnectionProfile.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ConnectionProfile.

        Output only. The timestamp when the resource was last updated. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".

        :param update_time: The update_time of this ConnectionProfile.
        :type update_time: str
        """

        self._update_time = update_time
