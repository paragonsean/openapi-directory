# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sql_ip_config import SqlIpConfig
from openapi_server import util


class CloudSqlSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_policy: str=None, auto_storage_increase: bool=None, data_disk_size_gb: str=None, data_disk_type: str=None, database_flags: Dict[str, str]=None, database_version: str=None, ip_config: SqlIpConfig=None, root_password: str=None, root_password_set: bool=None, source_id: str=None, storage_auto_resize_limit: str=None, tier: str=None, user_labels: Dict[str, str]=None, zone: str=None):
        """CloudSqlSettings - a model defined in OpenAPI

        :param activation_policy: The activation_policy of this CloudSqlSettings.
        :param auto_storage_increase: The auto_storage_increase of this CloudSqlSettings.
        :param data_disk_size_gb: The data_disk_size_gb of this CloudSqlSettings.
        :param data_disk_type: The data_disk_type of this CloudSqlSettings.
        :param database_flags: The database_flags of this CloudSqlSettings.
        :param database_version: The database_version of this CloudSqlSettings.
        :param ip_config: The ip_config of this CloudSqlSettings.
        :param root_password: The root_password of this CloudSqlSettings.
        :param root_password_set: The root_password_set of this CloudSqlSettings.
        :param source_id: The source_id of this CloudSqlSettings.
        :param storage_auto_resize_limit: The storage_auto_resize_limit of this CloudSqlSettings.
        :param tier: The tier of this CloudSqlSettings.
        :param user_labels: The user_labels of this CloudSqlSettings.
        :param zone: The zone of this CloudSqlSettings.
        """
        self.openapi_types = {
            'activation_policy': str,
            'auto_storage_increase': bool,
            'data_disk_size_gb': str,
            'data_disk_type': str,
            'database_flags': Dict[str, str],
            'database_version': str,
            'ip_config': SqlIpConfig,
            'root_password': str,
            'root_password_set': bool,
            'source_id': str,
            'storage_auto_resize_limit': str,
            'tier': str,
            'user_labels': Dict[str, str],
            'zone': str
        }

        self.attribute_map = {
            'activation_policy': 'activationPolicy',
            'auto_storage_increase': 'autoStorageIncrease',
            'data_disk_size_gb': 'dataDiskSizeGb',
            'data_disk_type': 'dataDiskType',
            'database_flags': 'databaseFlags',
            'database_version': 'databaseVersion',
            'ip_config': 'ipConfig',
            'root_password': 'rootPassword',
            'root_password_set': 'rootPasswordSet',
            'source_id': 'sourceId',
            'storage_auto_resize_limit': 'storageAutoResizeLimit',
            'tier': 'tier',
            'user_labels': 'userLabels',
            'zone': 'zone'
        }

        self._activation_policy = activation_policy
        self._auto_storage_increase = auto_storage_increase
        self._data_disk_size_gb = data_disk_size_gb
        self._data_disk_type = data_disk_type
        self._database_flags = database_flags
        self._database_version = database_version
        self._ip_config = ip_config
        self._root_password = root_password
        self._root_password_set = root_password_set
        self._source_id = source_id
        self._storage_auto_resize_limit = storage_auto_resize_limit
        self._tier = tier
        self._user_labels = user_labels
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudSqlSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudSqlSettings of this CloudSqlSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_policy(self):
        """Gets the activation_policy of this CloudSqlSettings.

        The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.

        :return: The activation_policy of this CloudSqlSettings.
        :rtype: str
        """
        return self._activation_policy

    @activation_policy.setter
    def activation_policy(self, activation_policy):
        """Sets the activation_policy of this CloudSqlSettings.

        The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.

        :param activation_policy: The activation_policy of this CloudSqlSettings.
        :type activation_policy: str
        """
        allowed_values = ["SQL_ACTIVATION_POLICY_UNSPECIFIED", "ALWAYS", "NEVER"]  # noqa: E501
        if activation_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `activation_policy` ({0}), must be one of {1}"
                .format(activation_policy, allowed_values)
            )

        self._activation_policy = activation_policy

    @property
    def auto_storage_increase(self):
        """Gets the auto_storage_increase of this CloudSqlSettings.

        [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.

        :return: The auto_storage_increase of this CloudSqlSettings.
        :rtype: bool
        """
        return self._auto_storage_increase

    @auto_storage_increase.setter
    def auto_storage_increase(self, auto_storage_increase):
        """Sets the auto_storage_increase of this CloudSqlSettings.

        [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.

        :param auto_storage_increase: The auto_storage_increase of this CloudSqlSettings.
        :type auto_storage_increase: bool
        """

        self._auto_storage_increase = auto_storage_increase

    @property
    def data_disk_size_gb(self):
        """Gets the data_disk_size_gb of this CloudSqlSettings.

        The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.

        :return: The data_disk_size_gb of this CloudSqlSettings.
        :rtype: str
        """
        return self._data_disk_size_gb

    @data_disk_size_gb.setter
    def data_disk_size_gb(self, data_disk_size_gb):
        """Sets the data_disk_size_gb of this CloudSqlSettings.

        The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.

        :param data_disk_size_gb: The data_disk_size_gb of this CloudSqlSettings.
        :type data_disk_size_gb: str
        """

        self._data_disk_size_gb = data_disk_size_gb

    @property
    def data_disk_type(self):
        """Gets the data_disk_type of this CloudSqlSettings.

        The type of storage: `PD_SSD` (default) or `PD_HDD`.

        :return: The data_disk_type of this CloudSqlSettings.
        :rtype: str
        """
        return self._data_disk_type

    @data_disk_type.setter
    def data_disk_type(self, data_disk_type):
        """Sets the data_disk_type of this CloudSqlSettings.

        The type of storage: `PD_SSD` (default) or `PD_HDD`.

        :param data_disk_type: The data_disk_type of this CloudSqlSettings.
        :type data_disk_type: str
        """
        allowed_values = ["SQL_DATA_DISK_TYPE_UNSPECIFIED", "PD_SSD", "PD_HDD"]  # noqa: E501
        if data_disk_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_disk_type` ({0}), must be one of {1}"
                .format(data_disk_type, allowed_values)
            )

        self._data_disk_type = data_disk_type

    @property
    def database_flags(self):
        """Gets the database_flags of this CloudSqlSettings.

        The database flags passed to the Cloud SQL instance at startup. An object containing a list of \"key\": value pairs. Example: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.

        :return: The database_flags of this CloudSqlSettings.
        :rtype: Dict[str, str]
        """
        return self._database_flags

    @database_flags.setter
    def database_flags(self, database_flags):
        """Sets the database_flags of this CloudSqlSettings.

        The database flags passed to the Cloud SQL instance at startup. An object containing a list of \"key\": value pairs. Example: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.

        :param database_flags: The database_flags of this CloudSqlSettings.
        :type database_flags: Dict[str, str]
        """

        self._database_flags = database_flags

    @property
    def database_version(self):
        """Gets the database_version of this CloudSqlSettings.

        The database engine type and version.

        :return: The database_version of this CloudSqlSettings.
        :rtype: str
        """
        return self._database_version

    @database_version.setter
    def database_version(self, database_version):
        """Sets the database_version of this CloudSqlSettings.

        The database engine type and version.

        :param database_version: The database_version of this CloudSqlSettings.
        :type database_version: str
        """
        allowed_values = ["SQL_DATABASE_VERSION_UNSPECIFIED", "MYSQL_5_6", "MYSQL_5_7", "MYSQL_8_0"]  # noqa: E501
        if database_version not in allowed_values:
            raise ValueError(
                "Invalid value for `database_version` ({0}), must be one of {1}"
                .format(database_version, allowed_values)
            )

        self._database_version = database_version

    @property
    def ip_config(self):
        """Gets the ip_config of this CloudSqlSettings.


        :return: The ip_config of this CloudSqlSettings.
        :rtype: SqlIpConfig
        """
        return self._ip_config

    @ip_config.setter
    def ip_config(self, ip_config):
        """Sets the ip_config of this CloudSqlSettings.


        :param ip_config: The ip_config of this CloudSqlSettings.
        :type ip_config: SqlIpConfig
        """

        self._ip_config = ip_config

    @property
    def root_password(self):
        """Gets the root_password of this CloudSqlSettings.

        Input only. Initial root password.

        :return: The root_password of this CloudSqlSettings.
        :rtype: str
        """
        return self._root_password

    @root_password.setter
    def root_password(self, root_password):
        """Sets the root_password of this CloudSqlSettings.

        Input only. Initial root password.

        :param root_password: The root_password of this CloudSqlSettings.
        :type root_password: str
        """

        self._root_password = root_password

    @property
    def root_password_set(self):
        """Gets the root_password_set of this CloudSqlSettings.

        Output only. Indicates If this connection profile root password is stored.

        :return: The root_password_set of this CloudSqlSettings.
        :rtype: bool
        """
        return self._root_password_set

    @root_password_set.setter
    def root_password_set(self, root_password_set):
        """Sets the root_password_set of this CloudSqlSettings.

        Output only. Indicates If this connection profile root password is stored.

        :param root_password_set: The root_password_set of this CloudSqlSettings.
        :type root_password_set: bool
        """

        self._root_password_set = root_password_set

    @property
    def source_id(self):
        """Gets the source_id of this CloudSqlSettings.

        The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`

        :return: The source_id of this CloudSqlSettings.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this CloudSqlSettings.

        The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`

        :param source_id: The source_id of this CloudSqlSettings.
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def storage_auto_resize_limit(self):
        """Gets the storage_auto_resize_limit of this CloudSqlSettings.

        The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.

        :return: The storage_auto_resize_limit of this CloudSqlSettings.
        :rtype: str
        """
        return self._storage_auto_resize_limit

    @storage_auto_resize_limit.setter
    def storage_auto_resize_limit(self, storage_auto_resize_limit):
        """Sets the storage_auto_resize_limit of this CloudSqlSettings.

        The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.

        :param storage_auto_resize_limit: The storage_auto_resize_limit of this CloudSqlSettings.
        :type storage_auto_resize_limit: str
        """

        self._storage_auto_resize_limit = storage_auto_resize_limit

    @property
    def tier(self):
        """Gets the tier of this CloudSqlSettings.

        The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).

        :return: The tier of this CloudSqlSettings.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this CloudSqlSettings.

        The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).

        :param tier: The tier of this CloudSqlSettings.
        :type tier: str
        """

        self._tier = tier

    @property
    def user_labels(self):
        """Gets the user_labels of this CloudSqlSettings.

        The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \"key\": \"value\" pairs. Example: `{ \"name\": \"wrench\", \"mass\": \"18kg\", \"count\": \"3\" }`.

        :return: The user_labels of this CloudSqlSettings.
        :rtype: Dict[str, str]
        """
        return self._user_labels

    @user_labels.setter
    def user_labels(self, user_labels):
        """Sets the user_labels of this CloudSqlSettings.

        The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \"key\": \"value\" pairs. Example: `{ \"name\": \"wrench\", \"mass\": \"18kg\", \"count\": \"3\" }`.

        :param user_labels: The user_labels of this CloudSqlSettings.
        :type user_labels: Dict[str, str]
        """

        self._user_labels = user_labels

    @property
    def zone(self):
        """Gets the zone of this CloudSqlSettings.

        The Google Cloud Platform zone where your Cloud SQL database instance is located.

        :return: The zone of this CloudSqlSettings.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this CloudSqlSettings.

        The Google Cloud Platform zone where your Cloud SQL database instance is located.

        :param zone: The zone of this CloudSqlSettings.
        :type zone: str
        """

        self._zone = zone
