/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SqlAclEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IP Management configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:43.025180-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SqlIpConfig {
  public static final String SERIALIZED_NAME_AUTHORIZED_NETWORKS = "authorizedNetworks";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_NETWORKS)
  private List<SqlAclEntry> authorizedNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLE_IPV4 = "enableIpv4";
  @SerializedName(SERIALIZED_NAME_ENABLE_IPV4)
  private Boolean enableIpv4;

  public static final String SERIALIZED_NAME_PRIVATE_NETWORK = "privateNetwork";
  @SerializedName(SERIALIZED_NAME_PRIVATE_NETWORK)
  private String privateNetwork;

  public static final String SERIALIZED_NAME_REQUIRE_SSL = "requireSsl";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SSL)
  private Boolean requireSsl;

  public SqlIpConfig() {
  }

  public SqlIpConfig authorizedNetworks(List<SqlAclEntry> authorizedNetworks) {
    this.authorizedNetworks = authorizedNetworks;
    return this;
  }

  public SqlIpConfig addAuthorizedNetworksItem(SqlAclEntry authorizedNetworksItem) {
    if (this.authorizedNetworks == null) {
      this.authorizedNetworks = new ArrayList<>();
    }
    this.authorizedNetworks.add(authorizedNetworksItem);
    return this;
  }

  /**
   * The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as &#39;slash&#39; notation (e.g. &#x60;192.168.100.0/24&#x60;).
   * @return authorizedNetworks
   */
  @javax.annotation.Nullable
  public List<SqlAclEntry> getAuthorizedNetworks() {
    return authorizedNetworks;
  }

  public void setAuthorizedNetworks(List<SqlAclEntry> authorizedNetworks) {
    this.authorizedNetworks = authorizedNetworks;
  }


  public SqlIpConfig enableIpv4(Boolean enableIpv4) {
    this.enableIpv4 = enableIpv4;
    return this;
  }

  /**
   * Whether the instance is assigned a public IP address or not.
   * @return enableIpv4
   */
  @javax.annotation.Nullable
  public Boolean getEnableIpv4() {
    return enableIpv4;
  }

  public void setEnableIpv4(Boolean enableIpv4) {
    this.enableIpv4 = enableIpv4;
  }


  public SqlIpConfig privateNetwork(String privateNetwork) {
    this.privateNetwork = privateNetwork;
    return this;
  }

  /**
   * The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, &#x60;/projects/myProject/global/networks/default&#x60;. This setting can be updated, but it cannot be removed after it is set.
   * @return privateNetwork
   */
  @javax.annotation.Nullable
  public String getPrivateNetwork() {
    return privateNetwork;
  }

  public void setPrivateNetwork(String privateNetwork) {
    this.privateNetwork = privateNetwork;
  }


  public SqlIpConfig requireSsl(Boolean requireSsl) {
    this.requireSsl = requireSsl;
    return this;
  }

  /**
   * Whether SSL connections over IP should be enforced or not.
   * @return requireSsl
   */
  @javax.annotation.Nullable
  public Boolean getRequireSsl() {
    return requireSsl;
  }

  public void setRequireSsl(Boolean requireSsl) {
    this.requireSsl = requireSsl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SqlIpConfig sqlIpConfig = (SqlIpConfig) o;
    return Objects.equals(this.authorizedNetworks, sqlIpConfig.authorizedNetworks) &&
        Objects.equals(this.enableIpv4, sqlIpConfig.enableIpv4) &&
        Objects.equals(this.privateNetwork, sqlIpConfig.privateNetwork) &&
        Objects.equals(this.requireSsl, sqlIpConfig.requireSsl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizedNetworks, enableIpv4, privateNetwork, requireSsl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SqlIpConfig {\n");
    sb.append("    authorizedNetworks: ").append(toIndentedString(authorizedNetworks)).append("\n");
    sb.append("    enableIpv4: ").append(toIndentedString(enableIpv4)).append("\n");
    sb.append("    privateNetwork: ").append(toIndentedString(privateNetwork)).append("\n");
    sb.append("    requireSsl: ").append(toIndentedString(requireSsl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizedNetworks");
    openapiFields.add("enableIpv4");
    openapiFields.add("privateNetwork");
    openapiFields.add("requireSsl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SqlIpConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SqlIpConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SqlIpConfig is not found in the empty JSON string", SqlIpConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SqlIpConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SqlIpConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("authorizedNetworks") != null && !jsonObj.get("authorizedNetworks").isJsonNull()) {
        JsonArray jsonArrayauthorizedNetworks = jsonObj.getAsJsonArray("authorizedNetworks");
        if (jsonArrayauthorizedNetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorizedNetworks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorizedNetworks` to be an array in the JSON string but got `%s`", jsonObj.get("authorizedNetworks").toString()));
          }

          // validate the optional field `authorizedNetworks` (array)
          for (int i = 0; i < jsonArrayauthorizedNetworks.size(); i++) {
            SqlAclEntry.validateJsonElement(jsonArrayauthorizedNetworks.get(i));
          };
        }
      }
      if ((jsonObj.get("privateNetwork") != null && !jsonObj.get("privateNetwork").isJsonNull()) && !jsonObj.get("privateNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateNetwork").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SqlIpConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SqlIpConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SqlIpConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SqlIpConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SqlIpConfig>() {
           @Override
           public void write(JsonWriter out, SqlIpConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SqlIpConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SqlIpConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SqlIpConfig
   * @throws IOException if the JSON string is invalid with respect to SqlIpConfig
   */
  public static SqlIpConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SqlIpConfig.class);
  }

  /**
   * Convert an instance of SqlIpConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

