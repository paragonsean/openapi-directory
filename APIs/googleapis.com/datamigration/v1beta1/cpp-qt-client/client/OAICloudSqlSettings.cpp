/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudSqlSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudSqlSettings::OAICloudSqlSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudSqlSettings::OAICloudSqlSettings() {
    this->initializeModel();
}

OAICloudSqlSettings::~OAICloudSqlSettings() {}

void OAICloudSqlSettings::initializeModel() {

    m_activation_policy_isSet = false;
    m_activation_policy_isValid = false;

    m_auto_storage_increase_isSet = false;
    m_auto_storage_increase_isValid = false;

    m_data_disk_size_gb_isSet = false;
    m_data_disk_size_gb_isValid = false;

    m_data_disk_type_isSet = false;
    m_data_disk_type_isValid = false;

    m_database_flags_isSet = false;
    m_database_flags_isValid = false;

    m_database_version_isSet = false;
    m_database_version_isValid = false;

    m_ip_config_isSet = false;
    m_ip_config_isValid = false;

    m_root_password_isSet = false;
    m_root_password_isValid = false;

    m_root_password_set_isSet = false;
    m_root_password_set_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_storage_auto_resize_limit_isSet = false;
    m_storage_auto_resize_limit_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;

    m_user_labels_isSet = false;
    m_user_labels_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAICloudSqlSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudSqlSettings::fromJsonObject(QJsonObject json) {

    m_activation_policy_isValid = ::OpenAPI::fromJsonValue(m_activation_policy, json[QString("activationPolicy")]);
    m_activation_policy_isSet = !json[QString("activationPolicy")].isNull() && m_activation_policy_isValid;

    m_auto_storage_increase_isValid = ::OpenAPI::fromJsonValue(m_auto_storage_increase, json[QString("autoStorageIncrease")]);
    m_auto_storage_increase_isSet = !json[QString("autoStorageIncrease")].isNull() && m_auto_storage_increase_isValid;

    m_data_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_data_disk_size_gb, json[QString("dataDiskSizeGb")]);
    m_data_disk_size_gb_isSet = !json[QString("dataDiskSizeGb")].isNull() && m_data_disk_size_gb_isValid;

    m_data_disk_type_isValid = ::OpenAPI::fromJsonValue(m_data_disk_type, json[QString("dataDiskType")]);
    m_data_disk_type_isSet = !json[QString("dataDiskType")].isNull() && m_data_disk_type_isValid;

    m_database_flags_isValid = ::OpenAPI::fromJsonValue(m_database_flags, json[QString("databaseFlags")]);
    m_database_flags_isSet = !json[QString("databaseFlags")].isNull() && m_database_flags_isValid;

    m_database_version_isValid = ::OpenAPI::fromJsonValue(m_database_version, json[QString("databaseVersion")]);
    m_database_version_isSet = !json[QString("databaseVersion")].isNull() && m_database_version_isValid;

    m_ip_config_isValid = ::OpenAPI::fromJsonValue(m_ip_config, json[QString("ipConfig")]);
    m_ip_config_isSet = !json[QString("ipConfig")].isNull() && m_ip_config_isValid;

    m_root_password_isValid = ::OpenAPI::fromJsonValue(m_root_password, json[QString("rootPassword")]);
    m_root_password_isSet = !json[QString("rootPassword")].isNull() && m_root_password_isValid;

    m_root_password_set_isValid = ::OpenAPI::fromJsonValue(m_root_password_set, json[QString("rootPasswordSet")]);
    m_root_password_set_isSet = !json[QString("rootPasswordSet")].isNull() && m_root_password_set_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;

    m_storage_auto_resize_limit_isValid = ::OpenAPI::fromJsonValue(m_storage_auto_resize_limit, json[QString("storageAutoResizeLimit")]);
    m_storage_auto_resize_limit_isSet = !json[QString("storageAutoResizeLimit")].isNull() && m_storage_auto_resize_limit_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;

    m_user_labels_isValid = ::OpenAPI::fromJsonValue(m_user_labels, json[QString("userLabels")]);
    m_user_labels_isSet = !json[QString("userLabels")].isNull() && m_user_labels_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAICloudSqlSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudSqlSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_policy_isSet) {
        obj.insert(QString("activationPolicy"), ::OpenAPI::toJsonValue(m_activation_policy));
    }
    if (m_auto_storage_increase_isSet) {
        obj.insert(QString("autoStorageIncrease"), ::OpenAPI::toJsonValue(m_auto_storage_increase));
    }
    if (m_data_disk_size_gb_isSet) {
        obj.insert(QString("dataDiskSizeGb"), ::OpenAPI::toJsonValue(m_data_disk_size_gb));
    }
    if (m_data_disk_type_isSet) {
        obj.insert(QString("dataDiskType"), ::OpenAPI::toJsonValue(m_data_disk_type));
    }
    if (m_database_flags.size() > 0) {
        obj.insert(QString("databaseFlags"), ::OpenAPI::toJsonValue(m_database_flags));
    }
    if (m_database_version_isSet) {
        obj.insert(QString("databaseVersion"), ::OpenAPI::toJsonValue(m_database_version));
    }
    if (m_ip_config.isSet()) {
        obj.insert(QString("ipConfig"), ::OpenAPI::toJsonValue(m_ip_config));
    }
    if (m_root_password_isSet) {
        obj.insert(QString("rootPassword"), ::OpenAPI::toJsonValue(m_root_password));
    }
    if (m_root_password_set_isSet) {
        obj.insert(QString("rootPasswordSet"), ::OpenAPI::toJsonValue(m_root_password_set));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_storage_auto_resize_limit_isSet) {
        obj.insert(QString("storageAutoResizeLimit"), ::OpenAPI::toJsonValue(m_storage_auto_resize_limit));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    if (m_user_labels.size() > 0) {
        obj.insert(QString("userLabels"), ::OpenAPI::toJsonValue(m_user_labels));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAICloudSqlSettings::getActivationPolicy() const {
    return m_activation_policy;
}
void OAICloudSqlSettings::setActivationPolicy(const QString &activation_policy) {
    m_activation_policy = activation_policy;
    m_activation_policy_isSet = true;
}

bool OAICloudSqlSettings::is_activation_policy_Set() const{
    return m_activation_policy_isSet;
}

bool OAICloudSqlSettings::is_activation_policy_Valid() const{
    return m_activation_policy_isValid;
}

bool OAICloudSqlSettings::isAutoStorageIncrease() const {
    return m_auto_storage_increase;
}
void OAICloudSqlSettings::setAutoStorageIncrease(const bool &auto_storage_increase) {
    m_auto_storage_increase = auto_storage_increase;
    m_auto_storage_increase_isSet = true;
}

bool OAICloudSqlSettings::is_auto_storage_increase_Set() const{
    return m_auto_storage_increase_isSet;
}

bool OAICloudSqlSettings::is_auto_storage_increase_Valid() const{
    return m_auto_storage_increase_isValid;
}

QString OAICloudSqlSettings::getDataDiskSizeGb() const {
    return m_data_disk_size_gb;
}
void OAICloudSqlSettings::setDataDiskSizeGb(const QString &data_disk_size_gb) {
    m_data_disk_size_gb = data_disk_size_gb;
    m_data_disk_size_gb_isSet = true;
}

bool OAICloudSqlSettings::is_data_disk_size_gb_Set() const{
    return m_data_disk_size_gb_isSet;
}

bool OAICloudSqlSettings::is_data_disk_size_gb_Valid() const{
    return m_data_disk_size_gb_isValid;
}

QString OAICloudSqlSettings::getDataDiskType() const {
    return m_data_disk_type;
}
void OAICloudSqlSettings::setDataDiskType(const QString &data_disk_type) {
    m_data_disk_type = data_disk_type;
    m_data_disk_type_isSet = true;
}

bool OAICloudSqlSettings::is_data_disk_type_Set() const{
    return m_data_disk_type_isSet;
}

bool OAICloudSqlSettings::is_data_disk_type_Valid() const{
    return m_data_disk_type_isValid;
}

QMap<QString, QString> OAICloudSqlSettings::getDatabaseFlags() const {
    return m_database_flags;
}
void OAICloudSqlSettings::setDatabaseFlags(const QMap<QString, QString> &database_flags) {
    m_database_flags = database_flags;
    m_database_flags_isSet = true;
}

bool OAICloudSqlSettings::is_database_flags_Set() const{
    return m_database_flags_isSet;
}

bool OAICloudSqlSettings::is_database_flags_Valid() const{
    return m_database_flags_isValid;
}

QString OAICloudSqlSettings::getDatabaseVersion() const {
    return m_database_version;
}
void OAICloudSqlSettings::setDatabaseVersion(const QString &database_version) {
    m_database_version = database_version;
    m_database_version_isSet = true;
}

bool OAICloudSqlSettings::is_database_version_Set() const{
    return m_database_version_isSet;
}

bool OAICloudSqlSettings::is_database_version_Valid() const{
    return m_database_version_isValid;
}

OAISqlIpConfig OAICloudSqlSettings::getIpConfig() const {
    return m_ip_config;
}
void OAICloudSqlSettings::setIpConfig(const OAISqlIpConfig &ip_config) {
    m_ip_config = ip_config;
    m_ip_config_isSet = true;
}

bool OAICloudSqlSettings::is_ip_config_Set() const{
    return m_ip_config_isSet;
}

bool OAICloudSqlSettings::is_ip_config_Valid() const{
    return m_ip_config_isValid;
}

QString OAICloudSqlSettings::getRootPassword() const {
    return m_root_password;
}
void OAICloudSqlSettings::setRootPassword(const QString &root_password) {
    m_root_password = root_password;
    m_root_password_isSet = true;
}

bool OAICloudSqlSettings::is_root_password_Set() const{
    return m_root_password_isSet;
}

bool OAICloudSqlSettings::is_root_password_Valid() const{
    return m_root_password_isValid;
}

bool OAICloudSqlSettings::isRootPasswordSet() const {
    return m_root_password_set;
}
void OAICloudSqlSettings::setRootPasswordSet(const bool &root_password_set) {
    m_root_password_set = root_password_set;
    m_root_password_set_isSet = true;
}

bool OAICloudSqlSettings::is_root_password_set_Set() const{
    return m_root_password_set_isSet;
}

bool OAICloudSqlSettings::is_root_password_set_Valid() const{
    return m_root_password_set_isValid;
}

QString OAICloudSqlSettings::getSourceId() const {
    return m_source_id;
}
void OAICloudSqlSettings::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAICloudSqlSettings::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAICloudSqlSettings::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAICloudSqlSettings::getStorageAutoResizeLimit() const {
    return m_storage_auto_resize_limit;
}
void OAICloudSqlSettings::setStorageAutoResizeLimit(const QString &storage_auto_resize_limit) {
    m_storage_auto_resize_limit = storage_auto_resize_limit;
    m_storage_auto_resize_limit_isSet = true;
}

bool OAICloudSqlSettings::is_storage_auto_resize_limit_Set() const{
    return m_storage_auto_resize_limit_isSet;
}

bool OAICloudSqlSettings::is_storage_auto_resize_limit_Valid() const{
    return m_storage_auto_resize_limit_isValid;
}

QString OAICloudSqlSettings::getTier() const {
    return m_tier;
}
void OAICloudSqlSettings::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAICloudSqlSettings::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAICloudSqlSettings::is_tier_Valid() const{
    return m_tier_isValid;
}

QMap<QString, QString> OAICloudSqlSettings::getUserLabels() const {
    return m_user_labels;
}
void OAICloudSqlSettings::setUserLabels(const QMap<QString, QString> &user_labels) {
    m_user_labels = user_labels;
    m_user_labels_isSet = true;
}

bool OAICloudSqlSettings::is_user_labels_Set() const{
    return m_user_labels_isSet;
}

bool OAICloudSqlSettings::is_user_labels_Valid() const{
    return m_user_labels_isValid;
}

QString OAICloudSqlSettings::getZone() const {
    return m_zone;
}
void OAICloudSqlSettings::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAICloudSqlSettings::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAICloudSqlSettings::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAICloudSqlSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_storage_increase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_password_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_auto_resize_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudSqlSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
