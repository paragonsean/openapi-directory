/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateSshScriptRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateSshScriptRequest::OAIGenerateSshScriptRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateSshScriptRequest::OAIGenerateSshScriptRequest() {
    this->initializeModel();
}

OAIGenerateSshScriptRequest::~OAIGenerateSshScriptRequest() {}

void OAIGenerateSshScriptRequest::initializeModel() {

    m_vm_isSet = false;
    m_vm_isValid = false;

    m_vm_creation_config_isSet = false;
    m_vm_creation_config_isValid = false;

    m_vm_port_isSet = false;
    m_vm_port_isValid = false;

    m_vm_selection_config_isSet = false;
    m_vm_selection_config_isValid = false;
}

void OAIGenerateSshScriptRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateSshScriptRequest::fromJsonObject(QJsonObject json) {

    m_vm_isValid = ::OpenAPI::fromJsonValue(m_vm, json[QString("vm")]);
    m_vm_isSet = !json[QString("vm")].isNull() && m_vm_isValid;

    m_vm_creation_config_isValid = ::OpenAPI::fromJsonValue(m_vm_creation_config, json[QString("vmCreationConfig")]);
    m_vm_creation_config_isSet = !json[QString("vmCreationConfig")].isNull() && m_vm_creation_config_isValid;

    m_vm_port_isValid = ::OpenAPI::fromJsonValue(m_vm_port, json[QString("vmPort")]);
    m_vm_port_isSet = !json[QString("vmPort")].isNull() && m_vm_port_isValid;

    m_vm_selection_config_isValid = ::OpenAPI::fromJsonValue(m_vm_selection_config, json[QString("vmSelectionConfig")]);
    m_vm_selection_config_isSet = !json[QString("vmSelectionConfig")].isNull() && m_vm_selection_config_isValid;
}

QString OAIGenerateSshScriptRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateSshScriptRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_vm_isSet) {
        obj.insert(QString("vm"), ::OpenAPI::toJsonValue(m_vm));
    }
    if (m_vm_creation_config.isSet()) {
        obj.insert(QString("vmCreationConfig"), ::OpenAPI::toJsonValue(m_vm_creation_config));
    }
    if (m_vm_port_isSet) {
        obj.insert(QString("vmPort"), ::OpenAPI::toJsonValue(m_vm_port));
    }
    if (m_vm_selection_config.isSet()) {
        obj.insert(QString("vmSelectionConfig"), ::OpenAPI::toJsonValue(m_vm_selection_config));
    }
    return obj;
}

QString OAIGenerateSshScriptRequest::getVm() const {
    return m_vm;
}
void OAIGenerateSshScriptRequest::setVm(const QString &vm) {
    m_vm = vm;
    m_vm_isSet = true;
}

bool OAIGenerateSshScriptRequest::is_vm_Set() const{
    return m_vm_isSet;
}

bool OAIGenerateSshScriptRequest::is_vm_Valid() const{
    return m_vm_isValid;
}

OAIVmCreationConfig OAIGenerateSshScriptRequest::getVmCreationConfig() const {
    return m_vm_creation_config;
}
void OAIGenerateSshScriptRequest::setVmCreationConfig(const OAIVmCreationConfig &vm_creation_config) {
    m_vm_creation_config = vm_creation_config;
    m_vm_creation_config_isSet = true;
}

bool OAIGenerateSshScriptRequest::is_vm_creation_config_Set() const{
    return m_vm_creation_config_isSet;
}

bool OAIGenerateSshScriptRequest::is_vm_creation_config_Valid() const{
    return m_vm_creation_config_isValid;
}

qint32 OAIGenerateSshScriptRequest::getVmPort() const {
    return m_vm_port;
}
void OAIGenerateSshScriptRequest::setVmPort(const qint32 &vm_port) {
    m_vm_port = vm_port;
    m_vm_port_isSet = true;
}

bool OAIGenerateSshScriptRequest::is_vm_port_Set() const{
    return m_vm_port_isSet;
}

bool OAIGenerateSshScriptRequest::is_vm_port_Valid() const{
    return m_vm_port_isValid;
}

OAIVmSelectionConfig OAIGenerateSshScriptRequest::getVmSelectionConfig() const {
    return m_vm_selection_config;
}
void OAIGenerateSshScriptRequest::setVmSelectionConfig(const OAIVmSelectionConfig &vm_selection_config) {
    m_vm_selection_config = vm_selection_config;
    m_vm_selection_config_isSet = true;
}

bool OAIGenerateSshScriptRequest::is_vm_selection_config_Set() const{
    return m_vm_selection_config_isSet;
}

bool OAIGenerateSshScriptRequest::is_vm_selection_config_Valid() const{
    return m_vm_selection_config_isValid;
}

bool OAIGenerateSshScriptRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_creation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_selection_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateSshScriptRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
