/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqlIpConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqlIpConfig::OAISqlIpConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqlIpConfig::OAISqlIpConfig() {
    this->initializeModel();
}

OAISqlIpConfig::~OAISqlIpConfig() {}

void OAISqlIpConfig::initializeModel() {

    m_authorized_networks_isSet = false;
    m_authorized_networks_isValid = false;

    m_enable_ipv4_isSet = false;
    m_enable_ipv4_isValid = false;

    m_private_network_isSet = false;
    m_private_network_isValid = false;

    m_require_ssl_isSet = false;
    m_require_ssl_isValid = false;
}

void OAISqlIpConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqlIpConfig::fromJsonObject(QJsonObject json) {

    m_authorized_networks_isValid = ::OpenAPI::fromJsonValue(m_authorized_networks, json[QString("authorizedNetworks")]);
    m_authorized_networks_isSet = !json[QString("authorizedNetworks")].isNull() && m_authorized_networks_isValid;

    m_enable_ipv4_isValid = ::OpenAPI::fromJsonValue(m_enable_ipv4, json[QString("enableIpv4")]);
    m_enable_ipv4_isSet = !json[QString("enableIpv4")].isNull() && m_enable_ipv4_isValid;

    m_private_network_isValid = ::OpenAPI::fromJsonValue(m_private_network, json[QString("privateNetwork")]);
    m_private_network_isSet = !json[QString("privateNetwork")].isNull() && m_private_network_isValid;

    m_require_ssl_isValid = ::OpenAPI::fromJsonValue(m_require_ssl, json[QString("requireSsl")]);
    m_require_ssl_isSet = !json[QString("requireSsl")].isNull() && m_require_ssl_isValid;
}

QString OAISqlIpConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqlIpConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_authorized_networks.size() > 0) {
        obj.insert(QString("authorizedNetworks"), ::OpenAPI::toJsonValue(m_authorized_networks));
    }
    if (m_enable_ipv4_isSet) {
        obj.insert(QString("enableIpv4"), ::OpenAPI::toJsonValue(m_enable_ipv4));
    }
    if (m_private_network_isSet) {
        obj.insert(QString("privateNetwork"), ::OpenAPI::toJsonValue(m_private_network));
    }
    if (m_require_ssl_isSet) {
        obj.insert(QString("requireSsl"), ::OpenAPI::toJsonValue(m_require_ssl));
    }
    return obj;
}

QList<OAISqlAclEntry> OAISqlIpConfig::getAuthorizedNetworks() const {
    return m_authorized_networks;
}
void OAISqlIpConfig::setAuthorizedNetworks(const QList<OAISqlAclEntry> &authorized_networks) {
    m_authorized_networks = authorized_networks;
    m_authorized_networks_isSet = true;
}

bool OAISqlIpConfig::is_authorized_networks_Set() const{
    return m_authorized_networks_isSet;
}

bool OAISqlIpConfig::is_authorized_networks_Valid() const{
    return m_authorized_networks_isValid;
}

bool OAISqlIpConfig::isEnableIpv4() const {
    return m_enable_ipv4;
}
void OAISqlIpConfig::setEnableIpv4(const bool &enable_ipv4) {
    m_enable_ipv4 = enable_ipv4;
    m_enable_ipv4_isSet = true;
}

bool OAISqlIpConfig::is_enable_ipv4_Set() const{
    return m_enable_ipv4_isSet;
}

bool OAISqlIpConfig::is_enable_ipv4_Valid() const{
    return m_enable_ipv4_isValid;
}

QString OAISqlIpConfig::getPrivateNetwork() const {
    return m_private_network;
}
void OAISqlIpConfig::setPrivateNetwork(const QString &private_network) {
    m_private_network = private_network;
    m_private_network_isSet = true;
}

bool OAISqlIpConfig::is_private_network_Set() const{
    return m_private_network_isSet;
}

bool OAISqlIpConfig::is_private_network_Valid() const{
    return m_private_network_isValid;
}

bool OAISqlIpConfig::isRequireSsl() const {
    return m_require_ssl;
}
void OAISqlIpConfig::setRequireSsl(const bool &require_ssl) {
    m_require_ssl = require_ssl;
    m_require_ssl_isSet = true;
}

bool OAISqlIpConfig::is_require_ssl_Set() const{
    return m_require_ssl_isSet;
}

bool OAISqlIpConfig::is_require_ssl_Valid() const{
    return m_require_ssl_isValid;
}

bool OAISqlIpConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorized_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ipv4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqlIpConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
