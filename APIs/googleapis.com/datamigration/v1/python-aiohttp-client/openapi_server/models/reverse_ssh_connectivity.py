# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReverseSshConnectivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vm: str=None, vm_ip: str=None, vm_port: int=None, vpc: str=None):
        """ReverseSshConnectivity - a model defined in OpenAPI

        :param vm: The vm of this ReverseSshConnectivity.
        :param vm_ip: The vm_ip of this ReverseSshConnectivity.
        :param vm_port: The vm_port of this ReverseSshConnectivity.
        :param vpc: The vpc of this ReverseSshConnectivity.
        """
        self.openapi_types = {
            'vm': str,
            'vm_ip': str,
            'vm_port': int,
            'vpc': str
        }

        self.attribute_map = {
            'vm': 'vm',
            'vm_ip': 'vmIp',
            'vm_port': 'vmPort',
            'vpc': 'vpc'
        }

        self._vm = vm
        self._vm_ip = vm_ip
        self._vm_port = vm_port
        self._vpc = vpc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReverseSshConnectivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReverseSshConnectivity of this ReverseSshConnectivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vm(self):
        """Gets the vm of this ReverseSshConnectivity.

        The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.

        :return: The vm of this ReverseSshConnectivity.
        :rtype: str
        """
        return self._vm

    @vm.setter
    def vm(self, vm):
        """Sets the vm of this ReverseSshConnectivity.

        The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.

        :param vm: The vm of this ReverseSshConnectivity.
        :type vm: str
        """

        self._vm = vm

    @property
    def vm_ip(self):
        """Gets the vm_ip of this ReverseSshConnectivity.

        Required. The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.

        :return: The vm_ip of this ReverseSshConnectivity.
        :rtype: str
        """
        return self._vm_ip

    @vm_ip.setter
    def vm_ip(self, vm_ip):
        """Sets the vm_ip of this ReverseSshConnectivity.

        Required. The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.

        :param vm_ip: The vm_ip of this ReverseSshConnectivity.
        :type vm_ip: str
        """

        self._vm_ip = vm_ip

    @property
    def vm_port(self):
        """Gets the vm_port of this ReverseSshConnectivity.

        Required. The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.

        :return: The vm_port of this ReverseSshConnectivity.
        :rtype: int
        """
        return self._vm_port

    @vm_port.setter
    def vm_port(self, vm_port):
        """Sets the vm_port of this ReverseSshConnectivity.

        Required. The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.

        :param vm_port: The vm_port of this ReverseSshConnectivity.
        :type vm_port: int
        """

        self._vm_port = vm_port

    @property
    def vpc(self):
        """Gets the vpc of this ReverseSshConnectivity.

        The name of the VPC to peer with the Cloud SQL private network.

        :return: The vpc of this ReverseSshConnectivity.
        :rtype: str
        """
        return self._vpc

    @vpc.setter
    def vpc(self, vpc):
        """Sets the vpc of this ReverseSshConnectivity.

        The name of the VPC to peer with the Cloud SQL private network.

        :param vpc: The vpc of this ReverseSshConnectivity.
        :type vpc: str
        """

        self._vpc = vpc
