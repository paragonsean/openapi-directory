# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_numeric_filter import SourceNumericFilter
from openapi_server.models.source_text_filter import SourceTextFilter
from openapi_server.models.value_transformation import ValueTransformation
from openapi_server import util


class ConditionalColumnSetValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_features: Dict[str, object]=None, source_numeric_filter: SourceNumericFilter=None, source_text_filter: SourceTextFilter=None, value_transformation: ValueTransformation=None):
        """ConditionalColumnSetValue - a model defined in OpenAPI

        :param custom_features: The custom_features of this ConditionalColumnSetValue.
        :param source_numeric_filter: The source_numeric_filter of this ConditionalColumnSetValue.
        :param source_text_filter: The source_text_filter of this ConditionalColumnSetValue.
        :param value_transformation: The value_transformation of this ConditionalColumnSetValue.
        """
        self.openapi_types = {
            'custom_features': Dict[str, object],
            'source_numeric_filter': SourceNumericFilter,
            'source_text_filter': SourceTextFilter,
            'value_transformation': ValueTransformation
        }

        self.attribute_map = {
            'custom_features': 'customFeatures',
            'source_numeric_filter': 'sourceNumericFilter',
            'source_text_filter': 'sourceTextFilter',
            'value_transformation': 'valueTransformation'
        }

        self._custom_features = custom_features
        self._source_numeric_filter = source_numeric_filter
        self._source_text_filter = source_text_filter
        self._value_transformation = value_transformation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionalColumnSetValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConditionalColumnSetValue of this ConditionalColumnSetValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_features(self):
        """Gets the custom_features of this ConditionalColumnSetValue.

        Optional. Custom engine specific features.

        :return: The custom_features of this ConditionalColumnSetValue.
        :rtype: Dict[str, object]
        """
        return self._custom_features

    @custom_features.setter
    def custom_features(self, custom_features):
        """Sets the custom_features of this ConditionalColumnSetValue.

        Optional. Custom engine specific features.

        :param custom_features: The custom_features of this ConditionalColumnSetValue.
        :type custom_features: Dict[str, object]
        """

        self._custom_features = custom_features

    @property
    def source_numeric_filter(self):
        """Gets the source_numeric_filter of this ConditionalColumnSetValue.


        :return: The source_numeric_filter of this ConditionalColumnSetValue.
        :rtype: SourceNumericFilter
        """
        return self._source_numeric_filter

    @source_numeric_filter.setter
    def source_numeric_filter(self, source_numeric_filter):
        """Sets the source_numeric_filter of this ConditionalColumnSetValue.


        :param source_numeric_filter: The source_numeric_filter of this ConditionalColumnSetValue.
        :type source_numeric_filter: SourceNumericFilter
        """

        self._source_numeric_filter = source_numeric_filter

    @property
    def source_text_filter(self):
        """Gets the source_text_filter of this ConditionalColumnSetValue.


        :return: The source_text_filter of this ConditionalColumnSetValue.
        :rtype: SourceTextFilter
        """
        return self._source_text_filter

    @source_text_filter.setter
    def source_text_filter(self, source_text_filter):
        """Sets the source_text_filter of this ConditionalColumnSetValue.


        :param source_text_filter: The source_text_filter of this ConditionalColumnSetValue.
        :type source_text_filter: SourceTextFilter
        """

        self._source_text_filter = source_text_filter

    @property
    def value_transformation(self):
        """Gets the value_transformation of this ConditionalColumnSetValue.


        :return: The value_transformation of this ConditionalColumnSetValue.
        :rtype: ValueTransformation
        """
        return self._value_transformation

    @value_transformation.setter
    def value_transformation(self, value_transformation):
        """Sets the value_transformation of this ConditionalColumnSetValue.


        :param value_transformation: The value_transformation of this ConditionalColumnSetValue.
        :type value_transformation: ValueTransformation
        """

        self._value_transformation = value_transformation
