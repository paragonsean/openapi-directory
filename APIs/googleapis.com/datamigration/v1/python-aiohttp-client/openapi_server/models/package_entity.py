# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PackageEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_features: Dict[str, object]=None, package_body: str=None, package_sql_code: str=None):
        """PackageEntity - a model defined in OpenAPI

        :param custom_features: The custom_features of this PackageEntity.
        :param package_body: The package_body of this PackageEntity.
        :param package_sql_code: The package_sql_code of this PackageEntity.
        """
        self.openapi_types = {
            'custom_features': Dict[str, object],
            'package_body': str,
            'package_sql_code': str
        }

        self.attribute_map = {
            'custom_features': 'customFeatures',
            'package_body': 'packageBody',
            'package_sql_code': 'packageSqlCode'
        }

        self._custom_features = custom_features
        self._package_body = package_body
        self._package_sql_code = package_sql_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageEntity of this PackageEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_features(self):
        """Gets the custom_features of this PackageEntity.

        Custom engine specific features.

        :return: The custom_features of this PackageEntity.
        :rtype: Dict[str, object]
        """
        return self._custom_features

    @custom_features.setter
    def custom_features(self, custom_features):
        """Sets the custom_features of this PackageEntity.

        Custom engine specific features.

        :param custom_features: The custom_features of this PackageEntity.
        :type custom_features: Dict[str, object]
        """

        self._custom_features = custom_features

    @property
    def package_body(self):
        """Gets the package_body of this PackageEntity.

        The SQL code which creates the package body. If the package specification has cursors or subprograms, then the package body is mandatory.

        :return: The package_body of this PackageEntity.
        :rtype: str
        """
        return self._package_body

    @package_body.setter
    def package_body(self, package_body):
        """Sets the package_body of this PackageEntity.

        The SQL code which creates the package body. If the package specification has cursors or subprograms, then the package body is mandatory.

        :param package_body: The package_body of this PackageEntity.
        :type package_body: str
        """

        self._package_body = package_body

    @property
    def package_sql_code(self):
        """Gets the package_sql_code of this PackageEntity.

        The SQL code which creates the package.

        :return: The package_sql_code of this PackageEntity.
        :rtype: str
        """
        return self._package_sql_code

    @package_sql_code.setter
    def package_sql_code(self, package_sql_code):
        """Sets the package_sql_code of this PackageEntity.

        The SQL code which creates the package.

        :param package_sql_code: The package_sql_code of this PackageEntity.
        :type package_sql_code: str
        """

        self._package_sql_code = package_sql_code
