# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.position import Position
from openapi_server import util


class EntityIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, ddl: str=None, entity_type: str=None, id: str=None, message: str=None, position: Position=None, severity: str=None, type: str=None):
        """EntityIssue - a model defined in OpenAPI

        :param code: The code of this EntityIssue.
        :param ddl: The ddl of this EntityIssue.
        :param entity_type: The entity_type of this EntityIssue.
        :param id: The id of this EntityIssue.
        :param message: The message of this EntityIssue.
        :param position: The position of this EntityIssue.
        :param severity: The severity of this EntityIssue.
        :param type: The type of this EntityIssue.
        """
        self.openapi_types = {
            'code': str,
            'ddl': str,
            'entity_type': str,
            'id': str,
            'message': str,
            'position': Position,
            'severity': str,
            'type': str
        }

        self.attribute_map = {
            'code': 'code',
            'ddl': 'ddl',
            'entity_type': 'entityType',
            'id': 'id',
            'message': 'message',
            'position': 'position',
            'severity': 'severity',
            'type': 'type'
        }

        self._code = code
        self._ddl = ddl
        self._entity_type = entity_type
        self._id = id
        self._message = message
        self._position = position
        self._severity = severity
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityIssue of this EntityIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this EntityIssue.

        Error/Warning code

        :return: The code of this EntityIssue.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EntityIssue.

        Error/Warning code

        :param code: The code of this EntityIssue.
        :type code: str
        """

        self._code = code

    @property
    def ddl(self):
        """Gets the ddl of this EntityIssue.

        The ddl which caused the issue, if relevant.

        :return: The ddl of this EntityIssue.
        :rtype: str
        """
        return self._ddl

    @ddl.setter
    def ddl(self, ddl):
        """Sets the ddl of this EntityIssue.

        The ddl which caused the issue, if relevant.

        :param ddl: The ddl of this EntityIssue.
        :type ddl: str
        """

        self._ddl = ddl

    @property
    def entity_type(self):
        """Gets the entity_type of this EntityIssue.

        The entity type (if the DDL is for a sub entity).

        :return: The entity_type of this EntityIssue.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EntityIssue.

        The entity type (if the DDL is for a sub entity).

        :param entity_type: The entity_type of this EntityIssue.
        :type entity_type: str
        """
        allowed_values = ["DATABASE_ENTITY_TYPE_UNSPECIFIED", "DATABASE_ENTITY_TYPE_SCHEMA", "DATABASE_ENTITY_TYPE_TABLE", "DATABASE_ENTITY_TYPE_COLUMN", "DATABASE_ENTITY_TYPE_CONSTRAINT", "DATABASE_ENTITY_TYPE_INDEX", "DATABASE_ENTITY_TYPE_TRIGGER", "DATABASE_ENTITY_TYPE_VIEW", "DATABASE_ENTITY_TYPE_SEQUENCE", "DATABASE_ENTITY_TYPE_STORED_PROCEDURE", "DATABASE_ENTITY_TYPE_FUNCTION", "DATABASE_ENTITY_TYPE_SYNONYM", "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE", "DATABASE_ENTITY_TYPE_UDT", "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW", "DATABASE_ENTITY_TYPE_DATABASE"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def id(self):
        """Gets the id of this EntityIssue.

        Unique Issue ID.

        :return: The id of this EntityIssue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EntityIssue.

        Unique Issue ID.

        :param id: The id of this EntityIssue.
        :type id: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this EntityIssue.

        Issue detailed message

        :return: The message of this EntityIssue.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EntityIssue.

        Issue detailed message

        :param message: The message of this EntityIssue.
        :type message: str
        """

        self._message = message

    @property
    def position(self):
        """Gets the position of this EntityIssue.


        :return: The position of this EntityIssue.
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this EntityIssue.


        :param position: The position of this EntityIssue.
        :type position: Position
        """

        self._position = position

    @property
    def severity(self):
        """Gets the severity of this EntityIssue.

        Severity of the issue

        :return: The severity of this EntityIssue.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EntityIssue.

        Severity of the issue

        :param severity: The severity of this EntityIssue.
        :type severity: str
        """
        allowed_values = ["ISSUE_SEVERITY_UNSPECIFIED", "ISSUE_SEVERITY_INFO", "ISSUE_SEVERITY_WARNING", "ISSUE_SEVERITY_ERROR"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def type(self):
        """Gets the type of this EntityIssue.

        The type of the issue.

        :return: The type of this EntityIssue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EntityIssue.

        The type of the issue.

        :param type: The type of this EntityIssue.
        :type type: str
        """
        allowed_values = ["ISSUE_TYPE_UNSPECIFIED", "ISSUE_TYPE_DDL", "ISSUE_TYPE_APPLY", "ISSUE_TYPE_CONVERT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
