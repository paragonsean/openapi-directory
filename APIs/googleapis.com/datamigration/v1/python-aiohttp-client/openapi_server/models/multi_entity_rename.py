# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MultiEntityRename(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_name_pattern: str=None, source_name_transformation: str=None):
        """MultiEntityRename - a model defined in OpenAPI

        :param new_name_pattern: The new_name_pattern of this MultiEntityRename.
        :param source_name_transformation: The source_name_transformation of this MultiEntityRename.
        """
        self.openapi_types = {
            'new_name_pattern': str,
            'source_name_transformation': str
        }

        self.attribute_map = {
            'new_name_pattern': 'newNamePattern',
            'source_name_transformation': 'sourceNameTransformation'
        }

        self._new_name_pattern = new_name_pattern
        self._source_name_transformation = source_name_transformation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiEntityRename':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiEntityRename of this MultiEntityRename.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_name_pattern(self):
        """Gets the new_name_pattern of this MultiEntityRename.

        Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'

        :return: The new_name_pattern of this MultiEntityRename.
        :rtype: str
        """
        return self._new_name_pattern

    @new_name_pattern.setter
    def new_name_pattern(self, new_name_pattern):
        """Sets the new_name_pattern of this MultiEntityRename.

        Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'

        :param new_name_pattern: The new_name_pattern of this MultiEntityRename.
        :type new_name_pattern: str
        """

        self._new_name_pattern = new_name_pattern

    @property
    def source_name_transformation(self):
        """Gets the source_name_transformation of this MultiEntityRename.

        Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION

        :return: The source_name_transformation of this MultiEntityRename.
        :rtype: str
        """
        return self._source_name_transformation

    @source_name_transformation.setter
    def source_name_transformation(self, source_name_transformation):
        """Sets the source_name_transformation of this MultiEntityRename.

        Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION

        :param source_name_transformation: The source_name_transformation of this MultiEntityRename.
        :type source_name_transformation: str
        """
        allowed_values = ["ENTITY_NAME_TRANSFORMATION_UNSPECIFIED", "ENTITY_NAME_TRANSFORMATION_NO_TRANSFORMATION", "ENTITY_NAME_TRANSFORMATION_LOWER_CASE", "ENTITY_NAME_TRANSFORMATION_UPPER_CASE", "ENTITY_NAME_TRANSFORMATION_CAPITALIZED_CASE"]  # noqa: E501
        if source_name_transformation not in allowed_values:
            raise ValueError(
                "Invalid value for `source_name_transformation` ({0}), must be one of {1}"
                .format(source_name_transformation, allowed_values)
            )

        self._source_name_transformation = source_name_transformation
