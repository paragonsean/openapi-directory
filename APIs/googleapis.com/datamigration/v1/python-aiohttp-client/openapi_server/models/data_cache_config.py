# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataCacheConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_cache_enabled: bool=None):
        """DataCacheConfig - a model defined in OpenAPI

        :param data_cache_enabled: The data_cache_enabled of this DataCacheConfig.
        """
        self.openapi_types = {
            'data_cache_enabled': bool
        }

        self.attribute_map = {
            'data_cache_enabled': 'dataCacheEnabled'
        }

        self._data_cache_enabled = data_cache_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataCacheConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataCacheConfig of this DataCacheConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_cache_enabled(self):
        """Gets the data_cache_enabled of this DataCacheConfig.

        Optional. Whether data cache is enabled for the instance.

        :return: The data_cache_enabled of this DataCacheConfig.
        :rtype: bool
        """
        return self._data_cache_enabled

    @data_cache_enabled.setter
    def data_cache_enabled(self, data_cache_enabled):
        """Sets the data_cache_enabled of this DataCacheConfig.

        Optional. Whether data cache is enabled for the instance.

        :param data_cache_enabled: The data_cache_enabled of this DataCacheConfig.
        :type data_cache_enabled: bool
        """

        self._data_cache_enabled = data_cache_enabled
