# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValueListFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_case: bool=None, value_present_list: str=None, values: List[str]=None):
        """ValueListFilter - a model defined in OpenAPI

        :param ignore_case: The ignore_case of this ValueListFilter.
        :param value_present_list: The value_present_list of this ValueListFilter.
        :param values: The values of this ValueListFilter.
        """
        self.openapi_types = {
            'ignore_case': bool,
            'value_present_list': str,
            'values': List[str]
        }

        self.attribute_map = {
            'ignore_case': 'ignoreCase',
            'value_present_list': 'valuePresentList',
            'values': 'values'
        }

        self._ignore_case = ignore_case
        self._value_present_list = value_present_list
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValueListFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValueListFilter of this ValueListFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_case(self):
        """Gets the ignore_case of this ValueListFilter.

        Required. Whether to ignore case when filtering by values. Defaults to false

        :return: The ignore_case of this ValueListFilter.
        :rtype: bool
        """
        return self._ignore_case

    @ignore_case.setter
    def ignore_case(self, ignore_case):
        """Sets the ignore_case of this ValueListFilter.

        Required. Whether to ignore case when filtering by values. Defaults to false

        :param ignore_case: The ignore_case of this ValueListFilter.
        :type ignore_case: bool
        """

        self._ignore_case = ignore_case

    @property
    def value_present_list(self):
        """Gets the value_present_list of this ValueListFilter.

        Required. Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.

        :return: The value_present_list of this ValueListFilter.
        :rtype: str
        """
        return self._value_present_list

    @value_present_list.setter
    def value_present_list(self, value_present_list):
        """Sets the value_present_list of this ValueListFilter.

        Required. Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.

        :param value_present_list: The value_present_list of this ValueListFilter.
        :type value_present_list: str
        """
        allowed_values = ["VALUE_PRESENT_IN_LIST_UNSPECIFIED", "VALUE_PRESENT_IN_LIST_IF_VALUE_LIST", "VALUE_PRESENT_IN_LIST_IF_VALUE_NOT_LIST"]  # noqa: E501
        if value_present_list not in allowed_values:
            raise ValueError(
                "Invalid value for `value_present_list` ({0}), must be one of {1}"
                .format(value_present_list, allowed_values)
            )

        self._value_present_list = value_present_list

    @property
    def values(self):
        """Gets the values of this ValueListFilter.

        Required. The list to be used to filter by

        :return: The values of this ValueListFilter.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ValueListFilter.

        Required. The list to be used to filter by

        :param values: The values of this ValueListFilter.
        :type values: List[str]
        """

        self._values = values
