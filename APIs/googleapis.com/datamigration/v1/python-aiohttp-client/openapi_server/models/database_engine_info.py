# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseEngineInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine: str=None, version: str=None):
        """DatabaseEngineInfo - a model defined in OpenAPI

        :param engine: The engine of this DatabaseEngineInfo.
        :param version: The version of this DatabaseEngineInfo.
        """
        self.openapi_types = {
            'engine': str,
            'version': str
        }

        self.attribute_map = {
            'engine': 'engine',
            'version': 'version'
        }

        self._engine = engine
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseEngineInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseEngineInfo of this DatabaseEngineInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine(self):
        """Gets the engine of this DatabaseEngineInfo.

        Required. Engine type.

        :return: The engine of this DatabaseEngineInfo.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this DatabaseEngineInfo.

        Required. Engine type.

        :param engine: The engine of this DatabaseEngineInfo.
        :type engine: str
        """
        allowed_values = ["DATABASE_ENGINE_UNSPECIFIED", "MYSQL", "POSTGRESQL", "ORACLE"]  # noqa: E501
        if engine not in allowed_values:
            raise ValueError(
                "Invalid value for `engine` ({0}), must be one of {1}"
                .format(engine, allowed_values)
            )

        self._engine = engine

    @property
    def version(self):
        """Gets the version of this DatabaseEngineInfo.

        Required. Engine version, for example \"12.c.1\".

        :return: The version of this DatabaseEngineInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DatabaseEngineInfo.

        Required. Engine version, for example \"12.c.1\".

        :param version: The version of this DatabaseEngineInfo.
        :type version: str
        """

        self._version = version
