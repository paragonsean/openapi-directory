# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rules_file import RulesFile
from openapi_server import util


class ImportMappingRulesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_commit: bool=None, rules_files: List[RulesFile]=None, rules_format: str=None):
        """ImportMappingRulesRequest - a model defined in OpenAPI

        :param auto_commit: The auto_commit of this ImportMappingRulesRequest.
        :param rules_files: The rules_files of this ImportMappingRulesRequest.
        :param rules_format: The rules_format of this ImportMappingRulesRequest.
        """
        self.openapi_types = {
            'auto_commit': bool,
            'rules_files': List[RulesFile],
            'rules_format': str
        }

        self.attribute_map = {
            'auto_commit': 'autoCommit',
            'rules_files': 'rulesFiles',
            'rules_format': 'rulesFormat'
        }

        self._auto_commit = auto_commit
        self._rules_files = rules_files
        self._rules_format = rules_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportMappingRulesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportMappingRulesRequest of this ImportMappingRulesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_commit(self):
        """Gets the auto_commit of this ImportMappingRulesRequest.

        Required. Should the conversion workspace be committed automatically after the import operation.

        :return: The auto_commit of this ImportMappingRulesRequest.
        :rtype: bool
        """
        return self._auto_commit

    @auto_commit.setter
    def auto_commit(self, auto_commit):
        """Sets the auto_commit of this ImportMappingRulesRequest.

        Required. Should the conversion workspace be committed automatically after the import operation.

        :param auto_commit: The auto_commit of this ImportMappingRulesRequest.
        :type auto_commit: bool
        """

        self._auto_commit = auto_commit

    @property
    def rules_files(self):
        """Gets the rules_files of this ImportMappingRulesRequest.

        Required. One or more rules files.

        :return: The rules_files of this ImportMappingRulesRequest.
        :rtype: List[RulesFile]
        """
        return self._rules_files

    @rules_files.setter
    def rules_files(self, rules_files):
        """Sets the rules_files of this ImportMappingRulesRequest.

        Required. One or more rules files.

        :param rules_files: The rules_files of this ImportMappingRulesRequest.
        :type rules_files: List[RulesFile]
        """

        self._rules_files = rules_files

    @property
    def rules_format(self):
        """Gets the rules_format of this ImportMappingRulesRequest.

        Required. The format of the rules content file.

        :return: The rules_format of this ImportMappingRulesRequest.
        :rtype: str
        """
        return self._rules_format

    @rules_format.setter
    def rules_format(self, rules_format):
        """Sets the rules_format of this ImportMappingRulesRequest.

        Required. The format of the rules content file.

        :param rules_format: The rules_format of this ImportMappingRulesRequest.
        :type rules_format: str
        """
        allowed_values = ["IMPORT_RULES_FILE_FORMAT_UNSPECIFIED", "IMPORT_RULES_FILE_FORMAT_HARBOUR_BRIDGE_SESSION_FILE", "IMPORT_RULES_FILE_FORMAT_ORATOPG_CONFIG_FILE"]  # noqa: E501
        if rules_format not in allowed_values:
            raise ValueError(
                "Invalid value for `rules_format` ({0}), must be one of {1}"
                .format(rules_format, allowed_values)
            )

        self._rules_format = rules_format
