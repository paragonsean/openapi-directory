# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MappingRuleFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entities: List[str]=None, entity_name_contains: str=None, entity_name_prefix: str=None, entity_name_suffix: str=None, parent_entity: str=None):
        """MappingRuleFilter - a model defined in OpenAPI

        :param entities: The entities of this MappingRuleFilter.
        :param entity_name_contains: The entity_name_contains of this MappingRuleFilter.
        :param entity_name_prefix: The entity_name_prefix of this MappingRuleFilter.
        :param entity_name_suffix: The entity_name_suffix of this MappingRuleFilter.
        :param parent_entity: The parent_entity of this MappingRuleFilter.
        """
        self.openapi_types = {
            'entities': List[str],
            'entity_name_contains': str,
            'entity_name_prefix': str,
            'entity_name_suffix': str,
            'parent_entity': str
        }

        self.attribute_map = {
            'entities': 'entities',
            'entity_name_contains': 'entityNameContains',
            'entity_name_prefix': 'entityNamePrefix',
            'entity_name_suffix': 'entityNameSuffix',
            'parent_entity': 'parentEntity'
        }

        self._entities = entities
        self._entity_name_contains = entity_name_contains
        self._entity_name_prefix = entity_name_prefix
        self._entity_name_suffix = entity_name_suffix
        self._parent_entity = parent_entity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MappingRuleFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MappingRuleFilter of this MappingRuleFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entities(self):
        """Gets the entities of this MappingRuleFilter.

        Optional. The rule should be applied to specific entities defined by their fully qualified names.

        :return: The entities of this MappingRuleFilter.
        :rtype: List[str]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this MappingRuleFilter.

        Optional. The rule should be applied to specific entities defined by their fully qualified names.

        :param entities: The entities of this MappingRuleFilter.
        :type entities: List[str]
        """

        self._entities = entities

    @property
    def entity_name_contains(self):
        """Gets the entity_name_contains of this MappingRuleFilter.

        Optional. The rule should be applied to entities whose non-qualified name contains the given string.

        :return: The entity_name_contains of this MappingRuleFilter.
        :rtype: str
        """
        return self._entity_name_contains

    @entity_name_contains.setter
    def entity_name_contains(self, entity_name_contains):
        """Sets the entity_name_contains of this MappingRuleFilter.

        Optional. The rule should be applied to entities whose non-qualified name contains the given string.

        :param entity_name_contains: The entity_name_contains of this MappingRuleFilter.
        :type entity_name_contains: str
        """

        self._entity_name_contains = entity_name_contains

    @property
    def entity_name_prefix(self):
        """Gets the entity_name_prefix of this MappingRuleFilter.

        Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.

        :return: The entity_name_prefix of this MappingRuleFilter.
        :rtype: str
        """
        return self._entity_name_prefix

    @entity_name_prefix.setter
    def entity_name_prefix(self, entity_name_prefix):
        """Sets the entity_name_prefix of this MappingRuleFilter.

        Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.

        :param entity_name_prefix: The entity_name_prefix of this MappingRuleFilter.
        :type entity_name_prefix: str
        """

        self._entity_name_prefix = entity_name_prefix

    @property
    def entity_name_suffix(self):
        """Gets the entity_name_suffix of this MappingRuleFilter.

        Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.

        :return: The entity_name_suffix of this MappingRuleFilter.
        :rtype: str
        """
        return self._entity_name_suffix

    @entity_name_suffix.setter
    def entity_name_suffix(self, entity_name_suffix):
        """Sets the entity_name_suffix of this MappingRuleFilter.

        Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.

        :param entity_name_suffix: The entity_name_suffix of this MappingRuleFilter.
        :type entity_name_suffix: str
        """

        self._entity_name_suffix = entity_name_suffix

    @property
    def parent_entity(self):
        """Gets the parent_entity of this MappingRuleFilter.

        Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)

        :return: The parent_entity of this MappingRuleFilter.
        :rtype: str
        """
        return self._parent_entity

    @parent_entity.setter
    def parent_entity(self, parent_entity):
        """Sets the parent_entity of this MappingRuleFilter.

        Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)

        :param parent_entity: The parent_entity of this MappingRuleFilter.
        :type parent_entity: str
        """

        self._parent_entity = parent_entity
