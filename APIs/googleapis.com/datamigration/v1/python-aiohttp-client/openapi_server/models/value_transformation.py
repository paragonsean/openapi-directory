# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apply_hash import ApplyHash
from openapi_server.models.assign_specific_value import AssignSpecificValue
from openapi_server.models.double_comparison_filter import DoubleComparisonFilter
from openapi_server.models.int_comparison_filter import IntComparisonFilter
from openapi_server.models.round_to_scale import RoundToScale
from openapi_server.models.value_list_filter import ValueListFilter
from openapi_server import util


class ValueTransformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_hash: ApplyHash=None, assign_max_value: object=None, assign_min_value: object=None, assign_null: object=None, assign_specific_value: AssignSpecificValue=None, double_comparison: DoubleComparisonFilter=None, int_comparison: IntComparisonFilter=None, is_null: object=None, round_scale: RoundToScale=None, value_list: ValueListFilter=None):
        """ValueTransformation - a model defined in OpenAPI

        :param apply_hash: The apply_hash of this ValueTransformation.
        :param assign_max_value: The assign_max_value of this ValueTransformation.
        :param assign_min_value: The assign_min_value of this ValueTransformation.
        :param assign_null: The assign_null of this ValueTransformation.
        :param assign_specific_value: The assign_specific_value of this ValueTransformation.
        :param double_comparison: The double_comparison of this ValueTransformation.
        :param int_comparison: The int_comparison of this ValueTransformation.
        :param is_null: The is_null of this ValueTransformation.
        :param round_scale: The round_scale of this ValueTransformation.
        :param value_list: The value_list of this ValueTransformation.
        """
        self.openapi_types = {
            'apply_hash': ApplyHash,
            'assign_max_value': object,
            'assign_min_value': object,
            'assign_null': object,
            'assign_specific_value': AssignSpecificValue,
            'double_comparison': DoubleComparisonFilter,
            'int_comparison': IntComparisonFilter,
            'is_null': object,
            'round_scale': RoundToScale,
            'value_list': ValueListFilter
        }

        self.attribute_map = {
            'apply_hash': 'applyHash',
            'assign_max_value': 'assignMaxValue',
            'assign_min_value': 'assignMinValue',
            'assign_null': 'assignNull',
            'assign_specific_value': 'assignSpecificValue',
            'double_comparison': 'doubleComparison',
            'int_comparison': 'intComparison',
            'is_null': 'isNull',
            'round_scale': 'roundScale',
            'value_list': 'valueList'
        }

        self._apply_hash = apply_hash
        self._assign_max_value = assign_max_value
        self._assign_min_value = assign_min_value
        self._assign_null = assign_null
        self._assign_specific_value = assign_specific_value
        self._double_comparison = double_comparison
        self._int_comparison = int_comparison
        self._is_null = is_null
        self._round_scale = round_scale
        self._value_list = value_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValueTransformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValueTransformation of this ValueTransformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_hash(self):
        """Gets the apply_hash of this ValueTransformation.


        :return: The apply_hash of this ValueTransformation.
        :rtype: ApplyHash
        """
        return self._apply_hash

    @apply_hash.setter
    def apply_hash(self, apply_hash):
        """Sets the apply_hash of this ValueTransformation.


        :param apply_hash: The apply_hash of this ValueTransformation.
        :type apply_hash: ApplyHash
        """

        self._apply_hash = apply_hash

    @property
    def assign_max_value(self):
        """Gets the assign_max_value of this ValueTransformation.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :return: The assign_max_value of this ValueTransformation.
        :rtype: object
        """
        return self._assign_max_value

    @assign_max_value.setter
    def assign_max_value(self, assign_max_value):
        """Sets the assign_max_value of this ValueTransformation.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :param assign_max_value: The assign_max_value of this ValueTransformation.
        :type assign_max_value: object
        """

        self._assign_max_value = assign_max_value

    @property
    def assign_min_value(self):
        """Gets the assign_min_value of this ValueTransformation.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :return: The assign_min_value of this ValueTransformation.
        :rtype: object
        """
        return self._assign_min_value

    @assign_min_value.setter
    def assign_min_value(self, assign_min_value):
        """Sets the assign_min_value of this ValueTransformation.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :param assign_min_value: The assign_min_value of this ValueTransformation.
        :type assign_min_value: object
        """

        self._assign_min_value = assign_min_value

    @property
    def assign_null(self):
        """Gets the assign_null of this ValueTransformation.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :return: The assign_null of this ValueTransformation.
        :rtype: object
        """
        return self._assign_null

    @assign_null.setter
    def assign_null(self, assign_null):
        """Sets the assign_null of this ValueTransformation.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :param assign_null: The assign_null of this ValueTransformation.
        :type assign_null: object
        """

        self._assign_null = assign_null

    @property
    def assign_specific_value(self):
        """Gets the assign_specific_value of this ValueTransformation.


        :return: The assign_specific_value of this ValueTransformation.
        :rtype: AssignSpecificValue
        """
        return self._assign_specific_value

    @assign_specific_value.setter
    def assign_specific_value(self, assign_specific_value):
        """Sets the assign_specific_value of this ValueTransformation.


        :param assign_specific_value: The assign_specific_value of this ValueTransformation.
        :type assign_specific_value: AssignSpecificValue
        """

        self._assign_specific_value = assign_specific_value

    @property
    def double_comparison(self):
        """Gets the double_comparison of this ValueTransformation.


        :return: The double_comparison of this ValueTransformation.
        :rtype: DoubleComparisonFilter
        """
        return self._double_comparison

    @double_comparison.setter
    def double_comparison(self, double_comparison):
        """Sets the double_comparison of this ValueTransformation.


        :param double_comparison: The double_comparison of this ValueTransformation.
        :type double_comparison: DoubleComparisonFilter
        """

        self._double_comparison = double_comparison

    @property
    def int_comparison(self):
        """Gets the int_comparison of this ValueTransformation.


        :return: The int_comparison of this ValueTransformation.
        :rtype: IntComparisonFilter
        """
        return self._int_comparison

    @int_comparison.setter
    def int_comparison(self, int_comparison):
        """Sets the int_comparison of this ValueTransformation.


        :param int_comparison: The int_comparison of this ValueTransformation.
        :type int_comparison: IntComparisonFilter
        """

        self._int_comparison = int_comparison

    @property
    def is_null(self):
        """Gets the is_null of this ValueTransformation.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :return: The is_null of this ValueTransformation.
        :rtype: object
        """
        return self._is_null

    @is_null.setter
    def is_null(self, is_null):
        """Sets the is_null of this ValueTransformation.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :param is_null: The is_null of this ValueTransformation.
        :type is_null: object
        """

        self._is_null = is_null

    @property
    def round_scale(self):
        """Gets the round_scale of this ValueTransformation.


        :return: The round_scale of this ValueTransformation.
        :rtype: RoundToScale
        """
        return self._round_scale

    @round_scale.setter
    def round_scale(self, round_scale):
        """Sets the round_scale of this ValueTransformation.


        :param round_scale: The round_scale of this ValueTransformation.
        :type round_scale: RoundToScale
        """

        self._round_scale = round_scale

    @property
    def value_list(self):
        """Gets the value_list of this ValueTransformation.


        :return: The value_list of this ValueTransformation.
        :rtype: ValueListFilter
        """
        return self._value_list

    @value_list.setter
    def value_list(self, value_list):
        """Sets the value_list of this ValueTransformation.


        :param value_list: The value_list of this ValueTransformation.
        :type value_list: ValueListFilter
        """

        self._value_list = value_list
