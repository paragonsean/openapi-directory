# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConstraintEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_features: Dict[str, object]=None, name: str=None, reference_columns: List[str]=None, reference_table: str=None, table_columns: List[str]=None, table_name: str=None, type: str=None):
        """ConstraintEntity - a model defined in OpenAPI

        :param custom_features: The custom_features of this ConstraintEntity.
        :param name: The name of this ConstraintEntity.
        :param reference_columns: The reference_columns of this ConstraintEntity.
        :param reference_table: The reference_table of this ConstraintEntity.
        :param table_columns: The table_columns of this ConstraintEntity.
        :param table_name: The table_name of this ConstraintEntity.
        :param type: The type of this ConstraintEntity.
        """
        self.openapi_types = {
            'custom_features': Dict[str, object],
            'name': str,
            'reference_columns': List[str],
            'reference_table': str,
            'table_columns': List[str],
            'table_name': str,
            'type': str
        }

        self.attribute_map = {
            'custom_features': 'customFeatures',
            'name': 'name',
            'reference_columns': 'referenceColumns',
            'reference_table': 'referenceTable',
            'table_columns': 'tableColumns',
            'table_name': 'tableName',
            'type': 'type'
        }

        self._custom_features = custom_features
        self._name = name
        self._reference_columns = reference_columns
        self._reference_table = reference_table
        self._table_columns = table_columns
        self._table_name = table_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConstraintEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConstraintEntity of this ConstraintEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_features(self):
        """Gets the custom_features of this ConstraintEntity.

        Custom engine specific features.

        :return: The custom_features of this ConstraintEntity.
        :rtype: Dict[str, object]
        """
        return self._custom_features

    @custom_features.setter
    def custom_features(self, custom_features):
        """Sets the custom_features of this ConstraintEntity.

        Custom engine specific features.

        :param custom_features: The custom_features of this ConstraintEntity.
        :type custom_features: Dict[str, object]
        """

        self._custom_features = custom_features

    @property
    def name(self):
        """Gets the name of this ConstraintEntity.

        The name of the table constraint.

        :return: The name of this ConstraintEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConstraintEntity.

        The name of the table constraint.

        :param name: The name of this ConstraintEntity.
        :type name: str
        """

        self._name = name

    @property
    def reference_columns(self):
        """Gets the reference_columns of this ConstraintEntity.

        Reference columns which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full names of referenced columns by the foreign key.

        :return: The reference_columns of this ConstraintEntity.
        :rtype: List[str]
        """
        return self._reference_columns

    @reference_columns.setter
    def reference_columns(self, reference_columns):
        """Sets the reference_columns of this ConstraintEntity.

        Reference columns which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full names of referenced columns by the foreign key.

        :param reference_columns: The reference_columns of this ConstraintEntity.
        :type reference_columns: List[str]
        """

        self._reference_columns = reference_columns

    @property
    def reference_table(self):
        """Gets the reference_table of this ConstraintEntity.

        Reference table which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full name of the referenced table by the foreign key.

        :return: The reference_table of this ConstraintEntity.
        :rtype: str
        """
        return self._reference_table

    @reference_table.setter
    def reference_table(self, reference_table):
        """Sets the reference_table of this ConstraintEntity.

        Reference table which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full name of the referenced table by the foreign key.

        :param reference_table: The reference_table of this ConstraintEntity.
        :type reference_table: str
        """

        self._reference_table = reference_table

    @property
    def table_columns(self):
        """Gets the table_columns of this ConstraintEntity.

        Table columns used as part of the Constraint, for example primary key constraint should list the columns which constitutes the key.

        :return: The table_columns of this ConstraintEntity.
        :rtype: List[str]
        """
        return self._table_columns

    @table_columns.setter
    def table_columns(self, table_columns):
        """Sets the table_columns of this ConstraintEntity.

        Table columns used as part of the Constraint, for example primary key constraint should list the columns which constitutes the key.

        :param table_columns: The table_columns of this ConstraintEntity.
        :type table_columns: List[str]
        """

        self._table_columns = table_columns

    @property
    def table_name(self):
        """Gets the table_name of this ConstraintEntity.

        Table which is associated with the constraint. In case the constraint is defined on a table, this field is left empty as this information is stored in parent_name. However, if constraint is defined on a view, this field stores the table name on which the view is defined.

        :return: The table_name of this ConstraintEntity.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this ConstraintEntity.

        Table which is associated with the constraint. In case the constraint is defined on a table, this field is left empty as this information is stored in parent_name. However, if constraint is defined on a view, this field stores the table name on which the view is defined.

        :param table_name: The table_name of this ConstraintEntity.
        :type table_name: str
        """

        self._table_name = table_name

    @property
    def type(self):
        """Gets the type of this ConstraintEntity.

        Type of constraint, for example unique, primary key, foreign key (currently only primary key is supported).

        :return: The type of this ConstraintEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConstraintEntity.

        Type of constraint, for example unique, primary key, foreign key (currently only primary key is supported).

        :param type: The type of this ConstraintEntity.
        :type type: str
        """

        self._type = type
