# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.private_service_connect_connectivity import PrivateServiceConnectConnectivity
from openapi_server.models.ssl_config import SslConfig
from openapi_server import util


class PostgreSqlConnectionProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alloydb_cluster_id: str=None, cloud_sql_id: str=None, host: str=None, network_architecture: str=None, password: str=None, password_set: bool=None, port: int=None, private_service_connect_connectivity: PrivateServiceConnectConnectivity=None, ssl: SslConfig=None, static_ip_connectivity: object=None, username: str=None):
        """PostgreSqlConnectionProfile - a model defined in OpenAPI

        :param alloydb_cluster_id: The alloydb_cluster_id of this PostgreSqlConnectionProfile.
        :param cloud_sql_id: The cloud_sql_id of this PostgreSqlConnectionProfile.
        :param host: The host of this PostgreSqlConnectionProfile.
        :param network_architecture: The network_architecture of this PostgreSqlConnectionProfile.
        :param password: The password of this PostgreSqlConnectionProfile.
        :param password_set: The password_set of this PostgreSqlConnectionProfile.
        :param port: The port of this PostgreSqlConnectionProfile.
        :param private_service_connect_connectivity: The private_service_connect_connectivity of this PostgreSqlConnectionProfile.
        :param ssl: The ssl of this PostgreSqlConnectionProfile.
        :param static_ip_connectivity: The static_ip_connectivity of this PostgreSqlConnectionProfile.
        :param username: The username of this PostgreSqlConnectionProfile.
        """
        self.openapi_types = {
            'alloydb_cluster_id': str,
            'cloud_sql_id': str,
            'host': str,
            'network_architecture': str,
            'password': str,
            'password_set': bool,
            'port': int,
            'private_service_connect_connectivity': PrivateServiceConnectConnectivity,
            'ssl': SslConfig,
            'static_ip_connectivity': object,
            'username': str
        }

        self.attribute_map = {
            'alloydb_cluster_id': 'alloydbClusterId',
            'cloud_sql_id': 'cloudSqlId',
            'host': 'host',
            'network_architecture': 'networkArchitecture',
            'password': 'password',
            'password_set': 'passwordSet',
            'port': 'port',
            'private_service_connect_connectivity': 'privateServiceConnectConnectivity',
            'ssl': 'ssl',
            'static_ip_connectivity': 'staticIpConnectivity',
            'username': 'username'
        }

        self._alloydb_cluster_id = alloydb_cluster_id
        self._cloud_sql_id = cloud_sql_id
        self._host = host
        self._network_architecture = network_architecture
        self._password = password
        self._password_set = password_set
        self._port = port
        self._private_service_connect_connectivity = private_service_connect_connectivity
        self._ssl = ssl
        self._static_ip_connectivity = static_ip_connectivity
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostgreSqlConnectionProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostgreSqlConnectionProfile of this PostgreSqlConnectionProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alloydb_cluster_id(self):
        """Gets the alloydb_cluster_id of this PostgreSqlConnectionProfile.

        Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.

        :return: The alloydb_cluster_id of this PostgreSqlConnectionProfile.
        :rtype: str
        """
        return self._alloydb_cluster_id

    @alloydb_cluster_id.setter
    def alloydb_cluster_id(self, alloydb_cluster_id):
        """Sets the alloydb_cluster_id of this PostgreSqlConnectionProfile.

        Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.

        :param alloydb_cluster_id: The alloydb_cluster_id of this PostgreSqlConnectionProfile.
        :type alloydb_cluster_id: str
        """

        self._alloydb_cluster_id = alloydb_cluster_id

    @property
    def cloud_sql_id(self):
        """Gets the cloud_sql_id of this PostgreSqlConnectionProfile.

        If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.

        :return: The cloud_sql_id of this PostgreSqlConnectionProfile.
        :rtype: str
        """
        return self._cloud_sql_id

    @cloud_sql_id.setter
    def cloud_sql_id(self, cloud_sql_id):
        """Sets the cloud_sql_id of this PostgreSqlConnectionProfile.

        If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.

        :param cloud_sql_id: The cloud_sql_id of this PostgreSqlConnectionProfile.
        :type cloud_sql_id: str
        """

        self._cloud_sql_id = cloud_sql_id

    @property
    def host(self):
        """Gets the host of this PostgreSqlConnectionProfile.

        Required. The IP or hostname of the source PostgreSQL database.

        :return: The host of this PostgreSqlConnectionProfile.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this PostgreSqlConnectionProfile.

        Required. The IP or hostname of the source PostgreSQL database.

        :param host: The host of this PostgreSqlConnectionProfile.
        :type host: str
        """

        self._host = host

    @property
    def network_architecture(self):
        """Gets the network_architecture of this PostgreSqlConnectionProfile.

        Output only. If the source is a Cloud SQL database, this field indicates the network architecture it's associated with.

        :return: The network_architecture of this PostgreSqlConnectionProfile.
        :rtype: str
        """
        return self._network_architecture

    @network_architecture.setter
    def network_architecture(self, network_architecture):
        """Sets the network_architecture of this PostgreSqlConnectionProfile.

        Output only. If the source is a Cloud SQL database, this field indicates the network architecture it's associated with.

        :param network_architecture: The network_architecture of this PostgreSqlConnectionProfile.
        :type network_architecture: str
        """
        allowed_values = ["NETWORK_ARCHITECTURE_UNSPECIFIED", "NETWORK_ARCHITECTURE_OLD_CSQL_PRODUCER", "NETWORK_ARCHITECTURE_NEW_CSQL_PRODUCER"]  # noqa: E501
        if network_architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `network_architecture` ({0}), must be one of {1}"
                .format(network_architecture, allowed_values)
            )

        self._network_architecture = network_architecture

    @property
    def password(self):
        """Gets the password of this PostgreSqlConnectionProfile.

        Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.

        :return: The password of this PostgreSqlConnectionProfile.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PostgreSqlConnectionProfile.

        Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.

        :param password: The password of this PostgreSqlConnectionProfile.
        :type password: str
        """

        self._password = password

    @property
    def password_set(self):
        """Gets the password_set of this PostgreSqlConnectionProfile.

        Output only. Indicates If this connection profile password is stored.

        :return: The password_set of this PostgreSqlConnectionProfile.
        :rtype: bool
        """
        return self._password_set

    @password_set.setter
    def password_set(self, password_set):
        """Sets the password_set of this PostgreSqlConnectionProfile.

        Output only. Indicates If this connection profile password is stored.

        :param password_set: The password_set of this PostgreSqlConnectionProfile.
        :type password_set: bool
        """

        self._password_set = password_set

    @property
    def port(self):
        """Gets the port of this PostgreSqlConnectionProfile.

        Required. The network port of the source PostgreSQL database.

        :return: The port of this PostgreSqlConnectionProfile.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this PostgreSqlConnectionProfile.

        Required. The network port of the source PostgreSQL database.

        :param port: The port of this PostgreSqlConnectionProfile.
        :type port: int
        """

        self._port = port

    @property
    def private_service_connect_connectivity(self):
        """Gets the private_service_connect_connectivity of this PostgreSqlConnectionProfile.


        :return: The private_service_connect_connectivity of this PostgreSqlConnectionProfile.
        :rtype: PrivateServiceConnectConnectivity
        """
        return self._private_service_connect_connectivity

    @private_service_connect_connectivity.setter
    def private_service_connect_connectivity(self, private_service_connect_connectivity):
        """Sets the private_service_connect_connectivity of this PostgreSqlConnectionProfile.


        :param private_service_connect_connectivity: The private_service_connect_connectivity of this PostgreSqlConnectionProfile.
        :type private_service_connect_connectivity: PrivateServiceConnectConnectivity
        """

        self._private_service_connect_connectivity = private_service_connect_connectivity

    @property
    def ssl(self):
        """Gets the ssl of this PostgreSqlConnectionProfile.


        :return: The ssl of this PostgreSqlConnectionProfile.
        :rtype: SslConfig
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this PostgreSqlConnectionProfile.


        :param ssl: The ssl of this PostgreSqlConnectionProfile.
        :type ssl: SslConfig
        """

        self._ssl = ssl

    @property
    def static_ip_connectivity(self):
        """Gets the static_ip_connectivity of this PostgreSqlConnectionProfile.

        The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.

        :return: The static_ip_connectivity of this PostgreSqlConnectionProfile.
        :rtype: object
        """
        return self._static_ip_connectivity

    @static_ip_connectivity.setter
    def static_ip_connectivity(self, static_ip_connectivity):
        """Sets the static_ip_connectivity of this PostgreSqlConnectionProfile.

        The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.

        :param static_ip_connectivity: The static_ip_connectivity of this PostgreSqlConnectionProfile.
        :type static_ip_connectivity: object
        """

        self._static_ip_connectivity = static_ip_connectivity

    @property
    def username(self):
        """Gets the username of this PostgreSqlConnectionProfile.

        Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.

        :return: The username of this PostgreSqlConnectionProfile.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PostgreSqlConnectionProfile.

        Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.

        :param username: The username of this PostgreSqlConnectionProfile.
        :type username: str
        """

        self._username = username
