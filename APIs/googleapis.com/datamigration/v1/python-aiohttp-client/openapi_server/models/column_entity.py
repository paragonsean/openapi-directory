# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ColumnEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, array: bool=None, array_length: int=None, auto_generated: bool=None, charset: str=None, collation: str=None, comment: str=None, custom_features: Dict[str, object]=None, data_type: str=None, default_value: str=None, fractional_seconds_precision: int=None, length: str=None, name: str=None, nullable: bool=None, ordinal_position: int=None, precision: int=None, scale: int=None, set_values: List[str]=None, udt: bool=None):
        """ColumnEntity - a model defined in OpenAPI

        :param array: The array of this ColumnEntity.
        :param array_length: The array_length of this ColumnEntity.
        :param auto_generated: The auto_generated of this ColumnEntity.
        :param charset: The charset of this ColumnEntity.
        :param collation: The collation of this ColumnEntity.
        :param comment: The comment of this ColumnEntity.
        :param custom_features: The custom_features of this ColumnEntity.
        :param data_type: The data_type of this ColumnEntity.
        :param default_value: The default_value of this ColumnEntity.
        :param fractional_seconds_precision: The fractional_seconds_precision of this ColumnEntity.
        :param length: The length of this ColumnEntity.
        :param name: The name of this ColumnEntity.
        :param nullable: The nullable of this ColumnEntity.
        :param ordinal_position: The ordinal_position of this ColumnEntity.
        :param precision: The precision of this ColumnEntity.
        :param scale: The scale of this ColumnEntity.
        :param set_values: The set_values of this ColumnEntity.
        :param udt: The udt of this ColumnEntity.
        """
        self.openapi_types = {
            'array': bool,
            'array_length': int,
            'auto_generated': bool,
            'charset': str,
            'collation': str,
            'comment': str,
            'custom_features': Dict[str, object],
            'data_type': str,
            'default_value': str,
            'fractional_seconds_precision': int,
            'length': str,
            'name': str,
            'nullable': bool,
            'ordinal_position': int,
            'precision': int,
            'scale': int,
            'set_values': List[str],
            'udt': bool
        }

        self.attribute_map = {
            'array': 'array',
            'array_length': 'arrayLength',
            'auto_generated': 'autoGenerated',
            'charset': 'charset',
            'collation': 'collation',
            'comment': 'comment',
            'custom_features': 'customFeatures',
            'data_type': 'dataType',
            'default_value': 'defaultValue',
            'fractional_seconds_precision': 'fractionalSecondsPrecision',
            'length': 'length',
            'name': 'name',
            'nullable': 'nullable',
            'ordinal_position': 'ordinalPosition',
            'precision': 'precision',
            'scale': 'scale',
            'set_values': 'setValues',
            'udt': 'udt'
        }

        self._array = array
        self._array_length = array_length
        self._auto_generated = auto_generated
        self._charset = charset
        self._collation = collation
        self._comment = comment
        self._custom_features = custom_features
        self._data_type = data_type
        self._default_value = default_value
        self._fractional_seconds_precision = fractional_seconds_precision
        self._length = length
        self._name = name
        self._nullable = nullable
        self._ordinal_position = ordinal_position
        self._precision = precision
        self._scale = scale
        self._set_values = set_values
        self._udt = udt

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ColumnEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ColumnEntity of this ColumnEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def array(self):
        """Gets the array of this ColumnEntity.

        Is the column of array type.

        :return: The array of this ColumnEntity.
        :rtype: bool
        """
        return self._array

    @array.setter
    def array(self, array):
        """Sets the array of this ColumnEntity.

        Is the column of array type.

        :param array: The array of this ColumnEntity.
        :type array: bool
        """

        self._array = array

    @property
    def array_length(self):
        """Gets the array_length of this ColumnEntity.

        If the column is array, of which length.

        :return: The array_length of this ColumnEntity.
        :rtype: int
        """
        return self._array_length

    @array_length.setter
    def array_length(self, array_length):
        """Sets the array_length of this ColumnEntity.

        If the column is array, of which length.

        :param array_length: The array_length of this ColumnEntity.
        :type array_length: int
        """

        self._array_length = array_length

    @property
    def auto_generated(self):
        """Gets the auto_generated of this ColumnEntity.

        Is the column auto-generated/identity.

        :return: The auto_generated of this ColumnEntity.
        :rtype: bool
        """
        return self._auto_generated

    @auto_generated.setter
    def auto_generated(self, auto_generated):
        """Sets the auto_generated of this ColumnEntity.

        Is the column auto-generated/identity.

        :param auto_generated: The auto_generated of this ColumnEntity.
        :type auto_generated: bool
        """

        self._auto_generated = auto_generated

    @property
    def charset(self):
        """Gets the charset of this ColumnEntity.

        Charset override - instead of table level charset.

        :return: The charset of this ColumnEntity.
        :rtype: str
        """
        return self._charset

    @charset.setter
    def charset(self, charset):
        """Sets the charset of this ColumnEntity.

        Charset override - instead of table level charset.

        :param charset: The charset of this ColumnEntity.
        :type charset: str
        """

        self._charset = charset

    @property
    def collation(self):
        """Gets the collation of this ColumnEntity.

        Collation override - instead of table level collation.

        :return: The collation of this ColumnEntity.
        :rtype: str
        """
        return self._collation

    @collation.setter
    def collation(self, collation):
        """Sets the collation of this ColumnEntity.

        Collation override - instead of table level collation.

        :param collation: The collation of this ColumnEntity.
        :type collation: str
        """

        self._collation = collation

    @property
    def comment(self):
        """Gets the comment of this ColumnEntity.

        Comment associated with the column.

        :return: The comment of this ColumnEntity.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ColumnEntity.

        Comment associated with the column.

        :param comment: The comment of this ColumnEntity.
        :type comment: str
        """

        self._comment = comment

    @property
    def custom_features(self):
        """Gets the custom_features of this ColumnEntity.

        Custom engine specific features.

        :return: The custom_features of this ColumnEntity.
        :rtype: Dict[str, object]
        """
        return self._custom_features

    @custom_features.setter
    def custom_features(self, custom_features):
        """Sets the custom_features of this ColumnEntity.

        Custom engine specific features.

        :param custom_features: The custom_features of this ColumnEntity.
        :type custom_features: Dict[str, object]
        """

        self._custom_features = custom_features

    @property
    def data_type(self):
        """Gets the data_type of this ColumnEntity.

        Column data type.

        :return: The data_type of this ColumnEntity.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ColumnEntity.

        Column data type.

        :param data_type: The data_type of this ColumnEntity.
        :type data_type: str
        """

        self._data_type = data_type

    @property
    def default_value(self):
        """Gets the default_value of this ColumnEntity.

        Default value of the column.

        :return: The default_value of this ColumnEntity.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ColumnEntity.

        Default value of the column.

        :param default_value: The default_value of this ColumnEntity.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def fractional_seconds_precision(self):
        """Gets the fractional_seconds_precision of this ColumnEntity.

        Column fractional second precision - used for timestamp based datatypes.

        :return: The fractional_seconds_precision of this ColumnEntity.
        :rtype: int
        """
        return self._fractional_seconds_precision

    @fractional_seconds_precision.setter
    def fractional_seconds_precision(self, fractional_seconds_precision):
        """Sets the fractional_seconds_precision of this ColumnEntity.

        Column fractional second precision - used for timestamp based datatypes.

        :param fractional_seconds_precision: The fractional_seconds_precision of this ColumnEntity.
        :type fractional_seconds_precision: int
        """

        self._fractional_seconds_precision = fractional_seconds_precision

    @property
    def length(self):
        """Gets the length of this ColumnEntity.

        Column length - e.g. varchar (50).

        :return: The length of this ColumnEntity.
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ColumnEntity.

        Column length - e.g. varchar (50).

        :param length: The length of this ColumnEntity.
        :type length: str
        """

        self._length = length

    @property
    def name(self):
        """Gets the name of this ColumnEntity.

        Column name.

        :return: The name of this ColumnEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ColumnEntity.

        Column name.

        :param name: The name of this ColumnEntity.
        :type name: str
        """

        self._name = name

    @property
    def nullable(self):
        """Gets the nullable of this ColumnEntity.

        Is the column nullable.

        :return: The nullable of this ColumnEntity.
        :rtype: bool
        """
        return self._nullable

    @nullable.setter
    def nullable(self, nullable):
        """Sets the nullable of this ColumnEntity.

        Is the column nullable.

        :param nullable: The nullable of this ColumnEntity.
        :type nullable: bool
        """

        self._nullable = nullable

    @property
    def ordinal_position(self):
        """Gets the ordinal_position of this ColumnEntity.

        Column order in the table.

        :return: The ordinal_position of this ColumnEntity.
        :rtype: int
        """
        return self._ordinal_position

    @ordinal_position.setter
    def ordinal_position(self, ordinal_position):
        """Sets the ordinal_position of this ColumnEntity.

        Column order in the table.

        :param ordinal_position: The ordinal_position of this ColumnEntity.
        :type ordinal_position: int
        """

        self._ordinal_position = ordinal_position

    @property
    def precision(self):
        """Gets the precision of this ColumnEntity.

        Column precision - when relevant.

        :return: The precision of this ColumnEntity.
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this ColumnEntity.

        Column precision - when relevant.

        :param precision: The precision of this ColumnEntity.
        :type precision: int
        """

        self._precision = precision

    @property
    def scale(self):
        """Gets the scale of this ColumnEntity.

        Column scale - when relevant.

        :return: The scale of this ColumnEntity.
        :rtype: int
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this ColumnEntity.

        Column scale - when relevant.

        :param scale: The scale of this ColumnEntity.
        :type scale: int
        """

        self._scale = scale

    @property
    def set_values(self):
        """Gets the set_values of this ColumnEntity.

        Specifies the list of values allowed in the column. Only used for set data type.

        :return: The set_values of this ColumnEntity.
        :rtype: List[str]
        """
        return self._set_values

    @set_values.setter
    def set_values(self, set_values):
        """Sets the set_values of this ColumnEntity.

        Specifies the list of values allowed in the column. Only used for set data type.

        :param set_values: The set_values of this ColumnEntity.
        :type set_values: List[str]
        """

        self._set_values = set_values

    @property
    def udt(self):
        """Gets the udt of this ColumnEntity.

        Is the column a UDT.

        :return: The udt of this ColumnEntity.
        :rtype: bool
        """
        return self._udt

    @udt.setter
    def udt(self, udt):
        """Sets the udt of this ColumnEntity.

        Is the column a UDT.

        :param udt: The udt of this ColumnEntity.
        :type udt: bool
        """

        self._udt = udt
