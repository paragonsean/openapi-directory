# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SequenceEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache: str=None, custom_features: Dict[str, object]=None, cycle: bool=None, increment: str=None, max_value: str=None, min_value: str=None, start_value: str=None):
        """SequenceEntity - a model defined in OpenAPI

        :param cache: The cache of this SequenceEntity.
        :param custom_features: The custom_features of this SequenceEntity.
        :param cycle: The cycle of this SequenceEntity.
        :param increment: The increment of this SequenceEntity.
        :param max_value: The max_value of this SequenceEntity.
        :param min_value: The min_value of this SequenceEntity.
        :param start_value: The start_value of this SequenceEntity.
        """
        self.openapi_types = {
            'cache': str,
            'custom_features': Dict[str, object],
            'cycle': bool,
            'increment': str,
            'max_value': str,
            'min_value': str,
            'start_value': str
        }

        self.attribute_map = {
            'cache': 'cache',
            'custom_features': 'customFeatures',
            'cycle': 'cycle',
            'increment': 'increment',
            'max_value': 'maxValue',
            'min_value': 'minValue',
            'start_value': 'startValue'
        }

        self._cache = cache
        self._custom_features = custom_features
        self._cycle = cycle
        self._increment = increment
        self._max_value = max_value
        self._min_value = min_value
        self._start_value = start_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SequenceEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SequenceEntity of this SequenceEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache(self):
        """Gets the cache of this SequenceEntity.

        Indicates number of entries to cache / precreate.

        :return: The cache of this SequenceEntity.
        :rtype: str
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this SequenceEntity.

        Indicates number of entries to cache / precreate.

        :param cache: The cache of this SequenceEntity.
        :type cache: str
        """

        self._cache = cache

    @property
    def custom_features(self):
        """Gets the custom_features of this SequenceEntity.

        Custom engine specific features.

        :return: The custom_features of this SequenceEntity.
        :rtype: Dict[str, object]
        """
        return self._custom_features

    @custom_features.setter
    def custom_features(self, custom_features):
        """Sets the custom_features of this SequenceEntity.

        Custom engine specific features.

        :param custom_features: The custom_features of this SequenceEntity.
        :type custom_features: Dict[str, object]
        """

        self._custom_features = custom_features

    @property
    def cycle(self):
        """Gets the cycle of this SequenceEntity.

        Indicates whether the sequence value should cycle through.

        :return: The cycle of this SequenceEntity.
        :rtype: bool
        """
        return self._cycle

    @cycle.setter
    def cycle(self, cycle):
        """Sets the cycle of this SequenceEntity.

        Indicates whether the sequence value should cycle through.

        :param cycle: The cycle of this SequenceEntity.
        :type cycle: bool
        """

        self._cycle = cycle

    @property
    def increment(self):
        """Gets the increment of this SequenceEntity.

        Increment value for the sequence.

        :return: The increment of this SequenceEntity.
        :rtype: str
        """
        return self._increment

    @increment.setter
    def increment(self, increment):
        """Sets the increment of this SequenceEntity.

        Increment value for the sequence.

        :param increment: The increment of this SequenceEntity.
        :type increment: str
        """

        self._increment = increment

    @property
    def max_value(self):
        """Gets the max_value of this SequenceEntity.

        Maximum number for the sequence represented as bytes to accommodate large. numbers

        :return: The max_value of this SequenceEntity.
        :rtype: str
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this SequenceEntity.

        Maximum number for the sequence represented as bytes to accommodate large. numbers

        :param max_value: The max_value of this SequenceEntity.
        :type max_value: str
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this SequenceEntity.

        Minimum number for the sequence represented as bytes to accommodate large. numbers

        :return: The min_value of this SequenceEntity.
        :rtype: str
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this SequenceEntity.

        Minimum number for the sequence represented as bytes to accommodate large. numbers

        :param min_value: The min_value of this SequenceEntity.
        :type min_value: str
        """

        self._min_value = min_value

    @property
    def start_value(self):
        """Gets the start_value of this SequenceEntity.

        Start number for the sequence represented as bytes to accommodate large. numbers

        :return: The start_value of this SequenceEntity.
        :rtype: str
        """
        return self._start_value

    @start_value.setter
    def start_value(self, start_value):
        """Sets the start_value of this SequenceEntity.

        Start number for the sequence represented as bytes to accommodate large. numbers

        :param start_value: The start_value of this SequenceEntity.
        :type start_value: str
        """

        self._start_value = start_value
