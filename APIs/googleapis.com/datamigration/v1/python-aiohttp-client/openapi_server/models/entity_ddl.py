# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntityDdl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ddl: str=None, ddl_type: str=None, entity: str=None, entity_type: str=None, issue_id: List[str]=None):
        """EntityDdl - a model defined in OpenAPI

        :param ddl: The ddl of this EntityDdl.
        :param ddl_type: The ddl_type of this EntityDdl.
        :param entity: The entity of this EntityDdl.
        :param entity_type: The entity_type of this EntityDdl.
        :param issue_id: The issue_id of this EntityDdl.
        """
        self.openapi_types = {
            'ddl': str,
            'ddl_type': str,
            'entity': str,
            'entity_type': str,
            'issue_id': List[str]
        }

        self.attribute_map = {
            'ddl': 'ddl',
            'ddl_type': 'ddlType',
            'entity': 'entity',
            'entity_type': 'entityType',
            'issue_id': 'issueId'
        }

        self._ddl = ddl
        self._ddl_type = ddl_type
        self._entity = entity
        self._entity_type = entity_type
        self._issue_id = issue_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityDdl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityDdl of this EntityDdl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ddl(self):
        """Gets the ddl of this EntityDdl.

        The actual ddl code.

        :return: The ddl of this EntityDdl.
        :rtype: str
        """
        return self._ddl

    @ddl.setter
    def ddl(self, ddl):
        """Sets the ddl of this EntityDdl.

        The actual ddl code.

        :param ddl: The ddl of this EntityDdl.
        :type ddl: str
        """

        self._ddl = ddl

    @property
    def ddl_type(self):
        """Gets the ddl_type of this EntityDdl.

        Type of DDL (Create, Alter).

        :return: The ddl_type of this EntityDdl.
        :rtype: str
        """
        return self._ddl_type

    @ddl_type.setter
    def ddl_type(self, ddl_type):
        """Sets the ddl_type of this EntityDdl.

        Type of DDL (Create, Alter).

        :param ddl_type: The ddl_type of this EntityDdl.
        :type ddl_type: str
        """

        self._ddl_type = ddl_type

    @property
    def entity(self):
        """Gets the entity of this EntityDdl.

        The name of the database entity the ddl refers to.

        :return: The entity of this EntityDdl.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this EntityDdl.

        The name of the database entity the ddl refers to.

        :param entity: The entity of this EntityDdl.
        :type entity: str
        """

        self._entity = entity

    @property
    def entity_type(self):
        """Gets the entity_type of this EntityDdl.

        The entity type (if the DDL is for a sub entity).

        :return: The entity_type of this EntityDdl.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EntityDdl.

        The entity type (if the DDL is for a sub entity).

        :param entity_type: The entity_type of this EntityDdl.
        :type entity_type: str
        """
        allowed_values = ["DATABASE_ENTITY_TYPE_UNSPECIFIED", "DATABASE_ENTITY_TYPE_SCHEMA", "DATABASE_ENTITY_TYPE_TABLE", "DATABASE_ENTITY_TYPE_COLUMN", "DATABASE_ENTITY_TYPE_CONSTRAINT", "DATABASE_ENTITY_TYPE_INDEX", "DATABASE_ENTITY_TYPE_TRIGGER", "DATABASE_ENTITY_TYPE_VIEW", "DATABASE_ENTITY_TYPE_SEQUENCE", "DATABASE_ENTITY_TYPE_STORED_PROCEDURE", "DATABASE_ENTITY_TYPE_FUNCTION", "DATABASE_ENTITY_TYPE_SYNONYM", "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE", "DATABASE_ENTITY_TYPE_UDT", "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW", "DATABASE_ENTITY_TYPE_DATABASE"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def issue_id(self):
        """Gets the issue_id of this EntityDdl.

        EntityIssues found for this ddl.

        :return: The issue_id of this EntityDdl.
        :rtype: List[str]
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id):
        """Sets the issue_id of this EntityDdl.

        EntityIssues found for this ddl.

        :param issue_id: The issue_id of this EntityDdl.
        :type issue_id: List[str]
        """

        self._issue_id = issue_id
