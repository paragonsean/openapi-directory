# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conditional_column_set_value import ConditionalColumnSetValue
from openapi_server.models.convert_row_id_to_column import ConvertRowIdToColumn
from openapi_server.models.entity_move import EntityMove
from openapi_server.models.filter_table_columns import FilterTableColumns
from openapi_server.models.mapping_rule_filter import MappingRuleFilter
from openapi_server.models.multi_column_datatype_change import MultiColumnDatatypeChange
from openapi_server.models.multi_entity_rename import MultiEntityRename
from openapi_server.models.set_table_primary_key import SetTablePrimaryKey
from openapi_server.models.single_column_change import SingleColumnChange
from openapi_server.models.single_entity_rename import SingleEntityRename
from openapi_server.models.single_package_change import SinglePackageChange
from openapi_server.models.source_sql_change import SourceSqlChange
from openapi_server import util


class MappingRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditional_column_set_value: ConditionalColumnSetValue=None, convert_rowid_column: ConvertRowIdToColumn=None, display_name: str=None, entity_move: EntityMove=None, filter: MappingRuleFilter=None, filter_table_columns: FilterTableColumns=None, multi_column_data_type_change: MultiColumnDatatypeChange=None, multi_entity_rename: MultiEntityRename=None, name: str=None, revision_create_time: str=None, revision_id: str=None, rule_order: str=None, rule_scope: str=None, set_table_primary_key: SetTablePrimaryKey=None, single_column_change: SingleColumnChange=None, single_entity_rename: SingleEntityRename=None, single_package_change: SinglePackageChange=None, source_sql_change: SourceSqlChange=None, state: str=None):
        """MappingRule - a model defined in OpenAPI

        :param conditional_column_set_value: The conditional_column_set_value of this MappingRule.
        :param convert_rowid_column: The convert_rowid_column of this MappingRule.
        :param display_name: The display_name of this MappingRule.
        :param entity_move: The entity_move of this MappingRule.
        :param filter: The filter of this MappingRule.
        :param filter_table_columns: The filter_table_columns of this MappingRule.
        :param multi_column_data_type_change: The multi_column_data_type_change of this MappingRule.
        :param multi_entity_rename: The multi_entity_rename of this MappingRule.
        :param name: The name of this MappingRule.
        :param revision_create_time: The revision_create_time of this MappingRule.
        :param revision_id: The revision_id of this MappingRule.
        :param rule_order: The rule_order of this MappingRule.
        :param rule_scope: The rule_scope of this MappingRule.
        :param set_table_primary_key: The set_table_primary_key of this MappingRule.
        :param single_column_change: The single_column_change of this MappingRule.
        :param single_entity_rename: The single_entity_rename of this MappingRule.
        :param single_package_change: The single_package_change of this MappingRule.
        :param source_sql_change: The source_sql_change of this MappingRule.
        :param state: The state of this MappingRule.
        """
        self.openapi_types = {
            'conditional_column_set_value': ConditionalColumnSetValue,
            'convert_rowid_column': ConvertRowIdToColumn,
            'display_name': str,
            'entity_move': EntityMove,
            'filter': MappingRuleFilter,
            'filter_table_columns': FilterTableColumns,
            'multi_column_data_type_change': MultiColumnDatatypeChange,
            'multi_entity_rename': MultiEntityRename,
            'name': str,
            'revision_create_time': str,
            'revision_id': str,
            'rule_order': str,
            'rule_scope': str,
            'set_table_primary_key': SetTablePrimaryKey,
            'single_column_change': SingleColumnChange,
            'single_entity_rename': SingleEntityRename,
            'single_package_change': SinglePackageChange,
            'source_sql_change': SourceSqlChange,
            'state': str
        }

        self.attribute_map = {
            'conditional_column_set_value': 'conditionalColumnSetValue',
            'convert_rowid_column': 'convertRowidColumn',
            'display_name': 'displayName',
            'entity_move': 'entityMove',
            'filter': 'filter',
            'filter_table_columns': 'filterTableColumns',
            'multi_column_data_type_change': 'multiColumnDataTypeChange',
            'multi_entity_rename': 'multiEntityRename',
            'name': 'name',
            'revision_create_time': 'revisionCreateTime',
            'revision_id': 'revisionId',
            'rule_order': 'ruleOrder',
            'rule_scope': 'ruleScope',
            'set_table_primary_key': 'setTablePrimaryKey',
            'single_column_change': 'singleColumnChange',
            'single_entity_rename': 'singleEntityRename',
            'single_package_change': 'singlePackageChange',
            'source_sql_change': 'sourceSqlChange',
            'state': 'state'
        }

        self._conditional_column_set_value = conditional_column_set_value
        self._convert_rowid_column = convert_rowid_column
        self._display_name = display_name
        self._entity_move = entity_move
        self._filter = filter
        self._filter_table_columns = filter_table_columns
        self._multi_column_data_type_change = multi_column_data_type_change
        self._multi_entity_rename = multi_entity_rename
        self._name = name
        self._revision_create_time = revision_create_time
        self._revision_id = revision_id
        self._rule_order = rule_order
        self._rule_scope = rule_scope
        self._set_table_primary_key = set_table_primary_key
        self._single_column_change = single_column_change
        self._single_entity_rename = single_entity_rename
        self._single_package_change = single_package_change
        self._source_sql_change = source_sql_change
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MappingRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MappingRule of this MappingRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditional_column_set_value(self):
        """Gets the conditional_column_set_value of this MappingRule.


        :return: The conditional_column_set_value of this MappingRule.
        :rtype: ConditionalColumnSetValue
        """
        return self._conditional_column_set_value

    @conditional_column_set_value.setter
    def conditional_column_set_value(self, conditional_column_set_value):
        """Sets the conditional_column_set_value of this MappingRule.


        :param conditional_column_set_value: The conditional_column_set_value of this MappingRule.
        :type conditional_column_set_value: ConditionalColumnSetValue
        """

        self._conditional_column_set_value = conditional_column_set_value

    @property
    def convert_rowid_column(self):
        """Gets the convert_rowid_column of this MappingRule.


        :return: The convert_rowid_column of this MappingRule.
        :rtype: ConvertRowIdToColumn
        """
        return self._convert_rowid_column

    @convert_rowid_column.setter
    def convert_rowid_column(self, convert_rowid_column):
        """Sets the convert_rowid_column of this MappingRule.


        :param convert_rowid_column: The convert_rowid_column of this MappingRule.
        :type convert_rowid_column: ConvertRowIdToColumn
        """

        self._convert_rowid_column = convert_rowid_column

    @property
    def display_name(self):
        """Gets the display_name of this MappingRule.

        Optional. A human readable name

        :return: The display_name of this MappingRule.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MappingRule.

        Optional. A human readable name

        :param display_name: The display_name of this MappingRule.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def entity_move(self):
        """Gets the entity_move of this MappingRule.


        :return: The entity_move of this MappingRule.
        :rtype: EntityMove
        """
        return self._entity_move

    @entity_move.setter
    def entity_move(self, entity_move):
        """Sets the entity_move of this MappingRule.


        :param entity_move: The entity_move of this MappingRule.
        :type entity_move: EntityMove
        """

        self._entity_move = entity_move

    @property
    def filter(self):
        """Gets the filter of this MappingRule.


        :return: The filter of this MappingRule.
        :rtype: MappingRuleFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this MappingRule.


        :param filter: The filter of this MappingRule.
        :type filter: MappingRuleFilter
        """

        self._filter = filter

    @property
    def filter_table_columns(self):
        """Gets the filter_table_columns of this MappingRule.


        :return: The filter_table_columns of this MappingRule.
        :rtype: FilterTableColumns
        """
        return self._filter_table_columns

    @filter_table_columns.setter
    def filter_table_columns(self, filter_table_columns):
        """Sets the filter_table_columns of this MappingRule.


        :param filter_table_columns: The filter_table_columns of this MappingRule.
        :type filter_table_columns: FilterTableColumns
        """

        self._filter_table_columns = filter_table_columns

    @property
    def multi_column_data_type_change(self):
        """Gets the multi_column_data_type_change of this MappingRule.


        :return: The multi_column_data_type_change of this MappingRule.
        :rtype: MultiColumnDatatypeChange
        """
        return self._multi_column_data_type_change

    @multi_column_data_type_change.setter
    def multi_column_data_type_change(self, multi_column_data_type_change):
        """Sets the multi_column_data_type_change of this MappingRule.


        :param multi_column_data_type_change: The multi_column_data_type_change of this MappingRule.
        :type multi_column_data_type_change: MultiColumnDatatypeChange
        """

        self._multi_column_data_type_change = multi_column_data_type_change

    @property
    def multi_entity_rename(self):
        """Gets the multi_entity_rename of this MappingRule.


        :return: The multi_entity_rename of this MappingRule.
        :rtype: MultiEntityRename
        """
        return self._multi_entity_rename

    @multi_entity_rename.setter
    def multi_entity_rename(self, multi_entity_rename):
        """Sets the multi_entity_rename of this MappingRule.


        :param multi_entity_rename: The multi_entity_rename of this MappingRule.
        :type multi_entity_rename: MultiEntityRename
        """

        self._multi_entity_rename = multi_entity_rename

    @property
    def name(self):
        """Gets the name of this MappingRule.

        Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.

        :return: The name of this MappingRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MappingRule.

        Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.

        :param name: The name of this MappingRule.
        :type name: str
        """

        self._name = name

    @property
    def revision_create_time(self):
        """Gets the revision_create_time of this MappingRule.

        Output only. The timestamp that the revision was created.

        :return: The revision_create_time of this MappingRule.
        :rtype: str
        """
        return self._revision_create_time

    @revision_create_time.setter
    def revision_create_time(self, revision_create_time):
        """Sets the revision_create_time of this MappingRule.

        Output only. The timestamp that the revision was created.

        :param revision_create_time: The revision_create_time of this MappingRule.
        :type revision_create_time: str
        """

        self._revision_create_time = revision_create_time

    @property
    def revision_id(self):
        """Gets the revision_id of this MappingRule.

        Output only. The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.

        :return: The revision_id of this MappingRule.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this MappingRule.

        Output only. The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.

        :param revision_id: The revision_id of this MappingRule.
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def rule_order(self):
        """Gets the rule_order of this MappingRule.

        Required. The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.

        :return: The rule_order of this MappingRule.
        :rtype: str
        """
        return self._rule_order

    @rule_order.setter
    def rule_order(self, rule_order):
        """Sets the rule_order of this MappingRule.

        Required. The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.

        :param rule_order: The rule_order of this MappingRule.
        :type rule_order: str
        """

        self._rule_order = rule_order

    @property
    def rule_scope(self):
        """Gets the rule_scope of this MappingRule.

        Required. The rule scope

        :return: The rule_scope of this MappingRule.
        :rtype: str
        """
        return self._rule_scope

    @rule_scope.setter
    def rule_scope(self, rule_scope):
        """Sets the rule_scope of this MappingRule.

        Required. The rule scope

        :param rule_scope: The rule_scope of this MappingRule.
        :type rule_scope: str
        """
        allowed_values = ["DATABASE_ENTITY_TYPE_UNSPECIFIED", "DATABASE_ENTITY_TYPE_SCHEMA", "DATABASE_ENTITY_TYPE_TABLE", "DATABASE_ENTITY_TYPE_COLUMN", "DATABASE_ENTITY_TYPE_CONSTRAINT", "DATABASE_ENTITY_TYPE_INDEX", "DATABASE_ENTITY_TYPE_TRIGGER", "DATABASE_ENTITY_TYPE_VIEW", "DATABASE_ENTITY_TYPE_SEQUENCE", "DATABASE_ENTITY_TYPE_STORED_PROCEDURE", "DATABASE_ENTITY_TYPE_FUNCTION", "DATABASE_ENTITY_TYPE_SYNONYM", "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE", "DATABASE_ENTITY_TYPE_UDT", "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW", "DATABASE_ENTITY_TYPE_DATABASE"]  # noqa: E501
        if rule_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_scope` ({0}), must be one of {1}"
                .format(rule_scope, allowed_values)
            )

        self._rule_scope = rule_scope

    @property
    def set_table_primary_key(self):
        """Gets the set_table_primary_key of this MappingRule.


        :return: The set_table_primary_key of this MappingRule.
        :rtype: SetTablePrimaryKey
        """
        return self._set_table_primary_key

    @set_table_primary_key.setter
    def set_table_primary_key(self, set_table_primary_key):
        """Sets the set_table_primary_key of this MappingRule.


        :param set_table_primary_key: The set_table_primary_key of this MappingRule.
        :type set_table_primary_key: SetTablePrimaryKey
        """

        self._set_table_primary_key = set_table_primary_key

    @property
    def single_column_change(self):
        """Gets the single_column_change of this MappingRule.


        :return: The single_column_change of this MappingRule.
        :rtype: SingleColumnChange
        """
        return self._single_column_change

    @single_column_change.setter
    def single_column_change(self, single_column_change):
        """Sets the single_column_change of this MappingRule.


        :param single_column_change: The single_column_change of this MappingRule.
        :type single_column_change: SingleColumnChange
        """

        self._single_column_change = single_column_change

    @property
    def single_entity_rename(self):
        """Gets the single_entity_rename of this MappingRule.


        :return: The single_entity_rename of this MappingRule.
        :rtype: SingleEntityRename
        """
        return self._single_entity_rename

    @single_entity_rename.setter
    def single_entity_rename(self, single_entity_rename):
        """Sets the single_entity_rename of this MappingRule.


        :param single_entity_rename: The single_entity_rename of this MappingRule.
        :type single_entity_rename: SingleEntityRename
        """

        self._single_entity_rename = single_entity_rename

    @property
    def single_package_change(self):
        """Gets the single_package_change of this MappingRule.


        :return: The single_package_change of this MappingRule.
        :rtype: SinglePackageChange
        """
        return self._single_package_change

    @single_package_change.setter
    def single_package_change(self, single_package_change):
        """Sets the single_package_change of this MappingRule.


        :param single_package_change: The single_package_change of this MappingRule.
        :type single_package_change: SinglePackageChange
        """

        self._single_package_change = single_package_change

    @property
    def source_sql_change(self):
        """Gets the source_sql_change of this MappingRule.


        :return: The source_sql_change of this MappingRule.
        :rtype: SourceSqlChange
        """
        return self._source_sql_change

    @source_sql_change.setter
    def source_sql_change(self, source_sql_change):
        """Sets the source_sql_change of this MappingRule.


        :param source_sql_change: The source_sql_change of this MappingRule.
        :type source_sql_change: SourceSqlChange
        """

        self._source_sql_change = source_sql_change

    @property
    def state(self):
        """Gets the state of this MappingRule.

        Optional. The mapping rule state

        :return: The state of this MappingRule.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MappingRule.

        Optional. The mapping rule state

        :param state: The state of this MappingRule.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ENABLED", "DISABLED", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
