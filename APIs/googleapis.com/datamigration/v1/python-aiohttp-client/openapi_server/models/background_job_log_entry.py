# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apply_job_details import ApplyJobDetails
from openapi_server.models.convert_job_details import ConvertJobDetails
from openapi_server.models.import_rules_job_details import ImportRulesJobDetails
from openapi_server.models.seed_job_details import SeedJobDetails
from openapi_server import util


class BackgroundJobLogEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_job_details: ApplyJobDetails=None, completion_comment: str=None, completion_state: str=None, convert_job_details: ConvertJobDetails=None, finish_time: str=None, id: str=None, import_rules_job_details: ImportRulesJobDetails=None, job_type: str=None, request_autocommit: bool=None, seed_job_details: SeedJobDetails=None, start_time: str=None):
        """BackgroundJobLogEntry - a model defined in OpenAPI

        :param apply_job_details: The apply_job_details of this BackgroundJobLogEntry.
        :param completion_comment: The completion_comment of this BackgroundJobLogEntry.
        :param completion_state: The completion_state of this BackgroundJobLogEntry.
        :param convert_job_details: The convert_job_details of this BackgroundJobLogEntry.
        :param finish_time: The finish_time of this BackgroundJobLogEntry.
        :param id: The id of this BackgroundJobLogEntry.
        :param import_rules_job_details: The import_rules_job_details of this BackgroundJobLogEntry.
        :param job_type: The job_type of this BackgroundJobLogEntry.
        :param request_autocommit: The request_autocommit of this BackgroundJobLogEntry.
        :param seed_job_details: The seed_job_details of this BackgroundJobLogEntry.
        :param start_time: The start_time of this BackgroundJobLogEntry.
        """
        self.openapi_types = {
            'apply_job_details': ApplyJobDetails,
            'completion_comment': str,
            'completion_state': str,
            'convert_job_details': ConvertJobDetails,
            'finish_time': str,
            'id': str,
            'import_rules_job_details': ImportRulesJobDetails,
            'job_type': str,
            'request_autocommit': bool,
            'seed_job_details': SeedJobDetails,
            'start_time': str
        }

        self.attribute_map = {
            'apply_job_details': 'applyJobDetails',
            'completion_comment': 'completionComment',
            'completion_state': 'completionState',
            'convert_job_details': 'convertJobDetails',
            'finish_time': 'finishTime',
            'id': 'id',
            'import_rules_job_details': 'importRulesJobDetails',
            'job_type': 'jobType',
            'request_autocommit': 'requestAutocommit',
            'seed_job_details': 'seedJobDetails',
            'start_time': 'startTime'
        }

        self._apply_job_details = apply_job_details
        self._completion_comment = completion_comment
        self._completion_state = completion_state
        self._convert_job_details = convert_job_details
        self._finish_time = finish_time
        self._id = id
        self._import_rules_job_details = import_rules_job_details
        self._job_type = job_type
        self._request_autocommit = request_autocommit
        self._seed_job_details = seed_job_details
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackgroundJobLogEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackgroundJobLogEntry of this BackgroundJobLogEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_job_details(self):
        """Gets the apply_job_details of this BackgroundJobLogEntry.


        :return: The apply_job_details of this BackgroundJobLogEntry.
        :rtype: ApplyJobDetails
        """
        return self._apply_job_details

    @apply_job_details.setter
    def apply_job_details(self, apply_job_details):
        """Sets the apply_job_details of this BackgroundJobLogEntry.


        :param apply_job_details: The apply_job_details of this BackgroundJobLogEntry.
        :type apply_job_details: ApplyJobDetails
        """

        self._apply_job_details = apply_job_details

    @property
    def completion_comment(self):
        """Gets the completion_comment of this BackgroundJobLogEntry.

        Output only. Job completion comment, such as how many entities were seeded, how many warnings were found during conversion, and similar information.

        :return: The completion_comment of this BackgroundJobLogEntry.
        :rtype: str
        """
        return self._completion_comment

    @completion_comment.setter
    def completion_comment(self, completion_comment):
        """Sets the completion_comment of this BackgroundJobLogEntry.

        Output only. Job completion comment, such as how many entities were seeded, how many warnings were found during conversion, and similar information.

        :param completion_comment: The completion_comment of this BackgroundJobLogEntry.
        :type completion_comment: str
        """

        self._completion_comment = completion_comment

    @property
    def completion_state(self):
        """Gets the completion_state of this BackgroundJobLogEntry.

        Output only. Job completion state, i.e. the final state after the job completed.

        :return: The completion_state of this BackgroundJobLogEntry.
        :rtype: str
        """
        return self._completion_state

    @completion_state.setter
    def completion_state(self, completion_state):
        """Sets the completion_state of this BackgroundJobLogEntry.

        Output only. Job completion state, i.e. the final state after the job completed.

        :param completion_state: The completion_state of this BackgroundJobLogEntry.
        :type completion_state: str
        """
        allowed_values = ["JOB_COMPLETION_STATE_UNSPECIFIED", "SUCCEEDED", "FAILED"]  # noqa: E501
        if completion_state not in allowed_values:
            raise ValueError(
                "Invalid value for `completion_state` ({0}), must be one of {1}"
                .format(completion_state, allowed_values)
            )

        self._completion_state = completion_state

    @property
    def convert_job_details(self):
        """Gets the convert_job_details of this BackgroundJobLogEntry.


        :return: The convert_job_details of this BackgroundJobLogEntry.
        :rtype: ConvertJobDetails
        """
        return self._convert_job_details

    @convert_job_details.setter
    def convert_job_details(self, convert_job_details):
        """Sets the convert_job_details of this BackgroundJobLogEntry.


        :param convert_job_details: The convert_job_details of this BackgroundJobLogEntry.
        :type convert_job_details: ConvertJobDetails
        """

        self._convert_job_details = convert_job_details

    @property
    def finish_time(self):
        """Gets the finish_time of this BackgroundJobLogEntry.

        The timestamp when the background job was finished.

        :return: The finish_time of this BackgroundJobLogEntry.
        :rtype: str
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this BackgroundJobLogEntry.

        The timestamp when the background job was finished.

        :param finish_time: The finish_time of this BackgroundJobLogEntry.
        :type finish_time: str
        """

        self._finish_time = finish_time

    @property
    def id(self):
        """Gets the id of this BackgroundJobLogEntry.

        The background job log entry ID.

        :return: The id of this BackgroundJobLogEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BackgroundJobLogEntry.

        The background job log entry ID.

        :param id: The id of this BackgroundJobLogEntry.
        :type id: str
        """

        self._id = id

    @property
    def import_rules_job_details(self):
        """Gets the import_rules_job_details of this BackgroundJobLogEntry.


        :return: The import_rules_job_details of this BackgroundJobLogEntry.
        :rtype: ImportRulesJobDetails
        """
        return self._import_rules_job_details

    @import_rules_job_details.setter
    def import_rules_job_details(self, import_rules_job_details):
        """Sets the import_rules_job_details of this BackgroundJobLogEntry.


        :param import_rules_job_details: The import_rules_job_details of this BackgroundJobLogEntry.
        :type import_rules_job_details: ImportRulesJobDetails
        """

        self._import_rules_job_details = import_rules_job_details

    @property
    def job_type(self):
        """Gets the job_type of this BackgroundJobLogEntry.

        The type of job that was executed.

        :return: The job_type of this BackgroundJobLogEntry.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this BackgroundJobLogEntry.

        The type of job that was executed.

        :param job_type: The job_type of this BackgroundJobLogEntry.
        :type job_type: str
        """
        allowed_values = ["BACKGROUND_JOB_TYPE_UNSPECIFIED", "BACKGROUND_JOB_TYPE_SOURCE_SEED", "BACKGROUND_JOB_TYPE_CONVERT", "BACKGROUND_JOB_TYPE_APPLY_DESTINATION", "BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def request_autocommit(self):
        """Gets the request_autocommit of this BackgroundJobLogEntry.

        Output only. Whether the client requested the conversion workspace to be committed after a successful completion of the job.

        :return: The request_autocommit of this BackgroundJobLogEntry.
        :rtype: bool
        """
        return self._request_autocommit

    @request_autocommit.setter
    def request_autocommit(self, request_autocommit):
        """Sets the request_autocommit of this BackgroundJobLogEntry.

        Output only. Whether the client requested the conversion workspace to be committed after a successful completion of the job.

        :param request_autocommit: The request_autocommit of this BackgroundJobLogEntry.
        :type request_autocommit: bool
        """

        self._request_autocommit = request_autocommit

    @property
    def seed_job_details(self):
        """Gets the seed_job_details of this BackgroundJobLogEntry.


        :return: The seed_job_details of this BackgroundJobLogEntry.
        :rtype: SeedJobDetails
        """
        return self._seed_job_details

    @seed_job_details.setter
    def seed_job_details(self, seed_job_details):
        """Sets the seed_job_details of this BackgroundJobLogEntry.


        :param seed_job_details: The seed_job_details of this BackgroundJobLogEntry.
        :type seed_job_details: SeedJobDetails
        """

        self._seed_job_details = seed_job_details

    @property
    def start_time(self):
        """Gets the start_time of this BackgroundJobLogEntry.

        The timestamp when the background job was started.

        :return: The start_time of this BackgroundJobLogEntry.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BackgroundJobLogEntry.

        The timestamp when the background job was started.

        :param start_time: The start_time of this BackgroundJobLogEntry.
        :type start_time: str
        """

        self._start_time = start_time
