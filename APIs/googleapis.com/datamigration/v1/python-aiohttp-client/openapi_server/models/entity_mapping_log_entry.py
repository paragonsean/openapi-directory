# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntityMappingLogEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mapping_comment: str=None, rule_id: str=None, rule_revision_id: str=None):
        """EntityMappingLogEntry - a model defined in OpenAPI

        :param mapping_comment: The mapping_comment of this EntityMappingLogEntry.
        :param rule_id: The rule_id of this EntityMappingLogEntry.
        :param rule_revision_id: The rule_revision_id of this EntityMappingLogEntry.
        """
        self.openapi_types = {
            'mapping_comment': str,
            'rule_id': str,
            'rule_revision_id': str
        }

        self.attribute_map = {
            'mapping_comment': 'mappingComment',
            'rule_id': 'ruleId',
            'rule_revision_id': 'ruleRevisionId'
        }

        self._mapping_comment = mapping_comment
        self._rule_id = rule_id
        self._rule_revision_id = rule_revision_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityMappingLogEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityMappingLogEntry of this EntityMappingLogEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mapping_comment(self):
        """Gets the mapping_comment of this EntityMappingLogEntry.

        Comment.

        :return: The mapping_comment of this EntityMappingLogEntry.
        :rtype: str
        """
        return self._mapping_comment

    @mapping_comment.setter
    def mapping_comment(self, mapping_comment):
        """Sets the mapping_comment of this EntityMappingLogEntry.

        Comment.

        :param mapping_comment: The mapping_comment of this EntityMappingLogEntry.
        :type mapping_comment: str
        """

        self._mapping_comment = mapping_comment

    @property
    def rule_id(self):
        """Gets the rule_id of this EntityMappingLogEntry.

        Which rule caused this log entry.

        :return: The rule_id of this EntityMappingLogEntry.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this EntityMappingLogEntry.

        Which rule caused this log entry.

        :param rule_id: The rule_id of this EntityMappingLogEntry.
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def rule_revision_id(self):
        """Gets the rule_revision_id of this EntityMappingLogEntry.

        Rule revision ID.

        :return: The rule_revision_id of this EntityMappingLogEntry.
        :rtype: str
        """
        return self._rule_revision_id

    @rule_revision_id.setter
    def rule_revision_id(self, rule_revision_id):
        """Sets the rule_revision_id of this EntityMappingLogEntry.

        Rule revision ID.

        :param rule_revision_id: The rule_revision_id of this EntityMappingLogEntry.
        :type rule_revision_id: str
        """

        self._rule_revision_id = rule_revision_id
