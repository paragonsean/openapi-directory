# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplyJobDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_profile: str=None, filter: str=None):
        """ApplyJobDetails - a model defined in OpenAPI

        :param connection_profile: The connection_profile of this ApplyJobDetails.
        :param filter: The filter of this ApplyJobDetails.
        """
        self.openapi_types = {
            'connection_profile': str,
            'filter': str
        }

        self.attribute_map = {
            'connection_profile': 'connectionProfile',
            'filter': 'filter'
        }

        self._connection_profile = connection_profile
        self._filter = filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplyJobDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplyJobDetails of this ApplyJobDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_profile(self):
        """Gets the connection_profile of this ApplyJobDetails.

        Output only. The connection profile which was used for the apply job.

        :return: The connection_profile of this ApplyJobDetails.
        :rtype: str
        """
        return self._connection_profile

    @connection_profile.setter
    def connection_profile(self, connection_profile):
        """Sets the connection_profile of this ApplyJobDetails.

        Output only. The connection profile which was used for the apply job.

        :param connection_profile: The connection_profile of this ApplyJobDetails.
        :type connection_profile: str
        """

        self._connection_profile = connection_profile

    @property
    def filter(self):
        """Gets the filter of this ApplyJobDetails.

        Output only. AIP-160 based filter used to specify the entities to apply

        :return: The filter of this ApplyJobDetails.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ApplyJobDetails.

        Output only. AIP-160 based filter used to specify the entities to apply

        :param filter: The filter of this ApplyJobDetails.
        :type filter: str
        """

        self._filter = filter
