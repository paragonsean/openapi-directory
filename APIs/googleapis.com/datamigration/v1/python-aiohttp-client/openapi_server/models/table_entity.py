# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.column_entity import ColumnEntity
from openapi_server.models.constraint_entity import ConstraintEntity
from openapi_server.models.index_entity import IndexEntity
from openapi_server.models.trigger_entity import TriggerEntity
from openapi_server import util


class TableEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[ColumnEntity]=None, comment: str=None, constraints: List[ConstraintEntity]=None, custom_features: Dict[str, object]=None, indices: List[IndexEntity]=None, triggers: List[TriggerEntity]=None):
        """TableEntity - a model defined in OpenAPI

        :param columns: The columns of this TableEntity.
        :param comment: The comment of this TableEntity.
        :param constraints: The constraints of this TableEntity.
        :param custom_features: The custom_features of this TableEntity.
        :param indices: The indices of this TableEntity.
        :param triggers: The triggers of this TableEntity.
        """
        self.openapi_types = {
            'columns': List[ColumnEntity],
            'comment': str,
            'constraints': List[ConstraintEntity],
            'custom_features': Dict[str, object],
            'indices': List[IndexEntity],
            'triggers': List[TriggerEntity]
        }

        self.attribute_map = {
            'columns': 'columns',
            'comment': 'comment',
            'constraints': 'constraints',
            'custom_features': 'customFeatures',
            'indices': 'indices',
            'triggers': 'triggers'
        }

        self._columns = columns
        self._comment = comment
        self._constraints = constraints
        self._custom_features = custom_features
        self._indices = indices
        self._triggers = triggers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableEntity of this TableEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this TableEntity.

        Table columns.

        :return: The columns of this TableEntity.
        :rtype: List[ColumnEntity]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this TableEntity.

        Table columns.

        :param columns: The columns of this TableEntity.
        :type columns: List[ColumnEntity]
        """

        self._columns = columns

    @property
    def comment(self):
        """Gets the comment of this TableEntity.

        Comment associated with the table.

        :return: The comment of this TableEntity.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TableEntity.

        Comment associated with the table.

        :param comment: The comment of this TableEntity.
        :type comment: str
        """

        self._comment = comment

    @property
    def constraints(self):
        """Gets the constraints of this TableEntity.

        Table constraints.

        :return: The constraints of this TableEntity.
        :rtype: List[ConstraintEntity]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this TableEntity.

        Table constraints.

        :param constraints: The constraints of this TableEntity.
        :type constraints: List[ConstraintEntity]
        """

        self._constraints = constraints

    @property
    def custom_features(self):
        """Gets the custom_features of this TableEntity.

        Custom engine specific features.

        :return: The custom_features of this TableEntity.
        :rtype: Dict[str, object]
        """
        return self._custom_features

    @custom_features.setter
    def custom_features(self, custom_features):
        """Sets the custom_features of this TableEntity.

        Custom engine specific features.

        :param custom_features: The custom_features of this TableEntity.
        :type custom_features: Dict[str, object]
        """

        self._custom_features = custom_features

    @property
    def indices(self):
        """Gets the indices of this TableEntity.

        Table indices.

        :return: The indices of this TableEntity.
        :rtype: List[IndexEntity]
        """
        return self._indices

    @indices.setter
    def indices(self, indices):
        """Sets the indices of this TableEntity.

        Table indices.

        :param indices: The indices of this TableEntity.
        :type indices: List[IndexEntity]
        """

        self._indices = indices

    @property
    def triggers(self):
        """Gets the triggers of this TableEntity.

        Table triggers.

        :return: The triggers of this TableEntity.
        :rtype: List[TriggerEntity]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this TableEntity.

        Table triggers.

        :param triggers: The triggers of this TableEntity.
        :type triggers: List[TriggerEntity]
        """

        self._triggers = triggers
