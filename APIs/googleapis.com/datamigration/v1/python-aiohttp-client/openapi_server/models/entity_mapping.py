# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_mapping_log_entry import EntityMappingLogEntry
from openapi_server import util


class EntityMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, draft_entity: str=None, draft_type: str=None, mapping_log: List[EntityMappingLogEntry]=None, source_entity: str=None, source_type: str=None):
        """EntityMapping - a model defined in OpenAPI

        :param draft_entity: The draft_entity of this EntityMapping.
        :param draft_type: The draft_type of this EntityMapping.
        :param mapping_log: The mapping_log of this EntityMapping.
        :param source_entity: The source_entity of this EntityMapping.
        :param source_type: The source_type of this EntityMapping.
        """
        self.openapi_types = {
            'draft_entity': str,
            'draft_type': str,
            'mapping_log': List[EntityMappingLogEntry],
            'source_entity': str,
            'source_type': str
        }

        self.attribute_map = {
            'draft_entity': 'draftEntity',
            'draft_type': 'draftType',
            'mapping_log': 'mappingLog',
            'source_entity': 'sourceEntity',
            'source_type': 'sourceType'
        }

        self._draft_entity = draft_entity
        self._draft_type = draft_type
        self._mapping_log = mapping_log
        self._source_entity = source_entity
        self._source_type = source_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityMapping of this EntityMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def draft_entity(self):
        """Gets the draft_entity of this EntityMapping.

        Target entity full name. The draft entity can also include a column, index or constraint using the same naming notation schema.table.column.

        :return: The draft_entity of this EntityMapping.
        :rtype: str
        """
        return self._draft_entity

    @draft_entity.setter
    def draft_entity(self, draft_entity):
        """Sets the draft_entity of this EntityMapping.

        Target entity full name. The draft entity can also include a column, index or constraint using the same naming notation schema.table.column.

        :param draft_entity: The draft_entity of this EntityMapping.
        :type draft_entity: str
        """

        self._draft_entity = draft_entity

    @property
    def draft_type(self):
        """Gets the draft_type of this EntityMapping.

        Type of draft entity.

        :return: The draft_type of this EntityMapping.
        :rtype: str
        """
        return self._draft_type

    @draft_type.setter
    def draft_type(self, draft_type):
        """Sets the draft_type of this EntityMapping.

        Type of draft entity.

        :param draft_type: The draft_type of this EntityMapping.
        :type draft_type: str
        """
        allowed_values = ["DATABASE_ENTITY_TYPE_UNSPECIFIED", "DATABASE_ENTITY_TYPE_SCHEMA", "DATABASE_ENTITY_TYPE_TABLE", "DATABASE_ENTITY_TYPE_COLUMN", "DATABASE_ENTITY_TYPE_CONSTRAINT", "DATABASE_ENTITY_TYPE_INDEX", "DATABASE_ENTITY_TYPE_TRIGGER", "DATABASE_ENTITY_TYPE_VIEW", "DATABASE_ENTITY_TYPE_SEQUENCE", "DATABASE_ENTITY_TYPE_STORED_PROCEDURE", "DATABASE_ENTITY_TYPE_FUNCTION", "DATABASE_ENTITY_TYPE_SYNONYM", "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE", "DATABASE_ENTITY_TYPE_UDT", "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW", "DATABASE_ENTITY_TYPE_DATABASE"]  # noqa: E501
        if draft_type not in allowed_values:
            raise ValueError(
                "Invalid value for `draft_type` ({0}), must be one of {1}"
                .format(draft_type, allowed_values)
            )

        self._draft_type = draft_type

    @property
    def mapping_log(self):
        """Gets the mapping_log of this EntityMapping.

        Entity mapping log entries. Multiple rules can be effective and contribute changes to a converted entity, such as a rule can handle the entity name, another rule can handle an entity type. In addition, rules which did not change the entity are also logged along with the reason preventing them to do so.

        :return: The mapping_log of this EntityMapping.
        :rtype: List[EntityMappingLogEntry]
        """
        return self._mapping_log

    @mapping_log.setter
    def mapping_log(self, mapping_log):
        """Sets the mapping_log of this EntityMapping.

        Entity mapping log entries. Multiple rules can be effective and contribute changes to a converted entity, such as a rule can handle the entity name, another rule can handle an entity type. In addition, rules which did not change the entity are also logged along with the reason preventing them to do so.

        :param mapping_log: The mapping_log of this EntityMapping.
        :type mapping_log: List[EntityMappingLogEntry]
        """

        self._mapping_log = mapping_log

    @property
    def source_entity(self):
        """Gets the source_entity of this EntityMapping.

        Source entity full name. The source entity can also be a column, index or constraint using the same naming notation schema.table.column.

        :return: The source_entity of this EntityMapping.
        :rtype: str
        """
        return self._source_entity

    @source_entity.setter
    def source_entity(self, source_entity):
        """Sets the source_entity of this EntityMapping.

        Source entity full name. The source entity can also be a column, index or constraint using the same naming notation schema.table.column.

        :param source_entity: The source_entity of this EntityMapping.
        :type source_entity: str
        """

        self._source_entity = source_entity

    @property
    def source_type(self):
        """Gets the source_type of this EntityMapping.

        Type of source entity.

        :return: The source_type of this EntityMapping.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this EntityMapping.

        Type of source entity.

        :param source_type: The source_type of this EntityMapping.
        :type source_type: str
        """
        allowed_values = ["DATABASE_ENTITY_TYPE_UNSPECIFIED", "DATABASE_ENTITY_TYPE_SCHEMA", "DATABASE_ENTITY_TYPE_TABLE", "DATABASE_ENTITY_TYPE_COLUMN", "DATABASE_ENTITY_TYPE_CONSTRAINT", "DATABASE_ENTITY_TYPE_INDEX", "DATABASE_ENTITY_TYPE_TRIGGER", "DATABASE_ENTITY_TYPE_VIEW", "DATABASE_ENTITY_TYPE_SEQUENCE", "DATABASE_ENTITY_TYPE_STORED_PROCEDURE", "DATABASE_ENTITY_TYPE_FUNCTION", "DATABASE_ENTITY_TYPE_SYNONYM", "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE", "DATABASE_ENTITY_TYPE_UDT", "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW", "DATABASE_ENTITY_TYPE_DATABASE"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type
