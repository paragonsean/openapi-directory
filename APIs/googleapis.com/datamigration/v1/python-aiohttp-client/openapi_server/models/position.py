# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Position(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column: int=None, length: int=None, line: int=None, offset: int=None):
        """Position - a model defined in OpenAPI

        :param column: The column of this Position.
        :param length: The length of this Position.
        :param line: The line of this Position.
        :param offset: The offset of this Position.
        """
        self.openapi_types = {
            'column': int,
            'length': int,
            'line': int,
            'offset': int
        }

        self.attribute_map = {
            'column': 'column',
            'length': 'length',
            'line': 'line',
            'offset': 'offset'
        }

        self._column = column
        self._length = length
        self._line = line
        self._offset = offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Position':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Position of this Position.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column(self):
        """Gets the column of this Position.

        Issue column number

        :return: The column of this Position.
        :rtype: int
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this Position.

        Issue column number

        :param column: The column of this Position.
        :type column: int
        """

        self._column = column

    @property
    def length(self):
        """Gets the length of this Position.

        Issue length

        :return: The length of this Position.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Position.

        Issue length

        :param length: The length of this Position.
        :type length: int
        """

        self._length = length

    @property
    def line(self):
        """Gets the line of this Position.

        Issue line number

        :return: The line of this Position.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this Position.

        Issue line number

        :param line: The line of this Position.
        :type line: int
        """

        self._line = line

    @property
    def offset(self):
        """Gets the offset of this Position.

        Issue offset

        :return: The offset of this Position.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Position.

        Issue offset

        :param offset: The offset of this Position.
        :type offset: int
        """

        self._offset = offset
