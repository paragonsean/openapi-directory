# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TriggerEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_features: Dict[str, object]=None, name: str=None, sql_code: str=None, trigger_type: str=None, triggering_events: List[str]=None):
        """TriggerEntity - a model defined in OpenAPI

        :param custom_features: The custom_features of this TriggerEntity.
        :param name: The name of this TriggerEntity.
        :param sql_code: The sql_code of this TriggerEntity.
        :param trigger_type: The trigger_type of this TriggerEntity.
        :param triggering_events: The triggering_events of this TriggerEntity.
        """
        self.openapi_types = {
            'custom_features': Dict[str, object],
            'name': str,
            'sql_code': str,
            'trigger_type': str,
            'triggering_events': List[str]
        }

        self.attribute_map = {
            'custom_features': 'customFeatures',
            'name': 'name',
            'sql_code': 'sqlCode',
            'trigger_type': 'triggerType',
            'triggering_events': 'triggeringEvents'
        }

        self._custom_features = custom_features
        self._name = name
        self._sql_code = sql_code
        self._trigger_type = trigger_type
        self._triggering_events = triggering_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TriggerEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TriggerEntity of this TriggerEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_features(self):
        """Gets the custom_features of this TriggerEntity.

        Custom engine specific features.

        :return: The custom_features of this TriggerEntity.
        :rtype: Dict[str, object]
        """
        return self._custom_features

    @custom_features.setter
    def custom_features(self, custom_features):
        """Sets the custom_features of this TriggerEntity.

        Custom engine specific features.

        :param custom_features: The custom_features of this TriggerEntity.
        :type custom_features: Dict[str, object]
        """

        self._custom_features = custom_features

    @property
    def name(self):
        """Gets the name of this TriggerEntity.

        The name of the trigger.

        :return: The name of this TriggerEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TriggerEntity.

        The name of the trigger.

        :param name: The name of this TriggerEntity.
        :type name: str
        """

        self._name = name

    @property
    def sql_code(self):
        """Gets the sql_code of this TriggerEntity.

        The SQL code which creates the trigger.

        :return: The sql_code of this TriggerEntity.
        :rtype: str
        """
        return self._sql_code

    @sql_code.setter
    def sql_code(self, sql_code):
        """Sets the sql_code of this TriggerEntity.

        The SQL code which creates the trigger.

        :param sql_code: The sql_code of this TriggerEntity.
        :type sql_code: str
        """

        self._sql_code = sql_code

    @property
    def trigger_type(self):
        """Gets the trigger_type of this TriggerEntity.

        Indicates when the trigger fires, for example BEFORE STATEMENT, AFTER EACH ROW.

        :return: The trigger_type of this TriggerEntity.
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this TriggerEntity.

        Indicates when the trigger fires, for example BEFORE STATEMENT, AFTER EACH ROW.

        :param trigger_type: The trigger_type of this TriggerEntity.
        :type trigger_type: str
        """

        self._trigger_type = trigger_type

    @property
    def triggering_events(self):
        """Gets the triggering_events of this TriggerEntity.

        The DML, DDL, or database events that fire the trigger, for example INSERT, UPDATE.

        :return: The triggering_events of this TriggerEntity.
        :rtype: List[str]
        """
        return self._triggering_events

    @triggering_events.setter
    def triggering_events(self, triggering_events):
        """Sets the triggering_events of this TriggerEntity.

        The DML, DDL, or database events that fire the trigger, for example INSERT, UPDATE.

        :param triggering_events: The triggering_events of this TriggerEntity.
        :type triggering_events: List[str]
        """

        self._triggering_events = triggering_events
