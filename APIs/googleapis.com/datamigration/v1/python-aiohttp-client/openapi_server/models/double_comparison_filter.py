# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DoubleComparisonFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value: float=None, value_comparison: str=None):
        """DoubleComparisonFilter - a model defined in OpenAPI

        :param value: The value of this DoubleComparisonFilter.
        :param value_comparison: The value_comparison of this DoubleComparisonFilter.
        """
        self.openapi_types = {
            'value': float,
            'value_comparison': str
        }

        self.attribute_map = {
            'value': 'value',
            'value_comparison': 'valueComparison'
        }

        self._value = value
        self._value_comparison = value_comparison

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DoubleComparisonFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DoubleComparisonFilter of this DoubleComparisonFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self):
        """Gets the value of this DoubleComparisonFilter.

        Required. Double compare value to be used

        :return: The value of this DoubleComparisonFilter.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DoubleComparisonFilter.

        Required. Double compare value to be used

        :param value: The value of this DoubleComparisonFilter.
        :type value: float
        """

        self._value = value

    @property
    def value_comparison(self):
        """Gets the value_comparison of this DoubleComparisonFilter.

        Required. Relation between source value and compare value

        :return: The value_comparison of this DoubleComparisonFilter.
        :rtype: str
        """
        return self._value_comparison

    @value_comparison.setter
    def value_comparison(self, value_comparison):
        """Sets the value_comparison of this DoubleComparisonFilter.

        Required. Relation between source value and compare value

        :param value_comparison: The value_comparison of this DoubleComparisonFilter.
        :type value_comparison: str
        """
        allowed_values = ["VALUE_COMPARISON_UNSPECIFIED", "VALUE_COMPARISON_IF_VALUE_SMALLER_THAN", "VALUE_COMPARISON_IF_VALUE_SMALLER_EQUAL_THAN", "VALUE_COMPARISON_IF_VALUE_LARGER_THAN", "VALUE_COMPARISON_IF_VALUE_LARGER_EQUAL_THAN"]  # noqa: E501
        if value_comparison not in allowed_values:
            raise ValueError(
                "Invalid value for `value_comparison` ({0}), must be one of {1}"
                .format(value_comparison, allowed_values)
            )

        self._value_comparison = value_comparison
