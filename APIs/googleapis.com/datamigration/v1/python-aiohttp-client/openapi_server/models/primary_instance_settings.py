# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.machine_config import MachineConfig
from openapi_server import util


class PrimaryInstanceSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_flags: Dict[str, str]=None, id: str=None, labels: Dict[str, str]=None, machine_config: MachineConfig=None, private_ip: str=None):
        """PrimaryInstanceSettings - a model defined in OpenAPI

        :param database_flags: The database_flags of this PrimaryInstanceSettings.
        :param id: The id of this PrimaryInstanceSettings.
        :param labels: The labels of this PrimaryInstanceSettings.
        :param machine_config: The machine_config of this PrimaryInstanceSettings.
        :param private_ip: The private_ip of this PrimaryInstanceSettings.
        """
        self.openapi_types = {
            'database_flags': Dict[str, str],
            'id': str,
            'labels': Dict[str, str],
            'machine_config': MachineConfig,
            'private_ip': str
        }

        self.attribute_map = {
            'database_flags': 'databaseFlags',
            'id': 'id',
            'labels': 'labels',
            'machine_config': 'machineConfig',
            'private_ip': 'privateIp'
        }

        self._database_flags = database_flags
        self._id = id
        self._labels = labels
        self._machine_config = machine_config
        self._private_ip = private_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrimaryInstanceSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrimaryInstanceSettings of this PrimaryInstanceSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_flags(self):
        """Gets the database_flags of this PrimaryInstanceSettings.

        Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.

        :return: The database_flags of this PrimaryInstanceSettings.
        :rtype: Dict[str, str]
        """
        return self._database_flags

    @database_flags.setter
    def database_flags(self, database_flags):
        """Sets the database_flags of this PrimaryInstanceSettings.

        Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.

        :param database_flags: The database_flags of this PrimaryInstanceSettings.
        :type database_flags: Dict[str, str]
        """

        self._database_flags = database_flags

    @property
    def id(self):
        """Gets the id of this PrimaryInstanceSettings.

        Required. The ID of the AlloyDB primary instance. The ID must satisfy the regex expression \"[a-z0-9-]+\".

        :return: The id of this PrimaryInstanceSettings.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrimaryInstanceSettings.

        Required. The ID of the AlloyDB primary instance. The ID must satisfy the regex expression \"[a-z0-9-]+\".

        :param id: The id of this PrimaryInstanceSettings.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this PrimaryInstanceSettings.

        Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.

        :return: The labels of this PrimaryInstanceSettings.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PrimaryInstanceSettings.

        Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.

        :param labels: The labels of this PrimaryInstanceSettings.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def machine_config(self):
        """Gets the machine_config of this PrimaryInstanceSettings.


        :return: The machine_config of this PrimaryInstanceSettings.
        :rtype: MachineConfig
        """
        return self._machine_config

    @machine_config.setter
    def machine_config(self, machine_config):
        """Sets the machine_config of this PrimaryInstanceSettings.


        :param machine_config: The machine_config of this PrimaryInstanceSettings.
        :type machine_config: MachineConfig
        """

        self._machine_config = machine_config

    @property
    def private_ip(self):
        """Gets the private_ip of this PrimaryInstanceSettings.

        Output only. The private IP address for the Instance. This is the connection endpoint for an end-user application.

        :return: The private_ip of this PrimaryInstanceSettings.
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this PrimaryInstanceSettings.

        Output only. The private IP address for the Instance. This is the connection endpoint for an end-user application.

        :param private_ip: The private_ip of this PrimaryInstanceSettings.
        :type private_ip: str
        """

        self._private_ip = private_ip
