# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_sql_settings import CloudSqlSettings
from openapi_server import util


class CloudSqlConnectionProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_public_ip: str=None, cloud_sql_id: str=None, private_ip: str=None, public_ip: str=None, settings: CloudSqlSettings=None):
        """CloudSqlConnectionProfile - a model defined in OpenAPI

        :param additional_public_ip: The additional_public_ip of this CloudSqlConnectionProfile.
        :param cloud_sql_id: The cloud_sql_id of this CloudSqlConnectionProfile.
        :param private_ip: The private_ip of this CloudSqlConnectionProfile.
        :param public_ip: The public_ip of this CloudSqlConnectionProfile.
        :param settings: The settings of this CloudSqlConnectionProfile.
        """
        self.openapi_types = {
            'additional_public_ip': str,
            'cloud_sql_id': str,
            'private_ip': str,
            'public_ip': str,
            'settings': CloudSqlSettings
        }

        self.attribute_map = {
            'additional_public_ip': 'additionalPublicIp',
            'cloud_sql_id': 'cloudSqlId',
            'private_ip': 'privateIp',
            'public_ip': 'publicIp',
            'settings': 'settings'
        }

        self._additional_public_ip = additional_public_ip
        self._cloud_sql_id = cloud_sql_id
        self._private_ip = private_ip
        self._public_ip = public_ip
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudSqlConnectionProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudSqlConnectionProfile of this CloudSqlConnectionProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_public_ip(self):
        """Gets the additional_public_ip of this CloudSqlConnectionProfile.

        Output only. The Cloud SQL database instance's additional (outgoing) public IP. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).

        :return: The additional_public_ip of this CloudSqlConnectionProfile.
        :rtype: str
        """
        return self._additional_public_ip

    @additional_public_ip.setter
    def additional_public_ip(self, additional_public_ip):
        """Sets the additional_public_ip of this CloudSqlConnectionProfile.

        Output only. The Cloud SQL database instance's additional (outgoing) public IP. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).

        :param additional_public_ip: The additional_public_ip of this CloudSqlConnectionProfile.
        :type additional_public_ip: str
        """

        self._additional_public_ip = additional_public_ip

    @property
    def cloud_sql_id(self):
        """Gets the cloud_sql_id of this CloudSqlConnectionProfile.

        Output only. The Cloud SQL instance ID that this connection profile is associated with.

        :return: The cloud_sql_id of this CloudSqlConnectionProfile.
        :rtype: str
        """
        return self._cloud_sql_id

    @cloud_sql_id.setter
    def cloud_sql_id(self, cloud_sql_id):
        """Sets the cloud_sql_id of this CloudSqlConnectionProfile.

        Output only. The Cloud SQL instance ID that this connection profile is associated with.

        :param cloud_sql_id: The cloud_sql_id of this CloudSqlConnectionProfile.
        :type cloud_sql_id: str
        """

        self._cloud_sql_id = cloud_sql_id

    @property
    def private_ip(self):
        """Gets the private_ip of this CloudSqlConnectionProfile.

        Output only. The Cloud SQL database instance's private IP.

        :return: The private_ip of this CloudSqlConnectionProfile.
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this CloudSqlConnectionProfile.

        Output only. The Cloud SQL database instance's private IP.

        :param private_ip: The private_ip of this CloudSqlConnectionProfile.
        :type private_ip: str
        """

        self._private_ip = private_ip

    @property
    def public_ip(self):
        """Gets the public_ip of this CloudSqlConnectionProfile.

        Output only. The Cloud SQL database instance's public IP.

        :return: The public_ip of this CloudSqlConnectionProfile.
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this CloudSqlConnectionProfile.

        Output only. The Cloud SQL database instance's public IP.

        :param public_ip: The public_ip of this CloudSqlConnectionProfile.
        :type public_ip: str
        """

        self._public_ip = public_ip

    @property
    def settings(self):
        """Gets the settings of this CloudSqlConnectionProfile.


        :return: The settings of this CloudSqlConnectionProfile.
        :rtype: CloudSqlSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CloudSqlConnectionProfile.


        :param settings: The settings of this CloudSqlConnectionProfile.
        :type settings: CloudSqlSettings
        """

        self._settings = settings
