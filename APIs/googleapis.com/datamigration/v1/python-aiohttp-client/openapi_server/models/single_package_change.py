# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SinglePackageChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, package_body: str=None, package_description: str=None):
        """SinglePackageChange - a model defined in OpenAPI

        :param package_body: The package_body of this SinglePackageChange.
        :param package_description: The package_description of this SinglePackageChange.
        """
        self.openapi_types = {
            'package_body': str,
            'package_description': str
        }

        self.attribute_map = {
            'package_body': 'packageBody',
            'package_description': 'packageDescription'
        }

        self._package_body = package_body
        self._package_description = package_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SinglePackageChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SinglePackageChange of this SinglePackageChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def package_body(self):
        """Gets the package_body of this SinglePackageChange.

        Optional. Sql code for package body

        :return: The package_body of this SinglePackageChange.
        :rtype: str
        """
        return self._package_body

    @package_body.setter
    def package_body(self, package_body):
        """Sets the package_body of this SinglePackageChange.

        Optional. Sql code for package body

        :param package_body: The package_body of this SinglePackageChange.
        :type package_body: str
        """

        self._package_body = package_body

    @property
    def package_description(self):
        """Gets the package_description of this SinglePackageChange.

        Optional. Sql code for package description

        :return: The package_description of this SinglePackageChange.
        :rtype: str
        """
        return self._package_description

    @package_description.setter
    def package_description(self, package_description):
        """Sets the package_description of this SinglePackageChange.

        Optional. Sql code for package description

        :param package_description: The package_description of this SinglePackageChange.
        :type package_description: str
        """

        self._package_description = package_description
