# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SchemaEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_features: Dict[str, object]=None):
        """SchemaEntity - a model defined in OpenAPI

        :param custom_features: The custom_features of this SchemaEntity.
        """
        self.openapi_types = {
            'custom_features': Dict[str, object]
        }

        self.attribute_map = {
            'custom_features': 'customFeatures'
        }

        self._custom_features = custom_features

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchemaEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SchemaEntity of this SchemaEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_features(self):
        """Gets the custom_features of this SchemaEntity.

        Custom engine specific features.

        :return: The custom_features of this SchemaEntity.
        :rtype: Dict[str, object]
        """
        return self._custom_features

    @custom_features.setter
    def custom_features(self, custom_features):
        """Sets the custom_features of this SchemaEntity.

        Custom engine specific features.

        :param custom_features: The custom_features of this SchemaEntity.
        :type custom_features: Dict[str, object]
        """

        self._custom_features = custom_features
