# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.forward_ssh_tunnel_connectivity import ForwardSshTunnelConnectivity
from openapi_server.models.private_connectivity import PrivateConnectivity
from openapi_server.models.ssl_config import SslConfig
from openapi_server import util


class OracleConnectionProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_service: str=None, forward_ssh_connectivity: ForwardSshTunnelConnectivity=None, host: str=None, password: str=None, password_set: bool=None, port: int=None, private_connectivity: PrivateConnectivity=None, ssl: SslConfig=None, static_service_ip_connectivity: object=None, username: str=None):
        """OracleConnectionProfile - a model defined in OpenAPI

        :param database_service: The database_service of this OracleConnectionProfile.
        :param forward_ssh_connectivity: The forward_ssh_connectivity of this OracleConnectionProfile.
        :param host: The host of this OracleConnectionProfile.
        :param password: The password of this OracleConnectionProfile.
        :param password_set: The password_set of this OracleConnectionProfile.
        :param port: The port of this OracleConnectionProfile.
        :param private_connectivity: The private_connectivity of this OracleConnectionProfile.
        :param ssl: The ssl of this OracleConnectionProfile.
        :param static_service_ip_connectivity: The static_service_ip_connectivity of this OracleConnectionProfile.
        :param username: The username of this OracleConnectionProfile.
        """
        self.openapi_types = {
            'database_service': str,
            'forward_ssh_connectivity': ForwardSshTunnelConnectivity,
            'host': str,
            'password': str,
            'password_set': bool,
            'port': int,
            'private_connectivity': PrivateConnectivity,
            'ssl': SslConfig,
            'static_service_ip_connectivity': object,
            'username': str
        }

        self.attribute_map = {
            'database_service': 'databaseService',
            'forward_ssh_connectivity': 'forwardSshConnectivity',
            'host': 'host',
            'password': 'password',
            'password_set': 'passwordSet',
            'port': 'port',
            'private_connectivity': 'privateConnectivity',
            'ssl': 'ssl',
            'static_service_ip_connectivity': 'staticServiceIpConnectivity',
            'username': 'username'
        }

        self._database_service = database_service
        self._forward_ssh_connectivity = forward_ssh_connectivity
        self._host = host
        self._password = password
        self._password_set = password_set
        self._port = port
        self._private_connectivity = private_connectivity
        self._ssl = ssl
        self._static_service_ip_connectivity = static_service_ip_connectivity
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OracleConnectionProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OracleConnectionProfile of this OracleConnectionProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_service(self):
        """Gets the database_service of this OracleConnectionProfile.

        Required. Database service for the Oracle connection.

        :return: The database_service of this OracleConnectionProfile.
        :rtype: str
        """
        return self._database_service

    @database_service.setter
    def database_service(self, database_service):
        """Sets the database_service of this OracleConnectionProfile.

        Required. Database service for the Oracle connection.

        :param database_service: The database_service of this OracleConnectionProfile.
        :type database_service: str
        """

        self._database_service = database_service

    @property
    def forward_ssh_connectivity(self):
        """Gets the forward_ssh_connectivity of this OracleConnectionProfile.


        :return: The forward_ssh_connectivity of this OracleConnectionProfile.
        :rtype: ForwardSshTunnelConnectivity
        """
        return self._forward_ssh_connectivity

    @forward_ssh_connectivity.setter
    def forward_ssh_connectivity(self, forward_ssh_connectivity):
        """Sets the forward_ssh_connectivity of this OracleConnectionProfile.


        :param forward_ssh_connectivity: The forward_ssh_connectivity of this OracleConnectionProfile.
        :type forward_ssh_connectivity: ForwardSshTunnelConnectivity
        """

        self._forward_ssh_connectivity = forward_ssh_connectivity

    @property
    def host(self):
        """Gets the host of this OracleConnectionProfile.

        Required. The IP or hostname of the source Oracle database.

        :return: The host of this OracleConnectionProfile.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this OracleConnectionProfile.

        Required. The IP or hostname of the source Oracle database.

        :param host: The host of this OracleConnectionProfile.
        :type host: str
        """

        self._host = host

    @property
    def password(self):
        """Gets the password of this OracleConnectionProfile.

        Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.

        :return: The password of this OracleConnectionProfile.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this OracleConnectionProfile.

        Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.

        :param password: The password of this OracleConnectionProfile.
        :type password: str
        """

        self._password = password

    @property
    def password_set(self):
        """Gets the password_set of this OracleConnectionProfile.

        Output only. Indicates whether a new password is included in the request.

        :return: The password_set of this OracleConnectionProfile.
        :rtype: bool
        """
        return self._password_set

    @password_set.setter
    def password_set(self, password_set):
        """Sets the password_set of this OracleConnectionProfile.

        Output only. Indicates whether a new password is included in the request.

        :param password_set: The password_set of this OracleConnectionProfile.
        :type password_set: bool
        """

        self._password_set = password_set

    @property
    def port(self):
        """Gets the port of this OracleConnectionProfile.

        Required. The network port of the source Oracle database.

        :return: The port of this OracleConnectionProfile.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this OracleConnectionProfile.

        Required. The network port of the source Oracle database.

        :param port: The port of this OracleConnectionProfile.
        :type port: int
        """

        self._port = port

    @property
    def private_connectivity(self):
        """Gets the private_connectivity of this OracleConnectionProfile.


        :return: The private_connectivity of this OracleConnectionProfile.
        :rtype: PrivateConnectivity
        """
        return self._private_connectivity

    @private_connectivity.setter
    def private_connectivity(self, private_connectivity):
        """Sets the private_connectivity of this OracleConnectionProfile.


        :param private_connectivity: The private_connectivity of this OracleConnectionProfile.
        :type private_connectivity: PrivateConnectivity
        """

        self._private_connectivity = private_connectivity

    @property
    def ssl(self):
        """Gets the ssl of this OracleConnectionProfile.


        :return: The ssl of this OracleConnectionProfile.
        :rtype: SslConfig
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this OracleConnectionProfile.


        :param ssl: The ssl of this OracleConnectionProfile.
        :type ssl: SslConfig
        """

        self._ssl = ssl

    @property
    def static_service_ip_connectivity(self):
        """Gets the static_service_ip_connectivity of this OracleConnectionProfile.

        Static IP address connectivity configured on service project.

        :return: The static_service_ip_connectivity of this OracleConnectionProfile.
        :rtype: object
        """
        return self._static_service_ip_connectivity

    @static_service_ip_connectivity.setter
    def static_service_ip_connectivity(self, static_service_ip_connectivity):
        """Sets the static_service_ip_connectivity of this OracleConnectionProfile.

        Static IP address connectivity configured on service project.

        :param static_service_ip_connectivity: The static_service_ip_connectivity of this OracleConnectionProfile.
        :type static_service_ip_connectivity: object
        """

        self._static_service_ip_connectivity = static_service_ip_connectivity

    @property
    def username(self):
        """Gets the username of this OracleConnectionProfile.

        Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.

        :return: The username of this OracleConnectionProfile.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OracleConnectionProfile.

        Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.

        :param username: The username of this OracleConnectionProfile.
        :type username: str
        """

        self._username = username
