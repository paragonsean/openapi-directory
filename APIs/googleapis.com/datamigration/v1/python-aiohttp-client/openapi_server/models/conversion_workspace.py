# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database_engine_info import DatabaseEngineInfo
from openapi_server import util


class ConversionWorkspace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, destination: DatabaseEngineInfo=None, display_name: str=None, global_settings: Dict[str, str]=None, has_uncommitted_changes: bool=None, latest_commit_id: str=None, latest_commit_time: str=None, name: str=None, source: DatabaseEngineInfo=None, update_time: str=None):
        """ConversionWorkspace - a model defined in OpenAPI

        :param create_time: The create_time of this ConversionWorkspace.
        :param destination: The destination of this ConversionWorkspace.
        :param display_name: The display_name of this ConversionWorkspace.
        :param global_settings: The global_settings of this ConversionWorkspace.
        :param has_uncommitted_changes: The has_uncommitted_changes of this ConversionWorkspace.
        :param latest_commit_id: The latest_commit_id of this ConversionWorkspace.
        :param latest_commit_time: The latest_commit_time of this ConversionWorkspace.
        :param name: The name of this ConversionWorkspace.
        :param source: The source of this ConversionWorkspace.
        :param update_time: The update_time of this ConversionWorkspace.
        """
        self.openapi_types = {
            'create_time': str,
            'destination': DatabaseEngineInfo,
            'display_name': str,
            'global_settings': Dict[str, str],
            'has_uncommitted_changes': bool,
            'latest_commit_id': str,
            'latest_commit_time': str,
            'name': str,
            'source': DatabaseEngineInfo,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'destination': 'destination',
            'display_name': 'displayName',
            'global_settings': 'globalSettings',
            'has_uncommitted_changes': 'hasUncommittedChanges',
            'latest_commit_id': 'latestCommitId',
            'latest_commit_time': 'latestCommitTime',
            'name': 'name',
            'source': 'source',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._destination = destination
        self._display_name = display_name
        self._global_settings = global_settings
        self._has_uncommitted_changes = has_uncommitted_changes
        self._latest_commit_id = latest_commit_id
        self._latest_commit_time = latest_commit_time
        self._name = name
        self._source = source
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversionWorkspace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConversionWorkspace of this ConversionWorkspace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ConversionWorkspace.

        Output only. The timestamp when the workspace resource was created.

        :return: The create_time of this ConversionWorkspace.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ConversionWorkspace.

        Output only. The timestamp when the workspace resource was created.

        :param create_time: The create_time of this ConversionWorkspace.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def destination(self):
        """Gets the destination of this ConversionWorkspace.


        :return: The destination of this ConversionWorkspace.
        :rtype: DatabaseEngineInfo
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ConversionWorkspace.


        :param destination: The destination of this ConversionWorkspace.
        :type destination: DatabaseEngineInfo
        """

        self._destination = destination

    @property
    def display_name(self):
        """Gets the display_name of this ConversionWorkspace.

        Optional. The display name for the workspace.

        :return: The display_name of this ConversionWorkspace.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConversionWorkspace.

        Optional. The display name for the workspace.

        :param display_name: The display_name of this ConversionWorkspace.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def global_settings(self):
        """Gets the global_settings of this ConversionWorkspace.

        Optional. A generic list of settings for the workspace. The settings are database pair dependant and can indicate default behavior for the mapping rules engine or turn on or off specific features. Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false, ignore_non_table_synonyms=true

        :return: The global_settings of this ConversionWorkspace.
        :rtype: Dict[str, str]
        """
        return self._global_settings

    @global_settings.setter
    def global_settings(self, global_settings):
        """Sets the global_settings of this ConversionWorkspace.

        Optional. A generic list of settings for the workspace. The settings are database pair dependant and can indicate default behavior for the mapping rules engine or turn on or off specific features. Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false, ignore_non_table_synonyms=true

        :param global_settings: The global_settings of this ConversionWorkspace.
        :type global_settings: Dict[str, str]
        """

        self._global_settings = global_settings

    @property
    def has_uncommitted_changes(self):
        """Gets the has_uncommitted_changes of this ConversionWorkspace.

        Output only. Whether the workspace has uncommitted changes (changes which were made after the workspace was committed).

        :return: The has_uncommitted_changes of this ConversionWorkspace.
        :rtype: bool
        """
        return self._has_uncommitted_changes

    @has_uncommitted_changes.setter
    def has_uncommitted_changes(self, has_uncommitted_changes):
        """Sets the has_uncommitted_changes of this ConversionWorkspace.

        Output only. Whether the workspace has uncommitted changes (changes which were made after the workspace was committed).

        :param has_uncommitted_changes: The has_uncommitted_changes of this ConversionWorkspace.
        :type has_uncommitted_changes: bool
        """

        self._has_uncommitted_changes = has_uncommitted_changes

    @property
    def latest_commit_id(self):
        """Gets the latest_commit_id of this ConversionWorkspace.

        Output only. The latest commit ID.

        :return: The latest_commit_id of this ConversionWorkspace.
        :rtype: str
        """
        return self._latest_commit_id

    @latest_commit_id.setter
    def latest_commit_id(self, latest_commit_id):
        """Sets the latest_commit_id of this ConversionWorkspace.

        Output only. The latest commit ID.

        :param latest_commit_id: The latest_commit_id of this ConversionWorkspace.
        :type latest_commit_id: str
        """

        self._latest_commit_id = latest_commit_id

    @property
    def latest_commit_time(self):
        """Gets the latest_commit_time of this ConversionWorkspace.

        Output only. The timestamp when the workspace was committed.

        :return: The latest_commit_time of this ConversionWorkspace.
        :rtype: str
        """
        return self._latest_commit_time

    @latest_commit_time.setter
    def latest_commit_time(self, latest_commit_time):
        """Sets the latest_commit_time of this ConversionWorkspace.

        Output only. The timestamp when the workspace was committed.

        :param latest_commit_time: The latest_commit_time of this ConversionWorkspace.
        :type latest_commit_time: str
        """

        self._latest_commit_time = latest_commit_time

    @property
    def name(self):
        """Gets the name of this ConversionWorkspace.

        Full name of the workspace resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.

        :return: The name of this ConversionWorkspace.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConversionWorkspace.

        Full name of the workspace resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.

        :param name: The name of this ConversionWorkspace.
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this ConversionWorkspace.


        :return: The source of this ConversionWorkspace.
        :rtype: DatabaseEngineInfo
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ConversionWorkspace.


        :param source: The source of this ConversionWorkspace.
        :type source: DatabaseEngineInfo
        """

        self._source = source

    @property
    def update_time(self):
        """Gets the update_time of this ConversionWorkspace.

        Output only. The timestamp when the workspace resource was last updated.

        :return: The update_time of this ConversionWorkspace.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ConversionWorkspace.

        Output only. The timestamp when the workspace resource was last updated.

        :param update_time: The update_time of this ConversionWorkspace.
        :type update_time: str
        """

        self._update_time = update_time
