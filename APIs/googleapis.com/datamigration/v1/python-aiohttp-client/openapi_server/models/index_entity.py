# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IndexEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_features: Dict[str, object]=None, name: str=None, table_columns: List[str]=None, type: str=None, unique: bool=None):
        """IndexEntity - a model defined in OpenAPI

        :param custom_features: The custom_features of this IndexEntity.
        :param name: The name of this IndexEntity.
        :param table_columns: The table_columns of this IndexEntity.
        :param type: The type of this IndexEntity.
        :param unique: The unique of this IndexEntity.
        """
        self.openapi_types = {
            'custom_features': Dict[str, object],
            'name': str,
            'table_columns': List[str],
            'type': str,
            'unique': bool
        }

        self.attribute_map = {
            'custom_features': 'customFeatures',
            'name': 'name',
            'table_columns': 'tableColumns',
            'type': 'type',
            'unique': 'unique'
        }

        self._custom_features = custom_features
        self._name = name
        self._table_columns = table_columns
        self._type = type
        self._unique = unique

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndexEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IndexEntity of this IndexEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_features(self):
        """Gets the custom_features of this IndexEntity.

        Custom engine specific features.

        :return: The custom_features of this IndexEntity.
        :rtype: Dict[str, object]
        """
        return self._custom_features

    @custom_features.setter
    def custom_features(self, custom_features):
        """Sets the custom_features of this IndexEntity.

        Custom engine specific features.

        :param custom_features: The custom_features of this IndexEntity.
        :type custom_features: Dict[str, object]
        """

        self._custom_features = custom_features

    @property
    def name(self):
        """Gets the name of this IndexEntity.

        The name of the index.

        :return: The name of this IndexEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndexEntity.

        The name of the index.

        :param name: The name of this IndexEntity.
        :type name: str
        """

        self._name = name

    @property
    def table_columns(self):
        """Gets the table_columns of this IndexEntity.

        Table columns used as part of the Index, for example B-TREE index should list the columns which constitutes the index.

        :return: The table_columns of this IndexEntity.
        :rtype: List[str]
        """
        return self._table_columns

    @table_columns.setter
    def table_columns(self, table_columns):
        """Sets the table_columns of this IndexEntity.

        Table columns used as part of the Index, for example B-TREE index should list the columns which constitutes the index.

        :param table_columns: The table_columns of this IndexEntity.
        :type table_columns: List[str]
        """

        self._table_columns = table_columns

    @property
    def type(self):
        """Gets the type of this IndexEntity.

        Type of index, for example B-TREE.

        :return: The type of this IndexEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IndexEntity.

        Type of index, for example B-TREE.

        :param type: The type of this IndexEntity.
        :type type: str
        """

        self._type = type

    @property
    def unique(self):
        """Gets the unique of this IndexEntity.

        Boolean value indicating whether the index is unique.

        :return: The unique of this IndexEntity.
        :rtype: bool
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this IndexEntity.

        Boolean value indicating whether the index is unique.

        :param unique: The unique of this IndexEntity.
        :type unique: bool
        """

        self._unique = unique
