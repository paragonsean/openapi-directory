# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RulesFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rules_content: str=None, rules_source_filename: str=None):
        """RulesFile - a model defined in OpenAPI

        :param rules_content: The rules_content of this RulesFile.
        :param rules_source_filename: The rules_source_filename of this RulesFile.
        """
        self.openapi_types = {
            'rules_content': str,
            'rules_source_filename': str
        }

        self.attribute_map = {
            'rules_content': 'rulesContent',
            'rules_source_filename': 'rulesSourceFilename'
        }

        self._rules_content = rules_content
        self._rules_source_filename = rules_source_filename

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RulesFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RulesFile of this RulesFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rules_content(self):
        """Gets the rules_content of this RulesFile.

        Required. The text content of the rules that needs to be converted.

        :return: The rules_content of this RulesFile.
        :rtype: str
        """
        return self._rules_content

    @rules_content.setter
    def rules_content(self, rules_content):
        """Sets the rules_content of this RulesFile.

        Required. The text content of the rules that needs to be converted.

        :param rules_content: The rules_content of this RulesFile.
        :type rules_content: str
        """

        self._rules_content = rules_content

    @property
    def rules_source_filename(self):
        """Gets the rules_source_filename of this RulesFile.

        Required. The filename of the rules that needs to be converted. The filename is used mainly so that future logs of the import rules job contain it, and can therefore be searched by it.

        :return: The rules_source_filename of this RulesFile.
        :rtype: str
        """
        return self._rules_source_filename

    @rules_source_filename.setter
    def rules_source_filename(self, rules_source_filename):
        """Sets the rules_source_filename of this RulesFile.

        Required. The filename of the rules that needs to be converted. The filename is used mainly so that future logs of the import rules job contain it, and can therefore be searched by it.

        :param rules_source_filename: The rules_source_filename of this RulesFile.
        :type rules_source_filename: str
        """

        self._rules_source_filename = rules_source_filename
