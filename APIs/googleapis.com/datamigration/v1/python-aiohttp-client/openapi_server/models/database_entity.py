# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database_instance_entity import DatabaseInstanceEntity
from openapi_server.models.entity_ddl import EntityDdl
from openapi_server.models.entity_issue import EntityIssue
from openapi_server.models.entity_mapping import EntityMapping
from openapi_server.models.function_entity import FunctionEntity
from openapi_server.models.materialized_view_entity import MaterializedViewEntity
from openapi_server.models.package_entity import PackageEntity
from openapi_server.models.schema_entity import SchemaEntity
from openapi_server.models.sequence_entity import SequenceEntity
from openapi_server.models.stored_procedure_entity import StoredProcedureEntity
from openapi_server.models.synonym_entity import SynonymEntity
from openapi_server.models.table_entity import TableEntity
from openapi_server.models.udt_entity import UDTEntity
from openapi_server.models.view_entity import ViewEntity
from openapi_server import util


class DatabaseEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database: DatabaseInstanceEntity=None, database_function: FunctionEntity=None, database_package: PackageEntity=None, entity_ddl: List[EntityDdl]=None, entity_type: str=None, issues: List[EntityIssue]=None, mappings: List[EntityMapping]=None, materialized_view: MaterializedViewEntity=None, parent_entity: str=None, _schema: SchemaEntity=None, sequence: SequenceEntity=None, short_name: str=None, stored_procedure: StoredProcedureEntity=None, synonym: SynonymEntity=None, table: TableEntity=None, tree: str=None, udt: UDTEntity=None, view: ViewEntity=None):
        """DatabaseEntity - a model defined in OpenAPI

        :param database: The database of this DatabaseEntity.
        :param database_function: The database_function of this DatabaseEntity.
        :param database_package: The database_package of this DatabaseEntity.
        :param entity_ddl: The entity_ddl of this DatabaseEntity.
        :param entity_type: The entity_type of this DatabaseEntity.
        :param issues: The issues of this DatabaseEntity.
        :param mappings: The mappings of this DatabaseEntity.
        :param materialized_view: The materialized_view of this DatabaseEntity.
        :param parent_entity: The parent_entity of this DatabaseEntity.
        :param _schema: The _schema of this DatabaseEntity.
        :param sequence: The sequence of this DatabaseEntity.
        :param short_name: The short_name of this DatabaseEntity.
        :param stored_procedure: The stored_procedure of this DatabaseEntity.
        :param synonym: The synonym of this DatabaseEntity.
        :param table: The table of this DatabaseEntity.
        :param tree: The tree of this DatabaseEntity.
        :param udt: The udt of this DatabaseEntity.
        :param view: The view of this DatabaseEntity.
        """
        self.openapi_types = {
            'database': DatabaseInstanceEntity,
            'database_function': FunctionEntity,
            'database_package': PackageEntity,
            'entity_ddl': List[EntityDdl],
            'entity_type': str,
            'issues': List[EntityIssue],
            'mappings': List[EntityMapping],
            'materialized_view': MaterializedViewEntity,
            'parent_entity': str,
            '_schema': SchemaEntity,
            'sequence': SequenceEntity,
            'short_name': str,
            'stored_procedure': StoredProcedureEntity,
            'synonym': SynonymEntity,
            'table': TableEntity,
            'tree': str,
            'udt': UDTEntity,
            'view': ViewEntity
        }

        self.attribute_map = {
            'database': 'database',
            'database_function': 'databaseFunction',
            'database_package': 'databasePackage',
            'entity_ddl': 'entityDdl',
            'entity_type': 'entityType',
            'issues': 'issues',
            'mappings': 'mappings',
            'materialized_view': 'materializedView',
            'parent_entity': 'parentEntity',
            '_schema': 'schema',
            'sequence': 'sequence',
            'short_name': 'shortName',
            'stored_procedure': 'storedProcedure',
            'synonym': 'synonym',
            'table': 'table',
            'tree': 'tree',
            'udt': 'udt',
            'view': 'view'
        }

        self._database = database
        self._database_function = database_function
        self._database_package = database_package
        self._entity_ddl = entity_ddl
        self._entity_type = entity_type
        self._issues = issues
        self._mappings = mappings
        self._materialized_view = materialized_view
        self._parent_entity = parent_entity
        self.__schema = _schema
        self._sequence = sequence
        self._short_name = short_name
        self._stored_procedure = stored_procedure
        self._synonym = synonym
        self._table = table
        self._tree = tree
        self._udt = udt
        self._view = view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseEntity of this DatabaseEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database(self):
        """Gets the database of this DatabaseEntity.


        :return: The database of this DatabaseEntity.
        :rtype: DatabaseInstanceEntity
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this DatabaseEntity.


        :param database: The database of this DatabaseEntity.
        :type database: DatabaseInstanceEntity
        """

        self._database = database

    @property
    def database_function(self):
        """Gets the database_function of this DatabaseEntity.


        :return: The database_function of this DatabaseEntity.
        :rtype: FunctionEntity
        """
        return self._database_function

    @database_function.setter
    def database_function(self, database_function):
        """Sets the database_function of this DatabaseEntity.


        :param database_function: The database_function of this DatabaseEntity.
        :type database_function: FunctionEntity
        """

        self._database_function = database_function

    @property
    def database_package(self):
        """Gets the database_package of this DatabaseEntity.


        :return: The database_package of this DatabaseEntity.
        :rtype: PackageEntity
        """
        return self._database_package

    @database_package.setter
    def database_package(self, database_package):
        """Sets the database_package of this DatabaseEntity.


        :param database_package: The database_package of this DatabaseEntity.
        :type database_package: PackageEntity
        """

        self._database_package = database_package

    @property
    def entity_ddl(self):
        """Gets the entity_ddl of this DatabaseEntity.

        Details about the entity DDL script. Multiple DDL scripts are provided for child entities such as a table entity will have one DDL for the table with additional DDLs for each index, constraint and such.

        :return: The entity_ddl of this DatabaseEntity.
        :rtype: List[EntityDdl]
        """
        return self._entity_ddl

    @entity_ddl.setter
    def entity_ddl(self, entity_ddl):
        """Sets the entity_ddl of this DatabaseEntity.

        Details about the entity DDL script. Multiple DDL scripts are provided for child entities such as a table entity will have one DDL for the table with additional DDLs for each index, constraint and such.

        :param entity_ddl: The entity_ddl of this DatabaseEntity.
        :type entity_ddl: List[EntityDdl]
        """

        self._entity_ddl = entity_ddl

    @property
    def entity_type(self):
        """Gets the entity_type of this DatabaseEntity.

        The type of the database entity (table, view, index, ...).

        :return: The entity_type of this DatabaseEntity.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this DatabaseEntity.

        The type of the database entity (table, view, index, ...).

        :param entity_type: The entity_type of this DatabaseEntity.
        :type entity_type: str
        """
        allowed_values = ["DATABASE_ENTITY_TYPE_UNSPECIFIED", "DATABASE_ENTITY_TYPE_SCHEMA", "DATABASE_ENTITY_TYPE_TABLE", "DATABASE_ENTITY_TYPE_COLUMN", "DATABASE_ENTITY_TYPE_CONSTRAINT", "DATABASE_ENTITY_TYPE_INDEX", "DATABASE_ENTITY_TYPE_TRIGGER", "DATABASE_ENTITY_TYPE_VIEW", "DATABASE_ENTITY_TYPE_SEQUENCE", "DATABASE_ENTITY_TYPE_STORED_PROCEDURE", "DATABASE_ENTITY_TYPE_FUNCTION", "DATABASE_ENTITY_TYPE_SYNONYM", "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE", "DATABASE_ENTITY_TYPE_UDT", "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW", "DATABASE_ENTITY_TYPE_DATABASE"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def issues(self):
        """Gets the issues of this DatabaseEntity.

        Details about the various issues found for the entity.

        :return: The issues of this DatabaseEntity.
        :rtype: List[EntityIssue]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this DatabaseEntity.

        Details about the various issues found for the entity.

        :param issues: The issues of this DatabaseEntity.
        :type issues: List[EntityIssue]
        """

        self._issues = issues

    @property
    def mappings(self):
        """Gets the mappings of this DatabaseEntity.

        Details about entity mappings. For source tree entities, this holds the draft entities which were generated by the mapping rules. For draft tree entities, this holds the source entities which were converted to form the draft entity. Destination entities will have no mapping details.

        :return: The mappings of this DatabaseEntity.
        :rtype: List[EntityMapping]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this DatabaseEntity.

        Details about entity mappings. For source tree entities, this holds the draft entities which were generated by the mapping rules. For draft tree entities, this holds the source entities which were converted to form the draft entity. Destination entities will have no mapping details.

        :param mappings: The mappings of this DatabaseEntity.
        :type mappings: List[EntityMapping]
        """

        self._mappings = mappings

    @property
    def materialized_view(self):
        """Gets the materialized_view of this DatabaseEntity.


        :return: The materialized_view of this DatabaseEntity.
        :rtype: MaterializedViewEntity
        """
        return self._materialized_view

    @materialized_view.setter
    def materialized_view(self, materialized_view):
        """Sets the materialized_view of this DatabaseEntity.


        :param materialized_view: The materialized_view of this DatabaseEntity.
        :type materialized_view: MaterializedViewEntity
        """

        self._materialized_view = materialized_view

    @property
    def parent_entity(self):
        """Gets the parent_entity of this DatabaseEntity.

        The full name of the parent entity (e.g. schema name).

        :return: The parent_entity of this DatabaseEntity.
        :rtype: str
        """
        return self._parent_entity

    @parent_entity.setter
    def parent_entity(self, parent_entity):
        """Sets the parent_entity of this DatabaseEntity.

        The full name of the parent entity (e.g. schema name).

        :param parent_entity: The parent_entity of this DatabaseEntity.
        :type parent_entity: str
        """

        self._parent_entity = parent_entity

    @property
    def _schema(self):
        """Gets the _schema of this DatabaseEntity.


        :return: The _schema of this DatabaseEntity.
        :rtype: SchemaEntity
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this DatabaseEntity.


        :param _schema: The _schema of this DatabaseEntity.
        :type _schema: SchemaEntity
        """

        self.__schema = _schema

    @property
    def sequence(self):
        """Gets the sequence of this DatabaseEntity.


        :return: The sequence of this DatabaseEntity.
        :rtype: SequenceEntity
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this DatabaseEntity.


        :param sequence: The sequence of this DatabaseEntity.
        :type sequence: SequenceEntity
        """

        self._sequence = sequence

    @property
    def short_name(self):
        """Gets the short_name of this DatabaseEntity.

        The short name (e.g. table name) of the entity.

        :return: The short_name of this DatabaseEntity.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this DatabaseEntity.

        The short name (e.g. table name) of the entity.

        :param short_name: The short_name of this DatabaseEntity.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def stored_procedure(self):
        """Gets the stored_procedure of this DatabaseEntity.


        :return: The stored_procedure of this DatabaseEntity.
        :rtype: StoredProcedureEntity
        """
        return self._stored_procedure

    @stored_procedure.setter
    def stored_procedure(self, stored_procedure):
        """Sets the stored_procedure of this DatabaseEntity.


        :param stored_procedure: The stored_procedure of this DatabaseEntity.
        :type stored_procedure: StoredProcedureEntity
        """

        self._stored_procedure = stored_procedure

    @property
    def synonym(self):
        """Gets the synonym of this DatabaseEntity.


        :return: The synonym of this DatabaseEntity.
        :rtype: SynonymEntity
        """
        return self._synonym

    @synonym.setter
    def synonym(self, synonym):
        """Sets the synonym of this DatabaseEntity.


        :param synonym: The synonym of this DatabaseEntity.
        :type synonym: SynonymEntity
        """

        self._synonym = synonym

    @property
    def table(self):
        """Gets the table of this DatabaseEntity.


        :return: The table of this DatabaseEntity.
        :rtype: TableEntity
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this DatabaseEntity.


        :param table: The table of this DatabaseEntity.
        :type table: TableEntity
        """

        self._table = table

    @property
    def tree(self):
        """Gets the tree of this DatabaseEntity.

        The type of tree the entity belongs to.

        :return: The tree of this DatabaseEntity.
        :rtype: str
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this DatabaseEntity.

        The type of tree the entity belongs to.

        :param tree: The tree of this DatabaseEntity.
        :type tree: str
        """
        allowed_values = ["TREE_TYPE_UNSPECIFIED", "SOURCE", "DRAFT", "DESTINATION"]  # noqa: E501
        if tree not in allowed_values:
            raise ValueError(
                "Invalid value for `tree` ({0}), must be one of {1}"
                .format(tree, allowed_values)
            )

        self._tree = tree

    @property
    def udt(self):
        """Gets the udt of this DatabaseEntity.


        :return: The udt of this DatabaseEntity.
        :rtype: UDTEntity
        """
        return self._udt

    @udt.setter
    def udt(self, udt):
        """Sets the udt of this DatabaseEntity.


        :param udt: The udt of this DatabaseEntity.
        :type udt: UDTEntity
        """

        self._udt = udt

    @property
    def view(self):
        """Gets the view of this DatabaseEntity.


        :return: The view of this DatabaseEntity.
        :rtype: ViewEntity
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this DatabaseEntity.


        :param view: The view of this DatabaseEntity.
        :type view: ViewEntity
        """

        self._view = view
