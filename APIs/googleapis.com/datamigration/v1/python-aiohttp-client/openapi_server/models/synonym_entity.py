# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SynonymEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_features: Dict[str, object]=None, source_entity: str=None, source_type: str=None):
        """SynonymEntity - a model defined in OpenAPI

        :param custom_features: The custom_features of this SynonymEntity.
        :param source_entity: The source_entity of this SynonymEntity.
        :param source_type: The source_type of this SynonymEntity.
        """
        self.openapi_types = {
            'custom_features': Dict[str, object],
            'source_entity': str,
            'source_type': str
        }

        self.attribute_map = {
            'custom_features': 'customFeatures',
            'source_entity': 'sourceEntity',
            'source_type': 'sourceType'
        }

        self._custom_features = custom_features
        self._source_entity = source_entity
        self._source_type = source_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SynonymEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SynonymEntity of this SynonymEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_features(self):
        """Gets the custom_features of this SynonymEntity.

        Custom engine specific features.

        :return: The custom_features of this SynonymEntity.
        :rtype: Dict[str, object]
        """
        return self._custom_features

    @custom_features.setter
    def custom_features(self, custom_features):
        """Sets the custom_features of this SynonymEntity.

        Custom engine specific features.

        :param custom_features: The custom_features of this SynonymEntity.
        :type custom_features: Dict[str, object]
        """

        self._custom_features = custom_features

    @property
    def source_entity(self):
        """Gets the source_entity of this SynonymEntity.

        The name of the entity for which the synonym is being created (the source).

        :return: The source_entity of this SynonymEntity.
        :rtype: str
        """
        return self._source_entity

    @source_entity.setter
    def source_entity(self, source_entity):
        """Sets the source_entity of this SynonymEntity.

        The name of the entity for which the synonym is being created (the source).

        :param source_entity: The source_entity of this SynonymEntity.
        :type source_entity: str
        """

        self._source_entity = source_entity

    @property
    def source_type(self):
        """Gets the source_type of this SynonymEntity.

        The type of the entity for which the synonym is being created (usually a table or a sequence).

        :return: The source_type of this SynonymEntity.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this SynonymEntity.

        The type of the entity for which the synonym is being created (usually a table or a sequence).

        :param source_type: The source_type of this SynonymEntity.
        :type source_type: str
        """
        allowed_values = ["DATABASE_ENTITY_TYPE_UNSPECIFIED", "DATABASE_ENTITY_TYPE_SCHEMA", "DATABASE_ENTITY_TYPE_TABLE", "DATABASE_ENTITY_TYPE_COLUMN", "DATABASE_ENTITY_TYPE_CONSTRAINT", "DATABASE_ENTITY_TYPE_INDEX", "DATABASE_ENTITY_TYPE_TRIGGER", "DATABASE_ENTITY_TYPE_VIEW", "DATABASE_ENTITY_TYPE_SEQUENCE", "DATABASE_ENTITY_TYPE_STORED_PROCEDURE", "DATABASE_ENTITY_TYPE_FUNCTION", "DATABASE_ENTITY_TYPE_SYNONYM", "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE", "DATABASE_ENTITY_TYPE_UDT", "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW", "DATABASE_ENTITY_TYPE_DATABASE"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type
