# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplyConversionWorkspaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_commit: bool=None, connection_profile: str=None, dry_run: bool=None, filter: str=None):
        """ApplyConversionWorkspaceRequest - a model defined in OpenAPI

        :param auto_commit: The auto_commit of this ApplyConversionWorkspaceRequest.
        :param connection_profile: The connection_profile of this ApplyConversionWorkspaceRequest.
        :param dry_run: The dry_run of this ApplyConversionWorkspaceRequest.
        :param filter: The filter of this ApplyConversionWorkspaceRequest.
        """
        self.openapi_types = {
            'auto_commit': bool,
            'connection_profile': str,
            'dry_run': bool,
            'filter': str
        }

        self.attribute_map = {
            'auto_commit': 'autoCommit',
            'connection_profile': 'connectionProfile',
            'dry_run': 'dryRun',
            'filter': 'filter'
        }

        self._auto_commit = auto_commit
        self._connection_profile = connection_profile
        self._dry_run = dry_run
        self._filter = filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplyConversionWorkspaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplyConversionWorkspaceRequest of this ApplyConversionWorkspaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_commit(self):
        """Gets the auto_commit of this ApplyConversionWorkspaceRequest.

        Optional. Specifies whether the conversion workspace is to be committed automatically after the apply.

        :return: The auto_commit of this ApplyConversionWorkspaceRequest.
        :rtype: bool
        """
        return self._auto_commit

    @auto_commit.setter
    def auto_commit(self, auto_commit):
        """Sets the auto_commit of this ApplyConversionWorkspaceRequest.

        Optional. Specifies whether the conversion workspace is to be committed automatically after the apply.

        :param auto_commit: The auto_commit of this ApplyConversionWorkspaceRequest.
        :type auto_commit: bool
        """

        self._auto_commit = auto_commit

    @property
    def connection_profile(self):
        """Gets the connection_profile of this ApplyConversionWorkspaceRequest.

        Optional. Fully qualified (Uri) name of the destination connection profile.

        :return: The connection_profile of this ApplyConversionWorkspaceRequest.
        :rtype: str
        """
        return self._connection_profile

    @connection_profile.setter
    def connection_profile(self, connection_profile):
        """Sets the connection_profile of this ApplyConversionWorkspaceRequest.

        Optional. Fully qualified (Uri) name of the destination connection profile.

        :param connection_profile: The connection_profile of this ApplyConversionWorkspaceRequest.
        :type connection_profile: str
        """

        self._connection_profile = connection_profile

    @property
    def dry_run(self):
        """Gets the dry_run of this ApplyConversionWorkspaceRequest.

        Optional. Only validates the apply process, but doesn't change the destination database. Only works for PostgreSQL destination connection profile.

        :return: The dry_run of this ApplyConversionWorkspaceRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this ApplyConversionWorkspaceRequest.

        Optional. Only validates the apply process, but doesn't change the destination database. Only works for PostgreSQL destination connection profile.

        :param dry_run: The dry_run of this ApplyConversionWorkspaceRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def filter(self):
        """Gets the filter of this ApplyConversionWorkspaceRequest.

        Filter which entities to apply. Leaving this field empty will apply all of the entities. Supports Google AIP 160 based filtering.

        :return: The filter of this ApplyConversionWorkspaceRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ApplyConversionWorkspaceRequest.

        Filter which entities to apply. Leaving this field empty will apply all of the entities. Supports Google AIP 160 based filtering.

        :param filter: The filter of this ApplyConversionWorkspaceRequest.
        :type filter: str
        """

        self._filter = filter
