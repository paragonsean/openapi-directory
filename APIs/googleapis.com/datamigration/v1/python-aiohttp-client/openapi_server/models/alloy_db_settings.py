# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server.models.primary_instance_settings import PrimaryInstanceSettings
from openapi_server.models.user_password import UserPassword
from openapi_server import util


class AlloyDbSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_version: str=None, encryption_config: EncryptionConfig=None, initial_user: UserPassword=None, labels: Dict[str, str]=None, primary_instance_settings: PrimaryInstanceSettings=None, vpc_network: str=None):
        """AlloyDbSettings - a model defined in OpenAPI

        :param database_version: The database_version of this AlloyDbSettings.
        :param encryption_config: The encryption_config of this AlloyDbSettings.
        :param initial_user: The initial_user of this AlloyDbSettings.
        :param labels: The labels of this AlloyDbSettings.
        :param primary_instance_settings: The primary_instance_settings of this AlloyDbSettings.
        :param vpc_network: The vpc_network of this AlloyDbSettings.
        """
        self.openapi_types = {
            'database_version': str,
            'encryption_config': EncryptionConfig,
            'initial_user': UserPassword,
            'labels': Dict[str, str],
            'primary_instance_settings': PrimaryInstanceSettings,
            'vpc_network': str
        }

        self.attribute_map = {
            'database_version': 'databaseVersion',
            'encryption_config': 'encryptionConfig',
            'initial_user': 'initialUser',
            'labels': 'labels',
            'primary_instance_settings': 'primaryInstanceSettings',
            'vpc_network': 'vpcNetwork'
        }

        self._database_version = database_version
        self._encryption_config = encryption_config
        self._initial_user = initial_user
        self._labels = labels
        self._primary_instance_settings = primary_instance_settings
        self._vpc_network = vpc_network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlloyDbSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlloyDbSettings of this AlloyDbSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_version(self):
        """Gets the database_version of this AlloyDbSettings.

        Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.

        :return: The database_version of this AlloyDbSettings.
        :rtype: str
        """
        return self._database_version

    @database_version.setter
    def database_version(self, database_version):
        """Sets the database_version of this AlloyDbSettings.

        Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.

        :param database_version: The database_version of this AlloyDbSettings.
        :type database_version: str
        """
        allowed_values = ["DATABASE_VERSION_UNSPECIFIED", "POSTGRES_14", "POSTGRES_15"]  # noqa: E501
        if database_version not in allowed_values:
            raise ValueError(
                "Invalid value for `database_version` ({0}), must be one of {1}"
                .format(database_version, allowed_values)
            )

        self._database_version = database_version

    @property
    def encryption_config(self):
        """Gets the encryption_config of this AlloyDbSettings.


        :return: The encryption_config of this AlloyDbSettings.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this AlloyDbSettings.


        :param encryption_config: The encryption_config of this AlloyDbSettings.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def initial_user(self):
        """Gets the initial_user of this AlloyDbSettings.


        :return: The initial_user of this AlloyDbSettings.
        :rtype: UserPassword
        """
        return self._initial_user

    @initial_user.setter
    def initial_user(self, initial_user):
        """Sets the initial_user of this AlloyDbSettings.


        :param initial_user: The initial_user of this AlloyDbSettings.
        :type initial_user: UserPassword
        """

        self._initial_user = initial_user

    @property
    def labels(self):
        """Gets the labels of this AlloyDbSettings.

        Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.

        :return: The labels of this AlloyDbSettings.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AlloyDbSettings.

        Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.

        :param labels: The labels of this AlloyDbSettings.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def primary_instance_settings(self):
        """Gets the primary_instance_settings of this AlloyDbSettings.


        :return: The primary_instance_settings of this AlloyDbSettings.
        :rtype: PrimaryInstanceSettings
        """
        return self._primary_instance_settings

    @primary_instance_settings.setter
    def primary_instance_settings(self, primary_instance_settings):
        """Sets the primary_instance_settings of this AlloyDbSettings.


        :param primary_instance_settings: The primary_instance_settings of this AlloyDbSettings.
        :type primary_instance_settings: PrimaryInstanceSettings
        """

        self._primary_instance_settings = primary_instance_settings

    @property
    def vpc_network(self):
        """Gets the vpc_network of this AlloyDbSettings.

        Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: \"projects/{project_number}/global/networks/{network_id}\". This is required to create a cluster.

        :return: The vpc_network of this AlloyDbSettings.
        :rtype: str
        """
        return self._vpc_network

    @vpc_network.setter
    def vpc_network(self, vpc_network):
        """Sets the vpc_network of this AlloyDbSettings.

        Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: \"projects/{project_number}/global/networks/{network_id}\". This is required to create a cluster.

        :param vpc_network: The vpc_network of this AlloyDbSettings.
        :type vpc_network: str
        """

        self._vpc_network = vpc_network
