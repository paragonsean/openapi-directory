/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Trigger is not used as an independent entity, it is retrieved as part of a Table entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TriggerEntity {
  public static final String SERIALIZED_NAME_CUSTOM_FEATURES = "customFeatures";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FEATURES)
  private Map<String, Object> customFeatures = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SQL_CODE = "sqlCode";
  @SerializedName(SERIALIZED_NAME_SQL_CODE)
  private String sqlCode;

  public static final String SERIALIZED_NAME_TRIGGER_TYPE = "triggerType";
  @SerializedName(SERIALIZED_NAME_TRIGGER_TYPE)
  private String triggerType;

  public static final String SERIALIZED_NAME_TRIGGERING_EVENTS = "triggeringEvents";
  @SerializedName(SERIALIZED_NAME_TRIGGERING_EVENTS)
  private List<String> triggeringEvents = new ArrayList<>();

  public TriggerEntity() {
  }

  public TriggerEntity customFeatures(Map<String, Object> customFeatures) {
    this.customFeatures = customFeatures;
    return this;
  }

  public TriggerEntity putCustomFeaturesItem(String key, Object customFeaturesItem) {
    if (this.customFeatures == null) {
      this.customFeatures = new HashMap<>();
    }
    this.customFeatures.put(key, customFeaturesItem);
    return this;
  }

  /**
   * Custom engine specific features.
   * @return customFeatures
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCustomFeatures() {
    return customFeatures;
  }

  public void setCustomFeatures(Map<String, Object> customFeatures) {
    this.customFeatures = customFeatures;
  }


  public TriggerEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the trigger.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TriggerEntity sqlCode(String sqlCode) {
    this.sqlCode = sqlCode;
    return this;
  }

  /**
   * The SQL code which creates the trigger.
   * @return sqlCode
   */
  @javax.annotation.Nullable
  public String getSqlCode() {
    return sqlCode;
  }

  public void setSqlCode(String sqlCode) {
    this.sqlCode = sqlCode;
  }


  public TriggerEntity triggerType(String triggerType) {
    this.triggerType = triggerType;
    return this;
  }

  /**
   * Indicates when the trigger fires, for example BEFORE STATEMENT, AFTER EACH ROW.
   * @return triggerType
   */
  @javax.annotation.Nullable
  public String getTriggerType() {
    return triggerType;
  }

  public void setTriggerType(String triggerType) {
    this.triggerType = triggerType;
  }


  public TriggerEntity triggeringEvents(List<String> triggeringEvents) {
    this.triggeringEvents = triggeringEvents;
    return this;
  }

  public TriggerEntity addTriggeringEventsItem(String triggeringEventsItem) {
    if (this.triggeringEvents == null) {
      this.triggeringEvents = new ArrayList<>();
    }
    this.triggeringEvents.add(triggeringEventsItem);
    return this;
  }

  /**
   * The DML, DDL, or database events that fire the trigger, for example INSERT, UPDATE.
   * @return triggeringEvents
   */
  @javax.annotation.Nullable
  public List<String> getTriggeringEvents() {
    return triggeringEvents;
  }

  public void setTriggeringEvents(List<String> triggeringEvents) {
    this.triggeringEvents = triggeringEvents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TriggerEntity triggerEntity = (TriggerEntity) o;
    return Objects.equals(this.customFeatures, triggerEntity.customFeatures) &&
        Objects.equals(this.name, triggerEntity.name) &&
        Objects.equals(this.sqlCode, triggerEntity.sqlCode) &&
        Objects.equals(this.triggerType, triggerEntity.triggerType) &&
        Objects.equals(this.triggeringEvents, triggerEntity.triggeringEvents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customFeatures, name, sqlCode, triggerType, triggeringEvents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TriggerEntity {\n");
    sb.append("    customFeatures: ").append(toIndentedString(customFeatures)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sqlCode: ").append(toIndentedString(sqlCode)).append("\n");
    sb.append("    triggerType: ").append(toIndentedString(triggerType)).append("\n");
    sb.append("    triggeringEvents: ").append(toIndentedString(triggeringEvents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customFeatures");
    openapiFields.add("name");
    openapiFields.add("sqlCode");
    openapiFields.add("triggerType");
    openapiFields.add("triggeringEvents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TriggerEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TriggerEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TriggerEntity is not found in the empty JSON string", TriggerEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TriggerEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TriggerEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sqlCode") != null && !jsonObj.get("sqlCode").isJsonNull()) && !jsonObj.get("sqlCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlCode").toString()));
      }
      if ((jsonObj.get("triggerType") != null && !jsonObj.get("triggerType").isJsonNull()) && !jsonObj.get("triggerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("triggeringEvents") != null && !jsonObj.get("triggeringEvents").isJsonNull() && !jsonObj.get("triggeringEvents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggeringEvents` to be an array in the JSON string but got `%s`", jsonObj.get("triggeringEvents").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TriggerEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TriggerEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TriggerEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TriggerEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<TriggerEntity>() {
           @Override
           public void write(JsonWriter out, TriggerEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TriggerEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TriggerEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TriggerEntity
   * @throws IOException if the JSON string is invalid with respect to TriggerEntity
   */
  public static TriggerEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TriggerEntity.class);
  }

  /**
   * Convert an instance of TriggerEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

