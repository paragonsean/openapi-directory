/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options to configure rule type SourceSqlChange. The rule is used to alter the sql code for database entities. The rule filter field can refer to one entity. The rule scope can be: StoredProcedure, Function, Trigger, View
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceSqlChange {
  public static final String SERIALIZED_NAME_SQL_CODE = "sqlCode";
  @SerializedName(SERIALIZED_NAME_SQL_CODE)
  private String sqlCode;

  public SourceSqlChange() {
  }

  public SourceSqlChange sqlCode(String sqlCode) {
    this.sqlCode = sqlCode;
    return this;
  }

  /**
   * Required. Sql code for source (stored procedure, function, trigger or view)
   * @return sqlCode
   */
  @javax.annotation.Nullable
  public String getSqlCode() {
    return sqlCode;
  }

  public void setSqlCode(String sqlCode) {
    this.sqlCode = sqlCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceSqlChange sourceSqlChange = (SourceSqlChange) o;
    return Objects.equals(this.sqlCode, sourceSqlChange.sqlCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sqlCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceSqlChange {\n");
    sb.append("    sqlCode: ").append(toIndentedString(sqlCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sqlCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceSqlChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceSqlChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceSqlChange is not found in the empty JSON string", SourceSqlChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceSqlChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceSqlChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sqlCode") != null && !jsonObj.get("sqlCode").isJsonNull()) && !jsonObj.get("sqlCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceSqlChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceSqlChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceSqlChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceSqlChange.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceSqlChange>() {
           @Override
           public void write(JsonWriter out, SourceSqlChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceSqlChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceSqlChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceSqlChange
   * @throws IOException if the JSON string is invalid with respect to SourceSqlChange
   */
  public static SourceSqlChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceSqlChange.class);
  }

  /**
   * Convert an instance of SourceSqlChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

