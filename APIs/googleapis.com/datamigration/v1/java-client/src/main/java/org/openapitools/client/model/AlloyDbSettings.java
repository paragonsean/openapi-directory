/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.EncryptionConfig;
import org.openapitools.client.model.PrimaryInstanceSettings;
import org.openapitools.client.model.UserPassword;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for creating an AlloyDB cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlloyDbSettings {
  /**
   * Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
   */
  @JsonAdapter(DatabaseVersionEnum.Adapter.class)
  public enum DatabaseVersionEnum {
    DATABASE_VERSION_UNSPECIFIED("DATABASE_VERSION_UNSPECIFIED"),
    
    POSTGRES_14("POSTGRES_14"),
    
    POSTGRES_15("POSTGRES_15");

    private String value;

    DatabaseVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatabaseVersionEnum fromValue(String value) {
      for (DatabaseVersionEnum b : DatabaseVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatabaseVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatabaseVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatabaseVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatabaseVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatabaseVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATABASE_VERSION = "databaseVersion";
  @SerializedName(SERIALIZED_NAME_DATABASE_VERSION)
  private DatabaseVersionEnum databaseVersion;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIG = "encryptionConfig";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIG)
  private EncryptionConfig encryptionConfig;

  public static final String SERIALIZED_NAME_INITIAL_USER = "initialUser";
  @SerializedName(SERIALIZED_NAME_INITIAL_USER)
  private UserPassword initialUser;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_PRIMARY_INSTANCE_SETTINGS = "primaryInstanceSettings";
  @SerializedName(SERIALIZED_NAME_PRIMARY_INSTANCE_SETTINGS)
  private PrimaryInstanceSettings primaryInstanceSettings;

  public static final String SERIALIZED_NAME_VPC_NETWORK = "vpcNetwork";
  @SerializedName(SERIALIZED_NAME_VPC_NETWORK)
  private String vpcNetwork;

  public AlloyDbSettings() {
  }

  public AlloyDbSettings databaseVersion(DatabaseVersionEnum databaseVersion) {
    this.databaseVersion = databaseVersion;
    return this;
  }

  /**
   * Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
   * @return databaseVersion
   */
  @javax.annotation.Nullable
  public DatabaseVersionEnum getDatabaseVersion() {
    return databaseVersion;
  }

  public void setDatabaseVersion(DatabaseVersionEnum databaseVersion) {
    this.databaseVersion = databaseVersion;
  }


  public AlloyDbSettings encryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Get encryptionConfig
   * @return encryptionConfig
   */
  @javax.annotation.Nullable
  public EncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  public void setEncryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
  }


  public AlloyDbSettings initialUser(UserPassword initialUser) {
    this.initialUser = initialUser;
    return this;
  }

  /**
   * Get initialUser
   * @return initialUser
   */
  @javax.annotation.Nullable
  public UserPassword getInitialUser() {
    return initialUser;
  }

  public void setInitialUser(UserPassword initialUser) {
    this.initialUser = initialUser;
  }


  public AlloyDbSettings labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public AlloyDbSettings putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels for the AlloyDB cluster created by DMS. An object containing a list of &#39;key&#39;, &#39;value&#39; pairs.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public AlloyDbSettings primaryInstanceSettings(PrimaryInstanceSettings primaryInstanceSettings) {
    this.primaryInstanceSettings = primaryInstanceSettings;
    return this;
  }

  /**
   * Get primaryInstanceSettings
   * @return primaryInstanceSettings
   */
  @javax.annotation.Nullable
  public PrimaryInstanceSettings getPrimaryInstanceSettings() {
    return primaryInstanceSettings;
  }

  public void setPrimaryInstanceSettings(PrimaryInstanceSettings primaryInstanceSettings) {
    this.primaryInstanceSettings = primaryInstanceSettings;
  }


  public AlloyDbSettings vpcNetwork(String vpcNetwork) {
    this.vpcNetwork = vpcNetwork;
    return this;
  }

  /**
   * Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: \&quot;projects/{project_number}/global/networks/{network_id}\&quot;. This is required to create a cluster.
   * @return vpcNetwork
   */
  @javax.annotation.Nullable
  public String getVpcNetwork() {
    return vpcNetwork;
  }

  public void setVpcNetwork(String vpcNetwork) {
    this.vpcNetwork = vpcNetwork;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlloyDbSettings alloyDbSettings = (AlloyDbSettings) o;
    return Objects.equals(this.databaseVersion, alloyDbSettings.databaseVersion) &&
        Objects.equals(this.encryptionConfig, alloyDbSettings.encryptionConfig) &&
        Objects.equals(this.initialUser, alloyDbSettings.initialUser) &&
        Objects.equals(this.labels, alloyDbSettings.labels) &&
        Objects.equals(this.primaryInstanceSettings, alloyDbSettings.primaryInstanceSettings) &&
        Objects.equals(this.vpcNetwork, alloyDbSettings.vpcNetwork);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseVersion, encryptionConfig, initialUser, labels, primaryInstanceSettings, vpcNetwork);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlloyDbSettings {\n");
    sb.append("    databaseVersion: ").append(toIndentedString(databaseVersion)).append("\n");
    sb.append("    encryptionConfig: ").append(toIndentedString(encryptionConfig)).append("\n");
    sb.append("    initialUser: ").append(toIndentedString(initialUser)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    primaryInstanceSettings: ").append(toIndentedString(primaryInstanceSettings)).append("\n");
    sb.append("    vpcNetwork: ").append(toIndentedString(vpcNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("databaseVersion");
    openapiFields.add("encryptionConfig");
    openapiFields.add("initialUser");
    openapiFields.add("labels");
    openapiFields.add("primaryInstanceSettings");
    openapiFields.add("vpcNetwork");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlloyDbSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlloyDbSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlloyDbSettings is not found in the empty JSON string", AlloyDbSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlloyDbSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlloyDbSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("databaseVersion") != null && !jsonObj.get("databaseVersion").isJsonNull()) && !jsonObj.get("databaseVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseVersion").toString()));
      }
      // validate the optional field `databaseVersion`
      if (jsonObj.get("databaseVersion") != null && !jsonObj.get("databaseVersion").isJsonNull()) {
        DatabaseVersionEnum.validateJsonElement(jsonObj.get("databaseVersion"));
      }
      // validate the optional field `encryptionConfig`
      if (jsonObj.get("encryptionConfig") != null && !jsonObj.get("encryptionConfig").isJsonNull()) {
        EncryptionConfig.validateJsonElement(jsonObj.get("encryptionConfig"));
      }
      // validate the optional field `initialUser`
      if (jsonObj.get("initialUser") != null && !jsonObj.get("initialUser").isJsonNull()) {
        UserPassword.validateJsonElement(jsonObj.get("initialUser"));
      }
      // validate the optional field `primaryInstanceSettings`
      if (jsonObj.get("primaryInstanceSettings") != null && !jsonObj.get("primaryInstanceSettings").isJsonNull()) {
        PrimaryInstanceSettings.validateJsonElement(jsonObj.get("primaryInstanceSettings"));
      }
      if ((jsonObj.get("vpcNetwork") != null && !jsonObj.get("vpcNetwork").isJsonNull()) && !jsonObj.get("vpcNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpcNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpcNetwork").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlloyDbSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlloyDbSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlloyDbSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlloyDbSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AlloyDbSettings>() {
           @Override
           public void write(JsonWriter out, AlloyDbSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlloyDbSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlloyDbSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlloyDbSettings
   * @throws IOException if the JSON string is invalid with respect to AlloyDbSettings
   */
  public static AlloyDbSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlloyDbSettings.class);
  }

  /**
   * Convert an instance of AlloyDbSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

