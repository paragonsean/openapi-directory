/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ConversionWorkspaceInfo;
import org.openapitools.client.model.DatabaseType;
import org.openapitools.client.model.DumpFlags;
import org.openapitools.client.model.PerformanceConfig;
import org.openapitools.client.model.ReverseSshConnectivity;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.VpcPeeringConnectivity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Database Migration Service migration job object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MigrationJob {
  public static final String SERIALIZED_NAME_CMEK_KEY_NAME = "cmekKeyName";
  @SerializedName(SERIALIZED_NAME_CMEK_KEY_NAME)
  private String cmekKeyName;

  public static final String SERIALIZED_NAME_CONVERSION_WORKSPACE = "conversionWorkspace";
  @SerializedName(SERIALIZED_NAME_CONVERSION_WORKSPACE)
  private ConversionWorkspaceInfo conversionWorkspace;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_DESTINATION_DATABASE = "destinationDatabase";
  @SerializedName(SERIALIZED_NAME_DESTINATION_DATABASE)
  private DatabaseType destinationDatabase;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DUMP_FLAGS = "dumpFlags";
  @SerializedName(SERIALIZED_NAME_DUMP_FLAGS)
  private DumpFlags dumpFlags;

  public static final String SERIALIZED_NAME_DUMP_PATH = "dumpPath";
  @SerializedName(SERIALIZED_NAME_DUMP_PATH)
  private String dumpPath;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Status error;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERFORMANCE_CONFIG = "performanceConfig";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_CONFIG)
  private PerformanceConfig performanceConfig;

  /**
   * Output only. The current migration job phase.
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    PHASE_UNSPECIFIED("PHASE_UNSPECIFIED"),
    
    FULL_DUMP("FULL_DUMP"),
    
    CDC("CDC"),
    
    PROMOTE_IN_PROGRESS("PROMOTE_IN_PROGRESS"),
    
    WAITING_FOR_SOURCE_WRITES_TO_STOP("WAITING_FOR_SOURCE_WRITES_TO_STOP"),
    
    PREPARING_THE_DUMP("PREPARING_THE_DUMP");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String value) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhaseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhaseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private PhaseEnum phase;

  public static final String SERIALIZED_NAME_REVERSE_SSH_CONNECTIVITY = "reverseSshConnectivity";
  @SerializedName(SERIALIZED_NAME_REVERSE_SSH_CONNECTIVITY)
  private ReverseSshConnectivity reverseSshConnectivity;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_DATABASE = "sourceDatabase";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATABASE)
  private DatabaseType sourceDatabase;

  /**
   * The current migration job state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    MAINTENANCE("MAINTENANCE"),
    
    DRAFT("DRAFT"),
    
    CREATING("CREATING"),
    
    NOT_STARTED("NOT_STARTED"),
    
    RUNNING("RUNNING"),
    
    FAILED("FAILED"),
    
    COMPLETED("COMPLETED"),
    
    DELETING("DELETING"),
    
    STOPPING("STOPPING"),
    
    STOPPED("STOPPED"),
    
    DELETED("DELETED"),
    
    UPDATING("UPDATING"),
    
    STARTING("STARTING"),
    
    RESTARTING("RESTARTING"),
    
    RESUMING("RESUMING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATIC_IP_CONNECTIVITY = "staticIpConnectivity";
  @SerializedName(SERIALIZED_NAME_STATIC_IP_CONNECTIVITY)
  private Object staticIpConnectivity;

  /**
   * Required. The migration job type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    ONE_TIME("ONE_TIME"),
    
    CONTINUOUS("CONTINUOUS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VPC_PEERING_CONNECTIVITY = "vpcPeeringConnectivity";
  @SerializedName(SERIALIZED_NAME_VPC_PEERING_CONNECTIVITY)
  private VpcPeeringConnectivity vpcPeeringConnectivity;

  public MigrationJob() {
  }

  public MigrationJob(
     String createTime, 
     String duration, 
     String endTime, 
     PhaseEnum phase, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.duration = duration;
    this.endTime = endTime;
    this.phase = phase;
    this.updateTime = updateTime;
  }

  public MigrationJob cmekKeyName(String cmekKeyName) {
    this.cmekKeyName = cmekKeyName;
    return this;
  }

  /**
   * The CMEK (customer-managed encryption key) fully qualified key name used for the migration job. This field supports all migration jobs types except for: * Mysql to Mysql (use the cmek field in the cloudsql connection profile instead). * PostrgeSQL to PostgreSQL (use the cmek field in the cloudsql connection profile instead). * PostgreSQL to AlloyDB (use the kms_key_name field in the alloydb connection profile instead). Each Cloud CMEK key has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
   * @return cmekKeyName
   */
  @javax.annotation.Nullable
  public String getCmekKeyName() {
    return cmekKeyName;
  }

  public void setCmekKeyName(String cmekKeyName) {
    this.cmekKeyName = cmekKeyName;
  }


  public MigrationJob conversionWorkspace(ConversionWorkspaceInfo conversionWorkspace) {
    this.conversionWorkspace = conversionWorkspace;
    return this;
  }

  /**
   * Get conversionWorkspace
   * @return conversionWorkspace
   */
  @javax.annotation.Nullable
  public ConversionWorkspaceInfo getConversionWorkspace() {
    return conversionWorkspace;
  }

  public void setConversionWorkspace(ConversionWorkspaceInfo conversionWorkspace) {
    this.conversionWorkspace = conversionWorkspace;
  }


  /**
   * Output only. The timestamp when the migration job resource was created. A timestamp in RFC3339 UTC \&quot;Zulu\&quot; format, accurate to nanoseconds. Example: \&quot;2014-10-02T15:01:23.045123456Z\&quot;.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public MigrationJob destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Required. The resource name (URI) of the destination connection profile.
   * @return destination
   */
  @javax.annotation.Nullable
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }


  public MigrationJob destinationDatabase(DatabaseType destinationDatabase) {
    this.destinationDatabase = destinationDatabase;
    return this;
  }

  /**
   * Get destinationDatabase
   * @return destinationDatabase
   */
  @javax.annotation.Nullable
  public DatabaseType getDestinationDatabase() {
    return destinationDatabase;
  }

  public void setDestinationDatabase(DatabaseType destinationDatabase) {
    this.destinationDatabase = destinationDatabase;
  }


  public MigrationJob displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The migration job display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public MigrationJob dumpFlags(DumpFlags dumpFlags) {
    this.dumpFlags = dumpFlags;
    return this;
  }

  /**
   * Get dumpFlags
   * @return dumpFlags
   */
  @javax.annotation.Nullable
  public DumpFlags getDumpFlags() {
    return dumpFlags;
  }

  public void setDumpFlags(DumpFlags dumpFlags) {
    this.dumpFlags = dumpFlags;
  }


  public MigrationJob dumpPath(String dumpPath) {
    this.dumpPath = dumpPath;
    return this;
  }

  /**
   * The path to the dump file in Google Cloud Storage, in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]). This field and the \&quot;dump_flags\&quot; field are mutually exclusive.
   * @return dumpPath
   */
  @javax.annotation.Nullable
  public String getDumpPath() {
    return dumpPath;
  }

  public void setDumpPath(String dumpPath) {
    this.dumpPath = dumpPath;
  }


  /**
   * Output only. The duration of the migration job (in seconds). A duration in seconds with up to nine fractional digits, terminated by &#39;s&#39;. Example: \&quot;3.5s\&quot;.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }



  /**
   * Output only. If the migration job is completed, the time when it was completed.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }



  public MigrationJob error(Status error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Status getError() {
    return error;
  }

  public void setError(Status error) {
    this.error = error;
  }


  public MigrationJob filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * This field can be used to select the entities to migrate as part of the migration job. It uses AIP-160 notation to select a subset of the entities configured on the associated conversion-workspace. This field should not be set on migration-jobs that are not associated with a conversion workspace.
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public MigrationJob labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public MigrationJob putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \&quot;key\&quot;: \&quot;value\&quot; pairs. Example: &#x60;{ \&quot;name\&quot;: \&quot;wrench\&quot;, \&quot;mass\&quot;: \&quot;1.3kg\&quot;, \&quot;count\&quot;: \&quot;3\&quot; }&#x60;.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public MigrationJob name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name (URI) of this migration job resource, in the form of: projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MigrationJob performanceConfig(PerformanceConfig performanceConfig) {
    this.performanceConfig = performanceConfig;
    return this;
  }

  /**
   * Get performanceConfig
   * @return performanceConfig
   */
  @javax.annotation.Nullable
  public PerformanceConfig getPerformanceConfig() {
    return performanceConfig;
  }

  public void setPerformanceConfig(PerformanceConfig performanceConfig) {
    this.performanceConfig = performanceConfig;
  }


  /**
   * Output only. The current migration job phase.
   * @return phase
   */
  @javax.annotation.Nullable
  public PhaseEnum getPhase() {
    return phase;
  }



  public MigrationJob reverseSshConnectivity(ReverseSshConnectivity reverseSshConnectivity) {
    this.reverseSshConnectivity = reverseSshConnectivity;
    return this;
  }

  /**
   * Get reverseSshConnectivity
   * @return reverseSshConnectivity
   */
  @javax.annotation.Nullable
  public ReverseSshConnectivity getReverseSshConnectivity() {
    return reverseSshConnectivity;
  }

  public void setReverseSshConnectivity(ReverseSshConnectivity reverseSshConnectivity) {
    this.reverseSshConnectivity = reverseSshConnectivity;
  }


  public MigrationJob source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Required. The resource name (URI) of the source connection profile.
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public MigrationJob sourceDatabase(DatabaseType sourceDatabase) {
    this.sourceDatabase = sourceDatabase;
    return this;
  }

  /**
   * Get sourceDatabase
   * @return sourceDatabase
   */
  @javax.annotation.Nullable
  public DatabaseType getSourceDatabase() {
    return sourceDatabase;
  }

  public void setSourceDatabase(DatabaseType sourceDatabase) {
    this.sourceDatabase = sourceDatabase;
  }


  public MigrationJob state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The current migration job state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public MigrationJob staticIpConnectivity(Object staticIpConnectivity) {
    this.staticIpConnectivity = staticIpConnectivity;
    return this;
  }

  /**
   * The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
   * @return staticIpConnectivity
   */
  @javax.annotation.Nullable
  public Object getStaticIpConnectivity() {
    return staticIpConnectivity;
  }

  public void setStaticIpConnectivity(Object staticIpConnectivity) {
    this.staticIpConnectivity = staticIpConnectivity;
  }


  public MigrationJob type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Required. The migration job type.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. The timestamp when the migration job resource was last updated. A timestamp in RFC3339 UTC \&quot;Zulu\&quot; format, accurate to nanoseconds. Example: \&quot;2014-10-02T15:01:23.045123456Z\&quot;.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public MigrationJob vpcPeeringConnectivity(VpcPeeringConnectivity vpcPeeringConnectivity) {
    this.vpcPeeringConnectivity = vpcPeeringConnectivity;
    return this;
  }

  /**
   * Get vpcPeeringConnectivity
   * @return vpcPeeringConnectivity
   */
  @javax.annotation.Nullable
  public VpcPeeringConnectivity getVpcPeeringConnectivity() {
    return vpcPeeringConnectivity;
  }

  public void setVpcPeeringConnectivity(VpcPeeringConnectivity vpcPeeringConnectivity) {
    this.vpcPeeringConnectivity = vpcPeeringConnectivity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrationJob migrationJob = (MigrationJob) o;
    return Objects.equals(this.cmekKeyName, migrationJob.cmekKeyName) &&
        Objects.equals(this.conversionWorkspace, migrationJob.conversionWorkspace) &&
        Objects.equals(this.createTime, migrationJob.createTime) &&
        Objects.equals(this.destination, migrationJob.destination) &&
        Objects.equals(this.destinationDatabase, migrationJob.destinationDatabase) &&
        Objects.equals(this.displayName, migrationJob.displayName) &&
        Objects.equals(this.dumpFlags, migrationJob.dumpFlags) &&
        Objects.equals(this.dumpPath, migrationJob.dumpPath) &&
        Objects.equals(this.duration, migrationJob.duration) &&
        Objects.equals(this.endTime, migrationJob.endTime) &&
        Objects.equals(this.error, migrationJob.error) &&
        Objects.equals(this.filter, migrationJob.filter) &&
        Objects.equals(this.labels, migrationJob.labels) &&
        Objects.equals(this.name, migrationJob.name) &&
        Objects.equals(this.performanceConfig, migrationJob.performanceConfig) &&
        Objects.equals(this.phase, migrationJob.phase) &&
        Objects.equals(this.reverseSshConnectivity, migrationJob.reverseSshConnectivity) &&
        Objects.equals(this.source, migrationJob.source) &&
        Objects.equals(this.sourceDatabase, migrationJob.sourceDatabase) &&
        Objects.equals(this.state, migrationJob.state) &&
        Objects.equals(this.staticIpConnectivity, migrationJob.staticIpConnectivity) &&
        Objects.equals(this.type, migrationJob.type) &&
        Objects.equals(this.updateTime, migrationJob.updateTime) &&
        Objects.equals(this.vpcPeeringConnectivity, migrationJob.vpcPeeringConnectivity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cmekKeyName, conversionWorkspace, createTime, destination, destinationDatabase, displayName, dumpFlags, dumpPath, duration, endTime, error, filter, labels, name, performanceConfig, phase, reverseSshConnectivity, source, sourceDatabase, state, staticIpConnectivity, type, updateTime, vpcPeeringConnectivity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrationJob {\n");
    sb.append("    cmekKeyName: ").append(toIndentedString(cmekKeyName)).append("\n");
    sb.append("    conversionWorkspace: ").append(toIndentedString(conversionWorkspace)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    destinationDatabase: ").append(toIndentedString(destinationDatabase)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dumpFlags: ").append(toIndentedString(dumpFlags)).append("\n");
    sb.append("    dumpPath: ").append(toIndentedString(dumpPath)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    performanceConfig: ").append(toIndentedString(performanceConfig)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    reverseSshConnectivity: ").append(toIndentedString(reverseSshConnectivity)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceDatabase: ").append(toIndentedString(sourceDatabase)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    staticIpConnectivity: ").append(toIndentedString(staticIpConnectivity)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    vpcPeeringConnectivity: ").append(toIndentedString(vpcPeeringConnectivity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cmekKeyName");
    openapiFields.add("conversionWorkspace");
    openapiFields.add("createTime");
    openapiFields.add("destination");
    openapiFields.add("destinationDatabase");
    openapiFields.add("displayName");
    openapiFields.add("dumpFlags");
    openapiFields.add("dumpPath");
    openapiFields.add("duration");
    openapiFields.add("endTime");
    openapiFields.add("error");
    openapiFields.add("filter");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("performanceConfig");
    openapiFields.add("phase");
    openapiFields.add("reverseSshConnectivity");
    openapiFields.add("source");
    openapiFields.add("sourceDatabase");
    openapiFields.add("state");
    openapiFields.add("staticIpConnectivity");
    openapiFields.add("type");
    openapiFields.add("updateTime");
    openapiFields.add("vpcPeeringConnectivity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MigrationJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MigrationJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrationJob is not found in the empty JSON string", MigrationJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MigrationJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrationJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cmekKeyName") != null && !jsonObj.get("cmekKeyName").isJsonNull()) && !jsonObj.get("cmekKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmekKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cmekKeyName").toString()));
      }
      // validate the optional field `conversionWorkspace`
      if (jsonObj.get("conversionWorkspace") != null && !jsonObj.get("conversionWorkspace").isJsonNull()) {
        ConversionWorkspaceInfo.validateJsonElement(jsonObj.get("conversionWorkspace"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) && !jsonObj.get("destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination").toString()));
      }
      // validate the optional field `destinationDatabase`
      if (jsonObj.get("destinationDatabase") != null && !jsonObj.get("destinationDatabase").isJsonNull()) {
        DatabaseType.validateJsonElement(jsonObj.get("destinationDatabase"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `dumpFlags`
      if (jsonObj.get("dumpFlags") != null && !jsonObj.get("dumpFlags").isJsonNull()) {
        DumpFlags.validateJsonElement(jsonObj.get("dumpFlags"));
      }
      if ((jsonObj.get("dumpPath") != null && !jsonObj.get("dumpPath").isJsonNull()) && !jsonObj.get("dumpPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dumpPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dumpPath").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `performanceConfig`
      if (jsonObj.get("performanceConfig") != null && !jsonObj.get("performanceConfig").isJsonNull()) {
        PerformanceConfig.validateJsonElement(jsonObj.get("performanceConfig"));
      }
      if ((jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) && !jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        PhaseEnum.validateJsonElement(jsonObj.get("phase"));
      }
      // validate the optional field `reverseSshConnectivity`
      if (jsonObj.get("reverseSshConnectivity") != null && !jsonObj.get("reverseSshConnectivity").isJsonNull()) {
        ReverseSshConnectivity.validateJsonElement(jsonObj.get("reverseSshConnectivity"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `sourceDatabase`
      if (jsonObj.get("sourceDatabase") != null && !jsonObj.get("sourceDatabase").isJsonNull()) {
        DatabaseType.validateJsonElement(jsonObj.get("sourceDatabase"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `vpcPeeringConnectivity`
      if (jsonObj.get("vpcPeeringConnectivity") != null && !jsonObj.get("vpcPeeringConnectivity").isJsonNull()) {
        VpcPeeringConnectivity.validateJsonElement(jsonObj.get("vpcPeeringConnectivity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrationJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrationJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrationJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrationJob.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrationJob>() {
           @Override
           public void write(JsonWriter out, MigrationJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrationJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MigrationJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MigrationJob
   * @throws IOException if the JSON string is invalid with respect to MigrationJob
   */
  public static MigrationJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrationJob.class);
  }

  /**
   * Convert an instance of MigrationJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

