/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CloudSqlSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudSqlConnectionProfile {
  public static final String SERIALIZED_NAME_ADDITIONAL_PUBLIC_IP = "additionalPublicIp";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PUBLIC_IP)
  private String additionalPublicIp;

  public static final String SERIALIZED_NAME_CLOUD_SQL_ID = "cloudSqlId";
  @SerializedName(SERIALIZED_NAME_CLOUD_SQL_ID)
  private String cloudSqlId;

  public static final String SERIALIZED_NAME_PRIVATE_IP = "privateIp";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IP)
  private String privateIp;

  public static final String SERIALIZED_NAME_PUBLIC_IP = "publicIp";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP)
  private String publicIp;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private CloudSqlSettings settings;

  public CloudSqlConnectionProfile() {
  }

  public CloudSqlConnectionProfile(
     String additionalPublicIp, 
     String cloudSqlId, 
     String privateIp, 
     String publicIp
  ) {
    this();
    this.additionalPublicIp = additionalPublicIp;
    this.cloudSqlId = cloudSqlId;
    this.privateIp = privateIp;
    this.publicIp = publicIp;
  }

  /**
   * Output only. The Cloud SQL database instance&#39;s additional (outgoing) public IP. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
   * @return additionalPublicIp
   */
  @javax.annotation.Nullable
  public String getAdditionalPublicIp() {
    return additionalPublicIp;
  }



  /**
   * Output only. The Cloud SQL instance ID that this connection profile is associated with.
   * @return cloudSqlId
   */
  @javax.annotation.Nullable
  public String getCloudSqlId() {
    return cloudSqlId;
  }



  /**
   * Output only. The Cloud SQL database instance&#39;s private IP.
   * @return privateIp
   */
  @javax.annotation.Nullable
  public String getPrivateIp() {
    return privateIp;
  }



  /**
   * Output only. The Cloud SQL database instance&#39;s public IP.
   * @return publicIp
   */
  @javax.annotation.Nullable
  public String getPublicIp() {
    return publicIp;
  }



  public CloudSqlConnectionProfile settings(CloudSqlSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public CloudSqlSettings getSettings() {
    return settings;
  }

  public void setSettings(CloudSqlSettings settings) {
    this.settings = settings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudSqlConnectionProfile cloudSqlConnectionProfile = (CloudSqlConnectionProfile) o;
    return Objects.equals(this.additionalPublicIp, cloudSqlConnectionProfile.additionalPublicIp) &&
        Objects.equals(this.cloudSqlId, cloudSqlConnectionProfile.cloudSqlId) &&
        Objects.equals(this.privateIp, cloudSqlConnectionProfile.privateIp) &&
        Objects.equals(this.publicIp, cloudSqlConnectionProfile.publicIp) &&
        Objects.equals(this.settings, cloudSqlConnectionProfile.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalPublicIp, cloudSqlId, privateIp, publicIp, settings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudSqlConnectionProfile {\n");
    sb.append("    additionalPublicIp: ").append(toIndentedString(additionalPublicIp)).append("\n");
    sb.append("    cloudSqlId: ").append(toIndentedString(cloudSqlId)).append("\n");
    sb.append("    privateIp: ").append(toIndentedString(privateIp)).append("\n");
    sb.append("    publicIp: ").append(toIndentedString(publicIp)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalPublicIp");
    openapiFields.add("cloudSqlId");
    openapiFields.add("privateIp");
    openapiFields.add("publicIp");
    openapiFields.add("settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudSqlConnectionProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudSqlConnectionProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudSqlConnectionProfile is not found in the empty JSON string", CloudSqlConnectionProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudSqlConnectionProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudSqlConnectionProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalPublicIp") != null && !jsonObj.get("additionalPublicIp").isJsonNull()) && !jsonObj.get("additionalPublicIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalPublicIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalPublicIp").toString()));
      }
      if ((jsonObj.get("cloudSqlId") != null && !jsonObj.get("cloudSqlId").isJsonNull()) && !jsonObj.get("cloudSqlId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudSqlId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudSqlId").toString()));
      }
      if ((jsonObj.get("privateIp") != null && !jsonObj.get("privateIp").isJsonNull()) && !jsonObj.get("privateIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateIp").toString()));
      }
      if ((jsonObj.get("publicIp") != null && !jsonObj.get("publicIp").isJsonNull()) && !jsonObj.get("publicIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIp").toString()));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        CloudSqlSettings.validateJsonElement(jsonObj.get("settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudSqlConnectionProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudSqlConnectionProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudSqlConnectionProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudSqlConnectionProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudSqlConnectionProfile>() {
           @Override
           public void write(JsonWriter out, CloudSqlConnectionProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudSqlConnectionProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudSqlConnectionProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudSqlConnectionProfile
   * @throws IOException if the JSON string is invalid with respect to CloudSqlConnectionProfile
   */
  public static CloudSqlConnectionProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudSqlConnectionProfile.class);
  }

  /**
   * Convert an instance of CloudSqlConnectionProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

