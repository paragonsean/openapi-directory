/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ForwardSshTunnelConnectivity;
import org.openapitools.client.model.PrivateConnectivity;
import org.openapitools.client.model.SslConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies connection parameters required specifically for Oracle databases.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OracleConnectionProfile {
  public static final String SERIALIZED_NAME_DATABASE_SERVICE = "databaseService";
  @SerializedName(SERIALIZED_NAME_DATABASE_SERVICE)
  private String databaseService;

  public static final String SERIALIZED_NAME_FORWARD_SSH_CONNECTIVITY = "forwardSshConnectivity";
  @SerializedName(SERIALIZED_NAME_FORWARD_SSH_CONNECTIVITY)
  private ForwardSshTunnelConnectivity forwardSshConnectivity;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PASSWORD_SET = "passwordSet";
  @SerializedName(SERIALIZED_NAME_PASSWORD_SET)
  private Boolean passwordSet;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PRIVATE_CONNECTIVITY = "privateConnectivity";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CONNECTIVITY)
  private PrivateConnectivity privateConnectivity;

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private SslConfig ssl;

  public static final String SERIALIZED_NAME_STATIC_SERVICE_IP_CONNECTIVITY = "staticServiceIpConnectivity";
  @SerializedName(SERIALIZED_NAME_STATIC_SERVICE_IP_CONNECTIVITY)
  private Object staticServiceIpConnectivity;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public OracleConnectionProfile() {
  }

  public OracleConnectionProfile(
     Boolean passwordSet
  ) {
    this();
    this.passwordSet = passwordSet;
  }

  public OracleConnectionProfile databaseService(String databaseService) {
    this.databaseService = databaseService;
    return this;
  }

  /**
   * Required. Database service for the Oracle connection.
   * @return databaseService
   */
  @javax.annotation.Nullable
  public String getDatabaseService() {
    return databaseService;
  }

  public void setDatabaseService(String databaseService) {
    this.databaseService = databaseService;
  }


  public OracleConnectionProfile forwardSshConnectivity(ForwardSshTunnelConnectivity forwardSshConnectivity) {
    this.forwardSshConnectivity = forwardSshConnectivity;
    return this;
  }

  /**
   * Get forwardSshConnectivity
   * @return forwardSshConnectivity
   */
  @javax.annotation.Nullable
  public ForwardSshTunnelConnectivity getForwardSshConnectivity() {
    return forwardSshConnectivity;
  }

  public void setForwardSshConnectivity(ForwardSshTunnelConnectivity forwardSshConnectivity) {
    this.forwardSshConnectivity = forwardSshConnectivity;
  }


  public OracleConnectionProfile host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Required. The IP or hostname of the source Oracle database.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public OracleConnectionProfile password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  /**
   * Output only. Indicates whether a new password is included in the request.
   * @return passwordSet
   */
  @javax.annotation.Nullable
  public Boolean getPasswordSet() {
    return passwordSet;
  }



  public OracleConnectionProfile port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Required. The network port of the source Oracle database.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public OracleConnectionProfile privateConnectivity(PrivateConnectivity privateConnectivity) {
    this.privateConnectivity = privateConnectivity;
    return this;
  }

  /**
   * Get privateConnectivity
   * @return privateConnectivity
   */
  @javax.annotation.Nullable
  public PrivateConnectivity getPrivateConnectivity() {
    return privateConnectivity;
  }

  public void setPrivateConnectivity(PrivateConnectivity privateConnectivity) {
    this.privateConnectivity = privateConnectivity;
  }


  public OracleConnectionProfile ssl(SslConfig ssl) {
    this.ssl = ssl;
    return this;
  }

  /**
   * Get ssl
   * @return ssl
   */
  @javax.annotation.Nullable
  public SslConfig getSsl() {
    return ssl;
  }

  public void setSsl(SslConfig ssl) {
    this.ssl = ssl;
  }


  public OracleConnectionProfile staticServiceIpConnectivity(Object staticServiceIpConnectivity) {
    this.staticServiceIpConnectivity = staticServiceIpConnectivity;
    return this;
  }

  /**
   * Static IP address connectivity configured on service project.
   * @return staticServiceIpConnectivity
   */
  @javax.annotation.Nullable
  public Object getStaticServiceIpConnectivity() {
    return staticServiceIpConnectivity;
  }

  public void setStaticServiceIpConnectivity(Object staticServiceIpConnectivity) {
    this.staticServiceIpConnectivity = staticServiceIpConnectivity;
  }


  public OracleConnectionProfile username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OracleConnectionProfile oracleConnectionProfile = (OracleConnectionProfile) o;
    return Objects.equals(this.databaseService, oracleConnectionProfile.databaseService) &&
        Objects.equals(this.forwardSshConnectivity, oracleConnectionProfile.forwardSshConnectivity) &&
        Objects.equals(this.host, oracleConnectionProfile.host) &&
        Objects.equals(this.password, oracleConnectionProfile.password) &&
        Objects.equals(this.passwordSet, oracleConnectionProfile.passwordSet) &&
        Objects.equals(this.port, oracleConnectionProfile.port) &&
        Objects.equals(this.privateConnectivity, oracleConnectionProfile.privateConnectivity) &&
        Objects.equals(this.ssl, oracleConnectionProfile.ssl) &&
        Objects.equals(this.staticServiceIpConnectivity, oracleConnectionProfile.staticServiceIpConnectivity) &&
        Objects.equals(this.username, oracleConnectionProfile.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseService, forwardSshConnectivity, host, password, passwordSet, port, privateConnectivity, ssl, staticServiceIpConnectivity, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OracleConnectionProfile {\n");
    sb.append("    databaseService: ").append(toIndentedString(databaseService)).append("\n");
    sb.append("    forwardSshConnectivity: ").append(toIndentedString(forwardSshConnectivity)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    passwordSet: ").append(toIndentedString(passwordSet)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    privateConnectivity: ").append(toIndentedString(privateConnectivity)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    staticServiceIpConnectivity: ").append(toIndentedString(staticServiceIpConnectivity)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("databaseService");
    openapiFields.add("forwardSshConnectivity");
    openapiFields.add("host");
    openapiFields.add("password");
    openapiFields.add("passwordSet");
    openapiFields.add("port");
    openapiFields.add("privateConnectivity");
    openapiFields.add("ssl");
    openapiFields.add("staticServiceIpConnectivity");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OracleConnectionProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OracleConnectionProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OracleConnectionProfile is not found in the empty JSON string", OracleConnectionProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OracleConnectionProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OracleConnectionProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("databaseService") != null && !jsonObj.get("databaseService").isJsonNull()) && !jsonObj.get("databaseService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseService").toString()));
      }
      // validate the optional field `forwardSshConnectivity`
      if (jsonObj.get("forwardSshConnectivity") != null && !jsonObj.get("forwardSshConnectivity").isJsonNull()) {
        ForwardSshTunnelConnectivity.validateJsonElement(jsonObj.get("forwardSshConnectivity"));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the optional field `privateConnectivity`
      if (jsonObj.get("privateConnectivity") != null && !jsonObj.get("privateConnectivity").isJsonNull()) {
        PrivateConnectivity.validateJsonElement(jsonObj.get("privateConnectivity"));
      }
      // validate the optional field `ssl`
      if (jsonObj.get("ssl") != null && !jsonObj.get("ssl").isJsonNull()) {
        SslConfig.validateJsonElement(jsonObj.get("ssl"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OracleConnectionProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OracleConnectionProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OracleConnectionProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OracleConnectionProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<OracleConnectionProfile>() {
           @Override
           public void write(JsonWriter out, OracleConnectionProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OracleConnectionProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OracleConnectionProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OracleConnectionProfile
   * @throws IOException if the JSON string is invalid with respect to OracleConnectionProfile
   */
  public static OracleConnectionProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OracleConnectionProfile.class);
  }

  /**
   * Convert an instance of OracleConnectionProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

