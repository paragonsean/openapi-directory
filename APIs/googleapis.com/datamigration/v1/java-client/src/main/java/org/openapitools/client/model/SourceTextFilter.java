/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filter for text-based data types like varchar.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceTextFilter {
  public static final String SERIALIZED_NAME_SOURCE_MAX_LENGTH_FILTER = "sourceMaxLengthFilter";
  @SerializedName(SERIALIZED_NAME_SOURCE_MAX_LENGTH_FILTER)
  private String sourceMaxLengthFilter;

  public static final String SERIALIZED_NAME_SOURCE_MIN_LENGTH_FILTER = "sourceMinLengthFilter";
  @SerializedName(SERIALIZED_NAME_SOURCE_MIN_LENGTH_FILTER)
  private String sourceMinLengthFilter;

  public SourceTextFilter() {
  }

  public SourceTextFilter sourceMaxLengthFilter(String sourceMaxLengthFilter) {
    this.sourceMaxLengthFilter = sourceMaxLengthFilter;
    return this;
  }

  /**
   * Optional. The filter will match columns with length smaller than or equal to this number.
   * @return sourceMaxLengthFilter
   */
  @javax.annotation.Nullable
  public String getSourceMaxLengthFilter() {
    return sourceMaxLengthFilter;
  }

  public void setSourceMaxLengthFilter(String sourceMaxLengthFilter) {
    this.sourceMaxLengthFilter = sourceMaxLengthFilter;
  }


  public SourceTextFilter sourceMinLengthFilter(String sourceMinLengthFilter) {
    this.sourceMinLengthFilter = sourceMinLengthFilter;
    return this;
  }

  /**
   * Optional. The filter will match columns with length greater than or equal to this number.
   * @return sourceMinLengthFilter
   */
  @javax.annotation.Nullable
  public String getSourceMinLengthFilter() {
    return sourceMinLengthFilter;
  }

  public void setSourceMinLengthFilter(String sourceMinLengthFilter) {
    this.sourceMinLengthFilter = sourceMinLengthFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceTextFilter sourceTextFilter = (SourceTextFilter) o;
    return Objects.equals(this.sourceMaxLengthFilter, sourceTextFilter.sourceMaxLengthFilter) &&
        Objects.equals(this.sourceMinLengthFilter, sourceTextFilter.sourceMinLengthFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceMaxLengthFilter, sourceMinLengthFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceTextFilter {\n");
    sb.append("    sourceMaxLengthFilter: ").append(toIndentedString(sourceMaxLengthFilter)).append("\n");
    sb.append("    sourceMinLengthFilter: ").append(toIndentedString(sourceMinLengthFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceMaxLengthFilter");
    openapiFields.add("sourceMinLengthFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceTextFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceTextFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceTextFilter is not found in the empty JSON string", SourceTextFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceTextFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceTextFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sourceMaxLengthFilter") != null && !jsonObj.get("sourceMaxLengthFilter").isJsonNull()) && !jsonObj.get("sourceMaxLengthFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceMaxLengthFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceMaxLengthFilter").toString()));
      }
      if ((jsonObj.get("sourceMinLengthFilter") != null && !jsonObj.get("sourceMinLengthFilter").isJsonNull()) && !jsonObj.get("sourceMinLengthFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceMinLengthFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceMinLengthFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceTextFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceTextFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceTextFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceTextFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceTextFilter>() {
           @Override
           public void write(JsonWriter out, SourceTextFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceTextFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceTextFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceTextFilter
   * @throws IOException if the JSON string is invalid with respect to SourceTextFilter
   */
  public static SourceTextFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceTextFilter.class);
  }

  /**
   * Convert an instance of SourceTextFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

