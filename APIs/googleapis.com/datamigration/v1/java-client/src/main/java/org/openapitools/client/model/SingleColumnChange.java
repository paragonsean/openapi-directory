/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column&#39;s configuration will be the same as the one in the source column..
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SingleColumnChange {
  public static final String SERIALIZED_NAME_ARRAY = "array";
  @SerializedName(SERIALIZED_NAME_ARRAY)
  private Boolean array;

  public static final String SERIALIZED_NAME_ARRAY_LENGTH = "arrayLength";
  @SerializedName(SERIALIZED_NAME_ARRAY_LENGTH)
  private Integer arrayLength;

  public static final String SERIALIZED_NAME_AUTO_GENERATED = "autoGenerated";
  @SerializedName(SERIALIZED_NAME_AUTO_GENERATED)
  private Boolean autoGenerated;

  public static final String SERIALIZED_NAME_CHARSET = "charset";
  @SerializedName(SERIALIZED_NAME_CHARSET)
  private String charset;

  public static final String SERIALIZED_NAME_COLLATION = "collation";
  @SerializedName(SERIALIZED_NAME_COLLATION)
  private String collation;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CUSTOM_FEATURES = "customFeatures";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FEATURES)
  private Map<String, Object> customFeatures = new HashMap<>();

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_FRACTIONAL_SECONDS_PRECISION = "fractionalSecondsPrecision";
  @SerializedName(SERIALIZED_NAME_FRACTIONAL_SECONDS_PRECISION)
  private Integer fractionalSecondsPrecision;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private String length;

  public static final String SERIALIZED_NAME_NULLABLE = "nullable";
  @SerializedName(SERIALIZED_NAME_NULLABLE)
  private Boolean nullable;

  public static final String SERIALIZED_NAME_PRECISION = "precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  private Integer precision;

  public static final String SERIALIZED_NAME_SCALE = "scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private Integer scale;

  public static final String SERIALIZED_NAME_SET_VALUES = "setValues";
  @SerializedName(SERIALIZED_NAME_SET_VALUES)
  private List<String> setValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_UDT = "udt";
  @SerializedName(SERIALIZED_NAME_UDT)
  private Boolean udt;

  public SingleColumnChange() {
  }

  public SingleColumnChange array(Boolean array) {
    this.array = array;
    return this;
  }

  /**
   * Optional. Is the column of array type.
   * @return array
   */
  @javax.annotation.Nullable
  public Boolean getArray() {
    return array;
  }

  public void setArray(Boolean array) {
    this.array = array;
  }


  public SingleColumnChange arrayLength(Integer arrayLength) {
    this.arrayLength = arrayLength;
    return this;
  }

  /**
   * Optional. The length of the array, only relevant if the column type is an array.
   * @return arrayLength
   */
  @javax.annotation.Nullable
  public Integer getArrayLength() {
    return arrayLength;
  }

  public void setArrayLength(Integer arrayLength) {
    this.arrayLength = arrayLength;
  }


  public SingleColumnChange autoGenerated(Boolean autoGenerated) {
    this.autoGenerated = autoGenerated;
    return this;
  }

  /**
   * Optional. Is the column auto-generated/identity.
   * @return autoGenerated
   */
  @javax.annotation.Nullable
  public Boolean getAutoGenerated() {
    return autoGenerated;
  }

  public void setAutoGenerated(Boolean autoGenerated) {
    this.autoGenerated = autoGenerated;
  }


  public SingleColumnChange charset(String charset) {
    this.charset = charset;
    return this;
  }

  /**
   * Optional. Charset override - instead of table level charset.
   * @return charset
   */
  @javax.annotation.Nullable
  public String getCharset() {
    return charset;
  }

  public void setCharset(String charset) {
    this.charset = charset;
  }


  public SingleColumnChange collation(String collation) {
    this.collation = collation;
    return this;
  }

  /**
   * Optional. Collation override - instead of table level collation.
   * @return collation
   */
  @javax.annotation.Nullable
  public String getCollation() {
    return collation;
  }

  public void setCollation(String collation) {
    this.collation = collation;
  }


  public SingleColumnChange comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Optional. Comment associated with the column.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public SingleColumnChange customFeatures(Map<String, Object> customFeatures) {
    this.customFeatures = customFeatures;
    return this;
  }

  public SingleColumnChange putCustomFeaturesItem(String key, Object customFeaturesItem) {
    if (this.customFeatures == null) {
      this.customFeatures = new HashMap<>();
    }
    this.customFeatures.put(key, customFeaturesItem);
    return this;
  }

  /**
   * Optional. Custom engine specific features.
   * @return customFeatures
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCustomFeatures() {
    return customFeatures;
  }

  public void setCustomFeatures(Map<String, Object> customFeatures) {
    this.customFeatures = customFeatures;
  }


  public SingleColumnChange dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Optional. Column data type name.
   * @return dataType
   */
  @javax.annotation.Nullable
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }


  public SingleColumnChange fractionalSecondsPrecision(Integer fractionalSecondsPrecision) {
    this.fractionalSecondsPrecision = fractionalSecondsPrecision;
    return this;
  }

  /**
   * Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
   * @return fractionalSecondsPrecision
   */
  @javax.annotation.Nullable
  public Integer getFractionalSecondsPrecision() {
    return fractionalSecondsPrecision;
  }

  public void setFractionalSecondsPrecision(Integer fractionalSecondsPrecision) {
    this.fractionalSecondsPrecision = fractionalSecondsPrecision;
  }


  public SingleColumnChange length(String length) {
    this.length = length;
    return this;
  }

  /**
   * Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
   * @return length
   */
  @javax.annotation.Nullable
  public String getLength() {
    return length;
  }

  public void setLength(String length) {
    this.length = length;
  }


  public SingleColumnChange nullable(Boolean nullable) {
    this.nullable = nullable;
    return this;
  }

  /**
   * Optional. Is the column nullable.
   * @return nullable
   */
  @javax.annotation.Nullable
  public Boolean getNullable() {
    return nullable;
  }

  public void setNullable(Boolean nullable) {
    this.nullable = nullable;
  }


  public SingleColumnChange precision(Integer precision) {
    this.precision = precision;
    return this;
  }

  /**
   * Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
   * @return precision
   */
  @javax.annotation.Nullable
  public Integer getPrecision() {
    return precision;
  }

  public void setPrecision(Integer precision) {
    this.precision = precision;
  }


  public SingleColumnChange scale(Integer scale) {
    this.scale = scale;
    return this;
  }

  /**
   * Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
   * @return scale
   */
  @javax.annotation.Nullable
  public Integer getScale() {
    return scale;
  }

  public void setScale(Integer scale) {
    this.scale = scale;
  }


  public SingleColumnChange setValues(List<String> setValues) {
    this.setValues = setValues;
    return this;
  }

  public SingleColumnChange addSetValuesItem(String setValuesItem) {
    if (this.setValues == null) {
      this.setValues = new ArrayList<>();
    }
    this.setValues.add(setValuesItem);
    return this;
  }

  /**
   * Optional. Specifies the list of values allowed in the column.
   * @return setValues
   */
  @javax.annotation.Nullable
  public List<String> getSetValues() {
    return setValues;
  }

  public void setSetValues(List<String> setValues) {
    this.setValues = setValues;
  }


  public SingleColumnChange udt(Boolean udt) {
    this.udt = udt;
    return this;
  }

  /**
   * Optional. Is the column a UDT (User-defined Type).
   * @return udt
   */
  @javax.annotation.Nullable
  public Boolean getUdt() {
    return udt;
  }

  public void setUdt(Boolean udt) {
    this.udt = udt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleColumnChange singleColumnChange = (SingleColumnChange) o;
    return Objects.equals(this.array, singleColumnChange.array) &&
        Objects.equals(this.arrayLength, singleColumnChange.arrayLength) &&
        Objects.equals(this.autoGenerated, singleColumnChange.autoGenerated) &&
        Objects.equals(this.charset, singleColumnChange.charset) &&
        Objects.equals(this.collation, singleColumnChange.collation) &&
        Objects.equals(this.comment, singleColumnChange.comment) &&
        Objects.equals(this.customFeatures, singleColumnChange.customFeatures) &&
        Objects.equals(this.dataType, singleColumnChange.dataType) &&
        Objects.equals(this.fractionalSecondsPrecision, singleColumnChange.fractionalSecondsPrecision) &&
        Objects.equals(this.length, singleColumnChange.length) &&
        Objects.equals(this.nullable, singleColumnChange.nullable) &&
        Objects.equals(this.precision, singleColumnChange.precision) &&
        Objects.equals(this.scale, singleColumnChange.scale) &&
        Objects.equals(this.setValues, singleColumnChange.setValues) &&
        Objects.equals(this.udt, singleColumnChange.udt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(array, arrayLength, autoGenerated, charset, collation, comment, customFeatures, dataType, fractionalSecondsPrecision, length, nullable, precision, scale, setValues, udt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleColumnChange {\n");
    sb.append("    array: ").append(toIndentedString(array)).append("\n");
    sb.append("    arrayLength: ").append(toIndentedString(arrayLength)).append("\n");
    sb.append("    autoGenerated: ").append(toIndentedString(autoGenerated)).append("\n");
    sb.append("    charset: ").append(toIndentedString(charset)).append("\n");
    sb.append("    collation: ").append(toIndentedString(collation)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    customFeatures: ").append(toIndentedString(customFeatures)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    fractionalSecondsPrecision: ").append(toIndentedString(fractionalSecondsPrecision)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    nullable: ").append(toIndentedString(nullable)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    setValues: ").append(toIndentedString(setValues)).append("\n");
    sb.append("    udt: ").append(toIndentedString(udt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("array");
    openapiFields.add("arrayLength");
    openapiFields.add("autoGenerated");
    openapiFields.add("charset");
    openapiFields.add("collation");
    openapiFields.add("comment");
    openapiFields.add("customFeatures");
    openapiFields.add("dataType");
    openapiFields.add("fractionalSecondsPrecision");
    openapiFields.add("length");
    openapiFields.add("nullable");
    openapiFields.add("precision");
    openapiFields.add("scale");
    openapiFields.add("setValues");
    openapiFields.add("udt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SingleColumnChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleColumnChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleColumnChange is not found in the empty JSON string", SingleColumnChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleColumnChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleColumnChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("charset") != null && !jsonObj.get("charset").isJsonNull()) && !jsonObj.get("charset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charset").toString()));
      }
      if ((jsonObj.get("collation") != null && !jsonObj.get("collation").isJsonNull()) && !jsonObj.get("collation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collation").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) && !jsonObj.get("dataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataType").toString()));
      }
      if ((jsonObj.get("length") != null && !jsonObj.get("length").isJsonNull()) && !jsonObj.get("length").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `length` to be a primitive type in the JSON string but got `%s`", jsonObj.get("length").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("setValues") != null && !jsonObj.get("setValues").isJsonNull() && !jsonObj.get("setValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `setValues` to be an array in the JSON string but got `%s`", jsonObj.get("setValues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleColumnChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleColumnChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleColumnChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleColumnChange.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleColumnChange>() {
           @Override
           public void write(JsonWriter out, SingleColumnChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleColumnChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SingleColumnChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SingleColumnChange
   * @throws IOException if the JSON string is invalid with respect to SingleColumnChange
   */
  public static SingleColumnChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleColumnChange.class);
  }

  /**
   * Convert an instance of SingleColumnChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

