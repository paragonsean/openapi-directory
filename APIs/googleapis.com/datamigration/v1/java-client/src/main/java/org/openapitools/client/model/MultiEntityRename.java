/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MultiEntityRename {
  public static final String SERIALIZED_NAME_NEW_NAME_PATTERN = "newNamePattern";
  @SerializedName(SERIALIZED_NAME_NEW_NAME_PATTERN)
  private String newNamePattern;

  /**
   * Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
   */
  @JsonAdapter(SourceNameTransformationEnum.Adapter.class)
  public enum SourceNameTransformationEnum {
    UNSPECIFIED("ENTITY_NAME_TRANSFORMATION_UNSPECIFIED"),
    
    NO_TRANSFORMATION("ENTITY_NAME_TRANSFORMATION_NO_TRANSFORMATION"),
    
    LOWER_CASE("ENTITY_NAME_TRANSFORMATION_LOWER_CASE"),
    
    UPPER_CASE("ENTITY_NAME_TRANSFORMATION_UPPER_CASE"),
    
    CAPITALIZED_CASE("ENTITY_NAME_TRANSFORMATION_CAPITALIZED_CASE");

    private String value;

    SourceNameTransformationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceNameTransformationEnum fromValue(String value) {
      for (SourceNameTransformationEnum b : SourceNameTransformationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceNameTransformationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceNameTransformationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceNameTransformationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceNameTransformationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceNameTransformationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_NAME_TRANSFORMATION = "sourceNameTransformation";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME_TRANSFORMATION)
  private SourceNameTransformationEnum sourceNameTransformation;

  public MultiEntityRename() {
  }

  public MultiEntityRename newNamePattern(String newNamePattern) {
    this.newNamePattern = newNamePattern;
    return this;
  }

  /**
   * Optional. The pattern used to generate the new entity&#39;s name. This pattern must include the characters &#39;{name}&#39;, which will be replaced with the name of the original entity. For example, the pattern &#39;t_{name}&#39; for an entity name jobs would be converted to &#39;t_jobs&#39;. If unspecified, the default value for this field is &#39;{name}&#39;
   * @return newNamePattern
   */
  @javax.annotation.Nullable
  public String getNewNamePattern() {
    return newNamePattern;
  }

  public void setNewNamePattern(String newNamePattern) {
    this.newNamePattern = newNamePattern;
  }


  public MultiEntityRename sourceNameTransformation(SourceNameTransformationEnum sourceNameTransformation) {
    this.sourceNameTransformation = sourceNameTransformation;
    return this;
  }

  /**
   * Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
   * @return sourceNameTransformation
   */
  @javax.annotation.Nullable
  public SourceNameTransformationEnum getSourceNameTransformation() {
    return sourceNameTransformation;
  }

  public void setSourceNameTransformation(SourceNameTransformationEnum sourceNameTransformation) {
    this.sourceNameTransformation = sourceNameTransformation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiEntityRename multiEntityRename = (MultiEntityRename) o;
    return Objects.equals(this.newNamePattern, multiEntityRename.newNamePattern) &&
        Objects.equals(this.sourceNameTransformation, multiEntityRename.sourceNameTransformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newNamePattern, sourceNameTransformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiEntityRename {\n");
    sb.append("    newNamePattern: ").append(toIndentedString(newNamePattern)).append("\n");
    sb.append("    sourceNameTransformation: ").append(toIndentedString(sourceNameTransformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("newNamePattern");
    openapiFields.add("sourceNameTransformation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultiEntityRename
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiEntityRename.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiEntityRename is not found in the empty JSON string", MultiEntityRename.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiEntityRename.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiEntityRename` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("newNamePattern") != null && !jsonObj.get("newNamePattern").isJsonNull()) && !jsonObj.get("newNamePattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newNamePattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newNamePattern").toString()));
      }
      if ((jsonObj.get("sourceNameTransformation") != null && !jsonObj.get("sourceNameTransformation").isJsonNull()) && !jsonObj.get("sourceNameTransformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceNameTransformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceNameTransformation").toString()));
      }
      // validate the optional field `sourceNameTransformation`
      if (jsonObj.get("sourceNameTransformation") != null && !jsonObj.get("sourceNameTransformation").isJsonNull()) {
        SourceNameTransformationEnum.validateJsonElement(jsonObj.get("sourceNameTransformation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiEntityRename.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiEntityRename' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiEntityRename> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiEntityRename.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiEntityRename>() {
           @Override
           public void write(JsonWriter out, MultiEntityRename value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiEntityRename read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MultiEntityRename given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultiEntityRename
   * @throws IOException if the JSON string is invalid with respect to MultiEntityRename
   */
  public static MultiEntityRename fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiEntityRename.class);
  }

  /**
   * Convert an instance of MultiEntityRename to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

