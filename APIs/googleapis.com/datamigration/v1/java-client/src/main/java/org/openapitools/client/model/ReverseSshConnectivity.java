/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReverseSshConnectivity {
  public static final String SERIALIZED_NAME_VM = "vm";
  @SerializedName(SERIALIZED_NAME_VM)
  private String vm;

  public static final String SERIALIZED_NAME_VM_IP = "vmIp";
  @SerializedName(SERIALIZED_NAME_VM_IP)
  private String vmIp;

  public static final String SERIALIZED_NAME_VM_PORT = "vmPort";
  @SerializedName(SERIALIZED_NAME_VM_PORT)
  private Integer vmPort;

  public static final String SERIALIZED_NAME_VPC = "vpc";
  @SerializedName(SERIALIZED_NAME_VPC)
  private String vpc;

  public ReverseSshConnectivity() {
  }

  public ReverseSshConnectivity vm(String vm) {
    this.vm = vm;
    return this;
  }

  /**
   * The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
   * @return vm
   */
  @javax.annotation.Nullable
  public String getVm() {
    return vm;
  }

  public void setVm(String vm) {
    this.vm = vm;
  }


  public ReverseSshConnectivity vmIp(String vmIp) {
    this.vmIp = vmIp;
    return this;
  }

  /**
   * Required. The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
   * @return vmIp
   */
  @javax.annotation.Nullable
  public String getVmIp() {
    return vmIp;
  }

  public void setVmIp(String vmIp) {
    this.vmIp = vmIp;
  }


  public ReverseSshConnectivity vmPort(Integer vmPort) {
    this.vmPort = vmPort;
    return this;
  }

  /**
   * Required. The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
   * @return vmPort
   */
  @javax.annotation.Nullable
  public Integer getVmPort() {
    return vmPort;
  }

  public void setVmPort(Integer vmPort) {
    this.vmPort = vmPort;
  }


  public ReverseSshConnectivity vpc(String vpc) {
    this.vpc = vpc;
    return this;
  }

  /**
   * The name of the VPC to peer with the Cloud SQL private network.
   * @return vpc
   */
  @javax.annotation.Nullable
  public String getVpc() {
    return vpc;
  }

  public void setVpc(String vpc) {
    this.vpc = vpc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReverseSshConnectivity reverseSshConnectivity = (ReverseSshConnectivity) o;
    return Objects.equals(this.vm, reverseSshConnectivity.vm) &&
        Objects.equals(this.vmIp, reverseSshConnectivity.vmIp) &&
        Objects.equals(this.vmPort, reverseSshConnectivity.vmPort) &&
        Objects.equals(this.vpc, reverseSshConnectivity.vpc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vm, vmIp, vmPort, vpc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReverseSshConnectivity {\n");
    sb.append("    vm: ").append(toIndentedString(vm)).append("\n");
    sb.append("    vmIp: ").append(toIndentedString(vmIp)).append("\n");
    sb.append("    vmPort: ").append(toIndentedString(vmPort)).append("\n");
    sb.append("    vpc: ").append(toIndentedString(vpc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vm");
    openapiFields.add("vmIp");
    openapiFields.add("vmPort");
    openapiFields.add("vpc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReverseSshConnectivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReverseSshConnectivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReverseSshConnectivity is not found in the empty JSON string", ReverseSshConnectivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReverseSshConnectivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReverseSshConnectivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("vm") != null && !jsonObj.get("vm").isJsonNull()) && !jsonObj.get("vm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vm").toString()));
      }
      if ((jsonObj.get("vmIp") != null && !jsonObj.get("vmIp").isJsonNull()) && !jsonObj.get("vmIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmIp").toString()));
      }
      if ((jsonObj.get("vpc") != null && !jsonObj.get("vpc").isJsonNull()) && !jsonObj.get("vpc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReverseSshConnectivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReverseSshConnectivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReverseSshConnectivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReverseSshConnectivity.class));

       return (TypeAdapter<T>) new TypeAdapter<ReverseSshConnectivity>() {
           @Override
           public void write(JsonWriter out, ReverseSshConnectivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReverseSshConnectivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReverseSshConnectivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReverseSshConnectivity
   * @throws IOException if the JSON string is invalid with respect to ReverseSshConnectivity
   */
  public static ReverseSshConnectivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReverseSshConnectivity.class);
  }

  /**
   * Convert an instance of ReverseSshConnectivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

