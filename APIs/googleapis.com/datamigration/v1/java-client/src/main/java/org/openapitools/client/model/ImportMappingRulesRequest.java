/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RulesFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for &#39;ImportMappingRules&#39; request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportMappingRulesRequest {
  public static final String SERIALIZED_NAME_AUTO_COMMIT = "autoCommit";
  @SerializedName(SERIALIZED_NAME_AUTO_COMMIT)
  private Boolean autoCommit;

  public static final String SERIALIZED_NAME_RULES_FILES = "rulesFiles";
  @SerializedName(SERIALIZED_NAME_RULES_FILES)
  private List<RulesFile> rulesFiles = new ArrayList<>();

  /**
   * Required. The format of the rules content file.
   */
  @JsonAdapter(RulesFormatEnum.Adapter.class)
  public enum RulesFormatEnum {
    UNSPECIFIED("IMPORT_RULES_FILE_FORMAT_UNSPECIFIED"),
    
    HARBOUR_BRIDGE_SESSION_FILE("IMPORT_RULES_FILE_FORMAT_HARBOUR_BRIDGE_SESSION_FILE"),
    
    ORATOPG_CONFIG_FILE("IMPORT_RULES_FILE_FORMAT_ORATOPG_CONFIG_FILE");

    private String value;

    RulesFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RulesFormatEnum fromValue(String value) {
      for (RulesFormatEnum b : RulesFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RulesFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RulesFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RulesFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RulesFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RulesFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULES_FORMAT = "rulesFormat";
  @SerializedName(SERIALIZED_NAME_RULES_FORMAT)
  private RulesFormatEnum rulesFormat;

  public ImportMappingRulesRequest() {
  }

  public ImportMappingRulesRequest autoCommit(Boolean autoCommit) {
    this.autoCommit = autoCommit;
    return this;
  }

  /**
   * Required. Should the conversion workspace be committed automatically after the import operation.
   * @return autoCommit
   */
  @javax.annotation.Nullable
  public Boolean getAutoCommit() {
    return autoCommit;
  }

  public void setAutoCommit(Boolean autoCommit) {
    this.autoCommit = autoCommit;
  }


  public ImportMappingRulesRequest rulesFiles(List<RulesFile> rulesFiles) {
    this.rulesFiles = rulesFiles;
    return this;
  }

  public ImportMappingRulesRequest addRulesFilesItem(RulesFile rulesFilesItem) {
    if (this.rulesFiles == null) {
      this.rulesFiles = new ArrayList<>();
    }
    this.rulesFiles.add(rulesFilesItem);
    return this;
  }

  /**
   * Required. One or more rules files.
   * @return rulesFiles
   */
  @javax.annotation.Nullable
  public List<RulesFile> getRulesFiles() {
    return rulesFiles;
  }

  public void setRulesFiles(List<RulesFile> rulesFiles) {
    this.rulesFiles = rulesFiles;
  }


  public ImportMappingRulesRequest rulesFormat(RulesFormatEnum rulesFormat) {
    this.rulesFormat = rulesFormat;
    return this;
  }

  /**
   * Required. The format of the rules content file.
   * @return rulesFormat
   */
  @javax.annotation.Nullable
  public RulesFormatEnum getRulesFormat() {
    return rulesFormat;
  }

  public void setRulesFormat(RulesFormatEnum rulesFormat) {
    this.rulesFormat = rulesFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportMappingRulesRequest importMappingRulesRequest = (ImportMappingRulesRequest) o;
    return Objects.equals(this.autoCommit, importMappingRulesRequest.autoCommit) &&
        Objects.equals(this.rulesFiles, importMappingRulesRequest.rulesFiles) &&
        Objects.equals(this.rulesFormat, importMappingRulesRequest.rulesFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCommit, rulesFiles, rulesFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportMappingRulesRequest {\n");
    sb.append("    autoCommit: ").append(toIndentedString(autoCommit)).append("\n");
    sb.append("    rulesFiles: ").append(toIndentedString(rulesFiles)).append("\n");
    sb.append("    rulesFormat: ").append(toIndentedString(rulesFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoCommit");
    openapiFields.add("rulesFiles");
    openapiFields.add("rulesFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportMappingRulesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportMappingRulesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportMappingRulesRequest is not found in the empty JSON string", ImportMappingRulesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportMappingRulesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportMappingRulesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("rulesFiles") != null && !jsonObj.get("rulesFiles").isJsonNull()) {
        JsonArray jsonArrayrulesFiles = jsonObj.getAsJsonArray("rulesFiles");
        if (jsonArrayrulesFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rulesFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rulesFiles` to be an array in the JSON string but got `%s`", jsonObj.get("rulesFiles").toString()));
          }

          // validate the optional field `rulesFiles` (array)
          for (int i = 0; i < jsonArrayrulesFiles.size(); i++) {
            RulesFile.validateJsonElement(jsonArrayrulesFiles.get(i));
          };
        }
      }
      if ((jsonObj.get("rulesFormat") != null && !jsonObj.get("rulesFormat").isJsonNull()) && !jsonObj.get("rulesFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rulesFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rulesFormat").toString()));
      }
      // validate the optional field `rulesFormat`
      if (jsonObj.get("rulesFormat") != null && !jsonObj.get("rulesFormat").isJsonNull()) {
        RulesFormatEnum.validateJsonElement(jsonObj.get("rulesFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportMappingRulesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportMappingRulesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportMappingRulesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportMappingRulesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportMappingRulesRequest>() {
           @Override
           public void write(JsonWriter out, ImportMappingRulesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportMappingRulesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportMappingRulesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportMappingRulesRequest
   * @throws IOException if the JSON string is invalid with respect to ImportMappingRulesRequest
   */
  public static ImportMappingRulesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportMappingRulesRequest.class);
  }

  /**
   * Convert an instance of ImportMappingRulesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

