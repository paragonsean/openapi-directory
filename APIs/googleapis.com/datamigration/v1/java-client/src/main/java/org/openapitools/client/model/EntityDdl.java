/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single DDL statement for a specific entity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntityDdl {
  public static final String SERIALIZED_NAME_DDL = "ddl";
  @SerializedName(SERIALIZED_NAME_DDL)
  private String ddl;

  public static final String SERIALIZED_NAME_DDL_TYPE = "ddlType";
  @SerializedName(SERIALIZED_NAME_DDL_TYPE)
  private String ddlType;

  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private String entity;

  /**
   * The entity type (if the DDL is for a sub entity).
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    UNSPECIFIED("DATABASE_ENTITY_TYPE_UNSPECIFIED"),
    
    SCHEMA("DATABASE_ENTITY_TYPE_SCHEMA"),
    
    TABLE("DATABASE_ENTITY_TYPE_TABLE"),
    
    COLUMN("DATABASE_ENTITY_TYPE_COLUMN"),
    
    CONSTRAINT("DATABASE_ENTITY_TYPE_CONSTRAINT"),
    
    INDEX("DATABASE_ENTITY_TYPE_INDEX"),
    
    TRIGGER("DATABASE_ENTITY_TYPE_TRIGGER"),
    
    VIEW("DATABASE_ENTITY_TYPE_VIEW"),
    
    SEQUENCE("DATABASE_ENTITY_TYPE_SEQUENCE"),
    
    STORED_PROCEDURE("DATABASE_ENTITY_TYPE_STORED_PROCEDURE"),
    
    FUNCTION("DATABASE_ENTITY_TYPE_FUNCTION"),
    
    SYNONYM("DATABASE_ENTITY_TYPE_SYNONYM"),
    
    DATABASE_PACKAGE("DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"),
    
    UDT("DATABASE_ENTITY_TYPE_UDT"),
    
    MATERIALIZED_VIEW("DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"),
    
    DATABASE("DATABASE_ENTITY_TYPE_DATABASE");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_ISSUE_ID = "issueId";
  @SerializedName(SERIALIZED_NAME_ISSUE_ID)
  private List<String> issueId = new ArrayList<>();

  public EntityDdl() {
  }

  public EntityDdl ddl(String ddl) {
    this.ddl = ddl;
    return this;
  }

  /**
   * The actual ddl code.
   * @return ddl
   */
  @javax.annotation.Nullable
  public String getDdl() {
    return ddl;
  }

  public void setDdl(String ddl) {
    this.ddl = ddl;
  }


  public EntityDdl ddlType(String ddlType) {
    this.ddlType = ddlType;
    return this;
  }

  /**
   * Type of DDL (Create, Alter).
   * @return ddlType
   */
  @javax.annotation.Nullable
  public String getDdlType() {
    return ddlType;
  }

  public void setDdlType(String ddlType) {
    this.ddlType = ddlType;
  }


  public EntityDdl entity(String entity) {
    this.entity = entity;
    return this;
  }

  /**
   * The name of the database entity the ddl refers to.
   * @return entity
   */
  @javax.annotation.Nullable
  public String getEntity() {
    return entity;
  }

  public void setEntity(String entity) {
    this.entity = entity;
  }


  public EntityDdl entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * The entity type (if the DDL is for a sub entity).
   * @return entityType
   */
  @javax.annotation.Nullable
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public EntityDdl issueId(List<String> issueId) {
    this.issueId = issueId;
    return this;
  }

  public EntityDdl addIssueIdItem(String issueIdItem) {
    if (this.issueId == null) {
      this.issueId = new ArrayList<>();
    }
    this.issueId.add(issueIdItem);
    return this;
  }

  /**
   * EntityIssues found for this ddl.
   * @return issueId
   */
  @javax.annotation.Nullable
  public List<String> getIssueId() {
    return issueId;
  }

  public void setIssueId(List<String> issueId) {
    this.issueId = issueId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityDdl entityDdl = (EntityDdl) o;
    return Objects.equals(this.ddl, entityDdl.ddl) &&
        Objects.equals(this.ddlType, entityDdl.ddlType) &&
        Objects.equals(this.entity, entityDdl.entity) &&
        Objects.equals(this.entityType, entityDdl.entityType) &&
        Objects.equals(this.issueId, entityDdl.issueId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ddl, ddlType, entity, entityType, issueId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityDdl {\n");
    sb.append("    ddl: ").append(toIndentedString(ddl)).append("\n");
    sb.append("    ddlType: ").append(toIndentedString(ddlType)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    issueId: ").append(toIndentedString(issueId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ddl");
    openapiFields.add("ddlType");
    openapiFields.add("entity");
    openapiFields.add("entityType");
    openapiFields.add("issueId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntityDdl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntityDdl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityDdl is not found in the empty JSON string", EntityDdl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntityDdl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityDdl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ddl") != null && !jsonObj.get("ddl").isJsonNull()) && !jsonObj.get("ddl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ddl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ddl").toString()));
      }
      if ((jsonObj.get("ddlType") != null && !jsonObj.get("ddlType").isJsonNull()) && !jsonObj.get("ddlType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ddlType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ddlType").toString()));
      }
      if ((jsonObj.get("entity") != null && !jsonObj.get("entity").isJsonNull()) && !jsonObj.get("entity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the optional field `entityType`
      if (jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) {
        EntityTypeEnum.validateJsonElement(jsonObj.get("entityType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("issueId") != null && !jsonObj.get("issueId").isJsonNull() && !jsonObj.get("issueId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueId` to be an array in the JSON string but got `%s`", jsonObj.get("issueId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityDdl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityDdl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityDdl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityDdl.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityDdl>() {
           @Override
           public void write(JsonWriter out, EntityDdl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityDdl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntityDdl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntityDdl
   * @throws IOException if the JSON string is invalid with respect to EntityDdl
   */
  public static EntityDdl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityDdl.class);
  }

  /**
   * Convert an instance of EntityDdl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

