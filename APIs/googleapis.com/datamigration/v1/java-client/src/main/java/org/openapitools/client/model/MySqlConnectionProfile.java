/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SslConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies connection parameters required specifically for MySQL databases.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MySqlConnectionProfile {
  public static final String SERIALIZED_NAME_CLOUD_SQL_ID = "cloudSqlId";
  @SerializedName(SERIALIZED_NAME_CLOUD_SQL_ID)
  private String cloudSqlId;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PASSWORD_SET = "passwordSet";
  @SerializedName(SERIALIZED_NAME_PASSWORD_SET)
  private Boolean passwordSet;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private SslConfig ssl;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public MySqlConnectionProfile() {
  }

  public MySqlConnectionProfile(
     Boolean passwordSet
  ) {
    this();
    this.passwordSet = passwordSet;
  }

  public MySqlConnectionProfile cloudSqlId(String cloudSqlId) {
    this.cloudSqlId = cloudSqlId;
    return this;
  }

  /**
   * If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
   * @return cloudSqlId
   */
  @javax.annotation.Nullable
  public String getCloudSqlId() {
    return cloudSqlId;
  }

  public void setCloudSqlId(String cloudSqlId) {
    this.cloudSqlId = cloudSqlId;
  }


  public MySqlConnectionProfile host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Required. The IP or hostname of the source MySQL database.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public MySqlConnectionProfile password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  /**
   * Output only. Indicates If this connection profile password is stored.
   * @return passwordSet
   */
  @javax.annotation.Nullable
  public Boolean getPasswordSet() {
    return passwordSet;
  }



  public MySqlConnectionProfile port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Required. The network port of the source MySQL database.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public MySqlConnectionProfile ssl(SslConfig ssl) {
    this.ssl = ssl;
    return this;
  }

  /**
   * Get ssl
   * @return ssl
   */
  @javax.annotation.Nullable
  public SslConfig getSsl() {
    return ssl;
  }

  public void setSsl(SslConfig ssl) {
    this.ssl = ssl;
  }


  public MySqlConnectionProfile username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MySqlConnectionProfile mySqlConnectionProfile = (MySqlConnectionProfile) o;
    return Objects.equals(this.cloudSqlId, mySqlConnectionProfile.cloudSqlId) &&
        Objects.equals(this.host, mySqlConnectionProfile.host) &&
        Objects.equals(this.password, mySqlConnectionProfile.password) &&
        Objects.equals(this.passwordSet, mySqlConnectionProfile.passwordSet) &&
        Objects.equals(this.port, mySqlConnectionProfile.port) &&
        Objects.equals(this.ssl, mySqlConnectionProfile.ssl) &&
        Objects.equals(this.username, mySqlConnectionProfile.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudSqlId, host, password, passwordSet, port, ssl, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MySqlConnectionProfile {\n");
    sb.append("    cloudSqlId: ").append(toIndentedString(cloudSqlId)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    passwordSet: ").append(toIndentedString(passwordSet)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudSqlId");
    openapiFields.add("host");
    openapiFields.add("password");
    openapiFields.add("passwordSet");
    openapiFields.add("port");
    openapiFields.add("ssl");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MySqlConnectionProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MySqlConnectionProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MySqlConnectionProfile is not found in the empty JSON string", MySqlConnectionProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MySqlConnectionProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MySqlConnectionProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cloudSqlId") != null && !jsonObj.get("cloudSqlId").isJsonNull()) && !jsonObj.get("cloudSqlId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudSqlId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudSqlId").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the optional field `ssl`
      if (jsonObj.get("ssl") != null && !jsonObj.get("ssl").isJsonNull()) {
        SslConfig.validateJsonElement(jsonObj.get("ssl"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MySqlConnectionProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MySqlConnectionProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MySqlConnectionProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MySqlConnectionProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<MySqlConnectionProfile>() {
           @Override
           public void write(JsonWriter out, MySqlConnectionProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MySqlConnectionProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MySqlConnectionProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MySqlConnectionProfile
   * @throws IOException if the JSON string is invalid with respect to MySqlConnectionProfile
   */
  public static MySqlConnectionProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MySqlConnectionProfile.class);
  }

  /**
   * Convert an instance of MySqlConnectionProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

