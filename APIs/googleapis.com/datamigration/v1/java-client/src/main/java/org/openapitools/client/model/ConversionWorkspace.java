/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DatabaseEngineInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The main conversion workspace resource entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversionWorkspace {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private DatabaseEngineInfo destination;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_GLOBAL_SETTINGS = "globalSettings";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SETTINGS)
  private Map<String, String> globalSettings = new HashMap<>();

  public static final String SERIALIZED_NAME_HAS_UNCOMMITTED_CHANGES = "hasUncommittedChanges";
  @SerializedName(SERIALIZED_NAME_HAS_UNCOMMITTED_CHANGES)
  private Boolean hasUncommittedChanges;

  public static final String SERIALIZED_NAME_LATEST_COMMIT_ID = "latestCommitId";
  @SerializedName(SERIALIZED_NAME_LATEST_COMMIT_ID)
  private String latestCommitId;

  public static final String SERIALIZED_NAME_LATEST_COMMIT_TIME = "latestCommitTime";
  @SerializedName(SERIALIZED_NAME_LATEST_COMMIT_TIME)
  private String latestCommitTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private DatabaseEngineInfo source;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public ConversionWorkspace() {
  }

  public ConversionWorkspace(
     String createTime, 
     Boolean hasUncommittedChanges, 
     String latestCommitId, 
     String latestCommitTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.hasUncommittedChanges = hasUncommittedChanges;
    this.latestCommitId = latestCommitId;
    this.latestCommitTime = latestCommitTime;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The timestamp when the workspace resource was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public ConversionWorkspace destination(DatabaseEngineInfo destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public DatabaseEngineInfo getDestination() {
    return destination;
  }

  public void setDestination(DatabaseEngineInfo destination) {
    this.destination = destination;
  }


  public ConversionWorkspace displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. The display name for the workspace.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ConversionWorkspace globalSettings(Map<String, String> globalSettings) {
    this.globalSettings = globalSettings;
    return this;
  }

  public ConversionWorkspace putGlobalSettingsItem(String key, String globalSettingsItem) {
    if (this.globalSettings == null) {
      this.globalSettings = new HashMap<>();
    }
    this.globalSettings.put(key, globalSettingsItem);
    return this;
  }

  /**
   * Optional. A generic list of settings for the workspace. The settings are database pair dependant and can indicate default behavior for the mapping rules engine or turn on or off specific features. Such examples can be: convert_foreign_key_to_interleave&#x3D;true, skip_triggers&#x3D;false, ignore_non_table_synonyms&#x3D;true
   * @return globalSettings
   */
  @javax.annotation.Nullable
  public Map<String, String> getGlobalSettings() {
    return globalSettings;
  }

  public void setGlobalSettings(Map<String, String> globalSettings) {
    this.globalSettings = globalSettings;
  }


  /**
   * Output only. Whether the workspace has uncommitted changes (changes which were made after the workspace was committed).
   * @return hasUncommittedChanges
   */
  @javax.annotation.Nullable
  public Boolean getHasUncommittedChanges() {
    return hasUncommittedChanges;
  }



  /**
   * Output only. The latest commit ID.
   * @return latestCommitId
   */
  @javax.annotation.Nullable
  public String getLatestCommitId() {
    return latestCommitId;
  }



  /**
   * Output only. The timestamp when the workspace was committed.
   * @return latestCommitTime
   */
  @javax.annotation.Nullable
  public String getLatestCommitTime() {
    return latestCommitTime;
  }



  public ConversionWorkspace name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Full name of the workspace resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConversionWorkspace source(DatabaseEngineInfo source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public DatabaseEngineInfo getSource() {
    return source;
  }

  public void setSource(DatabaseEngineInfo source) {
    this.source = source;
  }


  /**
   * Output only. The timestamp when the workspace resource was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversionWorkspace conversionWorkspace = (ConversionWorkspace) o;
    return Objects.equals(this.createTime, conversionWorkspace.createTime) &&
        Objects.equals(this.destination, conversionWorkspace.destination) &&
        Objects.equals(this.displayName, conversionWorkspace.displayName) &&
        Objects.equals(this.globalSettings, conversionWorkspace.globalSettings) &&
        Objects.equals(this.hasUncommittedChanges, conversionWorkspace.hasUncommittedChanges) &&
        Objects.equals(this.latestCommitId, conversionWorkspace.latestCommitId) &&
        Objects.equals(this.latestCommitTime, conversionWorkspace.latestCommitTime) &&
        Objects.equals(this.name, conversionWorkspace.name) &&
        Objects.equals(this.source, conversionWorkspace.source) &&
        Objects.equals(this.updateTime, conversionWorkspace.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, destination, displayName, globalSettings, hasUncommittedChanges, latestCommitId, latestCommitTime, name, source, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversionWorkspace {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    globalSettings: ").append(toIndentedString(globalSettings)).append("\n");
    sb.append("    hasUncommittedChanges: ").append(toIndentedString(hasUncommittedChanges)).append("\n");
    sb.append("    latestCommitId: ").append(toIndentedString(latestCommitId)).append("\n");
    sb.append("    latestCommitTime: ").append(toIndentedString(latestCommitTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("destination");
    openapiFields.add("displayName");
    openapiFields.add("globalSettings");
    openapiFields.add("hasUncommittedChanges");
    openapiFields.add("latestCommitId");
    openapiFields.add("latestCommitTime");
    openapiFields.add("name");
    openapiFields.add("source");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversionWorkspace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversionWorkspace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversionWorkspace is not found in the empty JSON string", ConversionWorkspace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversionWorkspace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversionWorkspace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        DatabaseEngineInfo.validateJsonElement(jsonObj.get("destination"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("latestCommitId") != null && !jsonObj.get("latestCommitId").isJsonNull()) && !jsonObj.get("latestCommitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestCommitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestCommitId").toString()));
      }
      if ((jsonObj.get("latestCommitTime") != null && !jsonObj.get("latestCommitTime").isJsonNull()) && !jsonObj.get("latestCommitTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestCommitTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestCommitTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        DatabaseEngineInfo.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversionWorkspace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversionWorkspace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversionWorkspace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversionWorkspace.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversionWorkspace>() {
           @Override
           public void write(JsonWriter out, ConversionWorkspace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversionWorkspace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversionWorkspace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversionWorkspace
   * @throws IOException if the JSON string is invalid with respect to ConversionWorkspace
   */
  public static ConversionWorkspace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversionWorkspace.class);
  }

  /**
   * Convert an instance of ConversionWorkspace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

