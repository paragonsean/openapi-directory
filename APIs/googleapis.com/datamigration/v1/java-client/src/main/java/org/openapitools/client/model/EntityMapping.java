/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntityMappingLogEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the mappings of a database entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntityMapping {
  public static final String SERIALIZED_NAME_DRAFT_ENTITY = "draftEntity";
  @SerializedName(SERIALIZED_NAME_DRAFT_ENTITY)
  private String draftEntity;

  /**
   * Type of draft entity.
   */
  @JsonAdapter(DraftTypeEnum.Adapter.class)
  public enum DraftTypeEnum {
    UNSPECIFIED("DATABASE_ENTITY_TYPE_UNSPECIFIED"),
    
    SCHEMA("DATABASE_ENTITY_TYPE_SCHEMA"),
    
    TABLE("DATABASE_ENTITY_TYPE_TABLE"),
    
    COLUMN("DATABASE_ENTITY_TYPE_COLUMN"),
    
    CONSTRAINT("DATABASE_ENTITY_TYPE_CONSTRAINT"),
    
    INDEX("DATABASE_ENTITY_TYPE_INDEX"),
    
    TRIGGER("DATABASE_ENTITY_TYPE_TRIGGER"),
    
    VIEW("DATABASE_ENTITY_TYPE_VIEW"),
    
    SEQUENCE("DATABASE_ENTITY_TYPE_SEQUENCE"),
    
    STORED_PROCEDURE("DATABASE_ENTITY_TYPE_STORED_PROCEDURE"),
    
    FUNCTION("DATABASE_ENTITY_TYPE_FUNCTION"),
    
    SYNONYM("DATABASE_ENTITY_TYPE_SYNONYM"),
    
    DATABASE_PACKAGE("DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"),
    
    UDT("DATABASE_ENTITY_TYPE_UDT"),
    
    MATERIALIZED_VIEW("DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"),
    
    DATABASE("DATABASE_ENTITY_TYPE_DATABASE");

    private String value;

    DraftTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DraftTypeEnum fromValue(String value) {
      for (DraftTypeEnum b : DraftTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DraftTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DraftTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DraftTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DraftTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DraftTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DRAFT_TYPE = "draftType";
  @SerializedName(SERIALIZED_NAME_DRAFT_TYPE)
  private DraftTypeEnum draftType;

  public static final String SERIALIZED_NAME_MAPPING_LOG = "mappingLog";
  @SerializedName(SERIALIZED_NAME_MAPPING_LOG)
  private List<EntityMappingLogEntry> mappingLog = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_ENTITY = "sourceEntity";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENTITY)
  private String sourceEntity;

  /**
   * Type of source entity.
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    UNSPECIFIED("DATABASE_ENTITY_TYPE_UNSPECIFIED"),
    
    SCHEMA("DATABASE_ENTITY_TYPE_SCHEMA"),
    
    TABLE("DATABASE_ENTITY_TYPE_TABLE"),
    
    COLUMN("DATABASE_ENTITY_TYPE_COLUMN"),
    
    CONSTRAINT("DATABASE_ENTITY_TYPE_CONSTRAINT"),
    
    INDEX("DATABASE_ENTITY_TYPE_INDEX"),
    
    TRIGGER("DATABASE_ENTITY_TYPE_TRIGGER"),
    
    VIEW("DATABASE_ENTITY_TYPE_VIEW"),
    
    SEQUENCE("DATABASE_ENTITY_TYPE_SEQUENCE"),
    
    STORED_PROCEDURE("DATABASE_ENTITY_TYPE_STORED_PROCEDURE"),
    
    FUNCTION("DATABASE_ENTITY_TYPE_FUNCTION"),
    
    SYNONYM("DATABASE_ENTITY_TYPE_SYNONYM"),
    
    DATABASE_PACKAGE("DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"),
    
    UDT("DATABASE_ENTITY_TYPE_UDT"),
    
    MATERIALIZED_VIEW("DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"),
    
    DATABASE("DATABASE_ENTITY_TYPE_DATABASE");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceTypeEnum fromValue(String value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceTypeEnum sourceType;

  public EntityMapping() {
  }

  public EntityMapping draftEntity(String draftEntity) {
    this.draftEntity = draftEntity;
    return this;
  }

  /**
   * Target entity full name. The draft entity can also include a column, index or constraint using the same naming notation schema.table.column.
   * @return draftEntity
   */
  @javax.annotation.Nullable
  public String getDraftEntity() {
    return draftEntity;
  }

  public void setDraftEntity(String draftEntity) {
    this.draftEntity = draftEntity;
  }


  public EntityMapping draftType(DraftTypeEnum draftType) {
    this.draftType = draftType;
    return this;
  }

  /**
   * Type of draft entity.
   * @return draftType
   */
  @javax.annotation.Nullable
  public DraftTypeEnum getDraftType() {
    return draftType;
  }

  public void setDraftType(DraftTypeEnum draftType) {
    this.draftType = draftType;
  }


  public EntityMapping mappingLog(List<EntityMappingLogEntry> mappingLog) {
    this.mappingLog = mappingLog;
    return this;
  }

  public EntityMapping addMappingLogItem(EntityMappingLogEntry mappingLogItem) {
    if (this.mappingLog == null) {
      this.mappingLog = new ArrayList<>();
    }
    this.mappingLog.add(mappingLogItem);
    return this;
  }

  /**
   * Entity mapping log entries. Multiple rules can be effective and contribute changes to a converted entity, such as a rule can handle the entity name, another rule can handle an entity type. In addition, rules which did not change the entity are also logged along with the reason preventing them to do so.
   * @return mappingLog
   */
  @javax.annotation.Nullable
  public List<EntityMappingLogEntry> getMappingLog() {
    return mappingLog;
  }

  public void setMappingLog(List<EntityMappingLogEntry> mappingLog) {
    this.mappingLog = mappingLog;
  }


  public EntityMapping sourceEntity(String sourceEntity) {
    this.sourceEntity = sourceEntity;
    return this;
  }

  /**
   * Source entity full name. The source entity can also be a column, index or constraint using the same naming notation schema.table.column.
   * @return sourceEntity
   */
  @javax.annotation.Nullable
  public String getSourceEntity() {
    return sourceEntity;
  }

  public void setSourceEntity(String sourceEntity) {
    this.sourceEntity = sourceEntity;
  }


  public EntityMapping sourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Type of source entity.
   * @return sourceType
   */
  @javax.annotation.Nullable
  public SourceTypeEnum getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityMapping entityMapping = (EntityMapping) o;
    return Objects.equals(this.draftEntity, entityMapping.draftEntity) &&
        Objects.equals(this.draftType, entityMapping.draftType) &&
        Objects.equals(this.mappingLog, entityMapping.mappingLog) &&
        Objects.equals(this.sourceEntity, entityMapping.sourceEntity) &&
        Objects.equals(this.sourceType, entityMapping.sourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(draftEntity, draftType, mappingLog, sourceEntity, sourceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityMapping {\n");
    sb.append("    draftEntity: ").append(toIndentedString(draftEntity)).append("\n");
    sb.append("    draftType: ").append(toIndentedString(draftType)).append("\n");
    sb.append("    mappingLog: ").append(toIndentedString(mappingLog)).append("\n");
    sb.append("    sourceEntity: ").append(toIndentedString(sourceEntity)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("draftEntity");
    openapiFields.add("draftType");
    openapiFields.add("mappingLog");
    openapiFields.add("sourceEntity");
    openapiFields.add("sourceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntityMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntityMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityMapping is not found in the empty JSON string", EntityMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntityMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("draftEntity") != null && !jsonObj.get("draftEntity").isJsonNull()) && !jsonObj.get("draftEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `draftEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("draftEntity").toString()));
      }
      if ((jsonObj.get("draftType") != null && !jsonObj.get("draftType").isJsonNull()) && !jsonObj.get("draftType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `draftType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("draftType").toString()));
      }
      // validate the optional field `draftType`
      if (jsonObj.get("draftType") != null && !jsonObj.get("draftType").isJsonNull()) {
        DraftTypeEnum.validateJsonElement(jsonObj.get("draftType"));
      }
      if (jsonObj.get("mappingLog") != null && !jsonObj.get("mappingLog").isJsonNull()) {
        JsonArray jsonArraymappingLog = jsonObj.getAsJsonArray("mappingLog");
        if (jsonArraymappingLog != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mappingLog").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mappingLog` to be an array in the JSON string but got `%s`", jsonObj.get("mappingLog").toString()));
          }

          // validate the optional field `mappingLog` (array)
          for (int i = 0; i < jsonArraymappingLog.size(); i++) {
            EntityMappingLogEntry.validateJsonElement(jsonArraymappingLog.get(i));
          };
        }
      }
      if ((jsonObj.get("sourceEntity") != null && !jsonObj.get("sourceEntity").isJsonNull()) && !jsonObj.get("sourceEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceEntity").toString()));
      }
      if ((jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonNull()) && !jsonObj.get("sourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceType").toString()));
      }
      // validate the optional field `sourceType`
      if (jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonNull()) {
        SourceTypeEnum.validateJsonElement(jsonObj.get("sourceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityMapping>() {
           @Override
           public void write(JsonWriter out, EntityMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntityMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntityMapping
   * @throws IOException if the JSON string is invalid with respect to EntityMapping
   */
  public static EntityMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityMapping.class);
  }

  /**
   * Convert an instance of EntityMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

