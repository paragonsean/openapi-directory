/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Synonym&#39;s parent is a schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SynonymEntity {
  public static final String SERIALIZED_NAME_CUSTOM_FEATURES = "customFeatures";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FEATURES)
  private Map<String, Object> customFeatures = new HashMap<>();

  public static final String SERIALIZED_NAME_SOURCE_ENTITY = "sourceEntity";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENTITY)
  private String sourceEntity;

  /**
   * The type of the entity for which the synonym is being created (usually a table or a sequence).
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    UNSPECIFIED("DATABASE_ENTITY_TYPE_UNSPECIFIED"),
    
    SCHEMA("DATABASE_ENTITY_TYPE_SCHEMA"),
    
    TABLE("DATABASE_ENTITY_TYPE_TABLE"),
    
    COLUMN("DATABASE_ENTITY_TYPE_COLUMN"),
    
    CONSTRAINT("DATABASE_ENTITY_TYPE_CONSTRAINT"),
    
    INDEX("DATABASE_ENTITY_TYPE_INDEX"),
    
    TRIGGER("DATABASE_ENTITY_TYPE_TRIGGER"),
    
    VIEW("DATABASE_ENTITY_TYPE_VIEW"),
    
    SEQUENCE("DATABASE_ENTITY_TYPE_SEQUENCE"),
    
    STORED_PROCEDURE("DATABASE_ENTITY_TYPE_STORED_PROCEDURE"),
    
    FUNCTION("DATABASE_ENTITY_TYPE_FUNCTION"),
    
    SYNONYM("DATABASE_ENTITY_TYPE_SYNONYM"),
    
    DATABASE_PACKAGE("DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"),
    
    UDT("DATABASE_ENTITY_TYPE_UDT"),
    
    MATERIALIZED_VIEW("DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"),
    
    DATABASE("DATABASE_ENTITY_TYPE_DATABASE");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceTypeEnum fromValue(String value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceTypeEnum sourceType;

  public SynonymEntity() {
  }

  public SynonymEntity customFeatures(Map<String, Object> customFeatures) {
    this.customFeatures = customFeatures;
    return this;
  }

  public SynonymEntity putCustomFeaturesItem(String key, Object customFeaturesItem) {
    if (this.customFeatures == null) {
      this.customFeatures = new HashMap<>();
    }
    this.customFeatures.put(key, customFeaturesItem);
    return this;
  }

  /**
   * Custom engine specific features.
   * @return customFeatures
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCustomFeatures() {
    return customFeatures;
  }

  public void setCustomFeatures(Map<String, Object> customFeatures) {
    this.customFeatures = customFeatures;
  }


  public SynonymEntity sourceEntity(String sourceEntity) {
    this.sourceEntity = sourceEntity;
    return this;
  }

  /**
   * The name of the entity for which the synonym is being created (the source).
   * @return sourceEntity
   */
  @javax.annotation.Nullable
  public String getSourceEntity() {
    return sourceEntity;
  }

  public void setSourceEntity(String sourceEntity) {
    this.sourceEntity = sourceEntity;
  }


  public SynonymEntity sourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * The type of the entity for which the synonym is being created (usually a table or a sequence).
   * @return sourceType
   */
  @javax.annotation.Nullable
  public SourceTypeEnum getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SynonymEntity synonymEntity = (SynonymEntity) o;
    return Objects.equals(this.customFeatures, synonymEntity.customFeatures) &&
        Objects.equals(this.sourceEntity, synonymEntity.sourceEntity) &&
        Objects.equals(this.sourceType, synonymEntity.sourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customFeatures, sourceEntity, sourceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SynonymEntity {\n");
    sb.append("    customFeatures: ").append(toIndentedString(customFeatures)).append("\n");
    sb.append("    sourceEntity: ").append(toIndentedString(sourceEntity)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customFeatures");
    openapiFields.add("sourceEntity");
    openapiFields.add("sourceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SynonymEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SynonymEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SynonymEntity is not found in the empty JSON string", SynonymEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SynonymEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SynonymEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sourceEntity") != null && !jsonObj.get("sourceEntity").isJsonNull()) && !jsonObj.get("sourceEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceEntity").toString()));
      }
      if ((jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonNull()) && !jsonObj.get("sourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceType").toString()));
      }
      // validate the optional field `sourceType`
      if (jsonObj.get("sourceType") != null && !jsonObj.get("sourceType").isJsonNull()) {
        SourceTypeEnum.validateJsonElement(jsonObj.get("sourceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SynonymEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SynonymEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SynonymEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SynonymEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<SynonymEntity>() {
           @Override
           public void write(JsonWriter out, SynonymEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SynonymEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SynonymEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SynonymEntity
   * @throws IOException if the JSON string is invalid with respect to SynonymEntity
   */
  public static SynonymEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SynonymEntity.class);
  }

  /**
   * Convert an instance of SynonymEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

