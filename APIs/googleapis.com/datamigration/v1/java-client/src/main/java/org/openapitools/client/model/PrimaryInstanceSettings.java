/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.MachineConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for the cluster&#39;s primary instance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrimaryInstanceSettings {
  public static final String SERIALIZED_NAME_DATABASE_FLAGS = "databaseFlags";
  @SerializedName(SERIALIZED_NAME_DATABASE_FLAGS)
  private Map<String, String> databaseFlags = new HashMap<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MACHINE_CONFIG = "machineConfig";
  @SerializedName(SERIALIZED_NAME_MACHINE_CONFIG)
  private MachineConfig machineConfig;

  public static final String SERIALIZED_NAME_PRIVATE_IP = "privateIp";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IP)
  private String privateIp;

  public PrimaryInstanceSettings() {
  }

  public PrimaryInstanceSettings(
     String privateIp
  ) {
    this();
    this.privateIp = privateIp;
  }

  public PrimaryInstanceSettings databaseFlags(Map<String, String> databaseFlags) {
    this.databaseFlags = databaseFlags;
    return this;
  }

  public PrimaryInstanceSettings putDatabaseFlagsItem(String key, String databaseFlagsItem) {
    if (this.databaseFlags == null) {
      this.databaseFlags = new HashMap<>();
    }
    this.databaseFlags.put(key, databaseFlagsItem);
    return this;
  }

  /**
   * Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.
   * @return databaseFlags
   */
  @javax.annotation.Nullable
  public Map<String, String> getDatabaseFlags() {
    return databaseFlags;
  }

  public void setDatabaseFlags(Map<String, String> databaseFlags) {
    this.databaseFlags = databaseFlags;
  }


  public PrimaryInstanceSettings id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. The ID of the AlloyDB primary instance. The ID must satisfy the regex expression \&quot;[a-z0-9-]+\&quot;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PrimaryInstanceSettings labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public PrimaryInstanceSettings putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels for the AlloyDB primary instance created by DMS. An object containing a list of &#39;key&#39;, &#39;value&#39; pairs.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public PrimaryInstanceSettings machineConfig(MachineConfig machineConfig) {
    this.machineConfig = machineConfig;
    return this;
  }

  /**
   * Get machineConfig
   * @return machineConfig
   */
  @javax.annotation.Nullable
  public MachineConfig getMachineConfig() {
    return machineConfig;
  }

  public void setMachineConfig(MachineConfig machineConfig) {
    this.machineConfig = machineConfig;
  }


  /**
   * Output only. The private IP address for the Instance. This is the connection endpoint for an end-user application.
   * @return privateIp
   */
  @javax.annotation.Nullable
  public String getPrivateIp() {
    return privateIp;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrimaryInstanceSettings primaryInstanceSettings = (PrimaryInstanceSettings) o;
    return Objects.equals(this.databaseFlags, primaryInstanceSettings.databaseFlags) &&
        Objects.equals(this.id, primaryInstanceSettings.id) &&
        Objects.equals(this.labels, primaryInstanceSettings.labels) &&
        Objects.equals(this.machineConfig, primaryInstanceSettings.machineConfig) &&
        Objects.equals(this.privateIp, primaryInstanceSettings.privateIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseFlags, id, labels, machineConfig, privateIp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrimaryInstanceSettings {\n");
    sb.append("    databaseFlags: ").append(toIndentedString(databaseFlags)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    machineConfig: ").append(toIndentedString(machineConfig)).append("\n");
    sb.append("    privateIp: ").append(toIndentedString(privateIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("databaseFlags");
    openapiFields.add("id");
    openapiFields.add("labels");
    openapiFields.add("machineConfig");
    openapiFields.add("privateIp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrimaryInstanceSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrimaryInstanceSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrimaryInstanceSettings is not found in the empty JSON string", PrimaryInstanceSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrimaryInstanceSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrimaryInstanceSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `machineConfig`
      if (jsonObj.get("machineConfig") != null && !jsonObj.get("machineConfig").isJsonNull()) {
        MachineConfig.validateJsonElement(jsonObj.get("machineConfig"));
      }
      if ((jsonObj.get("privateIp") != null && !jsonObj.get("privateIp").isJsonNull()) && !jsonObj.get("privateIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateIp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrimaryInstanceSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrimaryInstanceSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrimaryInstanceSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrimaryInstanceSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<PrimaryInstanceSettings>() {
           @Override
           public void write(JsonWriter out, PrimaryInstanceSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrimaryInstanceSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrimaryInstanceSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrimaryInstanceSettings
   * @throws IOException if the JSON string is invalid with respect to PrimaryInstanceSettings
   */
  public static PrimaryInstanceSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrimaryInstanceSettings.class);
  }

  /**
   * Convert an instance of PrimaryInstanceSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

