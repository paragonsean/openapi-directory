/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplyJobDetails;
import org.openapitools.client.model.ConvertJobDetails;
import org.openapitools.client.model.ImportRulesJobDetails;
import org.openapitools.client.model.SeedJobDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Execution log of a background job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackgroundJobLogEntry {
  public static final String SERIALIZED_NAME_APPLY_JOB_DETAILS = "applyJobDetails";
  @SerializedName(SERIALIZED_NAME_APPLY_JOB_DETAILS)
  private ApplyJobDetails applyJobDetails;

  public static final String SERIALIZED_NAME_COMPLETION_COMMENT = "completionComment";
  @SerializedName(SERIALIZED_NAME_COMPLETION_COMMENT)
  private String completionComment;

  /**
   * Output only. Job completion state, i.e. the final state after the job completed.
   */
  @JsonAdapter(CompletionStateEnum.Adapter.class)
  public enum CompletionStateEnum {
    JOB_COMPLETION_STATE_UNSPECIFIED("JOB_COMPLETION_STATE_UNSPECIFIED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED");

    private String value;

    CompletionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompletionStateEnum fromValue(String value) {
      for (CompletionStateEnum b : CompletionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompletionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompletionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompletionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompletionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompletionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPLETION_STATE = "completionState";
  @SerializedName(SERIALIZED_NAME_COMPLETION_STATE)
  private CompletionStateEnum completionState;

  public static final String SERIALIZED_NAME_CONVERT_JOB_DETAILS = "convertJobDetails";
  @SerializedName(SERIALIZED_NAME_CONVERT_JOB_DETAILS)
  private ConvertJobDetails convertJobDetails;

  public static final String SERIALIZED_NAME_FINISH_TIME = "finishTime";
  @SerializedName(SERIALIZED_NAME_FINISH_TIME)
  private String finishTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMPORT_RULES_JOB_DETAILS = "importRulesJobDetails";
  @SerializedName(SERIALIZED_NAME_IMPORT_RULES_JOB_DETAILS)
  private ImportRulesJobDetails importRulesJobDetails;

  /**
   * The type of job that was executed.
   */
  @JsonAdapter(JobTypeEnum.Adapter.class)
  public enum JobTypeEnum {
    UNSPECIFIED("BACKGROUND_JOB_TYPE_UNSPECIFIED"),
    
    SOURCE_SEED("BACKGROUND_JOB_TYPE_SOURCE_SEED"),
    
    CONVERT("BACKGROUND_JOB_TYPE_CONVERT"),
    
    APPLY_DESTINATION("BACKGROUND_JOB_TYPE_APPLY_DESTINATION"),
    
    IMPORT_RULES_FILE("BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE");

    private String value;

    JobTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobTypeEnum fromValue(String value) {
      for (JobTypeEnum b : JobTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobTypeEnum jobType;

  public static final String SERIALIZED_NAME_REQUEST_AUTOCOMMIT = "requestAutocommit";
  @SerializedName(SERIALIZED_NAME_REQUEST_AUTOCOMMIT)
  private Boolean requestAutocommit;

  public static final String SERIALIZED_NAME_SEED_JOB_DETAILS = "seedJobDetails";
  @SerializedName(SERIALIZED_NAME_SEED_JOB_DETAILS)
  private SeedJobDetails seedJobDetails;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public BackgroundJobLogEntry() {
  }

  public BackgroundJobLogEntry(
     String completionComment, 
     CompletionStateEnum completionState, 
     Boolean requestAutocommit
  ) {
    this();
    this.completionComment = completionComment;
    this.completionState = completionState;
    this.requestAutocommit = requestAutocommit;
  }

  public BackgroundJobLogEntry applyJobDetails(ApplyJobDetails applyJobDetails) {
    this.applyJobDetails = applyJobDetails;
    return this;
  }

  /**
   * Get applyJobDetails
   * @return applyJobDetails
   */
  @javax.annotation.Nullable
  public ApplyJobDetails getApplyJobDetails() {
    return applyJobDetails;
  }

  public void setApplyJobDetails(ApplyJobDetails applyJobDetails) {
    this.applyJobDetails = applyJobDetails;
  }


  /**
   * Output only. Job completion comment, such as how many entities were seeded, how many warnings were found during conversion, and similar information.
   * @return completionComment
   */
  @javax.annotation.Nullable
  public String getCompletionComment() {
    return completionComment;
  }



  /**
   * Output only. Job completion state, i.e. the final state after the job completed.
   * @return completionState
   */
  @javax.annotation.Nullable
  public CompletionStateEnum getCompletionState() {
    return completionState;
  }



  public BackgroundJobLogEntry convertJobDetails(ConvertJobDetails convertJobDetails) {
    this.convertJobDetails = convertJobDetails;
    return this;
  }

  /**
   * Get convertJobDetails
   * @return convertJobDetails
   */
  @javax.annotation.Nullable
  public ConvertJobDetails getConvertJobDetails() {
    return convertJobDetails;
  }

  public void setConvertJobDetails(ConvertJobDetails convertJobDetails) {
    this.convertJobDetails = convertJobDetails;
  }


  public BackgroundJobLogEntry finishTime(String finishTime) {
    this.finishTime = finishTime;
    return this;
  }

  /**
   * The timestamp when the background job was finished.
   * @return finishTime
   */
  @javax.annotation.Nullable
  public String getFinishTime() {
    return finishTime;
  }

  public void setFinishTime(String finishTime) {
    this.finishTime = finishTime;
  }


  public BackgroundJobLogEntry id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The background job log entry ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BackgroundJobLogEntry importRulesJobDetails(ImportRulesJobDetails importRulesJobDetails) {
    this.importRulesJobDetails = importRulesJobDetails;
    return this;
  }

  /**
   * Get importRulesJobDetails
   * @return importRulesJobDetails
   */
  @javax.annotation.Nullable
  public ImportRulesJobDetails getImportRulesJobDetails() {
    return importRulesJobDetails;
  }

  public void setImportRulesJobDetails(ImportRulesJobDetails importRulesJobDetails) {
    this.importRulesJobDetails = importRulesJobDetails;
  }


  public BackgroundJobLogEntry jobType(JobTypeEnum jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * The type of job that was executed.
   * @return jobType
   */
  @javax.annotation.Nullable
  public JobTypeEnum getJobType() {
    return jobType;
  }

  public void setJobType(JobTypeEnum jobType) {
    this.jobType = jobType;
  }


  /**
   * Output only. Whether the client requested the conversion workspace to be committed after a successful completion of the job.
   * @return requestAutocommit
   */
  @javax.annotation.Nullable
  public Boolean getRequestAutocommit() {
    return requestAutocommit;
  }



  public BackgroundJobLogEntry seedJobDetails(SeedJobDetails seedJobDetails) {
    this.seedJobDetails = seedJobDetails;
    return this;
  }

  /**
   * Get seedJobDetails
   * @return seedJobDetails
   */
  @javax.annotation.Nullable
  public SeedJobDetails getSeedJobDetails() {
    return seedJobDetails;
  }

  public void setSeedJobDetails(SeedJobDetails seedJobDetails) {
    this.seedJobDetails = seedJobDetails;
  }


  public BackgroundJobLogEntry startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The timestamp when the background job was started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackgroundJobLogEntry backgroundJobLogEntry = (BackgroundJobLogEntry) o;
    return Objects.equals(this.applyJobDetails, backgroundJobLogEntry.applyJobDetails) &&
        Objects.equals(this.completionComment, backgroundJobLogEntry.completionComment) &&
        Objects.equals(this.completionState, backgroundJobLogEntry.completionState) &&
        Objects.equals(this.convertJobDetails, backgroundJobLogEntry.convertJobDetails) &&
        Objects.equals(this.finishTime, backgroundJobLogEntry.finishTime) &&
        Objects.equals(this.id, backgroundJobLogEntry.id) &&
        Objects.equals(this.importRulesJobDetails, backgroundJobLogEntry.importRulesJobDetails) &&
        Objects.equals(this.jobType, backgroundJobLogEntry.jobType) &&
        Objects.equals(this.requestAutocommit, backgroundJobLogEntry.requestAutocommit) &&
        Objects.equals(this.seedJobDetails, backgroundJobLogEntry.seedJobDetails) &&
        Objects.equals(this.startTime, backgroundJobLogEntry.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyJobDetails, completionComment, completionState, convertJobDetails, finishTime, id, importRulesJobDetails, jobType, requestAutocommit, seedJobDetails, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackgroundJobLogEntry {\n");
    sb.append("    applyJobDetails: ").append(toIndentedString(applyJobDetails)).append("\n");
    sb.append("    completionComment: ").append(toIndentedString(completionComment)).append("\n");
    sb.append("    completionState: ").append(toIndentedString(completionState)).append("\n");
    sb.append("    convertJobDetails: ").append(toIndentedString(convertJobDetails)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    importRulesJobDetails: ").append(toIndentedString(importRulesJobDetails)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    requestAutocommit: ").append(toIndentedString(requestAutocommit)).append("\n");
    sb.append("    seedJobDetails: ").append(toIndentedString(seedJobDetails)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applyJobDetails");
    openapiFields.add("completionComment");
    openapiFields.add("completionState");
    openapiFields.add("convertJobDetails");
    openapiFields.add("finishTime");
    openapiFields.add("id");
    openapiFields.add("importRulesJobDetails");
    openapiFields.add("jobType");
    openapiFields.add("requestAutocommit");
    openapiFields.add("seedJobDetails");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackgroundJobLogEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackgroundJobLogEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackgroundJobLogEntry is not found in the empty JSON string", BackgroundJobLogEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackgroundJobLogEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackgroundJobLogEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `applyJobDetails`
      if (jsonObj.get("applyJobDetails") != null && !jsonObj.get("applyJobDetails").isJsonNull()) {
        ApplyJobDetails.validateJsonElement(jsonObj.get("applyJobDetails"));
      }
      if ((jsonObj.get("completionComment") != null && !jsonObj.get("completionComment").isJsonNull()) && !jsonObj.get("completionComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completionComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completionComment").toString()));
      }
      if ((jsonObj.get("completionState") != null && !jsonObj.get("completionState").isJsonNull()) && !jsonObj.get("completionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completionState").toString()));
      }
      // validate the optional field `completionState`
      if (jsonObj.get("completionState") != null && !jsonObj.get("completionState").isJsonNull()) {
        CompletionStateEnum.validateJsonElement(jsonObj.get("completionState"));
      }
      // validate the optional field `convertJobDetails`
      if (jsonObj.get("convertJobDetails") != null && !jsonObj.get("convertJobDetails").isJsonNull()) {
        ConvertJobDetails.validateJsonElement(jsonObj.get("convertJobDetails"));
      }
      if ((jsonObj.get("finishTime") != null && !jsonObj.get("finishTime").isJsonNull()) && !jsonObj.get("finishTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finishTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finishTime").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `importRulesJobDetails`
      if (jsonObj.get("importRulesJobDetails") != null && !jsonObj.get("importRulesJobDetails").isJsonNull()) {
        ImportRulesJobDetails.validateJsonElement(jsonObj.get("importRulesJobDetails"));
      }
      if ((jsonObj.get("jobType") != null && !jsonObj.get("jobType").isJsonNull()) && !jsonObj.get("jobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobType").toString()));
      }
      // validate the optional field `jobType`
      if (jsonObj.get("jobType") != null && !jsonObj.get("jobType").isJsonNull()) {
        JobTypeEnum.validateJsonElement(jsonObj.get("jobType"));
      }
      // validate the optional field `seedJobDetails`
      if (jsonObj.get("seedJobDetails") != null && !jsonObj.get("seedJobDetails").isJsonNull()) {
        SeedJobDetails.validateJsonElement(jsonObj.get("seedJobDetails"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackgroundJobLogEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackgroundJobLogEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackgroundJobLogEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackgroundJobLogEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<BackgroundJobLogEntry>() {
           @Override
           public void write(JsonWriter out, BackgroundJobLogEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackgroundJobLogEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackgroundJobLogEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackgroundJobLogEntry
   * @throws IOException if the JSON string is invalid with respect to BackgroundJobLogEntry
   */
  public static BackgroundJobLogEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackgroundJobLogEntry.class);
  }

  /**
   * Convert an instance of BackgroundJobLogEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

