/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DatabaseInstanceEntity;
import org.openapitools.client.model.EntityDdl;
import org.openapitools.client.model.EntityIssue;
import org.openapitools.client.model.EntityMapping;
import org.openapitools.client.model.FunctionEntity;
import org.openapitools.client.model.MaterializedViewEntity;
import org.openapitools.client.model.PackageEntity;
import org.openapitools.client.model.SchemaEntity;
import org.openapitools.client.model.SequenceEntity;
import org.openapitools.client.model.StoredProcedureEntity;
import org.openapitools.client.model.SynonymEntity;
import org.openapitools.client.model.TableEntity;
import org.openapitools.client.model.UDTEntity;
import org.openapitools.client.model.ViewEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The base entity type for all the database related entities. The message contains the entity name, the name of its parent, the entity type, and the specific details per entity type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseEntity {
  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private DatabaseInstanceEntity database;

  public static final String SERIALIZED_NAME_DATABASE_FUNCTION = "databaseFunction";
  @SerializedName(SERIALIZED_NAME_DATABASE_FUNCTION)
  private FunctionEntity databaseFunction;

  public static final String SERIALIZED_NAME_DATABASE_PACKAGE = "databasePackage";
  @SerializedName(SERIALIZED_NAME_DATABASE_PACKAGE)
  private PackageEntity databasePackage;

  public static final String SERIALIZED_NAME_ENTITY_DDL = "entityDdl";
  @SerializedName(SERIALIZED_NAME_ENTITY_DDL)
  private List<EntityDdl> entityDdl = new ArrayList<>();

  /**
   * The type of the database entity (table, view, index, ...).
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    UNSPECIFIED("DATABASE_ENTITY_TYPE_UNSPECIFIED"),
    
    SCHEMA("DATABASE_ENTITY_TYPE_SCHEMA"),
    
    TABLE("DATABASE_ENTITY_TYPE_TABLE"),
    
    COLUMN("DATABASE_ENTITY_TYPE_COLUMN"),
    
    CONSTRAINT("DATABASE_ENTITY_TYPE_CONSTRAINT"),
    
    INDEX("DATABASE_ENTITY_TYPE_INDEX"),
    
    TRIGGER("DATABASE_ENTITY_TYPE_TRIGGER"),
    
    VIEW("DATABASE_ENTITY_TYPE_VIEW"),
    
    SEQUENCE("DATABASE_ENTITY_TYPE_SEQUENCE"),
    
    STORED_PROCEDURE("DATABASE_ENTITY_TYPE_STORED_PROCEDURE"),
    
    FUNCTION("DATABASE_ENTITY_TYPE_FUNCTION"),
    
    SYNONYM("DATABASE_ENTITY_TYPE_SYNONYM"),
    
    DATABASE_PACKAGE("DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"),
    
    UDT("DATABASE_ENTITY_TYPE_UDT"),
    
    MATERIALIZED_VIEW("DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"),
    
    DATABASE("DATABASE_ENTITY_TYPE_DATABASE");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private List<EntityIssue> issues = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAPPINGS = "mappings";
  @SerializedName(SERIALIZED_NAME_MAPPINGS)
  private List<EntityMapping> mappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATERIALIZED_VIEW = "materializedView";
  @SerializedName(SERIALIZED_NAME_MATERIALIZED_VIEW)
  private MaterializedViewEntity materializedView;

  public static final String SERIALIZED_NAME_PARENT_ENTITY = "parentEntity";
  @SerializedName(SERIALIZED_NAME_PARENT_ENTITY)
  private String parentEntity;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private SchemaEntity schema;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private SequenceEntity sequence;

  public static final String SERIALIZED_NAME_SHORT_NAME = "shortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_STORED_PROCEDURE = "storedProcedure";
  @SerializedName(SERIALIZED_NAME_STORED_PROCEDURE)
  private StoredProcedureEntity storedProcedure;

  public static final String SERIALIZED_NAME_SYNONYM = "synonym";
  @SerializedName(SERIALIZED_NAME_SYNONYM)
  private SynonymEntity synonym;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private TableEntity table;

  /**
   * The type of tree the entity belongs to.
   */
  @JsonAdapter(TreeEnum.Adapter.class)
  public enum TreeEnum {
    TREE_TYPE_UNSPECIFIED("TREE_TYPE_UNSPECIFIED"),
    
    SOURCE("SOURCE"),
    
    DRAFT("DRAFT"),
    
    DESTINATION("DESTINATION");

    private String value;

    TreeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TreeEnum fromValue(String value) {
      for (TreeEnum b : TreeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TreeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TreeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TreeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TreeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TreeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TREE = "tree";
  @SerializedName(SERIALIZED_NAME_TREE)
  private TreeEnum tree;

  public static final String SERIALIZED_NAME_UDT = "udt";
  @SerializedName(SERIALIZED_NAME_UDT)
  private UDTEntity udt;

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  private ViewEntity view;

  public DatabaseEntity() {
  }

  public DatabaseEntity database(DatabaseInstanceEntity database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nullable
  public DatabaseInstanceEntity getDatabase() {
    return database;
  }

  public void setDatabase(DatabaseInstanceEntity database) {
    this.database = database;
  }


  public DatabaseEntity databaseFunction(FunctionEntity databaseFunction) {
    this.databaseFunction = databaseFunction;
    return this;
  }

  /**
   * Get databaseFunction
   * @return databaseFunction
   */
  @javax.annotation.Nullable
  public FunctionEntity getDatabaseFunction() {
    return databaseFunction;
  }

  public void setDatabaseFunction(FunctionEntity databaseFunction) {
    this.databaseFunction = databaseFunction;
  }


  public DatabaseEntity databasePackage(PackageEntity databasePackage) {
    this.databasePackage = databasePackage;
    return this;
  }

  /**
   * Get databasePackage
   * @return databasePackage
   */
  @javax.annotation.Nullable
  public PackageEntity getDatabasePackage() {
    return databasePackage;
  }

  public void setDatabasePackage(PackageEntity databasePackage) {
    this.databasePackage = databasePackage;
  }


  public DatabaseEntity entityDdl(List<EntityDdl> entityDdl) {
    this.entityDdl = entityDdl;
    return this;
  }

  public DatabaseEntity addEntityDdlItem(EntityDdl entityDdlItem) {
    if (this.entityDdl == null) {
      this.entityDdl = new ArrayList<>();
    }
    this.entityDdl.add(entityDdlItem);
    return this;
  }

  /**
   * Details about the entity DDL script. Multiple DDL scripts are provided for child entities such as a table entity will have one DDL for the table with additional DDLs for each index, constraint and such.
   * @return entityDdl
   */
  @javax.annotation.Nullable
  public List<EntityDdl> getEntityDdl() {
    return entityDdl;
  }

  public void setEntityDdl(List<EntityDdl> entityDdl) {
    this.entityDdl = entityDdl;
  }


  public DatabaseEntity entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * The type of the database entity (table, view, index, ...).
   * @return entityType
   */
  @javax.annotation.Nullable
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public DatabaseEntity issues(List<EntityIssue> issues) {
    this.issues = issues;
    return this;
  }

  public DatabaseEntity addIssuesItem(EntityIssue issuesItem) {
    if (this.issues == null) {
      this.issues = new ArrayList<>();
    }
    this.issues.add(issuesItem);
    return this;
  }

  /**
   * Details about the various issues found for the entity.
   * @return issues
   */
  @javax.annotation.Nullable
  public List<EntityIssue> getIssues() {
    return issues;
  }

  public void setIssues(List<EntityIssue> issues) {
    this.issues = issues;
  }


  public DatabaseEntity mappings(List<EntityMapping> mappings) {
    this.mappings = mappings;
    return this;
  }

  public DatabaseEntity addMappingsItem(EntityMapping mappingsItem) {
    if (this.mappings == null) {
      this.mappings = new ArrayList<>();
    }
    this.mappings.add(mappingsItem);
    return this;
  }

  /**
   * Details about entity mappings. For source tree entities, this holds the draft entities which were generated by the mapping rules. For draft tree entities, this holds the source entities which were converted to form the draft entity. Destination entities will have no mapping details.
   * @return mappings
   */
  @javax.annotation.Nullable
  public List<EntityMapping> getMappings() {
    return mappings;
  }

  public void setMappings(List<EntityMapping> mappings) {
    this.mappings = mappings;
  }


  public DatabaseEntity materializedView(MaterializedViewEntity materializedView) {
    this.materializedView = materializedView;
    return this;
  }

  /**
   * Get materializedView
   * @return materializedView
   */
  @javax.annotation.Nullable
  public MaterializedViewEntity getMaterializedView() {
    return materializedView;
  }

  public void setMaterializedView(MaterializedViewEntity materializedView) {
    this.materializedView = materializedView;
  }


  public DatabaseEntity parentEntity(String parentEntity) {
    this.parentEntity = parentEntity;
    return this;
  }

  /**
   * The full name of the parent entity (e.g. schema name).
   * @return parentEntity
   */
  @javax.annotation.Nullable
  public String getParentEntity() {
    return parentEntity;
  }

  public void setParentEntity(String parentEntity) {
    this.parentEntity = parentEntity;
  }


  public DatabaseEntity schema(SchemaEntity schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public SchemaEntity getSchema() {
    return schema;
  }

  public void setSchema(SchemaEntity schema) {
    this.schema = schema;
  }


  public DatabaseEntity sequence(SequenceEntity sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Get sequence
   * @return sequence
   */
  @javax.annotation.Nullable
  public SequenceEntity getSequence() {
    return sequence;
  }

  public void setSequence(SequenceEntity sequence) {
    this.sequence = sequence;
  }


  public DatabaseEntity shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * The short name (e.g. table name) of the entity.
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public DatabaseEntity storedProcedure(StoredProcedureEntity storedProcedure) {
    this.storedProcedure = storedProcedure;
    return this;
  }

  /**
   * Get storedProcedure
   * @return storedProcedure
   */
  @javax.annotation.Nullable
  public StoredProcedureEntity getStoredProcedure() {
    return storedProcedure;
  }

  public void setStoredProcedure(StoredProcedureEntity storedProcedure) {
    this.storedProcedure = storedProcedure;
  }


  public DatabaseEntity synonym(SynonymEntity synonym) {
    this.synonym = synonym;
    return this;
  }

  /**
   * Get synonym
   * @return synonym
   */
  @javax.annotation.Nullable
  public SynonymEntity getSynonym() {
    return synonym;
  }

  public void setSynonym(SynonymEntity synonym) {
    this.synonym = synonym;
  }


  public DatabaseEntity table(TableEntity table) {
    this.table = table;
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nullable
  public TableEntity getTable() {
    return table;
  }

  public void setTable(TableEntity table) {
    this.table = table;
  }


  public DatabaseEntity tree(TreeEnum tree) {
    this.tree = tree;
    return this;
  }

  /**
   * The type of tree the entity belongs to.
   * @return tree
   */
  @javax.annotation.Nullable
  public TreeEnum getTree() {
    return tree;
  }

  public void setTree(TreeEnum tree) {
    this.tree = tree;
  }


  public DatabaseEntity udt(UDTEntity udt) {
    this.udt = udt;
    return this;
  }

  /**
   * Get udt
   * @return udt
   */
  @javax.annotation.Nullable
  public UDTEntity getUdt() {
    return udt;
  }

  public void setUdt(UDTEntity udt) {
    this.udt = udt;
  }


  public DatabaseEntity view(ViewEntity view) {
    this.view = view;
    return this;
  }

  /**
   * Get view
   * @return view
   */
  @javax.annotation.Nullable
  public ViewEntity getView() {
    return view;
  }

  public void setView(ViewEntity view) {
    this.view = view;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseEntity databaseEntity = (DatabaseEntity) o;
    return Objects.equals(this.database, databaseEntity.database) &&
        Objects.equals(this.databaseFunction, databaseEntity.databaseFunction) &&
        Objects.equals(this.databasePackage, databaseEntity.databasePackage) &&
        Objects.equals(this.entityDdl, databaseEntity.entityDdl) &&
        Objects.equals(this.entityType, databaseEntity.entityType) &&
        Objects.equals(this.issues, databaseEntity.issues) &&
        Objects.equals(this.mappings, databaseEntity.mappings) &&
        Objects.equals(this.materializedView, databaseEntity.materializedView) &&
        Objects.equals(this.parentEntity, databaseEntity.parentEntity) &&
        Objects.equals(this.schema, databaseEntity.schema) &&
        Objects.equals(this.sequence, databaseEntity.sequence) &&
        Objects.equals(this.shortName, databaseEntity.shortName) &&
        Objects.equals(this.storedProcedure, databaseEntity.storedProcedure) &&
        Objects.equals(this.synonym, databaseEntity.synonym) &&
        Objects.equals(this.table, databaseEntity.table) &&
        Objects.equals(this.tree, databaseEntity.tree) &&
        Objects.equals(this.udt, databaseEntity.udt) &&
        Objects.equals(this.view, databaseEntity.view);
  }

  @Override
  public int hashCode() {
    return Objects.hash(database, databaseFunction, databasePackage, entityDdl, entityType, issues, mappings, materializedView, parentEntity, schema, sequence, shortName, storedProcedure, synonym, table, tree, udt, view);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseEntity {\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    databaseFunction: ").append(toIndentedString(databaseFunction)).append("\n");
    sb.append("    databasePackage: ").append(toIndentedString(databasePackage)).append("\n");
    sb.append("    entityDdl: ").append(toIndentedString(entityDdl)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    materializedView: ").append(toIndentedString(materializedView)).append("\n");
    sb.append("    parentEntity: ").append(toIndentedString(parentEntity)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    storedProcedure: ").append(toIndentedString(storedProcedure)).append("\n");
    sb.append("    synonym: ").append(toIndentedString(synonym)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    tree: ").append(toIndentedString(tree)).append("\n");
    sb.append("    udt: ").append(toIndentedString(udt)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("database");
    openapiFields.add("databaseFunction");
    openapiFields.add("databasePackage");
    openapiFields.add("entityDdl");
    openapiFields.add("entityType");
    openapiFields.add("issues");
    openapiFields.add("mappings");
    openapiFields.add("materializedView");
    openapiFields.add("parentEntity");
    openapiFields.add("schema");
    openapiFields.add("sequence");
    openapiFields.add("shortName");
    openapiFields.add("storedProcedure");
    openapiFields.add("synonym");
    openapiFields.add("table");
    openapiFields.add("tree");
    openapiFields.add("udt");
    openapiFields.add("view");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseEntity is not found in the empty JSON string", DatabaseEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `database`
      if (jsonObj.get("database") != null && !jsonObj.get("database").isJsonNull()) {
        DatabaseInstanceEntity.validateJsonElement(jsonObj.get("database"));
      }
      // validate the optional field `databaseFunction`
      if (jsonObj.get("databaseFunction") != null && !jsonObj.get("databaseFunction").isJsonNull()) {
        FunctionEntity.validateJsonElement(jsonObj.get("databaseFunction"));
      }
      // validate the optional field `databasePackage`
      if (jsonObj.get("databasePackage") != null && !jsonObj.get("databasePackage").isJsonNull()) {
        PackageEntity.validateJsonElement(jsonObj.get("databasePackage"));
      }
      if (jsonObj.get("entityDdl") != null && !jsonObj.get("entityDdl").isJsonNull()) {
        JsonArray jsonArrayentityDdl = jsonObj.getAsJsonArray("entityDdl");
        if (jsonArrayentityDdl != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entityDdl").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entityDdl` to be an array in the JSON string but got `%s`", jsonObj.get("entityDdl").toString()));
          }

          // validate the optional field `entityDdl` (array)
          for (int i = 0; i < jsonArrayentityDdl.size(); i++) {
            EntityDdl.validateJsonElement(jsonArrayentityDdl.get(i));
          };
        }
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the optional field `entityType`
      if (jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) {
        EntityTypeEnum.validateJsonElement(jsonObj.get("entityType"));
      }
      if (jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull()) {
        JsonArray jsonArrayissues = jsonObj.getAsJsonArray("issues");
        if (jsonArrayissues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("issues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `issues` to be an array in the JSON string but got `%s`", jsonObj.get("issues").toString()));
          }

          // validate the optional field `issues` (array)
          for (int i = 0; i < jsonArrayissues.size(); i++) {
            EntityIssue.validateJsonElement(jsonArrayissues.get(i));
          };
        }
      }
      if (jsonObj.get("mappings") != null && !jsonObj.get("mappings").isJsonNull()) {
        JsonArray jsonArraymappings = jsonObj.getAsJsonArray("mappings");
        if (jsonArraymappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mappings` to be an array in the JSON string but got `%s`", jsonObj.get("mappings").toString()));
          }

          // validate the optional field `mappings` (array)
          for (int i = 0; i < jsonArraymappings.size(); i++) {
            EntityMapping.validateJsonElement(jsonArraymappings.get(i));
          };
        }
      }
      // validate the optional field `materializedView`
      if (jsonObj.get("materializedView") != null && !jsonObj.get("materializedView").isJsonNull()) {
        MaterializedViewEntity.validateJsonElement(jsonObj.get("materializedView"));
      }
      if ((jsonObj.get("parentEntity") != null && !jsonObj.get("parentEntity").isJsonNull()) && !jsonObj.get("parentEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentEntity").toString()));
      }
      // validate the optional field `schema`
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) {
        SchemaEntity.validateJsonElement(jsonObj.get("schema"));
      }
      // validate the optional field `sequence`
      if (jsonObj.get("sequence") != null && !jsonObj.get("sequence").isJsonNull()) {
        SequenceEntity.validateJsonElement(jsonObj.get("sequence"));
      }
      if ((jsonObj.get("shortName") != null && !jsonObj.get("shortName").isJsonNull()) && !jsonObj.get("shortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortName").toString()));
      }
      // validate the optional field `storedProcedure`
      if (jsonObj.get("storedProcedure") != null && !jsonObj.get("storedProcedure").isJsonNull()) {
        StoredProcedureEntity.validateJsonElement(jsonObj.get("storedProcedure"));
      }
      // validate the optional field `synonym`
      if (jsonObj.get("synonym") != null && !jsonObj.get("synonym").isJsonNull()) {
        SynonymEntity.validateJsonElement(jsonObj.get("synonym"));
      }
      // validate the optional field `table`
      if (jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) {
        TableEntity.validateJsonElement(jsonObj.get("table"));
      }
      if ((jsonObj.get("tree") != null && !jsonObj.get("tree").isJsonNull()) && !jsonObj.get("tree").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tree` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tree").toString()));
      }
      // validate the optional field `tree`
      if (jsonObj.get("tree") != null && !jsonObj.get("tree").isJsonNull()) {
        TreeEnum.validateJsonElement(jsonObj.get("tree"));
      }
      // validate the optional field `udt`
      if (jsonObj.get("udt") != null && !jsonObj.get("udt").isJsonNull()) {
        UDTEntity.validateJsonElement(jsonObj.get("udt"));
      }
      // validate the optional field `view`
      if (jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) {
        ViewEntity.validateJsonElement(jsonObj.get("view"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseEntity>() {
           @Override
           public void write(JsonWriter out, DatabaseEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseEntity
   * @throws IOException if the JSON string is invalid with respect to DatabaseEntity
   */
  public static DatabaseEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseEntity.class);
  }

  /**
   * Convert an instance of DatabaseEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

