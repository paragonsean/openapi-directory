/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ColumnEntity;
import org.openapitools.client.model.ConstraintEntity;
import org.openapitools.client.model.IndexEntity;
import org.openapitools.client.model.TriggerEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Table&#39;s parent is a schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableEntity {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<ColumnEntity> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private List<ConstraintEntity> constraints = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_FEATURES = "customFeatures";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FEATURES)
  private Map<String, Object> customFeatures = new HashMap<>();

  public static final String SERIALIZED_NAME_INDICES = "indices";
  @SerializedName(SERIALIZED_NAME_INDICES)
  private List<IndexEntity> indices = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIGGERS = "triggers";
  @SerializedName(SERIALIZED_NAME_TRIGGERS)
  private List<TriggerEntity> triggers = new ArrayList<>();

  public TableEntity() {
  }

  public TableEntity columns(List<ColumnEntity> columns) {
    this.columns = columns;
    return this;
  }

  public TableEntity addColumnsItem(ColumnEntity columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * Table columns.
   * @return columns
   */
  @javax.annotation.Nullable
  public List<ColumnEntity> getColumns() {
    return columns;
  }

  public void setColumns(List<ColumnEntity> columns) {
    this.columns = columns;
  }


  public TableEntity comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment associated with the table.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public TableEntity constraints(List<ConstraintEntity> constraints) {
    this.constraints = constraints;
    return this;
  }

  public TableEntity addConstraintsItem(ConstraintEntity constraintsItem) {
    if (this.constraints == null) {
      this.constraints = new ArrayList<>();
    }
    this.constraints.add(constraintsItem);
    return this;
  }

  /**
   * Table constraints.
   * @return constraints
   */
  @javax.annotation.Nullable
  public List<ConstraintEntity> getConstraints() {
    return constraints;
  }

  public void setConstraints(List<ConstraintEntity> constraints) {
    this.constraints = constraints;
  }


  public TableEntity customFeatures(Map<String, Object> customFeatures) {
    this.customFeatures = customFeatures;
    return this;
  }

  public TableEntity putCustomFeaturesItem(String key, Object customFeaturesItem) {
    if (this.customFeatures == null) {
      this.customFeatures = new HashMap<>();
    }
    this.customFeatures.put(key, customFeaturesItem);
    return this;
  }

  /**
   * Custom engine specific features.
   * @return customFeatures
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCustomFeatures() {
    return customFeatures;
  }

  public void setCustomFeatures(Map<String, Object> customFeatures) {
    this.customFeatures = customFeatures;
  }


  public TableEntity indices(List<IndexEntity> indices) {
    this.indices = indices;
    return this;
  }

  public TableEntity addIndicesItem(IndexEntity indicesItem) {
    if (this.indices == null) {
      this.indices = new ArrayList<>();
    }
    this.indices.add(indicesItem);
    return this;
  }

  /**
   * Table indices.
   * @return indices
   */
  @javax.annotation.Nullable
  public List<IndexEntity> getIndices() {
    return indices;
  }

  public void setIndices(List<IndexEntity> indices) {
    this.indices = indices;
  }


  public TableEntity triggers(List<TriggerEntity> triggers) {
    this.triggers = triggers;
    return this;
  }

  public TableEntity addTriggersItem(TriggerEntity triggersItem) {
    if (this.triggers == null) {
      this.triggers = new ArrayList<>();
    }
    this.triggers.add(triggersItem);
    return this;
  }

  /**
   * Table triggers.
   * @return triggers
   */
  @javax.annotation.Nullable
  public List<TriggerEntity> getTriggers() {
    return triggers;
  }

  public void setTriggers(List<TriggerEntity> triggers) {
    this.triggers = triggers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableEntity tableEntity = (TableEntity) o;
    return Objects.equals(this.columns, tableEntity.columns) &&
        Objects.equals(this.comment, tableEntity.comment) &&
        Objects.equals(this.constraints, tableEntity.constraints) &&
        Objects.equals(this.customFeatures, tableEntity.customFeatures) &&
        Objects.equals(this.indices, tableEntity.indices) &&
        Objects.equals(this.triggers, tableEntity.triggers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, comment, constraints, customFeatures, indices, triggers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableEntity {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    customFeatures: ").append(toIndentedString(customFeatures)).append("\n");
    sb.append("    indices: ").append(toIndentedString(indices)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columns");
    openapiFields.add("comment");
    openapiFields.add("constraints");
    openapiFields.add("customFeatures");
    openapiFields.add("indices");
    openapiFields.add("triggers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableEntity is not found in the empty JSON string", TableEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull()) {
        JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
        if (jsonArraycolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
          }

          // validate the optional field `columns` (array)
          for (int i = 0; i < jsonArraycolumns.size(); i++) {
            ColumnEntity.validateJsonElement(jsonArraycolumns.get(i));
          };
        }
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (jsonObj.get("constraints") != null && !jsonObj.get("constraints").isJsonNull()) {
        JsonArray jsonArrayconstraints = jsonObj.getAsJsonArray("constraints");
        if (jsonArrayconstraints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("constraints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `constraints` to be an array in the JSON string but got `%s`", jsonObj.get("constraints").toString()));
          }

          // validate the optional field `constraints` (array)
          for (int i = 0; i < jsonArrayconstraints.size(); i++) {
            ConstraintEntity.validateJsonElement(jsonArrayconstraints.get(i));
          };
        }
      }
      if (jsonObj.get("indices") != null && !jsonObj.get("indices").isJsonNull()) {
        JsonArray jsonArrayindices = jsonObj.getAsJsonArray("indices");
        if (jsonArrayindices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("indices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `indices` to be an array in the JSON string but got `%s`", jsonObj.get("indices").toString()));
          }

          // validate the optional field `indices` (array)
          for (int i = 0; i < jsonArrayindices.size(); i++) {
            IndexEntity.validateJsonElement(jsonArrayindices.get(i));
          };
        }
      }
      if (jsonObj.get("triggers") != null && !jsonObj.get("triggers").isJsonNull()) {
        JsonArray jsonArraytriggers = jsonObj.getAsJsonArray("triggers");
        if (jsonArraytriggers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("triggers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `triggers` to be an array in the JSON string but got `%s`", jsonObj.get("triggers").toString()));
          }

          // validate the optional field `triggers` (array)
          for (int i = 0; i < jsonArraytriggers.size(); i++) {
            TriggerEntity.validateJsonElement(jsonArraytriggers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<TableEntity>() {
           @Override
           public void write(JsonWriter out, TableEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableEntity
   * @throws IOException if the JSON string is invalid with respect to TableEntity
   */
  public static TableEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableEntity.class);
  }

  /**
   * Convert an instance of TableEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

