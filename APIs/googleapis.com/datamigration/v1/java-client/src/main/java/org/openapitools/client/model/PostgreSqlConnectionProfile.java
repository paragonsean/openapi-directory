/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PrivateServiceConnectConnectivity;
import org.openapitools.client.model.SslConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies connection parameters required specifically for PostgreSQL databases.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostgreSqlConnectionProfile {
  public static final String SERIALIZED_NAME_ALLOYDB_CLUSTER_ID = "alloydbClusterId";
  @SerializedName(SERIALIZED_NAME_ALLOYDB_CLUSTER_ID)
  private String alloydbClusterId;

  public static final String SERIALIZED_NAME_CLOUD_SQL_ID = "cloudSqlId";
  @SerializedName(SERIALIZED_NAME_CLOUD_SQL_ID)
  private String cloudSqlId;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  /**
   * Output only. If the source is a Cloud SQL database, this field indicates the network architecture it&#39;s associated with.
   */
  @JsonAdapter(NetworkArchitectureEnum.Adapter.class)
  public enum NetworkArchitectureEnum {
    UNSPECIFIED("NETWORK_ARCHITECTURE_UNSPECIFIED"),
    
    OLD_CSQL_PRODUCER("NETWORK_ARCHITECTURE_OLD_CSQL_PRODUCER"),
    
    NEW_CSQL_PRODUCER("NETWORK_ARCHITECTURE_NEW_CSQL_PRODUCER");

    private String value;

    NetworkArchitectureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkArchitectureEnum fromValue(String value) {
      for (NetworkArchitectureEnum b : NetworkArchitectureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkArchitectureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkArchitectureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkArchitectureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetworkArchitectureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NetworkArchitectureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NETWORK_ARCHITECTURE = "networkArchitecture";
  @SerializedName(SERIALIZED_NAME_NETWORK_ARCHITECTURE)
  private NetworkArchitectureEnum networkArchitecture;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PASSWORD_SET = "passwordSet";
  @SerializedName(SERIALIZED_NAME_PASSWORD_SET)
  private Boolean passwordSet;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PRIVATE_SERVICE_CONNECT_CONNECTIVITY = "privateServiceConnectConnectivity";
  @SerializedName(SERIALIZED_NAME_PRIVATE_SERVICE_CONNECT_CONNECTIVITY)
  private PrivateServiceConnectConnectivity privateServiceConnectConnectivity;

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private SslConfig ssl;

  public static final String SERIALIZED_NAME_STATIC_IP_CONNECTIVITY = "staticIpConnectivity";
  @SerializedName(SERIALIZED_NAME_STATIC_IP_CONNECTIVITY)
  private Object staticIpConnectivity;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public PostgreSqlConnectionProfile() {
  }

  public PostgreSqlConnectionProfile(
     NetworkArchitectureEnum networkArchitecture, 
     Boolean passwordSet
  ) {
    this();
    this.networkArchitecture = networkArchitecture;
    this.passwordSet = passwordSet;
  }

  public PostgreSqlConnectionProfile alloydbClusterId(String alloydbClusterId) {
    this.alloydbClusterId = alloydbClusterId;
    return this;
  }

  /**
   * Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
   * @return alloydbClusterId
   */
  @javax.annotation.Nullable
  public String getAlloydbClusterId() {
    return alloydbClusterId;
  }

  public void setAlloydbClusterId(String alloydbClusterId) {
    this.alloydbClusterId = alloydbClusterId;
  }


  public PostgreSqlConnectionProfile cloudSqlId(String cloudSqlId) {
    this.cloudSqlId = cloudSqlId;
    return this;
  }

  /**
   * If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
   * @return cloudSqlId
   */
  @javax.annotation.Nullable
  public String getCloudSqlId() {
    return cloudSqlId;
  }

  public void setCloudSqlId(String cloudSqlId) {
    this.cloudSqlId = cloudSqlId;
  }


  public PostgreSqlConnectionProfile host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Required. The IP or hostname of the source PostgreSQL database.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  /**
   * Output only. If the source is a Cloud SQL database, this field indicates the network architecture it&#39;s associated with.
   * @return networkArchitecture
   */
  @javax.annotation.Nullable
  public NetworkArchitectureEnum getNetworkArchitecture() {
    return networkArchitecture;
  }



  public PostgreSqlConnectionProfile password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  /**
   * Output only. Indicates If this connection profile password is stored.
   * @return passwordSet
   */
  @javax.annotation.Nullable
  public Boolean getPasswordSet() {
    return passwordSet;
  }



  public PostgreSqlConnectionProfile port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Required. The network port of the source PostgreSQL database.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public PostgreSqlConnectionProfile privateServiceConnectConnectivity(PrivateServiceConnectConnectivity privateServiceConnectConnectivity) {
    this.privateServiceConnectConnectivity = privateServiceConnectConnectivity;
    return this;
  }

  /**
   * Get privateServiceConnectConnectivity
   * @return privateServiceConnectConnectivity
   */
  @javax.annotation.Nullable
  public PrivateServiceConnectConnectivity getPrivateServiceConnectConnectivity() {
    return privateServiceConnectConnectivity;
  }

  public void setPrivateServiceConnectConnectivity(PrivateServiceConnectConnectivity privateServiceConnectConnectivity) {
    this.privateServiceConnectConnectivity = privateServiceConnectConnectivity;
  }


  public PostgreSqlConnectionProfile ssl(SslConfig ssl) {
    this.ssl = ssl;
    return this;
  }

  /**
   * Get ssl
   * @return ssl
   */
  @javax.annotation.Nullable
  public SslConfig getSsl() {
    return ssl;
  }

  public void setSsl(SslConfig ssl) {
    this.ssl = ssl;
  }


  public PostgreSqlConnectionProfile staticIpConnectivity(Object staticIpConnectivity) {
    this.staticIpConnectivity = staticIpConnectivity;
    return this;
  }

  /**
   * The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
   * @return staticIpConnectivity
   */
  @javax.annotation.Nullable
  public Object getStaticIpConnectivity() {
    return staticIpConnectivity;
  }

  public void setStaticIpConnectivity(Object staticIpConnectivity) {
    this.staticIpConnectivity = staticIpConnectivity;
  }


  public PostgreSqlConnectionProfile username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostgreSqlConnectionProfile postgreSqlConnectionProfile = (PostgreSqlConnectionProfile) o;
    return Objects.equals(this.alloydbClusterId, postgreSqlConnectionProfile.alloydbClusterId) &&
        Objects.equals(this.cloudSqlId, postgreSqlConnectionProfile.cloudSqlId) &&
        Objects.equals(this.host, postgreSqlConnectionProfile.host) &&
        Objects.equals(this.networkArchitecture, postgreSqlConnectionProfile.networkArchitecture) &&
        Objects.equals(this.password, postgreSqlConnectionProfile.password) &&
        Objects.equals(this.passwordSet, postgreSqlConnectionProfile.passwordSet) &&
        Objects.equals(this.port, postgreSqlConnectionProfile.port) &&
        Objects.equals(this.privateServiceConnectConnectivity, postgreSqlConnectionProfile.privateServiceConnectConnectivity) &&
        Objects.equals(this.ssl, postgreSqlConnectionProfile.ssl) &&
        Objects.equals(this.staticIpConnectivity, postgreSqlConnectionProfile.staticIpConnectivity) &&
        Objects.equals(this.username, postgreSqlConnectionProfile.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alloydbClusterId, cloudSqlId, host, networkArchitecture, password, passwordSet, port, privateServiceConnectConnectivity, ssl, staticIpConnectivity, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostgreSqlConnectionProfile {\n");
    sb.append("    alloydbClusterId: ").append(toIndentedString(alloydbClusterId)).append("\n");
    sb.append("    cloudSqlId: ").append(toIndentedString(cloudSqlId)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    networkArchitecture: ").append(toIndentedString(networkArchitecture)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    passwordSet: ").append(toIndentedString(passwordSet)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    privateServiceConnectConnectivity: ").append(toIndentedString(privateServiceConnectConnectivity)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    staticIpConnectivity: ").append(toIndentedString(staticIpConnectivity)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alloydbClusterId");
    openapiFields.add("cloudSqlId");
    openapiFields.add("host");
    openapiFields.add("networkArchitecture");
    openapiFields.add("password");
    openapiFields.add("passwordSet");
    openapiFields.add("port");
    openapiFields.add("privateServiceConnectConnectivity");
    openapiFields.add("ssl");
    openapiFields.add("staticIpConnectivity");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostgreSqlConnectionProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostgreSqlConnectionProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostgreSqlConnectionProfile is not found in the empty JSON string", PostgreSqlConnectionProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostgreSqlConnectionProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostgreSqlConnectionProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alloydbClusterId") != null && !jsonObj.get("alloydbClusterId").isJsonNull()) && !jsonObj.get("alloydbClusterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alloydbClusterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alloydbClusterId").toString()));
      }
      if ((jsonObj.get("cloudSqlId") != null && !jsonObj.get("cloudSqlId").isJsonNull()) && !jsonObj.get("cloudSqlId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudSqlId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudSqlId").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("networkArchitecture") != null && !jsonObj.get("networkArchitecture").isJsonNull()) && !jsonObj.get("networkArchitecture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkArchitecture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkArchitecture").toString()));
      }
      // validate the optional field `networkArchitecture`
      if (jsonObj.get("networkArchitecture") != null && !jsonObj.get("networkArchitecture").isJsonNull()) {
        NetworkArchitectureEnum.validateJsonElement(jsonObj.get("networkArchitecture"));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the optional field `privateServiceConnectConnectivity`
      if (jsonObj.get("privateServiceConnectConnectivity") != null && !jsonObj.get("privateServiceConnectConnectivity").isJsonNull()) {
        PrivateServiceConnectConnectivity.validateJsonElement(jsonObj.get("privateServiceConnectConnectivity"));
      }
      // validate the optional field `ssl`
      if (jsonObj.get("ssl") != null && !jsonObj.get("ssl").isJsonNull()) {
        SslConfig.validateJsonElement(jsonObj.get("ssl"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostgreSqlConnectionProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostgreSqlConnectionProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostgreSqlConnectionProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostgreSqlConnectionProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<PostgreSqlConnectionProfile>() {
           @Override
           public void write(JsonWriter out, PostgreSqlConnectionProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostgreSqlConnectionProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostgreSqlConnectionProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostgreSqlConnectionProfile
   * @throws IOException if the JSON string is invalid with respect to PostgreSqlConnectionProfile
   */
  public static PostgreSqlConnectionProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostgreSqlConnectionProfile.class);
  }

  /**
   * Convert an instance of PostgreSqlConnectionProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

