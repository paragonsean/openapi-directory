/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filter for fixed point number data types such as NUMERIC/NUMBER
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceNumericFilter {
  /**
   * Required. Enum to set the option defining the datatypes numeric filter has to be applied to
   */
  @JsonAdapter(NumericFilterOptionEnum.Adapter.class)
  public enum NumericFilterOptionEnum {
    UNSPECIFIED("NUMERIC_FILTER_OPTION_UNSPECIFIED"),
    
    ALL("NUMERIC_FILTER_OPTION_ALL"),
    
    LIMIT("NUMERIC_FILTER_OPTION_LIMIT"),
    
    LIMITLESS("NUMERIC_FILTER_OPTION_LIMITLESS");

    private String value;

    NumericFilterOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NumericFilterOptionEnum fromValue(String value) {
      for (NumericFilterOptionEnum b : NumericFilterOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NumericFilterOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NumericFilterOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NumericFilterOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NumericFilterOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NumericFilterOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NUMERIC_FILTER_OPTION = "numericFilterOption";
  @SerializedName(SERIALIZED_NAME_NUMERIC_FILTER_OPTION)
  private NumericFilterOptionEnum numericFilterOption;

  public static final String SERIALIZED_NAME_SOURCE_MAX_PRECISION_FILTER = "sourceMaxPrecisionFilter";
  @SerializedName(SERIALIZED_NAME_SOURCE_MAX_PRECISION_FILTER)
  private Integer sourceMaxPrecisionFilter;

  public static final String SERIALIZED_NAME_SOURCE_MAX_SCALE_FILTER = "sourceMaxScaleFilter";
  @SerializedName(SERIALIZED_NAME_SOURCE_MAX_SCALE_FILTER)
  private Integer sourceMaxScaleFilter;

  public static final String SERIALIZED_NAME_SOURCE_MIN_PRECISION_FILTER = "sourceMinPrecisionFilter";
  @SerializedName(SERIALIZED_NAME_SOURCE_MIN_PRECISION_FILTER)
  private Integer sourceMinPrecisionFilter;

  public static final String SERIALIZED_NAME_SOURCE_MIN_SCALE_FILTER = "sourceMinScaleFilter";
  @SerializedName(SERIALIZED_NAME_SOURCE_MIN_SCALE_FILTER)
  private Integer sourceMinScaleFilter;

  public SourceNumericFilter() {
  }

  public SourceNumericFilter numericFilterOption(NumericFilterOptionEnum numericFilterOption) {
    this.numericFilterOption = numericFilterOption;
    return this;
  }

  /**
   * Required. Enum to set the option defining the datatypes numeric filter has to be applied to
   * @return numericFilterOption
   */
  @javax.annotation.Nullable
  public NumericFilterOptionEnum getNumericFilterOption() {
    return numericFilterOption;
  }

  public void setNumericFilterOption(NumericFilterOptionEnum numericFilterOption) {
    this.numericFilterOption = numericFilterOption;
  }


  public SourceNumericFilter sourceMaxPrecisionFilter(Integer sourceMaxPrecisionFilter) {
    this.sourceMaxPrecisionFilter = sourceMaxPrecisionFilter;
    return this;
  }

  /**
   * Optional. The filter will match columns with precision smaller than or equal to this number.
   * @return sourceMaxPrecisionFilter
   */
  @javax.annotation.Nullable
  public Integer getSourceMaxPrecisionFilter() {
    return sourceMaxPrecisionFilter;
  }

  public void setSourceMaxPrecisionFilter(Integer sourceMaxPrecisionFilter) {
    this.sourceMaxPrecisionFilter = sourceMaxPrecisionFilter;
  }


  public SourceNumericFilter sourceMaxScaleFilter(Integer sourceMaxScaleFilter) {
    this.sourceMaxScaleFilter = sourceMaxScaleFilter;
    return this;
  }

  /**
   * Optional. The filter will match columns with scale smaller than or equal to this number.
   * @return sourceMaxScaleFilter
   */
  @javax.annotation.Nullable
  public Integer getSourceMaxScaleFilter() {
    return sourceMaxScaleFilter;
  }

  public void setSourceMaxScaleFilter(Integer sourceMaxScaleFilter) {
    this.sourceMaxScaleFilter = sourceMaxScaleFilter;
  }


  public SourceNumericFilter sourceMinPrecisionFilter(Integer sourceMinPrecisionFilter) {
    this.sourceMinPrecisionFilter = sourceMinPrecisionFilter;
    return this;
  }

  /**
   * Optional. The filter will match columns with precision greater than or equal to this number.
   * @return sourceMinPrecisionFilter
   */
  @javax.annotation.Nullable
  public Integer getSourceMinPrecisionFilter() {
    return sourceMinPrecisionFilter;
  }

  public void setSourceMinPrecisionFilter(Integer sourceMinPrecisionFilter) {
    this.sourceMinPrecisionFilter = sourceMinPrecisionFilter;
  }


  public SourceNumericFilter sourceMinScaleFilter(Integer sourceMinScaleFilter) {
    this.sourceMinScaleFilter = sourceMinScaleFilter;
    return this;
  }

  /**
   * Optional. The filter will match columns with scale greater than or equal to this number.
   * @return sourceMinScaleFilter
   */
  @javax.annotation.Nullable
  public Integer getSourceMinScaleFilter() {
    return sourceMinScaleFilter;
  }

  public void setSourceMinScaleFilter(Integer sourceMinScaleFilter) {
    this.sourceMinScaleFilter = sourceMinScaleFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceNumericFilter sourceNumericFilter = (SourceNumericFilter) o;
    return Objects.equals(this.numericFilterOption, sourceNumericFilter.numericFilterOption) &&
        Objects.equals(this.sourceMaxPrecisionFilter, sourceNumericFilter.sourceMaxPrecisionFilter) &&
        Objects.equals(this.sourceMaxScaleFilter, sourceNumericFilter.sourceMaxScaleFilter) &&
        Objects.equals(this.sourceMinPrecisionFilter, sourceNumericFilter.sourceMinPrecisionFilter) &&
        Objects.equals(this.sourceMinScaleFilter, sourceNumericFilter.sourceMinScaleFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numericFilterOption, sourceMaxPrecisionFilter, sourceMaxScaleFilter, sourceMinPrecisionFilter, sourceMinScaleFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceNumericFilter {\n");
    sb.append("    numericFilterOption: ").append(toIndentedString(numericFilterOption)).append("\n");
    sb.append("    sourceMaxPrecisionFilter: ").append(toIndentedString(sourceMaxPrecisionFilter)).append("\n");
    sb.append("    sourceMaxScaleFilter: ").append(toIndentedString(sourceMaxScaleFilter)).append("\n");
    sb.append("    sourceMinPrecisionFilter: ").append(toIndentedString(sourceMinPrecisionFilter)).append("\n");
    sb.append("    sourceMinScaleFilter: ").append(toIndentedString(sourceMinScaleFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numericFilterOption");
    openapiFields.add("sourceMaxPrecisionFilter");
    openapiFields.add("sourceMaxScaleFilter");
    openapiFields.add("sourceMinPrecisionFilter");
    openapiFields.add("sourceMinScaleFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceNumericFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceNumericFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceNumericFilter is not found in the empty JSON string", SourceNumericFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceNumericFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceNumericFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("numericFilterOption") != null && !jsonObj.get("numericFilterOption").isJsonNull()) && !jsonObj.get("numericFilterOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numericFilterOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numericFilterOption").toString()));
      }
      // validate the optional field `numericFilterOption`
      if (jsonObj.get("numericFilterOption") != null && !jsonObj.get("numericFilterOption").isJsonNull()) {
        NumericFilterOptionEnum.validateJsonElement(jsonObj.get("numericFilterOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceNumericFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceNumericFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceNumericFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceNumericFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceNumericFilter>() {
           @Override
           public void write(JsonWriter out, SourceNumericFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceNumericFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceNumericFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceNumericFilter
   * @throws IOException if the JSON string is invalid with respect to SourceNumericFilter
   */
  public static SourceNumericFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceNumericFilter.class);
  }

  /**
   * Convert an instance of SourceNumericFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

