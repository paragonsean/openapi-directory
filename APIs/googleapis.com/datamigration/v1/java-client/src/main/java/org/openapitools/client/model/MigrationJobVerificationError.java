/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Error message of a verification Migration job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MigrationJobVerificationError {
  /**
   * Output only. An instance of ErrorCode specifying the error that occurred.
   */
  @JsonAdapter(ErrorCodeEnum.Adapter.class)
  public enum ErrorCodeEnum {
    ERROR_CODE_UNSPECIFIED("ERROR_CODE_UNSPECIFIED"),
    
    CONNECTION_FAILURE("CONNECTION_FAILURE"),
    
    AUTHENTICATION_FAILURE("AUTHENTICATION_FAILURE"),
    
    INVALID_CONNECTION_PROFILE_CONFIG("INVALID_CONNECTION_PROFILE_CONFIG"),
    
    VERSION_INCOMPATIBILITY("VERSION_INCOMPATIBILITY"),
    
    CONNECTION_PROFILE_TYPES_INCOMPATIBILITY("CONNECTION_PROFILE_TYPES_INCOMPATIBILITY"),
    
    NO_PGLOGICAL_INSTALLED("NO_PGLOGICAL_INSTALLED"),
    
    PGLOGICAL_NODE_ALREADY_EXISTS("PGLOGICAL_NODE_ALREADY_EXISTS"),
    
    INVALID_WAL_LEVEL("INVALID_WAL_LEVEL"),
    
    INVALID_SHARED_PRELOAD_LIBRARY("INVALID_SHARED_PRELOAD_LIBRARY"),
    
    INSUFFICIENT_MAX_REPLICATION_SLOTS("INSUFFICIENT_MAX_REPLICATION_SLOTS"),
    
    INSUFFICIENT_MAX_WAL_SENDERS("INSUFFICIENT_MAX_WAL_SENDERS"),
    
    INSUFFICIENT_MAX_WORKER_PROCESSES("INSUFFICIENT_MAX_WORKER_PROCESSES"),
    
    UNSUPPORTED_EXTENSIONS("UNSUPPORTED_EXTENSIONS"),
    
    UNSUPPORTED_MIGRATION_TYPE("UNSUPPORTED_MIGRATION_TYPE"),
    
    INVALID_RDS_LOGICAL_REPLICATION("INVALID_RDS_LOGICAL_REPLICATION"),
    
    UNSUPPORTED_GTID_MODE("UNSUPPORTED_GTID_MODE"),
    
    UNSUPPORTED_TABLE_DEFINITION("UNSUPPORTED_TABLE_DEFINITION"),
    
    UNSUPPORTED_DEFINER("UNSUPPORTED_DEFINER"),
    
    CANT_RESTART_RUNNING_MIGRATION("CANT_RESTART_RUNNING_MIGRATION"),
    
    SOURCE_ALREADY_SETUP("SOURCE_ALREADY_SETUP"),
    
    TABLES_WITH_LIMITED_SUPPORT("TABLES_WITH_LIMITED_SUPPORT"),
    
    UNSUPPORTED_DATABASE_LOCALE("UNSUPPORTED_DATABASE_LOCALE"),
    
    UNSUPPORTED_DATABASE_FDW_CONFIG("UNSUPPORTED_DATABASE_FDW_CONFIG"),
    
    ERROR_RDBMS("ERROR_RDBMS"),
    
    SOURCE_SIZE_EXCEEDS_THRESHOLD("SOURCE_SIZE_EXCEEDS_THRESHOLD"),
    
    EXISTING_CONFLICTING_DATABASES("EXISTING_CONFLICTING_DATABASES"),
    
    PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE("PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE"),
    
    EXISTING_DATA("EXISTING_DATA"),
    
    SOURCE_MAX_SUBSCRIPTIONS("SOURCE_MAX_SUBSCRIPTIONS");

    private String value;

    ErrorCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorCodeEnum fromValue(String value) {
      for (ErrorCodeEnum b : ErrorCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private ErrorCodeEnum errorCode;

  public static final String SERIALIZED_NAME_ERROR_DETAIL_MESSAGE = "errorDetailMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAIL_MESSAGE)
  private String errorDetailMessage;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public MigrationJobVerificationError() {
  }

  public MigrationJobVerificationError(
     ErrorCodeEnum errorCode, 
     String errorDetailMessage, 
     String errorMessage
  ) {
    this();
    this.errorCode = errorCode;
    this.errorDetailMessage = errorDetailMessage;
    this.errorMessage = errorMessage;
  }

  /**
   * Output only. An instance of ErrorCode specifying the error that occurred.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public ErrorCodeEnum getErrorCode() {
    return errorCode;
  }



  /**
   * Output only. A specific detailed error message, if supplied by the engine.
   * @return errorDetailMessage
   */
  @javax.annotation.Nullable
  public String getErrorDetailMessage() {
    return errorDetailMessage;
  }



  /**
   * Output only. A formatted message with further details about the error and a CTA.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrationJobVerificationError migrationJobVerificationError = (MigrationJobVerificationError) o;
    return Objects.equals(this.errorCode, migrationJobVerificationError.errorCode) &&
        Objects.equals(this.errorDetailMessage, migrationJobVerificationError.errorDetailMessage) &&
        Objects.equals(this.errorMessage, migrationJobVerificationError.errorMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorCode, errorDetailMessage, errorMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrationJobVerificationError {\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorDetailMessage: ").append(toIndentedString(errorDetailMessage)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorCode");
    openapiFields.add("errorDetailMessage");
    openapiFields.add("errorMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MigrationJobVerificationError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MigrationJobVerificationError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrationJobVerificationError is not found in the empty JSON string", MigrationJobVerificationError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MigrationJobVerificationError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrationJobVerificationError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) && !jsonObj.get("errorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorCode").toString()));
      }
      // validate the optional field `errorCode`
      if (jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) {
        ErrorCodeEnum.validateJsonElement(jsonObj.get("errorCode"));
      }
      if ((jsonObj.get("errorDetailMessage") != null && !jsonObj.get("errorDetailMessage").isJsonNull()) && !jsonObj.get("errorDetailMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorDetailMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorDetailMessage").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrationJobVerificationError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrationJobVerificationError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrationJobVerificationError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrationJobVerificationError.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrationJobVerificationError>() {
           @Override
           public void write(JsonWriter out, MigrationJobVerificationError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrationJobVerificationError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MigrationJobVerificationError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MigrationJobVerificationError
   * @throws IOException if the JSON string is invalid with respect to MigrationJobVerificationError
   */
  public static MigrationJobVerificationError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrationJobVerificationError.class);
  }

  /**
   * Convert an instance of MigrationJobVerificationError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

