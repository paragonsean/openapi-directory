/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MappingRuleFilter {
  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<String> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITY_NAME_CONTAINS = "entityNameContains";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME_CONTAINS)
  private String entityNameContains;

  public static final String SERIALIZED_NAME_ENTITY_NAME_PREFIX = "entityNamePrefix";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME_PREFIX)
  private String entityNamePrefix;

  public static final String SERIALIZED_NAME_ENTITY_NAME_SUFFIX = "entityNameSuffix";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME_SUFFIX)
  private String entityNameSuffix;

  public static final String SERIALIZED_NAME_PARENT_ENTITY = "parentEntity";
  @SerializedName(SERIALIZED_NAME_PARENT_ENTITY)
  private String parentEntity;

  public MappingRuleFilter() {
  }

  public MappingRuleFilter entities(List<String> entities) {
    this.entities = entities;
    return this;
  }

  public MappingRuleFilter addEntitiesItem(String entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * Optional. The rule should be applied to specific entities defined by their fully qualified names.
   * @return entities
   */
  @javax.annotation.Nullable
  public List<String> getEntities() {
    return entities;
  }

  public void setEntities(List<String> entities) {
    this.entities = entities;
  }


  public MappingRuleFilter entityNameContains(String entityNameContains) {
    this.entityNameContains = entityNameContains;
    return this;
  }

  /**
   * Optional. The rule should be applied to entities whose non-qualified name contains the given string.
   * @return entityNameContains
   */
  @javax.annotation.Nullable
  public String getEntityNameContains() {
    return entityNameContains;
  }

  public void setEntityNameContains(String entityNameContains) {
    this.entityNameContains = entityNameContains;
  }


  public MappingRuleFilter entityNamePrefix(String entityNamePrefix) {
    this.entityNamePrefix = entityNamePrefix;
    return this;
  }

  /**
   * Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
   * @return entityNamePrefix
   */
  @javax.annotation.Nullable
  public String getEntityNamePrefix() {
    return entityNamePrefix;
  }

  public void setEntityNamePrefix(String entityNamePrefix) {
    this.entityNamePrefix = entityNamePrefix;
  }


  public MappingRuleFilter entityNameSuffix(String entityNameSuffix) {
    this.entityNameSuffix = entityNameSuffix;
    return this;
  }

  /**
   * Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
   * @return entityNameSuffix
   */
  @javax.annotation.Nullable
  public String getEntityNameSuffix() {
    return entityNameSuffix;
  }

  public void setEntityNameSuffix(String entityNameSuffix) {
    this.entityNameSuffix = entityNameSuffix;
  }


  public MappingRuleFilter parentEntity(String parentEntity) {
    this.parentEntity = parentEntity;
    return this;
  }

  /**
   * Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
   * @return parentEntity
   */
  @javax.annotation.Nullable
  public String getParentEntity() {
    return parentEntity;
  }

  public void setParentEntity(String parentEntity) {
    this.parentEntity = parentEntity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappingRuleFilter mappingRuleFilter = (MappingRuleFilter) o;
    return Objects.equals(this.entities, mappingRuleFilter.entities) &&
        Objects.equals(this.entityNameContains, mappingRuleFilter.entityNameContains) &&
        Objects.equals(this.entityNamePrefix, mappingRuleFilter.entityNamePrefix) &&
        Objects.equals(this.entityNameSuffix, mappingRuleFilter.entityNameSuffix) &&
        Objects.equals(this.parentEntity, mappingRuleFilter.parentEntity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entities, entityNameContains, entityNamePrefix, entityNameSuffix, parentEntity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappingRuleFilter {\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    entityNameContains: ").append(toIndentedString(entityNameContains)).append("\n");
    sb.append("    entityNamePrefix: ").append(toIndentedString(entityNamePrefix)).append("\n");
    sb.append("    entityNameSuffix: ").append(toIndentedString(entityNameSuffix)).append("\n");
    sb.append("    parentEntity: ").append(toIndentedString(parentEntity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entities");
    openapiFields.add("entityNameContains");
    openapiFields.add("entityNamePrefix");
    openapiFields.add("entityNameSuffix");
    openapiFields.add("parentEntity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MappingRuleFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MappingRuleFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MappingRuleFilter is not found in the empty JSON string", MappingRuleFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MappingRuleFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MappingRuleFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull() && !jsonObj.get("entities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
      }
      if ((jsonObj.get("entityNameContains") != null && !jsonObj.get("entityNameContains").isJsonNull()) && !jsonObj.get("entityNameContains").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityNameContains` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityNameContains").toString()));
      }
      if ((jsonObj.get("entityNamePrefix") != null && !jsonObj.get("entityNamePrefix").isJsonNull()) && !jsonObj.get("entityNamePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityNamePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityNamePrefix").toString()));
      }
      if ((jsonObj.get("entityNameSuffix") != null && !jsonObj.get("entityNameSuffix").isJsonNull()) && !jsonObj.get("entityNameSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityNameSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityNameSuffix").toString()));
      }
      if ((jsonObj.get("parentEntity") != null && !jsonObj.get("parentEntity").isJsonNull()) && !jsonObj.get("parentEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentEntity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MappingRuleFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MappingRuleFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MappingRuleFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MappingRuleFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<MappingRuleFilter>() {
           @Override
           public void write(JsonWriter out, MappingRuleFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MappingRuleFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MappingRuleFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MappingRuleFilter
   * @throws IOException if the JSON string is invalid with respect to MappingRuleFilter
   */
  public static MappingRuleFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MappingRuleFilter.class);
  }

  /**
   * Convert an instance of MappingRuleFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

