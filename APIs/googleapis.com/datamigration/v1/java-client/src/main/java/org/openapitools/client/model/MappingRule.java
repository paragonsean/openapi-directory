/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConditionalColumnSetValue;
import org.openapitools.client.model.ConvertRowIdToColumn;
import org.openapitools.client.model.EntityMove;
import org.openapitools.client.model.FilterTableColumns;
import org.openapitools.client.model.MappingRuleFilter;
import org.openapitools.client.model.MultiColumnDatatypeChange;
import org.openapitools.client.model.MultiEntityRename;
import org.openapitools.client.model.SetTablePrimaryKey;
import org.openapitools.client.model.SingleColumnChange;
import org.openapitools.client.model.SingleEntityRename;
import org.openapitools.client.model.SinglePackageChange;
import org.openapitools.client.model.SourceSqlChange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of a transformation that is to be applied to a group of entities in the source schema. Several such transformations can be applied to an entity sequentially to define the corresponding entity in the target schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:48.568084-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MappingRule {
  public static final String SERIALIZED_NAME_CONDITIONAL_COLUMN_SET_VALUE = "conditionalColumnSetValue";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_COLUMN_SET_VALUE)
  private ConditionalColumnSetValue conditionalColumnSetValue;

  public static final String SERIALIZED_NAME_CONVERT_ROWID_COLUMN = "convertRowidColumn";
  @SerializedName(SERIALIZED_NAME_CONVERT_ROWID_COLUMN)
  private ConvertRowIdToColumn convertRowidColumn;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENTITY_MOVE = "entityMove";
  @SerializedName(SERIALIZED_NAME_ENTITY_MOVE)
  private EntityMove entityMove;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private MappingRuleFilter filter;

  public static final String SERIALIZED_NAME_FILTER_TABLE_COLUMNS = "filterTableColumns";
  @SerializedName(SERIALIZED_NAME_FILTER_TABLE_COLUMNS)
  private FilterTableColumns filterTableColumns;

  public static final String SERIALIZED_NAME_MULTI_COLUMN_DATA_TYPE_CHANGE = "multiColumnDataTypeChange";
  @SerializedName(SERIALIZED_NAME_MULTI_COLUMN_DATA_TYPE_CHANGE)
  private MultiColumnDatatypeChange multiColumnDataTypeChange;

  public static final String SERIALIZED_NAME_MULTI_ENTITY_RENAME = "multiEntityRename";
  @SerializedName(SERIALIZED_NAME_MULTI_ENTITY_RENAME)
  private MultiEntityRename multiEntityRename;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REVISION_CREATE_TIME = "revisionCreateTime";
  @SerializedName(SERIALIZED_NAME_REVISION_CREATE_TIME)
  private String revisionCreateTime;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  public static final String SERIALIZED_NAME_RULE_ORDER = "ruleOrder";
  @SerializedName(SERIALIZED_NAME_RULE_ORDER)
  private String ruleOrder;

  /**
   * Required. The rule scope
   */
  @JsonAdapter(RuleScopeEnum.Adapter.class)
  public enum RuleScopeEnum {
    UNSPECIFIED("DATABASE_ENTITY_TYPE_UNSPECIFIED"),
    
    SCHEMA("DATABASE_ENTITY_TYPE_SCHEMA"),
    
    TABLE("DATABASE_ENTITY_TYPE_TABLE"),
    
    COLUMN("DATABASE_ENTITY_TYPE_COLUMN"),
    
    CONSTRAINT("DATABASE_ENTITY_TYPE_CONSTRAINT"),
    
    INDEX("DATABASE_ENTITY_TYPE_INDEX"),
    
    TRIGGER("DATABASE_ENTITY_TYPE_TRIGGER"),
    
    VIEW("DATABASE_ENTITY_TYPE_VIEW"),
    
    SEQUENCE("DATABASE_ENTITY_TYPE_SEQUENCE"),
    
    STORED_PROCEDURE("DATABASE_ENTITY_TYPE_STORED_PROCEDURE"),
    
    FUNCTION("DATABASE_ENTITY_TYPE_FUNCTION"),
    
    SYNONYM("DATABASE_ENTITY_TYPE_SYNONYM"),
    
    DATABASE_PACKAGE("DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"),
    
    UDT("DATABASE_ENTITY_TYPE_UDT"),
    
    MATERIALIZED_VIEW("DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"),
    
    DATABASE("DATABASE_ENTITY_TYPE_DATABASE");

    private String value;

    RuleScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuleScopeEnum fromValue(String value) {
      for (RuleScopeEnum b : RuleScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuleScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuleScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuleScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuleScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuleScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULE_SCOPE = "ruleScope";
  @SerializedName(SERIALIZED_NAME_RULE_SCOPE)
  private RuleScopeEnum ruleScope;

  public static final String SERIALIZED_NAME_SET_TABLE_PRIMARY_KEY = "setTablePrimaryKey";
  @SerializedName(SERIALIZED_NAME_SET_TABLE_PRIMARY_KEY)
  private SetTablePrimaryKey setTablePrimaryKey;

  public static final String SERIALIZED_NAME_SINGLE_COLUMN_CHANGE = "singleColumnChange";
  @SerializedName(SERIALIZED_NAME_SINGLE_COLUMN_CHANGE)
  private SingleColumnChange singleColumnChange;

  public static final String SERIALIZED_NAME_SINGLE_ENTITY_RENAME = "singleEntityRename";
  @SerializedName(SERIALIZED_NAME_SINGLE_ENTITY_RENAME)
  private SingleEntityRename singleEntityRename;

  public static final String SERIALIZED_NAME_SINGLE_PACKAGE_CHANGE = "singlePackageChange";
  @SerializedName(SERIALIZED_NAME_SINGLE_PACKAGE_CHANGE)
  private SinglePackageChange singlePackageChange;

  public static final String SERIALIZED_NAME_SOURCE_SQL_CHANGE = "sourceSqlChange";
  @SerializedName(SERIALIZED_NAME_SOURCE_SQL_CHANGE)
  private SourceSqlChange sourceSqlChange;

  /**
   * Optional. The mapping rule state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED"),
    
    DELETED("DELETED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public MappingRule() {
  }

  public MappingRule(
     String revisionCreateTime, 
     String revisionId
  ) {
    this();
    this.revisionCreateTime = revisionCreateTime;
    this.revisionId = revisionId;
  }

  public MappingRule conditionalColumnSetValue(ConditionalColumnSetValue conditionalColumnSetValue) {
    this.conditionalColumnSetValue = conditionalColumnSetValue;
    return this;
  }

  /**
   * Get conditionalColumnSetValue
   * @return conditionalColumnSetValue
   */
  @javax.annotation.Nullable
  public ConditionalColumnSetValue getConditionalColumnSetValue() {
    return conditionalColumnSetValue;
  }

  public void setConditionalColumnSetValue(ConditionalColumnSetValue conditionalColumnSetValue) {
    this.conditionalColumnSetValue = conditionalColumnSetValue;
  }


  public MappingRule convertRowidColumn(ConvertRowIdToColumn convertRowidColumn) {
    this.convertRowidColumn = convertRowidColumn;
    return this;
  }

  /**
   * Get convertRowidColumn
   * @return convertRowidColumn
   */
  @javax.annotation.Nullable
  public ConvertRowIdToColumn getConvertRowidColumn() {
    return convertRowidColumn;
  }

  public void setConvertRowidColumn(ConvertRowIdToColumn convertRowidColumn) {
    this.convertRowidColumn = convertRowidColumn;
  }


  public MappingRule displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. A human readable name
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public MappingRule entityMove(EntityMove entityMove) {
    this.entityMove = entityMove;
    return this;
  }

  /**
   * Get entityMove
   * @return entityMove
   */
  @javax.annotation.Nullable
  public EntityMove getEntityMove() {
    return entityMove;
  }

  public void setEntityMove(EntityMove entityMove) {
    this.entityMove = entityMove;
  }


  public MappingRule filter(MappingRuleFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public MappingRuleFilter getFilter() {
    return filter;
  }

  public void setFilter(MappingRuleFilter filter) {
    this.filter = filter;
  }


  public MappingRule filterTableColumns(FilterTableColumns filterTableColumns) {
    this.filterTableColumns = filterTableColumns;
    return this;
  }

  /**
   * Get filterTableColumns
   * @return filterTableColumns
   */
  @javax.annotation.Nullable
  public FilterTableColumns getFilterTableColumns() {
    return filterTableColumns;
  }

  public void setFilterTableColumns(FilterTableColumns filterTableColumns) {
    this.filterTableColumns = filterTableColumns;
  }


  public MappingRule multiColumnDataTypeChange(MultiColumnDatatypeChange multiColumnDataTypeChange) {
    this.multiColumnDataTypeChange = multiColumnDataTypeChange;
    return this;
  }

  /**
   * Get multiColumnDataTypeChange
   * @return multiColumnDataTypeChange
   */
  @javax.annotation.Nullable
  public MultiColumnDatatypeChange getMultiColumnDataTypeChange() {
    return multiColumnDataTypeChange;
  }

  public void setMultiColumnDataTypeChange(MultiColumnDatatypeChange multiColumnDataTypeChange) {
    this.multiColumnDataTypeChange = multiColumnDataTypeChange;
  }


  public MappingRule multiEntityRename(MultiEntityRename multiEntityRename) {
    this.multiEntityRename = multiEntityRename;
    return this;
  }

  /**
   * Get multiEntityRename
   * @return multiEntityRename
   */
  @javax.annotation.Nullable
  public MultiEntityRename getMultiEntityRename() {
    return multiEntityRename;
  }

  public void setMultiEntityRename(MultiEntityRename multiEntityRename) {
    this.multiEntityRename = multiEntityRename;
  }


  public MappingRule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. The timestamp that the revision was created.
   * @return revisionCreateTime
   */
  @javax.annotation.Nullable
  public String getRevisionCreateTime() {
    return revisionCreateTime;
  }



  /**
   * Output only. The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.
   * @return revisionId
   */
  @javax.annotation.Nullable
  public String getRevisionId() {
    return revisionId;
  }



  public MappingRule ruleOrder(String ruleOrder) {
    this.ruleOrder = ruleOrder;
    return this;
  }

  /**
   * Required. The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
   * @return ruleOrder
   */
  @javax.annotation.Nullable
  public String getRuleOrder() {
    return ruleOrder;
  }

  public void setRuleOrder(String ruleOrder) {
    this.ruleOrder = ruleOrder;
  }


  public MappingRule ruleScope(RuleScopeEnum ruleScope) {
    this.ruleScope = ruleScope;
    return this;
  }

  /**
   * Required. The rule scope
   * @return ruleScope
   */
  @javax.annotation.Nullable
  public RuleScopeEnum getRuleScope() {
    return ruleScope;
  }

  public void setRuleScope(RuleScopeEnum ruleScope) {
    this.ruleScope = ruleScope;
  }


  public MappingRule setTablePrimaryKey(SetTablePrimaryKey setTablePrimaryKey) {
    this.setTablePrimaryKey = setTablePrimaryKey;
    return this;
  }

  /**
   * Get setTablePrimaryKey
   * @return setTablePrimaryKey
   */
  @javax.annotation.Nullable
  public SetTablePrimaryKey getSetTablePrimaryKey() {
    return setTablePrimaryKey;
  }

  public void setSetTablePrimaryKey(SetTablePrimaryKey setTablePrimaryKey) {
    this.setTablePrimaryKey = setTablePrimaryKey;
  }


  public MappingRule singleColumnChange(SingleColumnChange singleColumnChange) {
    this.singleColumnChange = singleColumnChange;
    return this;
  }

  /**
   * Get singleColumnChange
   * @return singleColumnChange
   */
  @javax.annotation.Nullable
  public SingleColumnChange getSingleColumnChange() {
    return singleColumnChange;
  }

  public void setSingleColumnChange(SingleColumnChange singleColumnChange) {
    this.singleColumnChange = singleColumnChange;
  }


  public MappingRule singleEntityRename(SingleEntityRename singleEntityRename) {
    this.singleEntityRename = singleEntityRename;
    return this;
  }

  /**
   * Get singleEntityRename
   * @return singleEntityRename
   */
  @javax.annotation.Nullable
  public SingleEntityRename getSingleEntityRename() {
    return singleEntityRename;
  }

  public void setSingleEntityRename(SingleEntityRename singleEntityRename) {
    this.singleEntityRename = singleEntityRename;
  }


  public MappingRule singlePackageChange(SinglePackageChange singlePackageChange) {
    this.singlePackageChange = singlePackageChange;
    return this;
  }

  /**
   * Get singlePackageChange
   * @return singlePackageChange
   */
  @javax.annotation.Nullable
  public SinglePackageChange getSinglePackageChange() {
    return singlePackageChange;
  }

  public void setSinglePackageChange(SinglePackageChange singlePackageChange) {
    this.singlePackageChange = singlePackageChange;
  }


  public MappingRule sourceSqlChange(SourceSqlChange sourceSqlChange) {
    this.sourceSqlChange = sourceSqlChange;
    return this;
  }

  /**
   * Get sourceSqlChange
   * @return sourceSqlChange
   */
  @javax.annotation.Nullable
  public SourceSqlChange getSourceSqlChange() {
    return sourceSqlChange;
  }

  public void setSourceSqlChange(SourceSqlChange sourceSqlChange) {
    this.sourceSqlChange = sourceSqlChange;
  }


  public MappingRule state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Optional. The mapping rule state
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappingRule mappingRule = (MappingRule) o;
    return Objects.equals(this.conditionalColumnSetValue, mappingRule.conditionalColumnSetValue) &&
        Objects.equals(this.convertRowidColumn, mappingRule.convertRowidColumn) &&
        Objects.equals(this.displayName, mappingRule.displayName) &&
        Objects.equals(this.entityMove, mappingRule.entityMove) &&
        Objects.equals(this.filter, mappingRule.filter) &&
        Objects.equals(this.filterTableColumns, mappingRule.filterTableColumns) &&
        Objects.equals(this.multiColumnDataTypeChange, mappingRule.multiColumnDataTypeChange) &&
        Objects.equals(this.multiEntityRename, mappingRule.multiEntityRename) &&
        Objects.equals(this.name, mappingRule.name) &&
        Objects.equals(this.revisionCreateTime, mappingRule.revisionCreateTime) &&
        Objects.equals(this.revisionId, mappingRule.revisionId) &&
        Objects.equals(this.ruleOrder, mappingRule.ruleOrder) &&
        Objects.equals(this.ruleScope, mappingRule.ruleScope) &&
        Objects.equals(this.setTablePrimaryKey, mappingRule.setTablePrimaryKey) &&
        Objects.equals(this.singleColumnChange, mappingRule.singleColumnChange) &&
        Objects.equals(this.singleEntityRename, mappingRule.singleEntityRename) &&
        Objects.equals(this.singlePackageChange, mappingRule.singlePackageChange) &&
        Objects.equals(this.sourceSqlChange, mappingRule.sourceSqlChange) &&
        Objects.equals(this.state, mappingRule.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditionalColumnSetValue, convertRowidColumn, displayName, entityMove, filter, filterTableColumns, multiColumnDataTypeChange, multiEntityRename, name, revisionCreateTime, revisionId, ruleOrder, ruleScope, setTablePrimaryKey, singleColumnChange, singleEntityRename, singlePackageChange, sourceSqlChange, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappingRule {\n");
    sb.append("    conditionalColumnSetValue: ").append(toIndentedString(conditionalColumnSetValue)).append("\n");
    sb.append("    convertRowidColumn: ").append(toIndentedString(convertRowidColumn)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    entityMove: ").append(toIndentedString(entityMove)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    filterTableColumns: ").append(toIndentedString(filterTableColumns)).append("\n");
    sb.append("    multiColumnDataTypeChange: ").append(toIndentedString(multiColumnDataTypeChange)).append("\n");
    sb.append("    multiEntityRename: ").append(toIndentedString(multiEntityRename)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    revisionCreateTime: ").append(toIndentedString(revisionCreateTime)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    ruleOrder: ").append(toIndentedString(ruleOrder)).append("\n");
    sb.append("    ruleScope: ").append(toIndentedString(ruleScope)).append("\n");
    sb.append("    setTablePrimaryKey: ").append(toIndentedString(setTablePrimaryKey)).append("\n");
    sb.append("    singleColumnChange: ").append(toIndentedString(singleColumnChange)).append("\n");
    sb.append("    singleEntityRename: ").append(toIndentedString(singleEntityRename)).append("\n");
    sb.append("    singlePackageChange: ").append(toIndentedString(singlePackageChange)).append("\n");
    sb.append("    sourceSqlChange: ").append(toIndentedString(sourceSqlChange)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conditionalColumnSetValue");
    openapiFields.add("convertRowidColumn");
    openapiFields.add("displayName");
    openapiFields.add("entityMove");
    openapiFields.add("filter");
    openapiFields.add("filterTableColumns");
    openapiFields.add("multiColumnDataTypeChange");
    openapiFields.add("multiEntityRename");
    openapiFields.add("name");
    openapiFields.add("revisionCreateTime");
    openapiFields.add("revisionId");
    openapiFields.add("ruleOrder");
    openapiFields.add("ruleScope");
    openapiFields.add("setTablePrimaryKey");
    openapiFields.add("singleColumnChange");
    openapiFields.add("singleEntityRename");
    openapiFields.add("singlePackageChange");
    openapiFields.add("sourceSqlChange");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MappingRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MappingRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MappingRule is not found in the empty JSON string", MappingRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MappingRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MappingRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `conditionalColumnSetValue`
      if (jsonObj.get("conditionalColumnSetValue") != null && !jsonObj.get("conditionalColumnSetValue").isJsonNull()) {
        ConditionalColumnSetValue.validateJsonElement(jsonObj.get("conditionalColumnSetValue"));
      }
      // validate the optional field `convertRowidColumn`
      if (jsonObj.get("convertRowidColumn") != null && !jsonObj.get("convertRowidColumn").isJsonNull()) {
        ConvertRowIdToColumn.validateJsonElement(jsonObj.get("convertRowidColumn"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `entityMove`
      if (jsonObj.get("entityMove") != null && !jsonObj.get("entityMove").isJsonNull()) {
        EntityMove.validateJsonElement(jsonObj.get("entityMove"));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        MappingRuleFilter.validateJsonElement(jsonObj.get("filter"));
      }
      // validate the optional field `filterTableColumns`
      if (jsonObj.get("filterTableColumns") != null && !jsonObj.get("filterTableColumns").isJsonNull()) {
        FilterTableColumns.validateJsonElement(jsonObj.get("filterTableColumns"));
      }
      // validate the optional field `multiColumnDataTypeChange`
      if (jsonObj.get("multiColumnDataTypeChange") != null && !jsonObj.get("multiColumnDataTypeChange").isJsonNull()) {
        MultiColumnDatatypeChange.validateJsonElement(jsonObj.get("multiColumnDataTypeChange"));
      }
      // validate the optional field `multiEntityRename`
      if (jsonObj.get("multiEntityRename") != null && !jsonObj.get("multiEntityRename").isJsonNull()) {
        MultiEntityRename.validateJsonElement(jsonObj.get("multiEntityRename"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("revisionCreateTime") != null && !jsonObj.get("revisionCreateTime").isJsonNull()) && !jsonObj.get("revisionCreateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionCreateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionCreateTime").toString()));
      }
      if ((jsonObj.get("revisionId") != null && !jsonObj.get("revisionId").isJsonNull()) && !jsonObj.get("revisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionId").toString()));
      }
      if ((jsonObj.get("ruleOrder") != null && !jsonObj.get("ruleOrder").isJsonNull()) && !jsonObj.get("ruleOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleOrder").toString()));
      }
      if ((jsonObj.get("ruleScope") != null && !jsonObj.get("ruleScope").isJsonNull()) && !jsonObj.get("ruleScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleScope").toString()));
      }
      // validate the optional field `ruleScope`
      if (jsonObj.get("ruleScope") != null && !jsonObj.get("ruleScope").isJsonNull()) {
        RuleScopeEnum.validateJsonElement(jsonObj.get("ruleScope"));
      }
      // validate the optional field `setTablePrimaryKey`
      if (jsonObj.get("setTablePrimaryKey") != null && !jsonObj.get("setTablePrimaryKey").isJsonNull()) {
        SetTablePrimaryKey.validateJsonElement(jsonObj.get("setTablePrimaryKey"));
      }
      // validate the optional field `singleColumnChange`
      if (jsonObj.get("singleColumnChange") != null && !jsonObj.get("singleColumnChange").isJsonNull()) {
        SingleColumnChange.validateJsonElement(jsonObj.get("singleColumnChange"));
      }
      // validate the optional field `singleEntityRename`
      if (jsonObj.get("singleEntityRename") != null && !jsonObj.get("singleEntityRename").isJsonNull()) {
        SingleEntityRename.validateJsonElement(jsonObj.get("singleEntityRename"));
      }
      // validate the optional field `singlePackageChange`
      if (jsonObj.get("singlePackageChange") != null && !jsonObj.get("singlePackageChange").isJsonNull()) {
        SinglePackageChange.validateJsonElement(jsonObj.get("singlePackageChange"));
      }
      // validate the optional field `sourceSqlChange`
      if (jsonObj.get("sourceSqlChange") != null && !jsonObj.get("sourceSqlChange").isJsonNull()) {
        SourceSqlChange.validateJsonElement(jsonObj.get("sourceSqlChange"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MappingRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MappingRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MappingRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MappingRule.class));

       return (TypeAdapter<T>) new TypeAdapter<MappingRule>() {
           @Override
           public void write(JsonWriter out, MappingRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MappingRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MappingRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MappingRule
   * @throws IOException if the JSON string is invalid with respect to MappingRule
   */
  public static MappingRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MappingRule.class);
  }

  /**
   * Convert an instance of MappingRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

