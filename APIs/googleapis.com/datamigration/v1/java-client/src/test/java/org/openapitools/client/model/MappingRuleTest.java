/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConditionalColumnSetValue;
import org.openapitools.client.model.ConvertRowIdToColumn;
import org.openapitools.client.model.EntityMove;
import org.openapitools.client.model.FilterTableColumns;
import org.openapitools.client.model.MappingRuleFilter;
import org.openapitools.client.model.MultiColumnDatatypeChange;
import org.openapitools.client.model.MultiEntityRename;
import org.openapitools.client.model.SetTablePrimaryKey;
import org.openapitools.client.model.SingleColumnChange;
import org.openapitools.client.model.SingleEntityRename;
import org.openapitools.client.model.SinglePackageChange;
import org.openapitools.client.model.SourceSqlChange;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for MappingRule
 */
public class MappingRuleTest {
    private final MappingRule model = new MappingRule();

    /**
     * Model tests for MappingRule
     */
    @Test
    public void testMappingRule() {
        // TODO: test MappingRule
    }

    /**
     * Test the property 'conditionalColumnSetValue'
     */
    @Test
    public void conditionalColumnSetValueTest() {
        // TODO: test conditionalColumnSetValue
    }

    /**
     * Test the property 'convertRowidColumn'
     */
    @Test
    public void convertRowidColumnTest() {
        // TODO: test convertRowidColumn
    }

    /**
     * Test the property 'displayName'
     */
    @Test
    public void displayNameTest() {
        // TODO: test displayName
    }

    /**
     * Test the property 'entityMove'
     */
    @Test
    public void entityMoveTest() {
        // TODO: test entityMove
    }

    /**
     * Test the property 'filter'
     */
    @Test
    public void filterTest() {
        // TODO: test filter
    }

    /**
     * Test the property 'filterTableColumns'
     */
    @Test
    public void filterTableColumnsTest() {
        // TODO: test filterTableColumns
    }

    /**
     * Test the property 'multiColumnDataTypeChange'
     */
    @Test
    public void multiColumnDataTypeChangeTest() {
        // TODO: test multiColumnDataTypeChange
    }

    /**
     * Test the property 'multiEntityRename'
     */
    @Test
    public void multiEntityRenameTest() {
        // TODO: test multiEntityRename
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'revisionCreateTime'
     */
    @Test
    public void revisionCreateTimeTest() {
        // TODO: test revisionCreateTime
    }

    /**
     * Test the property 'revisionId'
     */
    @Test
    public void revisionIdTest() {
        // TODO: test revisionId
    }

    /**
     * Test the property 'ruleOrder'
     */
    @Test
    public void ruleOrderTest() {
        // TODO: test ruleOrder
    }

    /**
     * Test the property 'ruleScope'
     */
    @Test
    public void ruleScopeTest() {
        // TODO: test ruleScope
    }

    /**
     * Test the property 'setTablePrimaryKey'
     */
    @Test
    public void setTablePrimaryKeyTest() {
        // TODO: test setTablePrimaryKey
    }

    /**
     * Test the property 'singleColumnChange'
     */
    @Test
    public void singleColumnChangeTest() {
        // TODO: test singleColumnChange
    }

    /**
     * Test the property 'singleEntityRename'
     */
    @Test
    public void singleEntityRenameTest() {
        // TODO: test singleEntityRename
    }

    /**
     * Test the property 'singlePackageChange'
     */
    @Test
    public void singlePackageChangeTest() {
        // TODO: test singlePackageChange
    }

    /**
     * Test the property 'sourceSqlChange'
     */
    @Test
    public void sourceSqlChangeTest() {
        // TODO: test sourceSqlChange
    }

    /**
     * Test the property 'state'
     */
    @Test
    public void stateTest() {
        // TODO: test state
    }

}
