/*
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplyConversionWorkspaceRequest;
import org.openapitools.client.model.CommitConversionWorkspaceRequest;
import org.openapitools.client.model.ConnectionProfile;
import org.openapitools.client.model.ConversionWorkspace;
import org.openapitools.client.model.ConvertConversionWorkspaceRequest;
import org.openapitools.client.model.DescribeConversionWorkspaceRevisionsResponse;
import org.openapitools.client.model.DescribeDatabaseEntitiesResponse;
import org.openapitools.client.model.FetchStaticIpsResponse;
import org.openapitools.client.model.GenerateSshScriptRequest;
import org.openapitools.client.model.GenerateTcpProxyScriptRequest;
import org.openapitools.client.model.ImportMappingRulesRequest;
import org.openapitools.client.model.ListConnectionProfilesResponse;
import org.openapitools.client.model.ListConversionWorkspacesResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListMappingRulesResponse;
import org.openapitools.client.model.ListMigrationJobsResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListPrivateConnectionsResponse;
import org.openapitools.client.model.MappingRule;
import org.openapitools.client.model.MigrationJob;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.PrivateConnection;
import org.openapitools.client.model.RestartMigrationJobRequest;
import org.openapitools.client.model.SearchBackgroundJobsResponse;
import org.openapitools.client.model.SeedConversionWorkspaceRequest;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.SshScript;
import org.openapitools.client.model.StartMigrationJobRequest;
import org.openapitools.client.model.TcpProxyScript;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.openapitools.client.model.VerifyMigrationJobRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new connection profile in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConnectionProfilesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String connectionProfileId = null;
        String requestId = null;
        Boolean skipValidation = null;
        Boolean validateOnly = null;
        ConnectionProfile connectionProfile = null;
        Operation response = api.datamigrationProjectsLocationsConnectionProfilesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, connectionProfileId, requestId, skipValidation, validateOnly, connectionProfile);
        // TODO: test validations
    }

    /**
     * Retrieves a list of all connection profiles in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConnectionProfilesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListConnectionProfilesResponse response = api.datamigrationProjectsLocationsConnectionProfilesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Applies draft tree onto a specific destination database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesApplyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ApplyConversionWorkspaceRequest applyConversionWorkspaceRequest = null;
        Operation response = api.datamigrationProjectsLocationsConversionWorkspacesApply(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, applyConversionWorkspaceRequest);
        // TODO: test validations
    }

    /**
     * Marks all the data in the conversion workspace as committed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesCommitTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CommitConversionWorkspaceRequest commitConversionWorkspaceRequest = null;
        Operation response = api.datamigrationProjectsLocationsConversionWorkspacesCommit(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, commitConversionWorkspaceRequest);
        // TODO: test validations
    }

    /**
     * Creates a draft tree schema for the destination database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesConvertTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ConvertConversionWorkspaceRequest convertConversionWorkspaceRequest = null;
        Operation response = api.datamigrationProjectsLocationsConversionWorkspacesConvert(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, convertConversionWorkspaceRequest);
        // TODO: test validations
    }

    /**
     * Creates a new conversion workspace in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String conversionWorkspaceId = null;
        String requestId = null;
        ConversionWorkspace conversionWorkspace = null;
        Operation response = api.datamigrationProjectsLocationsConversionWorkspacesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, conversionWorkspaceId, requestId, conversionWorkspace);
        // TODO: test validations
    }

    /**
     * Retrieves a list of committed revisions of a specific conversion workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisionsTest() throws ApiException {
        String conversionWorkspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String commitId = null;
        DescribeConversionWorkspaceRevisionsResponse response = api.datamigrationProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisions(conversionWorkspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, commitId);
        // TODO: test validations
    }

    /**
     * Describes the database entities tree for a specific conversion workspace and a specific tree type. Database entities are not resources like conversion workspaces or mapping rules, and they can&#39;t be created, updated or deleted. Instead, they are simple data objects describing the structure of the client database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntitiesTest() throws ApiException {
        String conversionWorkspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String commitId = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String tree = null;
        Boolean uncommitted = null;
        String view = null;
        DescribeDatabaseEntitiesResponse response = api.datamigrationProjectsLocationsConversionWorkspacesDescribeDatabaseEntities(conversionWorkspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, commitId, filter, pageSize, pageToken, tree, uncommitted, view);
        // TODO: test validations
    }

    /**
     * Lists conversion workspaces in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListConversionWorkspacesResponse response = api.datamigrationProjectsLocationsConversionWorkspacesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new mapping rule for a given conversion workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesMappingRulesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String mappingRuleId = null;
        String requestId = null;
        MappingRule mappingRule = null;
        MappingRule response = api.datamigrationProjectsLocationsConversionWorkspacesMappingRulesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, mappingRuleId, requestId, mappingRule);
        // TODO: test validations
    }

    /**
     * Imports the mapping rules for a given conversion workspace. Supports various formats of external rules files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesMappingRulesImportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ImportMappingRulesRequest importMappingRulesRequest = null;
        Operation response = api.datamigrationProjectsLocationsConversionWorkspacesMappingRulesImport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, importMappingRulesRequest);
        // TODO: test validations
    }

    /**
     * Lists the mapping rules for a specific conversion workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesMappingRulesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListMappingRulesResponse response = api.datamigrationProjectsLocationsConversionWorkspacesMappingRulesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Rolls back a conversion workspace to the last committed snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesRollbackTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.datamigrationProjectsLocationsConversionWorkspacesRollback(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Searches/lists the background jobs for a specific conversion workspace. The background jobs are not resources like conversion workspaces or mapping rules, and they can&#39;t be created, updated or deleted. Instead, they are a way to expose the data plane jobs log.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobsTest() throws ApiException {
        String conversionWorkspace = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String completedUntilTime = null;
        Integer maxSize = null;
        Boolean returnMostRecentPerJobType = null;
        SearchBackgroundJobsResponse response = api.datamigrationProjectsLocationsConversionWorkspacesSearchBackgroundJobs(conversionWorkspace, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, completedUntilTime, maxSize, returnMostRecentPerJobType);
        // TODO: test validations
    }

    /**
     * Imports a snapshot of the source database into the conversion workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsConversionWorkspacesSeedTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SeedConversionWorkspaceRequest seedConversionWorkspaceRequest = null;
        Operation response = api.datamigrationProjectsLocationsConversionWorkspacesSeed(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, seedConversionWorkspaceRequest);
        // TODO: test validations
    }

    /**
     * Fetches a set of static IP addresses that need to be allowlisted by the customer when using the static-IP connectivity method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsFetchStaticIpsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        FetchStaticIpsResponse response = api.datamigrationProjectsLocationsFetchStaticIps(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.datamigrationProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new migration job in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsMigrationJobsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String migrationJobId = null;
        String requestId = null;
        MigrationJob migrationJob = null;
        Operation response = api.datamigrationProjectsLocationsMigrationJobsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, migrationJobId, requestId, migrationJob);
        // TODO: test validations
    }

    /**
     * Demotes the destination database to become a read replica of the source. This is applicable for the following migrations: 1. MySQL to Cloud SQL for MySQL 2. PostgreSQL to Cloud SQL for PostgreSQL 3. PostgreSQL to AlloyDB for PostgreSQL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsMigrationJobsDemoteDestinationTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.datamigrationProjectsLocationsMigrationJobsDemoteDestination(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Generate a SSH configuration script to configure the reverse SSH connectivity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsMigrationJobsGenerateSshScriptTest() throws ApiException {
        String migrationJob = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateSshScriptRequest generateSshScriptRequest = null;
        SshScript response = api.datamigrationProjectsLocationsMigrationJobsGenerateSshScript(migrationJob, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateSshScriptRequest);
        // TODO: test validations
    }

    /**
     * Generate a TCP Proxy configuration script to configure a cloud-hosted VM running a TCP Proxy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsMigrationJobsGenerateTcpProxyScriptTest() throws ApiException {
        String migrationJob = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateTcpProxyScriptRequest generateTcpProxyScriptRequest = null;
        TcpProxyScript response = api.datamigrationProjectsLocationsMigrationJobsGenerateTcpProxyScript(migrationJob, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateTcpProxyScriptRequest);
        // TODO: test validations
    }

    /**
     * Lists migration jobs in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsMigrationJobsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListMigrationJobsResponse response = api.datamigrationProjectsLocationsMigrationJobsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a single migration job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsMigrationJobsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String updateMask = null;
        Boolean validateOnly = null;
        MigrationJob migrationJob = null;
        Operation response = api.datamigrationProjectsLocationsMigrationJobsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, updateMask, validateOnly, migrationJob);
        // TODO: test validations
    }

    /**
     * Promote a migration job, stopping replication to the destination and promoting the destination to be a standalone database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsMigrationJobsPromoteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.datamigrationProjectsLocationsMigrationJobsPromote(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Restart a stopped or failed migration job, resetting the destination instance to its original state and starting the migration process from scratch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsMigrationJobsRestartTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RestartMigrationJobRequest restartMigrationJobRequest = null;
        Operation response = api.datamigrationProjectsLocationsMigrationJobsRestart(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, restartMigrationJobRequest);
        // TODO: test validations
    }

    /**
     * Resume a migration job that is currently stopped and is resumable (was stopped during CDC phase).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsMigrationJobsResumeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.datamigrationProjectsLocationsMigrationJobsResume(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Start an already created migration job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsMigrationJobsStartTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StartMigrationJobRequest startMigrationJobRequest = null;
        Operation response = api.datamigrationProjectsLocationsMigrationJobsStart(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, startMigrationJobRequest);
        // TODO: test validations
    }

    /**
     * Stops a running migration job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsMigrationJobsStopTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.datamigrationProjectsLocationsMigrationJobsStop(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Verify a migration job, making sure the destination can reach the source and that all configuration and prerequisites are met.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsMigrationJobsVerifyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        VerifyMigrationJobRequest verifyMigrationJobRequest = null;
        Operation response = api.datamigrationProjectsLocationsMigrationJobsVerify(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, verifyMigrationJobRequest);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.datamigrationProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.datamigrationProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new private connection in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsPrivateConnectionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String privateConnectionId = null;
        String requestId = null;
        Boolean skipValidation = null;
        PrivateConnection privateConnection = null;
        Operation response = api.datamigrationProjectsLocationsPrivateConnectionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, privateConnectionId, requestId, skipValidation, privateConnection);
        // TODO: test validations
    }

    /**
     * Deletes a single Database Migration Service private connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsPrivateConnectionsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        Operation response = api.datamigrationProjectsLocationsPrivateConnectionsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId);
        // TODO: test validations
    }

    /**
     * Gets details of a single private connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsPrivateConnectionsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PrivateConnection response = api.datamigrationProjectsLocationsPrivateConnectionsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsPrivateConnectionsGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        Policy response = api.datamigrationProjectsLocationsPrivateConnectionsGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Retrieves a list of private connections in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsPrivateConnectionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPrivateConnectionsResponse response = api.datamigrationProjectsLocationsPrivateConnectionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsPrivateConnectionsSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.datamigrationProjectsLocationsPrivateConnectionsSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void datamigrationProjectsLocationsPrivateConnectionsTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.datamigrationProjectsLocationsPrivateConnectionsTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

}
