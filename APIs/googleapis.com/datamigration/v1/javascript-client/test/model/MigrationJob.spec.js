/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DatabaseMigrationApi);
  }
}(this, function(expect, DatabaseMigrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DatabaseMigrationApi.MigrationJob();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MigrationJob', function() {
    it('should create an instance of MigrationJob', function() {
      // uncomment below and update the code to test MigrationJob
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be.a(DatabaseMigrationApi.MigrationJob);
    });

    it('should have the property cmekKeyName (base name: "cmekKeyName")', function() {
      // uncomment below and update the code to test the property cmekKeyName
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property conversionWorkspace (base name: "conversionWorkspace")', function() {
      // uncomment below and update the code to test the property conversionWorkspace
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property destination (base name: "destination")', function() {
      // uncomment below and update the code to test the property destination
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property destinationDatabase (base name: "destinationDatabase")', function() {
      // uncomment below and update the code to test the property destinationDatabase
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property dumpFlags (base name: "dumpFlags")', function() {
      // uncomment below and update the code to test the property dumpFlags
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property dumpPath (base name: "dumpPath")', function() {
      // uncomment below and update the code to test the property dumpPath
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "endTime")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property error (base name: "error")', function() {
      // uncomment below and update the code to test the property error
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property filter (base name: "filter")', function() {
      // uncomment below and update the code to test the property filter
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property performanceConfig (base name: "performanceConfig")', function() {
      // uncomment below and update the code to test the property performanceConfig
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property phase (base name: "phase")', function() {
      // uncomment below and update the code to test the property phase
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property reverseSshConnectivity (base name: "reverseSshConnectivity")', function() {
      // uncomment below and update the code to test the property reverseSshConnectivity
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property sourceDatabase (base name: "sourceDatabase")', function() {
      // uncomment below and update the code to test the property sourceDatabase
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property staticIpConnectivity (base name: "staticIpConnectivity")', function() {
      // uncomment below and update the code to test the property staticIpConnectivity
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property updateTime (base name: "updateTime")', function() {
      // uncomment below and update the code to test the property updateTime
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

    it('should have the property vpcPeeringConnectivity (base name: "vpcPeeringConnectivity")', function() {
      // uncomment below and update the code to test the property vpcPeeringConnectivity
      //var instance = new DatabaseMigrationApi.MigrationJob();
      //expect(instance).to.be();
    });

  });

}));
