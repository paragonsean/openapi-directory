/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CloudSqlSettings from './CloudSqlSettings';

/**
 * The CloudSqlConnectionProfile model module.
 * @module model/CloudSqlConnectionProfile
 * @version v1
 */
class CloudSqlConnectionProfile {
    /**
     * Constructs a new <code>CloudSqlConnectionProfile</code>.
     * Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
     * @alias module:model/CloudSqlConnectionProfile
     */
    constructor() { 
        
        CloudSqlConnectionProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudSqlConnectionProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudSqlConnectionProfile} obj Optional instance to populate.
     * @return {module:model/CloudSqlConnectionProfile} The populated <code>CloudSqlConnectionProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudSqlConnectionProfile();

            if (data.hasOwnProperty('additionalPublicIp')) {
                obj['additionalPublicIp'] = ApiClient.convertToType(data['additionalPublicIp'], 'String');
            }
            if (data.hasOwnProperty('cloudSqlId')) {
                obj['cloudSqlId'] = ApiClient.convertToType(data['cloudSqlId'], 'String');
            }
            if (data.hasOwnProperty('privateIp')) {
                obj['privateIp'] = ApiClient.convertToType(data['privateIp'], 'String');
            }
            if (data.hasOwnProperty('publicIp')) {
                obj['publicIp'] = ApiClient.convertToType(data['publicIp'], 'String');
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = CloudSqlSettings.constructFromObject(data['settings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudSqlConnectionProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudSqlConnectionProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalPublicIp'] && !(typeof data['additionalPublicIp'] === 'string' || data['additionalPublicIp'] instanceof String)) {
            throw new Error("Expected the field `additionalPublicIp` to be a primitive type in the JSON string but got " + data['additionalPublicIp']);
        }
        // ensure the json data is a string
        if (data['cloudSqlId'] && !(typeof data['cloudSqlId'] === 'string' || data['cloudSqlId'] instanceof String)) {
            throw new Error("Expected the field `cloudSqlId` to be a primitive type in the JSON string but got " + data['cloudSqlId']);
        }
        // ensure the json data is a string
        if (data['privateIp'] && !(typeof data['privateIp'] === 'string' || data['privateIp'] instanceof String)) {
            throw new Error("Expected the field `privateIp` to be a primitive type in the JSON string but got " + data['privateIp']);
        }
        // ensure the json data is a string
        if (data['publicIp'] && !(typeof data['publicIp'] === 'string' || data['publicIp'] instanceof String)) {
            throw new Error("Expected the field `publicIp` to be a primitive type in the JSON string but got " + data['publicIp']);
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          CloudSqlSettings.validateJSON(data['settings']);
        }

        return true;
    }


}



/**
 * Output only. The Cloud SQL database instance's additional (outgoing) public IP. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
 * @member {String} additionalPublicIp
 */
CloudSqlConnectionProfile.prototype['additionalPublicIp'] = undefined;

/**
 * Output only. The Cloud SQL instance ID that this connection profile is associated with.
 * @member {String} cloudSqlId
 */
CloudSqlConnectionProfile.prototype['cloudSqlId'] = undefined;

/**
 * Output only. The Cloud SQL database instance's private IP.
 * @member {String} privateIp
 */
CloudSqlConnectionProfile.prototype['privateIp'] = undefined;

/**
 * Output only. The Cloud SQL database instance's public IP.
 * @member {String} publicIp
 */
CloudSqlConnectionProfile.prototype['publicIp'] = undefined;

/**
 * @member {module:model/CloudSqlSettings} settings
 */
CloudSqlConnectionProfile.prototype['settings'] = undefined;






export default CloudSqlConnectionProfile;

