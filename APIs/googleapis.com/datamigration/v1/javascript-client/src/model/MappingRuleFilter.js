/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MappingRuleFilter model module.
 * @module model/MappingRuleFilter
 * @version v1
 */
class MappingRuleFilter {
    /**
     * Constructs a new <code>MappingRuleFilter</code>.
     * A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
     * @alias module:model/MappingRuleFilter
     */
    constructor() { 
        
        MappingRuleFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MappingRuleFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MappingRuleFilter} obj Optional instance to populate.
     * @return {module:model/MappingRuleFilter} The populated <code>MappingRuleFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MappingRuleFilter();

            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], ['String']);
            }
            if (data.hasOwnProperty('entityNameContains')) {
                obj['entityNameContains'] = ApiClient.convertToType(data['entityNameContains'], 'String');
            }
            if (data.hasOwnProperty('entityNamePrefix')) {
                obj['entityNamePrefix'] = ApiClient.convertToType(data['entityNamePrefix'], 'String');
            }
            if (data.hasOwnProperty('entityNameSuffix')) {
                obj['entityNameSuffix'] = ApiClient.convertToType(data['entityNameSuffix'], 'String');
            }
            if (data.hasOwnProperty('parentEntity')) {
                obj['parentEntity'] = ApiClient.convertToType(data['parentEntity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MappingRuleFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MappingRuleFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['entities'])) {
            throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
        }
        // ensure the json data is a string
        if (data['entityNameContains'] && !(typeof data['entityNameContains'] === 'string' || data['entityNameContains'] instanceof String)) {
            throw new Error("Expected the field `entityNameContains` to be a primitive type in the JSON string but got " + data['entityNameContains']);
        }
        // ensure the json data is a string
        if (data['entityNamePrefix'] && !(typeof data['entityNamePrefix'] === 'string' || data['entityNamePrefix'] instanceof String)) {
            throw new Error("Expected the field `entityNamePrefix` to be a primitive type in the JSON string but got " + data['entityNamePrefix']);
        }
        // ensure the json data is a string
        if (data['entityNameSuffix'] && !(typeof data['entityNameSuffix'] === 'string' || data['entityNameSuffix'] instanceof String)) {
            throw new Error("Expected the field `entityNameSuffix` to be a primitive type in the JSON string but got " + data['entityNameSuffix']);
        }
        // ensure the json data is a string
        if (data['parentEntity'] && !(typeof data['parentEntity'] === 'string' || data['parentEntity'] instanceof String)) {
            throw new Error("Expected the field `parentEntity` to be a primitive type in the JSON string but got " + data['parentEntity']);
        }

        return true;
    }


}



/**
 * Optional. The rule should be applied to specific entities defined by their fully qualified names.
 * @member {Array.<String>} entities
 */
MappingRuleFilter.prototype['entities'] = undefined;

/**
 * Optional. The rule should be applied to entities whose non-qualified name contains the given string.
 * @member {String} entityNameContains
 */
MappingRuleFilter.prototype['entityNameContains'] = undefined;

/**
 * Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
 * @member {String} entityNamePrefix
 */
MappingRuleFilter.prototype['entityNamePrefix'] = undefined;

/**
 * Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
 * @member {String} entityNameSuffix
 */
MappingRuleFilter.prototype['entityNameSuffix'] = undefined;

/**
 * Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
 * @member {String} parentEntity
 */
MappingRuleFilter.prototype['parentEntity'] = undefined;






export default MappingRuleFilter;

