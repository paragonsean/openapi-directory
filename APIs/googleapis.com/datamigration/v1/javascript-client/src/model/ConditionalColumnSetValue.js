/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SourceNumericFilter from './SourceNumericFilter';
import SourceTextFilter from './SourceTextFilter';
import ValueTransformation from './ValueTransformation';

/**
 * The ConditionalColumnSetValue model module.
 * @module model/ConditionalColumnSetValue
 * @version v1
 */
class ConditionalColumnSetValue {
    /**
     * Constructs a new <code>ConditionalColumnSetValue</code>.
     * Options to configure rule type ConditionalColumnSetValue. The rule is used to transform the data which is being replicated/migrated. The rule filter field can refer to one or more entities. The rule scope can be one of: Column.
     * @alias module:model/ConditionalColumnSetValue
     */
    constructor() { 
        
        ConditionalColumnSetValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConditionalColumnSetValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConditionalColumnSetValue} obj Optional instance to populate.
     * @return {module:model/ConditionalColumnSetValue} The populated <code>ConditionalColumnSetValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConditionalColumnSetValue();

            if (data.hasOwnProperty('customFeatures')) {
                obj['customFeatures'] = ApiClient.convertToType(data['customFeatures'], {'String': Object});
            }
            if (data.hasOwnProperty('sourceNumericFilter')) {
                obj['sourceNumericFilter'] = SourceNumericFilter.constructFromObject(data['sourceNumericFilter']);
            }
            if (data.hasOwnProperty('sourceTextFilter')) {
                obj['sourceTextFilter'] = SourceTextFilter.constructFromObject(data['sourceTextFilter']);
            }
            if (data.hasOwnProperty('valueTransformation')) {
                obj['valueTransformation'] = ValueTransformation.constructFromObject(data['valueTransformation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConditionalColumnSetValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConditionalColumnSetValue</code>.
     */
    static validateJSON(data) {
        // validate the optional field `sourceNumericFilter`
        if (data['sourceNumericFilter']) { // data not null
          SourceNumericFilter.validateJSON(data['sourceNumericFilter']);
        }
        // validate the optional field `sourceTextFilter`
        if (data['sourceTextFilter']) { // data not null
          SourceTextFilter.validateJSON(data['sourceTextFilter']);
        }
        // validate the optional field `valueTransformation`
        if (data['valueTransformation']) { // data not null
          ValueTransformation.validateJSON(data['valueTransformation']);
        }

        return true;
    }


}



/**
 * Optional. Custom engine specific features.
 * @member {Object.<String, Object>} customFeatures
 */
ConditionalColumnSetValue.prototype['customFeatures'] = undefined;

/**
 * @member {module:model/SourceNumericFilter} sourceNumericFilter
 */
ConditionalColumnSetValue.prototype['sourceNumericFilter'] = undefined;

/**
 * @member {module:model/SourceTextFilter} sourceTextFilter
 */
ConditionalColumnSetValue.prototype['sourceTextFilter'] = undefined;

/**
 * @member {module:model/ValueTransformation} valueTransformation
 */
ConditionalColumnSetValue.prototype['valueTransformation'] = undefined;






export default ConditionalColumnSetValue;

