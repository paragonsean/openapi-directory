/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValueListFilter model module.
 * @module model/ValueListFilter
 * @version v1
 */
class ValueListFilter {
    /**
     * Constructs a new <code>ValueListFilter</code>.
     * A list of values to filter by in ConditionalColumnSetValue
     * @alias module:model/ValueListFilter
     */
    constructor() { 
        
        ValueListFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValueListFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValueListFilter} obj Optional instance to populate.
     * @return {module:model/ValueListFilter} The populated <code>ValueListFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValueListFilter();

            if (data.hasOwnProperty('ignoreCase')) {
                obj['ignoreCase'] = ApiClient.convertToType(data['ignoreCase'], 'Boolean');
            }
            if (data.hasOwnProperty('valuePresentList')) {
                obj['valuePresentList'] = ApiClient.convertToType(data['valuePresentList'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValueListFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValueListFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['valuePresentList'] && !(typeof data['valuePresentList'] === 'string' || data['valuePresentList'] instanceof String)) {
            throw new Error("Expected the field `valuePresentList` to be a primitive type in the JSON string but got " + data['valuePresentList']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}



/**
 * Required. Whether to ignore case when filtering by values. Defaults to false
 * @member {Boolean} ignoreCase
 */
ValueListFilter.prototype['ignoreCase'] = undefined;

/**
 * Required. Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
 * @member {module:model/ValueListFilter.ValuePresentListEnum} valuePresentList
 */
ValueListFilter.prototype['valuePresentList'] = undefined;

/**
 * Required. The list to be used to filter by
 * @member {Array.<String>} values
 */
ValueListFilter.prototype['values'] = undefined;





/**
 * Allowed values for the <code>valuePresentList</code> property.
 * @enum {String}
 * @readonly
 */
ValueListFilter['ValuePresentListEnum'] = {

    /**
     * value: "VALUE_PRESENT_IN_LIST_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "VALUE_PRESENT_IN_LIST_UNSPECIFIED",

    /**
     * value: "VALUE_PRESENT_IN_LIST_IF_VALUE_LIST"
     * @const
     */
    "IF_VALUE_LIST": "VALUE_PRESENT_IN_LIST_IF_VALUE_LIST",

    /**
     * value: "VALUE_PRESENT_IN_LIST_IF_VALUE_NOT_LIST"
     * @const
     */
    "IF_VALUE_NOT_LIST": "VALUE_PRESENT_IN_LIST_IF_VALUE_NOT_LIST"
};



export default ValueListFilter;

