/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatabaseEngineInfo from './DatabaseEngineInfo';

/**
 * The ConversionWorkspace model module.
 * @module model/ConversionWorkspace
 * @version v1
 */
class ConversionWorkspace {
    /**
     * Constructs a new <code>ConversionWorkspace</code>.
     * The main conversion workspace resource entity.
     * @alias module:model/ConversionWorkspace
     */
    constructor() { 
        
        ConversionWorkspace.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConversionWorkspace</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversionWorkspace} obj Optional instance to populate.
     * @return {module:model/ConversionWorkspace} The populated <code>ConversionWorkspace</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversionWorkspace();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = DatabaseEngineInfo.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('globalSettings')) {
                obj['globalSettings'] = ApiClient.convertToType(data['globalSettings'], {'String': 'String'});
            }
            if (data.hasOwnProperty('hasUncommittedChanges')) {
                obj['hasUncommittedChanges'] = ApiClient.convertToType(data['hasUncommittedChanges'], 'Boolean');
            }
            if (data.hasOwnProperty('latestCommitId')) {
                obj['latestCommitId'] = ApiClient.convertToType(data['latestCommitId'], 'String');
            }
            if (data.hasOwnProperty('latestCommitTime')) {
                obj['latestCommitTime'] = ApiClient.convertToType(data['latestCommitTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = DatabaseEngineInfo.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConversionWorkspace</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConversionWorkspace</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          DatabaseEngineInfo.validateJSON(data['destination']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['latestCommitId'] && !(typeof data['latestCommitId'] === 'string' || data['latestCommitId'] instanceof String)) {
            throw new Error("Expected the field `latestCommitId` to be a primitive type in the JSON string but got " + data['latestCommitId']);
        }
        // ensure the json data is a string
        if (data['latestCommitTime'] && !(typeof data['latestCommitTime'] === 'string' || data['latestCommitTime'] instanceof String)) {
            throw new Error("Expected the field `latestCommitTime` to be a primitive type in the JSON string but got " + data['latestCommitTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          DatabaseEngineInfo.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The timestamp when the workspace resource was created.
 * @member {String} createTime
 */
ConversionWorkspace.prototype['createTime'] = undefined;

/**
 * @member {module:model/DatabaseEngineInfo} destination
 */
ConversionWorkspace.prototype['destination'] = undefined;

/**
 * Optional. The display name for the workspace.
 * @member {String} displayName
 */
ConversionWorkspace.prototype['displayName'] = undefined;

/**
 * Optional. A generic list of settings for the workspace. The settings are database pair dependant and can indicate default behavior for the mapping rules engine or turn on or off specific features. Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false, ignore_non_table_synonyms=true
 * @member {Object.<String, String>} globalSettings
 */
ConversionWorkspace.prototype['globalSettings'] = undefined;

/**
 * Output only. Whether the workspace has uncommitted changes (changes which were made after the workspace was committed).
 * @member {Boolean} hasUncommittedChanges
 */
ConversionWorkspace.prototype['hasUncommittedChanges'] = undefined;

/**
 * Output only. The latest commit ID.
 * @member {String} latestCommitId
 */
ConversionWorkspace.prototype['latestCommitId'] = undefined;

/**
 * Output only. The timestamp when the workspace was committed.
 * @member {String} latestCommitTime
 */
ConversionWorkspace.prototype['latestCommitTime'] = undefined;

/**
 * Full name of the workspace resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 * @member {String} name
 */
ConversionWorkspace.prototype['name'] = undefined;

/**
 * @member {module:model/DatabaseEngineInfo} source
 */
ConversionWorkspace.prototype['source'] = undefined;

/**
 * Output only. The timestamp when the workspace resource was last updated.
 * @member {String} updateTime
 */
ConversionWorkspace.prototype['updateTime'] = undefined;






export default ConversionWorkspace;

