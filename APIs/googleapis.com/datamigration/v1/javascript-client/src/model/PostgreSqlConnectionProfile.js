/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrivateServiceConnectConnectivity from './PrivateServiceConnectConnectivity';
import SslConfig from './SslConfig';

/**
 * The PostgreSqlConnectionProfile model module.
 * @module model/PostgreSqlConnectionProfile
 * @version v1
 */
class PostgreSqlConnectionProfile {
    /**
     * Constructs a new <code>PostgreSqlConnectionProfile</code>.
     * Specifies connection parameters required specifically for PostgreSQL databases.
     * @alias module:model/PostgreSqlConnectionProfile
     */
    constructor() { 
        
        PostgreSqlConnectionProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PostgreSqlConnectionProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostgreSqlConnectionProfile} obj Optional instance to populate.
     * @return {module:model/PostgreSqlConnectionProfile} The populated <code>PostgreSqlConnectionProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostgreSqlConnectionProfile();

            if (data.hasOwnProperty('alloydbClusterId')) {
                obj['alloydbClusterId'] = ApiClient.convertToType(data['alloydbClusterId'], 'String');
            }
            if (data.hasOwnProperty('cloudSqlId')) {
                obj['cloudSqlId'] = ApiClient.convertToType(data['cloudSqlId'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('networkArchitecture')) {
                obj['networkArchitecture'] = ApiClient.convertToType(data['networkArchitecture'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('passwordSet')) {
                obj['passwordSet'] = ApiClient.convertToType(data['passwordSet'], 'Boolean');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('privateServiceConnectConnectivity')) {
                obj['privateServiceConnectConnectivity'] = PrivateServiceConnectConnectivity.constructFromObject(data['privateServiceConnectConnectivity']);
            }
            if (data.hasOwnProperty('ssl')) {
                obj['ssl'] = SslConfig.constructFromObject(data['ssl']);
            }
            if (data.hasOwnProperty('staticIpConnectivity')) {
                obj['staticIpConnectivity'] = ApiClient.convertToType(data['staticIpConnectivity'], Object);
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostgreSqlConnectionProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostgreSqlConnectionProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alloydbClusterId'] && !(typeof data['alloydbClusterId'] === 'string' || data['alloydbClusterId'] instanceof String)) {
            throw new Error("Expected the field `alloydbClusterId` to be a primitive type in the JSON string but got " + data['alloydbClusterId']);
        }
        // ensure the json data is a string
        if (data['cloudSqlId'] && !(typeof data['cloudSqlId'] === 'string' || data['cloudSqlId'] instanceof String)) {
            throw new Error("Expected the field `cloudSqlId` to be a primitive type in the JSON string but got " + data['cloudSqlId']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['networkArchitecture'] && !(typeof data['networkArchitecture'] === 'string' || data['networkArchitecture'] instanceof String)) {
            throw new Error("Expected the field `networkArchitecture` to be a primitive type in the JSON string but got " + data['networkArchitecture']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // validate the optional field `privateServiceConnectConnectivity`
        if (data['privateServiceConnectConnectivity']) { // data not null
          PrivateServiceConnectConnectivity.validateJSON(data['privateServiceConnectConnectivity']);
        }
        // validate the optional field `ssl`
        if (data['ssl']) { // data not null
          SslConfig.validateJSON(data['ssl']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
 * @member {String} alloydbClusterId
 */
PostgreSqlConnectionProfile.prototype['alloydbClusterId'] = undefined;

/**
 * If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
 * @member {String} cloudSqlId
 */
PostgreSqlConnectionProfile.prototype['cloudSqlId'] = undefined;

/**
 * Required. The IP or hostname of the source PostgreSQL database.
 * @member {String} host
 */
PostgreSqlConnectionProfile.prototype['host'] = undefined;

/**
 * Output only. If the source is a Cloud SQL database, this field indicates the network architecture it's associated with.
 * @member {module:model/PostgreSqlConnectionProfile.NetworkArchitectureEnum} networkArchitecture
 */
PostgreSqlConnectionProfile.prototype['networkArchitecture'] = undefined;

/**
 * Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
 * @member {String} password
 */
PostgreSqlConnectionProfile.prototype['password'] = undefined;

/**
 * Output only. Indicates If this connection profile password is stored.
 * @member {Boolean} passwordSet
 */
PostgreSqlConnectionProfile.prototype['passwordSet'] = undefined;

/**
 * Required. The network port of the source PostgreSQL database.
 * @member {Number} port
 */
PostgreSqlConnectionProfile.prototype['port'] = undefined;

/**
 * @member {module:model/PrivateServiceConnectConnectivity} privateServiceConnectConnectivity
 */
PostgreSqlConnectionProfile.prototype['privateServiceConnectConnectivity'] = undefined;

/**
 * @member {module:model/SslConfig} ssl
 */
PostgreSqlConnectionProfile.prototype['ssl'] = undefined;

/**
 * The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
 * @member {Object} staticIpConnectivity
 */
PostgreSqlConnectionProfile.prototype['staticIpConnectivity'] = undefined;

/**
 * Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
 * @member {String} username
 */
PostgreSqlConnectionProfile.prototype['username'] = undefined;





/**
 * Allowed values for the <code>networkArchitecture</code> property.
 * @enum {String}
 * @readonly
 */
PostgreSqlConnectionProfile['NetworkArchitectureEnum'] = {

    /**
     * value: "NETWORK_ARCHITECTURE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "NETWORK_ARCHITECTURE_UNSPECIFIED",

    /**
     * value: "NETWORK_ARCHITECTURE_OLD_CSQL_PRODUCER"
     * @const
     */
    "OLD_CSQL_PRODUCER": "NETWORK_ARCHITECTURE_OLD_CSQL_PRODUCER",

    /**
     * value: "NETWORK_ARCHITECTURE_NEW_CSQL_PRODUCER"
     * @const
     */
    "NEW_CSQL_PRODUCER": "NETWORK_ARCHITECTURE_NEW_CSQL_PRODUCER"
};



export default PostgreSqlConnectionProfile;

