/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConditionalColumnSetValue from './ConditionalColumnSetValue';
import ConvertRowIdToColumn from './ConvertRowIdToColumn';
import EntityMove from './EntityMove';
import FilterTableColumns from './FilterTableColumns';
import MappingRuleFilter from './MappingRuleFilter';
import MultiColumnDatatypeChange from './MultiColumnDatatypeChange';
import MultiEntityRename from './MultiEntityRename';
import SetTablePrimaryKey from './SetTablePrimaryKey';
import SingleColumnChange from './SingleColumnChange';
import SingleEntityRename from './SingleEntityRename';
import SinglePackageChange from './SinglePackageChange';
import SourceSqlChange from './SourceSqlChange';

/**
 * The MappingRule model module.
 * @module model/MappingRule
 * @version v1
 */
class MappingRule {
    /**
     * Constructs a new <code>MappingRule</code>.
     * Definition of a transformation that is to be applied to a group of entities in the source schema. Several such transformations can be applied to an entity sequentially to define the corresponding entity in the target schema.
     * @alias module:model/MappingRule
     */
    constructor() { 
        
        MappingRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MappingRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MappingRule} obj Optional instance to populate.
     * @return {module:model/MappingRule} The populated <code>MappingRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MappingRule();

            if (data.hasOwnProperty('conditionalColumnSetValue')) {
                obj['conditionalColumnSetValue'] = ConditionalColumnSetValue.constructFromObject(data['conditionalColumnSetValue']);
            }
            if (data.hasOwnProperty('convertRowidColumn')) {
                obj['convertRowidColumn'] = ConvertRowIdToColumn.constructFromObject(data['convertRowidColumn']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('entityMove')) {
                obj['entityMove'] = EntityMove.constructFromObject(data['entityMove']);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = MappingRuleFilter.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('filterTableColumns')) {
                obj['filterTableColumns'] = FilterTableColumns.constructFromObject(data['filterTableColumns']);
            }
            if (data.hasOwnProperty('multiColumnDataTypeChange')) {
                obj['multiColumnDataTypeChange'] = MultiColumnDatatypeChange.constructFromObject(data['multiColumnDataTypeChange']);
            }
            if (data.hasOwnProperty('multiEntityRename')) {
                obj['multiEntityRename'] = MultiEntityRename.constructFromObject(data['multiEntityRename']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('revisionCreateTime')) {
                obj['revisionCreateTime'] = ApiClient.convertToType(data['revisionCreateTime'], 'String');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
            if (data.hasOwnProperty('ruleOrder')) {
                obj['ruleOrder'] = ApiClient.convertToType(data['ruleOrder'], 'String');
            }
            if (data.hasOwnProperty('ruleScope')) {
                obj['ruleScope'] = ApiClient.convertToType(data['ruleScope'], 'String');
            }
            if (data.hasOwnProperty('setTablePrimaryKey')) {
                obj['setTablePrimaryKey'] = SetTablePrimaryKey.constructFromObject(data['setTablePrimaryKey']);
            }
            if (data.hasOwnProperty('singleColumnChange')) {
                obj['singleColumnChange'] = SingleColumnChange.constructFromObject(data['singleColumnChange']);
            }
            if (data.hasOwnProperty('singleEntityRename')) {
                obj['singleEntityRename'] = SingleEntityRename.constructFromObject(data['singleEntityRename']);
            }
            if (data.hasOwnProperty('singlePackageChange')) {
                obj['singlePackageChange'] = SinglePackageChange.constructFromObject(data['singlePackageChange']);
            }
            if (data.hasOwnProperty('sourceSqlChange')) {
                obj['sourceSqlChange'] = SourceSqlChange.constructFromObject(data['sourceSqlChange']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MappingRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MappingRule</code>.
     */
    static validateJSON(data) {
        // validate the optional field `conditionalColumnSetValue`
        if (data['conditionalColumnSetValue']) { // data not null
          ConditionalColumnSetValue.validateJSON(data['conditionalColumnSetValue']);
        }
        // validate the optional field `convertRowidColumn`
        if (data['convertRowidColumn']) { // data not null
          ConvertRowIdToColumn.validateJSON(data['convertRowidColumn']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `entityMove`
        if (data['entityMove']) { // data not null
          EntityMove.validateJSON(data['entityMove']);
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          MappingRuleFilter.validateJSON(data['filter']);
        }
        // validate the optional field `filterTableColumns`
        if (data['filterTableColumns']) { // data not null
          FilterTableColumns.validateJSON(data['filterTableColumns']);
        }
        // validate the optional field `multiColumnDataTypeChange`
        if (data['multiColumnDataTypeChange']) { // data not null
          MultiColumnDatatypeChange.validateJSON(data['multiColumnDataTypeChange']);
        }
        // validate the optional field `multiEntityRename`
        if (data['multiEntityRename']) { // data not null
          MultiEntityRename.validateJSON(data['multiEntityRename']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['revisionCreateTime'] && !(typeof data['revisionCreateTime'] === 'string' || data['revisionCreateTime'] instanceof String)) {
            throw new Error("Expected the field `revisionCreateTime` to be a primitive type in the JSON string but got " + data['revisionCreateTime']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }
        // ensure the json data is a string
        if (data['ruleOrder'] && !(typeof data['ruleOrder'] === 'string' || data['ruleOrder'] instanceof String)) {
            throw new Error("Expected the field `ruleOrder` to be a primitive type in the JSON string but got " + data['ruleOrder']);
        }
        // ensure the json data is a string
        if (data['ruleScope'] && !(typeof data['ruleScope'] === 'string' || data['ruleScope'] instanceof String)) {
            throw new Error("Expected the field `ruleScope` to be a primitive type in the JSON string but got " + data['ruleScope']);
        }
        // validate the optional field `setTablePrimaryKey`
        if (data['setTablePrimaryKey']) { // data not null
          SetTablePrimaryKey.validateJSON(data['setTablePrimaryKey']);
        }
        // validate the optional field `singleColumnChange`
        if (data['singleColumnChange']) { // data not null
          SingleColumnChange.validateJSON(data['singleColumnChange']);
        }
        // validate the optional field `singleEntityRename`
        if (data['singleEntityRename']) { // data not null
          SingleEntityRename.validateJSON(data['singleEntityRename']);
        }
        // validate the optional field `singlePackageChange`
        if (data['singlePackageChange']) { // data not null
          SinglePackageChange.validateJSON(data['singlePackageChange']);
        }
        // validate the optional field `sourceSqlChange`
        if (data['sourceSqlChange']) { // data not null
          SourceSqlChange.validateJSON(data['sourceSqlChange']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConditionalColumnSetValue} conditionalColumnSetValue
 */
MappingRule.prototype['conditionalColumnSetValue'] = undefined;

/**
 * @member {module:model/ConvertRowIdToColumn} convertRowidColumn
 */
MappingRule.prototype['convertRowidColumn'] = undefined;

/**
 * Optional. A human readable name
 * @member {String} displayName
 */
MappingRule.prototype['displayName'] = undefined;

/**
 * @member {module:model/EntityMove} entityMove
 */
MappingRule.prototype['entityMove'] = undefined;

/**
 * @member {module:model/MappingRuleFilter} filter
 */
MappingRule.prototype['filter'] = undefined;

/**
 * @member {module:model/FilterTableColumns} filterTableColumns
 */
MappingRule.prototype['filterTableColumns'] = undefined;

/**
 * @member {module:model/MultiColumnDatatypeChange} multiColumnDataTypeChange
 */
MappingRule.prototype['multiColumnDataTypeChange'] = undefined;

/**
 * @member {module:model/MultiEntityRename} multiEntityRename
 */
MappingRule.prototype['multiEntityRename'] = undefined;

/**
 * Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
 * @member {String} name
 */
MappingRule.prototype['name'] = undefined;

/**
 * Output only. The timestamp that the revision was created.
 * @member {String} revisionCreateTime
 */
MappingRule.prototype['revisionCreateTime'] = undefined;

/**
 * Output only. The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.
 * @member {String} revisionId
 */
MappingRule.prototype['revisionId'] = undefined;

/**
 * Required. The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
 * @member {String} ruleOrder
 */
MappingRule.prototype['ruleOrder'] = undefined;

/**
 * Required. The rule scope
 * @member {module:model/MappingRule.RuleScopeEnum} ruleScope
 */
MappingRule.prototype['ruleScope'] = undefined;

/**
 * @member {module:model/SetTablePrimaryKey} setTablePrimaryKey
 */
MappingRule.prototype['setTablePrimaryKey'] = undefined;

/**
 * @member {module:model/SingleColumnChange} singleColumnChange
 */
MappingRule.prototype['singleColumnChange'] = undefined;

/**
 * @member {module:model/SingleEntityRename} singleEntityRename
 */
MappingRule.prototype['singleEntityRename'] = undefined;

/**
 * @member {module:model/SinglePackageChange} singlePackageChange
 */
MappingRule.prototype['singlePackageChange'] = undefined;

/**
 * @member {module:model/SourceSqlChange} sourceSqlChange
 */
MappingRule.prototype['sourceSqlChange'] = undefined;

/**
 * Optional. The mapping rule state
 * @member {module:model/MappingRule.StateEnum} state
 */
MappingRule.prototype['state'] = undefined;





/**
 * Allowed values for the <code>ruleScope</code> property.
 * @enum {String}
 * @readonly
 */
MappingRule['RuleScopeEnum'] = {

    /**
     * value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "DATABASE_ENTITY_TYPE_UNSPECIFIED",

    /**
     * value: "DATABASE_ENTITY_TYPE_SCHEMA"
     * @const
     */
    "SCHEMA": "DATABASE_ENTITY_TYPE_SCHEMA",

    /**
     * value: "DATABASE_ENTITY_TYPE_TABLE"
     * @const
     */
    "TABLE": "DATABASE_ENTITY_TYPE_TABLE",

    /**
     * value: "DATABASE_ENTITY_TYPE_COLUMN"
     * @const
     */
    "COLUMN": "DATABASE_ENTITY_TYPE_COLUMN",

    /**
     * value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
     * @const
     */
    "CONSTRAINT": "DATABASE_ENTITY_TYPE_CONSTRAINT",

    /**
     * value: "DATABASE_ENTITY_TYPE_INDEX"
     * @const
     */
    "INDEX": "DATABASE_ENTITY_TYPE_INDEX",

    /**
     * value: "DATABASE_ENTITY_TYPE_TRIGGER"
     * @const
     */
    "TRIGGER": "DATABASE_ENTITY_TYPE_TRIGGER",

    /**
     * value: "DATABASE_ENTITY_TYPE_VIEW"
     * @const
     */
    "VIEW": "DATABASE_ENTITY_TYPE_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_SEQUENCE"
     * @const
     */
    "SEQUENCE": "DATABASE_ENTITY_TYPE_SEQUENCE",

    /**
     * value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
     * @const
     */
    "STORED_PROCEDURE": "DATABASE_ENTITY_TYPE_STORED_PROCEDURE",

    /**
     * value: "DATABASE_ENTITY_TYPE_FUNCTION"
     * @const
     */
    "FUNCTION": "DATABASE_ENTITY_TYPE_FUNCTION",

    /**
     * value: "DATABASE_ENTITY_TYPE_SYNONYM"
     * @const
     */
    "SYNONYM": "DATABASE_ENTITY_TYPE_SYNONYM",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
     * @const
     */
    "DATABASE_PACKAGE": "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE",

    /**
     * value: "DATABASE_ENTITY_TYPE_UDT"
     * @const
     */
    "UDT": "DATABASE_ENTITY_TYPE_UDT",

    /**
     * value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
     * @const
     */
    "MATERIALIZED_VIEW": "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE"
     * @const
     */
    "DATABASE": "DATABASE_ENTITY_TYPE_DATABASE"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
MappingRule['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default MappingRule;

