/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SingleColumnChange model module.
 * @module model/SingleColumnChange
 * @version v1
 */
class SingleColumnChange {
    /**
     * Constructs a new <code>SingleColumnChange</code>.
     * Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column&#39;s configuration will be the same as the one in the source column..
     * @alias module:model/SingleColumnChange
     */
    constructor() { 
        
        SingleColumnChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SingleColumnChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SingleColumnChange} obj Optional instance to populate.
     * @return {module:model/SingleColumnChange} The populated <code>SingleColumnChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SingleColumnChange();

            if (data.hasOwnProperty('array')) {
                obj['array'] = ApiClient.convertToType(data['array'], 'Boolean');
            }
            if (data.hasOwnProperty('arrayLength')) {
                obj['arrayLength'] = ApiClient.convertToType(data['arrayLength'], 'Number');
            }
            if (data.hasOwnProperty('autoGenerated')) {
                obj['autoGenerated'] = ApiClient.convertToType(data['autoGenerated'], 'Boolean');
            }
            if (data.hasOwnProperty('charset')) {
                obj['charset'] = ApiClient.convertToType(data['charset'], 'String');
            }
            if (data.hasOwnProperty('collation')) {
                obj['collation'] = ApiClient.convertToType(data['collation'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('customFeatures')) {
                obj['customFeatures'] = ApiClient.convertToType(data['customFeatures'], {'String': Object});
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
            if (data.hasOwnProperty('fractionalSecondsPrecision')) {
                obj['fractionalSecondsPrecision'] = ApiClient.convertToType(data['fractionalSecondsPrecision'], 'Number');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'String');
            }
            if (data.hasOwnProperty('nullable')) {
                obj['nullable'] = ApiClient.convertToType(data['nullable'], 'Boolean');
            }
            if (data.hasOwnProperty('precision')) {
                obj['precision'] = ApiClient.convertToType(data['precision'], 'Number');
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
            }
            if (data.hasOwnProperty('setValues')) {
                obj['setValues'] = ApiClient.convertToType(data['setValues'], ['String']);
            }
            if (data.hasOwnProperty('udt')) {
                obj['udt'] = ApiClient.convertToType(data['udt'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SingleColumnChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SingleColumnChange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['charset'] && !(typeof data['charset'] === 'string' || data['charset'] instanceof String)) {
            throw new Error("Expected the field `charset` to be a primitive type in the JSON string but got " + data['charset']);
        }
        // ensure the json data is a string
        if (data['collation'] && !(typeof data['collation'] === 'string' || data['collation'] instanceof String)) {
            throw new Error("Expected the field `collation` to be a primitive type in the JSON string but got " + data['collation']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['dataType'] && !(typeof data['dataType'] === 'string' || data['dataType'] instanceof String)) {
            throw new Error("Expected the field `dataType` to be a primitive type in the JSON string but got " + data['dataType']);
        }
        // ensure the json data is a string
        if (data['length'] && !(typeof data['length'] === 'string' || data['length'] instanceof String)) {
            throw new Error("Expected the field `length` to be a primitive type in the JSON string but got " + data['length']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['setValues'])) {
            throw new Error("Expected the field `setValues` to be an array in the JSON data but got " + data['setValues']);
        }

        return true;
    }


}



/**
 * Optional. Is the column of array type.
 * @member {Boolean} array
 */
SingleColumnChange.prototype['array'] = undefined;

/**
 * Optional. The length of the array, only relevant if the column type is an array.
 * @member {Number} arrayLength
 */
SingleColumnChange.prototype['arrayLength'] = undefined;

/**
 * Optional. Is the column auto-generated/identity.
 * @member {Boolean} autoGenerated
 */
SingleColumnChange.prototype['autoGenerated'] = undefined;

/**
 * Optional. Charset override - instead of table level charset.
 * @member {String} charset
 */
SingleColumnChange.prototype['charset'] = undefined;

/**
 * Optional. Collation override - instead of table level collation.
 * @member {String} collation
 */
SingleColumnChange.prototype['collation'] = undefined;

/**
 * Optional. Comment associated with the column.
 * @member {String} comment
 */
SingleColumnChange.prototype['comment'] = undefined;

/**
 * Optional. Custom engine specific features.
 * @member {Object.<String, Object>} customFeatures
 */
SingleColumnChange.prototype['customFeatures'] = undefined;

/**
 * Optional. Column data type name.
 * @member {String} dataType
 */
SingleColumnChange.prototype['dataType'] = undefined;

/**
 * Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
 * @member {Number} fractionalSecondsPrecision
 */
SingleColumnChange.prototype['fractionalSecondsPrecision'] = undefined;

/**
 * Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
 * @member {String} length
 */
SingleColumnChange.prototype['length'] = undefined;

/**
 * Optional. Is the column nullable.
 * @member {Boolean} nullable
 */
SingleColumnChange.prototype['nullable'] = undefined;

/**
 * Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
 * @member {Number} precision
 */
SingleColumnChange.prototype['precision'] = undefined;

/**
 * Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
 * @member {Number} scale
 */
SingleColumnChange.prototype['scale'] = undefined;

/**
 * Optional. Specifies the list of values allowed in the column.
 * @member {Array.<String>} setValues
 */
SingleColumnChange.prototype['setValues'] = undefined;

/**
 * Optional. Is the column a UDT (User-defined Type).
 * @member {Boolean} udt
 */
SingleColumnChange.prototype['udt'] = undefined;






export default SingleColumnChange;

