/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EntityDdl model module.
 * @module model/EntityDdl
 * @version v1
 */
class EntityDdl {
    /**
     * Constructs a new <code>EntityDdl</code>.
     * A single DDL statement for a specific entity
     * @alias module:model/EntityDdl
     */
    constructor() { 
        
        EntityDdl.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityDdl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityDdl} obj Optional instance to populate.
     * @return {module:model/EntityDdl} The populated <code>EntityDdl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityDdl();

            if (data.hasOwnProperty('ddl')) {
                obj['ddl'] = ApiClient.convertToType(data['ddl'], 'String');
            }
            if (data.hasOwnProperty('ddlType')) {
                obj['ddlType'] = ApiClient.convertToType(data['ddlType'], 'String');
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = ApiClient.convertToType(data['entity'], 'String');
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('issueId')) {
                obj['issueId'] = ApiClient.convertToType(data['issueId'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntityDdl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntityDdl</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ddl'] && !(typeof data['ddl'] === 'string' || data['ddl'] instanceof String)) {
            throw new Error("Expected the field `ddl` to be a primitive type in the JSON string but got " + data['ddl']);
        }
        // ensure the json data is a string
        if (data['ddlType'] && !(typeof data['ddlType'] === 'string' || data['ddlType'] instanceof String)) {
            throw new Error("Expected the field `ddlType` to be a primitive type in the JSON string but got " + data['ddlType']);
        }
        // ensure the json data is a string
        if (data['entity'] && !(typeof data['entity'] === 'string' || data['entity'] instanceof String)) {
            throw new Error("Expected the field `entity` to be a primitive type in the JSON string but got " + data['entity']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['issueId'])) {
            throw new Error("Expected the field `issueId` to be an array in the JSON data but got " + data['issueId']);
        }

        return true;
    }


}



/**
 * The actual ddl code.
 * @member {String} ddl
 */
EntityDdl.prototype['ddl'] = undefined;

/**
 * Type of DDL (Create, Alter).
 * @member {String} ddlType
 */
EntityDdl.prototype['ddlType'] = undefined;

/**
 * The name of the database entity the ddl refers to.
 * @member {String} entity
 */
EntityDdl.prototype['entity'] = undefined;

/**
 * The entity type (if the DDL is for a sub entity).
 * @member {module:model/EntityDdl.EntityTypeEnum} entityType
 */
EntityDdl.prototype['entityType'] = undefined;

/**
 * EntityIssues found for this ddl.
 * @member {Array.<String>} issueId
 */
EntityDdl.prototype['issueId'] = undefined;





/**
 * Allowed values for the <code>entityType</code> property.
 * @enum {String}
 * @readonly
 */
EntityDdl['EntityTypeEnum'] = {

    /**
     * value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "DATABASE_ENTITY_TYPE_UNSPECIFIED",

    /**
     * value: "DATABASE_ENTITY_TYPE_SCHEMA"
     * @const
     */
    "SCHEMA": "DATABASE_ENTITY_TYPE_SCHEMA",

    /**
     * value: "DATABASE_ENTITY_TYPE_TABLE"
     * @const
     */
    "TABLE": "DATABASE_ENTITY_TYPE_TABLE",

    /**
     * value: "DATABASE_ENTITY_TYPE_COLUMN"
     * @const
     */
    "COLUMN": "DATABASE_ENTITY_TYPE_COLUMN",

    /**
     * value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
     * @const
     */
    "CONSTRAINT": "DATABASE_ENTITY_TYPE_CONSTRAINT",

    /**
     * value: "DATABASE_ENTITY_TYPE_INDEX"
     * @const
     */
    "INDEX": "DATABASE_ENTITY_TYPE_INDEX",

    /**
     * value: "DATABASE_ENTITY_TYPE_TRIGGER"
     * @const
     */
    "TRIGGER": "DATABASE_ENTITY_TYPE_TRIGGER",

    /**
     * value: "DATABASE_ENTITY_TYPE_VIEW"
     * @const
     */
    "VIEW": "DATABASE_ENTITY_TYPE_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_SEQUENCE"
     * @const
     */
    "SEQUENCE": "DATABASE_ENTITY_TYPE_SEQUENCE",

    /**
     * value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
     * @const
     */
    "STORED_PROCEDURE": "DATABASE_ENTITY_TYPE_STORED_PROCEDURE",

    /**
     * value: "DATABASE_ENTITY_TYPE_FUNCTION"
     * @const
     */
    "FUNCTION": "DATABASE_ENTITY_TYPE_FUNCTION",

    /**
     * value: "DATABASE_ENTITY_TYPE_SYNONYM"
     * @const
     */
    "SYNONYM": "DATABASE_ENTITY_TYPE_SYNONYM",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
     * @const
     */
    "DATABASE_PACKAGE": "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE",

    /**
     * value: "DATABASE_ENTITY_TYPE_UDT"
     * @const
     */
    "UDT": "DATABASE_ENTITY_TYPE_UDT",

    /**
     * value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
     * @const
     */
    "MATERIALIZED_VIEW": "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE"
     * @const
     */
    "DATABASE": "DATABASE_ENTITY_TYPE_DATABASE"
};



export default EntityDdl;

