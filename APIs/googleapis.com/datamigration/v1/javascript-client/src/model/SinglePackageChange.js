/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SinglePackageChange model module.
 * @module model/SinglePackageChange
 * @version v1
 */
class SinglePackageChange {
    /**
     * Constructs a new <code>SinglePackageChange</code>.
     * Options to configure rule type SinglePackageChange. The rule is used to alter the sql code for a package entities. The rule filter field can refer to one entity. The rule scope can be: Package
     * @alias module:model/SinglePackageChange
     */
    constructor() { 
        
        SinglePackageChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SinglePackageChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SinglePackageChange} obj Optional instance to populate.
     * @return {module:model/SinglePackageChange} The populated <code>SinglePackageChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SinglePackageChange();

            if (data.hasOwnProperty('packageBody')) {
                obj['packageBody'] = ApiClient.convertToType(data['packageBody'], 'String');
            }
            if (data.hasOwnProperty('packageDescription')) {
                obj['packageDescription'] = ApiClient.convertToType(data['packageDescription'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SinglePackageChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SinglePackageChange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['packageBody'] && !(typeof data['packageBody'] === 'string' || data['packageBody'] instanceof String)) {
            throw new Error("Expected the field `packageBody` to be a primitive type in the JSON string but got " + data['packageBody']);
        }
        // ensure the json data is a string
        if (data['packageDescription'] && !(typeof data['packageDescription'] === 'string' || data['packageDescription'] instanceof String)) {
            throw new Error("Expected the field `packageDescription` to be a primitive type in the JSON string but got " + data['packageDescription']);
        }

        return true;
    }


}



/**
 * Optional. Sql code for package body
 * @member {String} packageBody
 */
SinglePackageChange.prototype['packageBody'] = undefined;

/**
 * Optional. Sql code for package description
 * @member {String} packageDescription
 */
SinglePackageChange.prototype['packageDescription'] = undefined;






export default SinglePackageChange;

