/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnEntity from './ColumnEntity';
import ConstraintEntity from './ConstraintEntity';
import IndexEntity from './IndexEntity';
import TriggerEntity from './TriggerEntity';

/**
 * The TableEntity model module.
 * @module model/TableEntity
 * @version v1
 */
class TableEntity {
    /**
     * Constructs a new <code>TableEntity</code>.
     * Table&#39;s parent is a schema.
     * @alias module:model/TableEntity
     */
    constructor() { 
        
        TableEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableEntity} obj Optional instance to populate.
     * @return {module:model/TableEntity} The populated <code>TableEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableEntity();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [ColumnEntity]);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ApiClient.convertToType(data['constraints'], [ConstraintEntity]);
            }
            if (data.hasOwnProperty('customFeatures')) {
                obj['customFeatures'] = ApiClient.convertToType(data['customFeatures'], {'String': Object});
            }
            if (data.hasOwnProperty('indices')) {
                obj['indices'] = ApiClient.convertToType(data['indices'], [IndexEntity]);
            }
            if (data.hasOwnProperty('triggers')) {
                obj['triggers'] = ApiClient.convertToType(data['triggers'], [TriggerEntity]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableEntity</code>.
     */
    static validateJSON(data) {
        if (data['columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columns'])) {
                throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
            }
            // validate the optional field `columns` (array)
            for (const item of data['columns']) {
                ColumnEntity.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        if (data['constraints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['constraints'])) {
                throw new Error("Expected the field `constraints` to be an array in the JSON data but got " + data['constraints']);
            }
            // validate the optional field `constraints` (array)
            for (const item of data['constraints']) {
                ConstraintEntity.validateJSON(item);
            };
        }
        if (data['indices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['indices'])) {
                throw new Error("Expected the field `indices` to be an array in the JSON data but got " + data['indices']);
            }
            // validate the optional field `indices` (array)
            for (const item of data['indices']) {
                IndexEntity.validateJSON(item);
            };
        }
        if (data['triggers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['triggers'])) {
                throw new Error("Expected the field `triggers` to be an array in the JSON data but got " + data['triggers']);
            }
            // validate the optional field `triggers` (array)
            for (const item of data['triggers']) {
                TriggerEntity.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Table columns.
 * @member {Array.<module:model/ColumnEntity>} columns
 */
TableEntity.prototype['columns'] = undefined;

/**
 * Comment associated with the table.
 * @member {String} comment
 */
TableEntity.prototype['comment'] = undefined;

/**
 * Table constraints.
 * @member {Array.<module:model/ConstraintEntity>} constraints
 */
TableEntity.prototype['constraints'] = undefined;

/**
 * Custom engine specific features.
 * @member {Object.<String, Object>} customFeatures
 */
TableEntity.prototype['customFeatures'] = undefined;

/**
 * Table indices.
 * @member {Array.<module:model/IndexEntity>} indices
 */
TableEntity.prototype['indices'] = undefined;

/**
 * Table triggers.
 * @member {Array.<module:model/TriggerEntity>} triggers
 */
TableEntity.prototype['triggers'] = undefined;






export default TableEntity;

