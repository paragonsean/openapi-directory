/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SourceNumericFilter model module.
 * @module model/SourceNumericFilter
 * @version v1
 */
class SourceNumericFilter {
    /**
     * Constructs a new <code>SourceNumericFilter</code>.
     * Filter for fixed point number data types such as NUMERIC/NUMBER
     * @alias module:model/SourceNumericFilter
     */
    constructor() { 
        
        SourceNumericFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceNumericFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceNumericFilter} obj Optional instance to populate.
     * @return {module:model/SourceNumericFilter} The populated <code>SourceNumericFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceNumericFilter();

            if (data.hasOwnProperty('numericFilterOption')) {
                obj['numericFilterOption'] = ApiClient.convertToType(data['numericFilterOption'], 'String');
            }
            if (data.hasOwnProperty('sourceMaxPrecisionFilter')) {
                obj['sourceMaxPrecisionFilter'] = ApiClient.convertToType(data['sourceMaxPrecisionFilter'], 'Number');
            }
            if (data.hasOwnProperty('sourceMaxScaleFilter')) {
                obj['sourceMaxScaleFilter'] = ApiClient.convertToType(data['sourceMaxScaleFilter'], 'Number');
            }
            if (data.hasOwnProperty('sourceMinPrecisionFilter')) {
                obj['sourceMinPrecisionFilter'] = ApiClient.convertToType(data['sourceMinPrecisionFilter'], 'Number');
            }
            if (data.hasOwnProperty('sourceMinScaleFilter')) {
                obj['sourceMinScaleFilter'] = ApiClient.convertToType(data['sourceMinScaleFilter'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceNumericFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceNumericFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['numericFilterOption'] && !(typeof data['numericFilterOption'] === 'string' || data['numericFilterOption'] instanceof String)) {
            throw new Error("Expected the field `numericFilterOption` to be a primitive type in the JSON string but got " + data['numericFilterOption']);
        }

        return true;
    }


}



/**
 * Required. Enum to set the option defining the datatypes numeric filter has to be applied to
 * @member {module:model/SourceNumericFilter.NumericFilterOptionEnum} numericFilterOption
 */
SourceNumericFilter.prototype['numericFilterOption'] = undefined;

/**
 * Optional. The filter will match columns with precision smaller than or equal to this number.
 * @member {Number} sourceMaxPrecisionFilter
 */
SourceNumericFilter.prototype['sourceMaxPrecisionFilter'] = undefined;

/**
 * Optional. The filter will match columns with scale smaller than or equal to this number.
 * @member {Number} sourceMaxScaleFilter
 */
SourceNumericFilter.prototype['sourceMaxScaleFilter'] = undefined;

/**
 * Optional. The filter will match columns with precision greater than or equal to this number.
 * @member {Number} sourceMinPrecisionFilter
 */
SourceNumericFilter.prototype['sourceMinPrecisionFilter'] = undefined;

/**
 * Optional. The filter will match columns with scale greater than or equal to this number.
 * @member {Number} sourceMinScaleFilter
 */
SourceNumericFilter.prototype['sourceMinScaleFilter'] = undefined;





/**
 * Allowed values for the <code>numericFilterOption</code> property.
 * @enum {String}
 * @readonly
 */
SourceNumericFilter['NumericFilterOptionEnum'] = {

    /**
     * value: "NUMERIC_FILTER_OPTION_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "NUMERIC_FILTER_OPTION_UNSPECIFIED",

    /**
     * value: "NUMERIC_FILTER_OPTION_ALL"
     * @const
     */
    "ALL": "NUMERIC_FILTER_OPTION_ALL",

    /**
     * value: "NUMERIC_FILTER_OPTION_LIMIT"
     * @const
     */
    "LIMIT": "NUMERIC_FILTER_OPTION_LIMIT",

    /**
     * value: "NUMERIC_FILTER_OPTION_LIMITLESS"
     * @const
     */
    "LIMITLESS": "NUMERIC_FILTER_OPTION_LIMITLESS"
};



export default SourceNumericFilter;

