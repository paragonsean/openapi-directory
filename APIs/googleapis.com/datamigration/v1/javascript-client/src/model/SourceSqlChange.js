/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SourceSqlChange model module.
 * @module model/SourceSqlChange
 * @version v1
 */
class SourceSqlChange {
    /**
     * Constructs a new <code>SourceSqlChange</code>.
     * Options to configure rule type SourceSqlChange. The rule is used to alter the sql code for database entities. The rule filter field can refer to one entity. The rule scope can be: StoredProcedure, Function, Trigger, View
     * @alias module:model/SourceSqlChange
     */
    constructor() { 
        
        SourceSqlChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceSqlChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceSqlChange} obj Optional instance to populate.
     * @return {module:model/SourceSqlChange} The populated <code>SourceSqlChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceSqlChange();

            if (data.hasOwnProperty('sqlCode')) {
                obj['sqlCode'] = ApiClient.convertToType(data['sqlCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceSqlChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceSqlChange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sqlCode'] && !(typeof data['sqlCode'] === 'string' || data['sqlCode'] instanceof String)) {
            throw new Error("Expected the field `sqlCode` to be a primitive type in the JSON string but got " + data['sqlCode']);
        }

        return true;
    }


}



/**
 * Required. Sql code for source (stored procedure, function, trigger or view)
 * @member {String} sqlCode
 */
SourceSqlChange.prototype['sqlCode'] = undefined;






export default SourceSqlChange;

