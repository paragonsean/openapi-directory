/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatabaseInstanceEntity from './DatabaseInstanceEntity';
import EntityDdl from './EntityDdl';
import EntityIssue from './EntityIssue';
import EntityMapping from './EntityMapping';
import FunctionEntity from './FunctionEntity';
import MaterializedViewEntity from './MaterializedViewEntity';
import PackageEntity from './PackageEntity';
import SchemaEntity from './SchemaEntity';
import SequenceEntity from './SequenceEntity';
import StoredProcedureEntity from './StoredProcedureEntity';
import SynonymEntity from './SynonymEntity';
import TableEntity from './TableEntity';
import UDTEntity from './UDTEntity';
import ViewEntity from './ViewEntity';

/**
 * The DatabaseEntity model module.
 * @module model/DatabaseEntity
 * @version v1
 */
class DatabaseEntity {
    /**
     * Constructs a new <code>DatabaseEntity</code>.
     * The base entity type for all the database related entities. The message contains the entity name, the name of its parent, the entity type, and the specific details per entity type.
     * @alias module:model/DatabaseEntity
     */
    constructor() { 
        
        DatabaseEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabaseEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseEntity} obj Optional instance to populate.
     * @return {module:model/DatabaseEntity} The populated <code>DatabaseEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseEntity();

            if (data.hasOwnProperty('database')) {
                obj['database'] = DatabaseInstanceEntity.constructFromObject(data['database']);
            }
            if (data.hasOwnProperty('databaseFunction')) {
                obj['databaseFunction'] = FunctionEntity.constructFromObject(data['databaseFunction']);
            }
            if (data.hasOwnProperty('databasePackage')) {
                obj['databasePackage'] = PackageEntity.constructFromObject(data['databasePackage']);
            }
            if (data.hasOwnProperty('entityDdl')) {
                obj['entityDdl'] = ApiClient.convertToType(data['entityDdl'], [EntityDdl]);
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('issues')) {
                obj['issues'] = ApiClient.convertToType(data['issues'], [EntityIssue]);
            }
            if (data.hasOwnProperty('mappings')) {
                obj['mappings'] = ApiClient.convertToType(data['mappings'], [EntityMapping]);
            }
            if (data.hasOwnProperty('materializedView')) {
                obj['materializedView'] = MaterializedViewEntity.constructFromObject(data['materializedView']);
            }
            if (data.hasOwnProperty('parentEntity')) {
                obj['parentEntity'] = ApiClient.convertToType(data['parentEntity'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = SchemaEntity.constructFromObject(data['schema']);
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = SequenceEntity.constructFromObject(data['sequence']);
            }
            if (data.hasOwnProperty('shortName')) {
                obj['shortName'] = ApiClient.convertToType(data['shortName'], 'String');
            }
            if (data.hasOwnProperty('storedProcedure')) {
                obj['storedProcedure'] = StoredProcedureEntity.constructFromObject(data['storedProcedure']);
            }
            if (data.hasOwnProperty('synonym')) {
                obj['synonym'] = SynonymEntity.constructFromObject(data['synonym']);
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = TableEntity.constructFromObject(data['table']);
            }
            if (data.hasOwnProperty('tree')) {
                obj['tree'] = ApiClient.convertToType(data['tree'], 'String');
            }
            if (data.hasOwnProperty('udt')) {
                obj['udt'] = UDTEntity.constructFromObject(data['udt']);
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = ViewEntity.constructFromObject(data['view']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseEntity</code>.
     */
    static validateJSON(data) {
        // validate the optional field `database`
        if (data['database']) { // data not null
          DatabaseInstanceEntity.validateJSON(data['database']);
        }
        // validate the optional field `databaseFunction`
        if (data['databaseFunction']) { // data not null
          FunctionEntity.validateJSON(data['databaseFunction']);
        }
        // validate the optional field `databasePackage`
        if (data['databasePackage']) { // data not null
          PackageEntity.validateJSON(data['databasePackage']);
        }
        if (data['entityDdl']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entityDdl'])) {
                throw new Error("Expected the field `entityDdl` to be an array in the JSON data but got " + data['entityDdl']);
            }
            // validate the optional field `entityDdl` (array)
            for (const item of data['entityDdl']) {
                EntityDdl.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        if (data['issues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['issues'])) {
                throw new Error("Expected the field `issues` to be an array in the JSON data but got " + data['issues']);
            }
            // validate the optional field `issues` (array)
            for (const item of data['issues']) {
                EntityIssue.validateJSON(item);
            };
        }
        if (data['mappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mappings'])) {
                throw new Error("Expected the field `mappings` to be an array in the JSON data but got " + data['mappings']);
            }
            // validate the optional field `mappings` (array)
            for (const item of data['mappings']) {
                EntityMapping.validateJSON(item);
            };
        }
        // validate the optional field `materializedView`
        if (data['materializedView']) { // data not null
          MaterializedViewEntity.validateJSON(data['materializedView']);
        }
        // ensure the json data is a string
        if (data['parentEntity'] && !(typeof data['parentEntity'] === 'string' || data['parentEntity'] instanceof String)) {
            throw new Error("Expected the field `parentEntity` to be a primitive type in the JSON string but got " + data['parentEntity']);
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          SchemaEntity.validateJSON(data['schema']);
        }
        // validate the optional field `sequence`
        if (data['sequence']) { // data not null
          SequenceEntity.validateJSON(data['sequence']);
        }
        // ensure the json data is a string
        if (data['shortName'] && !(typeof data['shortName'] === 'string' || data['shortName'] instanceof String)) {
            throw new Error("Expected the field `shortName` to be a primitive type in the JSON string but got " + data['shortName']);
        }
        // validate the optional field `storedProcedure`
        if (data['storedProcedure']) { // data not null
          StoredProcedureEntity.validateJSON(data['storedProcedure']);
        }
        // validate the optional field `synonym`
        if (data['synonym']) { // data not null
          SynonymEntity.validateJSON(data['synonym']);
        }
        // validate the optional field `table`
        if (data['table']) { // data not null
          TableEntity.validateJSON(data['table']);
        }
        // ensure the json data is a string
        if (data['tree'] && !(typeof data['tree'] === 'string' || data['tree'] instanceof String)) {
            throw new Error("Expected the field `tree` to be a primitive type in the JSON string but got " + data['tree']);
        }
        // validate the optional field `udt`
        if (data['udt']) { // data not null
          UDTEntity.validateJSON(data['udt']);
        }
        // validate the optional field `view`
        if (data['view']) { // data not null
          ViewEntity.validateJSON(data['view']);
        }

        return true;
    }


}



/**
 * @member {module:model/DatabaseInstanceEntity} database
 */
DatabaseEntity.prototype['database'] = undefined;

/**
 * @member {module:model/FunctionEntity} databaseFunction
 */
DatabaseEntity.prototype['databaseFunction'] = undefined;

/**
 * @member {module:model/PackageEntity} databasePackage
 */
DatabaseEntity.prototype['databasePackage'] = undefined;

/**
 * Details about the entity DDL script. Multiple DDL scripts are provided for child entities such as a table entity will have one DDL for the table with additional DDLs for each index, constraint and such.
 * @member {Array.<module:model/EntityDdl>} entityDdl
 */
DatabaseEntity.prototype['entityDdl'] = undefined;

/**
 * The type of the database entity (table, view, index, ...).
 * @member {module:model/DatabaseEntity.EntityTypeEnum} entityType
 */
DatabaseEntity.prototype['entityType'] = undefined;

/**
 * Details about the various issues found for the entity.
 * @member {Array.<module:model/EntityIssue>} issues
 */
DatabaseEntity.prototype['issues'] = undefined;

/**
 * Details about entity mappings. For source tree entities, this holds the draft entities which were generated by the mapping rules. For draft tree entities, this holds the source entities which were converted to form the draft entity. Destination entities will have no mapping details.
 * @member {Array.<module:model/EntityMapping>} mappings
 */
DatabaseEntity.prototype['mappings'] = undefined;

/**
 * @member {module:model/MaterializedViewEntity} materializedView
 */
DatabaseEntity.prototype['materializedView'] = undefined;

/**
 * The full name of the parent entity (e.g. schema name).
 * @member {String} parentEntity
 */
DatabaseEntity.prototype['parentEntity'] = undefined;

/**
 * @member {module:model/SchemaEntity} schema
 */
DatabaseEntity.prototype['schema'] = undefined;

/**
 * @member {module:model/SequenceEntity} sequence
 */
DatabaseEntity.prototype['sequence'] = undefined;

/**
 * The short name (e.g. table name) of the entity.
 * @member {String} shortName
 */
DatabaseEntity.prototype['shortName'] = undefined;

/**
 * @member {module:model/StoredProcedureEntity} storedProcedure
 */
DatabaseEntity.prototype['storedProcedure'] = undefined;

/**
 * @member {module:model/SynonymEntity} synonym
 */
DatabaseEntity.prototype['synonym'] = undefined;

/**
 * @member {module:model/TableEntity} table
 */
DatabaseEntity.prototype['table'] = undefined;

/**
 * The type of tree the entity belongs to.
 * @member {module:model/DatabaseEntity.TreeEnum} tree
 */
DatabaseEntity.prototype['tree'] = undefined;

/**
 * @member {module:model/UDTEntity} udt
 */
DatabaseEntity.prototype['udt'] = undefined;

/**
 * @member {module:model/ViewEntity} view
 */
DatabaseEntity.prototype['view'] = undefined;





/**
 * Allowed values for the <code>entityType</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseEntity['EntityTypeEnum'] = {

    /**
     * value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "DATABASE_ENTITY_TYPE_UNSPECIFIED",

    /**
     * value: "DATABASE_ENTITY_TYPE_SCHEMA"
     * @const
     */
    "SCHEMA": "DATABASE_ENTITY_TYPE_SCHEMA",

    /**
     * value: "DATABASE_ENTITY_TYPE_TABLE"
     * @const
     */
    "TABLE": "DATABASE_ENTITY_TYPE_TABLE",

    /**
     * value: "DATABASE_ENTITY_TYPE_COLUMN"
     * @const
     */
    "COLUMN": "DATABASE_ENTITY_TYPE_COLUMN",

    /**
     * value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
     * @const
     */
    "CONSTRAINT": "DATABASE_ENTITY_TYPE_CONSTRAINT",

    /**
     * value: "DATABASE_ENTITY_TYPE_INDEX"
     * @const
     */
    "INDEX": "DATABASE_ENTITY_TYPE_INDEX",

    /**
     * value: "DATABASE_ENTITY_TYPE_TRIGGER"
     * @const
     */
    "TRIGGER": "DATABASE_ENTITY_TYPE_TRIGGER",

    /**
     * value: "DATABASE_ENTITY_TYPE_VIEW"
     * @const
     */
    "VIEW": "DATABASE_ENTITY_TYPE_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_SEQUENCE"
     * @const
     */
    "SEQUENCE": "DATABASE_ENTITY_TYPE_SEQUENCE",

    /**
     * value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
     * @const
     */
    "STORED_PROCEDURE": "DATABASE_ENTITY_TYPE_STORED_PROCEDURE",

    /**
     * value: "DATABASE_ENTITY_TYPE_FUNCTION"
     * @const
     */
    "FUNCTION": "DATABASE_ENTITY_TYPE_FUNCTION",

    /**
     * value: "DATABASE_ENTITY_TYPE_SYNONYM"
     * @const
     */
    "SYNONYM": "DATABASE_ENTITY_TYPE_SYNONYM",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
     * @const
     */
    "DATABASE_PACKAGE": "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE",

    /**
     * value: "DATABASE_ENTITY_TYPE_UDT"
     * @const
     */
    "UDT": "DATABASE_ENTITY_TYPE_UDT",

    /**
     * value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
     * @const
     */
    "MATERIALIZED_VIEW": "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE"
     * @const
     */
    "DATABASE": "DATABASE_ENTITY_TYPE_DATABASE"
};


/**
 * Allowed values for the <code>tree</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseEntity['TreeEnum'] = {

    /**
     * value: "TREE_TYPE_UNSPECIFIED"
     * @const
     */
    "TREE_TYPE_UNSPECIFIED": "TREE_TYPE_UNSPECIFIED",

    /**
     * value: "SOURCE"
     * @const
     */
    "SOURCE": "SOURCE",

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "DESTINATION"
     * @const
     */
    "DESTINATION": "DESTINATION"
};



export default DatabaseEntity;

