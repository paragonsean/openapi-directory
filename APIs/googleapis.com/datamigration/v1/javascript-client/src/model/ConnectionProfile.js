/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlloyDbConnectionProfile from './AlloyDbConnectionProfile';
import CloudSqlConnectionProfile from './CloudSqlConnectionProfile';
import MySqlConnectionProfile from './MySqlConnectionProfile';
import OracleConnectionProfile from './OracleConnectionProfile';
import PostgreSqlConnectionProfile from './PostgreSqlConnectionProfile';
import Status from './Status';

/**
 * The ConnectionProfile model module.
 * @module model/ConnectionProfile
 * @version v1
 */
class ConnectionProfile {
    /**
     * Constructs a new <code>ConnectionProfile</code>.
     * A connection profile definition.
     * @alias module:model/ConnectionProfile
     */
    constructor() { 
        
        ConnectionProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectionProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionProfile} obj Optional instance to populate.
     * @return {module:model/ConnectionProfile} The populated <code>ConnectionProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionProfile();

            if (data.hasOwnProperty('alloydb')) {
                obj['alloydb'] = AlloyDbConnectionProfile.constructFromObject(data['alloydb']);
            }
            if (data.hasOwnProperty('cloudsql')) {
                obj['cloudsql'] = CloudSqlConnectionProfile.constructFromObject(data['cloudsql']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = Status.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mysql')) {
                obj['mysql'] = MySqlConnectionProfile.constructFromObject(data['mysql']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('oracle')) {
                obj['oracle'] = OracleConnectionProfile.constructFromObject(data['oracle']);
            }
            if (data.hasOwnProperty('postgresql')) {
                obj['postgresql'] = PostgreSqlConnectionProfile.constructFromObject(data['postgresql']);
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionProfile</code>.
     */
    static validateJSON(data) {
        // validate the optional field `alloydb`
        if (data['alloydb']) { // data not null
          AlloyDbConnectionProfile.validateJSON(data['alloydb']);
        }
        // validate the optional field `cloudsql`
        if (data['cloudsql']) { // data not null
          CloudSqlConnectionProfile.validateJSON(data['cloudsql']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          Status.validateJSON(data['error']);
        }
        // validate the optional field `mysql`
        if (data['mysql']) { // data not null
          MySqlConnectionProfile.validateJSON(data['mysql']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `oracle`
        if (data['oracle']) { // data not null
          OracleConnectionProfile.validateJSON(data['oracle']);
        }
        // validate the optional field `postgresql`
        if (data['postgresql']) { // data not null
          PostgreSqlConnectionProfile.validateJSON(data['postgresql']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/AlloyDbConnectionProfile} alloydb
 */
ConnectionProfile.prototype['alloydb'] = undefined;

/**
 * @member {module:model/CloudSqlConnectionProfile} cloudsql
 */
ConnectionProfile.prototype['cloudsql'] = undefined;

/**
 * Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".
 * @member {String} createTime
 */
ConnectionProfile.prototype['createTime'] = undefined;

/**
 * The connection profile display name.
 * @member {String} displayName
 */
ConnectionProfile.prototype['displayName'] = undefined;

/**
 * @member {module:model/Status} error
 */
ConnectionProfile.prototype['error'] = undefined;

/**
 * The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \"key\": \"value\" pairs. Example: `{ \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }`.
 * @member {Object.<String, String>} labels
 */
ConnectionProfile.prototype['labels'] = undefined;

/**
 * @member {module:model/MySqlConnectionProfile} mysql
 */
ConnectionProfile.prototype['mysql'] = undefined;

/**
 * The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
 * @member {String} name
 */
ConnectionProfile.prototype['name'] = undefined;

/**
 * @member {module:model/OracleConnectionProfile} oracle
 */
ConnectionProfile.prototype['oracle'] = undefined;

/**
 * @member {module:model/PostgreSqlConnectionProfile} postgresql
 */
ConnectionProfile.prototype['postgresql'] = undefined;

/**
 * The database provider.
 * @member {module:model/ConnectionProfile.ProviderEnum} provider
 */
ConnectionProfile.prototype['provider'] = undefined;

/**
 * The current connection profile state (e.g. DRAFT, READY, or FAILED).
 * @member {module:model/ConnectionProfile.StateEnum} state
 */
ConnectionProfile.prototype['state'] = undefined;

/**
 * Output only. The timestamp when the resource was last updated. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".
 * @member {String} updateTime
 */
ConnectionProfile.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>provider</code> property.
 * @enum {String}
 * @readonly
 */
ConnectionProfile['ProviderEnum'] = {

    /**
     * value: "DATABASE_PROVIDER_UNSPECIFIED"
     * @const
     */
    "DATABASE_PROVIDER_UNSPECIFIED": "DATABASE_PROVIDER_UNSPECIFIED",

    /**
     * value: "CLOUDSQL"
     * @const
     */
    "CLOUDSQL": "CLOUDSQL",

    /**
     * value: "RDS"
     * @const
     */
    "RDS": "RDS",

    /**
     * value: "AURORA"
     * @const
     */
    "AURORA": "AURORA",

    /**
     * value: "ALLOYDB"
     * @const
     */
    "ALLOYDB": "ALLOYDB"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ConnectionProfile['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default ConnectionProfile;

