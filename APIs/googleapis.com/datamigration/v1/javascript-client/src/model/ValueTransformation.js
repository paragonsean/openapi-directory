/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplyHash from './ApplyHash';
import AssignSpecificValue from './AssignSpecificValue';
import DoubleComparisonFilter from './DoubleComparisonFilter';
import IntComparisonFilter from './IntComparisonFilter';
import RoundToScale from './RoundToScale';
import ValueListFilter from './ValueListFilter';

/**
 * The ValueTransformation model module.
 * @module model/ValueTransformation
 * @version v1
 */
class ValueTransformation {
    /**
     * Constructs a new <code>ValueTransformation</code>.
     * Description of data transformation during migration as part of the ConditionalColumnSetValue.
     * @alias module:model/ValueTransformation
     */
    constructor() { 
        
        ValueTransformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValueTransformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValueTransformation} obj Optional instance to populate.
     * @return {module:model/ValueTransformation} The populated <code>ValueTransformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValueTransformation();

            if (data.hasOwnProperty('applyHash')) {
                obj['applyHash'] = ApplyHash.constructFromObject(data['applyHash']);
            }
            if (data.hasOwnProperty('assignMaxValue')) {
                obj['assignMaxValue'] = ApiClient.convertToType(data['assignMaxValue'], Object);
            }
            if (data.hasOwnProperty('assignMinValue')) {
                obj['assignMinValue'] = ApiClient.convertToType(data['assignMinValue'], Object);
            }
            if (data.hasOwnProperty('assignNull')) {
                obj['assignNull'] = ApiClient.convertToType(data['assignNull'], Object);
            }
            if (data.hasOwnProperty('assignSpecificValue')) {
                obj['assignSpecificValue'] = AssignSpecificValue.constructFromObject(data['assignSpecificValue']);
            }
            if (data.hasOwnProperty('doubleComparison')) {
                obj['doubleComparison'] = DoubleComparisonFilter.constructFromObject(data['doubleComparison']);
            }
            if (data.hasOwnProperty('intComparison')) {
                obj['intComparison'] = IntComparisonFilter.constructFromObject(data['intComparison']);
            }
            if (data.hasOwnProperty('isNull')) {
                obj['isNull'] = ApiClient.convertToType(data['isNull'], Object);
            }
            if (data.hasOwnProperty('roundScale')) {
                obj['roundScale'] = RoundToScale.constructFromObject(data['roundScale']);
            }
            if (data.hasOwnProperty('valueList')) {
                obj['valueList'] = ValueListFilter.constructFromObject(data['valueList']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValueTransformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValueTransformation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `applyHash`
        if (data['applyHash']) { // data not null
          ApplyHash.validateJSON(data['applyHash']);
        }
        // validate the optional field `assignSpecificValue`
        if (data['assignSpecificValue']) { // data not null
          AssignSpecificValue.validateJSON(data['assignSpecificValue']);
        }
        // validate the optional field `doubleComparison`
        if (data['doubleComparison']) { // data not null
          DoubleComparisonFilter.validateJSON(data['doubleComparison']);
        }
        // validate the optional field `intComparison`
        if (data['intComparison']) { // data not null
          IntComparisonFilter.validateJSON(data['intComparison']);
        }
        // validate the optional field `roundScale`
        if (data['roundScale']) { // data not null
          RoundToScale.validateJSON(data['roundScale']);
        }
        // validate the optional field `valueList`
        if (data['valueList']) { // data not null
          ValueListFilter.validateJSON(data['valueList']);
        }

        return true;
    }


}



/**
 * @member {module:model/ApplyHash} applyHash
 */
ValueTransformation.prototype['applyHash'] = undefined;

/**
 * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 * @member {Object} assignMaxValue
 */
ValueTransformation.prototype['assignMaxValue'] = undefined;

/**
 * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 * @member {Object} assignMinValue
 */
ValueTransformation.prototype['assignMinValue'] = undefined;

/**
 * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 * @member {Object} assignNull
 */
ValueTransformation.prototype['assignNull'] = undefined;

/**
 * @member {module:model/AssignSpecificValue} assignSpecificValue
 */
ValueTransformation.prototype['assignSpecificValue'] = undefined;

/**
 * @member {module:model/DoubleComparisonFilter} doubleComparison
 */
ValueTransformation.prototype['doubleComparison'] = undefined;

/**
 * @member {module:model/IntComparisonFilter} intComparison
 */
ValueTransformation.prototype['intComparison'] = undefined;

/**
 * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 * @member {Object} isNull
 */
ValueTransformation.prototype['isNull'] = undefined;

/**
 * @member {module:model/RoundToScale} roundScale
 */
ValueTransformation.prototype['roundScale'] = undefined;

/**
 * @member {module:model/ValueListFilter} valueList
 */
ValueTransformation.prototype['valueList'] = undefined;






export default ValueTransformation;

