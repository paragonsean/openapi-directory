/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Position from './Position';

/**
 * The EntityIssue model module.
 * @module model/EntityIssue
 * @version v1
 */
class EntityIssue {
    /**
     * Constructs a new <code>EntityIssue</code>.
     * Issue related to the entity.
     * @alias module:model/EntityIssue
     */
    constructor() { 
        
        EntityIssue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityIssue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityIssue} obj Optional instance to populate.
     * @return {module:model/EntityIssue} The populated <code>EntityIssue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityIssue();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('ddl')) {
                obj['ddl'] = ApiClient.convertToType(data['ddl'], 'String');
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = Position.constructFromObject(data['position']);
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntityIssue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntityIssue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['ddl'] && !(typeof data['ddl'] === 'string' || data['ddl'] instanceof String)) {
            throw new Error("Expected the field `ddl` to be a primitive type in the JSON string but got " + data['ddl']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // validate the optional field `position`
        if (data['position']) { // data not null
          Position.validateJSON(data['position']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Error/Warning code
 * @member {String} code
 */
EntityIssue.prototype['code'] = undefined;

/**
 * The ddl which caused the issue, if relevant.
 * @member {String} ddl
 */
EntityIssue.prototype['ddl'] = undefined;

/**
 * The entity type (if the DDL is for a sub entity).
 * @member {module:model/EntityIssue.EntityTypeEnum} entityType
 */
EntityIssue.prototype['entityType'] = undefined;

/**
 * Unique Issue ID.
 * @member {String} id
 */
EntityIssue.prototype['id'] = undefined;

/**
 * Issue detailed message
 * @member {String} message
 */
EntityIssue.prototype['message'] = undefined;

/**
 * @member {module:model/Position} position
 */
EntityIssue.prototype['position'] = undefined;

/**
 * Severity of the issue
 * @member {module:model/EntityIssue.SeverityEnum} severity
 */
EntityIssue.prototype['severity'] = undefined;

/**
 * The type of the issue.
 * @member {module:model/EntityIssue.TypeEnum} type
 */
EntityIssue.prototype['type'] = undefined;





/**
 * Allowed values for the <code>entityType</code> property.
 * @enum {String}
 * @readonly
 */
EntityIssue['EntityTypeEnum'] = {

    /**
     * value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "DATABASE_ENTITY_TYPE_UNSPECIFIED",

    /**
     * value: "DATABASE_ENTITY_TYPE_SCHEMA"
     * @const
     */
    "SCHEMA": "DATABASE_ENTITY_TYPE_SCHEMA",

    /**
     * value: "DATABASE_ENTITY_TYPE_TABLE"
     * @const
     */
    "TABLE": "DATABASE_ENTITY_TYPE_TABLE",

    /**
     * value: "DATABASE_ENTITY_TYPE_COLUMN"
     * @const
     */
    "COLUMN": "DATABASE_ENTITY_TYPE_COLUMN",

    /**
     * value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
     * @const
     */
    "CONSTRAINT": "DATABASE_ENTITY_TYPE_CONSTRAINT",

    /**
     * value: "DATABASE_ENTITY_TYPE_INDEX"
     * @const
     */
    "INDEX": "DATABASE_ENTITY_TYPE_INDEX",

    /**
     * value: "DATABASE_ENTITY_TYPE_TRIGGER"
     * @const
     */
    "TRIGGER": "DATABASE_ENTITY_TYPE_TRIGGER",

    /**
     * value: "DATABASE_ENTITY_TYPE_VIEW"
     * @const
     */
    "VIEW": "DATABASE_ENTITY_TYPE_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_SEQUENCE"
     * @const
     */
    "SEQUENCE": "DATABASE_ENTITY_TYPE_SEQUENCE",

    /**
     * value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
     * @const
     */
    "STORED_PROCEDURE": "DATABASE_ENTITY_TYPE_STORED_PROCEDURE",

    /**
     * value: "DATABASE_ENTITY_TYPE_FUNCTION"
     * @const
     */
    "FUNCTION": "DATABASE_ENTITY_TYPE_FUNCTION",

    /**
     * value: "DATABASE_ENTITY_TYPE_SYNONYM"
     * @const
     */
    "SYNONYM": "DATABASE_ENTITY_TYPE_SYNONYM",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
     * @const
     */
    "DATABASE_PACKAGE": "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE",

    /**
     * value: "DATABASE_ENTITY_TYPE_UDT"
     * @const
     */
    "UDT": "DATABASE_ENTITY_TYPE_UDT",

    /**
     * value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
     * @const
     */
    "MATERIALIZED_VIEW": "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE"
     * @const
     */
    "DATABASE": "DATABASE_ENTITY_TYPE_DATABASE"
};


/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
EntityIssue['SeverityEnum'] = {

    /**
     * value: "ISSUE_SEVERITY_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "ISSUE_SEVERITY_UNSPECIFIED",

    /**
     * value: "ISSUE_SEVERITY_INFO"
     * @const
     */
    "INFO": "ISSUE_SEVERITY_INFO",

    /**
     * value: "ISSUE_SEVERITY_WARNING"
     * @const
     */
    "WARNING": "ISSUE_SEVERITY_WARNING",

    /**
     * value: "ISSUE_SEVERITY_ERROR"
     * @const
     */
    "ERROR": "ISSUE_SEVERITY_ERROR"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EntityIssue['TypeEnum'] = {

    /**
     * value: "ISSUE_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "ISSUE_TYPE_UNSPECIFIED",

    /**
     * value: "ISSUE_TYPE_DDL"
     * @const
     */
    "DDL": "ISSUE_TYPE_DDL",

    /**
     * value: "ISSUE_TYPE_APPLY"
     * @const
     */
    "APPLY": "ISSUE_TYPE_APPLY",

    /**
     * value: "ISSUE_TYPE_CONVERT"
     * @const
     */
    "CONVERT": "ISSUE_TYPE_CONVERT"
};



export default EntityIssue;

