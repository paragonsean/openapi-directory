/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SynonymEntity model module.
 * @module model/SynonymEntity
 * @version v1
 */
class SynonymEntity {
    /**
     * Constructs a new <code>SynonymEntity</code>.
     * Synonym&#39;s parent is a schema.
     * @alias module:model/SynonymEntity
     */
    constructor() { 
        
        SynonymEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SynonymEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SynonymEntity} obj Optional instance to populate.
     * @return {module:model/SynonymEntity} The populated <code>SynonymEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SynonymEntity();

            if (data.hasOwnProperty('customFeatures')) {
                obj['customFeatures'] = ApiClient.convertToType(data['customFeatures'], {'String': Object});
            }
            if (data.hasOwnProperty('sourceEntity')) {
                obj['sourceEntity'] = ApiClient.convertToType(data['sourceEntity'], 'String');
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SynonymEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SynonymEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sourceEntity'] && !(typeof data['sourceEntity'] === 'string' || data['sourceEntity'] instanceof String)) {
            throw new Error("Expected the field `sourceEntity` to be a primitive type in the JSON string but got " + data['sourceEntity']);
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }

        return true;
    }


}



/**
 * Custom engine specific features.
 * @member {Object.<String, Object>} customFeatures
 */
SynonymEntity.prototype['customFeatures'] = undefined;

/**
 * The name of the entity for which the synonym is being created (the source).
 * @member {String} sourceEntity
 */
SynonymEntity.prototype['sourceEntity'] = undefined;

/**
 * The type of the entity for which the synonym is being created (usually a table or a sequence).
 * @member {module:model/SynonymEntity.SourceTypeEnum} sourceType
 */
SynonymEntity.prototype['sourceType'] = undefined;





/**
 * Allowed values for the <code>sourceType</code> property.
 * @enum {String}
 * @readonly
 */
SynonymEntity['SourceTypeEnum'] = {

    /**
     * value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "DATABASE_ENTITY_TYPE_UNSPECIFIED",

    /**
     * value: "DATABASE_ENTITY_TYPE_SCHEMA"
     * @const
     */
    "SCHEMA": "DATABASE_ENTITY_TYPE_SCHEMA",

    /**
     * value: "DATABASE_ENTITY_TYPE_TABLE"
     * @const
     */
    "TABLE": "DATABASE_ENTITY_TYPE_TABLE",

    /**
     * value: "DATABASE_ENTITY_TYPE_COLUMN"
     * @const
     */
    "COLUMN": "DATABASE_ENTITY_TYPE_COLUMN",

    /**
     * value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
     * @const
     */
    "CONSTRAINT": "DATABASE_ENTITY_TYPE_CONSTRAINT",

    /**
     * value: "DATABASE_ENTITY_TYPE_INDEX"
     * @const
     */
    "INDEX": "DATABASE_ENTITY_TYPE_INDEX",

    /**
     * value: "DATABASE_ENTITY_TYPE_TRIGGER"
     * @const
     */
    "TRIGGER": "DATABASE_ENTITY_TYPE_TRIGGER",

    /**
     * value: "DATABASE_ENTITY_TYPE_VIEW"
     * @const
     */
    "VIEW": "DATABASE_ENTITY_TYPE_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_SEQUENCE"
     * @const
     */
    "SEQUENCE": "DATABASE_ENTITY_TYPE_SEQUENCE",

    /**
     * value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
     * @const
     */
    "STORED_PROCEDURE": "DATABASE_ENTITY_TYPE_STORED_PROCEDURE",

    /**
     * value: "DATABASE_ENTITY_TYPE_FUNCTION"
     * @const
     */
    "FUNCTION": "DATABASE_ENTITY_TYPE_FUNCTION",

    /**
     * value: "DATABASE_ENTITY_TYPE_SYNONYM"
     * @const
     */
    "SYNONYM": "DATABASE_ENTITY_TYPE_SYNONYM",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
     * @const
     */
    "DATABASE_PACKAGE": "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE",

    /**
     * value: "DATABASE_ENTITY_TYPE_UDT"
     * @const
     */
    "UDT": "DATABASE_ENTITY_TYPE_UDT",

    /**
     * value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
     * @const
     */
    "MATERIALIZED_VIEW": "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE"
     * @const
     */
    "DATABASE": "DATABASE_ENTITY_TYPE_DATABASE"
};



export default SynonymEntity;

