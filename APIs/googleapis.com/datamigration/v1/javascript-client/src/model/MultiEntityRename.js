/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MultiEntityRename model module.
 * @module model/MultiEntityRename
 * @version v1
 */
class MultiEntityRename {
    /**
     * Constructs a new <code>MultiEntityRename</code>.
     * Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
     * @alias module:model/MultiEntityRename
     */
    constructor() { 
        
        MultiEntityRename.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MultiEntityRename</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MultiEntityRename} obj Optional instance to populate.
     * @return {module:model/MultiEntityRename} The populated <code>MultiEntityRename</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MultiEntityRename();

            if (data.hasOwnProperty('newNamePattern')) {
                obj['newNamePattern'] = ApiClient.convertToType(data['newNamePattern'], 'String');
            }
            if (data.hasOwnProperty('sourceNameTransformation')) {
                obj['sourceNameTransformation'] = ApiClient.convertToType(data['sourceNameTransformation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MultiEntityRename</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MultiEntityRename</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['newNamePattern'] && !(typeof data['newNamePattern'] === 'string' || data['newNamePattern'] instanceof String)) {
            throw new Error("Expected the field `newNamePattern` to be a primitive type in the JSON string but got " + data['newNamePattern']);
        }
        // ensure the json data is a string
        if (data['sourceNameTransformation'] && !(typeof data['sourceNameTransformation'] === 'string' || data['sourceNameTransformation'] instanceof String)) {
            throw new Error("Expected the field `sourceNameTransformation` to be a primitive type in the JSON string but got " + data['sourceNameTransformation']);
        }

        return true;
    }


}



/**
 * Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
 * @member {String} newNamePattern
 */
MultiEntityRename.prototype['newNamePattern'] = undefined;

/**
 * Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
 * @member {module:model/MultiEntityRename.SourceNameTransformationEnum} sourceNameTransformation
 */
MultiEntityRename.prototype['sourceNameTransformation'] = undefined;





/**
 * Allowed values for the <code>sourceNameTransformation</code> property.
 * @enum {String}
 * @readonly
 */
MultiEntityRename['SourceNameTransformationEnum'] = {

    /**
     * value: "ENTITY_NAME_TRANSFORMATION_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "ENTITY_NAME_TRANSFORMATION_UNSPECIFIED",

    /**
     * value: "ENTITY_NAME_TRANSFORMATION_NO_TRANSFORMATION"
     * @const
     */
    "NO_TRANSFORMATION": "ENTITY_NAME_TRANSFORMATION_NO_TRANSFORMATION",

    /**
     * value: "ENTITY_NAME_TRANSFORMATION_LOWER_CASE"
     * @const
     */
    "LOWER_CASE": "ENTITY_NAME_TRANSFORMATION_LOWER_CASE",

    /**
     * value: "ENTITY_NAME_TRANSFORMATION_UPPER_CASE"
     * @const
     */
    "UPPER_CASE": "ENTITY_NAME_TRANSFORMATION_UPPER_CASE",

    /**
     * value: "ENTITY_NAME_TRANSFORMATION_CAPITALIZED_CASE"
     * @const
     */
    "CAPITALIZED_CASE": "ENTITY_NAME_TRANSFORMATION_CAPITALIZED_CASE"
};



export default MultiEntityRename;

