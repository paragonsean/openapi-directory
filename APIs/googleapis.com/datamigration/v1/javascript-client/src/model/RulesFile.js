/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RulesFile model module.
 * @module model/RulesFile
 * @version v1
 */
class RulesFile {
    /**
     * Constructs a new <code>RulesFile</code>.
     * Details of a single rules file.
     * @alias module:model/RulesFile
     */
    constructor() { 
        
        RulesFile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RulesFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RulesFile} obj Optional instance to populate.
     * @return {module:model/RulesFile} The populated <code>RulesFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RulesFile();

            if (data.hasOwnProperty('rulesContent')) {
                obj['rulesContent'] = ApiClient.convertToType(data['rulesContent'], 'String');
            }
            if (data.hasOwnProperty('rulesSourceFilename')) {
                obj['rulesSourceFilename'] = ApiClient.convertToType(data['rulesSourceFilename'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RulesFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RulesFile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['rulesContent'] && !(typeof data['rulesContent'] === 'string' || data['rulesContent'] instanceof String)) {
            throw new Error("Expected the field `rulesContent` to be a primitive type in the JSON string but got " + data['rulesContent']);
        }
        // ensure the json data is a string
        if (data['rulesSourceFilename'] && !(typeof data['rulesSourceFilename'] === 'string' || data['rulesSourceFilename'] instanceof String)) {
            throw new Error("Expected the field `rulesSourceFilename` to be a primitive type in the JSON string but got " + data['rulesSourceFilename']);
        }

        return true;
    }


}



/**
 * Required. The text content of the rules that needs to be converted.
 * @member {String} rulesContent
 */
RulesFile.prototype['rulesContent'] = undefined;

/**
 * Required. The filename of the rules that needs to be converted. The filename is used mainly so that future logs of the import rules job contain it, and can therefore be searched by it.
 * @member {String} rulesSourceFilename
 */
RulesFile.prototype['rulesSourceFilename'] = undefined;






export default RulesFile;

