/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatabaseEngineInfo model module.
 * @module model/DatabaseEngineInfo
 * @version v1
 */
class DatabaseEngineInfo {
    /**
     * Constructs a new <code>DatabaseEngineInfo</code>.
     * The type and version of a source or destination database.
     * @alias module:model/DatabaseEngineInfo
     */
    constructor() { 
        
        DatabaseEngineInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabaseEngineInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseEngineInfo} obj Optional instance to populate.
     * @return {module:model/DatabaseEngineInfo} The populated <code>DatabaseEngineInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseEngineInfo();

            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseEngineInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseEngineInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['engine'] && !(typeof data['engine'] === 'string' || data['engine'] instanceof String)) {
            throw new Error("Expected the field `engine` to be a primitive type in the JSON string but got " + data['engine']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Required. Engine type.
 * @member {module:model/DatabaseEngineInfo.EngineEnum} engine
 */
DatabaseEngineInfo.prototype['engine'] = undefined;

/**
 * Required. Engine version, for example \"12.c.1\".
 * @member {String} version
 */
DatabaseEngineInfo.prototype['version'] = undefined;





/**
 * Allowed values for the <code>engine</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseEngineInfo['EngineEnum'] = {

    /**
     * value: "DATABASE_ENGINE_UNSPECIFIED"
     * @const
     */
    "DATABASE_ENGINE_UNSPECIFIED": "DATABASE_ENGINE_UNSPECIFIED",

    /**
     * value: "MYSQL"
     * @const
     */
    "MYSQL": "MYSQL",

    /**
     * value: "POSTGRESQL"
     * @const
     */
    "POSTGRESQL": "POSTGRESQL",

    /**
     * value: "ORACLE"
     * @const
     */
    "ORACLE": "ORACLE"
};



export default DatabaseEngineInfo;

