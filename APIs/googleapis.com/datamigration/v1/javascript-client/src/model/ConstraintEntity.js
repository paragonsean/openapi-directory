/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConstraintEntity model module.
 * @module model/ConstraintEntity
 * @version v1
 */
class ConstraintEntity {
    /**
     * Constructs a new <code>ConstraintEntity</code>.
     * Constraint is not used as an independent entity, it is retrieved as part of another entity such as Table or View.
     * @alias module:model/ConstraintEntity
     */
    constructor() { 
        
        ConstraintEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConstraintEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConstraintEntity} obj Optional instance to populate.
     * @return {module:model/ConstraintEntity} The populated <code>ConstraintEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConstraintEntity();

            if (data.hasOwnProperty('customFeatures')) {
                obj['customFeatures'] = ApiClient.convertToType(data['customFeatures'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('referenceColumns')) {
                obj['referenceColumns'] = ApiClient.convertToType(data['referenceColumns'], ['String']);
            }
            if (data.hasOwnProperty('referenceTable')) {
                obj['referenceTable'] = ApiClient.convertToType(data['referenceTable'], 'String');
            }
            if (data.hasOwnProperty('tableColumns')) {
                obj['tableColumns'] = ApiClient.convertToType(data['tableColumns'], ['String']);
            }
            if (data.hasOwnProperty('tableName')) {
                obj['tableName'] = ApiClient.convertToType(data['tableName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConstraintEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConstraintEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['referenceColumns'])) {
            throw new Error("Expected the field `referenceColumns` to be an array in the JSON data but got " + data['referenceColumns']);
        }
        // ensure the json data is a string
        if (data['referenceTable'] && !(typeof data['referenceTable'] === 'string' || data['referenceTable'] instanceof String)) {
            throw new Error("Expected the field `referenceTable` to be a primitive type in the JSON string but got " + data['referenceTable']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tableColumns'])) {
            throw new Error("Expected the field `tableColumns` to be an array in the JSON data but got " + data['tableColumns']);
        }
        // ensure the json data is a string
        if (data['tableName'] && !(typeof data['tableName'] === 'string' || data['tableName'] instanceof String)) {
            throw new Error("Expected the field `tableName` to be a primitive type in the JSON string but got " + data['tableName']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Custom engine specific features.
 * @member {Object.<String, Object>} customFeatures
 */
ConstraintEntity.prototype['customFeatures'] = undefined;

/**
 * The name of the table constraint.
 * @member {String} name
 */
ConstraintEntity.prototype['name'] = undefined;

/**
 * Reference columns which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full names of referenced columns by the foreign key.
 * @member {Array.<String>} referenceColumns
 */
ConstraintEntity.prototype['referenceColumns'] = undefined;

/**
 * Reference table which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full name of the referenced table by the foreign key.
 * @member {String} referenceTable
 */
ConstraintEntity.prototype['referenceTable'] = undefined;

/**
 * Table columns used as part of the Constraint, for example primary key constraint should list the columns which constitutes the key.
 * @member {Array.<String>} tableColumns
 */
ConstraintEntity.prototype['tableColumns'] = undefined;

/**
 * Table which is associated with the constraint. In case the constraint is defined on a table, this field is left empty as this information is stored in parent_name. However, if constraint is defined on a view, this field stores the table name on which the view is defined.
 * @member {String} tableName
 */
ConstraintEntity.prototype['tableName'] = undefined;

/**
 * Type of constraint, for example unique, primary key, foreign key (currently only primary key is supported).
 * @member {String} type
 */
ConstraintEntity.prototype['type'] = undefined;






export default ConstraintEntity;

