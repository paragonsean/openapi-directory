/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SourceNumericFilter from './SourceNumericFilter';
import SourceTextFilter from './SourceTextFilter';

/**
 * The MultiColumnDatatypeChange model module.
 * @module model/MultiColumnDatatypeChange
 * @version v1
 */
class MultiColumnDatatypeChange {
    /**
     * Constructs a new <code>MultiColumnDatatypeChange</code>.
     * Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
     * @alias module:model/MultiColumnDatatypeChange
     */
    constructor() { 
        
        MultiColumnDatatypeChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MultiColumnDatatypeChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MultiColumnDatatypeChange} obj Optional instance to populate.
     * @return {module:model/MultiColumnDatatypeChange} The populated <code>MultiColumnDatatypeChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MultiColumnDatatypeChange();

            if (data.hasOwnProperty('customFeatures')) {
                obj['customFeatures'] = ApiClient.convertToType(data['customFeatures'], {'String': Object});
            }
            if (data.hasOwnProperty('newDataType')) {
                obj['newDataType'] = ApiClient.convertToType(data['newDataType'], 'String');
            }
            if (data.hasOwnProperty('overrideFractionalSecondsPrecision')) {
                obj['overrideFractionalSecondsPrecision'] = ApiClient.convertToType(data['overrideFractionalSecondsPrecision'], 'Number');
            }
            if (data.hasOwnProperty('overrideLength')) {
                obj['overrideLength'] = ApiClient.convertToType(data['overrideLength'], 'String');
            }
            if (data.hasOwnProperty('overridePrecision')) {
                obj['overridePrecision'] = ApiClient.convertToType(data['overridePrecision'], 'Number');
            }
            if (data.hasOwnProperty('overrideScale')) {
                obj['overrideScale'] = ApiClient.convertToType(data['overrideScale'], 'Number');
            }
            if (data.hasOwnProperty('sourceDataTypeFilter')) {
                obj['sourceDataTypeFilter'] = ApiClient.convertToType(data['sourceDataTypeFilter'], 'String');
            }
            if (data.hasOwnProperty('sourceNumericFilter')) {
                obj['sourceNumericFilter'] = SourceNumericFilter.constructFromObject(data['sourceNumericFilter']);
            }
            if (data.hasOwnProperty('sourceTextFilter')) {
                obj['sourceTextFilter'] = SourceTextFilter.constructFromObject(data['sourceTextFilter']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MultiColumnDatatypeChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MultiColumnDatatypeChange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['newDataType'] && !(typeof data['newDataType'] === 'string' || data['newDataType'] instanceof String)) {
            throw new Error("Expected the field `newDataType` to be a primitive type in the JSON string but got " + data['newDataType']);
        }
        // ensure the json data is a string
        if (data['overrideLength'] && !(typeof data['overrideLength'] === 'string' || data['overrideLength'] instanceof String)) {
            throw new Error("Expected the field `overrideLength` to be a primitive type in the JSON string but got " + data['overrideLength']);
        }
        // ensure the json data is a string
        if (data['sourceDataTypeFilter'] && !(typeof data['sourceDataTypeFilter'] === 'string' || data['sourceDataTypeFilter'] instanceof String)) {
            throw new Error("Expected the field `sourceDataTypeFilter` to be a primitive type in the JSON string but got " + data['sourceDataTypeFilter']);
        }
        // validate the optional field `sourceNumericFilter`
        if (data['sourceNumericFilter']) { // data not null
          SourceNumericFilter.validateJSON(data['sourceNumericFilter']);
        }
        // validate the optional field `sourceTextFilter`
        if (data['sourceTextFilter']) { // data not null
          SourceTextFilter.validateJSON(data['sourceTextFilter']);
        }

        return true;
    }


}



/**
 * Optional. Custom engine specific features.
 * @member {Object.<String, Object>} customFeatures
 */
MultiColumnDatatypeChange.prototype['customFeatures'] = undefined;

/**
 * Required. New data type.
 * @member {String} newDataType
 */
MultiColumnDatatypeChange.prototype['newDataType'] = undefined;

/**
 * Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
 * @member {Number} overrideFractionalSecondsPrecision
 */
MultiColumnDatatypeChange.prototype['overrideFractionalSecondsPrecision'] = undefined;

/**
 * Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
 * @member {String} overrideLength
 */
MultiColumnDatatypeChange.prototype['overrideLength'] = undefined;

/**
 * Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
 * @member {Number} overridePrecision
 */
MultiColumnDatatypeChange.prototype['overridePrecision'] = undefined;

/**
 * Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
 * @member {Number} overrideScale
 */
MultiColumnDatatypeChange.prototype['overrideScale'] = undefined;

/**
 * Required. Filter on source data type.
 * @member {String} sourceDataTypeFilter
 */
MultiColumnDatatypeChange.prototype['sourceDataTypeFilter'] = undefined;

/**
 * @member {module:model/SourceNumericFilter} sourceNumericFilter
 */
MultiColumnDatatypeChange.prototype['sourceNumericFilter'] = undefined;

/**
 * @member {module:model/SourceTextFilter} sourceTextFilter
 */
MultiColumnDatatypeChange.prototype['sourceTextFilter'] = undefined;






export default MultiColumnDatatypeChange;

