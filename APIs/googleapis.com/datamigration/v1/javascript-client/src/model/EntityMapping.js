/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityMappingLogEntry from './EntityMappingLogEntry';

/**
 * The EntityMapping model module.
 * @module model/EntityMapping
 * @version v1
 */
class EntityMapping {
    /**
     * Constructs a new <code>EntityMapping</code>.
     * Details of the mappings of a database entity.
     * @alias module:model/EntityMapping
     */
    constructor() { 
        
        EntityMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityMapping} obj Optional instance to populate.
     * @return {module:model/EntityMapping} The populated <code>EntityMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityMapping();

            if (data.hasOwnProperty('draftEntity')) {
                obj['draftEntity'] = ApiClient.convertToType(data['draftEntity'], 'String');
            }
            if (data.hasOwnProperty('draftType')) {
                obj['draftType'] = ApiClient.convertToType(data['draftType'], 'String');
            }
            if (data.hasOwnProperty('mappingLog')) {
                obj['mappingLog'] = ApiClient.convertToType(data['mappingLog'], [EntityMappingLogEntry]);
            }
            if (data.hasOwnProperty('sourceEntity')) {
                obj['sourceEntity'] = ApiClient.convertToType(data['sourceEntity'], 'String');
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntityMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntityMapping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['draftEntity'] && !(typeof data['draftEntity'] === 'string' || data['draftEntity'] instanceof String)) {
            throw new Error("Expected the field `draftEntity` to be a primitive type in the JSON string but got " + data['draftEntity']);
        }
        // ensure the json data is a string
        if (data['draftType'] && !(typeof data['draftType'] === 'string' || data['draftType'] instanceof String)) {
            throw new Error("Expected the field `draftType` to be a primitive type in the JSON string but got " + data['draftType']);
        }
        if (data['mappingLog']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mappingLog'])) {
                throw new Error("Expected the field `mappingLog` to be an array in the JSON data but got " + data['mappingLog']);
            }
            // validate the optional field `mappingLog` (array)
            for (const item of data['mappingLog']) {
                EntityMappingLogEntry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sourceEntity'] && !(typeof data['sourceEntity'] === 'string' || data['sourceEntity'] instanceof String)) {
            throw new Error("Expected the field `sourceEntity` to be a primitive type in the JSON string but got " + data['sourceEntity']);
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }

        return true;
    }


}



/**
 * Target entity full name. The draft entity can also include a column, index or constraint using the same naming notation schema.table.column.
 * @member {String} draftEntity
 */
EntityMapping.prototype['draftEntity'] = undefined;

/**
 * Type of draft entity.
 * @member {module:model/EntityMapping.DraftTypeEnum} draftType
 */
EntityMapping.prototype['draftType'] = undefined;

/**
 * Entity mapping log entries. Multiple rules can be effective and contribute changes to a converted entity, such as a rule can handle the entity name, another rule can handle an entity type. In addition, rules which did not change the entity are also logged along with the reason preventing them to do so.
 * @member {Array.<module:model/EntityMappingLogEntry>} mappingLog
 */
EntityMapping.prototype['mappingLog'] = undefined;

/**
 * Source entity full name. The source entity can also be a column, index or constraint using the same naming notation schema.table.column.
 * @member {String} sourceEntity
 */
EntityMapping.prototype['sourceEntity'] = undefined;

/**
 * Type of source entity.
 * @member {module:model/EntityMapping.SourceTypeEnum} sourceType
 */
EntityMapping.prototype['sourceType'] = undefined;





/**
 * Allowed values for the <code>draftType</code> property.
 * @enum {String}
 * @readonly
 */
EntityMapping['DraftTypeEnum'] = {

    /**
     * value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "DATABASE_ENTITY_TYPE_UNSPECIFIED",

    /**
     * value: "DATABASE_ENTITY_TYPE_SCHEMA"
     * @const
     */
    "SCHEMA": "DATABASE_ENTITY_TYPE_SCHEMA",

    /**
     * value: "DATABASE_ENTITY_TYPE_TABLE"
     * @const
     */
    "TABLE": "DATABASE_ENTITY_TYPE_TABLE",

    /**
     * value: "DATABASE_ENTITY_TYPE_COLUMN"
     * @const
     */
    "COLUMN": "DATABASE_ENTITY_TYPE_COLUMN",

    /**
     * value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
     * @const
     */
    "CONSTRAINT": "DATABASE_ENTITY_TYPE_CONSTRAINT",

    /**
     * value: "DATABASE_ENTITY_TYPE_INDEX"
     * @const
     */
    "INDEX": "DATABASE_ENTITY_TYPE_INDEX",

    /**
     * value: "DATABASE_ENTITY_TYPE_TRIGGER"
     * @const
     */
    "TRIGGER": "DATABASE_ENTITY_TYPE_TRIGGER",

    /**
     * value: "DATABASE_ENTITY_TYPE_VIEW"
     * @const
     */
    "VIEW": "DATABASE_ENTITY_TYPE_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_SEQUENCE"
     * @const
     */
    "SEQUENCE": "DATABASE_ENTITY_TYPE_SEQUENCE",

    /**
     * value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
     * @const
     */
    "STORED_PROCEDURE": "DATABASE_ENTITY_TYPE_STORED_PROCEDURE",

    /**
     * value: "DATABASE_ENTITY_TYPE_FUNCTION"
     * @const
     */
    "FUNCTION": "DATABASE_ENTITY_TYPE_FUNCTION",

    /**
     * value: "DATABASE_ENTITY_TYPE_SYNONYM"
     * @const
     */
    "SYNONYM": "DATABASE_ENTITY_TYPE_SYNONYM",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
     * @const
     */
    "DATABASE_PACKAGE": "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE",

    /**
     * value: "DATABASE_ENTITY_TYPE_UDT"
     * @const
     */
    "UDT": "DATABASE_ENTITY_TYPE_UDT",

    /**
     * value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
     * @const
     */
    "MATERIALIZED_VIEW": "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE"
     * @const
     */
    "DATABASE": "DATABASE_ENTITY_TYPE_DATABASE"
};


/**
 * Allowed values for the <code>sourceType</code> property.
 * @enum {String}
 * @readonly
 */
EntityMapping['SourceTypeEnum'] = {

    /**
     * value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "DATABASE_ENTITY_TYPE_UNSPECIFIED",

    /**
     * value: "DATABASE_ENTITY_TYPE_SCHEMA"
     * @const
     */
    "SCHEMA": "DATABASE_ENTITY_TYPE_SCHEMA",

    /**
     * value: "DATABASE_ENTITY_TYPE_TABLE"
     * @const
     */
    "TABLE": "DATABASE_ENTITY_TYPE_TABLE",

    /**
     * value: "DATABASE_ENTITY_TYPE_COLUMN"
     * @const
     */
    "COLUMN": "DATABASE_ENTITY_TYPE_COLUMN",

    /**
     * value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
     * @const
     */
    "CONSTRAINT": "DATABASE_ENTITY_TYPE_CONSTRAINT",

    /**
     * value: "DATABASE_ENTITY_TYPE_INDEX"
     * @const
     */
    "INDEX": "DATABASE_ENTITY_TYPE_INDEX",

    /**
     * value: "DATABASE_ENTITY_TYPE_TRIGGER"
     * @const
     */
    "TRIGGER": "DATABASE_ENTITY_TYPE_TRIGGER",

    /**
     * value: "DATABASE_ENTITY_TYPE_VIEW"
     * @const
     */
    "VIEW": "DATABASE_ENTITY_TYPE_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_SEQUENCE"
     * @const
     */
    "SEQUENCE": "DATABASE_ENTITY_TYPE_SEQUENCE",

    /**
     * value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
     * @const
     */
    "STORED_PROCEDURE": "DATABASE_ENTITY_TYPE_STORED_PROCEDURE",

    /**
     * value: "DATABASE_ENTITY_TYPE_FUNCTION"
     * @const
     */
    "FUNCTION": "DATABASE_ENTITY_TYPE_FUNCTION",

    /**
     * value: "DATABASE_ENTITY_TYPE_SYNONYM"
     * @const
     */
    "SYNONYM": "DATABASE_ENTITY_TYPE_SYNONYM",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
     * @const
     */
    "DATABASE_PACKAGE": "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE",

    /**
     * value: "DATABASE_ENTITY_TYPE_UDT"
     * @const
     */
    "UDT": "DATABASE_ENTITY_TYPE_UDT",

    /**
     * value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
     * @const
     */
    "MATERIALIZED_VIEW": "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW",

    /**
     * value: "DATABASE_ENTITY_TYPE_DATABASE"
     * @const
     */
    "DATABASE": "DATABASE_ENTITY_TYPE_DATABASE"
};



export default EntityMapping;

