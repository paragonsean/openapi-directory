/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplyJobDetails from './ApplyJobDetails';
import ConvertJobDetails from './ConvertJobDetails';
import ImportRulesJobDetails from './ImportRulesJobDetails';
import SeedJobDetails from './SeedJobDetails';

/**
 * The BackgroundJobLogEntry model module.
 * @module model/BackgroundJobLogEntry
 * @version v1
 */
class BackgroundJobLogEntry {
    /**
     * Constructs a new <code>BackgroundJobLogEntry</code>.
     * Execution log of a background job.
     * @alias module:model/BackgroundJobLogEntry
     */
    constructor() { 
        
        BackgroundJobLogEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BackgroundJobLogEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BackgroundJobLogEntry} obj Optional instance to populate.
     * @return {module:model/BackgroundJobLogEntry} The populated <code>BackgroundJobLogEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BackgroundJobLogEntry();

            if (data.hasOwnProperty('applyJobDetails')) {
                obj['applyJobDetails'] = ApplyJobDetails.constructFromObject(data['applyJobDetails']);
            }
            if (data.hasOwnProperty('completionComment')) {
                obj['completionComment'] = ApiClient.convertToType(data['completionComment'], 'String');
            }
            if (data.hasOwnProperty('completionState')) {
                obj['completionState'] = ApiClient.convertToType(data['completionState'], 'String');
            }
            if (data.hasOwnProperty('convertJobDetails')) {
                obj['convertJobDetails'] = ConvertJobDetails.constructFromObject(data['convertJobDetails']);
            }
            if (data.hasOwnProperty('finishTime')) {
                obj['finishTime'] = ApiClient.convertToType(data['finishTime'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('importRulesJobDetails')) {
                obj['importRulesJobDetails'] = ImportRulesJobDetails.constructFromObject(data['importRulesJobDetails']);
            }
            if (data.hasOwnProperty('jobType')) {
                obj['jobType'] = ApiClient.convertToType(data['jobType'], 'String');
            }
            if (data.hasOwnProperty('requestAutocommit')) {
                obj['requestAutocommit'] = ApiClient.convertToType(data['requestAutocommit'], 'Boolean');
            }
            if (data.hasOwnProperty('seedJobDetails')) {
                obj['seedJobDetails'] = SeedJobDetails.constructFromObject(data['seedJobDetails']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BackgroundJobLogEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BackgroundJobLogEntry</code>.
     */
    static validateJSON(data) {
        // validate the optional field `applyJobDetails`
        if (data['applyJobDetails']) { // data not null
          ApplyJobDetails.validateJSON(data['applyJobDetails']);
        }
        // ensure the json data is a string
        if (data['completionComment'] && !(typeof data['completionComment'] === 'string' || data['completionComment'] instanceof String)) {
            throw new Error("Expected the field `completionComment` to be a primitive type in the JSON string but got " + data['completionComment']);
        }
        // ensure the json data is a string
        if (data['completionState'] && !(typeof data['completionState'] === 'string' || data['completionState'] instanceof String)) {
            throw new Error("Expected the field `completionState` to be a primitive type in the JSON string but got " + data['completionState']);
        }
        // validate the optional field `convertJobDetails`
        if (data['convertJobDetails']) { // data not null
          ConvertJobDetails.validateJSON(data['convertJobDetails']);
        }
        // ensure the json data is a string
        if (data['finishTime'] && !(typeof data['finishTime'] === 'string' || data['finishTime'] instanceof String)) {
            throw new Error("Expected the field `finishTime` to be a primitive type in the JSON string but got " + data['finishTime']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `importRulesJobDetails`
        if (data['importRulesJobDetails']) { // data not null
          ImportRulesJobDetails.validateJSON(data['importRulesJobDetails']);
        }
        // ensure the json data is a string
        if (data['jobType'] && !(typeof data['jobType'] === 'string' || data['jobType'] instanceof String)) {
            throw new Error("Expected the field `jobType` to be a primitive type in the JSON string but got " + data['jobType']);
        }
        // validate the optional field `seedJobDetails`
        if (data['seedJobDetails']) { // data not null
          SeedJobDetails.validateJSON(data['seedJobDetails']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/ApplyJobDetails} applyJobDetails
 */
BackgroundJobLogEntry.prototype['applyJobDetails'] = undefined;

/**
 * Output only. Job completion comment, such as how many entities were seeded, how many warnings were found during conversion, and similar information.
 * @member {String} completionComment
 */
BackgroundJobLogEntry.prototype['completionComment'] = undefined;

/**
 * Output only. Job completion state, i.e. the final state after the job completed.
 * @member {module:model/BackgroundJobLogEntry.CompletionStateEnum} completionState
 */
BackgroundJobLogEntry.prototype['completionState'] = undefined;

/**
 * @member {module:model/ConvertJobDetails} convertJobDetails
 */
BackgroundJobLogEntry.prototype['convertJobDetails'] = undefined;

/**
 * The timestamp when the background job was finished.
 * @member {String} finishTime
 */
BackgroundJobLogEntry.prototype['finishTime'] = undefined;

/**
 * The background job log entry ID.
 * @member {String} id
 */
BackgroundJobLogEntry.prototype['id'] = undefined;

/**
 * @member {module:model/ImportRulesJobDetails} importRulesJobDetails
 */
BackgroundJobLogEntry.prototype['importRulesJobDetails'] = undefined;

/**
 * The type of job that was executed.
 * @member {module:model/BackgroundJobLogEntry.JobTypeEnum} jobType
 */
BackgroundJobLogEntry.prototype['jobType'] = undefined;

/**
 * Output only. Whether the client requested the conversion workspace to be committed after a successful completion of the job.
 * @member {Boolean} requestAutocommit
 */
BackgroundJobLogEntry.prototype['requestAutocommit'] = undefined;

/**
 * @member {module:model/SeedJobDetails} seedJobDetails
 */
BackgroundJobLogEntry.prototype['seedJobDetails'] = undefined;

/**
 * The timestamp when the background job was started.
 * @member {String} startTime
 */
BackgroundJobLogEntry.prototype['startTime'] = undefined;





/**
 * Allowed values for the <code>completionState</code> property.
 * @enum {String}
 * @readonly
 */
BackgroundJobLogEntry['CompletionStateEnum'] = {

    /**
     * value: "JOB_COMPLETION_STATE_UNSPECIFIED"
     * @const
     */
    "JOB_COMPLETION_STATE_UNSPECIFIED": "JOB_COMPLETION_STATE_UNSPECIFIED",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};


/**
 * Allowed values for the <code>jobType</code> property.
 * @enum {String}
 * @readonly
 */
BackgroundJobLogEntry['JobTypeEnum'] = {

    /**
     * value: "BACKGROUND_JOB_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "BACKGROUND_JOB_TYPE_UNSPECIFIED",

    /**
     * value: "BACKGROUND_JOB_TYPE_SOURCE_SEED"
     * @const
     */
    "SOURCE_SEED": "BACKGROUND_JOB_TYPE_SOURCE_SEED",

    /**
     * value: "BACKGROUND_JOB_TYPE_CONVERT"
     * @const
     */
    "CONVERT": "BACKGROUND_JOB_TYPE_CONVERT",

    /**
     * value: "BACKGROUND_JOB_TYPE_APPLY_DESTINATION"
     * @const
     */
    "APPLY_DESTINATION": "BACKGROUND_JOB_TYPE_APPLY_DESTINATION",

    /**
     * value: "BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE"
     * @const
     */
    "IMPORT_RULES_FILE": "BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE"
};



export default BackgroundJobLogEntry;

