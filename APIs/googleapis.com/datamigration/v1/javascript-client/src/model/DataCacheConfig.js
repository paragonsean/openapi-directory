/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataCacheConfig model module.
 * @module model/DataCacheConfig
 * @version v1
 */
class DataCacheConfig {
    /**
     * Constructs a new <code>DataCacheConfig</code>.
     * Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
     * @alias module:model/DataCacheConfig
     */
    constructor() { 
        
        DataCacheConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataCacheConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataCacheConfig} obj Optional instance to populate.
     * @return {module:model/DataCacheConfig} The populated <code>DataCacheConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataCacheConfig();

            if (data.hasOwnProperty('dataCacheEnabled')) {
                obj['dataCacheEnabled'] = ApiClient.convertToType(data['dataCacheEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataCacheConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataCacheConfig</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Optional. Whether data cache is enabled for the instance.
 * @member {Boolean} dataCacheEnabled
 */
DataCacheConfig.prototype['dataCacheEnabled'] = undefined;






export default DataCacheConfig;

