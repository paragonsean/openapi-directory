/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ColumnEntity model module.
 * @module model/ColumnEntity
 * @version v1
 */
class ColumnEntity {
    /**
     * Constructs a new <code>ColumnEntity</code>.
     * Column is not used as an independent entity, it is retrieved as part of a Table entity.
     * @alias module:model/ColumnEntity
     */
    constructor() { 
        
        ColumnEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ColumnEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ColumnEntity} obj Optional instance to populate.
     * @return {module:model/ColumnEntity} The populated <code>ColumnEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ColumnEntity();

            if (data.hasOwnProperty('array')) {
                obj['array'] = ApiClient.convertToType(data['array'], 'Boolean');
            }
            if (data.hasOwnProperty('arrayLength')) {
                obj['arrayLength'] = ApiClient.convertToType(data['arrayLength'], 'Number');
            }
            if (data.hasOwnProperty('autoGenerated')) {
                obj['autoGenerated'] = ApiClient.convertToType(data['autoGenerated'], 'Boolean');
            }
            if (data.hasOwnProperty('charset')) {
                obj['charset'] = ApiClient.convertToType(data['charset'], 'String');
            }
            if (data.hasOwnProperty('collation')) {
                obj['collation'] = ApiClient.convertToType(data['collation'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('customFeatures')) {
                obj['customFeatures'] = ApiClient.convertToType(data['customFeatures'], {'String': Object});
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
            if (data.hasOwnProperty('defaultValue')) {
                obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], 'String');
            }
            if (data.hasOwnProperty('fractionalSecondsPrecision')) {
                obj['fractionalSecondsPrecision'] = ApiClient.convertToType(data['fractionalSecondsPrecision'], 'Number');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nullable')) {
                obj['nullable'] = ApiClient.convertToType(data['nullable'], 'Boolean');
            }
            if (data.hasOwnProperty('ordinalPosition')) {
                obj['ordinalPosition'] = ApiClient.convertToType(data['ordinalPosition'], 'Number');
            }
            if (data.hasOwnProperty('precision')) {
                obj['precision'] = ApiClient.convertToType(data['precision'], 'Number');
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
            }
            if (data.hasOwnProperty('setValues')) {
                obj['setValues'] = ApiClient.convertToType(data['setValues'], ['String']);
            }
            if (data.hasOwnProperty('udt')) {
                obj['udt'] = ApiClient.convertToType(data['udt'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ColumnEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ColumnEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['charset'] && !(typeof data['charset'] === 'string' || data['charset'] instanceof String)) {
            throw new Error("Expected the field `charset` to be a primitive type in the JSON string but got " + data['charset']);
        }
        // ensure the json data is a string
        if (data['collation'] && !(typeof data['collation'] === 'string' || data['collation'] instanceof String)) {
            throw new Error("Expected the field `collation` to be a primitive type in the JSON string but got " + data['collation']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['dataType'] && !(typeof data['dataType'] === 'string' || data['dataType'] instanceof String)) {
            throw new Error("Expected the field `dataType` to be a primitive type in the JSON string but got " + data['dataType']);
        }
        // ensure the json data is a string
        if (data['defaultValue'] && !(typeof data['defaultValue'] === 'string' || data['defaultValue'] instanceof String)) {
            throw new Error("Expected the field `defaultValue` to be a primitive type in the JSON string but got " + data['defaultValue']);
        }
        // ensure the json data is a string
        if (data['length'] && !(typeof data['length'] === 'string' || data['length'] instanceof String)) {
            throw new Error("Expected the field `length` to be a primitive type in the JSON string but got " + data['length']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['setValues'])) {
            throw new Error("Expected the field `setValues` to be an array in the JSON data but got " + data['setValues']);
        }

        return true;
    }


}



/**
 * Is the column of array type.
 * @member {Boolean} array
 */
ColumnEntity.prototype['array'] = undefined;

/**
 * If the column is array, of which length.
 * @member {Number} arrayLength
 */
ColumnEntity.prototype['arrayLength'] = undefined;

/**
 * Is the column auto-generated/identity.
 * @member {Boolean} autoGenerated
 */
ColumnEntity.prototype['autoGenerated'] = undefined;

/**
 * Charset override - instead of table level charset.
 * @member {String} charset
 */
ColumnEntity.prototype['charset'] = undefined;

/**
 * Collation override - instead of table level collation.
 * @member {String} collation
 */
ColumnEntity.prototype['collation'] = undefined;

/**
 * Comment associated with the column.
 * @member {String} comment
 */
ColumnEntity.prototype['comment'] = undefined;

/**
 * Custom engine specific features.
 * @member {Object.<String, Object>} customFeatures
 */
ColumnEntity.prototype['customFeatures'] = undefined;

/**
 * Column data type.
 * @member {String} dataType
 */
ColumnEntity.prototype['dataType'] = undefined;

/**
 * Default value of the column.
 * @member {String} defaultValue
 */
ColumnEntity.prototype['defaultValue'] = undefined;

/**
 * Column fractional second precision - used for timestamp based datatypes.
 * @member {Number} fractionalSecondsPrecision
 */
ColumnEntity.prototype['fractionalSecondsPrecision'] = undefined;

/**
 * Column length - e.g. varchar (50).
 * @member {String} length
 */
ColumnEntity.prototype['length'] = undefined;

/**
 * Column name.
 * @member {String} name
 */
ColumnEntity.prototype['name'] = undefined;

/**
 * Is the column nullable.
 * @member {Boolean} nullable
 */
ColumnEntity.prototype['nullable'] = undefined;

/**
 * Column order in the table.
 * @member {Number} ordinalPosition
 */
ColumnEntity.prototype['ordinalPosition'] = undefined;

/**
 * Column precision - when relevant.
 * @member {Number} precision
 */
ColumnEntity.prototype['precision'] = undefined;

/**
 * Column scale - when relevant.
 * @member {Number} scale
 */
ColumnEntity.prototype['scale'] = undefined;

/**
 * Specifies the list of values allowed in the column. Only used for set data type.
 * @member {Array.<String>} setValues
 */
ColumnEntity.prototype['setValues'] = undefined;

/**
 * Is the column a UDT.
 * @member {Boolean} udt
 */
ColumnEntity.prototype['udt'] = undefined;






export default ColumnEntity;

