/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplyHash.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplyHash::OAIApplyHash(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplyHash::OAIApplyHash() {
    this->initializeModel();
}

OAIApplyHash::~OAIApplyHash() {}

void OAIApplyHash::initializeModel() {

    m_uuid_from_bytes_isSet = false;
    m_uuid_from_bytes_isValid = false;
}

void OAIApplyHash::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplyHash::fromJsonObject(QJsonObject json) {

    m_uuid_from_bytes_isValid = ::OpenAPI::fromJsonValue(m_uuid_from_bytes, json[QString("uuidFromBytes")]);
    m_uuid_from_bytes_isSet = !json[QString("uuidFromBytes")].isNull() && m_uuid_from_bytes_isValid;
}

QString OAIApplyHash::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplyHash::asJsonObject() const {
    QJsonObject obj;
    if (m_uuid_from_bytes_isSet) {
        obj.insert(QString("uuidFromBytes"), ::OpenAPI::toJsonValue(m_uuid_from_bytes));
    }
    return obj;
}

OAIObject OAIApplyHash::getUuidFromBytes() const {
    return m_uuid_from_bytes;
}
void OAIApplyHash::setUuidFromBytes(const OAIObject &uuid_from_bytes) {
    m_uuid_from_bytes = uuid_from_bytes;
    m_uuid_from_bytes_isSet = true;
}

bool OAIApplyHash::is_uuid_from_bytes_Set() const{
    return m_uuid_from_bytes_isSet;
}

bool OAIApplyHash::is_uuid_from_bytes_Valid() const{
    return m_uuid_from_bytes_isValid;
}

bool OAIApplyHash::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uuid_from_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplyHash::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
