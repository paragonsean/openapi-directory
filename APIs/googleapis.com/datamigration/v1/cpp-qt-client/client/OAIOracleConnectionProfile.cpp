/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOracleConnectionProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOracleConnectionProfile::OAIOracleConnectionProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOracleConnectionProfile::OAIOracleConnectionProfile() {
    this->initializeModel();
}

OAIOracleConnectionProfile::~OAIOracleConnectionProfile() {}

void OAIOracleConnectionProfile::initializeModel() {

    m_database_service_isSet = false;
    m_database_service_isValid = false;

    m_forward_ssh_connectivity_isSet = false;
    m_forward_ssh_connectivity_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_password_set_isSet = false;
    m_password_set_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_private_connectivity_isSet = false;
    m_private_connectivity_isValid = false;

    m_ssl_isSet = false;
    m_ssl_isValid = false;

    m_static_service_ip_connectivity_isSet = false;
    m_static_service_ip_connectivity_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIOracleConnectionProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOracleConnectionProfile::fromJsonObject(QJsonObject json) {

    m_database_service_isValid = ::OpenAPI::fromJsonValue(m_database_service, json[QString("databaseService")]);
    m_database_service_isSet = !json[QString("databaseService")].isNull() && m_database_service_isValid;

    m_forward_ssh_connectivity_isValid = ::OpenAPI::fromJsonValue(m_forward_ssh_connectivity, json[QString("forwardSshConnectivity")]);
    m_forward_ssh_connectivity_isSet = !json[QString("forwardSshConnectivity")].isNull() && m_forward_ssh_connectivity_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_password_set_isValid = ::OpenAPI::fromJsonValue(m_password_set, json[QString("passwordSet")]);
    m_password_set_isSet = !json[QString("passwordSet")].isNull() && m_password_set_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_private_connectivity_isValid = ::OpenAPI::fromJsonValue(m_private_connectivity, json[QString("privateConnectivity")]);
    m_private_connectivity_isSet = !json[QString("privateConnectivity")].isNull() && m_private_connectivity_isValid;

    m_ssl_isValid = ::OpenAPI::fromJsonValue(m_ssl, json[QString("ssl")]);
    m_ssl_isSet = !json[QString("ssl")].isNull() && m_ssl_isValid;

    m_static_service_ip_connectivity_isValid = ::OpenAPI::fromJsonValue(m_static_service_ip_connectivity, json[QString("staticServiceIpConnectivity")]);
    m_static_service_ip_connectivity_isSet = !json[QString("staticServiceIpConnectivity")].isNull() && m_static_service_ip_connectivity_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIOracleConnectionProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOracleConnectionProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_database_service_isSet) {
        obj.insert(QString("databaseService"), ::OpenAPI::toJsonValue(m_database_service));
    }
    if (m_forward_ssh_connectivity.isSet()) {
        obj.insert(QString("forwardSshConnectivity"), ::OpenAPI::toJsonValue(m_forward_ssh_connectivity));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_password_set_isSet) {
        obj.insert(QString("passwordSet"), ::OpenAPI::toJsonValue(m_password_set));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_private_connectivity.isSet()) {
        obj.insert(QString("privateConnectivity"), ::OpenAPI::toJsonValue(m_private_connectivity));
    }
    if (m_ssl.isSet()) {
        obj.insert(QString("ssl"), ::OpenAPI::toJsonValue(m_ssl));
    }
    if (m_static_service_ip_connectivity_isSet) {
        obj.insert(QString("staticServiceIpConnectivity"), ::OpenAPI::toJsonValue(m_static_service_ip_connectivity));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIOracleConnectionProfile::getDatabaseService() const {
    return m_database_service;
}
void OAIOracleConnectionProfile::setDatabaseService(const QString &database_service) {
    m_database_service = database_service;
    m_database_service_isSet = true;
}

bool OAIOracleConnectionProfile::is_database_service_Set() const{
    return m_database_service_isSet;
}

bool OAIOracleConnectionProfile::is_database_service_Valid() const{
    return m_database_service_isValid;
}

OAIForwardSshTunnelConnectivity OAIOracleConnectionProfile::getForwardSshConnectivity() const {
    return m_forward_ssh_connectivity;
}
void OAIOracleConnectionProfile::setForwardSshConnectivity(const OAIForwardSshTunnelConnectivity &forward_ssh_connectivity) {
    m_forward_ssh_connectivity = forward_ssh_connectivity;
    m_forward_ssh_connectivity_isSet = true;
}

bool OAIOracleConnectionProfile::is_forward_ssh_connectivity_Set() const{
    return m_forward_ssh_connectivity_isSet;
}

bool OAIOracleConnectionProfile::is_forward_ssh_connectivity_Valid() const{
    return m_forward_ssh_connectivity_isValid;
}

QString OAIOracleConnectionProfile::getHost() const {
    return m_host;
}
void OAIOracleConnectionProfile::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIOracleConnectionProfile::is_host_Set() const{
    return m_host_isSet;
}

bool OAIOracleConnectionProfile::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIOracleConnectionProfile::getPassword() const {
    return m_password;
}
void OAIOracleConnectionProfile::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIOracleConnectionProfile::is_password_Set() const{
    return m_password_isSet;
}

bool OAIOracleConnectionProfile::is_password_Valid() const{
    return m_password_isValid;
}

bool OAIOracleConnectionProfile::isPasswordSet() const {
    return m_password_set;
}
void OAIOracleConnectionProfile::setPasswordSet(const bool &password_set) {
    m_password_set = password_set;
    m_password_set_isSet = true;
}

bool OAIOracleConnectionProfile::is_password_set_Set() const{
    return m_password_set_isSet;
}

bool OAIOracleConnectionProfile::is_password_set_Valid() const{
    return m_password_set_isValid;
}

qint32 OAIOracleConnectionProfile::getPort() const {
    return m_port;
}
void OAIOracleConnectionProfile::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIOracleConnectionProfile::is_port_Set() const{
    return m_port_isSet;
}

bool OAIOracleConnectionProfile::is_port_Valid() const{
    return m_port_isValid;
}

OAIPrivateConnectivity OAIOracleConnectionProfile::getPrivateConnectivity() const {
    return m_private_connectivity;
}
void OAIOracleConnectionProfile::setPrivateConnectivity(const OAIPrivateConnectivity &private_connectivity) {
    m_private_connectivity = private_connectivity;
    m_private_connectivity_isSet = true;
}

bool OAIOracleConnectionProfile::is_private_connectivity_Set() const{
    return m_private_connectivity_isSet;
}

bool OAIOracleConnectionProfile::is_private_connectivity_Valid() const{
    return m_private_connectivity_isValid;
}

OAISslConfig OAIOracleConnectionProfile::getSsl() const {
    return m_ssl;
}
void OAIOracleConnectionProfile::setSsl(const OAISslConfig &ssl) {
    m_ssl = ssl;
    m_ssl_isSet = true;
}

bool OAIOracleConnectionProfile::is_ssl_Set() const{
    return m_ssl_isSet;
}

bool OAIOracleConnectionProfile::is_ssl_Valid() const{
    return m_ssl_isValid;
}

OAIObject OAIOracleConnectionProfile::getStaticServiceIpConnectivity() const {
    return m_static_service_ip_connectivity;
}
void OAIOracleConnectionProfile::setStaticServiceIpConnectivity(const OAIObject &static_service_ip_connectivity) {
    m_static_service_ip_connectivity = static_service_ip_connectivity;
    m_static_service_ip_connectivity_isSet = true;
}

bool OAIOracleConnectionProfile::is_static_service_ip_connectivity_Set() const{
    return m_static_service_ip_connectivity_isSet;
}

bool OAIOracleConnectionProfile::is_static_service_ip_connectivity_Valid() const{
    return m_static_service_ip_connectivity_isValid;
}

QString OAIOracleConnectionProfile::getUsername() const {
    return m_username;
}
void OAIOracleConnectionProfile::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIOracleConnectionProfile::is_username_Set() const{
    return m_username_isSet;
}

bool OAIOracleConnectionProfile::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIOracleConnectionProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_ssh_connectivity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_connectivity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_service_ip_connectivity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOracleConnectionProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
