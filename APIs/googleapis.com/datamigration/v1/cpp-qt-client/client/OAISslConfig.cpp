/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISslConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISslConfig::OAISslConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISslConfig::OAISslConfig() {
    this->initializeModel();
}

OAISslConfig::~OAISslConfig() {}

void OAISslConfig::initializeModel() {

    m_ca_certificate_isSet = false;
    m_ca_certificate_isValid = false;

    m_client_certificate_isSet = false;
    m_client_certificate_isValid = false;

    m_client_key_isSet = false;
    m_client_key_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISslConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISslConfig::fromJsonObject(QJsonObject json) {

    m_ca_certificate_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate, json[QString("caCertificate")]);
    m_ca_certificate_isSet = !json[QString("caCertificate")].isNull() && m_ca_certificate_isValid;

    m_client_certificate_isValid = ::OpenAPI::fromJsonValue(m_client_certificate, json[QString("clientCertificate")]);
    m_client_certificate_isSet = !json[QString("clientCertificate")].isNull() && m_client_certificate_isValid;

    m_client_key_isValid = ::OpenAPI::fromJsonValue(m_client_key, json[QString("clientKey")]);
    m_client_key_isSet = !json[QString("clientKey")].isNull() && m_client_key_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISslConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISslConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_ca_certificate_isSet) {
        obj.insert(QString("caCertificate"), ::OpenAPI::toJsonValue(m_ca_certificate));
    }
    if (m_client_certificate_isSet) {
        obj.insert(QString("clientCertificate"), ::OpenAPI::toJsonValue(m_client_certificate));
    }
    if (m_client_key_isSet) {
        obj.insert(QString("clientKey"), ::OpenAPI::toJsonValue(m_client_key));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISslConfig::getCaCertificate() const {
    return m_ca_certificate;
}
void OAISslConfig::setCaCertificate(const QString &ca_certificate) {
    m_ca_certificate = ca_certificate;
    m_ca_certificate_isSet = true;
}

bool OAISslConfig::is_ca_certificate_Set() const{
    return m_ca_certificate_isSet;
}

bool OAISslConfig::is_ca_certificate_Valid() const{
    return m_ca_certificate_isValid;
}

QString OAISslConfig::getClientCertificate() const {
    return m_client_certificate;
}
void OAISslConfig::setClientCertificate(const QString &client_certificate) {
    m_client_certificate = client_certificate;
    m_client_certificate_isSet = true;
}

bool OAISslConfig::is_client_certificate_Set() const{
    return m_client_certificate_isSet;
}

bool OAISslConfig::is_client_certificate_Valid() const{
    return m_client_certificate_isValid;
}

QString OAISslConfig::getClientKey() const {
    return m_client_key;
}
void OAISslConfig::setClientKey(const QString &client_key) {
    m_client_key = client_key;
    m_client_key_isSet = true;
}

bool OAISslConfig::is_client_key_Set() const{
    return m_client_key_isSet;
}

bool OAISslConfig::is_client_key_Valid() const{
    return m_client_key_isValid;
}

QString OAISslConfig::getType() const {
    return m_type;
}
void OAISslConfig::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISslConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAISslConfig::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISslConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ca_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISslConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
