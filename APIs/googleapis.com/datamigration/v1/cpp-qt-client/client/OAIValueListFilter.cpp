/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValueListFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValueListFilter::OAIValueListFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValueListFilter::OAIValueListFilter() {
    this->initializeModel();
}

OAIValueListFilter::~OAIValueListFilter() {}

void OAIValueListFilter::initializeModel() {

    m_ignore_case_isSet = false;
    m_ignore_case_isValid = false;

    m_value_present_list_isSet = false;
    m_value_present_list_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIValueListFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValueListFilter::fromJsonObject(QJsonObject json) {

    m_ignore_case_isValid = ::OpenAPI::fromJsonValue(m_ignore_case, json[QString("ignoreCase")]);
    m_ignore_case_isSet = !json[QString("ignoreCase")].isNull() && m_ignore_case_isValid;

    m_value_present_list_isValid = ::OpenAPI::fromJsonValue(m_value_present_list, json[QString("valuePresentList")]);
    m_value_present_list_isSet = !json[QString("valuePresentList")].isNull() && m_value_present_list_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIValueListFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValueListFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_case_isSet) {
        obj.insert(QString("ignoreCase"), ::OpenAPI::toJsonValue(m_ignore_case));
    }
    if (m_value_present_list_isSet) {
        obj.insert(QString("valuePresentList"), ::OpenAPI::toJsonValue(m_value_present_list));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

bool OAIValueListFilter::isIgnoreCase() const {
    return m_ignore_case;
}
void OAIValueListFilter::setIgnoreCase(const bool &ignore_case) {
    m_ignore_case = ignore_case;
    m_ignore_case_isSet = true;
}

bool OAIValueListFilter::is_ignore_case_Set() const{
    return m_ignore_case_isSet;
}

bool OAIValueListFilter::is_ignore_case_Valid() const{
    return m_ignore_case_isValid;
}

QString OAIValueListFilter::getValuePresentList() const {
    return m_value_present_list;
}
void OAIValueListFilter::setValuePresentList(const QString &value_present_list) {
    m_value_present_list = value_present_list;
    m_value_present_list_isSet = true;
}

bool OAIValueListFilter::is_value_present_list_Set() const{
    return m_value_present_list_isSet;
}

bool OAIValueListFilter::is_value_present_list_Valid() const{
    return m_value_present_list_isValid;
}

QList<QString> OAIValueListFilter::getValues() const {
    return m_values;
}
void OAIValueListFilter::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIValueListFilter::is_values_Set() const{
    return m_values_isSet;
}

bool OAIValueListFilter::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIValueListFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_case_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_present_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValueListFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
