/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndexEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndexEntity::OAIIndexEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndexEntity::OAIIndexEntity() {
    this->initializeModel();
}

OAIIndexEntity::~OAIIndexEntity() {}

void OAIIndexEntity::initializeModel() {

    m_custom_features_isSet = false;
    m_custom_features_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_table_columns_isSet = false;
    m_table_columns_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unique_isSet = false;
    m_unique_isValid = false;
}

void OAIIndexEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndexEntity::fromJsonObject(QJsonObject json) {

    m_custom_features_isValid = ::OpenAPI::fromJsonValue(m_custom_features, json[QString("customFeatures")]);
    m_custom_features_isSet = !json[QString("customFeatures")].isNull() && m_custom_features_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_table_columns_isValid = ::OpenAPI::fromJsonValue(m_table_columns, json[QString("tableColumns")]);
    m_table_columns_isSet = !json[QString("tableColumns")].isNull() && m_table_columns_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unique_isValid = ::OpenAPI::fromJsonValue(m_unique, json[QString("unique")]);
    m_unique_isSet = !json[QString("unique")].isNull() && m_unique_isValid;
}

QString OAIIndexEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndexEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_features.size() > 0) {
        obj.insert(QString("customFeatures"), ::OpenAPI::toJsonValue(m_custom_features));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_table_columns.size() > 0) {
        obj.insert(QString("tableColumns"), ::OpenAPI::toJsonValue(m_table_columns));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unique_isSet) {
        obj.insert(QString("unique"), ::OpenAPI::toJsonValue(m_unique));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIIndexEntity::getCustomFeatures() const {
    return m_custom_features;
}
void OAIIndexEntity::setCustomFeatures(const QMap<QString, QJsonValue> &custom_features) {
    m_custom_features = custom_features;
    m_custom_features_isSet = true;
}

bool OAIIndexEntity::is_custom_features_Set() const{
    return m_custom_features_isSet;
}

bool OAIIndexEntity::is_custom_features_Valid() const{
    return m_custom_features_isValid;
}

QString OAIIndexEntity::getName() const {
    return m_name;
}
void OAIIndexEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIndexEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIndexEntity::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIIndexEntity::getTableColumns() const {
    return m_table_columns;
}
void OAIIndexEntity::setTableColumns(const QList<QString> &table_columns) {
    m_table_columns = table_columns;
    m_table_columns_isSet = true;
}

bool OAIIndexEntity::is_table_columns_Set() const{
    return m_table_columns_isSet;
}

bool OAIIndexEntity::is_table_columns_Valid() const{
    return m_table_columns_isValid;
}

QString OAIIndexEntity::getType() const {
    return m_type;
}
void OAIIndexEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIndexEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIndexEntity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIndexEntity::isUnique() const {
    return m_unique;
}
void OAIIndexEntity::setUnique(const bool &unique) {
    m_unique = unique;
    m_unique_isSet = true;
}

bool OAIIndexEntity::is_unique_Set() const{
    return m_unique_isSet;
}

bool OAIIndexEntity::is_unique_Valid() const{
    return m_unique_isValid;
}

bool OAIIndexEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndexEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
