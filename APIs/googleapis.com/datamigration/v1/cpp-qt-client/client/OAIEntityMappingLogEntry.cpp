/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityMappingLogEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityMappingLogEntry::OAIEntityMappingLogEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityMappingLogEntry::OAIEntityMappingLogEntry() {
    this->initializeModel();
}

OAIEntityMappingLogEntry::~OAIEntityMappingLogEntry() {}

void OAIEntityMappingLogEntry::initializeModel() {

    m_mapping_comment_isSet = false;
    m_mapping_comment_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_rule_revision_id_isSet = false;
    m_rule_revision_id_isValid = false;
}

void OAIEntityMappingLogEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityMappingLogEntry::fromJsonObject(QJsonObject json) {

    m_mapping_comment_isValid = ::OpenAPI::fromJsonValue(m_mapping_comment, json[QString("mappingComment")]);
    m_mapping_comment_isSet = !json[QString("mappingComment")].isNull() && m_mapping_comment_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("ruleId")]);
    m_rule_id_isSet = !json[QString("ruleId")].isNull() && m_rule_id_isValid;

    m_rule_revision_id_isValid = ::OpenAPI::fromJsonValue(m_rule_revision_id, json[QString("ruleRevisionId")]);
    m_rule_revision_id_isSet = !json[QString("ruleRevisionId")].isNull() && m_rule_revision_id_isValid;
}

QString OAIEntityMappingLogEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityMappingLogEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_mapping_comment_isSet) {
        obj.insert(QString("mappingComment"), ::OpenAPI::toJsonValue(m_mapping_comment));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("ruleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_rule_revision_id_isSet) {
        obj.insert(QString("ruleRevisionId"), ::OpenAPI::toJsonValue(m_rule_revision_id));
    }
    return obj;
}

QString OAIEntityMappingLogEntry::getMappingComment() const {
    return m_mapping_comment;
}
void OAIEntityMappingLogEntry::setMappingComment(const QString &mapping_comment) {
    m_mapping_comment = mapping_comment;
    m_mapping_comment_isSet = true;
}

bool OAIEntityMappingLogEntry::is_mapping_comment_Set() const{
    return m_mapping_comment_isSet;
}

bool OAIEntityMappingLogEntry::is_mapping_comment_Valid() const{
    return m_mapping_comment_isValid;
}

QString OAIEntityMappingLogEntry::getRuleId() const {
    return m_rule_id;
}
void OAIEntityMappingLogEntry::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIEntityMappingLogEntry::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIEntityMappingLogEntry::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAIEntityMappingLogEntry::getRuleRevisionId() const {
    return m_rule_revision_id;
}
void OAIEntityMappingLogEntry::setRuleRevisionId(const QString &rule_revision_id) {
    m_rule_revision_id = rule_revision_id;
    m_rule_revision_id_isSet = true;
}

bool OAIEntityMappingLogEntry::is_rule_revision_id_Set() const{
    return m_rule_revision_id_isSet;
}

bool OAIEntityMappingLogEntry::is_rule_revision_id_Valid() const{
    return m_rule_revision_id_isValid;
}

bool OAIEntityMappingLogEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mapping_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityMappingLogEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
