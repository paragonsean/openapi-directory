/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConstraintEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConstraintEntity::OAIConstraintEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConstraintEntity::OAIConstraintEntity() {
    this->initializeModel();
}

OAIConstraintEntity::~OAIConstraintEntity() {}

void OAIConstraintEntity::initializeModel() {

    m_custom_features_isSet = false;
    m_custom_features_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reference_columns_isSet = false;
    m_reference_columns_isValid = false;

    m_reference_table_isSet = false;
    m_reference_table_isValid = false;

    m_table_columns_isSet = false;
    m_table_columns_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConstraintEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConstraintEntity::fromJsonObject(QJsonObject json) {

    m_custom_features_isValid = ::OpenAPI::fromJsonValue(m_custom_features, json[QString("customFeatures")]);
    m_custom_features_isSet = !json[QString("customFeatures")].isNull() && m_custom_features_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reference_columns_isValid = ::OpenAPI::fromJsonValue(m_reference_columns, json[QString("referenceColumns")]);
    m_reference_columns_isSet = !json[QString("referenceColumns")].isNull() && m_reference_columns_isValid;

    m_reference_table_isValid = ::OpenAPI::fromJsonValue(m_reference_table, json[QString("referenceTable")]);
    m_reference_table_isSet = !json[QString("referenceTable")].isNull() && m_reference_table_isValid;

    m_table_columns_isValid = ::OpenAPI::fromJsonValue(m_table_columns, json[QString("tableColumns")]);
    m_table_columns_isSet = !json[QString("tableColumns")].isNull() && m_table_columns_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConstraintEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConstraintEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_features.size() > 0) {
        obj.insert(QString("customFeatures"), ::OpenAPI::toJsonValue(m_custom_features));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reference_columns.size() > 0) {
        obj.insert(QString("referenceColumns"), ::OpenAPI::toJsonValue(m_reference_columns));
    }
    if (m_reference_table_isSet) {
        obj.insert(QString("referenceTable"), ::OpenAPI::toJsonValue(m_reference_table));
    }
    if (m_table_columns.size() > 0) {
        obj.insert(QString("tableColumns"), ::OpenAPI::toJsonValue(m_table_columns));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIConstraintEntity::getCustomFeatures() const {
    return m_custom_features;
}
void OAIConstraintEntity::setCustomFeatures(const QMap<QString, QJsonValue> &custom_features) {
    m_custom_features = custom_features;
    m_custom_features_isSet = true;
}

bool OAIConstraintEntity::is_custom_features_Set() const{
    return m_custom_features_isSet;
}

bool OAIConstraintEntity::is_custom_features_Valid() const{
    return m_custom_features_isValid;
}

QString OAIConstraintEntity::getName() const {
    return m_name;
}
void OAIConstraintEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConstraintEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConstraintEntity::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIConstraintEntity::getReferenceColumns() const {
    return m_reference_columns;
}
void OAIConstraintEntity::setReferenceColumns(const QList<QString> &reference_columns) {
    m_reference_columns = reference_columns;
    m_reference_columns_isSet = true;
}

bool OAIConstraintEntity::is_reference_columns_Set() const{
    return m_reference_columns_isSet;
}

bool OAIConstraintEntity::is_reference_columns_Valid() const{
    return m_reference_columns_isValid;
}

QString OAIConstraintEntity::getReferenceTable() const {
    return m_reference_table;
}
void OAIConstraintEntity::setReferenceTable(const QString &reference_table) {
    m_reference_table = reference_table;
    m_reference_table_isSet = true;
}

bool OAIConstraintEntity::is_reference_table_Set() const{
    return m_reference_table_isSet;
}

bool OAIConstraintEntity::is_reference_table_Valid() const{
    return m_reference_table_isValid;
}

QList<QString> OAIConstraintEntity::getTableColumns() const {
    return m_table_columns;
}
void OAIConstraintEntity::setTableColumns(const QList<QString> &table_columns) {
    m_table_columns = table_columns;
    m_table_columns_isSet = true;
}

bool OAIConstraintEntity::is_table_columns_Set() const{
    return m_table_columns_isSet;
}

bool OAIConstraintEntity::is_table_columns_Valid() const{
    return m_table_columns_isValid;
}

QString OAIConstraintEntity::getTableName() const {
    return m_table_name;
}
void OAIConstraintEntity::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIConstraintEntity::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIConstraintEntity::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIConstraintEntity::getType() const {
    return m_type;
}
void OAIConstraintEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConstraintEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConstraintEntity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConstraintEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConstraintEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
