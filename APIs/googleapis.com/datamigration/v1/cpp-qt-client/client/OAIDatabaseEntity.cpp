/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseEntity::OAIDatabaseEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseEntity::OAIDatabaseEntity() {
    this->initializeModel();
}

OAIDatabaseEntity::~OAIDatabaseEntity() {}

void OAIDatabaseEntity::initializeModel() {

    m_database_isSet = false;
    m_database_isValid = false;

    m_database_function_isSet = false;
    m_database_function_isValid = false;

    m_database_package_isSet = false;
    m_database_package_isValid = false;

    m_entity_ddl_isSet = false;
    m_entity_ddl_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_mappings_isSet = false;
    m_mappings_isValid = false;

    m_materialized_view_isSet = false;
    m_materialized_view_isValid = false;

    m_parent_entity_isSet = false;
    m_parent_entity_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_stored_procedure_isSet = false;
    m_stored_procedure_isValid = false;

    m_synonym_isSet = false;
    m_synonym_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_tree_isSet = false;
    m_tree_isValid = false;

    m_udt_isSet = false;
    m_udt_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;
}

void OAIDatabaseEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseEntity::fromJsonObject(QJsonObject json) {

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_database_function_isValid = ::OpenAPI::fromJsonValue(m_database_function, json[QString("databaseFunction")]);
    m_database_function_isSet = !json[QString("databaseFunction")].isNull() && m_database_function_isValid;

    m_database_package_isValid = ::OpenAPI::fromJsonValue(m_database_package, json[QString("databasePackage")]);
    m_database_package_isSet = !json[QString("databasePackage")].isNull() && m_database_package_isValid;

    m_entity_ddl_isValid = ::OpenAPI::fromJsonValue(m_entity_ddl, json[QString("entityDdl")]);
    m_entity_ddl_isSet = !json[QString("entityDdl")].isNull() && m_entity_ddl_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_mappings_isValid = ::OpenAPI::fromJsonValue(m_mappings, json[QString("mappings")]);
    m_mappings_isSet = !json[QString("mappings")].isNull() && m_mappings_isValid;

    m_materialized_view_isValid = ::OpenAPI::fromJsonValue(m_materialized_view, json[QString("materializedView")]);
    m_materialized_view_isSet = !json[QString("materializedView")].isNull() && m_materialized_view_isValid;

    m_parent_entity_isValid = ::OpenAPI::fromJsonValue(m_parent_entity, json[QString("parentEntity")]);
    m_parent_entity_isSet = !json[QString("parentEntity")].isNull() && m_parent_entity_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("shortName")]);
    m_short_name_isSet = !json[QString("shortName")].isNull() && m_short_name_isValid;

    m_stored_procedure_isValid = ::OpenAPI::fromJsonValue(m_stored_procedure, json[QString("storedProcedure")]);
    m_stored_procedure_isSet = !json[QString("storedProcedure")].isNull() && m_stored_procedure_isValid;

    m_synonym_isValid = ::OpenAPI::fromJsonValue(m_synonym, json[QString("synonym")]);
    m_synonym_isSet = !json[QString("synonym")].isNull() && m_synonym_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;

    m_tree_isValid = ::OpenAPI::fromJsonValue(m_tree, json[QString("tree")]);
    m_tree_isSet = !json[QString("tree")].isNull() && m_tree_isValid;

    m_udt_isValid = ::OpenAPI::fromJsonValue(m_udt, json[QString("udt")]);
    m_udt_isSet = !json[QString("udt")].isNull() && m_udt_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;
}

QString OAIDatabaseEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_database.isSet()) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_database_function.isSet()) {
        obj.insert(QString("databaseFunction"), ::OpenAPI::toJsonValue(m_database_function));
    }
    if (m_database_package.isSet()) {
        obj.insert(QString("databasePackage"), ::OpenAPI::toJsonValue(m_database_package));
    }
    if (m_entity_ddl.size() > 0) {
        obj.insert(QString("entityDdl"), ::OpenAPI::toJsonValue(m_entity_ddl));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_mappings.size() > 0) {
        obj.insert(QString("mappings"), ::OpenAPI::toJsonValue(m_mappings));
    }
    if (m_materialized_view.isSet()) {
        obj.insert(QString("materializedView"), ::OpenAPI::toJsonValue(m_materialized_view));
    }
    if (m_parent_entity_isSet) {
        obj.insert(QString("parentEntity"), ::OpenAPI::toJsonValue(m_parent_entity));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_sequence.isSet()) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("shortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_stored_procedure.isSet()) {
        obj.insert(QString("storedProcedure"), ::OpenAPI::toJsonValue(m_stored_procedure));
    }
    if (m_synonym.isSet()) {
        obj.insert(QString("synonym"), ::OpenAPI::toJsonValue(m_synonym));
    }
    if (m_table.isSet()) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_tree_isSet) {
        obj.insert(QString("tree"), ::OpenAPI::toJsonValue(m_tree));
    }
    if (m_udt.isSet()) {
        obj.insert(QString("udt"), ::OpenAPI::toJsonValue(m_udt));
    }
    if (m_view.isSet()) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    return obj;
}

OAIDatabaseInstanceEntity OAIDatabaseEntity::getDatabase() const {
    return m_database;
}
void OAIDatabaseEntity::setDatabase(const OAIDatabaseInstanceEntity &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIDatabaseEntity::is_database_Set() const{
    return m_database_isSet;
}

bool OAIDatabaseEntity::is_database_Valid() const{
    return m_database_isValid;
}

OAIFunctionEntity OAIDatabaseEntity::getDatabaseFunction() const {
    return m_database_function;
}
void OAIDatabaseEntity::setDatabaseFunction(const OAIFunctionEntity &database_function) {
    m_database_function = database_function;
    m_database_function_isSet = true;
}

bool OAIDatabaseEntity::is_database_function_Set() const{
    return m_database_function_isSet;
}

bool OAIDatabaseEntity::is_database_function_Valid() const{
    return m_database_function_isValid;
}

OAIPackageEntity OAIDatabaseEntity::getDatabasePackage() const {
    return m_database_package;
}
void OAIDatabaseEntity::setDatabasePackage(const OAIPackageEntity &database_package) {
    m_database_package = database_package;
    m_database_package_isSet = true;
}

bool OAIDatabaseEntity::is_database_package_Set() const{
    return m_database_package_isSet;
}

bool OAIDatabaseEntity::is_database_package_Valid() const{
    return m_database_package_isValid;
}

QList<OAIEntityDdl> OAIDatabaseEntity::getEntityDdl() const {
    return m_entity_ddl;
}
void OAIDatabaseEntity::setEntityDdl(const QList<OAIEntityDdl> &entity_ddl) {
    m_entity_ddl = entity_ddl;
    m_entity_ddl_isSet = true;
}

bool OAIDatabaseEntity::is_entity_ddl_Set() const{
    return m_entity_ddl_isSet;
}

bool OAIDatabaseEntity::is_entity_ddl_Valid() const{
    return m_entity_ddl_isValid;
}

QString OAIDatabaseEntity::getEntityType() const {
    return m_entity_type;
}
void OAIDatabaseEntity::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIDatabaseEntity::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIDatabaseEntity::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QList<OAIEntityIssue> OAIDatabaseEntity::getIssues() const {
    return m_issues;
}
void OAIDatabaseEntity::setIssues(const QList<OAIEntityIssue> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIDatabaseEntity::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIDatabaseEntity::is_issues_Valid() const{
    return m_issues_isValid;
}

QList<OAIEntityMapping> OAIDatabaseEntity::getMappings() const {
    return m_mappings;
}
void OAIDatabaseEntity::setMappings(const QList<OAIEntityMapping> &mappings) {
    m_mappings = mappings;
    m_mappings_isSet = true;
}

bool OAIDatabaseEntity::is_mappings_Set() const{
    return m_mappings_isSet;
}

bool OAIDatabaseEntity::is_mappings_Valid() const{
    return m_mappings_isValid;
}

OAIMaterializedViewEntity OAIDatabaseEntity::getMaterializedView() const {
    return m_materialized_view;
}
void OAIDatabaseEntity::setMaterializedView(const OAIMaterializedViewEntity &materialized_view) {
    m_materialized_view = materialized_view;
    m_materialized_view_isSet = true;
}

bool OAIDatabaseEntity::is_materialized_view_Set() const{
    return m_materialized_view_isSet;
}

bool OAIDatabaseEntity::is_materialized_view_Valid() const{
    return m_materialized_view_isValid;
}

QString OAIDatabaseEntity::getParentEntity() const {
    return m_parent_entity;
}
void OAIDatabaseEntity::setParentEntity(const QString &parent_entity) {
    m_parent_entity = parent_entity;
    m_parent_entity_isSet = true;
}

bool OAIDatabaseEntity::is_parent_entity_Set() const{
    return m_parent_entity_isSet;
}

bool OAIDatabaseEntity::is_parent_entity_Valid() const{
    return m_parent_entity_isValid;
}

OAISchemaEntity OAIDatabaseEntity::getSchema() const {
    return m_schema;
}
void OAIDatabaseEntity::setSchema(const OAISchemaEntity &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIDatabaseEntity::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIDatabaseEntity::is_schema_Valid() const{
    return m_schema_isValid;
}

OAISequenceEntity OAIDatabaseEntity::getSequence() const {
    return m_sequence;
}
void OAIDatabaseEntity::setSequence(const OAISequenceEntity &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIDatabaseEntity::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIDatabaseEntity::is_sequence_Valid() const{
    return m_sequence_isValid;
}

QString OAIDatabaseEntity::getShortName() const {
    return m_short_name;
}
void OAIDatabaseEntity::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIDatabaseEntity::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIDatabaseEntity::is_short_name_Valid() const{
    return m_short_name_isValid;
}

OAIStoredProcedureEntity OAIDatabaseEntity::getStoredProcedure() const {
    return m_stored_procedure;
}
void OAIDatabaseEntity::setStoredProcedure(const OAIStoredProcedureEntity &stored_procedure) {
    m_stored_procedure = stored_procedure;
    m_stored_procedure_isSet = true;
}

bool OAIDatabaseEntity::is_stored_procedure_Set() const{
    return m_stored_procedure_isSet;
}

bool OAIDatabaseEntity::is_stored_procedure_Valid() const{
    return m_stored_procedure_isValid;
}

OAISynonymEntity OAIDatabaseEntity::getSynonym() const {
    return m_synonym;
}
void OAIDatabaseEntity::setSynonym(const OAISynonymEntity &synonym) {
    m_synonym = synonym;
    m_synonym_isSet = true;
}

bool OAIDatabaseEntity::is_synonym_Set() const{
    return m_synonym_isSet;
}

bool OAIDatabaseEntity::is_synonym_Valid() const{
    return m_synonym_isValid;
}

OAITableEntity OAIDatabaseEntity::getTable() const {
    return m_table;
}
void OAIDatabaseEntity::setTable(const OAITableEntity &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIDatabaseEntity::is_table_Set() const{
    return m_table_isSet;
}

bool OAIDatabaseEntity::is_table_Valid() const{
    return m_table_isValid;
}

QString OAIDatabaseEntity::getTree() const {
    return m_tree;
}
void OAIDatabaseEntity::setTree(const QString &tree) {
    m_tree = tree;
    m_tree_isSet = true;
}

bool OAIDatabaseEntity::is_tree_Set() const{
    return m_tree_isSet;
}

bool OAIDatabaseEntity::is_tree_Valid() const{
    return m_tree_isValid;
}

OAIUDTEntity OAIDatabaseEntity::getUdt() const {
    return m_udt;
}
void OAIDatabaseEntity::setUdt(const OAIUDTEntity &udt) {
    m_udt = udt;
    m_udt_isSet = true;
}

bool OAIDatabaseEntity::is_udt_Set() const{
    return m_udt_isSet;
}

bool OAIDatabaseEntity::is_udt_Valid() const{
    return m_udt_isValid;
}

OAIViewEntity OAIDatabaseEntity::getView() const {
    return m_view;
}
void OAIDatabaseEntity::setView(const OAIViewEntity &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAIDatabaseEntity::is_view_Set() const{
    return m_view_isSet;
}

bool OAIDatabaseEntity::is_view_Valid() const{
    return m_view_isValid;
}

bool OAIDatabaseEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_function.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_ddl.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_materialized_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_procedure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_synonym.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tree_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_view.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
