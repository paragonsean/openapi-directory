/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValueTransformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValueTransformation::OAIValueTransformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValueTransformation::OAIValueTransformation() {
    this->initializeModel();
}

OAIValueTransformation::~OAIValueTransformation() {}

void OAIValueTransformation::initializeModel() {

    m_apply_hash_isSet = false;
    m_apply_hash_isValid = false;

    m_assign_max_value_isSet = false;
    m_assign_max_value_isValid = false;

    m_assign_min_value_isSet = false;
    m_assign_min_value_isValid = false;

    m_assign_null_isSet = false;
    m_assign_null_isValid = false;

    m_assign_specific_value_isSet = false;
    m_assign_specific_value_isValid = false;

    m_double_comparison_isSet = false;
    m_double_comparison_isValid = false;

    m_int_comparison_isSet = false;
    m_int_comparison_isValid = false;

    m_is_null_isSet = false;
    m_is_null_isValid = false;

    m_round_scale_isSet = false;
    m_round_scale_isValid = false;

    m_value_list_isSet = false;
    m_value_list_isValid = false;
}

void OAIValueTransformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValueTransformation::fromJsonObject(QJsonObject json) {

    m_apply_hash_isValid = ::OpenAPI::fromJsonValue(m_apply_hash, json[QString("applyHash")]);
    m_apply_hash_isSet = !json[QString("applyHash")].isNull() && m_apply_hash_isValid;

    m_assign_max_value_isValid = ::OpenAPI::fromJsonValue(m_assign_max_value, json[QString("assignMaxValue")]);
    m_assign_max_value_isSet = !json[QString("assignMaxValue")].isNull() && m_assign_max_value_isValid;

    m_assign_min_value_isValid = ::OpenAPI::fromJsonValue(m_assign_min_value, json[QString("assignMinValue")]);
    m_assign_min_value_isSet = !json[QString("assignMinValue")].isNull() && m_assign_min_value_isValid;

    m_assign_null_isValid = ::OpenAPI::fromJsonValue(m_assign_null, json[QString("assignNull")]);
    m_assign_null_isSet = !json[QString("assignNull")].isNull() && m_assign_null_isValid;

    m_assign_specific_value_isValid = ::OpenAPI::fromJsonValue(m_assign_specific_value, json[QString("assignSpecificValue")]);
    m_assign_specific_value_isSet = !json[QString("assignSpecificValue")].isNull() && m_assign_specific_value_isValid;

    m_double_comparison_isValid = ::OpenAPI::fromJsonValue(m_double_comparison, json[QString("doubleComparison")]);
    m_double_comparison_isSet = !json[QString("doubleComparison")].isNull() && m_double_comparison_isValid;

    m_int_comparison_isValid = ::OpenAPI::fromJsonValue(m_int_comparison, json[QString("intComparison")]);
    m_int_comparison_isSet = !json[QString("intComparison")].isNull() && m_int_comparison_isValid;

    m_is_null_isValid = ::OpenAPI::fromJsonValue(m_is_null, json[QString("isNull")]);
    m_is_null_isSet = !json[QString("isNull")].isNull() && m_is_null_isValid;

    m_round_scale_isValid = ::OpenAPI::fromJsonValue(m_round_scale, json[QString("roundScale")]);
    m_round_scale_isSet = !json[QString("roundScale")].isNull() && m_round_scale_isValid;

    m_value_list_isValid = ::OpenAPI::fromJsonValue(m_value_list, json[QString("valueList")]);
    m_value_list_isSet = !json[QString("valueList")].isNull() && m_value_list_isValid;
}

QString OAIValueTransformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValueTransformation::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_hash.isSet()) {
        obj.insert(QString("applyHash"), ::OpenAPI::toJsonValue(m_apply_hash));
    }
    if (m_assign_max_value_isSet) {
        obj.insert(QString("assignMaxValue"), ::OpenAPI::toJsonValue(m_assign_max_value));
    }
    if (m_assign_min_value_isSet) {
        obj.insert(QString("assignMinValue"), ::OpenAPI::toJsonValue(m_assign_min_value));
    }
    if (m_assign_null_isSet) {
        obj.insert(QString("assignNull"), ::OpenAPI::toJsonValue(m_assign_null));
    }
    if (m_assign_specific_value.isSet()) {
        obj.insert(QString("assignSpecificValue"), ::OpenAPI::toJsonValue(m_assign_specific_value));
    }
    if (m_double_comparison.isSet()) {
        obj.insert(QString("doubleComparison"), ::OpenAPI::toJsonValue(m_double_comparison));
    }
    if (m_int_comparison.isSet()) {
        obj.insert(QString("intComparison"), ::OpenAPI::toJsonValue(m_int_comparison));
    }
    if (m_is_null_isSet) {
        obj.insert(QString("isNull"), ::OpenAPI::toJsonValue(m_is_null));
    }
    if (m_round_scale.isSet()) {
        obj.insert(QString("roundScale"), ::OpenAPI::toJsonValue(m_round_scale));
    }
    if (m_value_list.isSet()) {
        obj.insert(QString("valueList"), ::OpenAPI::toJsonValue(m_value_list));
    }
    return obj;
}

OAIApplyHash OAIValueTransformation::getApplyHash() const {
    return m_apply_hash;
}
void OAIValueTransformation::setApplyHash(const OAIApplyHash &apply_hash) {
    m_apply_hash = apply_hash;
    m_apply_hash_isSet = true;
}

bool OAIValueTransformation::is_apply_hash_Set() const{
    return m_apply_hash_isSet;
}

bool OAIValueTransformation::is_apply_hash_Valid() const{
    return m_apply_hash_isValid;
}

OAIObject OAIValueTransformation::getAssignMaxValue() const {
    return m_assign_max_value;
}
void OAIValueTransformation::setAssignMaxValue(const OAIObject &assign_max_value) {
    m_assign_max_value = assign_max_value;
    m_assign_max_value_isSet = true;
}

bool OAIValueTransformation::is_assign_max_value_Set() const{
    return m_assign_max_value_isSet;
}

bool OAIValueTransformation::is_assign_max_value_Valid() const{
    return m_assign_max_value_isValid;
}

OAIObject OAIValueTransformation::getAssignMinValue() const {
    return m_assign_min_value;
}
void OAIValueTransformation::setAssignMinValue(const OAIObject &assign_min_value) {
    m_assign_min_value = assign_min_value;
    m_assign_min_value_isSet = true;
}

bool OAIValueTransformation::is_assign_min_value_Set() const{
    return m_assign_min_value_isSet;
}

bool OAIValueTransformation::is_assign_min_value_Valid() const{
    return m_assign_min_value_isValid;
}

OAIObject OAIValueTransformation::getAssignNull() const {
    return m_assign_null;
}
void OAIValueTransformation::setAssignNull(const OAIObject &assign_null) {
    m_assign_null = assign_null;
    m_assign_null_isSet = true;
}

bool OAIValueTransformation::is_assign_null_Set() const{
    return m_assign_null_isSet;
}

bool OAIValueTransformation::is_assign_null_Valid() const{
    return m_assign_null_isValid;
}

OAIAssignSpecificValue OAIValueTransformation::getAssignSpecificValue() const {
    return m_assign_specific_value;
}
void OAIValueTransformation::setAssignSpecificValue(const OAIAssignSpecificValue &assign_specific_value) {
    m_assign_specific_value = assign_specific_value;
    m_assign_specific_value_isSet = true;
}

bool OAIValueTransformation::is_assign_specific_value_Set() const{
    return m_assign_specific_value_isSet;
}

bool OAIValueTransformation::is_assign_specific_value_Valid() const{
    return m_assign_specific_value_isValid;
}

OAIDoubleComparisonFilter OAIValueTransformation::getDoubleComparison() const {
    return m_double_comparison;
}
void OAIValueTransformation::setDoubleComparison(const OAIDoubleComparisonFilter &double_comparison) {
    m_double_comparison = double_comparison;
    m_double_comparison_isSet = true;
}

bool OAIValueTransformation::is_double_comparison_Set() const{
    return m_double_comparison_isSet;
}

bool OAIValueTransformation::is_double_comparison_Valid() const{
    return m_double_comparison_isValid;
}

OAIIntComparisonFilter OAIValueTransformation::getIntComparison() const {
    return m_int_comparison;
}
void OAIValueTransformation::setIntComparison(const OAIIntComparisonFilter &int_comparison) {
    m_int_comparison = int_comparison;
    m_int_comparison_isSet = true;
}

bool OAIValueTransformation::is_int_comparison_Set() const{
    return m_int_comparison_isSet;
}

bool OAIValueTransformation::is_int_comparison_Valid() const{
    return m_int_comparison_isValid;
}

OAIObject OAIValueTransformation::getIsNull() const {
    return m_is_null;
}
void OAIValueTransformation::setIsNull(const OAIObject &is_null) {
    m_is_null = is_null;
    m_is_null_isSet = true;
}

bool OAIValueTransformation::is_is_null_Set() const{
    return m_is_null_isSet;
}

bool OAIValueTransformation::is_is_null_Valid() const{
    return m_is_null_isValid;
}

OAIRoundToScale OAIValueTransformation::getRoundScale() const {
    return m_round_scale;
}
void OAIValueTransformation::setRoundScale(const OAIRoundToScale &round_scale) {
    m_round_scale = round_scale;
    m_round_scale_isSet = true;
}

bool OAIValueTransformation::is_round_scale_Set() const{
    return m_round_scale_isSet;
}

bool OAIValueTransformation::is_round_scale_Valid() const{
    return m_round_scale_isValid;
}

OAIValueListFilter OAIValueTransformation::getValueList() const {
    return m_value_list;
}
void OAIValueTransformation::setValueList(const OAIValueListFilter &value_list) {
    m_value_list = value_list;
    m_value_list_isSet = true;
}

bool OAIValueTransformation::is_value_list_Set() const{
    return m_value_list_isSet;
}

bool OAIValueTransformation::is_value_list_Valid() const{
    return m_value_list_isValid;
}

bool OAIValueTransformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_hash.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assign_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assign_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assign_null_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assign_specific_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_comparison.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_int_comparison.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_null_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_round_scale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValueTransformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
