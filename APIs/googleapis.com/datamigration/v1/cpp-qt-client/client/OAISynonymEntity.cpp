/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISynonymEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISynonymEntity::OAISynonymEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISynonymEntity::OAISynonymEntity() {
    this->initializeModel();
}

OAISynonymEntity::~OAISynonymEntity() {}

void OAISynonymEntity::initializeModel() {

    m_custom_features_isSet = false;
    m_custom_features_isValid = false;

    m_source_entity_isSet = false;
    m_source_entity_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;
}

void OAISynonymEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISynonymEntity::fromJsonObject(QJsonObject json) {

    m_custom_features_isValid = ::OpenAPI::fromJsonValue(m_custom_features, json[QString("customFeatures")]);
    m_custom_features_isSet = !json[QString("customFeatures")].isNull() && m_custom_features_isValid;

    m_source_entity_isValid = ::OpenAPI::fromJsonValue(m_source_entity, json[QString("sourceEntity")]);
    m_source_entity_isSet = !json[QString("sourceEntity")].isNull() && m_source_entity_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;
}

QString OAISynonymEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISynonymEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_features.size() > 0) {
        obj.insert(QString("customFeatures"), ::OpenAPI::toJsonValue(m_custom_features));
    }
    if (m_source_entity_isSet) {
        obj.insert(QString("sourceEntity"), ::OpenAPI::toJsonValue(m_source_entity));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    return obj;
}

QMap<QString, QJsonValue> OAISynonymEntity::getCustomFeatures() const {
    return m_custom_features;
}
void OAISynonymEntity::setCustomFeatures(const QMap<QString, QJsonValue> &custom_features) {
    m_custom_features = custom_features;
    m_custom_features_isSet = true;
}

bool OAISynonymEntity::is_custom_features_Set() const{
    return m_custom_features_isSet;
}

bool OAISynonymEntity::is_custom_features_Valid() const{
    return m_custom_features_isValid;
}

QString OAISynonymEntity::getSourceEntity() const {
    return m_source_entity;
}
void OAISynonymEntity::setSourceEntity(const QString &source_entity) {
    m_source_entity = source_entity;
    m_source_entity_isSet = true;
}

bool OAISynonymEntity::is_source_entity_Set() const{
    return m_source_entity_isSet;
}

bool OAISynonymEntity::is_source_entity_Valid() const{
    return m_source_entity_isValid;
}

QString OAISynonymEntity::getSourceType() const {
    return m_source_type;
}
void OAISynonymEntity::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAISynonymEntity::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAISynonymEntity::is_source_type_Valid() const{
    return m_source_type_isValid;
}

bool OAISynonymEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISynonymEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
