/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappingRuleFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappingRuleFilter::OAIMappingRuleFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappingRuleFilter::OAIMappingRuleFilter() {
    this->initializeModel();
}

OAIMappingRuleFilter::~OAIMappingRuleFilter() {}

void OAIMappingRuleFilter::initializeModel() {

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_entity_name_contains_isSet = false;
    m_entity_name_contains_isValid = false;

    m_entity_name_prefix_isSet = false;
    m_entity_name_prefix_isValid = false;

    m_entity_name_suffix_isSet = false;
    m_entity_name_suffix_isValid = false;

    m_parent_entity_isSet = false;
    m_parent_entity_isValid = false;
}

void OAIMappingRuleFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappingRuleFilter::fromJsonObject(QJsonObject json) {

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_entity_name_contains_isValid = ::OpenAPI::fromJsonValue(m_entity_name_contains, json[QString("entityNameContains")]);
    m_entity_name_contains_isSet = !json[QString("entityNameContains")].isNull() && m_entity_name_contains_isValid;

    m_entity_name_prefix_isValid = ::OpenAPI::fromJsonValue(m_entity_name_prefix, json[QString("entityNamePrefix")]);
    m_entity_name_prefix_isSet = !json[QString("entityNamePrefix")].isNull() && m_entity_name_prefix_isValid;

    m_entity_name_suffix_isValid = ::OpenAPI::fromJsonValue(m_entity_name_suffix, json[QString("entityNameSuffix")]);
    m_entity_name_suffix_isSet = !json[QString("entityNameSuffix")].isNull() && m_entity_name_suffix_isValid;

    m_parent_entity_isValid = ::OpenAPI::fromJsonValue(m_parent_entity, json[QString("parentEntity")]);
    m_parent_entity_isSet = !json[QString("parentEntity")].isNull() && m_parent_entity_isValid;
}

QString OAIMappingRuleFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappingRuleFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_entity_name_contains_isSet) {
        obj.insert(QString("entityNameContains"), ::OpenAPI::toJsonValue(m_entity_name_contains));
    }
    if (m_entity_name_prefix_isSet) {
        obj.insert(QString("entityNamePrefix"), ::OpenAPI::toJsonValue(m_entity_name_prefix));
    }
    if (m_entity_name_suffix_isSet) {
        obj.insert(QString("entityNameSuffix"), ::OpenAPI::toJsonValue(m_entity_name_suffix));
    }
    if (m_parent_entity_isSet) {
        obj.insert(QString("parentEntity"), ::OpenAPI::toJsonValue(m_parent_entity));
    }
    return obj;
}

QList<QString> OAIMappingRuleFilter::getEntities() const {
    return m_entities;
}
void OAIMappingRuleFilter::setEntities(const QList<QString> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIMappingRuleFilter::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIMappingRuleFilter::is_entities_Valid() const{
    return m_entities_isValid;
}

QString OAIMappingRuleFilter::getEntityNameContains() const {
    return m_entity_name_contains;
}
void OAIMappingRuleFilter::setEntityNameContains(const QString &entity_name_contains) {
    m_entity_name_contains = entity_name_contains;
    m_entity_name_contains_isSet = true;
}

bool OAIMappingRuleFilter::is_entity_name_contains_Set() const{
    return m_entity_name_contains_isSet;
}

bool OAIMappingRuleFilter::is_entity_name_contains_Valid() const{
    return m_entity_name_contains_isValid;
}

QString OAIMappingRuleFilter::getEntityNamePrefix() const {
    return m_entity_name_prefix;
}
void OAIMappingRuleFilter::setEntityNamePrefix(const QString &entity_name_prefix) {
    m_entity_name_prefix = entity_name_prefix;
    m_entity_name_prefix_isSet = true;
}

bool OAIMappingRuleFilter::is_entity_name_prefix_Set() const{
    return m_entity_name_prefix_isSet;
}

bool OAIMappingRuleFilter::is_entity_name_prefix_Valid() const{
    return m_entity_name_prefix_isValid;
}

QString OAIMappingRuleFilter::getEntityNameSuffix() const {
    return m_entity_name_suffix;
}
void OAIMappingRuleFilter::setEntityNameSuffix(const QString &entity_name_suffix) {
    m_entity_name_suffix = entity_name_suffix;
    m_entity_name_suffix_isSet = true;
}

bool OAIMappingRuleFilter::is_entity_name_suffix_Set() const{
    return m_entity_name_suffix_isSet;
}

bool OAIMappingRuleFilter::is_entity_name_suffix_Valid() const{
    return m_entity_name_suffix_isValid;
}

QString OAIMappingRuleFilter::getParentEntity() const {
    return m_parent_entity;
}
void OAIMappingRuleFilter::setParentEntity(const QString &parent_entity) {
    m_parent_entity = parent_entity;
    m_parent_entity_isSet = true;
}

bool OAIMappingRuleFilter::is_parent_entity_Set() const{
    return m_parent_entity_isSet;
}

bool OAIMappingRuleFilter::is_parent_entity_Valid() const{
    return m_parent_entity_isValid;
}

bool OAIMappingRuleFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_name_contains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_name_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_name_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_entity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappingRuleFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
