/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceNumericFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceNumericFilter::OAISourceNumericFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceNumericFilter::OAISourceNumericFilter() {
    this->initializeModel();
}

OAISourceNumericFilter::~OAISourceNumericFilter() {}

void OAISourceNumericFilter::initializeModel() {

    m_numeric_filter_option_isSet = false;
    m_numeric_filter_option_isValid = false;

    m_source_max_precision_filter_isSet = false;
    m_source_max_precision_filter_isValid = false;

    m_source_max_scale_filter_isSet = false;
    m_source_max_scale_filter_isValid = false;

    m_source_min_precision_filter_isSet = false;
    m_source_min_precision_filter_isValid = false;

    m_source_min_scale_filter_isSet = false;
    m_source_min_scale_filter_isValid = false;
}

void OAISourceNumericFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceNumericFilter::fromJsonObject(QJsonObject json) {

    m_numeric_filter_option_isValid = ::OpenAPI::fromJsonValue(m_numeric_filter_option, json[QString("numericFilterOption")]);
    m_numeric_filter_option_isSet = !json[QString("numericFilterOption")].isNull() && m_numeric_filter_option_isValid;

    m_source_max_precision_filter_isValid = ::OpenAPI::fromJsonValue(m_source_max_precision_filter, json[QString("sourceMaxPrecisionFilter")]);
    m_source_max_precision_filter_isSet = !json[QString("sourceMaxPrecisionFilter")].isNull() && m_source_max_precision_filter_isValid;

    m_source_max_scale_filter_isValid = ::OpenAPI::fromJsonValue(m_source_max_scale_filter, json[QString("sourceMaxScaleFilter")]);
    m_source_max_scale_filter_isSet = !json[QString("sourceMaxScaleFilter")].isNull() && m_source_max_scale_filter_isValid;

    m_source_min_precision_filter_isValid = ::OpenAPI::fromJsonValue(m_source_min_precision_filter, json[QString("sourceMinPrecisionFilter")]);
    m_source_min_precision_filter_isSet = !json[QString("sourceMinPrecisionFilter")].isNull() && m_source_min_precision_filter_isValid;

    m_source_min_scale_filter_isValid = ::OpenAPI::fromJsonValue(m_source_min_scale_filter, json[QString("sourceMinScaleFilter")]);
    m_source_min_scale_filter_isSet = !json[QString("sourceMinScaleFilter")].isNull() && m_source_min_scale_filter_isValid;
}

QString OAISourceNumericFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceNumericFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_numeric_filter_option_isSet) {
        obj.insert(QString("numericFilterOption"), ::OpenAPI::toJsonValue(m_numeric_filter_option));
    }
    if (m_source_max_precision_filter_isSet) {
        obj.insert(QString("sourceMaxPrecisionFilter"), ::OpenAPI::toJsonValue(m_source_max_precision_filter));
    }
    if (m_source_max_scale_filter_isSet) {
        obj.insert(QString("sourceMaxScaleFilter"), ::OpenAPI::toJsonValue(m_source_max_scale_filter));
    }
    if (m_source_min_precision_filter_isSet) {
        obj.insert(QString("sourceMinPrecisionFilter"), ::OpenAPI::toJsonValue(m_source_min_precision_filter));
    }
    if (m_source_min_scale_filter_isSet) {
        obj.insert(QString("sourceMinScaleFilter"), ::OpenAPI::toJsonValue(m_source_min_scale_filter));
    }
    return obj;
}

QString OAISourceNumericFilter::getNumericFilterOption() const {
    return m_numeric_filter_option;
}
void OAISourceNumericFilter::setNumericFilterOption(const QString &numeric_filter_option) {
    m_numeric_filter_option = numeric_filter_option;
    m_numeric_filter_option_isSet = true;
}

bool OAISourceNumericFilter::is_numeric_filter_option_Set() const{
    return m_numeric_filter_option_isSet;
}

bool OAISourceNumericFilter::is_numeric_filter_option_Valid() const{
    return m_numeric_filter_option_isValid;
}

qint32 OAISourceNumericFilter::getSourceMaxPrecisionFilter() const {
    return m_source_max_precision_filter;
}
void OAISourceNumericFilter::setSourceMaxPrecisionFilter(const qint32 &source_max_precision_filter) {
    m_source_max_precision_filter = source_max_precision_filter;
    m_source_max_precision_filter_isSet = true;
}

bool OAISourceNumericFilter::is_source_max_precision_filter_Set() const{
    return m_source_max_precision_filter_isSet;
}

bool OAISourceNumericFilter::is_source_max_precision_filter_Valid() const{
    return m_source_max_precision_filter_isValid;
}

qint32 OAISourceNumericFilter::getSourceMaxScaleFilter() const {
    return m_source_max_scale_filter;
}
void OAISourceNumericFilter::setSourceMaxScaleFilter(const qint32 &source_max_scale_filter) {
    m_source_max_scale_filter = source_max_scale_filter;
    m_source_max_scale_filter_isSet = true;
}

bool OAISourceNumericFilter::is_source_max_scale_filter_Set() const{
    return m_source_max_scale_filter_isSet;
}

bool OAISourceNumericFilter::is_source_max_scale_filter_Valid() const{
    return m_source_max_scale_filter_isValid;
}

qint32 OAISourceNumericFilter::getSourceMinPrecisionFilter() const {
    return m_source_min_precision_filter;
}
void OAISourceNumericFilter::setSourceMinPrecisionFilter(const qint32 &source_min_precision_filter) {
    m_source_min_precision_filter = source_min_precision_filter;
    m_source_min_precision_filter_isSet = true;
}

bool OAISourceNumericFilter::is_source_min_precision_filter_Set() const{
    return m_source_min_precision_filter_isSet;
}

bool OAISourceNumericFilter::is_source_min_precision_filter_Valid() const{
    return m_source_min_precision_filter_isValid;
}

qint32 OAISourceNumericFilter::getSourceMinScaleFilter() const {
    return m_source_min_scale_filter;
}
void OAISourceNumericFilter::setSourceMinScaleFilter(const qint32 &source_min_scale_filter) {
    m_source_min_scale_filter = source_min_scale_filter;
    m_source_min_scale_filter_isSet = true;
}

bool OAISourceNumericFilter::is_source_min_scale_filter_Set() const{
    return m_source_min_scale_filter_isSet;
}

bool OAISourceNumericFilter::is_source_min_scale_filter_Valid() const{
    return m_source_min_scale_filter_isValid;
}

bool OAISourceNumericFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_numeric_filter_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_max_precision_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_max_scale_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_min_precision_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_min_scale_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceNumericFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
