/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatabaseEntity.h
 *
 * The base entity type for all the database related entities. The message contains the entity name, the name of its parent, the entity type, and the specific details per entity type.
 */

#ifndef OAIDatabaseEntity_H
#define OAIDatabaseEntity_H

#include <QJsonObject>

#include "OAIDatabaseInstanceEntity.h"
#include "OAIEntityDdl.h"
#include "OAIEntityIssue.h"
#include "OAIEntityMapping.h"
#include "OAIFunctionEntity.h"
#include "OAIMaterializedViewEntity.h"
#include "OAIPackageEntity.h"
#include "OAISchemaEntity.h"
#include "OAISequenceEntity.h"
#include "OAIStoredProcedureEntity.h"
#include "OAISynonymEntity.h"
#include "OAITableEntity.h"
#include "OAIUDTEntity.h"
#include "OAIViewEntity.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDatabaseInstanceEntity;
class OAIFunctionEntity;
class OAIPackageEntity;
class OAIEntityDdl;
class OAIEntityIssue;
class OAIEntityMapping;
class OAIMaterializedViewEntity;
class OAISchemaEntity;
class OAISequenceEntity;
class OAIStoredProcedureEntity;
class OAISynonymEntity;
class OAITableEntity;
class OAIUDTEntity;
class OAIViewEntity;

class OAIDatabaseEntity : public OAIObject {
public:
    OAIDatabaseEntity();
    OAIDatabaseEntity(QString json);
    ~OAIDatabaseEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDatabaseInstanceEntity getDatabase() const;
    void setDatabase(const OAIDatabaseInstanceEntity &database);
    bool is_database_Set() const;
    bool is_database_Valid() const;

    OAIFunctionEntity getDatabaseFunction() const;
    void setDatabaseFunction(const OAIFunctionEntity &database_function);
    bool is_database_function_Set() const;
    bool is_database_function_Valid() const;

    OAIPackageEntity getDatabasePackage() const;
    void setDatabasePackage(const OAIPackageEntity &database_package);
    bool is_database_package_Set() const;
    bool is_database_package_Valid() const;

    QList<OAIEntityDdl> getEntityDdl() const;
    void setEntityDdl(const QList<OAIEntityDdl> &entity_ddl);
    bool is_entity_ddl_Set() const;
    bool is_entity_ddl_Valid() const;

    QString getEntityType() const;
    void setEntityType(const QString &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QList<OAIEntityIssue> getIssues() const;
    void setIssues(const QList<OAIEntityIssue> &issues);
    bool is_issues_Set() const;
    bool is_issues_Valid() const;

    QList<OAIEntityMapping> getMappings() const;
    void setMappings(const QList<OAIEntityMapping> &mappings);
    bool is_mappings_Set() const;
    bool is_mappings_Valid() const;

    OAIMaterializedViewEntity getMaterializedView() const;
    void setMaterializedView(const OAIMaterializedViewEntity &materialized_view);
    bool is_materialized_view_Set() const;
    bool is_materialized_view_Valid() const;

    QString getParentEntity() const;
    void setParentEntity(const QString &parent_entity);
    bool is_parent_entity_Set() const;
    bool is_parent_entity_Valid() const;

    OAISchemaEntity getSchema() const;
    void setSchema(const OAISchemaEntity &schema);
    bool is_schema_Set() const;
    bool is_schema_Valid() const;

    OAISequenceEntity getSequence() const;
    void setSequence(const OAISequenceEntity &sequence);
    bool is_sequence_Set() const;
    bool is_sequence_Valid() const;

    QString getShortName() const;
    void setShortName(const QString &short_name);
    bool is_short_name_Set() const;
    bool is_short_name_Valid() const;

    OAIStoredProcedureEntity getStoredProcedure() const;
    void setStoredProcedure(const OAIStoredProcedureEntity &stored_procedure);
    bool is_stored_procedure_Set() const;
    bool is_stored_procedure_Valid() const;

    OAISynonymEntity getSynonym() const;
    void setSynonym(const OAISynonymEntity &synonym);
    bool is_synonym_Set() const;
    bool is_synonym_Valid() const;

    OAITableEntity getTable() const;
    void setTable(const OAITableEntity &table);
    bool is_table_Set() const;
    bool is_table_Valid() const;

    QString getTree() const;
    void setTree(const QString &tree);
    bool is_tree_Set() const;
    bool is_tree_Valid() const;

    OAIUDTEntity getUdt() const;
    void setUdt(const OAIUDTEntity &udt);
    bool is_udt_Set() const;
    bool is_udt_Valid() const;

    OAIViewEntity getView() const;
    void setView(const OAIViewEntity &view);
    bool is_view_Set() const;
    bool is_view_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDatabaseInstanceEntity m_database;
    bool m_database_isSet;
    bool m_database_isValid;

    OAIFunctionEntity m_database_function;
    bool m_database_function_isSet;
    bool m_database_function_isValid;

    OAIPackageEntity m_database_package;
    bool m_database_package_isSet;
    bool m_database_package_isValid;

    QList<OAIEntityDdl> m_entity_ddl;
    bool m_entity_ddl_isSet;
    bool m_entity_ddl_isValid;

    QString m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QList<OAIEntityIssue> m_issues;
    bool m_issues_isSet;
    bool m_issues_isValid;

    QList<OAIEntityMapping> m_mappings;
    bool m_mappings_isSet;
    bool m_mappings_isValid;

    OAIMaterializedViewEntity m_materialized_view;
    bool m_materialized_view_isSet;
    bool m_materialized_view_isValid;

    QString m_parent_entity;
    bool m_parent_entity_isSet;
    bool m_parent_entity_isValid;

    OAISchemaEntity m_schema;
    bool m_schema_isSet;
    bool m_schema_isValid;

    OAISequenceEntity m_sequence;
    bool m_sequence_isSet;
    bool m_sequence_isValid;

    QString m_short_name;
    bool m_short_name_isSet;
    bool m_short_name_isValid;

    OAIStoredProcedureEntity m_stored_procedure;
    bool m_stored_procedure_isSet;
    bool m_stored_procedure_isValid;

    OAISynonymEntity m_synonym;
    bool m_synonym_isSet;
    bool m_synonym_isValid;

    OAITableEntity m_table;
    bool m_table_isSet;
    bool m_table_isValid;

    QString m_tree;
    bool m_tree_isSet;
    bool m_tree_isValid;

    OAIUDTEntity m_udt;
    bool m_udt_isSet;
    bool m_udt_isValid;

    OAIViewEntity m_view;
    bool m_view_isSet;
    bool m_view_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatabaseEntity)

#endif // OAIDatabaseEntity_H
