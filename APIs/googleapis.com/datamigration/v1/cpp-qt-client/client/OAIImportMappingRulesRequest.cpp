/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportMappingRulesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportMappingRulesRequest::OAIImportMappingRulesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportMappingRulesRequest::OAIImportMappingRulesRequest() {
    this->initializeModel();
}

OAIImportMappingRulesRequest::~OAIImportMappingRulesRequest() {}

void OAIImportMappingRulesRequest::initializeModel() {

    m_auto_commit_isSet = false;
    m_auto_commit_isValid = false;

    m_rules_files_isSet = false;
    m_rules_files_isValid = false;

    m_rules_format_isSet = false;
    m_rules_format_isValid = false;
}

void OAIImportMappingRulesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportMappingRulesRequest::fromJsonObject(QJsonObject json) {

    m_auto_commit_isValid = ::OpenAPI::fromJsonValue(m_auto_commit, json[QString("autoCommit")]);
    m_auto_commit_isSet = !json[QString("autoCommit")].isNull() && m_auto_commit_isValid;

    m_rules_files_isValid = ::OpenAPI::fromJsonValue(m_rules_files, json[QString("rulesFiles")]);
    m_rules_files_isSet = !json[QString("rulesFiles")].isNull() && m_rules_files_isValid;

    m_rules_format_isValid = ::OpenAPI::fromJsonValue(m_rules_format, json[QString("rulesFormat")]);
    m_rules_format_isSet = !json[QString("rulesFormat")].isNull() && m_rules_format_isValid;
}

QString OAIImportMappingRulesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportMappingRulesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_commit_isSet) {
        obj.insert(QString("autoCommit"), ::OpenAPI::toJsonValue(m_auto_commit));
    }
    if (m_rules_files.size() > 0) {
        obj.insert(QString("rulesFiles"), ::OpenAPI::toJsonValue(m_rules_files));
    }
    if (m_rules_format_isSet) {
        obj.insert(QString("rulesFormat"), ::OpenAPI::toJsonValue(m_rules_format));
    }
    return obj;
}

bool OAIImportMappingRulesRequest::isAutoCommit() const {
    return m_auto_commit;
}
void OAIImportMappingRulesRequest::setAutoCommit(const bool &auto_commit) {
    m_auto_commit = auto_commit;
    m_auto_commit_isSet = true;
}

bool OAIImportMappingRulesRequest::is_auto_commit_Set() const{
    return m_auto_commit_isSet;
}

bool OAIImportMappingRulesRequest::is_auto_commit_Valid() const{
    return m_auto_commit_isValid;
}

QList<OAIRulesFile> OAIImportMappingRulesRequest::getRulesFiles() const {
    return m_rules_files;
}
void OAIImportMappingRulesRequest::setRulesFiles(const QList<OAIRulesFile> &rules_files) {
    m_rules_files = rules_files;
    m_rules_files_isSet = true;
}

bool OAIImportMappingRulesRequest::is_rules_files_Set() const{
    return m_rules_files_isSet;
}

bool OAIImportMappingRulesRequest::is_rules_files_Valid() const{
    return m_rules_files_isValid;
}

QString OAIImportMappingRulesRequest::getRulesFormat() const {
    return m_rules_format;
}
void OAIImportMappingRulesRequest::setRulesFormat(const QString &rules_format) {
    m_rules_format = rules_format;
    m_rules_format_isSet = true;
}

bool OAIImportMappingRulesRequest::is_rules_format_Set() const{
    return m_rules_format_isSet;
}

bool OAIImportMappingRulesRequest::is_rules_format_Valid() const{
    return m_rules_format_isValid;
}

bool OAIImportMappingRulesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportMappingRulesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
