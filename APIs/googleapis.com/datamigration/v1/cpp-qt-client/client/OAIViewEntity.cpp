/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViewEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViewEntity::OAIViewEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViewEntity::OAIViewEntity() {
    this->initializeModel();
}

OAIViewEntity::~OAIViewEntity() {}

void OAIViewEntity::initializeModel() {

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_custom_features_isSet = false;
    m_custom_features_isValid = false;

    m_sql_code_isSet = false;
    m_sql_code_isValid = false;
}

void OAIViewEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIViewEntity::fromJsonObject(QJsonObject json) {

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_custom_features_isValid = ::OpenAPI::fromJsonValue(m_custom_features, json[QString("customFeatures")]);
    m_custom_features_isSet = !json[QString("customFeatures")].isNull() && m_custom_features_isValid;

    m_sql_code_isValid = ::OpenAPI::fromJsonValue(m_sql_code, json[QString("sqlCode")]);
    m_sql_code_isSet = !json[QString("sqlCode")].isNull() && m_sql_code_isValid;
}

QString OAIViewEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIViewEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_constraints.size() > 0) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_custom_features.size() > 0) {
        obj.insert(QString("customFeatures"), ::OpenAPI::toJsonValue(m_custom_features));
    }
    if (m_sql_code_isSet) {
        obj.insert(QString("sqlCode"), ::OpenAPI::toJsonValue(m_sql_code));
    }
    return obj;
}

QList<OAIConstraintEntity> OAIViewEntity::getConstraints() const {
    return m_constraints;
}
void OAIViewEntity::setConstraints(const QList<OAIConstraintEntity> &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAIViewEntity::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAIViewEntity::is_constraints_Valid() const{
    return m_constraints_isValid;
}

QMap<QString, QJsonValue> OAIViewEntity::getCustomFeatures() const {
    return m_custom_features;
}
void OAIViewEntity::setCustomFeatures(const QMap<QString, QJsonValue> &custom_features) {
    m_custom_features = custom_features;
    m_custom_features_isSet = true;
}

bool OAIViewEntity::is_custom_features_Set() const{
    return m_custom_features_isSet;
}

bool OAIViewEntity::is_custom_features_Valid() const{
    return m_custom_features_isValid;
}

QString OAIViewEntity::getSqlCode() const {
    return m_sql_code;
}
void OAIViewEntity::setSqlCode(const QString &sql_code) {
    m_sql_code = sql_code;
    m_sql_code_isSet = true;
}

bool OAIViewEntity::is_sql_code_Set() const{
    return m_sql_code_isSet;
}

bool OAIViewEntity::is_sql_code_Valid() const{
    return m_sql_code_isValid;
}

bool OAIViewEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constraints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIViewEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
