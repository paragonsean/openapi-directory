/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConvertConversionWorkspaceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConvertConversionWorkspaceRequest::OAIConvertConversionWorkspaceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConvertConversionWorkspaceRequest::OAIConvertConversionWorkspaceRequest() {
    this->initializeModel();
}

OAIConvertConversionWorkspaceRequest::~OAIConvertConversionWorkspaceRequest() {}

void OAIConvertConversionWorkspaceRequest::initializeModel() {

    m_auto_commit_isSet = false;
    m_auto_commit_isValid = false;

    m_convert_full_path_isSet = false;
    m_convert_full_path_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;
}

void OAIConvertConversionWorkspaceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConvertConversionWorkspaceRequest::fromJsonObject(QJsonObject json) {

    m_auto_commit_isValid = ::OpenAPI::fromJsonValue(m_auto_commit, json[QString("autoCommit")]);
    m_auto_commit_isSet = !json[QString("autoCommit")].isNull() && m_auto_commit_isValid;

    m_convert_full_path_isValid = ::OpenAPI::fromJsonValue(m_convert_full_path, json[QString("convertFullPath")]);
    m_convert_full_path_isSet = !json[QString("convertFullPath")].isNull() && m_convert_full_path_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;
}

QString OAIConvertConversionWorkspaceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConvertConversionWorkspaceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_commit_isSet) {
        obj.insert(QString("autoCommit"), ::OpenAPI::toJsonValue(m_auto_commit));
    }
    if (m_convert_full_path_isSet) {
        obj.insert(QString("convertFullPath"), ::OpenAPI::toJsonValue(m_convert_full_path));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    return obj;
}

bool OAIConvertConversionWorkspaceRequest::isAutoCommit() const {
    return m_auto_commit;
}
void OAIConvertConversionWorkspaceRequest::setAutoCommit(const bool &auto_commit) {
    m_auto_commit = auto_commit;
    m_auto_commit_isSet = true;
}

bool OAIConvertConversionWorkspaceRequest::is_auto_commit_Set() const{
    return m_auto_commit_isSet;
}

bool OAIConvertConversionWorkspaceRequest::is_auto_commit_Valid() const{
    return m_auto_commit_isValid;
}

bool OAIConvertConversionWorkspaceRequest::isConvertFullPath() const {
    return m_convert_full_path;
}
void OAIConvertConversionWorkspaceRequest::setConvertFullPath(const bool &convert_full_path) {
    m_convert_full_path = convert_full_path;
    m_convert_full_path_isSet = true;
}

bool OAIConvertConversionWorkspaceRequest::is_convert_full_path_Set() const{
    return m_convert_full_path_isSet;
}

bool OAIConvertConversionWorkspaceRequest::is_convert_full_path_Valid() const{
    return m_convert_full_path_isValid;
}

QString OAIConvertConversionWorkspaceRequest::getFilter() const {
    return m_filter;
}
void OAIConvertConversionWorkspaceRequest::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIConvertConversionWorkspaceRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIConvertConversionWorkspaceRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

bool OAIConvertConversionWorkspaceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_full_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConvertConversionWorkspaceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
