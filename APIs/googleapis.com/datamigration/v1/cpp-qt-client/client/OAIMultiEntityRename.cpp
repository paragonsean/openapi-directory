/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiEntityRename.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiEntityRename::OAIMultiEntityRename(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiEntityRename::OAIMultiEntityRename() {
    this->initializeModel();
}

OAIMultiEntityRename::~OAIMultiEntityRename() {}

void OAIMultiEntityRename::initializeModel() {

    m_new_name_pattern_isSet = false;
    m_new_name_pattern_isValid = false;

    m_source_name_transformation_isSet = false;
    m_source_name_transformation_isValid = false;
}

void OAIMultiEntityRename::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiEntityRename::fromJsonObject(QJsonObject json) {

    m_new_name_pattern_isValid = ::OpenAPI::fromJsonValue(m_new_name_pattern, json[QString("newNamePattern")]);
    m_new_name_pattern_isSet = !json[QString("newNamePattern")].isNull() && m_new_name_pattern_isValid;

    m_source_name_transformation_isValid = ::OpenAPI::fromJsonValue(m_source_name_transformation, json[QString("sourceNameTransformation")]);
    m_source_name_transformation_isSet = !json[QString("sourceNameTransformation")].isNull() && m_source_name_transformation_isValid;
}

QString OAIMultiEntityRename::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiEntityRename::asJsonObject() const {
    QJsonObject obj;
    if (m_new_name_pattern_isSet) {
        obj.insert(QString("newNamePattern"), ::OpenAPI::toJsonValue(m_new_name_pattern));
    }
    if (m_source_name_transformation_isSet) {
        obj.insert(QString("sourceNameTransformation"), ::OpenAPI::toJsonValue(m_source_name_transformation));
    }
    return obj;
}

QString OAIMultiEntityRename::getNewNamePattern() const {
    return m_new_name_pattern;
}
void OAIMultiEntityRename::setNewNamePattern(const QString &new_name_pattern) {
    m_new_name_pattern = new_name_pattern;
    m_new_name_pattern_isSet = true;
}

bool OAIMultiEntityRename::is_new_name_pattern_Set() const{
    return m_new_name_pattern_isSet;
}

bool OAIMultiEntityRename::is_new_name_pattern_Valid() const{
    return m_new_name_pattern_isValid;
}

QString OAIMultiEntityRename::getSourceNameTransformation() const {
    return m_source_name_transformation;
}
void OAIMultiEntityRename::setSourceNameTransformation(const QString &source_name_transformation) {
    m_source_name_transformation = source_name_transformation;
    m_source_name_transformation_isSet = true;
}

bool OAIMultiEntityRename::is_source_name_transformation_Set() const{
    return m_source_name_transformation_isSet;
}

bool OAIMultiEntityRename::is_source_name_transformation_Valid() const{
    return m_source_name_transformation_isValid;
}

bool OAIMultiEntityRename::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_name_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_name_transformation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiEntityRename::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
