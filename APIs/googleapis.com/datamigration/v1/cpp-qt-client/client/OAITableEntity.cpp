/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITableEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITableEntity::OAITableEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITableEntity::OAITableEntity() {
    this->initializeModel();
}

OAITableEntity::~OAITableEntity() {}

void OAITableEntity::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_custom_features_isSet = false;
    m_custom_features_isValid = false;

    m_indices_isSet = false;
    m_indices_isValid = false;

    m_triggers_isSet = false;
    m_triggers_isValid = false;
}

void OAITableEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITableEntity::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_custom_features_isValid = ::OpenAPI::fromJsonValue(m_custom_features, json[QString("customFeatures")]);
    m_custom_features_isSet = !json[QString("customFeatures")].isNull() && m_custom_features_isValid;

    m_indices_isValid = ::OpenAPI::fromJsonValue(m_indices, json[QString("indices")]);
    m_indices_isSet = !json[QString("indices")].isNull() && m_indices_isValid;

    m_triggers_isValid = ::OpenAPI::fromJsonValue(m_triggers, json[QString("triggers")]);
    m_triggers_isSet = !json[QString("triggers")].isNull() && m_triggers_isValid;
}

QString OAITableEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITableEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_constraints.size() > 0) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_custom_features.size() > 0) {
        obj.insert(QString("customFeatures"), ::OpenAPI::toJsonValue(m_custom_features));
    }
    if (m_indices.size() > 0) {
        obj.insert(QString("indices"), ::OpenAPI::toJsonValue(m_indices));
    }
    if (m_triggers.size() > 0) {
        obj.insert(QString("triggers"), ::OpenAPI::toJsonValue(m_triggers));
    }
    return obj;
}

QList<OAIColumnEntity> OAITableEntity::getColumns() const {
    return m_columns;
}
void OAITableEntity::setColumns(const QList<OAIColumnEntity> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAITableEntity::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAITableEntity::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAITableEntity::getComment() const {
    return m_comment;
}
void OAITableEntity::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAITableEntity::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAITableEntity::is_comment_Valid() const{
    return m_comment_isValid;
}

QList<OAIConstraintEntity> OAITableEntity::getConstraints() const {
    return m_constraints;
}
void OAITableEntity::setConstraints(const QList<OAIConstraintEntity> &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAITableEntity::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAITableEntity::is_constraints_Valid() const{
    return m_constraints_isValid;
}

QMap<QString, QJsonValue> OAITableEntity::getCustomFeatures() const {
    return m_custom_features;
}
void OAITableEntity::setCustomFeatures(const QMap<QString, QJsonValue> &custom_features) {
    m_custom_features = custom_features;
    m_custom_features_isSet = true;
}

bool OAITableEntity::is_custom_features_Set() const{
    return m_custom_features_isSet;
}

bool OAITableEntity::is_custom_features_Valid() const{
    return m_custom_features_isValid;
}

QList<OAIIndexEntity> OAITableEntity::getIndices() const {
    return m_indices;
}
void OAITableEntity::setIndices(const QList<OAIIndexEntity> &indices) {
    m_indices = indices;
    m_indices_isSet = true;
}

bool OAITableEntity::is_indices_Set() const{
    return m_indices_isSet;
}

bool OAITableEntity::is_indices_Valid() const{
    return m_indices_isValid;
}

QList<OAITriggerEntity> OAITableEntity::getTriggers() const {
    return m_triggers;
}
void OAITableEntity::setTriggers(const QList<OAITriggerEntity> &triggers) {
    m_triggers = triggers;
    m_triggers_isSet = true;
}

bool OAITableEntity::is_triggers_Set() const{
    return m_triggers_isSet;
}

bool OAITableEntity::is_triggers_Valid() const{
    return m_triggers_isValid;
}

bool OAITableEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_indices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITableEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
