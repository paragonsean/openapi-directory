/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITriggerEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITriggerEntity::OAITriggerEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITriggerEntity::OAITriggerEntity() {
    this->initializeModel();
}

OAITriggerEntity::~OAITriggerEntity() {}

void OAITriggerEntity::initializeModel() {

    m_custom_features_isSet = false;
    m_custom_features_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sql_code_isSet = false;
    m_sql_code_isValid = false;

    m_trigger_type_isSet = false;
    m_trigger_type_isValid = false;

    m_triggering_events_isSet = false;
    m_triggering_events_isValid = false;
}

void OAITriggerEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITriggerEntity::fromJsonObject(QJsonObject json) {

    m_custom_features_isValid = ::OpenAPI::fromJsonValue(m_custom_features, json[QString("customFeatures")]);
    m_custom_features_isSet = !json[QString("customFeatures")].isNull() && m_custom_features_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sql_code_isValid = ::OpenAPI::fromJsonValue(m_sql_code, json[QString("sqlCode")]);
    m_sql_code_isSet = !json[QString("sqlCode")].isNull() && m_sql_code_isValid;

    m_trigger_type_isValid = ::OpenAPI::fromJsonValue(m_trigger_type, json[QString("triggerType")]);
    m_trigger_type_isSet = !json[QString("triggerType")].isNull() && m_trigger_type_isValid;

    m_triggering_events_isValid = ::OpenAPI::fromJsonValue(m_triggering_events, json[QString("triggeringEvents")]);
    m_triggering_events_isSet = !json[QString("triggeringEvents")].isNull() && m_triggering_events_isValid;
}

QString OAITriggerEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITriggerEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_features.size() > 0) {
        obj.insert(QString("customFeatures"), ::OpenAPI::toJsonValue(m_custom_features));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sql_code_isSet) {
        obj.insert(QString("sqlCode"), ::OpenAPI::toJsonValue(m_sql_code));
    }
    if (m_trigger_type_isSet) {
        obj.insert(QString("triggerType"), ::OpenAPI::toJsonValue(m_trigger_type));
    }
    if (m_triggering_events.size() > 0) {
        obj.insert(QString("triggeringEvents"), ::OpenAPI::toJsonValue(m_triggering_events));
    }
    return obj;
}

QMap<QString, QJsonValue> OAITriggerEntity::getCustomFeatures() const {
    return m_custom_features;
}
void OAITriggerEntity::setCustomFeatures(const QMap<QString, QJsonValue> &custom_features) {
    m_custom_features = custom_features;
    m_custom_features_isSet = true;
}

bool OAITriggerEntity::is_custom_features_Set() const{
    return m_custom_features_isSet;
}

bool OAITriggerEntity::is_custom_features_Valid() const{
    return m_custom_features_isValid;
}

QString OAITriggerEntity::getName() const {
    return m_name;
}
void OAITriggerEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITriggerEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAITriggerEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITriggerEntity::getSqlCode() const {
    return m_sql_code;
}
void OAITriggerEntity::setSqlCode(const QString &sql_code) {
    m_sql_code = sql_code;
    m_sql_code_isSet = true;
}

bool OAITriggerEntity::is_sql_code_Set() const{
    return m_sql_code_isSet;
}

bool OAITriggerEntity::is_sql_code_Valid() const{
    return m_sql_code_isValid;
}

QString OAITriggerEntity::getTriggerType() const {
    return m_trigger_type;
}
void OAITriggerEntity::setTriggerType(const QString &trigger_type) {
    m_trigger_type = trigger_type;
    m_trigger_type_isSet = true;
}

bool OAITriggerEntity::is_trigger_type_Set() const{
    return m_trigger_type_isSet;
}

bool OAITriggerEntity::is_trigger_type_Valid() const{
    return m_trigger_type_isValid;
}

QList<QString> OAITriggerEntity::getTriggeringEvents() const {
    return m_triggering_events;
}
void OAITriggerEntity::setTriggeringEvents(const QList<QString> &triggering_events) {
    m_triggering_events = triggering_events;
    m_triggering_events_isSet = true;
}

bool OAITriggerEntity::is_triggering_events_Set() const{
    return m_triggering_events_isSet;
}

bool OAITriggerEntity::is_triggering_events_Valid() const{
    return m_triggering_events_isValid;
}

bool OAITriggerEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggering_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITriggerEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
