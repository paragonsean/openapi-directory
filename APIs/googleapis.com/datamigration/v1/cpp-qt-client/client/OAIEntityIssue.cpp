/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityIssue::OAIEntityIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityIssue::OAIEntityIssue() {
    this->initializeModel();
}

OAIEntityIssue::~OAIEntityIssue() {}

void OAIEntityIssue::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_ddl_isSet = false;
    m_ddl_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEntityIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityIssue::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_ddl_isValid = ::OpenAPI::fromJsonValue(m_ddl, json[QString("ddl")]);
    m_ddl_isSet = !json[QString("ddl")].isNull() && m_ddl_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEntityIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_ddl_isSet) {
        obj.insert(QString("ddl"), ::OpenAPI::toJsonValue(m_ddl));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEntityIssue::getCode() const {
    return m_code;
}
void OAIEntityIssue::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIEntityIssue::is_code_Set() const{
    return m_code_isSet;
}

bool OAIEntityIssue::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIEntityIssue::getDdl() const {
    return m_ddl;
}
void OAIEntityIssue::setDdl(const QString &ddl) {
    m_ddl = ddl;
    m_ddl_isSet = true;
}

bool OAIEntityIssue::is_ddl_Set() const{
    return m_ddl_isSet;
}

bool OAIEntityIssue::is_ddl_Valid() const{
    return m_ddl_isValid;
}

QString OAIEntityIssue::getEntityType() const {
    return m_entity_type;
}
void OAIEntityIssue::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIEntityIssue::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIEntityIssue::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIEntityIssue::getId() const {
    return m_id;
}
void OAIEntityIssue::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEntityIssue::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEntityIssue::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEntityIssue::getMessage() const {
    return m_message;
}
void OAIEntityIssue::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEntityIssue::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEntityIssue::is_message_Valid() const{
    return m_message_isValid;
}

OAIPosition OAIEntityIssue::getPosition() const {
    return m_position;
}
void OAIEntityIssue::setPosition(const OAIPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIEntityIssue::is_position_Set() const{
    return m_position_isSet;
}

bool OAIEntityIssue::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIEntityIssue::getSeverity() const {
    return m_severity;
}
void OAIEntityIssue::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIEntityIssue::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIEntityIssue::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIEntityIssue::getType() const {
    return m_type;
}
void OAIEntityIssue::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEntityIssue::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEntityIssue::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEntityIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ddl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
