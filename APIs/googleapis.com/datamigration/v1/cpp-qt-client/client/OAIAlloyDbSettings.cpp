/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlloyDbSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlloyDbSettings::OAIAlloyDbSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlloyDbSettings::OAIAlloyDbSettings() {
    this->initializeModel();
}

OAIAlloyDbSettings::~OAIAlloyDbSettings() {}

void OAIAlloyDbSettings::initializeModel() {

    m_database_version_isSet = false;
    m_database_version_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_initial_user_isSet = false;
    m_initial_user_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_primary_instance_settings_isSet = false;
    m_primary_instance_settings_isValid = false;

    m_vpc_network_isSet = false;
    m_vpc_network_isValid = false;
}

void OAIAlloyDbSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlloyDbSettings::fromJsonObject(QJsonObject json) {

    m_database_version_isValid = ::OpenAPI::fromJsonValue(m_database_version, json[QString("databaseVersion")]);
    m_database_version_isSet = !json[QString("databaseVersion")].isNull() && m_database_version_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_initial_user_isValid = ::OpenAPI::fromJsonValue(m_initial_user, json[QString("initialUser")]);
    m_initial_user_isSet = !json[QString("initialUser")].isNull() && m_initial_user_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_primary_instance_settings_isValid = ::OpenAPI::fromJsonValue(m_primary_instance_settings, json[QString("primaryInstanceSettings")]);
    m_primary_instance_settings_isSet = !json[QString("primaryInstanceSettings")].isNull() && m_primary_instance_settings_isValid;

    m_vpc_network_isValid = ::OpenAPI::fromJsonValue(m_vpc_network, json[QString("vpcNetwork")]);
    m_vpc_network_isSet = !json[QString("vpcNetwork")].isNull() && m_vpc_network_isValid;
}

QString OAIAlloyDbSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlloyDbSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_database_version_isSet) {
        obj.insert(QString("databaseVersion"), ::OpenAPI::toJsonValue(m_database_version));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_initial_user.isSet()) {
        obj.insert(QString("initialUser"), ::OpenAPI::toJsonValue(m_initial_user));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_primary_instance_settings.isSet()) {
        obj.insert(QString("primaryInstanceSettings"), ::OpenAPI::toJsonValue(m_primary_instance_settings));
    }
    if (m_vpc_network_isSet) {
        obj.insert(QString("vpcNetwork"), ::OpenAPI::toJsonValue(m_vpc_network));
    }
    return obj;
}

QString OAIAlloyDbSettings::getDatabaseVersion() const {
    return m_database_version;
}
void OAIAlloyDbSettings::setDatabaseVersion(const QString &database_version) {
    m_database_version = database_version;
    m_database_version_isSet = true;
}

bool OAIAlloyDbSettings::is_database_version_Set() const{
    return m_database_version_isSet;
}

bool OAIAlloyDbSettings::is_database_version_Valid() const{
    return m_database_version_isValid;
}

OAIEncryptionConfig OAIAlloyDbSettings::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIAlloyDbSettings::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIAlloyDbSettings::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIAlloyDbSettings::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

OAIUserPassword OAIAlloyDbSettings::getInitialUser() const {
    return m_initial_user;
}
void OAIAlloyDbSettings::setInitialUser(const OAIUserPassword &initial_user) {
    m_initial_user = initial_user;
    m_initial_user_isSet = true;
}

bool OAIAlloyDbSettings::is_initial_user_Set() const{
    return m_initial_user_isSet;
}

bool OAIAlloyDbSettings::is_initial_user_Valid() const{
    return m_initial_user_isValid;
}

QMap<QString, QString> OAIAlloyDbSettings::getLabels() const {
    return m_labels;
}
void OAIAlloyDbSettings::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIAlloyDbSettings::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIAlloyDbSettings::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIPrimaryInstanceSettings OAIAlloyDbSettings::getPrimaryInstanceSettings() const {
    return m_primary_instance_settings;
}
void OAIAlloyDbSettings::setPrimaryInstanceSettings(const OAIPrimaryInstanceSettings &primary_instance_settings) {
    m_primary_instance_settings = primary_instance_settings;
    m_primary_instance_settings_isSet = true;
}

bool OAIAlloyDbSettings::is_primary_instance_settings_Set() const{
    return m_primary_instance_settings_isSet;
}

bool OAIAlloyDbSettings::is_primary_instance_settings_Valid() const{
    return m_primary_instance_settings_isValid;
}

QString OAIAlloyDbSettings::getVpcNetwork() const {
    return m_vpc_network;
}
void OAIAlloyDbSettings::setVpcNetwork(const QString &vpc_network) {
    m_vpc_network = vpc_network;
    m_vpc_network_isSet = true;
}

bool OAIAlloyDbSettings::is_vpc_network_Set() const{
    return m_vpc_network_isSet;
}

bool OAIAlloyDbSettings::is_vpc_network_Valid() const{
    return m_vpc_network_isValid;
}

bool OAIAlloyDbSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_instance_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_network_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlloyDbSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
