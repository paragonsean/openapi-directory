/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMappingRule.h
 *
 * Definition of a transformation that is to be applied to a group of entities in the source schema. Several such transformations can be applied to an entity sequentially to define the corresponding entity in the target schema.
 */

#ifndef OAIMappingRule_H
#define OAIMappingRule_H

#include <QJsonObject>

#include "OAIConditionalColumnSetValue.h"
#include "OAIConvertRowIdToColumn.h"
#include "OAIEntityMove.h"
#include "OAIFilterTableColumns.h"
#include "OAIMappingRuleFilter.h"
#include "OAIMultiColumnDatatypeChange.h"
#include "OAIMultiEntityRename.h"
#include "OAISetTablePrimaryKey.h"
#include "OAISingleColumnChange.h"
#include "OAISingleEntityRename.h"
#include "OAISinglePackageChange.h"
#include "OAISourceSqlChange.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConditionalColumnSetValue;
class OAIConvertRowIdToColumn;
class OAIEntityMove;
class OAIMappingRuleFilter;
class OAIFilterTableColumns;
class OAIMultiColumnDatatypeChange;
class OAIMultiEntityRename;
class OAISetTablePrimaryKey;
class OAISingleColumnChange;
class OAISingleEntityRename;
class OAISinglePackageChange;
class OAISourceSqlChange;

class OAIMappingRule : public OAIObject {
public:
    OAIMappingRule();
    OAIMappingRule(QString json);
    ~OAIMappingRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConditionalColumnSetValue getConditionalColumnSetValue() const;
    void setConditionalColumnSetValue(const OAIConditionalColumnSetValue &conditional_column_set_value);
    bool is_conditional_column_set_value_Set() const;
    bool is_conditional_column_set_value_Valid() const;

    OAIConvertRowIdToColumn getConvertRowidColumn() const;
    void setConvertRowidColumn(const OAIConvertRowIdToColumn &convert_rowid_column);
    bool is_convert_rowid_column_Set() const;
    bool is_convert_rowid_column_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    OAIEntityMove getEntityMove() const;
    void setEntityMove(const OAIEntityMove &entity_move);
    bool is_entity_move_Set() const;
    bool is_entity_move_Valid() const;

    OAIMappingRuleFilter getFilter() const;
    void setFilter(const OAIMappingRuleFilter &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    OAIFilterTableColumns getFilterTableColumns() const;
    void setFilterTableColumns(const OAIFilterTableColumns &filter_table_columns);
    bool is_filter_table_columns_Set() const;
    bool is_filter_table_columns_Valid() const;

    OAIMultiColumnDatatypeChange getMultiColumnDataTypeChange() const;
    void setMultiColumnDataTypeChange(const OAIMultiColumnDatatypeChange &multi_column_data_type_change);
    bool is_multi_column_data_type_change_Set() const;
    bool is_multi_column_data_type_change_Valid() const;

    OAIMultiEntityRename getMultiEntityRename() const;
    void setMultiEntityRename(const OAIMultiEntityRename &multi_entity_rename);
    bool is_multi_entity_rename_Set() const;
    bool is_multi_entity_rename_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRevisionCreateTime() const;
    void setRevisionCreateTime(const QString &revision_create_time);
    bool is_revision_create_time_Set() const;
    bool is_revision_create_time_Valid() const;

    QString getRevisionId() const;
    void setRevisionId(const QString &revision_id);
    bool is_revision_id_Set() const;
    bool is_revision_id_Valid() const;

    QString getRuleOrder() const;
    void setRuleOrder(const QString &rule_order);
    bool is_rule_order_Set() const;
    bool is_rule_order_Valid() const;

    QString getRuleScope() const;
    void setRuleScope(const QString &rule_scope);
    bool is_rule_scope_Set() const;
    bool is_rule_scope_Valid() const;

    OAISetTablePrimaryKey getSetTablePrimaryKey() const;
    void setSetTablePrimaryKey(const OAISetTablePrimaryKey &set_table_primary_key);
    bool is_set_table_primary_key_Set() const;
    bool is_set_table_primary_key_Valid() const;

    OAISingleColumnChange getSingleColumnChange() const;
    void setSingleColumnChange(const OAISingleColumnChange &single_column_change);
    bool is_single_column_change_Set() const;
    bool is_single_column_change_Valid() const;

    OAISingleEntityRename getSingleEntityRename() const;
    void setSingleEntityRename(const OAISingleEntityRename &single_entity_rename);
    bool is_single_entity_rename_Set() const;
    bool is_single_entity_rename_Valid() const;

    OAISinglePackageChange getSinglePackageChange() const;
    void setSinglePackageChange(const OAISinglePackageChange &single_package_change);
    bool is_single_package_change_Set() const;
    bool is_single_package_change_Valid() const;

    OAISourceSqlChange getSourceSqlChange() const;
    void setSourceSqlChange(const OAISourceSqlChange &source_sql_change);
    bool is_source_sql_change_Set() const;
    bool is_source_sql_change_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConditionalColumnSetValue m_conditional_column_set_value;
    bool m_conditional_column_set_value_isSet;
    bool m_conditional_column_set_value_isValid;

    OAIConvertRowIdToColumn m_convert_rowid_column;
    bool m_convert_rowid_column_isSet;
    bool m_convert_rowid_column_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    OAIEntityMove m_entity_move;
    bool m_entity_move_isSet;
    bool m_entity_move_isValid;

    OAIMappingRuleFilter m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    OAIFilterTableColumns m_filter_table_columns;
    bool m_filter_table_columns_isSet;
    bool m_filter_table_columns_isValid;

    OAIMultiColumnDatatypeChange m_multi_column_data_type_change;
    bool m_multi_column_data_type_change_isSet;
    bool m_multi_column_data_type_change_isValid;

    OAIMultiEntityRename m_multi_entity_rename;
    bool m_multi_entity_rename_isSet;
    bool m_multi_entity_rename_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_revision_create_time;
    bool m_revision_create_time_isSet;
    bool m_revision_create_time_isValid;

    QString m_revision_id;
    bool m_revision_id_isSet;
    bool m_revision_id_isValid;

    QString m_rule_order;
    bool m_rule_order_isSet;
    bool m_rule_order_isValid;

    QString m_rule_scope;
    bool m_rule_scope_isSet;
    bool m_rule_scope_isValid;

    OAISetTablePrimaryKey m_set_table_primary_key;
    bool m_set_table_primary_key_isSet;
    bool m_set_table_primary_key_isValid;

    OAISingleColumnChange m_single_column_change;
    bool m_single_column_change_isSet;
    bool m_single_column_change_isValid;

    OAISingleEntityRename m_single_entity_rename;
    bool m_single_entity_rename_isSet;
    bool m_single_entity_rename_isValid;

    OAISinglePackageChange m_single_package_change;
    bool m_single_package_change_isSet;
    bool m_single_package_change_isValid;

    OAISourceSqlChange m_source_sql_change;
    bool m_source_sql_change_isSet;
    bool m_source_sql_change_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMappingRule)

#endif // OAIMappingRule_H
