/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMultiColumnDatatypeChange.h
 *
 * Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
 */

#ifndef OAIMultiColumnDatatypeChange_H
#define OAIMultiColumnDatatypeChange_H

#include <QJsonObject>

#include "OAISourceNumericFilter.h"
#include "OAISourceTextFilter.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISourceNumericFilter;
class OAISourceTextFilter;

class OAIMultiColumnDatatypeChange : public OAIObject {
public:
    OAIMultiColumnDatatypeChange();
    OAIMultiColumnDatatypeChange(QString json);
    ~OAIMultiColumnDatatypeChange() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QJsonValue> getCustomFeatures() const;
    void setCustomFeatures(const QMap<QString, QJsonValue> &custom_features);
    bool is_custom_features_Set() const;
    bool is_custom_features_Valid() const;

    QString getNewDataType() const;
    void setNewDataType(const QString &new_data_type);
    bool is_new_data_type_Set() const;
    bool is_new_data_type_Valid() const;

    qint32 getOverrideFractionalSecondsPrecision() const;
    void setOverrideFractionalSecondsPrecision(const qint32 &override_fractional_seconds_precision);
    bool is_override_fractional_seconds_precision_Set() const;
    bool is_override_fractional_seconds_precision_Valid() const;

    QString getOverrideLength() const;
    void setOverrideLength(const QString &override_length);
    bool is_override_length_Set() const;
    bool is_override_length_Valid() const;

    qint32 getOverridePrecision() const;
    void setOverridePrecision(const qint32 &override_precision);
    bool is_override_precision_Set() const;
    bool is_override_precision_Valid() const;

    qint32 getOverrideScale() const;
    void setOverrideScale(const qint32 &override_scale);
    bool is_override_scale_Set() const;
    bool is_override_scale_Valid() const;

    QString getSourceDataTypeFilter() const;
    void setSourceDataTypeFilter(const QString &source_data_type_filter);
    bool is_source_data_type_filter_Set() const;
    bool is_source_data_type_filter_Valid() const;

    OAISourceNumericFilter getSourceNumericFilter() const;
    void setSourceNumericFilter(const OAISourceNumericFilter &source_numeric_filter);
    bool is_source_numeric_filter_Set() const;
    bool is_source_numeric_filter_Valid() const;

    OAISourceTextFilter getSourceTextFilter() const;
    void setSourceTextFilter(const OAISourceTextFilter &source_text_filter);
    bool is_source_text_filter_Set() const;
    bool is_source_text_filter_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QJsonValue> m_custom_features;
    bool m_custom_features_isSet;
    bool m_custom_features_isValid;

    QString m_new_data_type;
    bool m_new_data_type_isSet;
    bool m_new_data_type_isValid;

    qint32 m_override_fractional_seconds_precision;
    bool m_override_fractional_seconds_precision_isSet;
    bool m_override_fractional_seconds_precision_isValid;

    QString m_override_length;
    bool m_override_length_isSet;
    bool m_override_length_isValid;

    qint32 m_override_precision;
    bool m_override_precision_isSet;
    bool m_override_precision_isValid;

    qint32 m_override_scale;
    bool m_override_scale_isSet;
    bool m_override_scale_isValid;

    QString m_source_data_type_filter;
    bool m_source_data_type_filter_isSet;
    bool m_source_data_type_filter_isValid;

    OAISourceNumericFilter m_source_numeric_filter;
    bool m_source_numeric_filter_isSet;
    bool m_source_numeric_filter_isValid;

    OAISourceTextFilter m_source_text_filter;
    bool m_source_text_filter_isSet;
    bool m_source_text_filter_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMultiColumnDatatypeChange)

#endif // OAIMultiColumnDatatypeChange_H
