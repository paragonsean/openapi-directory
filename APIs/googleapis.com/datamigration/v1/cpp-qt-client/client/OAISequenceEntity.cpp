/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISequenceEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISequenceEntity::OAISequenceEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISequenceEntity::OAISequenceEntity() {
    this->initializeModel();
}

OAISequenceEntity::~OAISequenceEntity() {}

void OAISequenceEntity::initializeModel() {

    m_cache_isSet = false;
    m_cache_isValid = false;

    m_custom_features_isSet = false;
    m_custom_features_isValid = false;

    m_cycle_isSet = false;
    m_cycle_isValid = false;

    m_increment_isSet = false;
    m_increment_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_start_value_isSet = false;
    m_start_value_isValid = false;
}

void OAISequenceEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISequenceEntity::fromJsonObject(QJsonObject json) {

    m_cache_isValid = ::OpenAPI::fromJsonValue(m_cache, json[QString("cache")]);
    m_cache_isSet = !json[QString("cache")].isNull() && m_cache_isValid;

    m_custom_features_isValid = ::OpenAPI::fromJsonValue(m_custom_features, json[QString("customFeatures")]);
    m_custom_features_isSet = !json[QString("customFeatures")].isNull() && m_custom_features_isValid;

    m_cycle_isValid = ::OpenAPI::fromJsonValue(m_cycle, json[QString("cycle")]);
    m_cycle_isSet = !json[QString("cycle")].isNull() && m_cycle_isValid;

    m_increment_isValid = ::OpenAPI::fromJsonValue(m_increment, json[QString("increment")]);
    m_increment_isSet = !json[QString("increment")].isNull() && m_increment_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("maxValue")]);
    m_max_value_isSet = !json[QString("maxValue")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("minValue")]);
    m_min_value_isSet = !json[QString("minValue")].isNull() && m_min_value_isValid;

    m_start_value_isValid = ::OpenAPI::fromJsonValue(m_start_value, json[QString("startValue")]);
    m_start_value_isSet = !json[QString("startValue")].isNull() && m_start_value_isValid;
}

QString OAISequenceEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISequenceEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_isSet) {
        obj.insert(QString("cache"), ::OpenAPI::toJsonValue(m_cache));
    }
    if (m_custom_features.size() > 0) {
        obj.insert(QString("customFeatures"), ::OpenAPI::toJsonValue(m_custom_features));
    }
    if (m_cycle_isSet) {
        obj.insert(QString("cycle"), ::OpenAPI::toJsonValue(m_cycle));
    }
    if (m_increment_isSet) {
        obj.insert(QString("increment"), ::OpenAPI::toJsonValue(m_increment));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("maxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("minValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_start_value_isSet) {
        obj.insert(QString("startValue"), ::OpenAPI::toJsonValue(m_start_value));
    }
    return obj;
}

QString OAISequenceEntity::getCache() const {
    return m_cache;
}
void OAISequenceEntity::setCache(const QString &cache) {
    m_cache = cache;
    m_cache_isSet = true;
}

bool OAISequenceEntity::is_cache_Set() const{
    return m_cache_isSet;
}

bool OAISequenceEntity::is_cache_Valid() const{
    return m_cache_isValid;
}

QMap<QString, QJsonValue> OAISequenceEntity::getCustomFeatures() const {
    return m_custom_features;
}
void OAISequenceEntity::setCustomFeatures(const QMap<QString, QJsonValue> &custom_features) {
    m_custom_features = custom_features;
    m_custom_features_isSet = true;
}

bool OAISequenceEntity::is_custom_features_Set() const{
    return m_custom_features_isSet;
}

bool OAISequenceEntity::is_custom_features_Valid() const{
    return m_custom_features_isValid;
}

bool OAISequenceEntity::isCycle() const {
    return m_cycle;
}
void OAISequenceEntity::setCycle(const bool &cycle) {
    m_cycle = cycle;
    m_cycle_isSet = true;
}

bool OAISequenceEntity::is_cycle_Set() const{
    return m_cycle_isSet;
}

bool OAISequenceEntity::is_cycle_Valid() const{
    return m_cycle_isValid;
}

QString OAISequenceEntity::getIncrement() const {
    return m_increment;
}
void OAISequenceEntity::setIncrement(const QString &increment) {
    m_increment = increment;
    m_increment_isSet = true;
}

bool OAISequenceEntity::is_increment_Set() const{
    return m_increment_isSet;
}

bool OAISequenceEntity::is_increment_Valid() const{
    return m_increment_isValid;
}

QByteArray OAISequenceEntity::getMaxValue() const {
    return m_max_value;
}
void OAISequenceEntity::setMaxValue(const QByteArray &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAISequenceEntity::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAISequenceEntity::is_max_value_Valid() const{
    return m_max_value_isValid;
}

QByteArray OAISequenceEntity::getMinValue() const {
    return m_min_value;
}
void OAISequenceEntity::setMinValue(const QByteArray &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAISequenceEntity::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAISequenceEntity::is_min_value_Valid() const{
    return m_min_value_isValid;
}

QByteArray OAISequenceEntity::getStartValue() const {
    return m_start_value;
}
void OAISequenceEntity::setStartValue(const QByteArray &start_value) {
    m_start_value = start_value;
    m_start_value_isSet = true;
}

bool OAISequenceEntity::is_start_value_Set() const{
    return m_start_value_isSet;
}

bool OAISequenceEntity::is_start_value_Valid() const{
    return m_start_value_isValid;
}

bool OAISequenceEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_increment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISequenceEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
