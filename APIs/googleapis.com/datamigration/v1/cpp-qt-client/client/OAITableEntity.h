/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITableEntity.h
 *
 * Table&#39;s parent is a schema.
 */

#ifndef OAITableEntity_H
#define OAITableEntity_H

#include <QJsonObject>

#include "OAIColumnEntity.h"
#include "OAIConstraintEntity.h"
#include "OAIIndexEntity.h"
#include "OAITriggerEntity.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIColumnEntity;
class OAIConstraintEntity;
class OAIIndexEntity;
class OAITriggerEntity;

class OAITableEntity : public OAIObject {
public:
    OAITableEntity();
    OAITableEntity(QString json);
    ~OAITableEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIColumnEntity> getColumns() const;
    void setColumns(const QList<OAIColumnEntity> &columns);
    bool is_columns_Set() const;
    bool is_columns_Valid() const;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    QList<OAIConstraintEntity> getConstraints() const;
    void setConstraints(const QList<OAIConstraintEntity> &constraints);
    bool is_constraints_Set() const;
    bool is_constraints_Valid() const;

    QMap<QString, QJsonValue> getCustomFeatures() const;
    void setCustomFeatures(const QMap<QString, QJsonValue> &custom_features);
    bool is_custom_features_Set() const;
    bool is_custom_features_Valid() const;

    QList<OAIIndexEntity> getIndices() const;
    void setIndices(const QList<OAIIndexEntity> &indices);
    bool is_indices_Set() const;
    bool is_indices_Valid() const;

    QList<OAITriggerEntity> getTriggers() const;
    void setTriggers(const QList<OAITriggerEntity> &triggers);
    bool is_triggers_Set() const;
    bool is_triggers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIColumnEntity> m_columns;
    bool m_columns_isSet;
    bool m_columns_isValid;

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    QList<OAIConstraintEntity> m_constraints;
    bool m_constraints_isSet;
    bool m_constraints_isValid;

    QMap<QString, QJsonValue> m_custom_features;
    bool m_custom_features_isSet;
    bool m_custom_features_isValid;

    QList<OAIIndexEntity> m_indices;
    bool m_indices_isSet;
    bool m_indices_isValid;

    QList<OAITriggerEntity> m_triggers;
    bool m_triggers_isSet;
    bool m_triggers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITableEntity)

#endif // OAITableEntity_H
