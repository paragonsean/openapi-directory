/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserPassword.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserPassword::OAIUserPassword(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserPassword::OAIUserPassword() {
    this->initializeModel();
}

OAIUserPassword::~OAIUserPassword() {}

void OAIUserPassword::initializeModel() {

    m_password_isSet = false;
    m_password_isValid = false;

    m_password_set_isSet = false;
    m_password_set_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIUserPassword::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserPassword::fromJsonObject(QJsonObject json) {

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_password_set_isValid = ::OpenAPI::fromJsonValue(m_password_set, json[QString("passwordSet")]);
    m_password_set_isSet = !json[QString("passwordSet")].isNull() && m_password_set_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIUserPassword::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserPassword::asJsonObject() const {
    QJsonObject obj;
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_password_set_isSet) {
        obj.insert(QString("passwordSet"), ::OpenAPI::toJsonValue(m_password_set));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIUserPassword::getPassword() const {
    return m_password;
}
void OAIUserPassword::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUserPassword::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUserPassword::is_password_Valid() const{
    return m_password_isValid;
}

bool OAIUserPassword::isPasswordSet() const {
    return m_password_set;
}
void OAIUserPassword::setPasswordSet(const bool &password_set) {
    m_password_set = password_set;
    m_password_set_isSet = true;
}

bool OAIUserPassword::is_password_set_Set() const{
    return m_password_set_isSet;
}

bool OAIUserPassword::is_password_set_Valid() const{
    return m_password_set_isValid;
}

QString OAIUserPassword::getUser() const {
    return m_user;
}
void OAIUserPassword::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUserPassword::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUserPassword::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIUserPassword::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserPassword::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
