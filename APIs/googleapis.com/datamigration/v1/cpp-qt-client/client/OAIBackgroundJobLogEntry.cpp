/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackgroundJobLogEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackgroundJobLogEntry::OAIBackgroundJobLogEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackgroundJobLogEntry::OAIBackgroundJobLogEntry() {
    this->initializeModel();
}

OAIBackgroundJobLogEntry::~OAIBackgroundJobLogEntry() {}

void OAIBackgroundJobLogEntry::initializeModel() {

    m_apply_job_details_isSet = false;
    m_apply_job_details_isValid = false;

    m_completion_comment_isSet = false;
    m_completion_comment_isValid = false;

    m_completion_state_isSet = false;
    m_completion_state_isValid = false;

    m_convert_job_details_isSet = false;
    m_convert_job_details_isValid = false;

    m_finish_time_isSet = false;
    m_finish_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_import_rules_job_details_isSet = false;
    m_import_rules_job_details_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_request_autocommit_isSet = false;
    m_request_autocommit_isValid = false;

    m_seed_job_details_isSet = false;
    m_seed_job_details_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIBackgroundJobLogEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackgroundJobLogEntry::fromJsonObject(QJsonObject json) {

    m_apply_job_details_isValid = ::OpenAPI::fromJsonValue(m_apply_job_details, json[QString("applyJobDetails")]);
    m_apply_job_details_isSet = !json[QString("applyJobDetails")].isNull() && m_apply_job_details_isValid;

    m_completion_comment_isValid = ::OpenAPI::fromJsonValue(m_completion_comment, json[QString("completionComment")]);
    m_completion_comment_isSet = !json[QString("completionComment")].isNull() && m_completion_comment_isValid;

    m_completion_state_isValid = ::OpenAPI::fromJsonValue(m_completion_state, json[QString("completionState")]);
    m_completion_state_isSet = !json[QString("completionState")].isNull() && m_completion_state_isValid;

    m_convert_job_details_isValid = ::OpenAPI::fromJsonValue(m_convert_job_details, json[QString("convertJobDetails")]);
    m_convert_job_details_isSet = !json[QString("convertJobDetails")].isNull() && m_convert_job_details_isValid;

    m_finish_time_isValid = ::OpenAPI::fromJsonValue(m_finish_time, json[QString("finishTime")]);
    m_finish_time_isSet = !json[QString("finishTime")].isNull() && m_finish_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_import_rules_job_details_isValid = ::OpenAPI::fromJsonValue(m_import_rules_job_details, json[QString("importRulesJobDetails")]);
    m_import_rules_job_details_isSet = !json[QString("importRulesJobDetails")].isNull() && m_import_rules_job_details_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("jobType")]);
    m_job_type_isSet = !json[QString("jobType")].isNull() && m_job_type_isValid;

    m_request_autocommit_isValid = ::OpenAPI::fromJsonValue(m_request_autocommit, json[QString("requestAutocommit")]);
    m_request_autocommit_isSet = !json[QString("requestAutocommit")].isNull() && m_request_autocommit_isValid;

    m_seed_job_details_isValid = ::OpenAPI::fromJsonValue(m_seed_job_details, json[QString("seedJobDetails")]);
    m_seed_job_details_isSet = !json[QString("seedJobDetails")].isNull() && m_seed_job_details_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIBackgroundJobLogEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackgroundJobLogEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_job_details.isSet()) {
        obj.insert(QString("applyJobDetails"), ::OpenAPI::toJsonValue(m_apply_job_details));
    }
    if (m_completion_comment_isSet) {
        obj.insert(QString("completionComment"), ::OpenAPI::toJsonValue(m_completion_comment));
    }
    if (m_completion_state_isSet) {
        obj.insert(QString("completionState"), ::OpenAPI::toJsonValue(m_completion_state));
    }
    if (m_convert_job_details.isSet()) {
        obj.insert(QString("convertJobDetails"), ::OpenAPI::toJsonValue(m_convert_job_details));
    }
    if (m_finish_time_isSet) {
        obj.insert(QString("finishTime"), ::OpenAPI::toJsonValue(m_finish_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_import_rules_job_details.isSet()) {
        obj.insert(QString("importRulesJobDetails"), ::OpenAPI::toJsonValue(m_import_rules_job_details));
    }
    if (m_job_type_isSet) {
        obj.insert(QString("jobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_request_autocommit_isSet) {
        obj.insert(QString("requestAutocommit"), ::OpenAPI::toJsonValue(m_request_autocommit));
    }
    if (m_seed_job_details.isSet()) {
        obj.insert(QString("seedJobDetails"), ::OpenAPI::toJsonValue(m_seed_job_details));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

OAIApplyJobDetails OAIBackgroundJobLogEntry::getApplyJobDetails() const {
    return m_apply_job_details;
}
void OAIBackgroundJobLogEntry::setApplyJobDetails(const OAIApplyJobDetails &apply_job_details) {
    m_apply_job_details = apply_job_details;
    m_apply_job_details_isSet = true;
}

bool OAIBackgroundJobLogEntry::is_apply_job_details_Set() const{
    return m_apply_job_details_isSet;
}

bool OAIBackgroundJobLogEntry::is_apply_job_details_Valid() const{
    return m_apply_job_details_isValid;
}

QString OAIBackgroundJobLogEntry::getCompletionComment() const {
    return m_completion_comment;
}
void OAIBackgroundJobLogEntry::setCompletionComment(const QString &completion_comment) {
    m_completion_comment = completion_comment;
    m_completion_comment_isSet = true;
}

bool OAIBackgroundJobLogEntry::is_completion_comment_Set() const{
    return m_completion_comment_isSet;
}

bool OAIBackgroundJobLogEntry::is_completion_comment_Valid() const{
    return m_completion_comment_isValid;
}

QString OAIBackgroundJobLogEntry::getCompletionState() const {
    return m_completion_state;
}
void OAIBackgroundJobLogEntry::setCompletionState(const QString &completion_state) {
    m_completion_state = completion_state;
    m_completion_state_isSet = true;
}

bool OAIBackgroundJobLogEntry::is_completion_state_Set() const{
    return m_completion_state_isSet;
}

bool OAIBackgroundJobLogEntry::is_completion_state_Valid() const{
    return m_completion_state_isValid;
}

OAIConvertJobDetails OAIBackgroundJobLogEntry::getConvertJobDetails() const {
    return m_convert_job_details;
}
void OAIBackgroundJobLogEntry::setConvertJobDetails(const OAIConvertJobDetails &convert_job_details) {
    m_convert_job_details = convert_job_details;
    m_convert_job_details_isSet = true;
}

bool OAIBackgroundJobLogEntry::is_convert_job_details_Set() const{
    return m_convert_job_details_isSet;
}

bool OAIBackgroundJobLogEntry::is_convert_job_details_Valid() const{
    return m_convert_job_details_isValid;
}

QString OAIBackgroundJobLogEntry::getFinishTime() const {
    return m_finish_time;
}
void OAIBackgroundJobLogEntry::setFinishTime(const QString &finish_time) {
    m_finish_time = finish_time;
    m_finish_time_isSet = true;
}

bool OAIBackgroundJobLogEntry::is_finish_time_Set() const{
    return m_finish_time_isSet;
}

bool OAIBackgroundJobLogEntry::is_finish_time_Valid() const{
    return m_finish_time_isValid;
}

QString OAIBackgroundJobLogEntry::getId() const {
    return m_id;
}
void OAIBackgroundJobLogEntry::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBackgroundJobLogEntry::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBackgroundJobLogEntry::is_id_Valid() const{
    return m_id_isValid;
}

OAIImportRulesJobDetails OAIBackgroundJobLogEntry::getImportRulesJobDetails() const {
    return m_import_rules_job_details;
}
void OAIBackgroundJobLogEntry::setImportRulesJobDetails(const OAIImportRulesJobDetails &import_rules_job_details) {
    m_import_rules_job_details = import_rules_job_details;
    m_import_rules_job_details_isSet = true;
}

bool OAIBackgroundJobLogEntry::is_import_rules_job_details_Set() const{
    return m_import_rules_job_details_isSet;
}

bool OAIBackgroundJobLogEntry::is_import_rules_job_details_Valid() const{
    return m_import_rules_job_details_isValid;
}

QString OAIBackgroundJobLogEntry::getJobType() const {
    return m_job_type;
}
void OAIBackgroundJobLogEntry::setJobType(const QString &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIBackgroundJobLogEntry::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIBackgroundJobLogEntry::is_job_type_Valid() const{
    return m_job_type_isValid;
}

bool OAIBackgroundJobLogEntry::isRequestAutocommit() const {
    return m_request_autocommit;
}
void OAIBackgroundJobLogEntry::setRequestAutocommit(const bool &request_autocommit) {
    m_request_autocommit = request_autocommit;
    m_request_autocommit_isSet = true;
}

bool OAIBackgroundJobLogEntry::is_request_autocommit_Set() const{
    return m_request_autocommit_isSet;
}

bool OAIBackgroundJobLogEntry::is_request_autocommit_Valid() const{
    return m_request_autocommit_isValid;
}

OAISeedJobDetails OAIBackgroundJobLogEntry::getSeedJobDetails() const {
    return m_seed_job_details;
}
void OAIBackgroundJobLogEntry::setSeedJobDetails(const OAISeedJobDetails &seed_job_details) {
    m_seed_job_details = seed_job_details;
    m_seed_job_details_isSet = true;
}

bool OAIBackgroundJobLogEntry::is_seed_job_details_Set() const{
    return m_seed_job_details_isSet;
}

bool OAIBackgroundJobLogEntry::is_seed_job_details_Valid() const{
    return m_seed_job_details_isValid;
}

QString OAIBackgroundJobLogEntry::getStartTime() const {
    return m_start_time;
}
void OAIBackgroundJobLogEntry::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBackgroundJobLogEntry::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBackgroundJobLogEntry::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIBackgroundJobLogEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_job_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_job_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_rules_job_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_autocommit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seed_job_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackgroundJobLogEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
