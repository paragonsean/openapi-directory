/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversionWorkspace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversionWorkspace::OAIConversionWorkspace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversionWorkspace::OAIConversionWorkspace() {
    this->initializeModel();
}

OAIConversionWorkspace::~OAIConversionWorkspace() {}

void OAIConversionWorkspace::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_global_settings_isSet = false;
    m_global_settings_isValid = false;

    m_has_uncommitted_changes_isSet = false;
    m_has_uncommitted_changes_isValid = false;

    m_latest_commit_id_isSet = false;
    m_latest_commit_id_isValid = false;

    m_latest_commit_time_isSet = false;
    m_latest_commit_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIConversionWorkspace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversionWorkspace::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_global_settings_isValid = ::OpenAPI::fromJsonValue(m_global_settings, json[QString("globalSettings")]);
    m_global_settings_isSet = !json[QString("globalSettings")].isNull() && m_global_settings_isValid;

    m_has_uncommitted_changes_isValid = ::OpenAPI::fromJsonValue(m_has_uncommitted_changes, json[QString("hasUncommittedChanges")]);
    m_has_uncommitted_changes_isSet = !json[QString("hasUncommittedChanges")].isNull() && m_has_uncommitted_changes_isValid;

    m_latest_commit_id_isValid = ::OpenAPI::fromJsonValue(m_latest_commit_id, json[QString("latestCommitId")]);
    m_latest_commit_id_isSet = !json[QString("latestCommitId")].isNull() && m_latest_commit_id_isValid;

    m_latest_commit_time_isValid = ::OpenAPI::fromJsonValue(m_latest_commit_time, json[QString("latestCommitTime")]);
    m_latest_commit_time_isSet = !json[QString("latestCommitTime")].isNull() && m_latest_commit_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIConversionWorkspace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversionWorkspace::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_global_settings.size() > 0) {
        obj.insert(QString("globalSettings"), ::OpenAPI::toJsonValue(m_global_settings));
    }
    if (m_has_uncommitted_changes_isSet) {
        obj.insert(QString("hasUncommittedChanges"), ::OpenAPI::toJsonValue(m_has_uncommitted_changes));
    }
    if (m_latest_commit_id_isSet) {
        obj.insert(QString("latestCommitId"), ::OpenAPI::toJsonValue(m_latest_commit_id));
    }
    if (m_latest_commit_time_isSet) {
        obj.insert(QString("latestCommitTime"), ::OpenAPI::toJsonValue(m_latest_commit_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIConversionWorkspace::getCreateTime() const {
    return m_create_time;
}
void OAIConversionWorkspace::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIConversionWorkspace::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIConversionWorkspace::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIDatabaseEngineInfo OAIConversionWorkspace::getDestination() const {
    return m_destination;
}
void OAIConversionWorkspace::setDestination(const OAIDatabaseEngineInfo &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIConversionWorkspace::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIConversionWorkspace::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIConversionWorkspace::getDisplayName() const {
    return m_display_name;
}
void OAIConversionWorkspace::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIConversionWorkspace::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIConversionWorkspace::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QMap<QString, QString> OAIConversionWorkspace::getGlobalSettings() const {
    return m_global_settings;
}
void OAIConversionWorkspace::setGlobalSettings(const QMap<QString, QString> &global_settings) {
    m_global_settings = global_settings;
    m_global_settings_isSet = true;
}

bool OAIConversionWorkspace::is_global_settings_Set() const{
    return m_global_settings_isSet;
}

bool OAIConversionWorkspace::is_global_settings_Valid() const{
    return m_global_settings_isValid;
}

bool OAIConversionWorkspace::isHasUncommittedChanges() const {
    return m_has_uncommitted_changes;
}
void OAIConversionWorkspace::setHasUncommittedChanges(const bool &has_uncommitted_changes) {
    m_has_uncommitted_changes = has_uncommitted_changes;
    m_has_uncommitted_changes_isSet = true;
}

bool OAIConversionWorkspace::is_has_uncommitted_changes_Set() const{
    return m_has_uncommitted_changes_isSet;
}

bool OAIConversionWorkspace::is_has_uncommitted_changes_Valid() const{
    return m_has_uncommitted_changes_isValid;
}

QString OAIConversionWorkspace::getLatestCommitId() const {
    return m_latest_commit_id;
}
void OAIConversionWorkspace::setLatestCommitId(const QString &latest_commit_id) {
    m_latest_commit_id = latest_commit_id;
    m_latest_commit_id_isSet = true;
}

bool OAIConversionWorkspace::is_latest_commit_id_Set() const{
    return m_latest_commit_id_isSet;
}

bool OAIConversionWorkspace::is_latest_commit_id_Valid() const{
    return m_latest_commit_id_isValid;
}

QString OAIConversionWorkspace::getLatestCommitTime() const {
    return m_latest_commit_time;
}
void OAIConversionWorkspace::setLatestCommitTime(const QString &latest_commit_time) {
    m_latest_commit_time = latest_commit_time;
    m_latest_commit_time_isSet = true;
}

bool OAIConversionWorkspace::is_latest_commit_time_Set() const{
    return m_latest_commit_time_isSet;
}

bool OAIConversionWorkspace::is_latest_commit_time_Valid() const{
    return m_latest_commit_time_isValid;
}

QString OAIConversionWorkspace::getName() const {
    return m_name;
}
void OAIConversionWorkspace::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConversionWorkspace::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConversionWorkspace::is_name_Valid() const{
    return m_name_isValid;
}

OAIDatabaseEngineInfo OAIConversionWorkspace::getSource() const {
    return m_source;
}
void OAIConversionWorkspace::setSource(const OAIDatabaseEngineInfo &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIConversionWorkspace::is_source_Set() const{
    return m_source_isSet;
}

bool OAIConversionWorkspace::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIConversionWorkspace::getUpdateTime() const {
    return m_update_time;
}
void OAIConversionWorkspace::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIConversionWorkspace::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIConversionWorkspace::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIConversionWorkspace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_uncommitted_changes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_commit_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversionWorkspace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
