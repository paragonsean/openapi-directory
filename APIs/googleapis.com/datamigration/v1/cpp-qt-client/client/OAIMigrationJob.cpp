/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrationJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrationJob::OAIMigrationJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrationJob::OAIMigrationJob() {
    this->initializeModel();
}

OAIMigrationJob::~OAIMigrationJob() {}

void OAIMigrationJob::initializeModel() {

    m_cmek_key_name_isSet = false;
    m_cmek_key_name_isValid = false;

    m_conversion_workspace_isSet = false;
    m_conversion_workspace_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_destination_database_isSet = false;
    m_destination_database_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_dump_flags_isSet = false;
    m_dump_flags_isValid = false;

    m_dump_path_isSet = false;
    m_dump_path_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_performance_config_isSet = false;
    m_performance_config_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_reverse_ssh_connectivity_isSet = false;
    m_reverse_ssh_connectivity_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_database_isSet = false;
    m_source_database_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_static_ip_connectivity_isSet = false;
    m_static_ip_connectivity_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_vpc_peering_connectivity_isSet = false;
    m_vpc_peering_connectivity_isValid = false;
}

void OAIMigrationJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrationJob::fromJsonObject(QJsonObject json) {

    m_cmek_key_name_isValid = ::OpenAPI::fromJsonValue(m_cmek_key_name, json[QString("cmekKeyName")]);
    m_cmek_key_name_isSet = !json[QString("cmekKeyName")].isNull() && m_cmek_key_name_isValid;

    m_conversion_workspace_isValid = ::OpenAPI::fromJsonValue(m_conversion_workspace, json[QString("conversionWorkspace")]);
    m_conversion_workspace_isSet = !json[QString("conversionWorkspace")].isNull() && m_conversion_workspace_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_destination_database_isValid = ::OpenAPI::fromJsonValue(m_destination_database, json[QString("destinationDatabase")]);
    m_destination_database_isSet = !json[QString("destinationDatabase")].isNull() && m_destination_database_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_dump_flags_isValid = ::OpenAPI::fromJsonValue(m_dump_flags, json[QString("dumpFlags")]);
    m_dump_flags_isSet = !json[QString("dumpFlags")].isNull() && m_dump_flags_isValid;

    m_dump_path_isValid = ::OpenAPI::fromJsonValue(m_dump_path, json[QString("dumpPath")]);
    m_dump_path_isSet = !json[QString("dumpPath")].isNull() && m_dump_path_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_performance_config_isValid = ::OpenAPI::fromJsonValue(m_performance_config, json[QString("performanceConfig")]);
    m_performance_config_isSet = !json[QString("performanceConfig")].isNull() && m_performance_config_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_reverse_ssh_connectivity_isValid = ::OpenAPI::fromJsonValue(m_reverse_ssh_connectivity, json[QString("reverseSshConnectivity")]);
    m_reverse_ssh_connectivity_isSet = !json[QString("reverseSshConnectivity")].isNull() && m_reverse_ssh_connectivity_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_database_isValid = ::OpenAPI::fromJsonValue(m_source_database, json[QString("sourceDatabase")]);
    m_source_database_isSet = !json[QString("sourceDatabase")].isNull() && m_source_database_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_static_ip_connectivity_isValid = ::OpenAPI::fromJsonValue(m_static_ip_connectivity, json[QString("staticIpConnectivity")]);
    m_static_ip_connectivity_isSet = !json[QString("staticIpConnectivity")].isNull() && m_static_ip_connectivity_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_vpc_peering_connectivity_isValid = ::OpenAPI::fromJsonValue(m_vpc_peering_connectivity, json[QString("vpcPeeringConnectivity")]);
    m_vpc_peering_connectivity_isSet = !json[QString("vpcPeeringConnectivity")].isNull() && m_vpc_peering_connectivity_isValid;
}

QString OAIMigrationJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrationJob::asJsonObject() const {
    QJsonObject obj;
    if (m_cmek_key_name_isSet) {
        obj.insert(QString("cmekKeyName"), ::OpenAPI::toJsonValue(m_cmek_key_name));
    }
    if (m_conversion_workspace.isSet()) {
        obj.insert(QString("conversionWorkspace"), ::OpenAPI::toJsonValue(m_conversion_workspace));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_destination_database.isSet()) {
        obj.insert(QString("destinationDatabase"), ::OpenAPI::toJsonValue(m_destination_database));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_dump_flags.isSet()) {
        obj.insert(QString("dumpFlags"), ::OpenAPI::toJsonValue(m_dump_flags));
    }
    if (m_dump_path_isSet) {
        obj.insert(QString("dumpPath"), ::OpenAPI::toJsonValue(m_dump_path));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_performance_config.isSet()) {
        obj.insert(QString("performanceConfig"), ::OpenAPI::toJsonValue(m_performance_config));
    }
    if (m_phase_isSet) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_reverse_ssh_connectivity.isSet()) {
        obj.insert(QString("reverseSshConnectivity"), ::OpenAPI::toJsonValue(m_reverse_ssh_connectivity));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_database.isSet()) {
        obj.insert(QString("sourceDatabase"), ::OpenAPI::toJsonValue(m_source_database));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_static_ip_connectivity_isSet) {
        obj.insert(QString("staticIpConnectivity"), ::OpenAPI::toJsonValue(m_static_ip_connectivity));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_vpc_peering_connectivity.isSet()) {
        obj.insert(QString("vpcPeeringConnectivity"), ::OpenAPI::toJsonValue(m_vpc_peering_connectivity));
    }
    return obj;
}

QString OAIMigrationJob::getCmekKeyName() const {
    return m_cmek_key_name;
}
void OAIMigrationJob::setCmekKeyName(const QString &cmek_key_name) {
    m_cmek_key_name = cmek_key_name;
    m_cmek_key_name_isSet = true;
}

bool OAIMigrationJob::is_cmek_key_name_Set() const{
    return m_cmek_key_name_isSet;
}

bool OAIMigrationJob::is_cmek_key_name_Valid() const{
    return m_cmek_key_name_isValid;
}

OAIConversionWorkspaceInfo OAIMigrationJob::getConversionWorkspace() const {
    return m_conversion_workspace;
}
void OAIMigrationJob::setConversionWorkspace(const OAIConversionWorkspaceInfo &conversion_workspace) {
    m_conversion_workspace = conversion_workspace;
    m_conversion_workspace_isSet = true;
}

bool OAIMigrationJob::is_conversion_workspace_Set() const{
    return m_conversion_workspace_isSet;
}

bool OAIMigrationJob::is_conversion_workspace_Valid() const{
    return m_conversion_workspace_isValid;
}

QString OAIMigrationJob::getCreateTime() const {
    return m_create_time;
}
void OAIMigrationJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMigrationJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMigrationJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIMigrationJob::getDestination() const {
    return m_destination;
}
void OAIMigrationJob::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIMigrationJob::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIMigrationJob::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIDatabaseType OAIMigrationJob::getDestinationDatabase() const {
    return m_destination_database;
}
void OAIMigrationJob::setDestinationDatabase(const OAIDatabaseType &destination_database) {
    m_destination_database = destination_database;
    m_destination_database_isSet = true;
}

bool OAIMigrationJob::is_destination_database_Set() const{
    return m_destination_database_isSet;
}

bool OAIMigrationJob::is_destination_database_Valid() const{
    return m_destination_database_isValid;
}

QString OAIMigrationJob::getDisplayName() const {
    return m_display_name;
}
void OAIMigrationJob::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMigrationJob::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMigrationJob::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIDumpFlags OAIMigrationJob::getDumpFlags() const {
    return m_dump_flags;
}
void OAIMigrationJob::setDumpFlags(const OAIDumpFlags &dump_flags) {
    m_dump_flags = dump_flags;
    m_dump_flags_isSet = true;
}

bool OAIMigrationJob::is_dump_flags_Set() const{
    return m_dump_flags_isSet;
}

bool OAIMigrationJob::is_dump_flags_Valid() const{
    return m_dump_flags_isValid;
}

QString OAIMigrationJob::getDumpPath() const {
    return m_dump_path;
}
void OAIMigrationJob::setDumpPath(const QString &dump_path) {
    m_dump_path = dump_path;
    m_dump_path_isSet = true;
}

bool OAIMigrationJob::is_dump_path_Set() const{
    return m_dump_path_isSet;
}

bool OAIMigrationJob::is_dump_path_Valid() const{
    return m_dump_path_isValid;
}

QString OAIMigrationJob::getDuration() const {
    return m_duration;
}
void OAIMigrationJob::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIMigrationJob::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIMigrationJob::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIMigrationJob::getEndTime() const {
    return m_end_time;
}
void OAIMigrationJob::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIMigrationJob::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIMigrationJob::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIStatus OAIMigrationJob::getError() const {
    return m_error;
}
void OAIMigrationJob::setError(const OAIStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIMigrationJob::is_error_Set() const{
    return m_error_isSet;
}

bool OAIMigrationJob::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIMigrationJob::getFilter() const {
    return m_filter;
}
void OAIMigrationJob::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIMigrationJob::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIMigrationJob::is_filter_Valid() const{
    return m_filter_isValid;
}

QMap<QString, QString> OAIMigrationJob::getLabels() const {
    return m_labels;
}
void OAIMigrationJob::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIMigrationJob::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIMigrationJob::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIMigrationJob::getName() const {
    return m_name;
}
void OAIMigrationJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMigrationJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMigrationJob::is_name_Valid() const{
    return m_name_isValid;
}

OAIPerformanceConfig OAIMigrationJob::getPerformanceConfig() const {
    return m_performance_config;
}
void OAIMigrationJob::setPerformanceConfig(const OAIPerformanceConfig &performance_config) {
    m_performance_config = performance_config;
    m_performance_config_isSet = true;
}

bool OAIMigrationJob::is_performance_config_Set() const{
    return m_performance_config_isSet;
}

bool OAIMigrationJob::is_performance_config_Valid() const{
    return m_performance_config_isValid;
}

QString OAIMigrationJob::getPhase() const {
    return m_phase;
}
void OAIMigrationJob::setPhase(const QString &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIMigrationJob::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIMigrationJob::is_phase_Valid() const{
    return m_phase_isValid;
}

OAIReverseSshConnectivity OAIMigrationJob::getReverseSshConnectivity() const {
    return m_reverse_ssh_connectivity;
}
void OAIMigrationJob::setReverseSshConnectivity(const OAIReverseSshConnectivity &reverse_ssh_connectivity) {
    m_reverse_ssh_connectivity = reverse_ssh_connectivity;
    m_reverse_ssh_connectivity_isSet = true;
}

bool OAIMigrationJob::is_reverse_ssh_connectivity_Set() const{
    return m_reverse_ssh_connectivity_isSet;
}

bool OAIMigrationJob::is_reverse_ssh_connectivity_Valid() const{
    return m_reverse_ssh_connectivity_isValid;
}

QString OAIMigrationJob::getSource() const {
    return m_source;
}
void OAIMigrationJob::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIMigrationJob::is_source_Set() const{
    return m_source_isSet;
}

bool OAIMigrationJob::is_source_Valid() const{
    return m_source_isValid;
}

OAIDatabaseType OAIMigrationJob::getSourceDatabase() const {
    return m_source_database;
}
void OAIMigrationJob::setSourceDatabase(const OAIDatabaseType &source_database) {
    m_source_database = source_database;
    m_source_database_isSet = true;
}

bool OAIMigrationJob::is_source_database_Set() const{
    return m_source_database_isSet;
}

bool OAIMigrationJob::is_source_database_Valid() const{
    return m_source_database_isValid;
}

QString OAIMigrationJob::getState() const {
    return m_state;
}
void OAIMigrationJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMigrationJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMigrationJob::is_state_Valid() const{
    return m_state_isValid;
}

OAIObject OAIMigrationJob::getStaticIpConnectivity() const {
    return m_static_ip_connectivity;
}
void OAIMigrationJob::setStaticIpConnectivity(const OAIObject &static_ip_connectivity) {
    m_static_ip_connectivity = static_ip_connectivity;
    m_static_ip_connectivity_isSet = true;
}

bool OAIMigrationJob::is_static_ip_connectivity_Set() const{
    return m_static_ip_connectivity_isSet;
}

bool OAIMigrationJob::is_static_ip_connectivity_Valid() const{
    return m_static_ip_connectivity_isValid;
}

QString OAIMigrationJob::getType() const {
    return m_type;
}
void OAIMigrationJob::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMigrationJob::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMigrationJob::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMigrationJob::getUpdateTime() const {
    return m_update_time;
}
void OAIMigrationJob::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIMigrationJob::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIMigrationJob::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIVpcPeeringConnectivity OAIMigrationJob::getVpcPeeringConnectivity() const {
    return m_vpc_peering_connectivity;
}
void OAIMigrationJob::setVpcPeeringConnectivity(const OAIVpcPeeringConnectivity &vpc_peering_connectivity) {
    m_vpc_peering_connectivity = vpc_peering_connectivity;
    m_vpc_peering_connectivity_isSet = true;
}

bool OAIMigrationJob::is_vpc_peering_connectivity_Set() const{
    return m_vpc_peering_connectivity_isSet;
}

bool OAIMigrationJob::is_vpc_peering_connectivity_Valid() const{
    return m_vpc_peering_connectivity_isValid;
}

bool OAIMigrationJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cmek_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_workspace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dump_flags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dump_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_ssh_connectivity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_ip_connectivity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_peering_connectivity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrationJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
