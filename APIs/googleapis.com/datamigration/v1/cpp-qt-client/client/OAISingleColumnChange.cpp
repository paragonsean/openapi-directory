/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISingleColumnChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISingleColumnChange::OAISingleColumnChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISingleColumnChange::OAISingleColumnChange() {
    this->initializeModel();
}

OAISingleColumnChange::~OAISingleColumnChange() {}

void OAISingleColumnChange::initializeModel() {

    m_array_isSet = false;
    m_array_isValid = false;

    m_array_length_isSet = false;
    m_array_length_isValid = false;

    m_auto_generated_isSet = false;
    m_auto_generated_isValid = false;

    m_charset_isSet = false;
    m_charset_isValid = false;

    m_collation_isSet = false;
    m_collation_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_custom_features_isSet = false;
    m_custom_features_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_fractional_seconds_precision_isSet = false;
    m_fractional_seconds_precision_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_nullable_isSet = false;
    m_nullable_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_set_values_isSet = false;
    m_set_values_isValid = false;

    m_udt_isSet = false;
    m_udt_isValid = false;
}

void OAISingleColumnChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISingleColumnChange::fromJsonObject(QJsonObject json) {

    m_array_isValid = ::OpenAPI::fromJsonValue(m_array, json[QString("array")]);
    m_array_isSet = !json[QString("array")].isNull() && m_array_isValid;

    m_array_length_isValid = ::OpenAPI::fromJsonValue(m_array_length, json[QString("arrayLength")]);
    m_array_length_isSet = !json[QString("arrayLength")].isNull() && m_array_length_isValid;

    m_auto_generated_isValid = ::OpenAPI::fromJsonValue(m_auto_generated, json[QString("autoGenerated")]);
    m_auto_generated_isSet = !json[QString("autoGenerated")].isNull() && m_auto_generated_isValid;

    m_charset_isValid = ::OpenAPI::fromJsonValue(m_charset, json[QString("charset")]);
    m_charset_isSet = !json[QString("charset")].isNull() && m_charset_isValid;

    m_collation_isValid = ::OpenAPI::fromJsonValue(m_collation, json[QString("collation")]);
    m_collation_isSet = !json[QString("collation")].isNull() && m_collation_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_custom_features_isValid = ::OpenAPI::fromJsonValue(m_custom_features, json[QString("customFeatures")]);
    m_custom_features_isSet = !json[QString("customFeatures")].isNull() && m_custom_features_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_fractional_seconds_precision_isValid = ::OpenAPI::fromJsonValue(m_fractional_seconds_precision, json[QString("fractionalSecondsPrecision")]);
    m_fractional_seconds_precision_isSet = !json[QString("fractionalSecondsPrecision")].isNull() && m_fractional_seconds_precision_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_nullable_isValid = ::OpenAPI::fromJsonValue(m_nullable, json[QString("nullable")]);
    m_nullable_isSet = !json[QString("nullable")].isNull() && m_nullable_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("precision")]);
    m_precision_isSet = !json[QString("precision")].isNull() && m_precision_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;

    m_set_values_isValid = ::OpenAPI::fromJsonValue(m_set_values, json[QString("setValues")]);
    m_set_values_isSet = !json[QString("setValues")].isNull() && m_set_values_isValid;

    m_udt_isValid = ::OpenAPI::fromJsonValue(m_udt, json[QString("udt")]);
    m_udt_isSet = !json[QString("udt")].isNull() && m_udt_isValid;
}

QString OAISingleColumnChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISingleColumnChange::asJsonObject() const {
    QJsonObject obj;
    if (m_array_isSet) {
        obj.insert(QString("array"), ::OpenAPI::toJsonValue(m_array));
    }
    if (m_array_length_isSet) {
        obj.insert(QString("arrayLength"), ::OpenAPI::toJsonValue(m_array_length));
    }
    if (m_auto_generated_isSet) {
        obj.insert(QString("autoGenerated"), ::OpenAPI::toJsonValue(m_auto_generated));
    }
    if (m_charset_isSet) {
        obj.insert(QString("charset"), ::OpenAPI::toJsonValue(m_charset));
    }
    if (m_collation_isSet) {
        obj.insert(QString("collation"), ::OpenAPI::toJsonValue(m_collation));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_custom_features.size() > 0) {
        obj.insert(QString("customFeatures"), ::OpenAPI::toJsonValue(m_custom_features));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_fractional_seconds_precision_isSet) {
        obj.insert(QString("fractionalSecondsPrecision"), ::OpenAPI::toJsonValue(m_fractional_seconds_precision));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_nullable_isSet) {
        obj.insert(QString("nullable"), ::OpenAPI::toJsonValue(m_nullable));
    }
    if (m_precision_isSet) {
        obj.insert(QString("precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    if (m_scale_isSet) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_set_values.size() > 0) {
        obj.insert(QString("setValues"), ::OpenAPI::toJsonValue(m_set_values));
    }
    if (m_udt_isSet) {
        obj.insert(QString("udt"), ::OpenAPI::toJsonValue(m_udt));
    }
    return obj;
}

bool OAISingleColumnChange::isArray() const {
    return m_array;
}
void OAISingleColumnChange::setArray(const bool &array) {
    m_array = array;
    m_array_isSet = true;
}

bool OAISingleColumnChange::is_array_Set() const{
    return m_array_isSet;
}

bool OAISingleColumnChange::is_array_Valid() const{
    return m_array_isValid;
}

qint32 OAISingleColumnChange::getArrayLength() const {
    return m_array_length;
}
void OAISingleColumnChange::setArrayLength(const qint32 &array_length) {
    m_array_length = array_length;
    m_array_length_isSet = true;
}

bool OAISingleColumnChange::is_array_length_Set() const{
    return m_array_length_isSet;
}

bool OAISingleColumnChange::is_array_length_Valid() const{
    return m_array_length_isValid;
}

bool OAISingleColumnChange::isAutoGenerated() const {
    return m_auto_generated;
}
void OAISingleColumnChange::setAutoGenerated(const bool &auto_generated) {
    m_auto_generated = auto_generated;
    m_auto_generated_isSet = true;
}

bool OAISingleColumnChange::is_auto_generated_Set() const{
    return m_auto_generated_isSet;
}

bool OAISingleColumnChange::is_auto_generated_Valid() const{
    return m_auto_generated_isValid;
}

QString OAISingleColumnChange::getCharset() const {
    return m_charset;
}
void OAISingleColumnChange::setCharset(const QString &charset) {
    m_charset = charset;
    m_charset_isSet = true;
}

bool OAISingleColumnChange::is_charset_Set() const{
    return m_charset_isSet;
}

bool OAISingleColumnChange::is_charset_Valid() const{
    return m_charset_isValid;
}

QString OAISingleColumnChange::getCollation() const {
    return m_collation;
}
void OAISingleColumnChange::setCollation(const QString &collation) {
    m_collation = collation;
    m_collation_isSet = true;
}

bool OAISingleColumnChange::is_collation_Set() const{
    return m_collation_isSet;
}

bool OAISingleColumnChange::is_collation_Valid() const{
    return m_collation_isValid;
}

QString OAISingleColumnChange::getComment() const {
    return m_comment;
}
void OAISingleColumnChange::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAISingleColumnChange::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAISingleColumnChange::is_comment_Valid() const{
    return m_comment_isValid;
}

QMap<QString, QJsonValue> OAISingleColumnChange::getCustomFeatures() const {
    return m_custom_features;
}
void OAISingleColumnChange::setCustomFeatures(const QMap<QString, QJsonValue> &custom_features) {
    m_custom_features = custom_features;
    m_custom_features_isSet = true;
}

bool OAISingleColumnChange::is_custom_features_Set() const{
    return m_custom_features_isSet;
}

bool OAISingleColumnChange::is_custom_features_Valid() const{
    return m_custom_features_isValid;
}

QString OAISingleColumnChange::getDataType() const {
    return m_data_type;
}
void OAISingleColumnChange::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAISingleColumnChange::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAISingleColumnChange::is_data_type_Valid() const{
    return m_data_type_isValid;
}

qint32 OAISingleColumnChange::getFractionalSecondsPrecision() const {
    return m_fractional_seconds_precision;
}
void OAISingleColumnChange::setFractionalSecondsPrecision(const qint32 &fractional_seconds_precision) {
    m_fractional_seconds_precision = fractional_seconds_precision;
    m_fractional_seconds_precision_isSet = true;
}

bool OAISingleColumnChange::is_fractional_seconds_precision_Set() const{
    return m_fractional_seconds_precision_isSet;
}

bool OAISingleColumnChange::is_fractional_seconds_precision_Valid() const{
    return m_fractional_seconds_precision_isValid;
}

QString OAISingleColumnChange::getLength() const {
    return m_length;
}
void OAISingleColumnChange::setLength(const QString &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAISingleColumnChange::is_length_Set() const{
    return m_length_isSet;
}

bool OAISingleColumnChange::is_length_Valid() const{
    return m_length_isValid;
}

bool OAISingleColumnChange::isNullable() const {
    return m_nullable;
}
void OAISingleColumnChange::setNullable(const bool &nullable) {
    m_nullable = nullable;
    m_nullable_isSet = true;
}

bool OAISingleColumnChange::is_nullable_Set() const{
    return m_nullable_isSet;
}

bool OAISingleColumnChange::is_nullable_Valid() const{
    return m_nullable_isValid;
}

qint32 OAISingleColumnChange::getPrecision() const {
    return m_precision;
}
void OAISingleColumnChange::setPrecision(const qint32 &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAISingleColumnChange::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAISingleColumnChange::is_precision_Valid() const{
    return m_precision_isValid;
}

qint32 OAISingleColumnChange::getScale() const {
    return m_scale;
}
void OAISingleColumnChange::setScale(const qint32 &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAISingleColumnChange::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAISingleColumnChange::is_scale_Valid() const{
    return m_scale_isValid;
}

QList<QString> OAISingleColumnChange::getSetValues() const {
    return m_set_values;
}
void OAISingleColumnChange::setSetValues(const QList<QString> &set_values) {
    m_set_values = set_values;
    m_set_values_isSet = true;
}

bool OAISingleColumnChange::is_set_values_Set() const{
    return m_set_values_isSet;
}

bool OAISingleColumnChange::is_set_values_Valid() const{
    return m_set_values_isValid;
}

bool OAISingleColumnChange::isUdt() const {
    return m_udt;
}
void OAISingleColumnChange::setUdt(const bool &udt) {
    m_udt = udt;
    m_udt_isSet = true;
}

bool OAISingleColumnChange::is_udt_Set() const{
    return m_udt_isSet;
}

bool OAISingleColumnChange::is_udt_Valid() const{
    return m_udt_isValid;
}

bool OAISingleColumnChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_array_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_array_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_generated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fractional_seconds_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nullable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_udt_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISingleColumnChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
