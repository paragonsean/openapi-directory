/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateTcpProxyScriptRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateTcpProxyScriptRequest::OAIGenerateTcpProxyScriptRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateTcpProxyScriptRequest::OAIGenerateTcpProxyScriptRequest() {
    this->initializeModel();
}

OAIGenerateTcpProxyScriptRequest::~OAIGenerateTcpProxyScriptRequest() {}

void OAIGenerateTcpProxyScriptRequest::initializeModel() {

    m_vm_machine_type_isSet = false;
    m_vm_machine_type_isValid = false;

    m_vm_name_isSet = false;
    m_vm_name_isValid = false;

    m_vm_subnet_isSet = false;
    m_vm_subnet_isValid = false;

    m_vm_zone_isSet = false;
    m_vm_zone_isValid = false;
}

void OAIGenerateTcpProxyScriptRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateTcpProxyScriptRequest::fromJsonObject(QJsonObject json) {

    m_vm_machine_type_isValid = ::OpenAPI::fromJsonValue(m_vm_machine_type, json[QString("vmMachineType")]);
    m_vm_machine_type_isSet = !json[QString("vmMachineType")].isNull() && m_vm_machine_type_isValid;

    m_vm_name_isValid = ::OpenAPI::fromJsonValue(m_vm_name, json[QString("vmName")]);
    m_vm_name_isSet = !json[QString("vmName")].isNull() && m_vm_name_isValid;

    m_vm_subnet_isValid = ::OpenAPI::fromJsonValue(m_vm_subnet, json[QString("vmSubnet")]);
    m_vm_subnet_isSet = !json[QString("vmSubnet")].isNull() && m_vm_subnet_isValid;

    m_vm_zone_isValid = ::OpenAPI::fromJsonValue(m_vm_zone, json[QString("vmZone")]);
    m_vm_zone_isSet = !json[QString("vmZone")].isNull() && m_vm_zone_isValid;
}

QString OAIGenerateTcpProxyScriptRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateTcpProxyScriptRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_vm_machine_type_isSet) {
        obj.insert(QString("vmMachineType"), ::OpenAPI::toJsonValue(m_vm_machine_type));
    }
    if (m_vm_name_isSet) {
        obj.insert(QString("vmName"), ::OpenAPI::toJsonValue(m_vm_name));
    }
    if (m_vm_subnet_isSet) {
        obj.insert(QString("vmSubnet"), ::OpenAPI::toJsonValue(m_vm_subnet));
    }
    if (m_vm_zone_isSet) {
        obj.insert(QString("vmZone"), ::OpenAPI::toJsonValue(m_vm_zone));
    }
    return obj;
}

QString OAIGenerateTcpProxyScriptRequest::getVmMachineType() const {
    return m_vm_machine_type;
}
void OAIGenerateTcpProxyScriptRequest::setVmMachineType(const QString &vm_machine_type) {
    m_vm_machine_type = vm_machine_type;
    m_vm_machine_type_isSet = true;
}

bool OAIGenerateTcpProxyScriptRequest::is_vm_machine_type_Set() const{
    return m_vm_machine_type_isSet;
}

bool OAIGenerateTcpProxyScriptRequest::is_vm_machine_type_Valid() const{
    return m_vm_machine_type_isValid;
}

QString OAIGenerateTcpProxyScriptRequest::getVmName() const {
    return m_vm_name;
}
void OAIGenerateTcpProxyScriptRequest::setVmName(const QString &vm_name) {
    m_vm_name = vm_name;
    m_vm_name_isSet = true;
}

bool OAIGenerateTcpProxyScriptRequest::is_vm_name_Set() const{
    return m_vm_name_isSet;
}

bool OAIGenerateTcpProxyScriptRequest::is_vm_name_Valid() const{
    return m_vm_name_isValid;
}

QString OAIGenerateTcpProxyScriptRequest::getVmSubnet() const {
    return m_vm_subnet;
}
void OAIGenerateTcpProxyScriptRequest::setVmSubnet(const QString &vm_subnet) {
    m_vm_subnet = vm_subnet;
    m_vm_subnet_isSet = true;
}

bool OAIGenerateTcpProxyScriptRequest::is_vm_subnet_Set() const{
    return m_vm_subnet_isSet;
}

bool OAIGenerateTcpProxyScriptRequest::is_vm_subnet_Valid() const{
    return m_vm_subnet_isValid;
}

QString OAIGenerateTcpProxyScriptRequest::getVmZone() const {
    return m_vm_zone;
}
void OAIGenerateTcpProxyScriptRequest::setVmZone(const QString &vm_zone) {
    m_vm_zone = vm_zone;
    m_vm_zone_isSet = true;
}

bool OAIGenerateTcpProxyScriptRequest::is_vm_zone_Set() const{
    return m_vm_zone_isSet;
}

bool OAIGenerateTcpProxyScriptRequest::is_vm_zone_Valid() const{
    return m_vm_zone_isValid;
}

bool OAIGenerateTcpProxyScriptRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vm_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateTcpProxyScriptRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
