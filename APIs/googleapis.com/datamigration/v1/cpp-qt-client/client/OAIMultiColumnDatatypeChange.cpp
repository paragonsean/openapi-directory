/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiColumnDatatypeChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiColumnDatatypeChange::OAIMultiColumnDatatypeChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiColumnDatatypeChange::OAIMultiColumnDatatypeChange() {
    this->initializeModel();
}

OAIMultiColumnDatatypeChange::~OAIMultiColumnDatatypeChange() {}

void OAIMultiColumnDatatypeChange::initializeModel() {

    m_custom_features_isSet = false;
    m_custom_features_isValid = false;

    m_new_data_type_isSet = false;
    m_new_data_type_isValid = false;

    m_override_fractional_seconds_precision_isSet = false;
    m_override_fractional_seconds_precision_isValid = false;

    m_override_length_isSet = false;
    m_override_length_isValid = false;

    m_override_precision_isSet = false;
    m_override_precision_isValid = false;

    m_override_scale_isSet = false;
    m_override_scale_isValid = false;

    m_source_data_type_filter_isSet = false;
    m_source_data_type_filter_isValid = false;

    m_source_numeric_filter_isSet = false;
    m_source_numeric_filter_isValid = false;

    m_source_text_filter_isSet = false;
    m_source_text_filter_isValid = false;
}

void OAIMultiColumnDatatypeChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiColumnDatatypeChange::fromJsonObject(QJsonObject json) {

    m_custom_features_isValid = ::OpenAPI::fromJsonValue(m_custom_features, json[QString("customFeatures")]);
    m_custom_features_isSet = !json[QString("customFeatures")].isNull() && m_custom_features_isValid;

    m_new_data_type_isValid = ::OpenAPI::fromJsonValue(m_new_data_type, json[QString("newDataType")]);
    m_new_data_type_isSet = !json[QString("newDataType")].isNull() && m_new_data_type_isValid;

    m_override_fractional_seconds_precision_isValid = ::OpenAPI::fromJsonValue(m_override_fractional_seconds_precision, json[QString("overrideFractionalSecondsPrecision")]);
    m_override_fractional_seconds_precision_isSet = !json[QString("overrideFractionalSecondsPrecision")].isNull() && m_override_fractional_seconds_precision_isValid;

    m_override_length_isValid = ::OpenAPI::fromJsonValue(m_override_length, json[QString("overrideLength")]);
    m_override_length_isSet = !json[QString("overrideLength")].isNull() && m_override_length_isValid;

    m_override_precision_isValid = ::OpenAPI::fromJsonValue(m_override_precision, json[QString("overridePrecision")]);
    m_override_precision_isSet = !json[QString("overridePrecision")].isNull() && m_override_precision_isValid;

    m_override_scale_isValid = ::OpenAPI::fromJsonValue(m_override_scale, json[QString("overrideScale")]);
    m_override_scale_isSet = !json[QString("overrideScale")].isNull() && m_override_scale_isValid;

    m_source_data_type_filter_isValid = ::OpenAPI::fromJsonValue(m_source_data_type_filter, json[QString("sourceDataTypeFilter")]);
    m_source_data_type_filter_isSet = !json[QString("sourceDataTypeFilter")].isNull() && m_source_data_type_filter_isValid;

    m_source_numeric_filter_isValid = ::OpenAPI::fromJsonValue(m_source_numeric_filter, json[QString("sourceNumericFilter")]);
    m_source_numeric_filter_isSet = !json[QString("sourceNumericFilter")].isNull() && m_source_numeric_filter_isValid;

    m_source_text_filter_isValid = ::OpenAPI::fromJsonValue(m_source_text_filter, json[QString("sourceTextFilter")]);
    m_source_text_filter_isSet = !json[QString("sourceTextFilter")].isNull() && m_source_text_filter_isValid;
}

QString OAIMultiColumnDatatypeChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiColumnDatatypeChange::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_features.size() > 0) {
        obj.insert(QString("customFeatures"), ::OpenAPI::toJsonValue(m_custom_features));
    }
    if (m_new_data_type_isSet) {
        obj.insert(QString("newDataType"), ::OpenAPI::toJsonValue(m_new_data_type));
    }
    if (m_override_fractional_seconds_precision_isSet) {
        obj.insert(QString("overrideFractionalSecondsPrecision"), ::OpenAPI::toJsonValue(m_override_fractional_seconds_precision));
    }
    if (m_override_length_isSet) {
        obj.insert(QString("overrideLength"), ::OpenAPI::toJsonValue(m_override_length));
    }
    if (m_override_precision_isSet) {
        obj.insert(QString("overridePrecision"), ::OpenAPI::toJsonValue(m_override_precision));
    }
    if (m_override_scale_isSet) {
        obj.insert(QString("overrideScale"), ::OpenAPI::toJsonValue(m_override_scale));
    }
    if (m_source_data_type_filter_isSet) {
        obj.insert(QString("sourceDataTypeFilter"), ::OpenAPI::toJsonValue(m_source_data_type_filter));
    }
    if (m_source_numeric_filter.isSet()) {
        obj.insert(QString("sourceNumericFilter"), ::OpenAPI::toJsonValue(m_source_numeric_filter));
    }
    if (m_source_text_filter.isSet()) {
        obj.insert(QString("sourceTextFilter"), ::OpenAPI::toJsonValue(m_source_text_filter));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIMultiColumnDatatypeChange::getCustomFeatures() const {
    return m_custom_features;
}
void OAIMultiColumnDatatypeChange::setCustomFeatures(const QMap<QString, QJsonValue> &custom_features) {
    m_custom_features = custom_features;
    m_custom_features_isSet = true;
}

bool OAIMultiColumnDatatypeChange::is_custom_features_Set() const{
    return m_custom_features_isSet;
}

bool OAIMultiColumnDatatypeChange::is_custom_features_Valid() const{
    return m_custom_features_isValid;
}

QString OAIMultiColumnDatatypeChange::getNewDataType() const {
    return m_new_data_type;
}
void OAIMultiColumnDatatypeChange::setNewDataType(const QString &new_data_type) {
    m_new_data_type = new_data_type;
    m_new_data_type_isSet = true;
}

bool OAIMultiColumnDatatypeChange::is_new_data_type_Set() const{
    return m_new_data_type_isSet;
}

bool OAIMultiColumnDatatypeChange::is_new_data_type_Valid() const{
    return m_new_data_type_isValid;
}

qint32 OAIMultiColumnDatatypeChange::getOverrideFractionalSecondsPrecision() const {
    return m_override_fractional_seconds_precision;
}
void OAIMultiColumnDatatypeChange::setOverrideFractionalSecondsPrecision(const qint32 &override_fractional_seconds_precision) {
    m_override_fractional_seconds_precision = override_fractional_seconds_precision;
    m_override_fractional_seconds_precision_isSet = true;
}

bool OAIMultiColumnDatatypeChange::is_override_fractional_seconds_precision_Set() const{
    return m_override_fractional_seconds_precision_isSet;
}

bool OAIMultiColumnDatatypeChange::is_override_fractional_seconds_precision_Valid() const{
    return m_override_fractional_seconds_precision_isValid;
}

QString OAIMultiColumnDatatypeChange::getOverrideLength() const {
    return m_override_length;
}
void OAIMultiColumnDatatypeChange::setOverrideLength(const QString &override_length) {
    m_override_length = override_length;
    m_override_length_isSet = true;
}

bool OAIMultiColumnDatatypeChange::is_override_length_Set() const{
    return m_override_length_isSet;
}

bool OAIMultiColumnDatatypeChange::is_override_length_Valid() const{
    return m_override_length_isValid;
}

qint32 OAIMultiColumnDatatypeChange::getOverridePrecision() const {
    return m_override_precision;
}
void OAIMultiColumnDatatypeChange::setOverridePrecision(const qint32 &override_precision) {
    m_override_precision = override_precision;
    m_override_precision_isSet = true;
}

bool OAIMultiColumnDatatypeChange::is_override_precision_Set() const{
    return m_override_precision_isSet;
}

bool OAIMultiColumnDatatypeChange::is_override_precision_Valid() const{
    return m_override_precision_isValid;
}

qint32 OAIMultiColumnDatatypeChange::getOverrideScale() const {
    return m_override_scale;
}
void OAIMultiColumnDatatypeChange::setOverrideScale(const qint32 &override_scale) {
    m_override_scale = override_scale;
    m_override_scale_isSet = true;
}

bool OAIMultiColumnDatatypeChange::is_override_scale_Set() const{
    return m_override_scale_isSet;
}

bool OAIMultiColumnDatatypeChange::is_override_scale_Valid() const{
    return m_override_scale_isValid;
}

QString OAIMultiColumnDatatypeChange::getSourceDataTypeFilter() const {
    return m_source_data_type_filter;
}
void OAIMultiColumnDatatypeChange::setSourceDataTypeFilter(const QString &source_data_type_filter) {
    m_source_data_type_filter = source_data_type_filter;
    m_source_data_type_filter_isSet = true;
}

bool OAIMultiColumnDatatypeChange::is_source_data_type_filter_Set() const{
    return m_source_data_type_filter_isSet;
}

bool OAIMultiColumnDatatypeChange::is_source_data_type_filter_Valid() const{
    return m_source_data_type_filter_isValid;
}

OAISourceNumericFilter OAIMultiColumnDatatypeChange::getSourceNumericFilter() const {
    return m_source_numeric_filter;
}
void OAIMultiColumnDatatypeChange::setSourceNumericFilter(const OAISourceNumericFilter &source_numeric_filter) {
    m_source_numeric_filter = source_numeric_filter;
    m_source_numeric_filter_isSet = true;
}

bool OAIMultiColumnDatatypeChange::is_source_numeric_filter_Set() const{
    return m_source_numeric_filter_isSet;
}

bool OAIMultiColumnDatatypeChange::is_source_numeric_filter_Valid() const{
    return m_source_numeric_filter_isValid;
}

OAISourceTextFilter OAIMultiColumnDatatypeChange::getSourceTextFilter() const {
    return m_source_text_filter;
}
void OAIMultiColumnDatatypeChange::setSourceTextFilter(const OAISourceTextFilter &source_text_filter) {
    m_source_text_filter = source_text_filter;
    m_source_text_filter_isSet = true;
}

bool OAIMultiColumnDatatypeChange::is_source_text_filter_Set() const{
    return m_source_text_filter_isSet;
}

bool OAIMultiColumnDatatypeChange::is_source_text_filter_Valid() const{
    return m_source_text_filter_isValid;
}

bool OAIMultiColumnDatatypeChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_fractional_seconds_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_data_type_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_numeric_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_text_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiColumnDatatypeChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
