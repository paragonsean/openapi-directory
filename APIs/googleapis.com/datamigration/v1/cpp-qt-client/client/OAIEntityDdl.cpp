/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityDdl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityDdl::OAIEntityDdl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityDdl::OAIEntityDdl() {
    this->initializeModel();
}

OAIEntityDdl::~OAIEntityDdl() {}

void OAIEntityDdl::initializeModel() {

    m_ddl_isSet = false;
    m_ddl_isValid = false;

    m_ddl_type_isSet = false;
    m_ddl_type_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_issue_id_isSet = false;
    m_issue_id_isValid = false;
}

void OAIEntityDdl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityDdl::fromJsonObject(QJsonObject json) {

    m_ddl_isValid = ::OpenAPI::fromJsonValue(m_ddl, json[QString("ddl")]);
    m_ddl_isSet = !json[QString("ddl")].isNull() && m_ddl_isValid;

    m_ddl_type_isValid = ::OpenAPI::fromJsonValue(m_ddl_type, json[QString("ddlType")]);
    m_ddl_type_isSet = !json[QString("ddlType")].isNull() && m_ddl_type_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_issue_id_isValid = ::OpenAPI::fromJsonValue(m_issue_id, json[QString("issueId")]);
    m_issue_id_isSet = !json[QString("issueId")].isNull() && m_issue_id_isValid;
}

QString OAIEntityDdl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityDdl::asJsonObject() const {
    QJsonObject obj;
    if (m_ddl_isSet) {
        obj.insert(QString("ddl"), ::OpenAPI::toJsonValue(m_ddl));
    }
    if (m_ddl_type_isSet) {
        obj.insert(QString("ddlType"), ::OpenAPI::toJsonValue(m_ddl_type));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_issue_id.size() > 0) {
        obj.insert(QString("issueId"), ::OpenAPI::toJsonValue(m_issue_id));
    }
    return obj;
}

QString OAIEntityDdl::getDdl() const {
    return m_ddl;
}
void OAIEntityDdl::setDdl(const QString &ddl) {
    m_ddl = ddl;
    m_ddl_isSet = true;
}

bool OAIEntityDdl::is_ddl_Set() const{
    return m_ddl_isSet;
}

bool OAIEntityDdl::is_ddl_Valid() const{
    return m_ddl_isValid;
}

QString OAIEntityDdl::getDdlType() const {
    return m_ddl_type;
}
void OAIEntityDdl::setDdlType(const QString &ddl_type) {
    m_ddl_type = ddl_type;
    m_ddl_type_isSet = true;
}

bool OAIEntityDdl::is_ddl_type_Set() const{
    return m_ddl_type_isSet;
}

bool OAIEntityDdl::is_ddl_type_Valid() const{
    return m_ddl_type_isValid;
}

QString OAIEntityDdl::getEntity() const {
    return m_entity;
}
void OAIEntityDdl::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIEntityDdl::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIEntityDdl::is_entity_Valid() const{
    return m_entity_isValid;
}

QString OAIEntityDdl::getEntityType() const {
    return m_entity_type;
}
void OAIEntityDdl::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIEntityDdl::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIEntityDdl::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QList<QString> OAIEntityDdl::getIssueId() const {
    return m_issue_id;
}
void OAIEntityDdl::setIssueId(const QList<QString> &issue_id) {
    m_issue_id = issue_id;
    m_issue_id_isSet = true;
}

bool OAIEntityDdl::is_issue_id_Set() const{
    return m_issue_id_isSet;
}

bool OAIEntityDdl::is_issue_id_Valid() const{
    return m_issue_id_isValid;
}

bool OAIEntityDdl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ddl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ddl_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityDdl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
