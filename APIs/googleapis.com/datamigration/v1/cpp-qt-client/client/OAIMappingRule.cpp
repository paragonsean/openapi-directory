/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappingRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappingRule::OAIMappingRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappingRule::OAIMappingRule() {
    this->initializeModel();
}

OAIMappingRule::~OAIMappingRule() {}

void OAIMappingRule::initializeModel() {

    m_conditional_column_set_value_isSet = false;
    m_conditional_column_set_value_isValid = false;

    m_convert_rowid_column_isSet = false;
    m_convert_rowid_column_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_move_isSet = false;
    m_entity_move_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_filter_table_columns_isSet = false;
    m_filter_table_columns_isValid = false;

    m_multi_column_data_type_change_isSet = false;
    m_multi_column_data_type_change_isValid = false;

    m_multi_entity_rename_isSet = false;
    m_multi_entity_rename_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_revision_create_time_isSet = false;
    m_revision_create_time_isValid = false;

    m_revision_id_isSet = false;
    m_revision_id_isValid = false;

    m_rule_order_isSet = false;
    m_rule_order_isValid = false;

    m_rule_scope_isSet = false;
    m_rule_scope_isValid = false;

    m_set_table_primary_key_isSet = false;
    m_set_table_primary_key_isValid = false;

    m_single_column_change_isSet = false;
    m_single_column_change_isValid = false;

    m_single_entity_rename_isSet = false;
    m_single_entity_rename_isValid = false;

    m_single_package_change_isSet = false;
    m_single_package_change_isValid = false;

    m_source_sql_change_isSet = false;
    m_source_sql_change_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIMappingRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappingRule::fromJsonObject(QJsonObject json) {

    m_conditional_column_set_value_isValid = ::OpenAPI::fromJsonValue(m_conditional_column_set_value, json[QString("conditionalColumnSetValue")]);
    m_conditional_column_set_value_isSet = !json[QString("conditionalColumnSetValue")].isNull() && m_conditional_column_set_value_isValid;

    m_convert_rowid_column_isValid = ::OpenAPI::fromJsonValue(m_convert_rowid_column, json[QString("convertRowidColumn")]);
    m_convert_rowid_column_isSet = !json[QString("convertRowidColumn")].isNull() && m_convert_rowid_column_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_move_isValid = ::OpenAPI::fromJsonValue(m_entity_move, json[QString("entityMove")]);
    m_entity_move_isSet = !json[QString("entityMove")].isNull() && m_entity_move_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_filter_table_columns_isValid = ::OpenAPI::fromJsonValue(m_filter_table_columns, json[QString("filterTableColumns")]);
    m_filter_table_columns_isSet = !json[QString("filterTableColumns")].isNull() && m_filter_table_columns_isValid;

    m_multi_column_data_type_change_isValid = ::OpenAPI::fromJsonValue(m_multi_column_data_type_change, json[QString("multiColumnDataTypeChange")]);
    m_multi_column_data_type_change_isSet = !json[QString("multiColumnDataTypeChange")].isNull() && m_multi_column_data_type_change_isValid;

    m_multi_entity_rename_isValid = ::OpenAPI::fromJsonValue(m_multi_entity_rename, json[QString("multiEntityRename")]);
    m_multi_entity_rename_isSet = !json[QString("multiEntityRename")].isNull() && m_multi_entity_rename_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_revision_create_time_isValid = ::OpenAPI::fromJsonValue(m_revision_create_time, json[QString("revisionCreateTime")]);
    m_revision_create_time_isSet = !json[QString("revisionCreateTime")].isNull() && m_revision_create_time_isValid;

    m_revision_id_isValid = ::OpenAPI::fromJsonValue(m_revision_id, json[QString("revisionId")]);
    m_revision_id_isSet = !json[QString("revisionId")].isNull() && m_revision_id_isValid;

    m_rule_order_isValid = ::OpenAPI::fromJsonValue(m_rule_order, json[QString("ruleOrder")]);
    m_rule_order_isSet = !json[QString("ruleOrder")].isNull() && m_rule_order_isValid;

    m_rule_scope_isValid = ::OpenAPI::fromJsonValue(m_rule_scope, json[QString("ruleScope")]);
    m_rule_scope_isSet = !json[QString("ruleScope")].isNull() && m_rule_scope_isValid;

    m_set_table_primary_key_isValid = ::OpenAPI::fromJsonValue(m_set_table_primary_key, json[QString("setTablePrimaryKey")]);
    m_set_table_primary_key_isSet = !json[QString("setTablePrimaryKey")].isNull() && m_set_table_primary_key_isValid;

    m_single_column_change_isValid = ::OpenAPI::fromJsonValue(m_single_column_change, json[QString("singleColumnChange")]);
    m_single_column_change_isSet = !json[QString("singleColumnChange")].isNull() && m_single_column_change_isValid;

    m_single_entity_rename_isValid = ::OpenAPI::fromJsonValue(m_single_entity_rename, json[QString("singleEntityRename")]);
    m_single_entity_rename_isSet = !json[QString("singleEntityRename")].isNull() && m_single_entity_rename_isValid;

    m_single_package_change_isValid = ::OpenAPI::fromJsonValue(m_single_package_change, json[QString("singlePackageChange")]);
    m_single_package_change_isSet = !json[QString("singlePackageChange")].isNull() && m_single_package_change_isValid;

    m_source_sql_change_isValid = ::OpenAPI::fromJsonValue(m_source_sql_change, json[QString("sourceSqlChange")]);
    m_source_sql_change_isSet = !json[QString("sourceSqlChange")].isNull() && m_source_sql_change_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIMappingRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappingRule::asJsonObject() const {
    QJsonObject obj;
    if (m_conditional_column_set_value.isSet()) {
        obj.insert(QString("conditionalColumnSetValue"), ::OpenAPI::toJsonValue(m_conditional_column_set_value));
    }
    if (m_convert_rowid_column.isSet()) {
        obj.insert(QString("convertRowidColumn"), ::OpenAPI::toJsonValue(m_convert_rowid_column));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_move.isSet()) {
        obj.insert(QString("entityMove"), ::OpenAPI::toJsonValue(m_entity_move));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_filter_table_columns.isSet()) {
        obj.insert(QString("filterTableColumns"), ::OpenAPI::toJsonValue(m_filter_table_columns));
    }
    if (m_multi_column_data_type_change.isSet()) {
        obj.insert(QString("multiColumnDataTypeChange"), ::OpenAPI::toJsonValue(m_multi_column_data_type_change));
    }
    if (m_multi_entity_rename.isSet()) {
        obj.insert(QString("multiEntityRename"), ::OpenAPI::toJsonValue(m_multi_entity_rename));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_revision_create_time_isSet) {
        obj.insert(QString("revisionCreateTime"), ::OpenAPI::toJsonValue(m_revision_create_time));
    }
    if (m_revision_id_isSet) {
        obj.insert(QString("revisionId"), ::OpenAPI::toJsonValue(m_revision_id));
    }
    if (m_rule_order_isSet) {
        obj.insert(QString("ruleOrder"), ::OpenAPI::toJsonValue(m_rule_order));
    }
    if (m_rule_scope_isSet) {
        obj.insert(QString("ruleScope"), ::OpenAPI::toJsonValue(m_rule_scope));
    }
    if (m_set_table_primary_key.isSet()) {
        obj.insert(QString("setTablePrimaryKey"), ::OpenAPI::toJsonValue(m_set_table_primary_key));
    }
    if (m_single_column_change.isSet()) {
        obj.insert(QString("singleColumnChange"), ::OpenAPI::toJsonValue(m_single_column_change));
    }
    if (m_single_entity_rename.isSet()) {
        obj.insert(QString("singleEntityRename"), ::OpenAPI::toJsonValue(m_single_entity_rename));
    }
    if (m_single_package_change.isSet()) {
        obj.insert(QString("singlePackageChange"), ::OpenAPI::toJsonValue(m_single_package_change));
    }
    if (m_source_sql_change.isSet()) {
        obj.insert(QString("sourceSqlChange"), ::OpenAPI::toJsonValue(m_source_sql_change));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIConditionalColumnSetValue OAIMappingRule::getConditionalColumnSetValue() const {
    return m_conditional_column_set_value;
}
void OAIMappingRule::setConditionalColumnSetValue(const OAIConditionalColumnSetValue &conditional_column_set_value) {
    m_conditional_column_set_value = conditional_column_set_value;
    m_conditional_column_set_value_isSet = true;
}

bool OAIMappingRule::is_conditional_column_set_value_Set() const{
    return m_conditional_column_set_value_isSet;
}

bool OAIMappingRule::is_conditional_column_set_value_Valid() const{
    return m_conditional_column_set_value_isValid;
}

OAIConvertRowIdToColumn OAIMappingRule::getConvertRowidColumn() const {
    return m_convert_rowid_column;
}
void OAIMappingRule::setConvertRowidColumn(const OAIConvertRowIdToColumn &convert_rowid_column) {
    m_convert_rowid_column = convert_rowid_column;
    m_convert_rowid_column_isSet = true;
}

bool OAIMappingRule::is_convert_rowid_column_Set() const{
    return m_convert_rowid_column_isSet;
}

bool OAIMappingRule::is_convert_rowid_column_Valid() const{
    return m_convert_rowid_column_isValid;
}

QString OAIMappingRule::getDisplayName() const {
    return m_display_name;
}
void OAIMappingRule::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMappingRule::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMappingRule::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIEntityMove OAIMappingRule::getEntityMove() const {
    return m_entity_move;
}
void OAIMappingRule::setEntityMove(const OAIEntityMove &entity_move) {
    m_entity_move = entity_move;
    m_entity_move_isSet = true;
}

bool OAIMappingRule::is_entity_move_Set() const{
    return m_entity_move_isSet;
}

bool OAIMappingRule::is_entity_move_Valid() const{
    return m_entity_move_isValid;
}

OAIMappingRuleFilter OAIMappingRule::getFilter() const {
    return m_filter;
}
void OAIMappingRule::setFilter(const OAIMappingRuleFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIMappingRule::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIMappingRule::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIFilterTableColumns OAIMappingRule::getFilterTableColumns() const {
    return m_filter_table_columns;
}
void OAIMappingRule::setFilterTableColumns(const OAIFilterTableColumns &filter_table_columns) {
    m_filter_table_columns = filter_table_columns;
    m_filter_table_columns_isSet = true;
}

bool OAIMappingRule::is_filter_table_columns_Set() const{
    return m_filter_table_columns_isSet;
}

bool OAIMappingRule::is_filter_table_columns_Valid() const{
    return m_filter_table_columns_isValid;
}

OAIMultiColumnDatatypeChange OAIMappingRule::getMultiColumnDataTypeChange() const {
    return m_multi_column_data_type_change;
}
void OAIMappingRule::setMultiColumnDataTypeChange(const OAIMultiColumnDatatypeChange &multi_column_data_type_change) {
    m_multi_column_data_type_change = multi_column_data_type_change;
    m_multi_column_data_type_change_isSet = true;
}

bool OAIMappingRule::is_multi_column_data_type_change_Set() const{
    return m_multi_column_data_type_change_isSet;
}

bool OAIMappingRule::is_multi_column_data_type_change_Valid() const{
    return m_multi_column_data_type_change_isValid;
}

OAIMultiEntityRename OAIMappingRule::getMultiEntityRename() const {
    return m_multi_entity_rename;
}
void OAIMappingRule::setMultiEntityRename(const OAIMultiEntityRename &multi_entity_rename) {
    m_multi_entity_rename = multi_entity_rename;
    m_multi_entity_rename_isSet = true;
}

bool OAIMappingRule::is_multi_entity_rename_Set() const{
    return m_multi_entity_rename_isSet;
}

bool OAIMappingRule::is_multi_entity_rename_Valid() const{
    return m_multi_entity_rename_isValid;
}

QString OAIMappingRule::getName() const {
    return m_name;
}
void OAIMappingRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMappingRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMappingRule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMappingRule::getRevisionCreateTime() const {
    return m_revision_create_time;
}
void OAIMappingRule::setRevisionCreateTime(const QString &revision_create_time) {
    m_revision_create_time = revision_create_time;
    m_revision_create_time_isSet = true;
}

bool OAIMappingRule::is_revision_create_time_Set() const{
    return m_revision_create_time_isSet;
}

bool OAIMappingRule::is_revision_create_time_Valid() const{
    return m_revision_create_time_isValid;
}

QString OAIMappingRule::getRevisionId() const {
    return m_revision_id;
}
void OAIMappingRule::setRevisionId(const QString &revision_id) {
    m_revision_id = revision_id;
    m_revision_id_isSet = true;
}

bool OAIMappingRule::is_revision_id_Set() const{
    return m_revision_id_isSet;
}

bool OAIMappingRule::is_revision_id_Valid() const{
    return m_revision_id_isValid;
}

QString OAIMappingRule::getRuleOrder() const {
    return m_rule_order;
}
void OAIMappingRule::setRuleOrder(const QString &rule_order) {
    m_rule_order = rule_order;
    m_rule_order_isSet = true;
}

bool OAIMappingRule::is_rule_order_Set() const{
    return m_rule_order_isSet;
}

bool OAIMappingRule::is_rule_order_Valid() const{
    return m_rule_order_isValid;
}

QString OAIMappingRule::getRuleScope() const {
    return m_rule_scope;
}
void OAIMappingRule::setRuleScope(const QString &rule_scope) {
    m_rule_scope = rule_scope;
    m_rule_scope_isSet = true;
}

bool OAIMappingRule::is_rule_scope_Set() const{
    return m_rule_scope_isSet;
}

bool OAIMappingRule::is_rule_scope_Valid() const{
    return m_rule_scope_isValid;
}

OAISetTablePrimaryKey OAIMappingRule::getSetTablePrimaryKey() const {
    return m_set_table_primary_key;
}
void OAIMappingRule::setSetTablePrimaryKey(const OAISetTablePrimaryKey &set_table_primary_key) {
    m_set_table_primary_key = set_table_primary_key;
    m_set_table_primary_key_isSet = true;
}

bool OAIMappingRule::is_set_table_primary_key_Set() const{
    return m_set_table_primary_key_isSet;
}

bool OAIMappingRule::is_set_table_primary_key_Valid() const{
    return m_set_table_primary_key_isValid;
}

OAISingleColumnChange OAIMappingRule::getSingleColumnChange() const {
    return m_single_column_change;
}
void OAIMappingRule::setSingleColumnChange(const OAISingleColumnChange &single_column_change) {
    m_single_column_change = single_column_change;
    m_single_column_change_isSet = true;
}

bool OAIMappingRule::is_single_column_change_Set() const{
    return m_single_column_change_isSet;
}

bool OAIMappingRule::is_single_column_change_Valid() const{
    return m_single_column_change_isValid;
}

OAISingleEntityRename OAIMappingRule::getSingleEntityRename() const {
    return m_single_entity_rename;
}
void OAIMappingRule::setSingleEntityRename(const OAISingleEntityRename &single_entity_rename) {
    m_single_entity_rename = single_entity_rename;
    m_single_entity_rename_isSet = true;
}

bool OAIMappingRule::is_single_entity_rename_Set() const{
    return m_single_entity_rename_isSet;
}

bool OAIMappingRule::is_single_entity_rename_Valid() const{
    return m_single_entity_rename_isValid;
}

OAISinglePackageChange OAIMappingRule::getSinglePackageChange() const {
    return m_single_package_change;
}
void OAIMappingRule::setSinglePackageChange(const OAISinglePackageChange &single_package_change) {
    m_single_package_change = single_package_change;
    m_single_package_change_isSet = true;
}

bool OAIMappingRule::is_single_package_change_Set() const{
    return m_single_package_change_isSet;
}

bool OAIMappingRule::is_single_package_change_Valid() const{
    return m_single_package_change_isValid;
}

OAISourceSqlChange OAIMappingRule::getSourceSqlChange() const {
    return m_source_sql_change;
}
void OAIMappingRule::setSourceSqlChange(const OAISourceSqlChange &source_sql_change) {
    m_source_sql_change = source_sql_change;
    m_source_sql_change_isSet = true;
}

bool OAIMappingRule::is_source_sql_change_Set() const{
    return m_source_sql_change_isSet;
}

bool OAIMappingRule::is_source_sql_change_Valid() const{
    return m_source_sql_change_isValid;
}

QString OAIMappingRule::getState() const {
    return m_state;
}
void OAIMappingRule::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMappingRule::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMappingRule::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIMappingRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditional_column_set_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_rowid_column.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_move.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_table_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_column_data_type_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_entity_rename.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_table_primary_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_column_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_entity_rename.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_package_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_sql_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappingRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
