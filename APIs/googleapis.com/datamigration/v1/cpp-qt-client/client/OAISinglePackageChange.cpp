/**
 * Database Migration API
 * Manage Cloud Database Migration Service resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISinglePackageChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISinglePackageChange::OAISinglePackageChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISinglePackageChange::OAISinglePackageChange() {
    this->initializeModel();
}

OAISinglePackageChange::~OAISinglePackageChange() {}

void OAISinglePackageChange::initializeModel() {

    m_package_body_isSet = false;
    m_package_body_isValid = false;

    m_package_description_isSet = false;
    m_package_description_isValid = false;
}

void OAISinglePackageChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISinglePackageChange::fromJsonObject(QJsonObject json) {

    m_package_body_isValid = ::OpenAPI::fromJsonValue(m_package_body, json[QString("packageBody")]);
    m_package_body_isSet = !json[QString("packageBody")].isNull() && m_package_body_isValid;

    m_package_description_isValid = ::OpenAPI::fromJsonValue(m_package_description, json[QString("packageDescription")]);
    m_package_description_isSet = !json[QString("packageDescription")].isNull() && m_package_description_isValid;
}

QString OAISinglePackageChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISinglePackageChange::asJsonObject() const {
    QJsonObject obj;
    if (m_package_body_isSet) {
        obj.insert(QString("packageBody"), ::OpenAPI::toJsonValue(m_package_body));
    }
    if (m_package_description_isSet) {
        obj.insert(QString("packageDescription"), ::OpenAPI::toJsonValue(m_package_description));
    }
    return obj;
}

QString OAISinglePackageChange::getPackageBody() const {
    return m_package_body;
}
void OAISinglePackageChange::setPackageBody(const QString &package_body) {
    m_package_body = package_body;
    m_package_body_isSet = true;
}

bool OAISinglePackageChange::is_package_body_Set() const{
    return m_package_body_isSet;
}

bool OAISinglePackageChange::is_package_body_Valid() const{
    return m_package_body_isValid;
}

QString OAISinglePackageChange::getPackageDescription() const {
    return m_package_description;
}
void OAISinglePackageChange::setPackageDescription(const QString &package_description) {
    m_package_description = package_description;
    m_package_description_isSet = true;
}

bool OAISinglePackageChange::is_package_description_Set() const{
    return m_package_description_isSet;
}

bool OAISinglePackageChange::is_package_description_Valid() const{
    return m_package_description_isValid;
}

bool OAISinglePackageChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISinglePackageChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
