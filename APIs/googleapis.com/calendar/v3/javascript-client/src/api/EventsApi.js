/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Channel from '../model/Channel';
import Event from '../model/Event';
import Events from '../model/Events';

/**
* Events service.
* @module api/EventsApi
* @version v3
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the calendarEventsDelete operation.
     * @callback module:api/EventsApi~calendarEventsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an event.
     * @param {String} calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.
     * @param {String} eventId Event identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Boolean} [sendNotifications] Deprecated. Please use sendUpdates instead.  Whether to send notifications about the deletion of the event. Note that some emails might still be sent even if you set the value to false. The default is false.
     * @param {module:model/String} [sendUpdates] Guests who should receive notifications about the deletion of the event.
     * @param {module:api/EventsApi~calendarEventsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    calendarEventsDelete(calendarId, eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling calendarEventsDelete");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling calendarEventsDelete");
      }

      let pathParams = {
        'calendarId': calendarId,
        'eventId': eventId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'sendNotifications': opts['sendNotifications'],
        'sendUpdates': opts['sendUpdates']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/calendars/{calendarId}/events/{eventId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarEventsGet operation.
     * @callback module:api/EventsApi~calendarEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.
     * @param {String} calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.
     * @param {String} eventId Event identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Boolean} [alwaysIncludeEmail] Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
     * @param {Number} [maxAttendees] The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
     * @param {String} [timeZone] Time zone used in the response. Optional. The default is the time zone of the calendar.
     * @param {module:api/EventsApi~calendarEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    calendarEventsGet(calendarId, eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling calendarEventsGet");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling calendarEventsGet");
      }

      let pathParams = {
        'calendarId': calendarId,
        'eventId': eventId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'alwaysIncludeEmail': opts['alwaysIncludeEmail'],
        'maxAttendees': opts['maxAttendees'],
        'timeZone': opts['timeZone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/calendars/{calendarId}/events/{eventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarEventsImport operation.
     * @callback module:api/EventsApi~calendarEventsImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports an event. This operation is used to add a private copy of an existing event to a calendar.
     * @param {String} calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Number} [conferenceDataVersion] Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
     * @param {Boolean} [supportsAttachments] Whether API client performing operation supports event attachments. Optional. The default is False.
     * @param {module:model/Event} [event] 
     * @param {module:api/EventsApi~calendarEventsImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    calendarEventsImport(calendarId, opts, callback) {
      opts = opts || {};
      let postBody = opts['event'];
      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling calendarEventsImport");
      }

      let pathParams = {
        'calendarId': calendarId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'conferenceDataVersion': opts['conferenceDataVersion'],
        'supportsAttachments': opts['supportsAttachments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/calendars/{calendarId}/events/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarEventsInsert operation.
     * @callback module:api/EventsApi~calendarEventsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an event.
     * @param {String} calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Number} [conferenceDataVersion] Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
     * @param {Number} [maxAttendees] The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
     * @param {Boolean} [sendNotifications] Deprecated. Please use sendUpdates instead.  Whether to send notifications about the creation of the new event. Note that some emails might still be sent even if you set the value to false. The default is false.
     * @param {module:model/String} [sendUpdates] Whether to send notifications about the creation of the new event. Note that some emails might still be sent. The default is false.
     * @param {Boolean} [supportsAttachments] Whether API client performing operation supports event attachments. Optional. The default is False.
     * @param {module:model/Event} [event] 
     * @param {module:api/EventsApi~calendarEventsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    calendarEventsInsert(calendarId, opts, callback) {
      opts = opts || {};
      let postBody = opts['event'];
      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling calendarEventsInsert");
      }

      let pathParams = {
        'calendarId': calendarId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'conferenceDataVersion': opts['conferenceDataVersion'],
        'maxAttendees': opts['maxAttendees'],
        'sendNotifications': opts['sendNotifications'],
        'sendUpdates': opts['sendUpdates'],
        'supportsAttachments': opts['supportsAttachments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/calendars/{calendarId}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarEventsInstances operation.
     * @callback module:api/EventsApi~calendarEventsInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Events} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns instances of the specified recurring event.
     * @param {String} calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.
     * @param {String} eventId Recurring event identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Boolean} [alwaysIncludeEmail] Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
     * @param {Number} [maxAttendees] The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
     * @param {Number} [maxResults] Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
     * @param {String} [originalStart] The original start time of the instance in the result. Optional.
     * @param {String} [pageToken] Token specifying which result page to return. Optional.
     * @param {Boolean} [showDeleted] Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False.
     * @param {String} [timeMax] Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset.
     * @param {String} [timeMin] Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.
     * @param {String} [timeZone] Time zone used in the response. Optional. The default is the time zone of the calendar.
     * @param {module:api/EventsApi~calendarEventsInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Events}
     */
    calendarEventsInstances(calendarId, eventId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling calendarEventsInstances");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling calendarEventsInstances");
      }

      let pathParams = {
        'calendarId': calendarId,
        'eventId': eventId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'alwaysIncludeEmail': opts['alwaysIncludeEmail'],
        'maxAttendees': opts['maxAttendees'],
        'maxResults': opts['maxResults'],
        'originalStart': opts['originalStart'],
        'pageToken': opts['pageToken'],
        'showDeleted': opts['showDeleted'],
        'timeMax': opts['timeMax'],
        'timeMin': opts['timeMin'],
        'timeZone': opts['timeZone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Events;
      return this.apiClient.callApi(
        '/calendars/{calendarId}/events/{eventId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarEventsList operation.
     * @callback module:api/EventsApi~calendarEventsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Events} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns events on the specified calendar.
     * @param {String} calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Boolean} [alwaysIncludeEmail] Deprecated and ignored.
     * @param {Array.<module:model/String>} [eventTypes] Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is [\"default\", \"focusTime\", \"outOfOffice\"].
     * @param {String} [iCalUID] Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID.
     * @param {Number} [maxAttendees] The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
     * @param {Number} [maxResults] Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
     * @param {module:model/String} [orderBy] The order of the events returned in the result. Optional. The default is an unspecified, stable order.
     * @param {String} [pageToken] Token specifying which result page to return. Optional.
     * @param {Array.<String>} [privateExtendedProperty] Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.
     * @param {String} [q] Free text search terms to find events that match these terms in the following fields:  - summary  - description  - location  - attendee's displayName  - attendee's email  - organizer's displayName  - organizer's email  - workingLocationProperties.officeLocation.buildingId  - workingLocationProperties.officeLocation.deskId  - workingLocationProperties.officeLocation.label  - workingLocationProperties.customLocation.label  These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for \"Office\" or \"Bureau\" returns working location events of type officeLocation, whereas searching for \"Out of office\" or \"Abwesend\" returns out-of-office events. Optional.
     * @param {Array.<String>} [sharedExtendedProperty] Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.
     * @param {Boolean} [showDeleted] Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.
     * @param {Boolean} [showHiddenInvitations] Whether to include hidden invitations in the result. Optional. The default is False.
     * @param {Boolean} [singleEvents] Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.
     * @param {String} [syncToken] Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False. There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.  These are:  - iCalUID  - orderBy  - privateExtendedProperty  - q  - sharedExtendedProperty  - timeMin  - timeMax  - updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken. Learn more about incremental synchronization. Optional. The default is to return all entries.
     * @param {String} [timeMax] Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.
     * @param {String} [timeMin] Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax.
     * @param {String} [timeZone] Time zone used in the response. Optional. The default is the time zone of the calendar.
     * @param {String} [updatedMin] Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.
     * @param {module:api/EventsApi~calendarEventsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Events}
     */
    calendarEventsList(calendarId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling calendarEventsList");
      }

      let pathParams = {
        'calendarId': calendarId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'alwaysIncludeEmail': opts['alwaysIncludeEmail'],
        'eventTypes': this.apiClient.buildCollectionParam(opts['eventTypes'], 'multi'),
        'iCalUID': opts['iCalUID'],
        'maxAttendees': opts['maxAttendees'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'pageToken': opts['pageToken'],
        'privateExtendedProperty': this.apiClient.buildCollectionParam(opts['privateExtendedProperty'], 'multi'),
        'q': opts['q'],
        'sharedExtendedProperty': this.apiClient.buildCollectionParam(opts['sharedExtendedProperty'], 'multi'),
        'showDeleted': opts['showDeleted'],
        'showHiddenInvitations': opts['showHiddenInvitations'],
        'singleEvents': opts['singleEvents'],
        'syncToken': opts['syncToken'],
        'timeMax': opts['timeMax'],
        'timeMin': opts['timeMin'],
        'timeZone': opts['timeZone'],
        'updatedMin': opts['updatedMin']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Events;
      return this.apiClient.callApi(
        '/calendars/{calendarId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarEventsMove operation.
     * @callback module:api/EventsApi~calendarEventsMoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves an event to another calendar, i.e. changes an event's organizer. Note that only default events can be moved; outOfOffice, focusTime and workingLocation events cannot be moved.
     * @param {String} calendarId Calendar identifier of the source calendar where the event currently is on.
     * @param {String} eventId Event identifier.
     * @param {String} destination Calendar identifier of the target calendar where the event is to be moved to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Boolean} [sendNotifications] Deprecated. Please use sendUpdates instead.  Whether to send notifications about the change of the event's organizer. Note that some emails might still be sent even if you set the value to false. The default is false.
     * @param {module:model/String} [sendUpdates] Guests who should receive notifications about the change of the event's organizer.
     * @param {module:api/EventsApi~calendarEventsMoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    calendarEventsMove(calendarId, eventId, destination, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling calendarEventsMove");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling calendarEventsMove");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling calendarEventsMove");
      }

      let pathParams = {
        'calendarId': calendarId,
        'eventId': eventId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'destination': destination,
        'sendNotifications': opts['sendNotifications'],
        'sendUpdates': opts['sendUpdates']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/calendars/{calendarId}/events/{eventId}/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarEventsPatch operation.
     * @callback module:api/EventsApi~calendarEventsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an event. This method supports patch semantics.
     * @param {String} calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.
     * @param {String} eventId Event identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Boolean} [alwaysIncludeEmail] Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
     * @param {Number} [conferenceDataVersion] Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
     * @param {Number} [maxAttendees] The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
     * @param {Boolean} [sendNotifications] Deprecated. Please use sendUpdates instead.  Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false.
     * @param {module:model/String} [sendUpdates] Guests who should receive notifications about the event update (for example, title changes, etc.).
     * @param {Boolean} [supportsAttachments] Whether API client performing operation supports event attachments. Optional. The default is False.
     * @param {module:model/Event} [event] 
     * @param {module:api/EventsApi~calendarEventsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    calendarEventsPatch(calendarId, eventId, opts, callback) {
      opts = opts || {};
      let postBody = opts['event'];
      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling calendarEventsPatch");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling calendarEventsPatch");
      }

      let pathParams = {
        'calendarId': calendarId,
        'eventId': eventId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'alwaysIncludeEmail': opts['alwaysIncludeEmail'],
        'conferenceDataVersion': opts['conferenceDataVersion'],
        'maxAttendees': opts['maxAttendees'],
        'sendNotifications': opts['sendNotifications'],
        'sendUpdates': opts['sendUpdates'],
        'supportsAttachments': opts['supportsAttachments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/calendars/{calendarId}/events/{eventId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarEventsQuickAdd operation.
     * @callback module:api/EventsApi~calendarEventsQuickAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an event based on a simple text string.
     * @param {String} calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.
     * @param {String} text The text describing the event to be created.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Boolean} [sendNotifications] Deprecated. Please use sendUpdates instead.  Whether to send notifications about the creation of the event. Note that some emails might still be sent even if you set the value to false. The default is false.
     * @param {module:model/String} [sendUpdates] Guests who should receive notifications about the creation of the new event.
     * @param {module:api/EventsApi~calendarEventsQuickAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    calendarEventsQuickAdd(calendarId, text, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling calendarEventsQuickAdd");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling calendarEventsQuickAdd");
      }

      let pathParams = {
        'calendarId': calendarId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'text': text,
        'sendNotifications': opts['sendNotifications'],
        'sendUpdates': opts['sendUpdates']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/calendars/{calendarId}/events/quickAdd', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarEventsUpdate operation.
     * @callback module:api/EventsApi~calendarEventsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an event.
     * @param {String} calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.
     * @param {String} eventId Event identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Boolean} [alwaysIncludeEmail] Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
     * @param {Number} [conferenceDataVersion] Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
     * @param {Number} [maxAttendees] The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
     * @param {Boolean} [sendNotifications] Deprecated. Please use sendUpdates instead.  Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false.
     * @param {module:model/String} [sendUpdates] Guests who should receive notifications about the event update (for example, title changes, etc.).
     * @param {Boolean} [supportsAttachments] Whether API client performing operation supports event attachments. Optional. The default is False.
     * @param {module:model/Event} [event] 
     * @param {module:api/EventsApi~calendarEventsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    calendarEventsUpdate(calendarId, eventId, opts, callback) {
      opts = opts || {};
      let postBody = opts['event'];
      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling calendarEventsUpdate");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling calendarEventsUpdate");
      }

      let pathParams = {
        'calendarId': calendarId,
        'eventId': eventId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'alwaysIncludeEmail': opts['alwaysIncludeEmail'],
        'conferenceDataVersion': opts['conferenceDataVersion'],
        'maxAttendees': opts['maxAttendees'],
        'sendNotifications': opts['sendNotifications'],
        'sendUpdates': opts['sendUpdates'],
        'supportsAttachments': opts['supportsAttachments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/calendars/{calendarId}/events/{eventId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarEventsWatch operation.
     * @callback module:api/EventsApi~calendarEventsWatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Watch for changes to Events resources.
     * @param {String} calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Boolean} [alwaysIncludeEmail] Deprecated and ignored.
     * @param {Array.<module:model/String>} [eventTypes] Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is [\"default\", \"focusTime\", \"outOfOffice\"].
     * @param {String} [iCalUID] Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID.
     * @param {Number} [maxAttendees] The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
     * @param {Number} [maxResults] Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
     * @param {module:model/String} [orderBy] The order of the events returned in the result. Optional. The default is an unspecified, stable order.
     * @param {String} [pageToken] Token specifying which result page to return. Optional.
     * @param {Array.<String>} [privateExtendedProperty] Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.
     * @param {String} [q] Free text search terms to find events that match these terms in the following fields:  - summary  - description  - location  - attendee's displayName  - attendee's email  - organizer's displayName  - organizer's email  - workingLocationProperties.officeLocation.buildingId  - workingLocationProperties.officeLocation.deskId  - workingLocationProperties.officeLocation.label  - workingLocationProperties.customLocation.label  These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for \"Office\" or \"Bureau\" returns working location events of type officeLocation, whereas searching for \"Out of office\" or \"Abwesend\" returns out-of-office events. Optional.
     * @param {Array.<String>} [sharedExtendedProperty] Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.
     * @param {Boolean} [showDeleted] Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.
     * @param {Boolean} [showHiddenInvitations] Whether to include hidden invitations in the result. Optional. The default is False.
     * @param {Boolean} [singleEvents] Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.
     * @param {String} [syncToken] Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False. There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.  These are:  - iCalUID  - orderBy  - privateExtendedProperty  - q  - sharedExtendedProperty  - timeMin  - timeMax  - updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken. Learn more about incremental synchronization. Optional. The default is to return all entries.
     * @param {String} [timeMax] Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.
     * @param {String} [timeMin] Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax.
     * @param {String} [timeZone] Time zone used in the response. Optional. The default is the time zone of the calendar.
     * @param {String} [updatedMin] Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.
     * @param {module:model/Channel} [channel] 
     * @param {module:api/EventsApi~calendarEventsWatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    calendarEventsWatch(calendarId, opts, callback) {
      opts = opts || {};
      let postBody = opts['channel'];
      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling calendarEventsWatch");
      }

      let pathParams = {
        'calendarId': calendarId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'alwaysIncludeEmail': opts['alwaysIncludeEmail'],
        'eventTypes': this.apiClient.buildCollectionParam(opts['eventTypes'], 'multi'),
        'iCalUID': opts['iCalUID'],
        'maxAttendees': opts['maxAttendees'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'pageToken': opts['pageToken'],
        'privateExtendedProperty': this.apiClient.buildCollectionParam(opts['privateExtendedProperty'], 'multi'),
        'q': opts['q'],
        'sharedExtendedProperty': this.apiClient.buildCollectionParam(opts['sharedExtendedProperty'], 'multi'),
        'showDeleted': opts['showDeleted'],
        'showHiddenInvitations': opts['showHiddenInvitations'],
        'singleEvents': opts['singleEvents'],
        'syncToken': opts['syncToken'],
        'timeMax': opts['timeMax'],
        'timeMin': opts['timeMin'],
        'timeZone': opts['timeZone'],
        'updatedMin': opts['updatedMin']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Channel;
      return this.apiClient.callApi(
        '/calendars/{calendarId}/events/watch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
