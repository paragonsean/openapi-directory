/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CalendarListEntryNotificationSettings from './CalendarListEntryNotificationSettings';
import ConferenceProperties from './ConferenceProperties';
import EventReminder from './EventReminder';

/**
 * The CalendarListEntry model module.
 * @module model/CalendarListEntry
 * @version v3
 */
class CalendarListEntry {
    /**
     * Constructs a new <code>CalendarListEntry</code>.
     * @alias module:model/CalendarListEntry
     */
    constructor() { 
        
        CalendarListEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['deleted'] = false;
        obj['hidden'] = false;
        obj['kind'] = 'calendar#calendarListEntry';
        obj['primary'] = false;
        obj['selected'] = false;
    }

    /**
     * Constructs a <code>CalendarListEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CalendarListEntry} obj Optional instance to populate.
     * @return {module:model/CalendarListEntry} The populated <code>CalendarListEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CalendarListEntry();

            if (data.hasOwnProperty('accessRole')) {
                obj['accessRole'] = ApiClient.convertToType(data['accessRole'], 'String');
            }
            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = ApiClient.convertToType(data['backgroundColor'], 'String');
            }
            if (data.hasOwnProperty('colorId')) {
                obj['colorId'] = ApiClient.convertToType(data['colorId'], 'String');
            }
            if (data.hasOwnProperty('conferenceProperties')) {
                obj['conferenceProperties'] = ConferenceProperties.constructFromObject(data['conferenceProperties']);
            }
            if (data.hasOwnProperty('defaultReminders')) {
                obj['defaultReminders'] = ApiClient.convertToType(data['defaultReminders'], [EventReminder]);
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('foregroundColor')) {
                obj['foregroundColor'] = ApiClient.convertToType(data['foregroundColor'], 'String');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('notificationSettings')) {
                obj['notificationSettings'] = CalendarListEntryNotificationSettings.constructFromObject(data['notificationSettings']);
            }
            if (data.hasOwnProperty('primary')) {
                obj['primary'] = ApiClient.convertToType(data['primary'], 'Boolean');
            }
            if (data.hasOwnProperty('selected')) {
                obj['selected'] = ApiClient.convertToType(data['selected'], 'Boolean');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('summaryOverride')) {
                obj['summaryOverride'] = ApiClient.convertToType(data['summaryOverride'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CalendarListEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CalendarListEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessRole'] && !(typeof data['accessRole'] === 'string' || data['accessRole'] instanceof String)) {
            throw new Error("Expected the field `accessRole` to be a primitive type in the JSON string but got " + data['accessRole']);
        }
        // ensure the json data is a string
        if (data['backgroundColor'] && !(typeof data['backgroundColor'] === 'string' || data['backgroundColor'] instanceof String)) {
            throw new Error("Expected the field `backgroundColor` to be a primitive type in the JSON string but got " + data['backgroundColor']);
        }
        // ensure the json data is a string
        if (data['colorId'] && !(typeof data['colorId'] === 'string' || data['colorId'] instanceof String)) {
            throw new Error("Expected the field `colorId` to be a primitive type in the JSON string but got " + data['colorId']);
        }
        // validate the optional field `conferenceProperties`
        if (data['conferenceProperties']) { // data not null
          ConferenceProperties.validateJSON(data['conferenceProperties']);
        }
        if (data['defaultReminders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['defaultReminders'])) {
                throw new Error("Expected the field `defaultReminders` to be an array in the JSON data but got " + data['defaultReminders']);
            }
            // validate the optional field `defaultReminders` (array)
            for (const item of data['defaultReminders']) {
                EventReminder.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['foregroundColor'] && !(typeof data['foregroundColor'] === 'string' || data['foregroundColor'] instanceof String)) {
            throw new Error("Expected the field `foregroundColor` to be a primitive type in the JSON string but got " + data['foregroundColor']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // validate the optional field `notificationSettings`
        if (data['notificationSettings']) { // data not null
          CalendarListEntryNotificationSettings.validateJSON(data['notificationSettings']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['summaryOverride'] && !(typeof data['summaryOverride'] === 'string' || data['summaryOverride'] instanceof String)) {
            throw new Error("Expected the field `summaryOverride` to be a primitive type in the JSON string but got " + data['summaryOverride']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:   - \"freeBusyReader\" - Provides read access to free/busy information.  - \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
 * @member {String} accessRole
 */
CalendarListEntry.prototype['accessRole'] = undefined;

/**
 * The main color of the calendar in the hexadecimal format \"#0088aa\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.
 * @member {String} backgroundColor
 */
CalendarListEntry.prototype['backgroundColor'] = undefined;

/**
 * The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional.
 * @member {String} colorId
 */
CalendarListEntry.prototype['colorId'] = undefined;

/**
 * @member {module:model/ConferenceProperties} conferenceProperties
 */
CalendarListEntry.prototype['conferenceProperties'] = undefined;

/**
 * The default reminders that the authenticated user has for this calendar.
 * @member {Array.<module:model/EventReminder>} defaultReminders
 */
CalendarListEntry.prototype['defaultReminders'] = undefined;

/**
 * Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False.
 * @member {Boolean} deleted
 * @default false
 */
CalendarListEntry.prototype['deleted'] = false;

/**
 * Description of the calendar. Optional. Read-only.
 * @member {String} description
 */
CalendarListEntry.prototype['description'] = undefined;

/**
 * ETag of the resource.
 * @member {String} etag
 */
CalendarListEntry.prototype['etag'] = undefined;

/**
 * The foreground color of the calendar in the hexadecimal format \"#ffffff\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.
 * @member {String} foregroundColor
 */
CalendarListEntry.prototype['foregroundColor'] = undefined;

/**
 * Whether the calendar has been hidden from the list. Optional. The attribute is only returned when the calendar is hidden, in which case the value is true.
 * @member {Boolean} hidden
 * @default false
 */
CalendarListEntry.prototype['hidden'] = false;

/**
 * Identifier of the calendar.
 * @member {String} id
 */
CalendarListEntry.prototype['id'] = undefined;

/**
 * Type of the resource (\"calendar#calendarListEntry\").
 * @member {String} kind
 * @default 'calendar#calendarListEntry'
 */
CalendarListEntry.prototype['kind'] = 'calendar#calendarListEntry';

/**
 * Geographic location of the calendar as free-form text. Optional. Read-only.
 * @member {String} location
 */
CalendarListEntry.prototype['location'] = undefined;

/**
 * @member {module:model/CalendarListEntryNotificationSettings} notificationSettings
 */
CalendarListEntry.prototype['notificationSettings'] = undefined;

/**
 * Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False.
 * @member {Boolean} primary
 * @default false
 */
CalendarListEntry.prototype['primary'] = false;

/**
 * Whether the calendar content shows up in the calendar UI. Optional. The default is False.
 * @member {Boolean} selected
 * @default false
 */
CalendarListEntry.prototype['selected'] = false;

/**
 * Title of the calendar. Read-only.
 * @member {String} summary
 */
CalendarListEntry.prototype['summary'] = undefined;

/**
 * The summary that the authenticated user has set for this calendar. Optional.
 * @member {String} summaryOverride
 */
CalendarListEntry.prototype['summaryOverride'] = undefined;

/**
 * The time zone of the calendar. Optional. Read-only.
 * @member {String} timeZone
 */
CalendarListEntry.prototype['timeZone'] = undefined;






export default CalendarListEntry;

