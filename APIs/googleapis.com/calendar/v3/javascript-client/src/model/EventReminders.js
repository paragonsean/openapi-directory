/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventReminder from './EventReminder';

/**
 * The EventReminders model module.
 * @module model/EventReminders
 * @version v3
 */
class EventReminders {
    /**
     * Constructs a new <code>EventReminders</code>.
     * Information about the event&#39;s reminders for the authenticated user.
     * @alias module:model/EventReminders
     */
    constructor() { 
        
        EventReminders.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventReminders</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventReminders} obj Optional instance to populate.
     * @return {module:model/EventReminders} The populated <code>EventReminders</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventReminders();

            if (data.hasOwnProperty('overrides')) {
                obj['overrides'] = ApiClient.convertToType(data['overrides'], [EventReminder]);
            }
            if (data.hasOwnProperty('useDefault')) {
                obj['useDefault'] = ApiClient.convertToType(data['useDefault'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventReminders</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventReminders</code>.
     */
    static validateJSON(data) {
        if (data['overrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['overrides'])) {
                throw new Error("Expected the field `overrides` to be an array in the JSON data but got " + data['overrides']);
            }
            // validate the optional field `overrides` (array)
            for (const item of data['overrides']) {
                EventReminder.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.
 * @member {Array.<module:model/EventReminder>} overrides
 */
EventReminders.prototype['overrides'] = undefined;

/**
 * Whether the default reminders of the calendar apply to the event.
 * @member {Boolean} useDefault
 */
EventReminders.prototype['useDefault'] = undefined;






export default EventReminders;

