/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConferenceParametersAddOnParameters from './ConferenceParametersAddOnParameters';

/**
 * The ConferenceParameters model module.
 * @module model/ConferenceParameters
 * @version v3
 */
class ConferenceParameters {
    /**
     * Constructs a new <code>ConferenceParameters</code>.
     * @alias module:model/ConferenceParameters
     */
    constructor() { 
        
        ConferenceParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConferenceParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConferenceParameters} obj Optional instance to populate.
     * @return {module:model/ConferenceParameters} The populated <code>ConferenceParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConferenceParameters();

            if (data.hasOwnProperty('addOnParameters')) {
                obj['addOnParameters'] = ConferenceParametersAddOnParameters.constructFromObject(data['addOnParameters']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConferenceParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConferenceParameters</code>.
     */
    static validateJSON(data) {
        // validate the optional field `addOnParameters`
        if (data['addOnParameters']) { // data not null
          ConferenceParametersAddOnParameters.validateJSON(data['addOnParameters']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConferenceParametersAddOnParameters} addOnParameters
 */
ConferenceParameters.prototype['addOnParameters'] = undefined;






export default ConferenceParameters;

