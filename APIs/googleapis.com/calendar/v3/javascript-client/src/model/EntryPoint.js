/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EntryPoint model module.
 * @module model/EntryPoint
 * @version v3
 */
class EntryPoint {
    /**
     * Constructs a new <code>EntryPoint</code>.
     * @alias module:model/EntryPoint
     */
    constructor() { 
        
        EntryPoint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntryPoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntryPoint} obj Optional instance to populate.
     * @return {module:model/EntryPoint} The populated <code>EntryPoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntryPoint();

            if (data.hasOwnProperty('accessCode')) {
                obj['accessCode'] = ApiClient.convertToType(data['accessCode'], 'String');
            }
            if (data.hasOwnProperty('entryPointFeatures')) {
                obj['entryPointFeatures'] = ApiClient.convertToType(data['entryPointFeatures'], ['String']);
            }
            if (data.hasOwnProperty('entryPointType')) {
                obj['entryPointType'] = ApiClient.convertToType(data['entryPointType'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('meetingCode')) {
                obj['meetingCode'] = ApiClient.convertToType(data['meetingCode'], 'String');
            }
            if (data.hasOwnProperty('passcode')) {
                obj['passcode'] = ApiClient.convertToType(data['passcode'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('pin')) {
                obj['pin'] = ApiClient.convertToType(data['pin'], 'String');
            }
            if (data.hasOwnProperty('regionCode')) {
                obj['regionCode'] = ApiClient.convertToType(data['regionCode'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntryPoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntryPoint</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessCode'] && !(typeof data['accessCode'] === 'string' || data['accessCode'] instanceof String)) {
            throw new Error("Expected the field `accessCode` to be a primitive type in the JSON string but got " + data['accessCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['entryPointFeatures'])) {
            throw new Error("Expected the field `entryPointFeatures` to be an array in the JSON data but got " + data['entryPointFeatures']);
        }
        // ensure the json data is a string
        if (data['entryPointType'] && !(typeof data['entryPointType'] === 'string' || data['entryPointType'] instanceof String)) {
            throw new Error("Expected the field `entryPointType` to be a primitive type in the JSON string but got " + data['entryPointType']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['meetingCode'] && !(typeof data['meetingCode'] === 'string' || data['meetingCode'] instanceof String)) {
            throw new Error("Expected the field `meetingCode` to be a primitive type in the JSON string but got " + data['meetingCode']);
        }
        // ensure the json data is a string
        if (data['passcode'] && !(typeof data['passcode'] === 'string' || data['passcode'] instanceof String)) {
            throw new Error("Expected the field `passcode` to be a primitive type in the JSON string but got " + data['passcode']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['pin'] && !(typeof data['pin'] === 'string' || data['pin'] instanceof String)) {
            throw new Error("Expected the field `pin` to be a primitive type in the JSON string but got " + data['pin']);
        }
        // ensure the json data is a string
        if (data['regionCode'] && !(typeof data['regionCode'] === 'string' || data['regionCode'] instanceof String)) {
            throw new Error("Expected the field `regionCode` to be a primitive type in the JSON string but got " + data['regionCode']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * The access code to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.
 * @member {String} accessCode
 */
EntryPoint.prototype['accessCode'] = undefined;

/**
 * Features of the entry point, such as being toll or toll-free. One entry point can have multiple features. However, toll and toll-free cannot be both set on the same entry point.
 * @member {Array.<String>} entryPointFeatures
 */
EntryPoint.prototype['entryPointFeatures'] = undefined;

/**
 * The type of the conference entry point. Possible values are:   - \"video\" - joining a conference over HTTP. A conference can have zero or one video entry point. - \"phone\" - joining a conference by dialing a phone number. A conference can have zero or more phone entry points. - \"sip\" - joining a conference over SIP. A conference can have zero or one sip entry point. - \"more\" - further conference joining instructions, for example additional phone numbers. A conference can have zero or one more entry point. A conference with only a more entry point is not a valid conference.
 * @member {String} entryPointType
 */
EntryPoint.prototype['entryPointType'] = undefined;

/**
 * The label for the URI. Visible to end users. Not localized. The maximum length is 512 characters. Examples:   - for video: meet.google.com/aaa-bbbb-ccc - for phone: +1 123 268 2601 - for sip: 12345678@altostrat.com - for more: should not be filled   Optional.
 * @member {String} label
 */
EntryPoint.prototype['label'] = undefined;

/**
 * The meeting code to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.
 * @member {String} meetingCode
 */
EntryPoint.prototype['meetingCode'] = undefined;

/**
 * The passcode to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
 * @member {String} passcode
 */
EntryPoint.prototype['passcode'] = undefined;

/**
 * The password to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.
 * @member {String} password
 */
EntryPoint.prototype['password'] = undefined;

/**
 * The PIN to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.
 * @member {String} pin
 */
EntryPoint.prototype['pin'] = undefined;

/**
 * The CLDR/ISO 3166 region code for the country associated with this phone access. Example: \"SE\" for Sweden. Calendar backend will populate this field only for EntryPointType.PHONE.
 * @member {String} regionCode
 */
EntryPoint.prototype['regionCode'] = undefined;

/**
 * The URI of the entry point. The maximum length is 1300 characters. Format:   - for video, http: or https: schema is required. - for phone, tel: schema is required. The URI should include the entire dial sequence (e.g., tel:+12345678900,,,123456789;1234). - for sip, sip: schema is required, e.g., sip:12345678@myprovider.com. - for more, http: or https: schema is required.
 * @member {String} uri
 */
EntryPoint.prototype['uri'] = undefined;






export default EntryPoint;

