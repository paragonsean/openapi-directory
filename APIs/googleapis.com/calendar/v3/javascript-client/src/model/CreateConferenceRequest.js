/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConferenceRequestStatus from './ConferenceRequestStatus';
import ConferenceSolutionKey from './ConferenceSolutionKey';

/**
 * The CreateConferenceRequest model module.
 * @module model/CreateConferenceRequest
 * @version v3
 */
class CreateConferenceRequest {
    /**
     * Constructs a new <code>CreateConferenceRequest</code>.
     * @alias module:model/CreateConferenceRequest
     */
    constructor() { 
        
        CreateConferenceRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateConferenceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateConferenceRequest} obj Optional instance to populate.
     * @return {module:model/CreateConferenceRequest} The populated <code>CreateConferenceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateConferenceRequest();

            if (data.hasOwnProperty('conferenceSolutionKey')) {
                obj['conferenceSolutionKey'] = ConferenceSolutionKey.constructFromObject(data['conferenceSolutionKey']);
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ConferenceRequestStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateConferenceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateConferenceRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `conferenceSolutionKey`
        if (data['conferenceSolutionKey']) { // data not null
          ConferenceSolutionKey.validateJSON(data['conferenceSolutionKey']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ConferenceRequestStatus.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConferenceSolutionKey} conferenceSolutionKey
 */
CreateConferenceRequest.prototype['conferenceSolutionKey'] = undefined;

/**
 * The client-generated unique ID for this request. Clients should regenerate this ID for every new request. If an ID provided is the same as for the previous request, the request is ignored.
 * @member {String} requestId
 */
CreateConferenceRequest.prototype['requestId'] = undefined;

/**
 * @member {module:model/ConferenceRequestStatus} status
 */
CreateConferenceRequest.prototype['status'] = undefined;






export default CreateConferenceRequest;

