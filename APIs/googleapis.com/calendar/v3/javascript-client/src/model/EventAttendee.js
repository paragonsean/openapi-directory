/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventAttendee model module.
 * @module model/EventAttendee
 * @version v3
 */
class EventAttendee {
    /**
     * Constructs a new <code>EventAttendee</code>.
     * @alias module:model/EventAttendee
     */
    constructor() { 
        
        EventAttendee.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['additionalGuests'] = 0;
        obj['optional'] = false;
        obj['resource'] = false;
        obj['self'] = false;
    }

    /**
     * Constructs a <code>EventAttendee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventAttendee} obj Optional instance to populate.
     * @return {module:model/EventAttendee} The populated <code>EventAttendee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventAttendee();

            if (data.hasOwnProperty('additionalGuests')) {
                obj['additionalGuests'] = ApiClient.convertToType(data['additionalGuests'], 'Number');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('optional')) {
                obj['optional'] = ApiClient.convertToType(data['optional'], 'Boolean');
            }
            if (data.hasOwnProperty('organizer')) {
                obj['organizer'] = ApiClient.convertToType(data['organizer'], 'Boolean');
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = ApiClient.convertToType(data['resource'], 'Boolean');
            }
            if (data.hasOwnProperty('responseStatus')) {
                obj['responseStatus'] = ApiClient.convertToType(data['responseStatus'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventAttendee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventAttendee</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['responseStatus'] && !(typeof data['responseStatus'] === 'string' || data['responseStatus'] instanceof String)) {
            throw new Error("Expected the field `responseStatus` to be a primitive type in the JSON string but got " + data['responseStatus']);
        }

        return true;
    }


}



/**
 * Number of additional guests. Optional. The default is 0.
 * @member {Number} additionalGuests
 * @default 0
 */
EventAttendee.prototype['additionalGuests'] = 0;

/**
 * The attendee's response comment. Optional.
 * @member {String} comment
 */
EventAttendee.prototype['comment'] = undefined;

/**
 * The attendee's name, if available. Optional.
 * @member {String} displayName
 */
EventAttendee.prototype['displayName'] = undefined;

/**
 * The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322. Required when adding an attendee.
 * @member {String} email
 */
EventAttendee.prototype['email'] = undefined;

/**
 * The attendee's Profile ID, if available.
 * @member {String} id
 */
EventAttendee.prototype['id'] = undefined;

/**
 * Whether this is an optional attendee. Optional. The default is False.
 * @member {Boolean} optional
 * @default false
 */
EventAttendee.prototype['optional'] = false;

/**
 * Whether the attendee is the organizer of the event. Read-only. The default is False.
 * @member {Boolean} organizer
 */
EventAttendee.prototype['organizer'] = undefined;

/**
 * Whether the attendee is a resource. Can only be set when the attendee is added to the event for the first time. Subsequent modifications are ignored. Optional. The default is False.
 * @member {Boolean} resource
 * @default false
 */
EventAttendee.prototype['resource'] = false;

/**
 * The attendee's response status. Possible values are:   - \"needsAction\" - The attendee has not responded to the invitation (recommended for new events).  - \"declined\" - The attendee has declined the invitation.  - \"tentative\" - The attendee has tentatively accepted the invitation.  - \"accepted\" - The attendee has accepted the invitation.  Warning: If you add an event using the values declined, tentative, or accepted, attendees with the \"Add invitations to my calendar\" setting set to \"When I respond to invitation in email\" won't see an event on their calendar unless they choose to change their invitation response in the event invitation email.
 * @member {String} responseStatus
 */
EventAttendee.prototype['responseStatus'] = undefined;

/**
 * Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False.
 * @member {Boolean} self
 * @default false
 */
EventAttendee.prototype['self'] = false;






export default EventAttendee;

