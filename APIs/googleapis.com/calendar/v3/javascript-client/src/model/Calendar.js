/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConferenceProperties from './ConferenceProperties';

/**
 * The Calendar model module.
 * @module model/Calendar
 * @version v3
 */
class Calendar {
    /**
     * Constructs a new <code>Calendar</code>.
     * @alias module:model/Calendar
     */
    constructor() { 
        
        Calendar.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'calendar#calendar';
    }

    /**
     * Constructs a <code>Calendar</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Calendar} obj Optional instance to populate.
     * @return {module:model/Calendar} The populated <code>Calendar</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Calendar();

            if (data.hasOwnProperty('conferenceProperties')) {
                obj['conferenceProperties'] = ConferenceProperties.constructFromObject(data['conferenceProperties']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Calendar</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Calendar</code>.
     */
    static validateJSON(data) {
        // validate the optional field `conferenceProperties`
        if (data['conferenceProperties']) { // data not null
          ConferenceProperties.validateJSON(data['conferenceProperties']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConferenceProperties} conferenceProperties
 */
Calendar.prototype['conferenceProperties'] = undefined;

/**
 * Description of the calendar. Optional.
 * @member {String} description
 */
Calendar.prototype['description'] = undefined;

/**
 * ETag of the resource.
 * @member {String} etag
 */
Calendar.prototype['etag'] = undefined;

/**
 * Identifier of the calendar. To retrieve IDs call the calendarList.list() method.
 * @member {String} id
 */
Calendar.prototype['id'] = undefined;

/**
 * Type of the resource (\"calendar#calendar\").
 * @member {String} kind
 * @default 'calendar#calendar'
 */
Calendar.prototype['kind'] = 'calendar#calendar';

/**
 * Geographic location of the calendar as free-form text. Optional.
 * @member {String} location
 */
Calendar.prototype['location'] = undefined;

/**
 * Title of the calendar.
 * @member {String} summary
 */
Calendar.prototype['summary'] = undefined;

/**
 * The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) Optional.
 * @member {String} timeZone
 */
Calendar.prototype['timeZone'] = undefined;






export default Calendar;

