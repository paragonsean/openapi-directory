/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AclRuleScope from './AclRuleScope';

/**
 * The AclRule model module.
 * @module model/AclRule
 * @version v3
 */
class AclRule {
    /**
     * Constructs a new <code>AclRule</code>.
     * @alias module:model/AclRule
     */
    constructor() { 
        
        AclRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'calendar#aclRule';
    }

    /**
     * Constructs a <code>AclRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AclRule} obj Optional instance to populate.
     * @return {module:model/AclRule} The populated <code>AclRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AclRule();

            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = AclRuleScope.constructFromObject(data['scope']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AclRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AclRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // validate the optional field `scope`
        if (data['scope']) { // data not null
          AclRuleScope.validateJSON(data['scope']);
        }

        return true;
    }


}



/**
 * ETag of the resource.
 * @member {String} etag
 */
AclRule.prototype['etag'] = undefined;

/**
 * Identifier of the Access Control List (ACL) rule. See Sharing calendars.
 * @member {String} id
 */
AclRule.prototype['id'] = undefined;

/**
 * Type of the resource (\"calendar#aclRule\").
 * @member {String} kind
 * @default 'calendar#aclRule'
 */
AclRule.prototype['kind'] = 'calendar#aclRule';

/**
 * The role assigned to the scope. Possible values are:   - \"none\" - Provides no access.  - \"freeBusyReader\" - Provides read access to free/busy information.  - \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
 * @member {String} role
 */
AclRule.prototype['role'] = undefined;

/**
 * @member {module:model/AclRuleScope} scope
 */
AclRule.prototype['scope'] = undefined;






export default AclRule;

