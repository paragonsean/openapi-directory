/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventOrganizer model module.
 * @module model/EventOrganizer
 * @version v3
 */
class EventOrganizer {
    /**
     * Constructs a new <code>EventOrganizer</code>.
     * The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event.
     * @alias module:model/EventOrganizer
     */
    constructor() { 
        
        EventOrganizer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['self'] = false;
    }

    /**
     * Constructs a <code>EventOrganizer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventOrganizer} obj Optional instance to populate.
     * @return {module:model/EventOrganizer} The populated <code>EventOrganizer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventOrganizer();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventOrganizer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventOrganizer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}



/**
 * The organizer's name, if available.
 * @member {String} displayName
 */
EventOrganizer.prototype['displayName'] = undefined;

/**
 * The organizer's email address, if available. It must be a valid email address as per RFC5322.
 * @member {String} email
 */
EventOrganizer.prototype['email'] = undefined;

/**
 * The organizer's Profile ID, if available.
 * @member {String} id
 */
EventOrganizer.prototype['id'] = undefined;

/**
 * Whether the organizer corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.
 * @member {Boolean} self
 * @default false
 */
EventOrganizer.prototype['self'] = false;






export default EventOrganizer;

