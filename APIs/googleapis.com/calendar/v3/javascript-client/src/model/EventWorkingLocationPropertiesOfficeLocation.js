/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventWorkingLocationPropertiesOfficeLocation model module.
 * @module model/EventWorkingLocationPropertiesOfficeLocation
 * @version v3
 */
class EventWorkingLocationPropertiesOfficeLocation {
    /**
     * Constructs a new <code>EventWorkingLocationPropertiesOfficeLocation</code>.
     * If present, specifies that the user is working from an office.
     * @alias module:model/EventWorkingLocationPropertiesOfficeLocation
     */
    constructor() { 
        
        EventWorkingLocationPropertiesOfficeLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventWorkingLocationPropertiesOfficeLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventWorkingLocationPropertiesOfficeLocation} obj Optional instance to populate.
     * @return {module:model/EventWorkingLocationPropertiesOfficeLocation} The populated <code>EventWorkingLocationPropertiesOfficeLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventWorkingLocationPropertiesOfficeLocation();

            if (data.hasOwnProperty('buildingId')) {
                obj['buildingId'] = ApiClient.convertToType(data['buildingId'], 'String');
            }
            if (data.hasOwnProperty('deskId')) {
                obj['deskId'] = ApiClient.convertToType(data['deskId'], 'String');
            }
            if (data.hasOwnProperty('floorId')) {
                obj['floorId'] = ApiClient.convertToType(data['floorId'], 'String');
            }
            if (data.hasOwnProperty('floorSectionId')) {
                obj['floorSectionId'] = ApiClient.convertToType(data['floorSectionId'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventWorkingLocationPropertiesOfficeLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventWorkingLocationPropertiesOfficeLocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['buildingId'] && !(typeof data['buildingId'] === 'string' || data['buildingId'] instanceof String)) {
            throw new Error("Expected the field `buildingId` to be a primitive type in the JSON string but got " + data['buildingId']);
        }
        // ensure the json data is a string
        if (data['deskId'] && !(typeof data['deskId'] === 'string' || data['deskId'] instanceof String)) {
            throw new Error("Expected the field `deskId` to be a primitive type in the JSON string but got " + data['deskId']);
        }
        // ensure the json data is a string
        if (data['floorId'] && !(typeof data['floorId'] === 'string' || data['floorId'] instanceof String)) {
            throw new Error("Expected the field `floorId` to be a primitive type in the JSON string but got " + data['floorId']);
        }
        // ensure the json data is a string
        if (data['floorSectionId'] && !(typeof data['floorSectionId'] === 'string' || data['floorSectionId'] instanceof String)) {
            throw new Error("Expected the field `floorSectionId` to be a primitive type in the JSON string but got " + data['floorSectionId']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }

        return true;
    }


}



/**
 * An optional building identifier. This should reference a building ID in the organization's Resources database.
 * @member {String} buildingId
 */
EventWorkingLocationPropertiesOfficeLocation.prototype['buildingId'] = undefined;

/**
 * An optional desk identifier.
 * @member {String} deskId
 */
EventWorkingLocationPropertiesOfficeLocation.prototype['deskId'] = undefined;

/**
 * An optional floor identifier.
 * @member {String} floorId
 */
EventWorkingLocationPropertiesOfficeLocation.prototype['floorId'] = undefined;

/**
 * An optional floor section identifier.
 * @member {String} floorSectionId
 */
EventWorkingLocationPropertiesOfficeLocation.prototype['floorSectionId'] = undefined;

/**
 * The office name that's displayed in Calendar Web and Mobile clients. We recommend you reference a building name in the organization's Resources database.
 * @member {String} label
 */
EventWorkingLocationPropertiesOfficeLocation.prototype['label'] = undefined;






export default EventWorkingLocationPropertiesOfficeLocation;

