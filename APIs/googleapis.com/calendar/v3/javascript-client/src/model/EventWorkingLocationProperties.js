/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventWorkingLocationPropertiesCustomLocation from './EventWorkingLocationPropertiesCustomLocation';
import EventWorkingLocationPropertiesOfficeLocation from './EventWorkingLocationPropertiesOfficeLocation';

/**
 * The EventWorkingLocationProperties model module.
 * @module model/EventWorkingLocationProperties
 * @version v3
 */
class EventWorkingLocationProperties {
    /**
     * Constructs a new <code>EventWorkingLocationProperties</code>.
     * @alias module:model/EventWorkingLocationProperties
     */
    constructor() { 
        
        EventWorkingLocationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventWorkingLocationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventWorkingLocationProperties} obj Optional instance to populate.
     * @return {module:model/EventWorkingLocationProperties} The populated <code>EventWorkingLocationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventWorkingLocationProperties();

            if (data.hasOwnProperty('customLocation')) {
                obj['customLocation'] = EventWorkingLocationPropertiesCustomLocation.constructFromObject(data['customLocation']);
            }
            if (data.hasOwnProperty('homeOffice')) {
                obj['homeOffice'] = ApiClient.convertToType(data['homeOffice'], Object);
            }
            if (data.hasOwnProperty('officeLocation')) {
                obj['officeLocation'] = EventWorkingLocationPropertiesOfficeLocation.constructFromObject(data['officeLocation']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventWorkingLocationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventWorkingLocationProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `customLocation`
        if (data['customLocation']) { // data not null
          EventWorkingLocationPropertiesCustomLocation.validateJSON(data['customLocation']);
        }
        // validate the optional field `officeLocation`
        if (data['officeLocation']) { // data not null
          EventWorkingLocationPropertiesOfficeLocation.validateJSON(data['officeLocation']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/EventWorkingLocationPropertiesCustomLocation} customLocation
 */
EventWorkingLocationProperties.prototype['customLocation'] = undefined;

/**
 * If present, specifies that the user is working at home.
 * @member {Object} homeOffice
 */
EventWorkingLocationProperties.prototype['homeOffice'] = undefined;

/**
 * @member {module:model/EventWorkingLocationPropertiesOfficeLocation} officeLocation
 */
EventWorkingLocationProperties.prototype['officeLocation'] = undefined;

/**
 * Type of the working location. Possible values are:   - \"homeOffice\" - The user is working at home.  - \"officeLocation\" - The user is working from an office.  - \"customLocation\" - The user is working from a custom location.  Any details are specified in a sub-field of the specified name, but this field may be missing if empty. Any other fields are ignored. Required when adding working location properties.
 * @member {String} type
 */
EventWorkingLocationProperties.prototype['type'] = undefined;






export default EventWorkingLocationProperties;

