/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventGadget model module.
 * @module model/EventGadget
 * @version v3
 */
class EventGadget {
    /**
     * Constructs a new <code>EventGadget</code>.
     * A gadget that extends this event. Gadgets are deprecated; this structure is instead only used for returning birthday calendar metadata.
     * @alias module:model/EventGadget
     */
    constructor() { 
        
        EventGadget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventGadget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventGadget} obj Optional instance to populate.
     * @return {module:model/EventGadget} The populated <code>EventGadget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventGadget();

            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('iconLink')) {
                obj['iconLink'] = ApiClient.convertToType(data['iconLink'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('preferences')) {
                obj['preferences'] = ApiClient.convertToType(data['preferences'], {'String': 'String'});
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventGadget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventGadget</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        // ensure the json data is a string
        if (data['iconLink'] && !(typeof data['iconLink'] === 'string' || data['iconLink'] instanceof String)) {
            throw new Error("Expected the field `iconLink` to be a primitive type in the JSON string but got " + data['iconLink']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The gadget's display mode. Deprecated. Possible values are:   - \"icon\" - The gadget displays next to the event's title in the calendar view.  - \"chip\" - The gadget displays when the event is clicked.
 * @member {String} display
 */
EventGadget.prototype['display'] = undefined;

/**
 * The gadget's height in pixels. The height must be an integer greater than 0. Optional. Deprecated.
 * @member {Number} height
 */
EventGadget.prototype['height'] = undefined;

/**
 * The gadget's icon URL. The URL scheme must be HTTPS. Deprecated.
 * @member {String} iconLink
 */
EventGadget.prototype['iconLink'] = undefined;

/**
 * The gadget's URL. The URL scheme must be HTTPS. Deprecated.
 * @member {String} link
 */
EventGadget.prototype['link'] = undefined;

/**
 * Preferences.
 * @member {Object.<String, String>} preferences
 */
EventGadget.prototype['preferences'] = undefined;

/**
 * The gadget's title. Deprecated.
 * @member {String} title
 */
EventGadget.prototype['title'] = undefined;

/**
 * The gadget's type. Deprecated.
 * @member {String} type
 */
EventGadget.prototype['type'] = undefined;

/**
 * The gadget's width in pixels. The width must be an integer greater than 0. Optional. Deprecated.
 * @member {Number} width
 */
EventGadget.prototype['width'] = undefined;






export default EventGadget;

