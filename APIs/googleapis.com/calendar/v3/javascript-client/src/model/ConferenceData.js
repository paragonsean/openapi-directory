/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConferenceParameters from './ConferenceParameters';
import ConferenceSolution from './ConferenceSolution';
import CreateConferenceRequest from './CreateConferenceRequest';
import EntryPoint from './EntryPoint';

/**
 * The ConferenceData model module.
 * @module model/ConferenceData
 * @version v3
 */
class ConferenceData {
    /**
     * Constructs a new <code>ConferenceData</code>.
     * @alias module:model/ConferenceData
     */
    constructor() { 
        
        ConferenceData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConferenceData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConferenceData} obj Optional instance to populate.
     * @return {module:model/ConferenceData} The populated <code>ConferenceData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConferenceData();

            if (data.hasOwnProperty('conferenceId')) {
                obj['conferenceId'] = ApiClient.convertToType(data['conferenceId'], 'String');
            }
            if (data.hasOwnProperty('conferenceSolution')) {
                obj['conferenceSolution'] = ConferenceSolution.constructFromObject(data['conferenceSolution']);
            }
            if (data.hasOwnProperty('createRequest')) {
                obj['createRequest'] = CreateConferenceRequest.constructFromObject(data['createRequest']);
            }
            if (data.hasOwnProperty('entryPoints')) {
                obj['entryPoints'] = ApiClient.convertToType(data['entryPoints'], [EntryPoint]);
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ConferenceParameters.constructFromObject(data['parameters']);
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConferenceData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConferenceData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['conferenceId'] && !(typeof data['conferenceId'] === 'string' || data['conferenceId'] instanceof String)) {
            throw new Error("Expected the field `conferenceId` to be a primitive type in the JSON string but got " + data['conferenceId']);
        }
        // validate the optional field `conferenceSolution`
        if (data['conferenceSolution']) { // data not null
          ConferenceSolution.validateJSON(data['conferenceSolution']);
        }
        // validate the optional field `createRequest`
        if (data['createRequest']) { // data not null
          CreateConferenceRequest.validateJSON(data['createRequest']);
        }
        if (data['entryPoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entryPoints'])) {
                throw new Error("Expected the field `entryPoints` to be an array in the JSON data but got " + data['entryPoints']);
            }
            // validate the optional field `entryPoints` (array)
            for (const item of data['entryPoints']) {
                EntryPoint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // validate the optional field `parameters`
        if (data['parameters']) { // data not null
          ConferenceParameters.validateJSON(data['parameters']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }

        return true;
    }


}



/**
 * The ID of the conference. Can be used by developers to keep track of conferences, should not be displayed to users. The ID value is formed differently for each conference solution type:   - eventHangout: ID is not set. (This conference type is deprecated.) - eventNamedHangout: ID is the name of the Hangout. (This conference type is deprecated.) - hangoutsMeet: ID is the 10-letter meeting code, for example aaa-bbbb-ccc. - addOn: ID is defined by the third-party provider.  Optional.
 * @member {String} conferenceId
 */
ConferenceData.prototype['conferenceId'] = undefined;

/**
 * @member {module:model/ConferenceSolution} conferenceSolution
 */
ConferenceData.prototype['conferenceSolution'] = undefined;

/**
 * @member {module:model/CreateConferenceRequest} createRequest
 */
ConferenceData.prototype['createRequest'] = undefined;

/**
 * Information about individual conference entry points, such as URLs or phone numbers. All of them must belong to the same conference. Either conferenceSolution and at least one entryPoint, or createRequest is required.
 * @member {Array.<module:model/EntryPoint>} entryPoints
 */
ConferenceData.prototype['entryPoints'] = undefined;

/**
 * Additional notes (such as instructions from the domain administrator, legal notices) to display to the user. Can contain HTML. The maximum length is 2048 characters. Optional.
 * @member {String} notes
 */
ConferenceData.prototype['notes'] = undefined;

/**
 * @member {module:model/ConferenceParameters} parameters
 */
ConferenceData.prototype['parameters'] = undefined;

/**
 * The signature of the conference data. Generated on server side. Unset for a conference with a failed create request. Optional for a conference with a pending create request.
 * @member {String} signature
 */
ConferenceData.prototype['signature'] = undefined;






export default ConferenceData;

