/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Event from './Event';
import EventReminder from './EventReminder';

/**
 * The Events model module.
 * @module model/Events
 * @version v3
 */
class Events {
    /**
     * Constructs a new <code>Events</code>.
     * @alias module:model/Events
     */
    constructor() { 
        
        Events.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'calendar#events';
    }

    /**
     * Constructs a <code>Events</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Events} obj Optional instance to populate.
     * @return {module:model/Events} The populated <code>Events</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Events();

            if (data.hasOwnProperty('accessRole')) {
                obj['accessRole'] = ApiClient.convertToType(data['accessRole'], 'String');
            }
            if (data.hasOwnProperty('defaultReminders')) {
                obj['defaultReminders'] = ApiClient.convertToType(data['defaultReminders'], [EventReminder]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Event]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('nextPageToken')) {
                obj['nextPageToken'] = ApiClient.convertToType(data['nextPageToken'], 'String');
            }
            if (data.hasOwnProperty('nextSyncToken')) {
                obj['nextSyncToken'] = ApiClient.convertToType(data['nextSyncToken'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Events</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Events</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessRole'] && !(typeof data['accessRole'] === 'string' || data['accessRole'] instanceof String)) {
            throw new Error("Expected the field `accessRole` to be a primitive type in the JSON string but got " + data['accessRole']);
        }
        if (data['defaultReminders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['defaultReminders'])) {
                throw new Error("Expected the field `defaultReminders` to be an array in the JSON data but got " + data['defaultReminders']);
            }
            // validate the optional field `defaultReminders` (array)
            for (const item of data['defaultReminders']) {
                EventReminder.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Event.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['nextPageToken'] && !(typeof data['nextPageToken'] === 'string' || data['nextPageToken'] instanceof String)) {
            throw new Error("Expected the field `nextPageToken` to be a primitive type in the JSON string but got " + data['nextPageToken']);
        }
        // ensure the json data is a string
        if (data['nextSyncToken'] && !(typeof data['nextSyncToken'] === 'string' || data['nextSyncToken'] instanceof String)) {
            throw new Error("Expected the field `nextSyncToken` to be a primitive type in the JSON string but got " + data['nextSyncToken']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * The user's access role for this calendar. Read-only. Possible values are:   - \"none\" - The user has no access.  - \"freeBusyReader\" - The user has read access to free/busy information.  - \"reader\" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \"writer\" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \"owner\" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
 * @member {String} accessRole
 */
Events.prototype['accessRole'] = undefined;

/**
 * The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True).
 * @member {Array.<module:model/EventReminder>} defaultReminders
 */
Events.prototype['defaultReminders'] = undefined;

/**
 * Description of the calendar. Read-only.
 * @member {String} description
 */
Events.prototype['description'] = undefined;

/**
 * ETag of the collection.
 * @member {String} etag
 */
Events.prototype['etag'] = undefined;

/**
 * List of events on the calendar.
 * @member {Array.<module:model/Event>} items
 */
Events.prototype['items'] = undefined;

/**
 * Type of the collection (\"calendar#events\").
 * @member {String} kind
 * @default 'calendar#events'
 */
Events.prototype['kind'] = 'calendar#events';

/**
 * Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
 * @member {String} nextPageToken
 */
Events.prototype['nextPageToken'] = undefined;

/**
 * Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
 * @member {String} nextSyncToken
 */
Events.prototype['nextSyncToken'] = undefined;

/**
 * Title of the calendar. Read-only.
 * @member {String} summary
 */
Events.prototype['summary'] = undefined;

/**
 * The time zone of the calendar. Read-only.
 * @member {String} timeZone
 */
Events.prototype['timeZone'] = undefined;

/**
 * Last modification time of the calendar (as a RFC3339 timestamp). Read-only.
 * @member {Date} updated
 */
Events.prototype['updated'] = undefined;






export default Events;

