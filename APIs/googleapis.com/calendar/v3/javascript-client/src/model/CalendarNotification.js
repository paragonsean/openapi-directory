/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CalendarNotification model module.
 * @module model/CalendarNotification
 * @version v3
 */
class CalendarNotification {
    /**
     * Constructs a new <code>CalendarNotification</code>.
     * @alias module:model/CalendarNotification
     */
    constructor() { 
        
        CalendarNotification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CalendarNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CalendarNotification} obj Optional instance to populate.
     * @return {module:model/CalendarNotification} The populated <code>CalendarNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CalendarNotification();

            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CalendarNotification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CalendarNotification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The method used to deliver the notification. The possible value is:   - \"email\" - Notifications are sent via email.   Required when adding a notification.
 * @member {String} method
 */
CalendarNotification.prototype['method'] = undefined;

/**
 * The type of notification. Possible values are:   - \"eventCreation\" - Notification sent when a new event is put on the calendar.  - \"eventChange\" - Notification sent when an event is changed.  - \"eventCancellation\" - Notification sent when an event is cancelled.  - \"eventResponse\" - Notification sent when an attendee responds to the event invitation.  - \"agenda\" - An agenda with the events of the day (sent out in the morning).   Required when adding a notification.
 * @member {String} type
 */
CalendarNotification.prototype['type'] = undefined;






export default CalendarNotification;

