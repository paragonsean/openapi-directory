/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventOutOfOfficeProperties model module.
 * @module model/EventOutOfOfficeProperties
 * @version v3
 */
class EventOutOfOfficeProperties {
    /**
     * Constructs a new <code>EventOutOfOfficeProperties</code>.
     * @alias module:model/EventOutOfOfficeProperties
     */
    constructor() { 
        
        EventOutOfOfficeProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventOutOfOfficeProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventOutOfOfficeProperties} obj Optional instance to populate.
     * @return {module:model/EventOutOfOfficeProperties} The populated <code>EventOutOfOfficeProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventOutOfOfficeProperties();

            if (data.hasOwnProperty('autoDeclineMode')) {
                obj['autoDeclineMode'] = ApiClient.convertToType(data['autoDeclineMode'], 'String');
            }
            if (data.hasOwnProperty('declineMessage')) {
                obj['declineMessage'] = ApiClient.convertToType(data['declineMessage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventOutOfOfficeProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventOutOfOfficeProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['autoDeclineMode'] && !(typeof data['autoDeclineMode'] === 'string' || data['autoDeclineMode'] instanceof String)) {
            throw new Error("Expected the field `autoDeclineMode` to be a primitive type in the JSON string but got " + data['autoDeclineMode']);
        }
        // ensure the json data is a string
        if (data['declineMessage'] && !(typeof data['declineMessage'] === 'string' || data['declineMessage'] instanceof String)) {
            throw new Error("Expected the field `declineMessage` to be a primitive type in the JSON string but got " + data['declineMessage']);
        }

        return true;
    }


}



/**
 * Whether to decline meeting invitations which overlap Out of office events. Valid values are declineNone, meaning that no meeting invitations are declined; declineAllConflictingInvitations, meaning that all conflicting meeting invitations that conflict with the event are declined; and declineOnlyNewConflictingInvitations, meaning that only new conflicting meeting invitations which arrive while the Out of office event is present are to be declined.
 * @member {String} autoDeclineMode
 */
EventOutOfOfficeProperties.prototype['autoDeclineMode'] = undefined;

/**
 * Response message to set if an existing event or new invitation is automatically declined by Calendar.
 * @member {String} declineMessage
 */
EventOutOfOfficeProperties.prototype['declineMessage'] = undefined;






export default EventOutOfOfficeProperties;

