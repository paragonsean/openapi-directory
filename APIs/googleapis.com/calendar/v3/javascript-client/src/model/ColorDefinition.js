/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ColorDefinition model module.
 * @module model/ColorDefinition
 * @version v3
 */
class ColorDefinition {
    /**
     * Constructs a new <code>ColorDefinition</code>.
     * @alias module:model/ColorDefinition
     */
    constructor() { 
        
        ColorDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ColorDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ColorDefinition} obj Optional instance to populate.
     * @return {module:model/ColorDefinition} The populated <code>ColorDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ColorDefinition();

            if (data.hasOwnProperty('background')) {
                obj['background'] = ApiClient.convertToType(data['background'], 'String');
            }
            if (data.hasOwnProperty('foreground')) {
                obj['foreground'] = ApiClient.convertToType(data['foreground'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ColorDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ColorDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['background'] && !(typeof data['background'] === 'string' || data['background'] instanceof String)) {
            throw new Error("Expected the field `background` to be a primitive type in the JSON string but got " + data['background']);
        }
        // ensure the json data is a string
        if (data['foreground'] && !(typeof data['foreground'] === 'string' || data['foreground'] instanceof String)) {
            throw new Error("Expected the field `foreground` to be a primitive type in the JSON string but got " + data['foreground']);
        }

        return true;
    }


}



/**
 * The background color associated with this color definition.
 * @member {String} background
 */
ColorDefinition.prototype['background'] = undefined;

/**
 * The foreground color that can be used to write on top of a background with 'background' color.
 * @member {String} foreground
 */
ColorDefinition.prototype['foreground'] = undefined;






export default ColorDefinition;

