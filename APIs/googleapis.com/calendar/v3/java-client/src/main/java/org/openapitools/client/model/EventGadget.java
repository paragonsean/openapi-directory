/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A gadget that extends this event. Gadgets are deprecated; this structure is instead only used for returning birthday calendar metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:09.684550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventGadget {
  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_ICON_LINK = "iconLink";
  @SerializedName(SERIALIZED_NAME_ICON_LINK)
  private String iconLink;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private Map<String, String> preferences = new HashMap<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public EventGadget() {
  }

  public EventGadget display(String display) {
    this.display = display;
    return this;
  }

  /**
   * The gadget&#39;s display mode. Deprecated. Possible values are:   - \&quot;icon\&quot; - The gadget displays next to the event&#39;s title in the calendar view.  - \&quot;chip\&quot; - The gadget displays when the event is clicked.
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }

  public void setDisplay(String display) {
    this.display = display;
  }


  public EventGadget height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * The gadget&#39;s height in pixels. The height must be an integer greater than 0. Optional. Deprecated.
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public EventGadget iconLink(String iconLink) {
    this.iconLink = iconLink;
    return this;
  }

  /**
   * The gadget&#39;s icon URL. The URL scheme must be HTTPS. Deprecated.
   * @return iconLink
   */
  @javax.annotation.Nullable
  public String getIconLink() {
    return iconLink;
  }

  public void setIconLink(String iconLink) {
    this.iconLink = iconLink;
  }


  public EventGadget link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The gadget&#39;s URL. The URL scheme must be HTTPS. Deprecated.
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public EventGadget preferences(Map<String, String> preferences) {
    this.preferences = preferences;
    return this;
  }

  public EventGadget putPreferencesItem(String key, String preferencesItem) {
    if (this.preferences == null) {
      this.preferences = new HashMap<>();
    }
    this.preferences.put(key, preferencesItem);
    return this;
  }

  /**
   * Preferences.
   * @return preferences
   */
  @javax.annotation.Nullable
  public Map<String, String> getPreferences() {
    return preferences;
  }

  public void setPreferences(Map<String, String> preferences) {
    this.preferences = preferences;
  }


  public EventGadget title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The gadget&#39;s title. Deprecated.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public EventGadget type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The gadget&#39;s type. Deprecated.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public EventGadget width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * The gadget&#39;s width in pixels. The width must be an integer greater than 0. Optional. Deprecated.
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventGadget eventGadget = (EventGadget) o;
    return Objects.equals(this.display, eventGadget.display) &&
        Objects.equals(this.height, eventGadget.height) &&
        Objects.equals(this.iconLink, eventGadget.iconLink) &&
        Objects.equals(this.link, eventGadget.link) &&
        Objects.equals(this.preferences, eventGadget.preferences) &&
        Objects.equals(this.title, eventGadget.title) &&
        Objects.equals(this.type, eventGadget.type) &&
        Objects.equals(this.width, eventGadget.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(display, height, iconLink, link, preferences, title, type, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventGadget {\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    iconLink: ").append(toIndentedString(iconLink)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("display");
    openapiFields.add("height");
    openapiFields.add("iconLink");
    openapiFields.add("link");
    openapiFields.add("preferences");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventGadget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventGadget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventGadget is not found in the empty JSON string", EventGadget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventGadget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventGadget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if ((jsonObj.get("iconLink") != null && !jsonObj.get("iconLink").isJsonNull()) && !jsonObj.get("iconLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconLink").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventGadget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventGadget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventGadget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventGadget.class));

       return (TypeAdapter<T>) new TypeAdapter<EventGadget>() {
           @Override
           public void write(JsonWriter out, EventGadget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventGadget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventGadget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventGadget
   * @throws IOException if the JSON string is invalid with respect to EventGadget
   */
  public static EventGadget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventGadget.class);
  }

  /**
   * Convert an instance of EventGadget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

