/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EventWorkingLocationPropertiesCustomLocation;
import org.openapitools.client.model.EventWorkingLocationPropertiesOfficeLocation;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventWorkingLocationProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:09.684550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventWorkingLocationProperties {
  public static final String SERIALIZED_NAME_CUSTOM_LOCATION = "customLocation";
  @SerializedName(SERIALIZED_NAME_CUSTOM_LOCATION)
  private EventWorkingLocationPropertiesCustomLocation customLocation;

  public static final String SERIALIZED_NAME_HOME_OFFICE = "homeOffice";
  @SerializedName(SERIALIZED_NAME_HOME_OFFICE)
  private Object homeOffice = null;

  public static final String SERIALIZED_NAME_OFFICE_LOCATION = "officeLocation";
  @SerializedName(SERIALIZED_NAME_OFFICE_LOCATION)
  private EventWorkingLocationPropertiesOfficeLocation officeLocation;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public EventWorkingLocationProperties() {
  }

  public EventWorkingLocationProperties customLocation(EventWorkingLocationPropertiesCustomLocation customLocation) {
    this.customLocation = customLocation;
    return this;
  }

  /**
   * Get customLocation
   * @return customLocation
   */
  @javax.annotation.Nullable
  public EventWorkingLocationPropertiesCustomLocation getCustomLocation() {
    return customLocation;
  }

  public void setCustomLocation(EventWorkingLocationPropertiesCustomLocation customLocation) {
    this.customLocation = customLocation;
  }


  public EventWorkingLocationProperties homeOffice(Object homeOffice) {
    this.homeOffice = homeOffice;
    return this;
  }

  /**
   * If present, specifies that the user is working at home.
   * @return homeOffice
   */
  @javax.annotation.Nullable
  public Object getHomeOffice() {
    return homeOffice;
  }

  public void setHomeOffice(Object homeOffice) {
    this.homeOffice = homeOffice;
  }


  public EventWorkingLocationProperties officeLocation(EventWorkingLocationPropertiesOfficeLocation officeLocation) {
    this.officeLocation = officeLocation;
    return this;
  }

  /**
   * Get officeLocation
   * @return officeLocation
   */
  @javax.annotation.Nullable
  public EventWorkingLocationPropertiesOfficeLocation getOfficeLocation() {
    return officeLocation;
  }

  public void setOfficeLocation(EventWorkingLocationPropertiesOfficeLocation officeLocation) {
    this.officeLocation = officeLocation;
  }


  public EventWorkingLocationProperties type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the working location. Possible values are:   - \&quot;homeOffice\&quot; - The user is working at home.  - \&quot;officeLocation\&quot; - The user is working from an office.  - \&quot;customLocation\&quot; - The user is working from a custom location.  Any details are specified in a sub-field of the specified name, but this field may be missing if empty. Any other fields are ignored. Required when adding working location properties.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventWorkingLocationProperties eventWorkingLocationProperties = (EventWorkingLocationProperties) o;
    return Objects.equals(this.customLocation, eventWorkingLocationProperties.customLocation) &&
        Objects.equals(this.homeOffice, eventWorkingLocationProperties.homeOffice) &&
        Objects.equals(this.officeLocation, eventWorkingLocationProperties.officeLocation) &&
        Objects.equals(this.type, eventWorkingLocationProperties.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(customLocation, homeOffice, officeLocation, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventWorkingLocationProperties {\n");
    sb.append("    customLocation: ").append(toIndentedString(customLocation)).append("\n");
    sb.append("    homeOffice: ").append(toIndentedString(homeOffice)).append("\n");
    sb.append("    officeLocation: ").append(toIndentedString(officeLocation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customLocation");
    openapiFields.add("homeOffice");
    openapiFields.add("officeLocation");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventWorkingLocationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventWorkingLocationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventWorkingLocationProperties is not found in the empty JSON string", EventWorkingLocationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventWorkingLocationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventWorkingLocationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customLocation`
      if (jsonObj.get("customLocation") != null && !jsonObj.get("customLocation").isJsonNull()) {
        EventWorkingLocationPropertiesCustomLocation.validateJsonElement(jsonObj.get("customLocation"));
      }
      // validate the optional field `officeLocation`
      if (jsonObj.get("officeLocation") != null && !jsonObj.get("officeLocation").isJsonNull()) {
        EventWorkingLocationPropertiesOfficeLocation.validateJsonElement(jsonObj.get("officeLocation"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventWorkingLocationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventWorkingLocationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventWorkingLocationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventWorkingLocationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EventWorkingLocationProperties>() {
           @Override
           public void write(JsonWriter out, EventWorkingLocationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventWorkingLocationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventWorkingLocationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventWorkingLocationProperties
   * @throws IOException if the JSON string is invalid with respect to EventWorkingLocationProperties
   */
  public static EventWorkingLocationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventWorkingLocationProperties.class);
  }

  /**
   * Convert an instance of EventWorkingLocationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

