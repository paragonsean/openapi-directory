/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If present, specifies that the user is working from an office.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:09.684550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventWorkingLocationPropertiesOfficeLocation {
  public static final String SERIALIZED_NAME_BUILDING_ID = "buildingId";
  @SerializedName(SERIALIZED_NAME_BUILDING_ID)
  private String buildingId;

  public static final String SERIALIZED_NAME_DESK_ID = "deskId";
  @SerializedName(SERIALIZED_NAME_DESK_ID)
  private String deskId;

  public static final String SERIALIZED_NAME_FLOOR_ID = "floorId";
  @SerializedName(SERIALIZED_NAME_FLOOR_ID)
  private String floorId;

  public static final String SERIALIZED_NAME_FLOOR_SECTION_ID = "floorSectionId";
  @SerializedName(SERIALIZED_NAME_FLOOR_SECTION_ID)
  private String floorSectionId;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public EventWorkingLocationPropertiesOfficeLocation() {
  }

  public EventWorkingLocationPropertiesOfficeLocation buildingId(String buildingId) {
    this.buildingId = buildingId;
    return this;
  }

  /**
   * An optional building identifier. This should reference a building ID in the organization&#39;s Resources database.
   * @return buildingId
   */
  @javax.annotation.Nullable
  public String getBuildingId() {
    return buildingId;
  }

  public void setBuildingId(String buildingId) {
    this.buildingId = buildingId;
  }


  public EventWorkingLocationPropertiesOfficeLocation deskId(String deskId) {
    this.deskId = deskId;
    return this;
  }

  /**
   * An optional desk identifier.
   * @return deskId
   */
  @javax.annotation.Nullable
  public String getDeskId() {
    return deskId;
  }

  public void setDeskId(String deskId) {
    this.deskId = deskId;
  }


  public EventWorkingLocationPropertiesOfficeLocation floorId(String floorId) {
    this.floorId = floorId;
    return this;
  }

  /**
   * An optional floor identifier.
   * @return floorId
   */
  @javax.annotation.Nullable
  public String getFloorId() {
    return floorId;
  }

  public void setFloorId(String floorId) {
    this.floorId = floorId;
  }


  public EventWorkingLocationPropertiesOfficeLocation floorSectionId(String floorSectionId) {
    this.floorSectionId = floorSectionId;
    return this;
  }

  /**
   * An optional floor section identifier.
   * @return floorSectionId
   */
  @javax.annotation.Nullable
  public String getFloorSectionId() {
    return floorSectionId;
  }

  public void setFloorSectionId(String floorSectionId) {
    this.floorSectionId = floorSectionId;
  }


  public EventWorkingLocationPropertiesOfficeLocation label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The office name that&#39;s displayed in Calendar Web and Mobile clients. We recommend you reference a building name in the organization&#39;s Resources database.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventWorkingLocationPropertiesOfficeLocation eventWorkingLocationPropertiesOfficeLocation = (EventWorkingLocationPropertiesOfficeLocation) o;
    return Objects.equals(this.buildingId, eventWorkingLocationPropertiesOfficeLocation.buildingId) &&
        Objects.equals(this.deskId, eventWorkingLocationPropertiesOfficeLocation.deskId) &&
        Objects.equals(this.floorId, eventWorkingLocationPropertiesOfficeLocation.floorId) &&
        Objects.equals(this.floorSectionId, eventWorkingLocationPropertiesOfficeLocation.floorSectionId) &&
        Objects.equals(this.label, eventWorkingLocationPropertiesOfficeLocation.label);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildingId, deskId, floorId, floorSectionId, label);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventWorkingLocationPropertiesOfficeLocation {\n");
    sb.append("    buildingId: ").append(toIndentedString(buildingId)).append("\n");
    sb.append("    deskId: ").append(toIndentedString(deskId)).append("\n");
    sb.append("    floorId: ").append(toIndentedString(floorId)).append("\n");
    sb.append("    floorSectionId: ").append(toIndentedString(floorSectionId)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildingId");
    openapiFields.add("deskId");
    openapiFields.add("floorId");
    openapiFields.add("floorSectionId");
    openapiFields.add("label");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventWorkingLocationPropertiesOfficeLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventWorkingLocationPropertiesOfficeLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventWorkingLocationPropertiesOfficeLocation is not found in the empty JSON string", EventWorkingLocationPropertiesOfficeLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventWorkingLocationPropertiesOfficeLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventWorkingLocationPropertiesOfficeLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buildingId") != null && !jsonObj.get("buildingId").isJsonNull()) && !jsonObj.get("buildingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildingId").toString()));
      }
      if ((jsonObj.get("deskId") != null && !jsonObj.get("deskId").isJsonNull()) && !jsonObj.get("deskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deskId").toString()));
      }
      if ((jsonObj.get("floorId") != null && !jsonObj.get("floorId").isJsonNull()) && !jsonObj.get("floorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floorId").toString()));
      }
      if ((jsonObj.get("floorSectionId") != null && !jsonObj.get("floorSectionId").isJsonNull()) && !jsonObj.get("floorSectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floorSectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floorSectionId").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventWorkingLocationPropertiesOfficeLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventWorkingLocationPropertiesOfficeLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventWorkingLocationPropertiesOfficeLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventWorkingLocationPropertiesOfficeLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<EventWorkingLocationPropertiesOfficeLocation>() {
           @Override
           public void write(JsonWriter out, EventWorkingLocationPropertiesOfficeLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventWorkingLocationPropertiesOfficeLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventWorkingLocationPropertiesOfficeLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventWorkingLocationPropertiesOfficeLocation
   * @throws IOException if the JSON string is invalid with respect to EventWorkingLocationPropertiesOfficeLocation
   */
  public static EventWorkingLocationPropertiesOfficeLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventWorkingLocationPropertiesOfficeLocation.class);
  }

  /**
   * Convert an instance of EventWorkingLocationPropertiesOfficeLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

