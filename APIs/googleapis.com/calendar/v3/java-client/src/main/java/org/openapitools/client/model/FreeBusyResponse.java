/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.FreeBusyCalendar;
import org.openapitools.client.model.FreeBusyGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FreeBusyResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:09.684550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FreeBusyResponse {
  public static final String SERIALIZED_NAME_CALENDARS = "calendars";
  @SerializedName(SERIALIZED_NAME_CALENDARS)
  private Map<String, FreeBusyCalendar> calendars = new HashMap<>();

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private Map<String, FreeBusyGroup> groups = new HashMap<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "calendar#freeBusy";

  public static final String SERIALIZED_NAME_TIME_MAX = "timeMax";
  @SerializedName(SERIALIZED_NAME_TIME_MAX)
  private OffsetDateTime timeMax;

  public static final String SERIALIZED_NAME_TIME_MIN = "timeMin";
  @SerializedName(SERIALIZED_NAME_TIME_MIN)
  private OffsetDateTime timeMin;

  public FreeBusyResponse() {
  }

  public FreeBusyResponse calendars(Map<String, FreeBusyCalendar> calendars) {
    this.calendars = calendars;
    return this;
  }

  public FreeBusyResponse putCalendarsItem(String key, FreeBusyCalendar calendarsItem) {
    if (this.calendars == null) {
      this.calendars = new HashMap<>();
    }
    this.calendars.put(key, calendarsItem);
    return this;
  }

  /**
   * List of free/busy information for calendars.
   * @return calendars
   */
  @javax.annotation.Nullable
  public Map<String, FreeBusyCalendar> getCalendars() {
    return calendars;
  }

  public void setCalendars(Map<String, FreeBusyCalendar> calendars) {
    this.calendars = calendars;
  }


  public FreeBusyResponse groups(Map<String, FreeBusyGroup> groups) {
    this.groups = groups;
    return this;
  }

  public FreeBusyResponse putGroupsItem(String key, FreeBusyGroup groupsItem) {
    if (this.groups == null) {
      this.groups = new HashMap<>();
    }
    this.groups.put(key, groupsItem);
    return this;
  }

  /**
   * Expansion of groups.
   * @return groups
   */
  @javax.annotation.Nullable
  public Map<String, FreeBusyGroup> getGroups() {
    return groups;
  }

  public void setGroups(Map<String, FreeBusyGroup> groups) {
    this.groups = groups;
  }


  public FreeBusyResponse kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Type of the resource (\&quot;calendar#freeBusy\&quot;).
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public FreeBusyResponse timeMax(OffsetDateTime timeMax) {
    this.timeMax = timeMax;
    return this;
  }

  /**
   * The end of the interval.
   * @return timeMax
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeMax() {
    return timeMax;
  }

  public void setTimeMax(OffsetDateTime timeMax) {
    this.timeMax = timeMax;
  }


  public FreeBusyResponse timeMin(OffsetDateTime timeMin) {
    this.timeMin = timeMin;
    return this;
  }

  /**
   * The start of the interval.
   * @return timeMin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeMin() {
    return timeMin;
  }

  public void setTimeMin(OffsetDateTime timeMin) {
    this.timeMin = timeMin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FreeBusyResponse freeBusyResponse = (FreeBusyResponse) o;
    return Objects.equals(this.calendars, freeBusyResponse.calendars) &&
        Objects.equals(this.groups, freeBusyResponse.groups) &&
        Objects.equals(this.kind, freeBusyResponse.kind) &&
        Objects.equals(this.timeMax, freeBusyResponse.timeMax) &&
        Objects.equals(this.timeMin, freeBusyResponse.timeMin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calendars, groups, kind, timeMax, timeMin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FreeBusyResponse {\n");
    sb.append("    calendars: ").append(toIndentedString(calendars)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    timeMax: ").append(toIndentedString(timeMax)).append("\n");
    sb.append("    timeMin: ").append(toIndentedString(timeMin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calendars");
    openapiFields.add("groups");
    openapiFields.add("kind");
    openapiFields.add("timeMax");
    openapiFields.add("timeMin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FreeBusyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FreeBusyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FreeBusyResponse is not found in the empty JSON string", FreeBusyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FreeBusyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FreeBusyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FreeBusyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FreeBusyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FreeBusyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FreeBusyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FreeBusyResponse>() {
           @Override
           public void write(JsonWriter out, FreeBusyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FreeBusyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FreeBusyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FreeBusyResponse
   * @throws IOException if the JSON string is invalid with respect to FreeBusyResponse
   */
  public static FreeBusyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FreeBusyResponse.class);
  }

  /**
   * Convert an instance of FreeBusyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

