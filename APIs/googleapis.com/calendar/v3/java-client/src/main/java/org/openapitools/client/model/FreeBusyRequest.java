/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FreeBusyRequestItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FreeBusyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:09.684550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FreeBusyRequest {
  public static final String SERIALIZED_NAME_CALENDAR_EXPANSION_MAX = "calendarExpansionMax";
  @SerializedName(SERIALIZED_NAME_CALENDAR_EXPANSION_MAX)
  private Integer calendarExpansionMax;

  public static final String SERIALIZED_NAME_GROUP_EXPANSION_MAX = "groupExpansionMax";
  @SerializedName(SERIALIZED_NAME_GROUP_EXPANSION_MAX)
  private Integer groupExpansionMax;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<FreeBusyRequestItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_MAX = "timeMax";
  @SerializedName(SERIALIZED_NAME_TIME_MAX)
  private OffsetDateTime timeMax;

  public static final String SERIALIZED_NAME_TIME_MIN = "timeMin";
  @SerializedName(SERIALIZED_NAME_TIME_MIN)
  private OffsetDateTime timeMin;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone = "UTC";

  public FreeBusyRequest() {
  }

  public FreeBusyRequest calendarExpansionMax(Integer calendarExpansionMax) {
    this.calendarExpansionMax = calendarExpansionMax;
    return this;
  }

  /**
   * Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.
   * @return calendarExpansionMax
   */
  @javax.annotation.Nullable
  public Integer getCalendarExpansionMax() {
    return calendarExpansionMax;
  }

  public void setCalendarExpansionMax(Integer calendarExpansionMax) {
    this.calendarExpansionMax = calendarExpansionMax;
  }


  public FreeBusyRequest groupExpansionMax(Integer groupExpansionMax) {
    this.groupExpansionMax = groupExpansionMax;
    return this;
  }

  /**
   * Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.
   * @return groupExpansionMax
   */
  @javax.annotation.Nullable
  public Integer getGroupExpansionMax() {
    return groupExpansionMax;
  }

  public void setGroupExpansionMax(Integer groupExpansionMax) {
    this.groupExpansionMax = groupExpansionMax;
  }


  public FreeBusyRequest items(List<FreeBusyRequestItem> items) {
    this.items = items;
    return this;
  }

  public FreeBusyRequest addItemsItem(FreeBusyRequestItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * List of calendars and/or groups to query.
   * @return items
   */
  @javax.annotation.Nullable
  public List<FreeBusyRequestItem> getItems() {
    return items;
  }

  public void setItems(List<FreeBusyRequestItem> items) {
    this.items = items;
  }


  public FreeBusyRequest timeMax(OffsetDateTime timeMax) {
    this.timeMax = timeMax;
    return this;
  }

  /**
   * The end of the interval for the query formatted as per RFC3339.
   * @return timeMax
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeMax() {
    return timeMax;
  }

  public void setTimeMax(OffsetDateTime timeMax) {
    this.timeMax = timeMax;
  }


  public FreeBusyRequest timeMin(OffsetDateTime timeMin) {
    this.timeMin = timeMin;
    return this;
  }

  /**
   * The start of the interval for the query formatted as per RFC3339.
   * @return timeMin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeMin() {
    return timeMin;
  }

  public void setTimeMin(OffsetDateTime timeMin) {
    this.timeMin = timeMin;
  }


  public FreeBusyRequest timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Time zone used in the response. Optional. The default is UTC.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FreeBusyRequest freeBusyRequest = (FreeBusyRequest) o;
    return Objects.equals(this.calendarExpansionMax, freeBusyRequest.calendarExpansionMax) &&
        Objects.equals(this.groupExpansionMax, freeBusyRequest.groupExpansionMax) &&
        Objects.equals(this.items, freeBusyRequest.items) &&
        Objects.equals(this.timeMax, freeBusyRequest.timeMax) &&
        Objects.equals(this.timeMin, freeBusyRequest.timeMin) &&
        Objects.equals(this.timeZone, freeBusyRequest.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calendarExpansionMax, groupExpansionMax, items, timeMax, timeMin, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FreeBusyRequest {\n");
    sb.append("    calendarExpansionMax: ").append(toIndentedString(calendarExpansionMax)).append("\n");
    sb.append("    groupExpansionMax: ").append(toIndentedString(groupExpansionMax)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    timeMax: ").append(toIndentedString(timeMax)).append("\n");
    sb.append("    timeMin: ").append(toIndentedString(timeMin)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calendarExpansionMax");
    openapiFields.add("groupExpansionMax");
    openapiFields.add("items");
    openapiFields.add("timeMax");
    openapiFields.add("timeMin");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FreeBusyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FreeBusyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FreeBusyRequest is not found in the empty JSON string", FreeBusyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FreeBusyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FreeBusyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            FreeBusyRequestItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FreeBusyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FreeBusyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FreeBusyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FreeBusyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FreeBusyRequest>() {
           @Override
           public void write(JsonWriter out, FreeBusyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FreeBusyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FreeBusyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FreeBusyRequest
   * @throws IOException if the JSON string is invalid with respect to FreeBusyRequest
   */
  public static FreeBusyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FreeBusyRequest.class);
  }

  /**
   * Convert an instance of FreeBusyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

