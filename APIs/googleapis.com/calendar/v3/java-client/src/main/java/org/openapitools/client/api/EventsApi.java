/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Channel;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.Events;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for calendarEventsDelete
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the deletion of the event. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the deletion of the event. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsDeleteCall(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendars/{calendarId}/events/{eventId}"
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()))
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (sendNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendNotifications", sendNotifications));
        }

        if (sendUpdates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendUpdates", sendUpdates));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarEventsDeleteValidateBeforeCall(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling calendarEventsDelete(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling calendarEventsDelete(Async)");
        }

        return calendarEventsDeleteCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates, _callback);

    }

    /**
     * 
     * Deletes an event.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the deletion of the event. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the deletion of the event. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void calendarEventsDelete(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates) throws ApiException {
        calendarEventsDeleteWithHttpInfo(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates);
    }

    /**
     * 
     * Deletes an event.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the deletion of the event. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the deletion of the event. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> calendarEventsDeleteWithHttpInfo(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates) throws ApiException {
        okhttp3.Call localVarCall = calendarEventsDeleteValidateBeforeCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an event.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the deletion of the event. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the deletion of the event. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsDeleteAsync(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarEventsDeleteValidateBeforeCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarEventsGet
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsGetCall(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer maxAttendees, String timeZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendars/{calendarId}/events/{eventId}"
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()))
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (alwaysIncludeEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alwaysIncludeEmail", alwaysIncludeEmail));
        }

        if (maxAttendees != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAttendees", maxAttendees));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarEventsGetValidateBeforeCall(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer maxAttendees, String timeZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling calendarEventsGet(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling calendarEventsGet(Async)");
        }

        return calendarEventsGetCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, maxAttendees, timeZone, _callback);

    }

    /**
     * 
     * Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Event calendarEventsGet(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer maxAttendees, String timeZone) throws ApiException {
        ApiResponse<Event> localVarResp = calendarEventsGetWithHttpInfo(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, maxAttendees, timeZone);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> calendarEventsGetWithHttpInfo(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer maxAttendees, String timeZone) throws ApiException {
        okhttp3.Call localVarCall = calendarEventsGetValidateBeforeCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, maxAttendees, timeZone, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsGetAsync(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer maxAttendees, String timeZone, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarEventsGetValidateBeforeCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, maxAttendees, timeZone, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarEventsImport
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsImportCall(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer conferenceDataVersion, Boolean supportsAttachments, Event event, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = event;

        // create path and map variables
        String localVarPath = "/calendars/{calendarId}/events/import"
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (conferenceDataVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conferenceDataVersion", conferenceDataVersion));
        }

        if (supportsAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAttachments", supportsAttachments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarEventsImportValidateBeforeCall(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer conferenceDataVersion, Boolean supportsAttachments, Event event, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling calendarEventsImport(Async)");
        }

        return calendarEventsImportCall(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, conferenceDataVersion, supportsAttachments, event, _callback);

    }

    /**
     * 
     * Imports an event. This operation is used to add a private copy of an existing event to a calendar.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Event calendarEventsImport(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer conferenceDataVersion, Boolean supportsAttachments, Event event) throws ApiException {
        ApiResponse<Event> localVarResp = calendarEventsImportWithHttpInfo(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, conferenceDataVersion, supportsAttachments, event);
        return localVarResp.getData();
    }

    /**
     * 
     * Imports an event. This operation is used to add a private copy of an existing event to a calendar.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> calendarEventsImportWithHttpInfo(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer conferenceDataVersion, Boolean supportsAttachments, Event event) throws ApiException {
        okhttp3.Call localVarCall = calendarEventsImportValidateBeforeCall(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, conferenceDataVersion, supportsAttachments, event, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Imports an event. This operation is used to add a private copy of an existing event to a calendar.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsImportAsync(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer conferenceDataVersion, Boolean supportsAttachments, Event event, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarEventsImportValidateBeforeCall(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, conferenceDataVersion, supportsAttachments, event, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarEventsInsert
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the creation of the new event. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Whether to send notifications about the creation of the new event. Note that some emails might still be sent. The default is false. (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsInsertCall(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = event;

        // create path and map variables
        String localVarPath = "/calendars/{calendarId}/events"
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (conferenceDataVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conferenceDataVersion", conferenceDataVersion));
        }

        if (maxAttendees != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAttendees", maxAttendees));
        }

        if (sendNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendNotifications", sendNotifications));
        }

        if (sendUpdates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendUpdates", sendUpdates));
        }

        if (supportsAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAttachments", supportsAttachments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarEventsInsertValidateBeforeCall(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling calendarEventsInsert(Async)");
        }

        return calendarEventsInsertCall(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event, _callback);

    }

    /**
     * 
     * Creates an event.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the creation of the new event. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Whether to send notifications about the creation of the new event. Note that some emails might still be sent. The default is false. (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Event calendarEventsInsert(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event) throws ApiException {
        ApiResponse<Event> localVarResp = calendarEventsInsertWithHttpInfo(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an event.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the creation of the new event. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Whether to send notifications about the creation of the new event. Note that some emails might still be sent. The default is false. (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> calendarEventsInsertWithHttpInfo(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event) throws ApiException {
        okhttp3.Call localVarCall = calendarEventsInsertValidateBeforeCall(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an event.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the creation of the new event. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Whether to send notifications about the creation of the new event. Note that some emails might still be sent. The default is false. (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsInsertAsync(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarEventsInsertValidateBeforeCall(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarEventsInstances
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Recurring event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param maxResults Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional. (optional)
     * @param originalStart The original start time of the instance in the result. Optional. (optional)
     * @param pageToken Token specifying which result page to return. Optional. (optional)
     * @param showDeleted Whether to include deleted events (with status equals \&quot;cancelled\&quot;) in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False. (optional)
     * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset. (optional)
     * @param timeMin Lower bound (inclusive) for an event&#39;s end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsInstancesCall(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer maxAttendees, Integer maxResults, String originalStart, String pageToken, Boolean showDeleted, String timeMax, String timeMin, String timeZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendars/{calendarId}/events/{eventId}/instances"
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()))
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (alwaysIncludeEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alwaysIncludeEmail", alwaysIncludeEmail));
        }

        if (maxAttendees != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAttendees", maxAttendees));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (originalStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originalStart", originalStart));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (showDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showDeleted", showDeleted));
        }

        if (timeMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeMax", timeMax));
        }

        if (timeMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeMin", timeMin));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarEventsInstancesValidateBeforeCall(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer maxAttendees, Integer maxResults, String originalStart, String pageToken, Boolean showDeleted, String timeMax, String timeMin, String timeZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling calendarEventsInstances(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling calendarEventsInstances(Async)");
        }

        return calendarEventsInstancesCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, maxAttendees, maxResults, originalStart, pageToken, showDeleted, timeMax, timeMin, timeZone, _callback);

    }

    /**
     * 
     * Returns instances of the specified recurring event.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Recurring event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param maxResults Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional. (optional)
     * @param originalStart The original start time of the instance in the result. Optional. (optional)
     * @param pageToken Token specifying which result page to return. Optional. (optional)
     * @param showDeleted Whether to include deleted events (with status equals \&quot;cancelled\&quot;) in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False. (optional)
     * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset. (optional)
     * @param timeMin Lower bound (inclusive) for an event&#39;s end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @return Events
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Events calendarEventsInstances(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer maxAttendees, Integer maxResults, String originalStart, String pageToken, Boolean showDeleted, String timeMax, String timeMin, String timeZone) throws ApiException {
        ApiResponse<Events> localVarResp = calendarEventsInstancesWithHttpInfo(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, maxAttendees, maxResults, originalStart, pageToken, showDeleted, timeMax, timeMin, timeZone);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns instances of the specified recurring event.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Recurring event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param maxResults Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional. (optional)
     * @param originalStart The original start time of the instance in the result. Optional. (optional)
     * @param pageToken Token specifying which result page to return. Optional. (optional)
     * @param showDeleted Whether to include deleted events (with status equals \&quot;cancelled\&quot;) in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False. (optional)
     * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset. (optional)
     * @param timeMin Lower bound (inclusive) for an event&#39;s end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @return ApiResponse&lt;Events&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Events> calendarEventsInstancesWithHttpInfo(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer maxAttendees, Integer maxResults, String originalStart, String pageToken, Boolean showDeleted, String timeMax, String timeMin, String timeZone) throws ApiException {
        okhttp3.Call localVarCall = calendarEventsInstancesValidateBeforeCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, maxAttendees, maxResults, originalStart, pageToken, showDeleted, timeMax, timeMin, timeZone, null);
        Type localVarReturnType = new TypeToken<Events>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns instances of the specified recurring event.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Recurring event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param maxResults Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional. (optional)
     * @param originalStart The original start time of the instance in the result. Optional. (optional)
     * @param pageToken Token specifying which result page to return. Optional. (optional)
     * @param showDeleted Whether to include deleted events (with status equals \&quot;cancelled\&quot;) in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False. (optional)
     * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset. (optional)
     * @param timeMin Lower bound (inclusive) for an event&#39;s end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsInstancesAsync(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer maxAttendees, Integer maxResults, String originalStart, String pageToken, Boolean showDeleted, String timeMax, String timeMin, String timeZone, final ApiCallback<Events> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarEventsInstancesValidateBeforeCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, maxAttendees, maxResults, originalStart, pageToken, showDeleted, timeMax, timeMin, timeZone, _callback);
        Type localVarReturnType = new TypeToken<Events>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarEventsList
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. (optional)
     * @param eventTypes Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is [\&quot;default\&quot;, \&quot;focusTime\&quot;, \&quot;outOfOffice\&quot;]. (optional)
     * @param iCalUID Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param maxResults Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional. (optional)
     * @param orderBy The order of the events returned in the result. Optional. The default is an unspecified, stable order. (optional)
     * @param pageToken Token specifying which result page to return. Optional. (optional)
     * @param privateExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param q Free text search terms to find events that match these terms in the following fields:  - summary  - description  - location  - attendee&#39;s displayName  - attendee&#39;s email  - organizer&#39;s displayName  - organizer&#39;s email  - workingLocationProperties.officeLocation.buildingId  - workingLocationProperties.officeLocation.deskId  - workingLocationProperties.officeLocation.label  - workingLocationProperties.customLocation.label  These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for \&quot;Office\&quot; or \&quot;Bureau\&quot; returns working location events of type officeLocation, whereas searching for \&quot;Out of office\&quot; or \&quot;Abwesend\&quot; returns out-of-office events. Optional. (optional)
     * @param sharedExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param showDeleted Whether to include deleted events (with status equals \&quot;cancelled\&quot;) in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False. (optional)
     * @param showHiddenInvitations Whether to include hidden invitations in the result. Optional. The default is False. (optional)
     * @param singleEvents Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False. (optional)
     * @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False. There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.  These are:  - iCalUID  - orderBy  - privateExtendedProperty  - q  - sharedExtendedProperty  - timeMin  - timeMax  - updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken. Learn more about incremental synchronization. Optional. The default is to return all entries. (optional)
     * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin. (optional)
     * @param timeMin Lower bound (exclusive) for an event&#39;s end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @param updatedMin Lower bound for an event&#39;s last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsListCall(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, List<String> eventTypes, String iCalUID, Integer maxAttendees, Integer maxResults, String orderBy, String pageToken, List<String> privateExtendedProperty, String q, List<String> sharedExtendedProperty, Boolean showDeleted, Boolean showHiddenInvitations, Boolean singleEvents, String syncToken, String timeMax, String timeMin, String timeZone, String updatedMin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendars/{calendarId}/events"
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (alwaysIncludeEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alwaysIncludeEmail", alwaysIncludeEmail));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "eventTypes", eventTypes));
        }

        if (iCalUID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iCalUID", iCalUID));
        }

        if (maxAttendees != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAttendees", maxAttendees));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (privateExtendedProperty != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "privateExtendedProperty", privateExtendedProperty));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (sharedExtendedProperty != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sharedExtendedProperty", sharedExtendedProperty));
        }

        if (showDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showDeleted", showDeleted));
        }

        if (showHiddenInvitations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHiddenInvitations", showHiddenInvitations));
        }

        if (singleEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("singleEvents", singleEvents));
        }

        if (syncToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncToken", syncToken));
        }

        if (timeMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeMax", timeMax));
        }

        if (timeMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeMin", timeMin));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (updatedMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedMin", updatedMin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarEventsListValidateBeforeCall(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, List<String> eventTypes, String iCalUID, Integer maxAttendees, Integer maxResults, String orderBy, String pageToken, List<String> privateExtendedProperty, String q, List<String> sharedExtendedProperty, Boolean showDeleted, Boolean showHiddenInvitations, Boolean singleEvents, String syncToken, String timeMax, String timeMin, String timeZone, String updatedMin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling calendarEventsList(Async)");
        }

        return calendarEventsListCall(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, eventTypes, iCalUID, maxAttendees, maxResults, orderBy, pageToken, privateExtendedProperty, q, sharedExtendedProperty, showDeleted, showHiddenInvitations, singleEvents, syncToken, timeMax, timeMin, timeZone, updatedMin, _callback);

    }

    /**
     * 
     * Returns events on the specified calendar.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. (optional)
     * @param eventTypes Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is [\&quot;default\&quot;, \&quot;focusTime\&quot;, \&quot;outOfOffice\&quot;]. (optional)
     * @param iCalUID Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param maxResults Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional. (optional)
     * @param orderBy The order of the events returned in the result. Optional. The default is an unspecified, stable order. (optional)
     * @param pageToken Token specifying which result page to return. Optional. (optional)
     * @param privateExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param q Free text search terms to find events that match these terms in the following fields:  - summary  - description  - location  - attendee&#39;s displayName  - attendee&#39;s email  - organizer&#39;s displayName  - organizer&#39;s email  - workingLocationProperties.officeLocation.buildingId  - workingLocationProperties.officeLocation.deskId  - workingLocationProperties.officeLocation.label  - workingLocationProperties.customLocation.label  These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for \&quot;Office\&quot; or \&quot;Bureau\&quot; returns working location events of type officeLocation, whereas searching for \&quot;Out of office\&quot; or \&quot;Abwesend\&quot; returns out-of-office events. Optional. (optional)
     * @param sharedExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param showDeleted Whether to include deleted events (with status equals \&quot;cancelled\&quot;) in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False. (optional)
     * @param showHiddenInvitations Whether to include hidden invitations in the result. Optional. The default is False. (optional)
     * @param singleEvents Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False. (optional)
     * @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False. There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.  These are:  - iCalUID  - orderBy  - privateExtendedProperty  - q  - sharedExtendedProperty  - timeMin  - timeMax  - updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken. Learn more about incremental synchronization. Optional. The default is to return all entries. (optional)
     * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin. (optional)
     * @param timeMin Lower bound (exclusive) for an event&#39;s end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @param updatedMin Lower bound for an event&#39;s last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time. (optional)
     * @return Events
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Events calendarEventsList(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, List<String> eventTypes, String iCalUID, Integer maxAttendees, Integer maxResults, String orderBy, String pageToken, List<String> privateExtendedProperty, String q, List<String> sharedExtendedProperty, Boolean showDeleted, Boolean showHiddenInvitations, Boolean singleEvents, String syncToken, String timeMax, String timeMin, String timeZone, String updatedMin) throws ApiException {
        ApiResponse<Events> localVarResp = calendarEventsListWithHttpInfo(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, eventTypes, iCalUID, maxAttendees, maxResults, orderBy, pageToken, privateExtendedProperty, q, sharedExtendedProperty, showDeleted, showHiddenInvitations, singleEvents, syncToken, timeMax, timeMin, timeZone, updatedMin);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns events on the specified calendar.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. (optional)
     * @param eventTypes Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is [\&quot;default\&quot;, \&quot;focusTime\&quot;, \&quot;outOfOffice\&quot;]. (optional)
     * @param iCalUID Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param maxResults Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional. (optional)
     * @param orderBy The order of the events returned in the result. Optional. The default is an unspecified, stable order. (optional)
     * @param pageToken Token specifying which result page to return. Optional. (optional)
     * @param privateExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param q Free text search terms to find events that match these terms in the following fields:  - summary  - description  - location  - attendee&#39;s displayName  - attendee&#39;s email  - organizer&#39;s displayName  - organizer&#39;s email  - workingLocationProperties.officeLocation.buildingId  - workingLocationProperties.officeLocation.deskId  - workingLocationProperties.officeLocation.label  - workingLocationProperties.customLocation.label  These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for \&quot;Office\&quot; or \&quot;Bureau\&quot; returns working location events of type officeLocation, whereas searching for \&quot;Out of office\&quot; or \&quot;Abwesend\&quot; returns out-of-office events. Optional. (optional)
     * @param sharedExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param showDeleted Whether to include deleted events (with status equals \&quot;cancelled\&quot;) in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False. (optional)
     * @param showHiddenInvitations Whether to include hidden invitations in the result. Optional. The default is False. (optional)
     * @param singleEvents Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False. (optional)
     * @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False. There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.  These are:  - iCalUID  - orderBy  - privateExtendedProperty  - q  - sharedExtendedProperty  - timeMin  - timeMax  - updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken. Learn more about incremental synchronization. Optional. The default is to return all entries. (optional)
     * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin. (optional)
     * @param timeMin Lower bound (exclusive) for an event&#39;s end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @param updatedMin Lower bound for an event&#39;s last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time. (optional)
     * @return ApiResponse&lt;Events&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Events> calendarEventsListWithHttpInfo(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, List<String> eventTypes, String iCalUID, Integer maxAttendees, Integer maxResults, String orderBy, String pageToken, List<String> privateExtendedProperty, String q, List<String> sharedExtendedProperty, Boolean showDeleted, Boolean showHiddenInvitations, Boolean singleEvents, String syncToken, String timeMax, String timeMin, String timeZone, String updatedMin) throws ApiException {
        okhttp3.Call localVarCall = calendarEventsListValidateBeforeCall(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, eventTypes, iCalUID, maxAttendees, maxResults, orderBy, pageToken, privateExtendedProperty, q, sharedExtendedProperty, showDeleted, showHiddenInvitations, singleEvents, syncToken, timeMax, timeMin, timeZone, updatedMin, null);
        Type localVarReturnType = new TypeToken<Events>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns events on the specified calendar.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. (optional)
     * @param eventTypes Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is [\&quot;default\&quot;, \&quot;focusTime\&quot;, \&quot;outOfOffice\&quot;]. (optional)
     * @param iCalUID Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param maxResults Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional. (optional)
     * @param orderBy The order of the events returned in the result. Optional. The default is an unspecified, stable order. (optional)
     * @param pageToken Token specifying which result page to return. Optional. (optional)
     * @param privateExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param q Free text search terms to find events that match these terms in the following fields:  - summary  - description  - location  - attendee&#39;s displayName  - attendee&#39;s email  - organizer&#39;s displayName  - organizer&#39;s email  - workingLocationProperties.officeLocation.buildingId  - workingLocationProperties.officeLocation.deskId  - workingLocationProperties.officeLocation.label  - workingLocationProperties.customLocation.label  These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for \&quot;Office\&quot; or \&quot;Bureau\&quot; returns working location events of type officeLocation, whereas searching for \&quot;Out of office\&quot; or \&quot;Abwesend\&quot; returns out-of-office events. Optional. (optional)
     * @param sharedExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param showDeleted Whether to include deleted events (with status equals \&quot;cancelled\&quot;) in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False. (optional)
     * @param showHiddenInvitations Whether to include hidden invitations in the result. Optional. The default is False. (optional)
     * @param singleEvents Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False. (optional)
     * @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False. There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.  These are:  - iCalUID  - orderBy  - privateExtendedProperty  - q  - sharedExtendedProperty  - timeMin  - timeMax  - updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken. Learn more about incremental synchronization. Optional. The default is to return all entries. (optional)
     * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin. (optional)
     * @param timeMin Lower bound (exclusive) for an event&#39;s end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @param updatedMin Lower bound for an event&#39;s last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsListAsync(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, List<String> eventTypes, String iCalUID, Integer maxAttendees, Integer maxResults, String orderBy, String pageToken, List<String> privateExtendedProperty, String q, List<String> sharedExtendedProperty, Boolean showDeleted, Boolean showHiddenInvitations, Boolean singleEvents, String syncToken, String timeMax, String timeMin, String timeZone, String updatedMin, final ApiCallback<Events> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarEventsListValidateBeforeCall(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, eventTypes, iCalUID, maxAttendees, maxResults, orderBy, pageToken, privateExtendedProperty, q, sharedExtendedProperty, showDeleted, showHiddenInvitations, singleEvents, syncToken, timeMax, timeMin, timeZone, updatedMin, _callback);
        Type localVarReturnType = new TypeToken<Events>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarEventsMove
     * @param calendarId Calendar identifier of the source calendar where the event currently is on. (required)
     * @param eventId Event identifier. (required)
     * @param destination Calendar identifier of the target calendar where the event is to be moved to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the change of the event&#39;s organizer. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the change of the event&#39;s organizer. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsMoveCall(String calendarId, String eventId, String destination, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendars/{calendarId}/events/{eventId}/move"
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()))
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (sendNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendNotifications", sendNotifications));
        }

        if (sendUpdates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendUpdates", sendUpdates));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarEventsMoveValidateBeforeCall(String calendarId, String eventId, String destination, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling calendarEventsMove(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling calendarEventsMove(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling calendarEventsMove(Async)");
        }

        return calendarEventsMoveCall(calendarId, eventId, destination, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates, _callback);

    }

    /**
     * 
     * Moves an event to another calendar, i.e. changes an event&#39;s organizer. Note that only default events can be moved; outOfOffice, focusTime and workingLocation events cannot be moved.
     * @param calendarId Calendar identifier of the source calendar where the event currently is on. (required)
     * @param eventId Event identifier. (required)
     * @param destination Calendar identifier of the target calendar where the event is to be moved to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the change of the event&#39;s organizer. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the change of the event&#39;s organizer. (optional)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Event calendarEventsMove(String calendarId, String eventId, String destination, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates) throws ApiException {
        ApiResponse<Event> localVarResp = calendarEventsMoveWithHttpInfo(calendarId, eventId, destination, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates);
        return localVarResp.getData();
    }

    /**
     * 
     * Moves an event to another calendar, i.e. changes an event&#39;s organizer. Note that only default events can be moved; outOfOffice, focusTime and workingLocation events cannot be moved.
     * @param calendarId Calendar identifier of the source calendar where the event currently is on. (required)
     * @param eventId Event identifier. (required)
     * @param destination Calendar identifier of the target calendar where the event is to be moved to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the change of the event&#39;s organizer. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the change of the event&#39;s organizer. (optional)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> calendarEventsMoveWithHttpInfo(String calendarId, String eventId, String destination, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates) throws ApiException {
        okhttp3.Call localVarCall = calendarEventsMoveValidateBeforeCall(calendarId, eventId, destination, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Moves an event to another calendar, i.e. changes an event&#39;s organizer. Note that only default events can be moved; outOfOffice, focusTime and workingLocation events cannot be moved.
     * @param calendarId Calendar identifier of the source calendar where the event currently is on. (required)
     * @param eventId Event identifier. (required)
     * @param destination Calendar identifier of the target calendar where the event is to be moved to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the change of the event&#39;s organizer. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the change of the event&#39;s organizer. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsMoveAsync(String calendarId, String eventId, String destination, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarEventsMoveValidateBeforeCall(calendarId, eventId, destination, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarEventsPatch
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the event update (for example, title changes, etc.). (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsPatchCall(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = event;

        // create path and map variables
        String localVarPath = "/calendars/{calendarId}/events/{eventId}"
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()))
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (alwaysIncludeEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alwaysIncludeEmail", alwaysIncludeEmail));
        }

        if (conferenceDataVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conferenceDataVersion", conferenceDataVersion));
        }

        if (maxAttendees != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAttendees", maxAttendees));
        }

        if (sendNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendNotifications", sendNotifications));
        }

        if (sendUpdates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendUpdates", sendUpdates));
        }

        if (supportsAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAttachments", supportsAttachments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarEventsPatchValidateBeforeCall(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling calendarEventsPatch(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling calendarEventsPatch(Async)");
        }

        return calendarEventsPatchCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event, _callback);

    }

    /**
     * 
     * Updates an event. This method supports patch semantics.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the event update (for example, title changes, etc.). (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Event calendarEventsPatch(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event) throws ApiException {
        ApiResponse<Event> localVarResp = calendarEventsPatchWithHttpInfo(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an event. This method supports patch semantics.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the event update (for example, title changes, etc.). (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> calendarEventsPatchWithHttpInfo(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event) throws ApiException {
        okhttp3.Call localVarCall = calendarEventsPatchValidateBeforeCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an event. This method supports patch semantics.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the event update (for example, title changes, etc.). (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsPatchAsync(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarEventsPatchValidateBeforeCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarEventsQuickAdd
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param text The text describing the event to be created. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the creation of the event. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the creation of the new event. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsQuickAddCall(String calendarId, String text, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendars/{calendarId}/events/quickAdd"
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (sendNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendNotifications", sendNotifications));
        }

        if (sendUpdates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendUpdates", sendUpdates));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarEventsQuickAddValidateBeforeCall(String calendarId, String text, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling calendarEventsQuickAdd(Async)");
        }

        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling calendarEventsQuickAdd(Async)");
        }

        return calendarEventsQuickAddCall(calendarId, text, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates, _callback);

    }

    /**
     * 
     * Creates an event based on a simple text string.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param text The text describing the event to be created. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the creation of the event. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the creation of the new event. (optional)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Event calendarEventsQuickAdd(String calendarId, String text, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates) throws ApiException {
        ApiResponse<Event> localVarResp = calendarEventsQuickAddWithHttpInfo(calendarId, text, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an event based on a simple text string.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param text The text describing the event to be created. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the creation of the event. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the creation of the new event. (optional)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> calendarEventsQuickAddWithHttpInfo(String calendarId, String text, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates) throws ApiException {
        okhttp3.Call localVarCall = calendarEventsQuickAddValidateBeforeCall(calendarId, text, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an event based on a simple text string.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param text The text describing the event to be created. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the creation of the event. Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the creation of the new event. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsQuickAddAsync(String calendarId, String text, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean sendNotifications, String sendUpdates, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarEventsQuickAddValidateBeforeCall(calendarId, text, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarEventsUpdate
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the event update (for example, title changes, etc.). (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsUpdateCall(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = event;

        // create path and map variables
        String localVarPath = "/calendars/{calendarId}/events/{eventId}"
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()))
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (alwaysIncludeEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alwaysIncludeEmail", alwaysIncludeEmail));
        }

        if (conferenceDataVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conferenceDataVersion", conferenceDataVersion));
        }

        if (maxAttendees != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAttendees", maxAttendees));
        }

        if (sendNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendNotifications", sendNotifications));
        }

        if (sendUpdates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendUpdates", sendUpdates));
        }

        if (supportsAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supportsAttachments", supportsAttachments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarEventsUpdateValidateBeforeCall(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling calendarEventsUpdate(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling calendarEventsUpdate(Async)");
        }

        return calendarEventsUpdateCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event, _callback);

    }

    /**
     * 
     * Updates an event.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the event update (for example, title changes, etc.). (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Event calendarEventsUpdate(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event) throws ApiException {
        ApiResponse<Event> localVarResp = calendarEventsUpdateWithHttpInfo(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an event.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the event update (for example, title changes, etc.). (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> calendarEventsUpdateWithHttpInfo(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event) throws ApiException {
        okhttp3.Call localVarCall = calendarEventsUpdateValidateBeforeCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an event.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param eventId Event identifier. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided). (optional)
     * @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event&#39;s body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param sendNotifications Deprecated. Please use sendUpdates instead.  Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false. (optional)
     * @param sendUpdates Guests who should receive notifications about the event update (for example, title changes, etc.). (optional)
     * @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False. (optional)
     * @param event  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsUpdateAsync(String calendarId, String eventId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, Integer conferenceDataVersion, Integer maxAttendees, Boolean sendNotifications, String sendUpdates, Boolean supportsAttachments, Event event, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarEventsUpdateValidateBeforeCall(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarEventsWatch
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. (optional)
     * @param eventTypes Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is [\&quot;default\&quot;, \&quot;focusTime\&quot;, \&quot;outOfOffice\&quot;]. (optional)
     * @param iCalUID Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param maxResults Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional. (optional)
     * @param orderBy The order of the events returned in the result. Optional. The default is an unspecified, stable order. (optional)
     * @param pageToken Token specifying which result page to return. Optional. (optional)
     * @param privateExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param q Free text search terms to find events that match these terms in the following fields:  - summary  - description  - location  - attendee&#39;s displayName  - attendee&#39;s email  - organizer&#39;s displayName  - organizer&#39;s email  - workingLocationProperties.officeLocation.buildingId  - workingLocationProperties.officeLocation.deskId  - workingLocationProperties.officeLocation.label  - workingLocationProperties.customLocation.label  These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for \&quot;Office\&quot; or \&quot;Bureau\&quot; returns working location events of type officeLocation, whereas searching for \&quot;Out of office\&quot; or \&quot;Abwesend\&quot; returns out-of-office events. Optional. (optional)
     * @param sharedExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param showDeleted Whether to include deleted events (with status equals \&quot;cancelled\&quot;) in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False. (optional)
     * @param showHiddenInvitations Whether to include hidden invitations in the result. Optional. The default is False. (optional)
     * @param singleEvents Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False. (optional)
     * @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False. There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.  These are:  - iCalUID  - orderBy  - privateExtendedProperty  - q  - sharedExtendedProperty  - timeMin  - timeMax  - updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken. Learn more about incremental synchronization. Optional. The default is to return all entries. (optional)
     * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin. (optional)
     * @param timeMin Lower bound (exclusive) for an event&#39;s end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @param updatedMin Lower bound for an event&#39;s last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time. (optional)
     * @param channel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsWatchCall(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, List<String> eventTypes, String iCalUID, Integer maxAttendees, Integer maxResults, String orderBy, String pageToken, List<String> privateExtendedProperty, String q, List<String> sharedExtendedProperty, Boolean showDeleted, Boolean showHiddenInvitations, Boolean singleEvents, String syncToken, String timeMax, String timeMin, String timeZone, String updatedMin, Channel channel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = channel;

        // create path and map variables
        String localVarPath = "/calendars/{calendarId}/events/watch"
            .replace("{" + "calendarId" + "}", localVarApiClient.escapeString(calendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (alwaysIncludeEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alwaysIncludeEmail", alwaysIncludeEmail));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "eventTypes", eventTypes));
        }

        if (iCalUID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iCalUID", iCalUID));
        }

        if (maxAttendees != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAttendees", maxAttendees));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (privateExtendedProperty != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "privateExtendedProperty", privateExtendedProperty));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (sharedExtendedProperty != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sharedExtendedProperty", sharedExtendedProperty));
        }

        if (showDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showDeleted", showDeleted));
        }

        if (showHiddenInvitations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHiddenInvitations", showHiddenInvitations));
        }

        if (singleEvents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("singleEvents", singleEvents));
        }

        if (syncToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncToken", syncToken));
        }

        if (timeMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeMax", timeMax));
        }

        if (timeMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeMin", timeMin));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (updatedMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedMin", updatedMin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarEventsWatchValidateBeforeCall(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, List<String> eventTypes, String iCalUID, Integer maxAttendees, Integer maxResults, String orderBy, String pageToken, List<String> privateExtendedProperty, String q, List<String> sharedExtendedProperty, Boolean showDeleted, Boolean showHiddenInvitations, Boolean singleEvents, String syncToken, String timeMax, String timeMin, String timeZone, String updatedMin, Channel channel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calendarId' is set
        if (calendarId == null) {
            throw new ApiException("Missing the required parameter 'calendarId' when calling calendarEventsWatch(Async)");
        }

        return calendarEventsWatchCall(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, eventTypes, iCalUID, maxAttendees, maxResults, orderBy, pageToken, privateExtendedProperty, q, sharedExtendedProperty, showDeleted, showHiddenInvitations, singleEvents, syncToken, timeMax, timeMin, timeZone, updatedMin, channel, _callback);

    }

    /**
     * 
     * Watch for changes to Events resources.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. (optional)
     * @param eventTypes Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is [\&quot;default\&quot;, \&quot;focusTime\&quot;, \&quot;outOfOffice\&quot;]. (optional)
     * @param iCalUID Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param maxResults Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional. (optional)
     * @param orderBy The order of the events returned in the result. Optional. The default is an unspecified, stable order. (optional)
     * @param pageToken Token specifying which result page to return. Optional. (optional)
     * @param privateExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param q Free text search terms to find events that match these terms in the following fields:  - summary  - description  - location  - attendee&#39;s displayName  - attendee&#39;s email  - organizer&#39;s displayName  - organizer&#39;s email  - workingLocationProperties.officeLocation.buildingId  - workingLocationProperties.officeLocation.deskId  - workingLocationProperties.officeLocation.label  - workingLocationProperties.customLocation.label  These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for \&quot;Office\&quot; or \&quot;Bureau\&quot; returns working location events of type officeLocation, whereas searching for \&quot;Out of office\&quot; or \&quot;Abwesend\&quot; returns out-of-office events. Optional. (optional)
     * @param sharedExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param showDeleted Whether to include deleted events (with status equals \&quot;cancelled\&quot;) in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False. (optional)
     * @param showHiddenInvitations Whether to include hidden invitations in the result. Optional. The default is False. (optional)
     * @param singleEvents Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False. (optional)
     * @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False. There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.  These are:  - iCalUID  - orderBy  - privateExtendedProperty  - q  - sharedExtendedProperty  - timeMin  - timeMax  - updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken. Learn more about incremental synchronization. Optional. The default is to return all entries. (optional)
     * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin. (optional)
     * @param timeMin Lower bound (exclusive) for an event&#39;s end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @param updatedMin Lower bound for an event&#39;s last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time. (optional)
     * @param channel  (optional)
     * @return Channel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Channel calendarEventsWatch(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, List<String> eventTypes, String iCalUID, Integer maxAttendees, Integer maxResults, String orderBy, String pageToken, List<String> privateExtendedProperty, String q, List<String> sharedExtendedProperty, Boolean showDeleted, Boolean showHiddenInvitations, Boolean singleEvents, String syncToken, String timeMax, String timeMin, String timeZone, String updatedMin, Channel channel) throws ApiException {
        ApiResponse<Channel> localVarResp = calendarEventsWatchWithHttpInfo(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, eventTypes, iCalUID, maxAttendees, maxResults, orderBy, pageToken, privateExtendedProperty, q, sharedExtendedProperty, showDeleted, showHiddenInvitations, singleEvents, syncToken, timeMax, timeMin, timeZone, updatedMin, channel);
        return localVarResp.getData();
    }

    /**
     * 
     * Watch for changes to Events resources.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. (optional)
     * @param eventTypes Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is [\&quot;default\&quot;, \&quot;focusTime\&quot;, \&quot;outOfOffice\&quot;]. (optional)
     * @param iCalUID Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param maxResults Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional. (optional)
     * @param orderBy The order of the events returned in the result. Optional. The default is an unspecified, stable order. (optional)
     * @param pageToken Token specifying which result page to return. Optional. (optional)
     * @param privateExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param q Free text search terms to find events that match these terms in the following fields:  - summary  - description  - location  - attendee&#39;s displayName  - attendee&#39;s email  - organizer&#39;s displayName  - organizer&#39;s email  - workingLocationProperties.officeLocation.buildingId  - workingLocationProperties.officeLocation.deskId  - workingLocationProperties.officeLocation.label  - workingLocationProperties.customLocation.label  These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for \&quot;Office\&quot; or \&quot;Bureau\&quot; returns working location events of type officeLocation, whereas searching for \&quot;Out of office\&quot; or \&quot;Abwesend\&quot; returns out-of-office events. Optional. (optional)
     * @param sharedExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param showDeleted Whether to include deleted events (with status equals \&quot;cancelled\&quot;) in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False. (optional)
     * @param showHiddenInvitations Whether to include hidden invitations in the result. Optional. The default is False. (optional)
     * @param singleEvents Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False. (optional)
     * @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False. There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.  These are:  - iCalUID  - orderBy  - privateExtendedProperty  - q  - sharedExtendedProperty  - timeMin  - timeMax  - updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken. Learn more about incremental synchronization. Optional. The default is to return all entries. (optional)
     * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin. (optional)
     * @param timeMin Lower bound (exclusive) for an event&#39;s end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @param updatedMin Lower bound for an event&#39;s last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time. (optional)
     * @param channel  (optional)
     * @return ApiResponse&lt;Channel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Channel> calendarEventsWatchWithHttpInfo(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, List<String> eventTypes, String iCalUID, Integer maxAttendees, Integer maxResults, String orderBy, String pageToken, List<String> privateExtendedProperty, String q, List<String> sharedExtendedProperty, Boolean showDeleted, Boolean showHiddenInvitations, Boolean singleEvents, String syncToken, String timeMax, String timeMin, String timeZone, String updatedMin, Channel channel) throws ApiException {
        okhttp3.Call localVarCall = calendarEventsWatchValidateBeforeCall(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, eventTypes, iCalUID, maxAttendees, maxResults, orderBy, pageToken, privateExtendedProperty, q, sharedExtendedProperty, showDeleted, showHiddenInvitations, singleEvents, syncToken, timeMax, timeMin, timeZone, updatedMin, channel, null);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Watch for changes to Events resources.
     * @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \&quot;primary\&quot; keyword. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param alwaysIncludeEmail Deprecated and ignored. (optional)
     * @param eventTypes Event types to return. Optional. This parameter can be repeated multiple times to return events of different types. The default is [\&quot;default\&quot;, \&quot;focusTime\&quot;, \&quot;outOfOffice\&quot;]. (optional)
     * @param iCalUID Specifies an event ID in the iCalendar format to be provided in the response. Optional. Use this if you want to search for an event by its iCalendar ID. (optional)
     * @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional. (optional)
     * @param maxResults Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional. (optional)
     * @param orderBy The order of the events returned in the result. Optional. The default is an unspecified, stable order. (optional)
     * @param pageToken Token specifying which result page to return. Optional. (optional)
     * @param privateExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param q Free text search terms to find events that match these terms in the following fields:  - summary  - description  - location  - attendee&#39;s displayName  - attendee&#39;s email  - organizer&#39;s displayName  - organizer&#39;s email  - workingLocationProperties.officeLocation.buildingId  - workingLocationProperties.officeLocation.deskId  - workingLocationProperties.officeLocation.label  - workingLocationProperties.customLocation.label  These search terms also match predefined keywords against all display title translations of working location, out-of-office, and focus-time events. For example, searching for \&quot;Office\&quot; or \&quot;Bureau\&quot; returns working location events of type officeLocation, whereas searching for \&quot;Out of office\&quot; or \&quot;Abwesend\&quot; returns out-of-office events. Optional. (optional)
     * @param sharedExtendedProperty Extended properties constraint specified as propertyName&#x3D;value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints. (optional)
     * @param showDeleted Whether to include deleted events (with status equals \&quot;cancelled\&quot;) in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False. (optional)
     * @param showHiddenInvitations Whether to include hidden invitations in the result. Optional. The default is False. (optional)
     * @param singleEvents Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False. (optional)
     * @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False. There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.  These are:  - iCalUID  - orderBy  - privateExtendedProperty  - q  - sharedExtendedProperty  - timeMin  - timeMax  - updatedMin All other query parameters should be the same as for the initial synchronization to avoid undefined behavior. If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken. Learn more about incremental synchronization. Optional. The default is to return all entries. (optional)
     * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin. (optional)
     * @param timeMin Lower bound (exclusive) for an event&#39;s end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax. (optional)
     * @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar. (optional)
     * @param updatedMin Lower bound for an event&#39;s last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time. (optional)
     * @param channel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarEventsWatchAsync(String calendarId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean alwaysIncludeEmail, List<String> eventTypes, String iCalUID, Integer maxAttendees, Integer maxResults, String orderBy, String pageToken, List<String> privateExtendedProperty, String q, List<String> sharedExtendedProperty, Boolean showDeleted, Boolean showHiddenInvitations, Boolean singleEvents, String syncToken, String timeMax, String timeMin, String timeZone, String updatedMin, Channel channel, final ApiCallback<Channel> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarEventsWatchValidateBeforeCall(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, eventTypes, iCalUID, maxAttendees, maxResults, orderBy, pageToken, privateExtendedProperty, q, sharedExtendedProperty, showDeleted, showHiddenInvitations, singleEvents, syncToken, timeMax, timeMin, timeZone, updatedMin, channel, _callback);
        Type localVarReturnType = new TypeToken<Channel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
