/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ColorDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Colors
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:09.684550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Colors {
  public static final String SERIALIZED_NAME_CALENDAR = "calendar";
  @SerializedName(SERIALIZED_NAME_CALENDAR)
  private Map<String, ColorDefinition> calendar = new HashMap<>();

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private Map<String, ColorDefinition> event = new HashMap<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "calendar#colors";

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public Colors() {
  }

  public Colors calendar(Map<String, ColorDefinition> calendar) {
    this.calendar = calendar;
    return this;
  }

  public Colors putCalendarItem(String key, ColorDefinition calendarItem) {
    if (this.calendar == null) {
      this.calendar = new HashMap<>();
    }
    this.calendar.put(key, calendarItem);
    return this;
  }

  /**
   * A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its colorId field. Read-only.
   * @return calendar
   */
  @javax.annotation.Nullable
  public Map<String, ColorDefinition> getCalendar() {
    return calendar;
  }

  public void setCalendar(Map<String, ColorDefinition> calendar) {
    this.calendar = calendar;
  }


  public Colors event(Map<String, ColorDefinition> event) {
    this.event = event;
    return this;
  }

  public Colors putEventItem(String key, ColorDefinition eventItem) {
    if (this.event == null) {
      this.event = new HashMap<>();
    }
    this.event.put(key, eventItem);
    return this;
  }

  /**
   * A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its colorId field. Read-only.
   * @return event
   */
  @javax.annotation.Nullable
  public Map<String, ColorDefinition> getEvent() {
    return event;
  }

  public void setEvent(Map<String, ColorDefinition> event) {
    this.event = event;
  }


  public Colors kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Type of the resource (\&quot;calendar#colors\&quot;).
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Colors updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Last modification time of the color palette (as a RFC3339 timestamp). Read-only.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Colors colors = (Colors) o;
    return Objects.equals(this.calendar, colors.calendar) &&
        Objects.equals(this.event, colors.event) &&
        Objects.equals(this.kind, colors.kind) &&
        Objects.equals(this.updated, colors.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calendar, event, kind, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Colors {\n");
    sb.append("    calendar: ").append(toIndentedString(calendar)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calendar");
    openapiFields.add("event");
    openapiFields.add("kind");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Colors
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Colors.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Colors is not found in the empty JSON string", Colors.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Colors.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Colors` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Colors.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Colors' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Colors> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Colors.class));

       return (TypeAdapter<T>) new TypeAdapter<Colors>() {
           @Override
           public void write(JsonWriter out, Colors value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Colors read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Colors given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Colors
   * @throws IOException if the JSON string is invalid with respect to Colors
   */
  public static Colors fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Colors.class);
  }

  /**
   * Convert an instance of Colors to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

