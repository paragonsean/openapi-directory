/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventReminder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the event&#39;s reminders for the authenticated user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:09.684550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventReminders {
  public static final String SERIALIZED_NAME_OVERRIDES = "overrides";
  @SerializedName(SERIALIZED_NAME_OVERRIDES)
  private List<EventReminder> overrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_USE_DEFAULT = "useDefault";
  @SerializedName(SERIALIZED_NAME_USE_DEFAULT)
  private Boolean useDefault;

  public EventReminders() {
  }

  public EventReminders overrides(List<EventReminder> overrides) {
    this.overrides = overrides;
    return this;
  }

  public EventReminders addOverridesItem(EventReminder overridesItem) {
    if (this.overrides == null) {
      this.overrides = new ArrayList<>();
    }
    this.overrides.add(overridesItem);
    return this;
  }

  /**
   * If the event doesn&#39;t use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.
   * @return overrides
   */
  @javax.annotation.Nullable
  public List<EventReminder> getOverrides() {
    return overrides;
  }

  public void setOverrides(List<EventReminder> overrides) {
    this.overrides = overrides;
  }


  public EventReminders useDefault(Boolean useDefault) {
    this.useDefault = useDefault;
    return this;
  }

  /**
   * Whether the default reminders of the calendar apply to the event.
   * @return useDefault
   */
  @javax.annotation.Nullable
  public Boolean getUseDefault() {
    return useDefault;
  }

  public void setUseDefault(Boolean useDefault) {
    this.useDefault = useDefault;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventReminders eventReminders = (EventReminders) o;
    return Objects.equals(this.overrides, eventReminders.overrides) &&
        Objects.equals(this.useDefault, eventReminders.useDefault);
  }

  @Override
  public int hashCode() {
    return Objects.hash(overrides, useDefault);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventReminders {\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    useDefault: ").append(toIndentedString(useDefault)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("overrides");
    openapiFields.add("useDefault");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventReminders
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventReminders.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventReminders is not found in the empty JSON string", EventReminders.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventReminders.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventReminders` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("overrides") != null && !jsonObj.get("overrides").isJsonNull()) {
        JsonArray jsonArrayoverrides = jsonObj.getAsJsonArray("overrides");
        if (jsonArrayoverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("overrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `overrides` to be an array in the JSON string but got `%s`", jsonObj.get("overrides").toString()));
          }

          // validate the optional field `overrides` (array)
          for (int i = 0; i < jsonArrayoverrides.size(); i++) {
            EventReminder.validateJsonElement(jsonArrayoverrides.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventReminders.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventReminders' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventReminders> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventReminders.class));

       return (TypeAdapter<T>) new TypeAdapter<EventReminders>() {
           @Override
           public void write(JsonWriter out, EventReminders value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventReminders read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventReminders given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventReminders
   * @throws IOException if the JSON string is invalid with respect to EventReminders
   */
  public static EventReminders fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventReminders.class);
  }

  /**
   * Convert an instance of EventReminders to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

