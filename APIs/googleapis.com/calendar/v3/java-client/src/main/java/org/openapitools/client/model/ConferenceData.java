/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConferenceParameters;
import org.openapitools.client.model.ConferenceSolution;
import org.openapitools.client.model.CreateConferenceRequest;
import org.openapitools.client.model.EntryPoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConferenceData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:09.684550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConferenceData {
  public static final String SERIALIZED_NAME_CONFERENCE_ID = "conferenceId";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_ID)
  private String conferenceId;

  public static final String SERIALIZED_NAME_CONFERENCE_SOLUTION = "conferenceSolution";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_SOLUTION)
  private ConferenceSolution conferenceSolution;

  public static final String SERIALIZED_NAME_CREATE_REQUEST = "createRequest";
  @SerializedName(SERIALIZED_NAME_CREATE_REQUEST)
  private CreateConferenceRequest createRequest;

  public static final String SERIALIZED_NAME_ENTRY_POINTS = "entryPoints";
  @SerializedName(SERIALIZED_NAME_ENTRY_POINTS)
  private List<EntryPoint> entryPoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private ConferenceParameters parameters;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public ConferenceData() {
  }

  public ConferenceData conferenceId(String conferenceId) {
    this.conferenceId = conferenceId;
    return this;
  }

  /**
   * The ID of the conference. Can be used by developers to keep track of conferences, should not be displayed to users. The ID value is formed differently for each conference solution type:   - eventHangout: ID is not set. (This conference type is deprecated.) - eventNamedHangout: ID is the name of the Hangout. (This conference type is deprecated.) - hangoutsMeet: ID is the 10-letter meeting code, for example aaa-bbbb-ccc. - addOn: ID is defined by the third-party provider.  Optional.
   * @return conferenceId
   */
  @javax.annotation.Nullable
  public String getConferenceId() {
    return conferenceId;
  }

  public void setConferenceId(String conferenceId) {
    this.conferenceId = conferenceId;
  }


  public ConferenceData conferenceSolution(ConferenceSolution conferenceSolution) {
    this.conferenceSolution = conferenceSolution;
    return this;
  }

  /**
   * Get conferenceSolution
   * @return conferenceSolution
   */
  @javax.annotation.Nullable
  public ConferenceSolution getConferenceSolution() {
    return conferenceSolution;
  }

  public void setConferenceSolution(ConferenceSolution conferenceSolution) {
    this.conferenceSolution = conferenceSolution;
  }


  public ConferenceData createRequest(CreateConferenceRequest createRequest) {
    this.createRequest = createRequest;
    return this;
  }

  /**
   * Get createRequest
   * @return createRequest
   */
  @javax.annotation.Nullable
  public CreateConferenceRequest getCreateRequest() {
    return createRequest;
  }

  public void setCreateRequest(CreateConferenceRequest createRequest) {
    this.createRequest = createRequest;
  }


  public ConferenceData entryPoints(List<EntryPoint> entryPoints) {
    this.entryPoints = entryPoints;
    return this;
  }

  public ConferenceData addEntryPointsItem(EntryPoint entryPointsItem) {
    if (this.entryPoints == null) {
      this.entryPoints = new ArrayList<>();
    }
    this.entryPoints.add(entryPointsItem);
    return this;
  }

  /**
   * Information about individual conference entry points, such as URLs or phone numbers. All of them must belong to the same conference. Either conferenceSolution and at least one entryPoint, or createRequest is required.
   * @return entryPoints
   */
  @javax.annotation.Nullable
  public List<EntryPoint> getEntryPoints() {
    return entryPoints;
  }

  public void setEntryPoints(List<EntryPoint> entryPoints) {
    this.entryPoints = entryPoints;
  }


  public ConferenceData notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Additional notes (such as instructions from the domain administrator, legal notices) to display to the user. Can contain HTML. The maximum length is 2048 characters. Optional.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public ConferenceData parameters(ConferenceParameters parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public ConferenceParameters getParameters() {
    return parameters;
  }

  public void setParameters(ConferenceParameters parameters) {
    this.parameters = parameters;
  }


  public ConferenceData signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * The signature of the conference data. Generated on server side. Unset for a conference with a failed create request. Optional for a conference with a pending create request.
   * @return signature
   */
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConferenceData conferenceData = (ConferenceData) o;
    return Objects.equals(this.conferenceId, conferenceData.conferenceId) &&
        Objects.equals(this.conferenceSolution, conferenceData.conferenceSolution) &&
        Objects.equals(this.createRequest, conferenceData.createRequest) &&
        Objects.equals(this.entryPoints, conferenceData.entryPoints) &&
        Objects.equals(this.notes, conferenceData.notes) &&
        Objects.equals(this.parameters, conferenceData.parameters) &&
        Objects.equals(this.signature, conferenceData.signature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conferenceId, conferenceSolution, createRequest, entryPoints, notes, parameters, signature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConferenceData {\n");
    sb.append("    conferenceId: ").append(toIndentedString(conferenceId)).append("\n");
    sb.append("    conferenceSolution: ").append(toIndentedString(conferenceSolution)).append("\n");
    sb.append("    createRequest: ").append(toIndentedString(createRequest)).append("\n");
    sb.append("    entryPoints: ").append(toIndentedString(entryPoints)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conferenceId");
    openapiFields.add("conferenceSolution");
    openapiFields.add("createRequest");
    openapiFields.add("entryPoints");
    openapiFields.add("notes");
    openapiFields.add("parameters");
    openapiFields.add("signature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConferenceData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConferenceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConferenceData is not found in the empty JSON string", ConferenceData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConferenceData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConferenceData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conferenceId") != null && !jsonObj.get("conferenceId").isJsonNull()) && !jsonObj.get("conferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conferenceId").toString()));
      }
      // validate the optional field `conferenceSolution`
      if (jsonObj.get("conferenceSolution") != null && !jsonObj.get("conferenceSolution").isJsonNull()) {
        ConferenceSolution.validateJsonElement(jsonObj.get("conferenceSolution"));
      }
      // validate the optional field `createRequest`
      if (jsonObj.get("createRequest") != null && !jsonObj.get("createRequest").isJsonNull()) {
        CreateConferenceRequest.validateJsonElement(jsonObj.get("createRequest"));
      }
      if (jsonObj.get("entryPoints") != null && !jsonObj.get("entryPoints").isJsonNull()) {
        JsonArray jsonArrayentryPoints = jsonObj.getAsJsonArray("entryPoints");
        if (jsonArrayentryPoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entryPoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entryPoints` to be an array in the JSON string but got `%s`", jsonObj.get("entryPoints").toString()));
          }

          // validate the optional field `entryPoints` (array)
          for (int i = 0; i < jsonArrayentryPoints.size(); i++) {
            EntryPoint.validateJsonElement(jsonArrayentryPoints.get(i));
          };
        }
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // validate the optional field `parameters`
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        ConferenceParameters.validateJsonElement(jsonObj.get("parameters"));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConferenceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConferenceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConferenceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConferenceData.class));

       return (TypeAdapter<T>) new TypeAdapter<ConferenceData>() {
           @Override
           public void write(JsonWriter out, ConferenceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConferenceData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConferenceData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConferenceData
   * @throws IOException if the JSON string is invalid with respect to ConferenceData
   */
  public static ConferenceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConferenceData.class);
  }

  /**
   * Convert an instance of ConferenceData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

