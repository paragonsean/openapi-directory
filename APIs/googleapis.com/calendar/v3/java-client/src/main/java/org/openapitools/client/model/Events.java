/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.EventReminder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Events
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:09.684550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Events {
  public static final String SERIALIZED_NAME_ACCESS_ROLE = "accessRole";
  @SerializedName(SERIALIZED_NAME_ACCESS_ROLE)
  private String accessRole;

  public static final String SERIALIZED_NAME_DEFAULT_REMINDERS = "defaultReminders";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REMINDERS)
  private List<EventReminder> defaultReminders = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Event> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "calendar#events";

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_NEXT_SYNC_TOKEN = "nextSyncToken";
  @SerializedName(SERIALIZED_NAME_NEXT_SYNC_TOKEN)
  private String nextSyncToken;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public Events() {
  }

  public Events accessRole(String accessRole) {
    this.accessRole = accessRole;
    return this;
  }

  /**
   * The user&#39;s access role for this calendar. Read-only. Possible values are:   - \&quot;none\&quot; - The user has no access.  - \&quot;freeBusyReader\&quot; - The user has read access to free/busy information.  - \&quot;reader\&quot; - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \&quot;writer\&quot; - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \&quot;owner\&quot; - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.
   * @return accessRole
   */
  @javax.annotation.Nullable
  public String getAccessRole() {
    return accessRole;
  }

  public void setAccessRole(String accessRole) {
    this.accessRole = accessRole;
  }


  public Events defaultReminders(List<EventReminder> defaultReminders) {
    this.defaultReminders = defaultReminders;
    return this;
  }

  public Events addDefaultRemindersItem(EventReminder defaultRemindersItem) {
    if (this.defaultReminders == null) {
      this.defaultReminders = new ArrayList<>();
    }
    this.defaultReminders.add(defaultRemindersItem);
    return this;
  }

  /**
   * The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True).
   * @return defaultReminders
   */
  @javax.annotation.Nullable
  public List<EventReminder> getDefaultReminders() {
    return defaultReminders;
  }

  public void setDefaultReminders(List<EventReminder> defaultReminders) {
    this.defaultReminders = defaultReminders;
  }


  public Events description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the calendar. Read-only.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Events etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * ETag of the collection.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Events items(List<Event> items) {
    this.items = items;
    return this;
  }

  public Events addItemsItem(Event itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * List of events on the calendar.
   * @return items
   */
  @javax.annotation.Nullable
  public List<Event> getItems() {
    return items;
  }

  public void setItems(List<Event> items) {
    this.items = items;
  }


  public Events kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Type of the collection (\&quot;calendar#events\&quot;).
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Events nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public Events nextSyncToken(String nextSyncToken) {
    this.nextSyncToken = nextSyncToken;
    return this;
  }

  /**
   * Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.
   * @return nextSyncToken
   */
  @javax.annotation.Nullable
  public String getNextSyncToken() {
    return nextSyncToken;
  }

  public void setNextSyncToken(String nextSyncToken) {
    this.nextSyncToken = nextSyncToken;
  }


  public Events summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Title of the calendar. Read-only.
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public Events timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The time zone of the calendar. Read-only.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public Events updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Last modification time of the calendar (as a RFC3339 timestamp). Read-only.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Events events = (Events) o;
    return Objects.equals(this.accessRole, events.accessRole) &&
        Objects.equals(this.defaultReminders, events.defaultReminders) &&
        Objects.equals(this.description, events.description) &&
        Objects.equals(this.etag, events.etag) &&
        Objects.equals(this.items, events.items) &&
        Objects.equals(this.kind, events.kind) &&
        Objects.equals(this.nextPageToken, events.nextPageToken) &&
        Objects.equals(this.nextSyncToken, events.nextSyncToken) &&
        Objects.equals(this.summary, events.summary) &&
        Objects.equals(this.timeZone, events.timeZone) &&
        Objects.equals(this.updated, events.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessRole, defaultReminders, description, etag, items, kind, nextPageToken, nextSyncToken, summary, timeZone, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Events {\n");
    sb.append("    accessRole: ").append(toIndentedString(accessRole)).append("\n");
    sb.append("    defaultReminders: ").append(toIndentedString(defaultReminders)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    nextSyncToken: ").append(toIndentedString(nextSyncToken)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessRole");
    openapiFields.add("defaultReminders");
    openapiFields.add("description");
    openapiFields.add("etag");
    openapiFields.add("items");
    openapiFields.add("kind");
    openapiFields.add("nextPageToken");
    openapiFields.add("nextSyncToken");
    openapiFields.add("summary");
    openapiFields.add("timeZone");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Events
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Events.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Events is not found in the empty JSON string", Events.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Events.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Events` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessRole") != null && !jsonObj.get("accessRole").isJsonNull()) && !jsonObj.get("accessRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessRole").toString()));
      }
      if (jsonObj.get("defaultReminders") != null && !jsonObj.get("defaultReminders").isJsonNull()) {
        JsonArray jsonArraydefaultReminders = jsonObj.getAsJsonArray("defaultReminders");
        if (jsonArraydefaultReminders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("defaultReminders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `defaultReminders` to be an array in the JSON string but got `%s`", jsonObj.get("defaultReminders").toString()));
          }

          // validate the optional field `defaultReminders` (array)
          for (int i = 0; i < jsonArraydefaultReminders.size(); i++) {
            EventReminder.validateJsonElement(jsonArraydefaultReminders.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            Event.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
      if ((jsonObj.get("nextSyncToken") != null && !jsonObj.get("nextSyncToken").isJsonNull()) && !jsonObj.get("nextSyncToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextSyncToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextSyncToken").toString()));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Events.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Events' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Events> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Events.class));

       return (TypeAdapter<T>) new TypeAdapter<Events>() {
           @Override
           public void write(JsonWriter out, Events value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Events read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Events given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Events
   * @throws IOException if the JSON string is invalid with respect to Events
   */
  public static Events fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Events.class);
  }

  /**
   * Convert an instance of Events to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

