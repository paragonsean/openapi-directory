/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EntryPoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:09.684550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntryPoint {
  public static final String SERIALIZED_NAME_ACCESS_CODE = "accessCode";
  @SerializedName(SERIALIZED_NAME_ACCESS_CODE)
  private String accessCode;

  public static final String SERIALIZED_NAME_ENTRY_POINT_FEATURES = "entryPointFeatures";
  @SerializedName(SERIALIZED_NAME_ENTRY_POINT_FEATURES)
  private List<String> entryPointFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTRY_POINT_TYPE = "entryPointType";
  @SerializedName(SERIALIZED_NAME_ENTRY_POINT_TYPE)
  private String entryPointType;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_MEETING_CODE = "meetingCode";
  @SerializedName(SERIALIZED_NAME_MEETING_CODE)
  private String meetingCode;

  public static final String SERIALIZED_NAME_PASSCODE = "passcode";
  @SerializedName(SERIALIZED_NAME_PASSCODE)
  private String passcode;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PIN = "pin";
  @SerializedName(SERIALIZED_NAME_PIN)
  private String pin;

  public static final String SERIALIZED_NAME_REGION_CODE = "regionCode";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public EntryPoint() {
  }

  public EntryPoint accessCode(String accessCode) {
    this.accessCode = accessCode;
    return this;
  }

  /**
   * The access code to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.
   * @return accessCode
   */
  @javax.annotation.Nullable
  public String getAccessCode() {
    return accessCode;
  }

  public void setAccessCode(String accessCode) {
    this.accessCode = accessCode;
  }


  public EntryPoint entryPointFeatures(List<String> entryPointFeatures) {
    this.entryPointFeatures = entryPointFeatures;
    return this;
  }

  public EntryPoint addEntryPointFeaturesItem(String entryPointFeaturesItem) {
    if (this.entryPointFeatures == null) {
      this.entryPointFeatures = new ArrayList<>();
    }
    this.entryPointFeatures.add(entryPointFeaturesItem);
    return this;
  }

  /**
   * Features of the entry point, such as being toll or toll-free. One entry point can have multiple features. However, toll and toll-free cannot be both set on the same entry point.
   * @return entryPointFeatures
   */
  @javax.annotation.Nullable
  public List<String> getEntryPointFeatures() {
    return entryPointFeatures;
  }

  public void setEntryPointFeatures(List<String> entryPointFeatures) {
    this.entryPointFeatures = entryPointFeatures;
  }


  public EntryPoint entryPointType(String entryPointType) {
    this.entryPointType = entryPointType;
    return this;
  }

  /**
   * The type of the conference entry point. Possible values are:   - \&quot;video\&quot; - joining a conference over HTTP. A conference can have zero or one video entry point. - \&quot;phone\&quot; - joining a conference by dialing a phone number. A conference can have zero or more phone entry points. - \&quot;sip\&quot; - joining a conference over SIP. A conference can have zero or one sip entry point. - \&quot;more\&quot; - further conference joining instructions, for example additional phone numbers. A conference can have zero or one more entry point. A conference with only a more entry point is not a valid conference.
   * @return entryPointType
   */
  @javax.annotation.Nullable
  public String getEntryPointType() {
    return entryPointType;
  }

  public void setEntryPointType(String entryPointType) {
    this.entryPointType = entryPointType;
  }


  public EntryPoint label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The label for the URI. Visible to end users. Not localized. The maximum length is 512 characters. Examples:   - for video: meet.google.com/aaa-bbbb-ccc - for phone: +1 123 268 2601 - for sip: 12345678@altostrat.com - for more: should not be filled   Optional.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public EntryPoint meetingCode(String meetingCode) {
    this.meetingCode = meetingCode;
    return this;
  }

  /**
   * The meeting code to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.
   * @return meetingCode
   */
  @javax.annotation.Nullable
  public String getMeetingCode() {
    return meetingCode;
  }

  public void setMeetingCode(String meetingCode) {
    this.meetingCode = meetingCode;
  }


  public EntryPoint passcode(String passcode) {
    this.passcode = passcode;
    return this;
  }

  /**
   * The passcode to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
   * @return passcode
   */
  @javax.annotation.Nullable
  public String getPasscode() {
    return passcode;
  }

  public void setPasscode(String passcode) {
    this.passcode = passcode;
  }


  public EntryPoint password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public EntryPoint pin(String pin) {
    this.pin = pin;
    return this;
  }

  /**
   * The PIN to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.
   * @return pin
   */
  @javax.annotation.Nullable
  public String getPin() {
    return pin;
  }

  public void setPin(String pin) {
    this.pin = pin;
  }


  public EntryPoint regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * The CLDR/ISO 3166 region code for the country associated with this phone access. Example: \&quot;SE\&quot; for Sweden. Calendar backend will populate this field only for EntryPointType.PHONE.
   * @return regionCode
   */
  @javax.annotation.Nullable
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }


  public EntryPoint uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The URI of the entry point. The maximum length is 1300 characters. Format:   - for video, http: or https: schema is required. - for phone, tel: schema is required. The URI should include the entire dial sequence (e.g., tel:+12345678900,,,123456789;1234). - for sip, sip: schema is required, e.g., sip:12345678@myprovider.com. - for more, http: or https: schema is required.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntryPoint entryPoint = (EntryPoint) o;
    return Objects.equals(this.accessCode, entryPoint.accessCode) &&
        Objects.equals(this.entryPointFeatures, entryPoint.entryPointFeatures) &&
        Objects.equals(this.entryPointType, entryPoint.entryPointType) &&
        Objects.equals(this.label, entryPoint.label) &&
        Objects.equals(this.meetingCode, entryPoint.meetingCode) &&
        Objects.equals(this.passcode, entryPoint.passcode) &&
        Objects.equals(this.password, entryPoint.password) &&
        Objects.equals(this.pin, entryPoint.pin) &&
        Objects.equals(this.regionCode, entryPoint.regionCode) &&
        Objects.equals(this.uri, entryPoint.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessCode, entryPointFeatures, entryPointType, label, meetingCode, passcode, password, pin, regionCode, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntryPoint {\n");
    sb.append("    accessCode: ").append(toIndentedString(accessCode)).append("\n");
    sb.append("    entryPointFeatures: ").append(toIndentedString(entryPointFeatures)).append("\n");
    sb.append("    entryPointType: ").append(toIndentedString(entryPointType)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    meetingCode: ").append(toIndentedString(meetingCode)).append("\n");
    sb.append("    passcode: ").append(toIndentedString(passcode)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    pin: ").append(toIndentedString(pin)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessCode");
    openapiFields.add("entryPointFeatures");
    openapiFields.add("entryPointType");
    openapiFields.add("label");
    openapiFields.add("meetingCode");
    openapiFields.add("passcode");
    openapiFields.add("password");
    openapiFields.add("pin");
    openapiFields.add("regionCode");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntryPoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntryPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntryPoint is not found in the empty JSON string", EntryPoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntryPoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntryPoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessCode") != null && !jsonObj.get("accessCode").isJsonNull()) && !jsonObj.get("accessCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("entryPointFeatures") != null && !jsonObj.get("entryPointFeatures").isJsonNull() && !jsonObj.get("entryPointFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entryPointFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("entryPointFeatures").toString()));
      }
      if ((jsonObj.get("entryPointType") != null && !jsonObj.get("entryPointType").isJsonNull()) && !jsonObj.get("entryPointType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entryPointType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entryPointType").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("meetingCode") != null && !jsonObj.get("meetingCode").isJsonNull()) && !jsonObj.get("meetingCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meetingCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meetingCode").toString()));
      }
      if ((jsonObj.get("passcode") != null && !jsonObj.get("passcode").isJsonNull()) && !jsonObj.get("passcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passcode").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("pin") != null && !jsonObj.get("pin").isJsonNull()) && !jsonObj.get("pin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pin").toString()));
      }
      if ((jsonObj.get("regionCode") != null && !jsonObj.get("regionCode").isJsonNull()) && !jsonObj.get("regionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionCode").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntryPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntryPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntryPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntryPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<EntryPoint>() {
           @Override
           public void write(JsonWriter out, EntryPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntryPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntryPoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntryPoint
   * @throws IOException if the JSON string is invalid with respect to EntryPoint
   */
  public static EntryPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntryPoint.class);
  }

  /**
   * Convert an instance of EntryPoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

