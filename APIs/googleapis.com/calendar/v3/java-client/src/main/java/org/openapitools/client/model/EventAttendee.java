/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventAttendee
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:09.684550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventAttendee {
  public static final String SERIALIZED_NAME_ADDITIONAL_GUESTS = "additionalGuests";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_GUESTS)
  private Integer additionalGuests = 0;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OPTIONAL = "optional";
  @SerializedName(SERIALIZED_NAME_OPTIONAL)
  private Boolean optional = false;

  public static final String SERIALIZED_NAME_ORGANIZER = "organizer";
  @SerializedName(SERIALIZED_NAME_ORGANIZER)
  private Boolean organizer;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private Boolean resource = false;

  public static final String SERIALIZED_NAME_RESPONSE_STATUS = "responseStatus";
  @SerializedName(SERIALIZED_NAME_RESPONSE_STATUS)
  private String responseStatus;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private Boolean self = false;

  public EventAttendee() {
  }

  public EventAttendee additionalGuests(Integer additionalGuests) {
    this.additionalGuests = additionalGuests;
    return this;
  }

  /**
   * Number of additional guests. Optional. The default is 0.
   * @return additionalGuests
   */
  @javax.annotation.Nullable
  public Integer getAdditionalGuests() {
    return additionalGuests;
  }

  public void setAdditionalGuests(Integer additionalGuests) {
    this.additionalGuests = additionalGuests;
  }


  public EventAttendee comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * The attendee&#39;s response comment. Optional.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public EventAttendee displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The attendee&#39;s name, if available. Optional.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public EventAttendee email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The attendee&#39;s email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322. Required when adding an attendee.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public EventAttendee id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The attendee&#39;s Profile ID, if available.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public EventAttendee optional(Boolean optional) {
    this.optional = optional;
    return this;
  }

  /**
   * Whether this is an optional attendee. Optional. The default is False.
   * @return optional
   */
  @javax.annotation.Nullable
  public Boolean getOptional() {
    return optional;
  }

  public void setOptional(Boolean optional) {
    this.optional = optional;
  }


  public EventAttendee organizer(Boolean organizer) {
    this.organizer = organizer;
    return this;
  }

  /**
   * Whether the attendee is the organizer of the event. Read-only. The default is False.
   * @return organizer
   */
  @javax.annotation.Nullable
  public Boolean getOrganizer() {
    return organizer;
  }

  public void setOrganizer(Boolean organizer) {
    this.organizer = organizer;
  }


  public EventAttendee resource(Boolean resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Whether the attendee is a resource. Can only be set when the attendee is added to the event for the first time. Subsequent modifications are ignored. Optional. The default is False.
   * @return resource
   */
  @javax.annotation.Nullable
  public Boolean getResource() {
    return resource;
  }

  public void setResource(Boolean resource) {
    this.resource = resource;
  }


  public EventAttendee responseStatus(String responseStatus) {
    this.responseStatus = responseStatus;
    return this;
  }

  /**
   * The attendee&#39;s response status. Possible values are:   - \&quot;needsAction\&quot; - The attendee has not responded to the invitation (recommended for new events).  - \&quot;declined\&quot; - The attendee has declined the invitation.  - \&quot;tentative\&quot; - The attendee has tentatively accepted the invitation.  - \&quot;accepted\&quot; - The attendee has accepted the invitation.  Warning: If you add an event using the values declined, tentative, or accepted, attendees with the \&quot;Add invitations to my calendar\&quot; setting set to \&quot;When I respond to invitation in email\&quot; won&#39;t see an event on their calendar unless they choose to change their invitation response in the event invitation email.
   * @return responseStatus
   */
  @javax.annotation.Nullable
  public String getResponseStatus() {
    return responseStatus;
  }

  public void setResponseStatus(String responseStatus) {
    this.responseStatus = responseStatus;
  }


  public EventAttendee self(Boolean self) {
    this.self = self;
    return this;
  }

  /**
   * Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False.
   * @return self
   */
  @javax.annotation.Nullable
  public Boolean getSelf() {
    return self;
  }

  public void setSelf(Boolean self) {
    this.self = self;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventAttendee eventAttendee = (EventAttendee) o;
    return Objects.equals(this.additionalGuests, eventAttendee.additionalGuests) &&
        Objects.equals(this.comment, eventAttendee.comment) &&
        Objects.equals(this.displayName, eventAttendee.displayName) &&
        Objects.equals(this.email, eventAttendee.email) &&
        Objects.equals(this.id, eventAttendee.id) &&
        Objects.equals(this.optional, eventAttendee.optional) &&
        Objects.equals(this.organizer, eventAttendee.organizer) &&
        Objects.equals(this.resource, eventAttendee.resource) &&
        Objects.equals(this.responseStatus, eventAttendee.responseStatus) &&
        Objects.equals(this.self, eventAttendee.self);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalGuests, comment, displayName, email, id, optional, organizer, resource, responseStatus, self);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventAttendee {\n");
    sb.append("    additionalGuests: ").append(toIndentedString(additionalGuests)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    organizer: ").append(toIndentedString(organizer)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    responseStatus: ").append(toIndentedString(responseStatus)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalGuests");
    openapiFields.add("comment");
    openapiFields.add("displayName");
    openapiFields.add("email");
    openapiFields.add("id");
    openapiFields.add("optional");
    openapiFields.add("organizer");
    openapiFields.add("resource");
    openapiFields.add("responseStatus");
    openapiFields.add("self");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventAttendee
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventAttendee.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventAttendee is not found in the empty JSON string", EventAttendee.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventAttendee.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventAttendee` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("responseStatus") != null && !jsonObj.get("responseStatus").isJsonNull()) && !jsonObj.get("responseStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventAttendee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventAttendee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventAttendee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventAttendee.class));

       return (TypeAdapter<T>) new TypeAdapter<EventAttendee>() {
           @Override
           public void write(JsonWriter out, EventAttendee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventAttendee read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventAttendee given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventAttendee
   * @throws IOException if the JSON string is invalid with respect to EventAttendee
   */
  public static EventAttendee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventAttendee.class);
  }

  /**
   * Convert an instance of EventAttendee to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

