/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConferenceRequestStatus;
import org.openapitools.client.model.ConferenceSolutionKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateConferenceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:09.684550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateConferenceRequest {
  public static final String SERIALIZED_NAME_CONFERENCE_SOLUTION_KEY = "conferenceSolutionKey";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_SOLUTION_KEY)
  private ConferenceSolutionKey conferenceSolutionKey;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ConferenceRequestStatus status;

  public CreateConferenceRequest() {
  }

  public CreateConferenceRequest conferenceSolutionKey(ConferenceSolutionKey conferenceSolutionKey) {
    this.conferenceSolutionKey = conferenceSolutionKey;
    return this;
  }

  /**
   * Get conferenceSolutionKey
   * @return conferenceSolutionKey
   */
  @javax.annotation.Nullable
  public ConferenceSolutionKey getConferenceSolutionKey() {
    return conferenceSolutionKey;
  }

  public void setConferenceSolutionKey(ConferenceSolutionKey conferenceSolutionKey) {
    this.conferenceSolutionKey = conferenceSolutionKey;
  }


  public CreateConferenceRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * The client-generated unique ID for this request. Clients should regenerate this ID for every new request. If an ID provided is the same as for the previous request, the request is ignored.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public CreateConferenceRequest status(ConferenceRequestStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ConferenceRequestStatus getStatus() {
    return status;
  }

  public void setStatus(ConferenceRequestStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConferenceRequest createConferenceRequest = (CreateConferenceRequest) o;
    return Objects.equals(this.conferenceSolutionKey, createConferenceRequest.conferenceSolutionKey) &&
        Objects.equals(this.requestId, createConferenceRequest.requestId) &&
        Objects.equals(this.status, createConferenceRequest.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conferenceSolutionKey, requestId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConferenceRequest {\n");
    sb.append("    conferenceSolutionKey: ").append(toIndentedString(conferenceSolutionKey)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conferenceSolutionKey");
    openapiFields.add("requestId");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConferenceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateConferenceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConferenceRequest is not found in the empty JSON string", CreateConferenceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConferenceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConferenceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `conferenceSolutionKey`
      if (jsonObj.get("conferenceSolutionKey") != null && !jsonObj.get("conferenceSolutionKey").isJsonNull()) {
        ConferenceSolutionKey.validateJsonElement(jsonObj.get("conferenceSolutionKey"));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ConferenceRequestStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConferenceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConferenceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConferenceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConferenceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConferenceRequest>() {
           @Override
           public void write(JsonWriter out, CreateConferenceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConferenceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConferenceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConferenceRequest
   * @throws IOException if the JSON string is invalid with respect to CreateConferenceRequest
   */
  public static CreateConferenceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConferenceRequest.class);
  }

  /**
   * Convert an instance of CreateConferenceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

