/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CalendarList;
import org.openapitools.client.model.CalendarListEntry;
import org.openapitools.client.model.Channel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CalendarListApi
 */
@Disabled
public class CalendarListApiTest {

    private final CalendarListApi api = new CalendarListApi();

    /**
     * Removes a calendar from the user&#39;s calendar list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarCalendarListDeleteTest() throws ApiException {
        String calendarId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.calendarCalendarListDelete(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Returns a calendar from the user&#39;s calendar list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarCalendarListGetTest() throws ApiException {
        String calendarId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        CalendarListEntry response = api.calendarCalendarListGet(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Inserts an existing calendar into the user&#39;s calendar list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarCalendarListInsertTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean colorRgbFormat = null;
        CalendarListEntry calendarListEntry = null;
        CalendarListEntry response = api.calendarCalendarListInsert(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, colorRgbFormat, calendarListEntry);
        // TODO: test validations
    }

    /**
     * Returns the calendars on the user&#39;s calendar list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarCalendarListListTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        String minAccessRole = null;
        String pageToken = null;
        Boolean showDeleted = null;
        Boolean showHidden = null;
        String syncToken = null;
        CalendarList response = api.calendarCalendarListList(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, minAccessRole, pageToken, showDeleted, showHidden, syncToken);
        // TODO: test validations
    }

    /**
     * Updates an existing calendar on the user&#39;s calendar list. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarCalendarListPatchTest() throws ApiException {
        String calendarId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean colorRgbFormat = null;
        CalendarListEntry calendarListEntry = null;
        CalendarListEntry response = api.calendarCalendarListPatch(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, colorRgbFormat, calendarListEntry);
        // TODO: test validations
    }

    /**
     * Updates an existing calendar on the user&#39;s calendar list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarCalendarListUpdateTest() throws ApiException {
        String calendarId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean colorRgbFormat = null;
        CalendarListEntry calendarListEntry = null;
        CalendarListEntry response = api.calendarCalendarListUpdate(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, colorRgbFormat, calendarListEntry);
        // TODO: test validations
    }

    /**
     * Watch for changes to CalendarList resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarCalendarListWatchTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        String minAccessRole = null;
        String pageToken = null;
        Boolean showDeleted = null;
        Boolean showHidden = null;
        String syncToken = null;
        Channel channel = null;
        Channel response = api.calendarCalendarListWatch(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, minAccessRole, pageToken, showDeleted, showHidden, syncToken, channel);
        // TODO: test validations
    }

}
