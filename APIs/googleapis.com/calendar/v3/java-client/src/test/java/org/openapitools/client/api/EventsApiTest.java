/*
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.Events;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Disabled
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    /**
     * Deletes an event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarEventsDeleteTest() throws ApiException {
        String calendarId = null;
        String eventId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean sendNotifications = null;
        String sendUpdates = null;
        api.calendarEventsDelete(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates);
        // TODO: test validations
    }

    /**
     * Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarEventsGetTest() throws ApiException {
        String calendarId = null;
        String eventId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean alwaysIncludeEmail = null;
        Integer maxAttendees = null;
        String timeZone = null;
        Event response = api.calendarEventsGet(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, maxAttendees, timeZone);
        // TODO: test validations
    }

    /**
     * Imports an event. This operation is used to add a private copy of an existing event to a calendar.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarEventsImportTest() throws ApiException {
        String calendarId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer conferenceDataVersion = null;
        Boolean supportsAttachments = null;
        Event event = null;
        Event response = api.calendarEventsImport(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, conferenceDataVersion, supportsAttachments, event);
        // TODO: test validations
    }

    /**
     * Creates an event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarEventsInsertTest() throws ApiException {
        String calendarId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer conferenceDataVersion = null;
        Integer maxAttendees = null;
        Boolean sendNotifications = null;
        String sendUpdates = null;
        Boolean supportsAttachments = null;
        Event event = null;
        Event response = api.calendarEventsInsert(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event);
        // TODO: test validations
    }

    /**
     * Returns instances of the specified recurring event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarEventsInstancesTest() throws ApiException {
        String calendarId = null;
        String eventId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean alwaysIncludeEmail = null;
        Integer maxAttendees = null;
        Integer maxResults = null;
        String originalStart = null;
        String pageToken = null;
        Boolean showDeleted = null;
        String timeMax = null;
        String timeMin = null;
        String timeZone = null;
        Events response = api.calendarEventsInstances(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, maxAttendees, maxResults, originalStart, pageToken, showDeleted, timeMax, timeMin, timeZone);
        // TODO: test validations
    }

    /**
     * Returns events on the specified calendar.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarEventsListTest() throws ApiException {
        String calendarId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean alwaysIncludeEmail = null;
        List<String> eventTypes = null;
        String iCalUID = null;
        Integer maxAttendees = null;
        Integer maxResults = null;
        String orderBy = null;
        String pageToken = null;
        List<String> privateExtendedProperty = null;
        String q = null;
        List<String> sharedExtendedProperty = null;
        Boolean showDeleted = null;
        Boolean showHiddenInvitations = null;
        Boolean singleEvents = null;
        String syncToken = null;
        String timeMax = null;
        String timeMin = null;
        String timeZone = null;
        String updatedMin = null;
        Events response = api.calendarEventsList(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, eventTypes, iCalUID, maxAttendees, maxResults, orderBy, pageToken, privateExtendedProperty, q, sharedExtendedProperty, showDeleted, showHiddenInvitations, singleEvents, syncToken, timeMax, timeMin, timeZone, updatedMin);
        // TODO: test validations
    }

    /**
     * Moves an event to another calendar, i.e. changes an event&#39;s organizer. Note that only default events can be moved; outOfOffice, focusTime and workingLocation events cannot be moved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarEventsMoveTest() throws ApiException {
        String calendarId = null;
        String eventId = null;
        String destination = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean sendNotifications = null;
        String sendUpdates = null;
        Event response = api.calendarEventsMove(calendarId, eventId, destination, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates);
        // TODO: test validations
    }

    /**
     * Updates an event. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarEventsPatchTest() throws ApiException {
        String calendarId = null;
        String eventId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean alwaysIncludeEmail = null;
        Integer conferenceDataVersion = null;
        Integer maxAttendees = null;
        Boolean sendNotifications = null;
        String sendUpdates = null;
        Boolean supportsAttachments = null;
        Event event = null;
        Event response = api.calendarEventsPatch(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event);
        // TODO: test validations
    }

    /**
     * Creates an event based on a simple text string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarEventsQuickAddTest() throws ApiException {
        String calendarId = null;
        String text = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean sendNotifications = null;
        String sendUpdates = null;
        Event response = api.calendarEventsQuickAdd(calendarId, text, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, sendNotifications, sendUpdates);
        // TODO: test validations
    }

    /**
     * Updates an event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarEventsUpdateTest() throws ApiException {
        String calendarId = null;
        String eventId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean alwaysIncludeEmail = null;
        Integer conferenceDataVersion = null;
        Integer maxAttendees = null;
        Boolean sendNotifications = null;
        String sendUpdates = null;
        Boolean supportsAttachments = null;
        Event event = null;
        Event response = api.calendarEventsUpdate(calendarId, eventId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, conferenceDataVersion, maxAttendees, sendNotifications, sendUpdates, supportsAttachments, event);
        // TODO: test validations
    }

    /**
     * Watch for changes to Events resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calendarEventsWatchTest() throws ApiException {
        String calendarId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean alwaysIncludeEmail = null;
        List<String> eventTypes = null;
        String iCalUID = null;
        Integer maxAttendees = null;
        Integer maxResults = null;
        String orderBy = null;
        String pageToken = null;
        List<String> privateExtendedProperty = null;
        String q = null;
        List<String> sharedExtendedProperty = null;
        Boolean showDeleted = null;
        Boolean showHiddenInvitations = null;
        Boolean singleEvents = null;
        String syncToken = null;
        String timeMax = null;
        String timeMin = null;
        String timeZone = null;
        String updatedMin = null;
        Channel channel = null;
        Channel response = api.calendarEventsWatch(calendarId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, alwaysIncludeEmail, eventTypes, iCalUID, maxAttendees, maxResults, orderBy, pageToken, privateExtendedProperty, q, sharedExtendedProperty, showDeleted, showHiddenInvitations, singleEvents, syncToken, timeMax, timeMin, timeZone, updatedMin, channel);
        // TODO: test validations
    }

}
