# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_id: str=None, file_url: str=None, icon_link: str=None, mime_type: str=None, title: str=None):
        """EventAttachment - a model defined in OpenAPI

        :param file_id: The file_id of this EventAttachment.
        :param file_url: The file_url of this EventAttachment.
        :param icon_link: The icon_link of this EventAttachment.
        :param mime_type: The mime_type of this EventAttachment.
        :param title: The title of this EventAttachment.
        """
        self.openapi_types = {
            'file_id': str,
            'file_url': str,
            'icon_link': str,
            'mime_type': str,
            'title': str
        }

        self.attribute_map = {
            'file_id': 'fileId',
            'file_url': 'fileUrl',
            'icon_link': 'iconLink',
            'mime_type': 'mimeType',
            'title': 'title'
        }

        self._file_id = file_id
        self._file_url = file_url
        self._icon_link = icon_link
        self._mime_type = mime_type
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventAttachment of this EventAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_id(self):
        """Gets the file_id of this EventAttachment.

        ID of the attached file. Read-only. For Google Drive files, this is the ID of the corresponding Files resource entry in the Drive API.

        :return: The file_id of this EventAttachment.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this EventAttachment.

        ID of the attached file. Read-only. For Google Drive files, this is the ID of the corresponding Files resource entry in the Drive API.

        :param file_id: The file_id of this EventAttachment.
        :type file_id: str
        """

        self._file_id = file_id

    @property
    def file_url(self):
        """Gets the file_url of this EventAttachment.

        URL link to the attachment. For adding Google Drive file attachments use the same format as in alternateLink property of the Files resource in the Drive API. Required when adding an attachment.

        :return: The file_url of this EventAttachment.
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """Sets the file_url of this EventAttachment.

        URL link to the attachment. For adding Google Drive file attachments use the same format as in alternateLink property of the Files resource in the Drive API. Required when adding an attachment.

        :param file_url: The file_url of this EventAttachment.
        :type file_url: str
        """

        self._file_url = file_url

    @property
    def icon_link(self):
        """Gets the icon_link of this EventAttachment.

        URL link to the attachment's icon. This field can only be modified for custom third-party attachments.

        :return: The icon_link of this EventAttachment.
        :rtype: str
        """
        return self._icon_link

    @icon_link.setter
    def icon_link(self, icon_link):
        """Sets the icon_link of this EventAttachment.

        URL link to the attachment's icon. This field can only be modified for custom third-party attachments.

        :param icon_link: The icon_link of this EventAttachment.
        :type icon_link: str
        """

        self._icon_link = icon_link

    @property
    def mime_type(self):
        """Gets the mime_type of this EventAttachment.

        Internet media type (MIME type) of the attachment.

        :return: The mime_type of this EventAttachment.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this EventAttachment.

        Internet media type (MIME type) of the attachment.

        :param mime_type: The mime_type of this EventAttachment.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def title(self):
        """Gets the title of this EventAttachment.

        Attachment title.

        :return: The title of this EventAttachment.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EventAttachment.

        Attachment title.

        :param title: The title of this EventAttachment.
        :type title: str
        """

        self._title = title
