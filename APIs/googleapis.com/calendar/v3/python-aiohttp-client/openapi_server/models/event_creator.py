# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventCreator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, email: str=None, id: str=None, _self: bool=False):
        """EventCreator - a model defined in OpenAPI

        :param display_name: The display_name of this EventCreator.
        :param email: The email of this EventCreator.
        :param id: The id of this EventCreator.
        :param _self: The _self of this EventCreator.
        """
        self.openapi_types = {
            'display_name': str,
            'email': str,
            'id': str,
            '_self': bool
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'email': 'email',
            'id': 'id',
            '_self': 'self'
        }

        self._display_name = display_name
        self._email = email
        self._id = id
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventCreator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event_creator of this EventCreator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this EventCreator.

        The creator's name, if available.

        :return: The display_name of this EventCreator.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this EventCreator.

        The creator's name, if available.

        :param display_name: The display_name of this EventCreator.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this EventCreator.

        The creator's email address, if available.

        :return: The email of this EventCreator.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EventCreator.

        The creator's email address, if available.

        :param email: The email of this EventCreator.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this EventCreator.

        The creator's Profile ID, if available.

        :return: The id of this EventCreator.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventCreator.

        The creator's Profile ID, if available.

        :param id: The id of this EventCreator.
        :type id: str
        """

        self._id = id

    @property
    def _self(self):
        """Gets the _self of this EventCreator.

        Whether the creator corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.

        :return: The _self of this EventCreator.
        :rtype: bool
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this EventCreator.

        Whether the creator corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.

        :param _self: The _self of this EventCreator.
        :type _self: bool
        """

        self.__self = _self
