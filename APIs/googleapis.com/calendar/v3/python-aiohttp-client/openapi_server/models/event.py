# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conference_data import ConferenceData
from openapi_server.models.event_attachment import EventAttachment
from openapi_server.models.event_attendee import EventAttendee
from openapi_server.models.event_creator import EventCreator
from openapi_server.models.event_date_time import EventDateTime
from openapi_server.models.event_extended_properties import EventExtendedProperties
from openapi_server.models.event_focus_time_properties import EventFocusTimeProperties
from openapi_server.models.event_gadget import EventGadget
from openapi_server.models.event_organizer import EventOrganizer
from openapi_server.models.event_out_of_office_properties import EventOutOfOfficeProperties
from openapi_server.models.event_reminders import EventReminders
from openapi_server.models.event_source import EventSource
from openapi_server.models.event_working_location_properties import EventWorkingLocationProperties
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anyone_can_add_self: bool=False, attachments: List[EventAttachment]=None, attendees: List[EventAttendee]=None, attendees_omitted: bool=False, color_id: str=None, conference_data: ConferenceData=None, created: datetime=None, creator: EventCreator=None, description: str=None, end: EventDateTime=None, end_time_unspecified: bool=False, etag: str=None, event_type: str='default', extended_properties: EventExtendedProperties=None, focus_time_properties: EventFocusTimeProperties=None, gadget: EventGadget=None, guests_can_invite_others: bool=True, guests_can_modify: bool=False, guests_can_see_other_guests: bool=True, hangout_link: str=None, html_link: str=None, i_cal_uid: str=None, id: str=None, kind: str='calendar#event', location: str=None, locked: bool=False, organizer: EventOrganizer=None, original_start_time: EventDateTime=None, out_of_office_properties: EventOutOfOfficeProperties=None, private_copy: bool=False, recurrence: List[str]=None, recurring_event_id: str=None, reminders: EventReminders=None, sequence: int=None, source: EventSource=None, start: EventDateTime=None, status: str=None, summary: str=None, transparency: str='opaque', updated: datetime=None, visibility: str='default', working_location_properties: EventWorkingLocationProperties=None):
        """Event - a model defined in OpenAPI

        :param anyone_can_add_self: The anyone_can_add_self of this Event.
        :param attachments: The attachments of this Event.
        :param attendees: The attendees of this Event.
        :param attendees_omitted: The attendees_omitted of this Event.
        :param color_id: The color_id of this Event.
        :param conference_data: The conference_data of this Event.
        :param created: The created of this Event.
        :param creator: The creator of this Event.
        :param description: The description of this Event.
        :param end: The end of this Event.
        :param end_time_unspecified: The end_time_unspecified of this Event.
        :param etag: The etag of this Event.
        :param event_type: The event_type of this Event.
        :param extended_properties: The extended_properties of this Event.
        :param focus_time_properties: The focus_time_properties of this Event.
        :param gadget: The gadget of this Event.
        :param guests_can_invite_others: The guests_can_invite_others of this Event.
        :param guests_can_modify: The guests_can_modify of this Event.
        :param guests_can_see_other_guests: The guests_can_see_other_guests of this Event.
        :param hangout_link: The hangout_link of this Event.
        :param html_link: The html_link of this Event.
        :param i_cal_uid: The i_cal_uid of this Event.
        :param id: The id of this Event.
        :param kind: The kind of this Event.
        :param location: The location of this Event.
        :param locked: The locked of this Event.
        :param organizer: The organizer of this Event.
        :param original_start_time: The original_start_time of this Event.
        :param out_of_office_properties: The out_of_office_properties of this Event.
        :param private_copy: The private_copy of this Event.
        :param recurrence: The recurrence of this Event.
        :param recurring_event_id: The recurring_event_id of this Event.
        :param reminders: The reminders of this Event.
        :param sequence: The sequence of this Event.
        :param source: The source of this Event.
        :param start: The start of this Event.
        :param status: The status of this Event.
        :param summary: The summary of this Event.
        :param transparency: The transparency of this Event.
        :param updated: The updated of this Event.
        :param visibility: The visibility of this Event.
        :param working_location_properties: The working_location_properties of this Event.
        """
        self.openapi_types = {
            'anyone_can_add_self': bool,
            'attachments': List[EventAttachment],
            'attendees': List[EventAttendee],
            'attendees_omitted': bool,
            'color_id': str,
            'conference_data': ConferenceData,
            'created': datetime,
            'creator': EventCreator,
            'description': str,
            'end': EventDateTime,
            'end_time_unspecified': bool,
            'etag': str,
            'event_type': str,
            'extended_properties': EventExtendedProperties,
            'focus_time_properties': EventFocusTimeProperties,
            'gadget': EventGadget,
            'guests_can_invite_others': bool,
            'guests_can_modify': bool,
            'guests_can_see_other_guests': bool,
            'hangout_link': str,
            'html_link': str,
            'i_cal_uid': str,
            'id': str,
            'kind': str,
            'location': str,
            'locked': bool,
            'organizer': EventOrganizer,
            'original_start_time': EventDateTime,
            'out_of_office_properties': EventOutOfOfficeProperties,
            'private_copy': bool,
            'recurrence': List[str],
            'recurring_event_id': str,
            'reminders': EventReminders,
            'sequence': int,
            'source': EventSource,
            'start': EventDateTime,
            'status': str,
            'summary': str,
            'transparency': str,
            'updated': datetime,
            'visibility': str,
            'working_location_properties': EventWorkingLocationProperties
        }

        self.attribute_map = {
            'anyone_can_add_self': 'anyoneCanAddSelf',
            'attachments': 'attachments',
            'attendees': 'attendees',
            'attendees_omitted': 'attendeesOmitted',
            'color_id': 'colorId',
            'conference_data': 'conferenceData',
            'created': 'created',
            'creator': 'creator',
            'description': 'description',
            'end': 'end',
            'end_time_unspecified': 'endTimeUnspecified',
            'etag': 'etag',
            'event_type': 'eventType',
            'extended_properties': 'extendedProperties',
            'focus_time_properties': 'focusTimeProperties',
            'gadget': 'gadget',
            'guests_can_invite_others': 'guestsCanInviteOthers',
            'guests_can_modify': 'guestsCanModify',
            'guests_can_see_other_guests': 'guestsCanSeeOtherGuests',
            'hangout_link': 'hangoutLink',
            'html_link': 'htmlLink',
            'i_cal_uid': 'iCalUID',
            'id': 'id',
            'kind': 'kind',
            'location': 'location',
            'locked': 'locked',
            'organizer': 'organizer',
            'original_start_time': 'originalStartTime',
            'out_of_office_properties': 'outOfOfficeProperties',
            'private_copy': 'privateCopy',
            'recurrence': 'recurrence',
            'recurring_event_id': 'recurringEventId',
            'reminders': 'reminders',
            'sequence': 'sequence',
            'source': 'source',
            'start': 'start',
            'status': 'status',
            'summary': 'summary',
            'transparency': 'transparency',
            'updated': 'updated',
            'visibility': 'visibility',
            'working_location_properties': 'workingLocationProperties'
        }

        self._anyone_can_add_self = anyone_can_add_self
        self._attachments = attachments
        self._attendees = attendees
        self._attendees_omitted = attendees_omitted
        self._color_id = color_id
        self._conference_data = conference_data
        self._created = created
        self._creator = creator
        self._description = description
        self._end = end
        self._end_time_unspecified = end_time_unspecified
        self._etag = etag
        self._event_type = event_type
        self._extended_properties = extended_properties
        self._focus_time_properties = focus_time_properties
        self._gadget = gadget
        self._guests_can_invite_others = guests_can_invite_others
        self._guests_can_modify = guests_can_modify
        self._guests_can_see_other_guests = guests_can_see_other_guests
        self._hangout_link = hangout_link
        self._html_link = html_link
        self._i_cal_uid = i_cal_uid
        self._id = id
        self._kind = kind
        self._location = location
        self._locked = locked
        self._organizer = organizer
        self._original_start_time = original_start_time
        self._out_of_office_properties = out_of_office_properties
        self._private_copy = private_copy
        self._recurrence = recurrence
        self._recurring_event_id = recurring_event_id
        self._reminders = reminders
        self._sequence = sequence
        self._source = source
        self._start = start
        self._status = status
        self._summary = summary
        self._transparency = transparency
        self._updated = updated
        self._visibility = visibility
        self._working_location_properties = working_location_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anyone_can_add_self(self):
        """Gets the anyone_can_add_self of this Event.

        Whether anyone can invite themselves to the event (deprecated). Optional. The default is False.

        :return: The anyone_can_add_self of this Event.
        :rtype: bool
        """
        return self._anyone_can_add_self

    @anyone_can_add_self.setter
    def anyone_can_add_self(self, anyone_can_add_self):
        """Sets the anyone_can_add_self of this Event.

        Whether anyone can invite themselves to the event (deprecated). Optional. The default is False.

        :param anyone_can_add_self: The anyone_can_add_self of this Event.
        :type anyone_can_add_self: bool
        """

        self._anyone_can_add_self = anyone_can_add_self

    @property
    def attachments(self):
        """Gets the attachments of this Event.

        File attachments for the event. In order to modify attachments the supportsAttachments request parameter should be set to true. There can be at most 25 attachments per event,

        :return: The attachments of this Event.
        :rtype: List[EventAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Event.

        File attachments for the event. In order to modify attachments the supportsAttachments request parameter should be set to true. There can be at most 25 attachments per event,

        :param attachments: The attachments of this Event.
        :type attachments: List[EventAttachment]
        """

        self._attachments = attachments

    @property
    def attendees(self):
        """Gets the attendees of this Event.

        The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users. Service accounts need to use domain-wide delegation of authority to populate the attendee list.

        :return: The attendees of this Event.
        :rtype: List[EventAttendee]
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """Sets the attendees of this Event.

        The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users. Service accounts need to use domain-wide delegation of authority to populate the attendee list.

        :param attendees: The attendees of this Event.
        :type attendees: List[EventAttendee]
        """

        self._attendees = attendees

    @property
    def attendees_omitted(self):
        """Gets the attendees_omitted of this Event.

        Whether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the maxAttendee query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False.

        :return: The attendees_omitted of this Event.
        :rtype: bool
        """
        return self._attendees_omitted

    @attendees_omitted.setter
    def attendees_omitted(self, attendees_omitted):
        """Sets the attendees_omitted of this Event.

        Whether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the maxAttendee query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False.

        :param attendees_omitted: The attendees_omitted of this Event.
        :type attendees_omitted: bool
        """

        self._attendees_omitted = attendees_omitted

    @property
    def color_id(self):
        """Gets the color_id of this Event.

        The color of the event. This is an ID referring to an entry in the event section of the colors definition (see the  colors endpoint). Optional.

        :return: The color_id of this Event.
        :rtype: str
        """
        return self._color_id

    @color_id.setter
    def color_id(self, color_id):
        """Sets the color_id of this Event.

        The color of the event. This is an ID referring to an entry in the event section of the colors definition (see the  colors endpoint). Optional.

        :param color_id: The color_id of this Event.
        :type color_id: str
        """

        self._color_id = color_id

    @property
    def conference_data(self):
        """Gets the conference_data of this Event.


        :return: The conference_data of this Event.
        :rtype: ConferenceData
        """
        return self._conference_data

    @conference_data.setter
    def conference_data(self, conference_data):
        """Sets the conference_data of this Event.


        :param conference_data: The conference_data of this Event.
        :type conference_data: ConferenceData
        """

        self._conference_data = conference_data

    @property
    def created(self):
        """Gets the created of this Event.

        Creation time of the event (as a RFC3339 timestamp). Read-only.

        :return: The created of this Event.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Event.

        Creation time of the event (as a RFC3339 timestamp). Read-only.

        :param created: The created of this Event.
        :type created: datetime
        """

        self._created = created

    @property
    def creator(self):
        """Gets the creator of this Event.


        :return: The creator of this Event.
        :rtype: EventCreator
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Event.


        :param creator: The creator of this Event.
        :type creator: EventCreator
        """

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this Event.

        Description of the event. Can contain HTML. Optional.

        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.

        Description of the event. Can contain HTML. Optional.

        :param description: The description of this Event.
        :type description: str
        """

        self._description = description

    @property
    def end(self):
        """Gets the end of this Event.


        :return: The end of this Event.
        :rtype: EventDateTime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Event.


        :param end: The end of this Event.
        :type end: EventDateTime
        """

        self._end = end

    @property
    def end_time_unspecified(self):
        """Gets the end_time_unspecified of this Event.

        Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False.

        :return: The end_time_unspecified of this Event.
        :rtype: bool
        """
        return self._end_time_unspecified

    @end_time_unspecified.setter
    def end_time_unspecified(self, end_time_unspecified):
        """Sets the end_time_unspecified of this Event.

        Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False.

        :param end_time_unspecified: The end_time_unspecified of this Event.
        :type end_time_unspecified: bool
        """

        self._end_time_unspecified = end_time_unspecified

    @property
    def etag(self):
        """Gets the etag of this Event.

        ETag of the resource.

        :return: The etag of this Event.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Event.

        ETag of the resource.

        :param etag: The etag of this Event.
        :type etag: str
        """

        self._etag = etag

    @property
    def event_type(self):
        """Gets the event_type of this Event.

        Specific type of the event. This cannot be modified after the event is created. Possible values are:   - \"default\" - A regular event or not further specified.  - \"outOfOffice\" - An out-of-office event.  - \"focusTime\" - A focus-time event.  - \"workingLocation\" - A working location event.  Currently, only \"default \" and \"workingLocation\" events can be created using the API. Extended support for other event types will be made available in later releases.

        :return: The event_type of this Event.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Event.

        Specific type of the event. This cannot be modified after the event is created. Possible values are:   - \"default\" - A regular event or not further specified.  - \"outOfOffice\" - An out-of-office event.  - \"focusTime\" - A focus-time event.  - \"workingLocation\" - A working location event.  Currently, only \"default \" and \"workingLocation\" events can be created using the API. Extended support for other event types will be made available in later releases.

        :param event_type: The event_type of this Event.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def extended_properties(self):
        """Gets the extended_properties of this Event.


        :return: The extended_properties of this Event.
        :rtype: EventExtendedProperties
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this Event.


        :param extended_properties: The extended_properties of this Event.
        :type extended_properties: EventExtendedProperties
        """

        self._extended_properties = extended_properties

    @property
    def focus_time_properties(self):
        """Gets the focus_time_properties of this Event.


        :return: The focus_time_properties of this Event.
        :rtype: EventFocusTimeProperties
        """
        return self._focus_time_properties

    @focus_time_properties.setter
    def focus_time_properties(self, focus_time_properties):
        """Sets the focus_time_properties of this Event.


        :param focus_time_properties: The focus_time_properties of this Event.
        :type focus_time_properties: EventFocusTimeProperties
        """

        self._focus_time_properties = focus_time_properties

    @property
    def gadget(self):
        """Gets the gadget of this Event.


        :return: The gadget of this Event.
        :rtype: EventGadget
        """
        return self._gadget

    @gadget.setter
    def gadget(self, gadget):
        """Sets the gadget of this Event.


        :param gadget: The gadget of this Event.
        :type gadget: EventGadget
        """

        self._gadget = gadget

    @property
    def guests_can_invite_others(self):
        """Gets the guests_can_invite_others of this Event.

        Whether attendees other than the organizer can invite others to the event. Optional. The default is True.

        :return: The guests_can_invite_others of this Event.
        :rtype: bool
        """
        return self._guests_can_invite_others

    @guests_can_invite_others.setter
    def guests_can_invite_others(self, guests_can_invite_others):
        """Sets the guests_can_invite_others of this Event.

        Whether attendees other than the organizer can invite others to the event. Optional. The default is True.

        :param guests_can_invite_others: The guests_can_invite_others of this Event.
        :type guests_can_invite_others: bool
        """

        self._guests_can_invite_others = guests_can_invite_others

    @property
    def guests_can_modify(self):
        """Gets the guests_can_modify of this Event.

        Whether attendees other than the organizer can modify the event. Optional. The default is False.

        :return: The guests_can_modify of this Event.
        :rtype: bool
        """
        return self._guests_can_modify

    @guests_can_modify.setter
    def guests_can_modify(self, guests_can_modify):
        """Sets the guests_can_modify of this Event.

        Whether attendees other than the organizer can modify the event. Optional. The default is False.

        :param guests_can_modify: The guests_can_modify of this Event.
        :type guests_can_modify: bool
        """

        self._guests_can_modify = guests_can_modify

    @property
    def guests_can_see_other_guests(self):
        """Gets the guests_can_see_other_guests of this Event.

        Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.

        :return: The guests_can_see_other_guests of this Event.
        :rtype: bool
        """
        return self._guests_can_see_other_guests

    @guests_can_see_other_guests.setter
    def guests_can_see_other_guests(self, guests_can_see_other_guests):
        """Sets the guests_can_see_other_guests of this Event.

        Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.

        :param guests_can_see_other_guests: The guests_can_see_other_guests of this Event.
        :type guests_can_see_other_guests: bool
        """

        self._guests_can_see_other_guests = guests_can_see_other_guests

    @property
    def hangout_link(self):
        """Gets the hangout_link of this Event.

        An absolute link to the Google Hangout associated with this event. Read-only.

        :return: The hangout_link of this Event.
        :rtype: str
        """
        return self._hangout_link

    @hangout_link.setter
    def hangout_link(self, hangout_link):
        """Sets the hangout_link of this Event.

        An absolute link to the Google Hangout associated with this event. Read-only.

        :param hangout_link: The hangout_link of this Event.
        :type hangout_link: str
        """

        self._hangout_link = hangout_link

    @property
    def html_link(self):
        """Gets the html_link of this Event.

        An absolute link to this event in the Google Calendar Web UI. Read-only.

        :return: The html_link of this Event.
        :rtype: str
        """
        return self._html_link

    @html_link.setter
    def html_link(self, html_link):
        """Sets the html_link of this Event.

        An absolute link to this event in the Google Calendar Web UI. Read-only.

        :param html_link: The html_link of this Event.
        :type html_link: str
        """

        self._html_link = html_link

    @property
    def i_cal_uid(self):
        """Gets the i_cal_uid of this Event.

        Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method. Note that the iCalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same iCalUIDs. To retrieve an event using its iCalUID, call the events.list method using the iCalUID parameter. To retrieve an event using its id, call the events.get method.

        :return: The i_cal_uid of this Event.
        :rtype: str
        """
        return self._i_cal_uid

    @i_cal_uid.setter
    def i_cal_uid(self, i_cal_uid):
        """Sets the i_cal_uid of this Event.

        Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method. Note that the iCalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same iCalUIDs. To retrieve an event using its iCalUID, call the events.list method using the iCalUID parameter. To retrieve an event using its id, call the events.get method.

        :param i_cal_uid: The i_cal_uid of this Event.
        :type i_cal_uid: str
        """

        self._i_cal_uid = i_cal_uid

    @property
    def id(self):
        """Gets the id of this Event.

        Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:   - characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938  - the length of the ID must be between 5 and 1024 characters  - the ID must be unique per calendar  Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122. If you do not specify an ID, it will be automatically generated by the server. Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.

        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.

        Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:   - characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938  - the length of the ID must be between 5 and 1024 characters  - the ID must be unique per calendar  Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122. If you do not specify an ID, it will be automatically generated by the server. Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.

        :param id: The id of this Event.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Event.

        Type of the resource (\"calendar#event\").

        :return: The kind of this Event.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Event.

        Type of the resource (\"calendar#event\").

        :param kind: The kind of this Event.
        :type kind: str
        """

        self._kind = kind

    @property
    def location(self):
        """Gets the location of this Event.

        Geographic location of the event as free-form text. Optional.

        :return: The location of this Event.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Event.

        Geographic location of the event as free-form text. Optional.

        :param location: The location of this Event.
        :type location: str
        """

        self._location = location

    @property
    def locked(self):
        """Gets the locked of this Event.

        Whether this is a locked event copy where no changes can be made to the main event fields \"summary\", \"description\", \"location\", \"start\", \"end\" or \"recurrence\". The default is False. Read-Only.

        :return: The locked of this Event.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Event.

        Whether this is a locked event copy where no changes can be made to the main event fields \"summary\", \"description\", \"location\", \"start\", \"end\" or \"recurrence\". The default is False. Read-Only.

        :param locked: The locked of this Event.
        :type locked: bool
        """

        self._locked = locked

    @property
    def organizer(self):
        """Gets the organizer of this Event.


        :return: The organizer of this Event.
        :rtype: EventOrganizer
        """
        return self._organizer

    @organizer.setter
    def organizer(self, organizer):
        """Sets the organizer of this Event.


        :param organizer: The organizer of this Event.
        :type organizer: EventOrganizer
        """

        self._organizer = organizer

    @property
    def original_start_time(self):
        """Gets the original_start_time of this Event.


        :return: The original_start_time of this Event.
        :rtype: EventDateTime
        """
        return self._original_start_time

    @original_start_time.setter
    def original_start_time(self, original_start_time):
        """Sets the original_start_time of this Event.


        :param original_start_time: The original_start_time of this Event.
        :type original_start_time: EventDateTime
        """

        self._original_start_time = original_start_time

    @property
    def out_of_office_properties(self):
        """Gets the out_of_office_properties of this Event.


        :return: The out_of_office_properties of this Event.
        :rtype: EventOutOfOfficeProperties
        """
        return self._out_of_office_properties

    @out_of_office_properties.setter
    def out_of_office_properties(self, out_of_office_properties):
        """Sets the out_of_office_properties of this Event.


        :param out_of_office_properties: The out_of_office_properties of this Event.
        :type out_of_office_properties: EventOutOfOfficeProperties
        """

        self._out_of_office_properties = out_of_office_properties

    @property
    def private_copy(self):
        """Gets the private_copy of this Event.

        If set to True, Event propagation is disabled. Note that it is not the same thing as Private event properties. Optional. Immutable. The default is False.

        :return: The private_copy of this Event.
        :rtype: bool
        """
        return self._private_copy

    @private_copy.setter
    def private_copy(self, private_copy):
        """Sets the private_copy of this Event.

        If set to True, Event propagation is disabled. Note that it is not the same thing as Private event properties. Optional. Immutable. The default is False.

        :param private_copy: The private_copy of this Event.
        :type private_copy: bool
        """

        self._private_copy = private_copy

    @property
    def recurrence(self):
        """Gets the recurrence of this Event.

        List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events.

        :return: The recurrence of this Event.
        :rtype: List[str]
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this Event.

        List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events.

        :param recurrence: The recurrence of this Event.
        :type recurrence: List[str]
        """

        self._recurrence = recurrence

    @property
    def recurring_event_id(self):
        """Gets the recurring_event_id of this Event.

        For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable.

        :return: The recurring_event_id of this Event.
        :rtype: str
        """
        return self._recurring_event_id

    @recurring_event_id.setter
    def recurring_event_id(self, recurring_event_id):
        """Sets the recurring_event_id of this Event.

        For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable.

        :param recurring_event_id: The recurring_event_id of this Event.
        :type recurring_event_id: str
        """

        self._recurring_event_id = recurring_event_id

    @property
    def reminders(self):
        """Gets the reminders of this Event.


        :return: The reminders of this Event.
        :rtype: EventReminders
        """
        return self._reminders

    @reminders.setter
    def reminders(self, reminders):
        """Sets the reminders of this Event.


        :param reminders: The reminders of this Event.
        :type reminders: EventReminders
        """

        self._reminders = reminders

    @property
    def sequence(self):
        """Gets the sequence of this Event.

        Sequence number as per iCalendar.

        :return: The sequence of this Event.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Event.

        Sequence number as per iCalendar.

        :param sequence: The sequence of this Event.
        :type sequence: int
        """

        self._sequence = sequence

    @property
    def source(self):
        """Gets the source of this Event.


        :return: The source of this Event.
        :rtype: EventSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Event.


        :param source: The source of this Event.
        :type source: EventSource
        """

        self._source = source

    @property
    def start(self):
        """Gets the start of this Event.


        :return: The start of this Event.
        :rtype: EventDateTime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Event.


        :param start: The start of this Event.
        :type start: EventDateTime
        """

        self._start = start

    @property
    def status(self):
        """Gets the status of this Event.

        Status of the event. Optional. Possible values are:   - \"confirmed\" - The event is confirmed. This is the default status.  - \"tentative\" - The event is tentatively confirmed.  - \"cancelled\" - The event is cancelled (deleted). The list method returns cancelled events only on incremental sync (when syncToken or updatedMin are specified) or if the showDeleted flag is set to true. The get method always returns them. A cancelled status represents two different states depending on the event type:   - Cancelled exceptions of an uncancelled recurring event indicate that this instance should no longer be presented to the user. Clients should store these events for the lifetime of the parent recurring event. Cancelled exceptions are only guaranteed to have values for the id, recurringEventId and originalStartTime fields populated. The other fields might be empty.   - All other cancelled events represent deleted events. Clients should remove their locally synced copies. Such cancelled events will eventually disappear, so do not rely on them being available indefinitely. Deleted events are only guaranteed to have the id field populated.   On the organizer's calendar, cancelled events continue to expose event details (summary, location, etc.) so that they can be restored (undeleted). Similarly, the events to which the user was invited and that they manually removed continue to provide details. However, incremental sync requests with showDeleted set to false will not return these details. If an event changes its organizer (for example via the move operation) and the original organizer is not on the attendee list, it will leave behind a cancelled event where only the id field is guaranteed to be populated.

        :return: The status of this Event.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Event.

        Status of the event. Optional. Possible values are:   - \"confirmed\" - The event is confirmed. This is the default status.  - \"tentative\" - The event is tentatively confirmed.  - \"cancelled\" - The event is cancelled (deleted). The list method returns cancelled events only on incremental sync (when syncToken or updatedMin are specified) or if the showDeleted flag is set to true. The get method always returns them. A cancelled status represents two different states depending on the event type:   - Cancelled exceptions of an uncancelled recurring event indicate that this instance should no longer be presented to the user. Clients should store these events for the lifetime of the parent recurring event. Cancelled exceptions are only guaranteed to have values for the id, recurringEventId and originalStartTime fields populated. The other fields might be empty.   - All other cancelled events represent deleted events. Clients should remove their locally synced copies. Such cancelled events will eventually disappear, so do not rely on them being available indefinitely. Deleted events are only guaranteed to have the id field populated.   On the organizer's calendar, cancelled events continue to expose event details (summary, location, etc.) so that they can be restored (undeleted). Similarly, the events to which the user was invited and that they manually removed continue to provide details. However, incremental sync requests with showDeleted set to false will not return these details. If an event changes its organizer (for example via the move operation) and the original organizer is not on the attendee list, it will leave behind a cancelled event where only the id field is guaranteed to be populated.

        :param status: The status of this Event.
        :type status: str
        """

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this Event.

        Title of the event.

        :return: The summary of this Event.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Event.

        Title of the event.

        :param summary: The summary of this Event.
        :type summary: str
        """

        self._summary = summary

    @property
    def transparency(self):
        """Gets the transparency of this Event.

        Whether the event blocks time on the calendar. Optional. Possible values are:   - \"opaque\" - Default value. The event does block time on the calendar. This is equivalent to setting Show me as to Busy in the Calendar UI.  - \"transparent\" - The event does not block time on the calendar. This is equivalent to setting Show me as to Available in the Calendar UI.

        :return: The transparency of this Event.
        :rtype: str
        """
        return self._transparency

    @transparency.setter
    def transparency(self, transparency):
        """Sets the transparency of this Event.

        Whether the event blocks time on the calendar. Optional. Possible values are:   - \"opaque\" - Default value. The event does block time on the calendar. This is equivalent to setting Show me as to Busy in the Calendar UI.  - \"transparent\" - The event does not block time on the calendar. This is equivalent to setting Show me as to Available in the Calendar UI.

        :param transparency: The transparency of this Event.
        :type transparency: str
        """

        self._transparency = transparency

    @property
    def updated(self):
        """Gets the updated of this Event.

        Last modification time of the event (as a RFC3339 timestamp). Read-only.

        :return: The updated of this Event.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Event.

        Last modification time of the event (as a RFC3339 timestamp). Read-only.

        :param updated: The updated of this Event.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def visibility(self):
        """Gets the visibility of this Event.

        Visibility of the event. Optional. Possible values are:   - \"default\" - Uses the default visibility for events on the calendar. This is the default value.  - \"public\" - The event is public and event details are visible to all readers of the calendar.  - \"private\" - The event is private and only event attendees may view event details.  - \"confidential\" - The event is private. This value is provided for compatibility reasons.

        :return: The visibility of this Event.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Event.

        Visibility of the event. Optional. Possible values are:   - \"default\" - Uses the default visibility for events on the calendar. This is the default value.  - \"public\" - The event is public and event details are visible to all readers of the calendar.  - \"private\" - The event is private and only event attendees may view event details.  - \"confidential\" - The event is private. This value is provided for compatibility reasons.

        :param visibility: The visibility of this Event.
        :type visibility: str
        """

        self._visibility = visibility

    @property
    def working_location_properties(self):
        """Gets the working_location_properties of this Event.


        :return: The working_location_properties of this Event.
        :rtype: EventWorkingLocationProperties
        """
        return self._working_location_properties

    @working_location_properties.setter
    def working_location_properties(self, working_location_properties):
        """Sets the working_location_properties of this Event.


        :param working_location_properties: The working_location_properties of this Event.
        :type working_location_properties: EventWorkingLocationProperties
        """

        self._working_location_properties = working_location_properties
