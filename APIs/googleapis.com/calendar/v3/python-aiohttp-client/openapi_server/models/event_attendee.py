# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventAttendee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_guests: int=0, comment: str=None, display_name: str=None, email: str=None, id: str=None, optional: bool=False, organizer: bool=None, resource: bool=False, response_status: str=None, _self: bool=False):
        """EventAttendee - a model defined in OpenAPI

        :param additional_guests: The additional_guests of this EventAttendee.
        :param comment: The comment of this EventAttendee.
        :param display_name: The display_name of this EventAttendee.
        :param email: The email of this EventAttendee.
        :param id: The id of this EventAttendee.
        :param optional: The optional of this EventAttendee.
        :param organizer: The organizer of this EventAttendee.
        :param resource: The resource of this EventAttendee.
        :param response_status: The response_status of this EventAttendee.
        :param _self: The _self of this EventAttendee.
        """
        self.openapi_types = {
            'additional_guests': int,
            'comment': str,
            'display_name': str,
            'email': str,
            'id': str,
            'optional': bool,
            'organizer': bool,
            'resource': bool,
            'response_status': str,
            '_self': bool
        }

        self.attribute_map = {
            'additional_guests': 'additionalGuests',
            'comment': 'comment',
            'display_name': 'displayName',
            'email': 'email',
            'id': 'id',
            'optional': 'optional',
            'organizer': 'organizer',
            'resource': 'resource',
            'response_status': 'responseStatus',
            '_self': 'self'
        }

        self._additional_guests = additional_guests
        self._comment = comment
        self._display_name = display_name
        self._email = email
        self._id = id
        self._optional = optional
        self._organizer = organizer
        self._resource = resource
        self._response_status = response_status
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventAttendee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventAttendee of this EventAttendee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_guests(self):
        """Gets the additional_guests of this EventAttendee.

        Number of additional guests. Optional. The default is 0.

        :return: The additional_guests of this EventAttendee.
        :rtype: int
        """
        return self._additional_guests

    @additional_guests.setter
    def additional_guests(self, additional_guests):
        """Sets the additional_guests of this EventAttendee.

        Number of additional guests. Optional. The default is 0.

        :param additional_guests: The additional_guests of this EventAttendee.
        :type additional_guests: int
        """

        self._additional_guests = additional_guests

    @property
    def comment(self):
        """Gets the comment of this EventAttendee.

        The attendee's response comment. Optional.

        :return: The comment of this EventAttendee.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EventAttendee.

        The attendee's response comment. Optional.

        :param comment: The comment of this EventAttendee.
        :type comment: str
        """

        self._comment = comment

    @property
    def display_name(self):
        """Gets the display_name of this EventAttendee.

        The attendee's name, if available. Optional.

        :return: The display_name of this EventAttendee.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this EventAttendee.

        The attendee's name, if available. Optional.

        :param display_name: The display_name of this EventAttendee.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this EventAttendee.

        The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322. Required when adding an attendee.

        :return: The email of this EventAttendee.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EventAttendee.

        The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322. Required when adding an attendee.

        :param email: The email of this EventAttendee.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this EventAttendee.

        The attendee's Profile ID, if available.

        :return: The id of this EventAttendee.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventAttendee.

        The attendee's Profile ID, if available.

        :param id: The id of this EventAttendee.
        :type id: str
        """

        self._id = id

    @property
    def optional(self):
        """Gets the optional of this EventAttendee.

        Whether this is an optional attendee. Optional. The default is False.

        :return: The optional of this EventAttendee.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this EventAttendee.

        Whether this is an optional attendee. Optional. The default is False.

        :param optional: The optional of this EventAttendee.
        :type optional: bool
        """

        self._optional = optional

    @property
    def organizer(self):
        """Gets the organizer of this EventAttendee.

        Whether the attendee is the organizer of the event. Read-only. The default is False.

        :return: The organizer of this EventAttendee.
        :rtype: bool
        """
        return self._organizer

    @organizer.setter
    def organizer(self, organizer):
        """Sets the organizer of this EventAttendee.

        Whether the attendee is the organizer of the event. Read-only. The default is False.

        :param organizer: The organizer of this EventAttendee.
        :type organizer: bool
        """

        self._organizer = organizer

    @property
    def resource(self):
        """Gets the resource of this EventAttendee.

        Whether the attendee is a resource. Can only be set when the attendee is added to the event for the first time. Subsequent modifications are ignored. Optional. The default is False.

        :return: The resource of this EventAttendee.
        :rtype: bool
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this EventAttendee.

        Whether the attendee is a resource. Can only be set when the attendee is added to the event for the first time. Subsequent modifications are ignored. Optional. The default is False.

        :param resource: The resource of this EventAttendee.
        :type resource: bool
        """

        self._resource = resource

    @property
    def response_status(self):
        """Gets the response_status of this EventAttendee.

        The attendee's response status. Possible values are:   - \"needsAction\" - The attendee has not responded to the invitation (recommended for new events).  - \"declined\" - The attendee has declined the invitation.  - \"tentative\" - The attendee has tentatively accepted the invitation.  - \"accepted\" - The attendee has accepted the invitation.  Warning: If you add an event using the values declined, tentative, or accepted, attendees with the \"Add invitations to my calendar\" setting set to \"When I respond to invitation in email\" won't see an event on their calendar unless they choose to change their invitation response in the event invitation email.

        :return: The response_status of this EventAttendee.
        :rtype: str
        """
        return self._response_status

    @response_status.setter
    def response_status(self, response_status):
        """Sets the response_status of this EventAttendee.

        The attendee's response status. Possible values are:   - \"needsAction\" - The attendee has not responded to the invitation (recommended for new events).  - \"declined\" - The attendee has declined the invitation.  - \"tentative\" - The attendee has tentatively accepted the invitation.  - \"accepted\" - The attendee has accepted the invitation.  Warning: If you add an event using the values declined, tentative, or accepted, attendees with the \"Add invitations to my calendar\" setting set to \"When I respond to invitation in email\" won't see an event on their calendar unless they choose to change their invitation response in the event invitation email.

        :param response_status: The response_status of this EventAttendee.
        :type response_status: str
        """

        self._response_status = response_status

    @property
    def _self(self):
        """Gets the _self of this EventAttendee.

        Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False.

        :return: The _self of this EventAttendee.
        :rtype: bool
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this EventAttendee.

        Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False.

        :param _self: The _self of this EventAttendee.
        :type _self: bool
        """

        self.__self = _self
