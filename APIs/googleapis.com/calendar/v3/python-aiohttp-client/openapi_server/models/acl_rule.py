# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acl_rule_scope import AclRuleScope
from openapi_server import util


class AclRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, id: str=None, kind: str='calendar#aclRule', role: str=None, scope: AclRuleScope=None):
        """AclRule - a model defined in OpenAPI

        :param etag: The etag of this AclRule.
        :param id: The id of this AclRule.
        :param kind: The kind of this AclRule.
        :param role: The role of this AclRule.
        :param scope: The scope of this AclRule.
        """
        self.openapi_types = {
            'etag': str,
            'id': str,
            'kind': str,
            'role': str,
            'scope': AclRuleScope
        }

        self.attribute_map = {
            'etag': 'etag',
            'id': 'id',
            'kind': 'kind',
            'role': 'role',
            'scope': 'scope'
        }

        self._etag = etag
        self._id = id
        self._kind = kind
        self._role = role
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AclRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AclRule of this AclRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this AclRule.

        ETag of the resource.

        :return: The etag of this AclRule.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this AclRule.

        ETag of the resource.

        :param etag: The etag of this AclRule.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this AclRule.

        Identifier of the Access Control List (ACL) rule. See Sharing calendars.

        :return: The id of this AclRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AclRule.

        Identifier of the Access Control List (ACL) rule. See Sharing calendars.

        :param id: The id of this AclRule.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this AclRule.

        Type of the resource (\"calendar#aclRule\").

        :return: The kind of this AclRule.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AclRule.

        Type of the resource (\"calendar#aclRule\").

        :param kind: The kind of this AclRule.
        :type kind: str
        """

        self._kind = kind

    @property
    def role(self):
        """Gets the role of this AclRule.

        The role assigned to the scope. Possible values are:   - \"none\" - Provides no access.  - \"freeBusyReader\" - Provides read access to free/busy information.  - \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.

        :return: The role of this AclRule.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AclRule.

        The role assigned to the scope. Possible values are:   - \"none\" - Provides no access.  - \"freeBusyReader\" - Provides read access to free/busy information.  - \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.

        :param role: The role of this AclRule.
        :type role: str
        """

        self._role = role

    @property
    def scope(self):
        """Gets the scope of this AclRule.


        :return: The scope of this AclRule.
        :rtype: AclRuleScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AclRule.


        :param scope: The scope of this AclRule.
        :type scope: AclRuleScope
        """

        self._scope = scope
