# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ColorDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background: str=None, foreground: str=None):
        """ColorDefinition - a model defined in OpenAPI

        :param background: The background of this ColorDefinition.
        :param foreground: The foreground of this ColorDefinition.
        """
        self.openapi_types = {
            'background': str,
            'foreground': str
        }

        self.attribute_map = {
            'background': 'background',
            'foreground': 'foreground'
        }

        self._background = background
        self._foreground = foreground

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ColorDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ColorDefinition of this ColorDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background(self):
        """Gets the background of this ColorDefinition.

        The background color associated with this color definition.

        :return: The background of this ColorDefinition.
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this ColorDefinition.

        The background color associated with this color definition.

        :param background: The background of this ColorDefinition.
        :type background: str
        """

        self._background = background

    @property
    def foreground(self):
        """Gets the foreground of this ColorDefinition.

        The foreground color that can be used to write on top of a background with 'background' color.

        :return: The foreground of this ColorDefinition.
        :rtype: str
        """
        return self._foreground

    @foreground.setter
    def foreground(self, foreground):
        """Sets the foreground of this ColorDefinition.

        The foreground color that can be used to write on top of a background with 'background' color.

        :param foreground: The foreground of this ColorDefinition.
        :type foreground: str
        """

        self._foreground = foreground
