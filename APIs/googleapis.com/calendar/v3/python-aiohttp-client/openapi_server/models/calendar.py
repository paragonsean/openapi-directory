# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conference_properties import ConferenceProperties
from openapi_server import util


class Calendar(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conference_properties: ConferenceProperties=None, description: str=None, etag: str=None, id: str=None, kind: str='calendar#calendar', location: str=None, summary: str=None, time_zone: str=None):
        """Calendar - a model defined in OpenAPI

        :param conference_properties: The conference_properties of this Calendar.
        :param description: The description of this Calendar.
        :param etag: The etag of this Calendar.
        :param id: The id of this Calendar.
        :param kind: The kind of this Calendar.
        :param location: The location of this Calendar.
        :param summary: The summary of this Calendar.
        :param time_zone: The time_zone of this Calendar.
        """
        self.openapi_types = {
            'conference_properties': ConferenceProperties,
            'description': str,
            'etag': str,
            'id': str,
            'kind': str,
            'location': str,
            'summary': str,
            'time_zone': str
        }

        self.attribute_map = {
            'conference_properties': 'conferenceProperties',
            'description': 'description',
            'etag': 'etag',
            'id': 'id',
            'kind': 'kind',
            'location': 'location',
            'summary': 'summary',
            'time_zone': 'timeZone'
        }

        self._conference_properties = conference_properties
        self._description = description
        self._etag = etag
        self._id = id
        self._kind = kind
        self._location = location
        self._summary = summary
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Calendar':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Calendar of this Calendar.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conference_properties(self):
        """Gets the conference_properties of this Calendar.


        :return: The conference_properties of this Calendar.
        :rtype: ConferenceProperties
        """
        return self._conference_properties

    @conference_properties.setter
    def conference_properties(self, conference_properties):
        """Sets the conference_properties of this Calendar.


        :param conference_properties: The conference_properties of this Calendar.
        :type conference_properties: ConferenceProperties
        """

        self._conference_properties = conference_properties

    @property
    def description(self):
        """Gets the description of this Calendar.

        Description of the calendar. Optional.

        :return: The description of this Calendar.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Calendar.

        Description of the calendar. Optional.

        :param description: The description of this Calendar.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this Calendar.

        ETag of the resource.

        :return: The etag of this Calendar.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Calendar.

        ETag of the resource.

        :param etag: The etag of this Calendar.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Calendar.

        Identifier of the calendar. To retrieve IDs call the calendarList.list() method.

        :return: The id of this Calendar.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Calendar.

        Identifier of the calendar. To retrieve IDs call the calendarList.list() method.

        :param id: The id of this Calendar.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Calendar.

        Type of the resource (\"calendar#calendar\").

        :return: The kind of this Calendar.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Calendar.

        Type of the resource (\"calendar#calendar\").

        :param kind: The kind of this Calendar.
        :type kind: str
        """

        self._kind = kind

    @property
    def location(self):
        """Gets the location of this Calendar.

        Geographic location of the calendar as free-form text. Optional.

        :return: The location of this Calendar.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Calendar.

        Geographic location of the calendar as free-form text. Optional.

        :param location: The location of this Calendar.
        :type location: str
        """

        self._location = location

    @property
    def summary(self):
        """Gets the summary of this Calendar.

        Title of the calendar.

        :return: The summary of this Calendar.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Calendar.

        Title of the calendar.

        :param summary: The summary of this Calendar.
        :type summary: str
        """

        self._summary = summary

    @property
    def time_zone(self):
        """Gets the time_zone of this Calendar.

        The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) Optional.

        :return: The time_zone of this Calendar.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Calendar.

        The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) Optional.

        :param time_zone: The time_zone of this Calendar.
        :type time_zone: str
        """

        self._time_zone = time_zone
