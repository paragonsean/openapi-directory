# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventReminder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, minutes: int=None):
        """EventReminder - a model defined in OpenAPI

        :param method: The method of this EventReminder.
        :param minutes: The minutes of this EventReminder.
        """
        self.openapi_types = {
            'method': str,
            'minutes': int
        }

        self.attribute_map = {
            'method': 'method',
            'minutes': 'minutes'
        }

        self._method = method
        self._minutes = minutes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventReminder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventReminder of this EventReminder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this EventReminder.

        The method used by this reminder. Possible values are:   - \"email\" - Reminders are sent via email.  - \"popup\" - Reminders are sent via a UI popup.   Required when adding a reminder.

        :return: The method of this EventReminder.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this EventReminder.

        The method used by this reminder. Possible values are:   - \"email\" - Reminders are sent via email.  - \"popup\" - Reminders are sent via a UI popup.   Required when adding a reminder.

        :param method: The method of this EventReminder.
        :type method: str
        """

        self._method = method

    @property
    def minutes(self):
        """Gets the minutes of this EventReminder.

        Number of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes). Required when adding a reminder.

        :return: The minutes of this EventReminder.
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this EventReminder.

        Number of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes). Required when adding a reminder.

        :param minutes: The minutes of this EventReminder.
        :type minutes: int
        """

        self._minutes = minutes
