# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conference_request_status import ConferenceRequestStatus
from openapi_server.models.conference_solution_key import ConferenceSolutionKey
from openapi_server import util


class CreateConferenceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conference_solution_key: ConferenceSolutionKey=None, request_id: str=None, status: ConferenceRequestStatus=None):
        """CreateConferenceRequest - a model defined in OpenAPI

        :param conference_solution_key: The conference_solution_key of this CreateConferenceRequest.
        :param request_id: The request_id of this CreateConferenceRequest.
        :param status: The status of this CreateConferenceRequest.
        """
        self.openapi_types = {
            'conference_solution_key': ConferenceSolutionKey,
            'request_id': str,
            'status': ConferenceRequestStatus
        }

        self.attribute_map = {
            'conference_solution_key': 'conferenceSolutionKey',
            'request_id': 'requestId',
            'status': 'status'
        }

        self._conference_solution_key = conference_solution_key
        self._request_id = request_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConferenceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConferenceRequest of this CreateConferenceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conference_solution_key(self):
        """Gets the conference_solution_key of this CreateConferenceRequest.


        :return: The conference_solution_key of this CreateConferenceRequest.
        :rtype: ConferenceSolutionKey
        """
        return self._conference_solution_key

    @conference_solution_key.setter
    def conference_solution_key(self, conference_solution_key):
        """Sets the conference_solution_key of this CreateConferenceRequest.


        :param conference_solution_key: The conference_solution_key of this CreateConferenceRequest.
        :type conference_solution_key: ConferenceSolutionKey
        """

        self._conference_solution_key = conference_solution_key

    @property
    def request_id(self):
        """Gets the request_id of this CreateConferenceRequest.

        The client-generated unique ID for this request. Clients should regenerate this ID for every new request. If an ID provided is the same as for the previous request, the request is ignored.

        :return: The request_id of this CreateConferenceRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CreateConferenceRequest.

        The client-generated unique ID for this request. Clients should regenerate this ID for every new request. If an ID provided is the same as for the previous request, the request is ignored.

        :param request_id: The request_id of this CreateConferenceRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this CreateConferenceRequest.


        :return: The status of this CreateConferenceRequest.
        :rtype: ConferenceRequestStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateConferenceRequest.


        :param status: The status of this CreateConferenceRequest.
        :type status: ConferenceRequestStatus
        """

        self._status = status
