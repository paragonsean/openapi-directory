# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color_definition import ColorDefinition
from openapi_server import util


class Colors(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calendar: Dict[str, ColorDefinition]=None, event: Dict[str, ColorDefinition]=None, kind: str='calendar#colors', updated: datetime=None):
        """Colors - a model defined in OpenAPI

        :param calendar: The calendar of this Colors.
        :param event: The event of this Colors.
        :param kind: The kind of this Colors.
        :param updated: The updated of this Colors.
        """
        self.openapi_types = {
            'calendar': Dict[str, ColorDefinition],
            'event': Dict[str, ColorDefinition],
            'kind': str,
            'updated': datetime
        }

        self.attribute_map = {
            'calendar': 'calendar',
            'event': 'event',
            'kind': 'kind',
            'updated': 'updated'
        }

        self._calendar = calendar
        self._event = event
        self._kind = kind
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Colors':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Colors of this Colors.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calendar(self):
        """Gets the calendar of this Colors.

        A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its colorId field. Read-only.

        :return: The calendar of this Colors.
        :rtype: Dict[str, ColorDefinition]
        """
        return self._calendar

    @calendar.setter
    def calendar(self, calendar):
        """Sets the calendar of this Colors.

        A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its colorId field. Read-only.

        :param calendar: The calendar of this Colors.
        :type calendar: Dict[str, ColorDefinition]
        """

        self._calendar = calendar

    @property
    def event(self):
        """Gets the event of this Colors.

        A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its colorId field. Read-only.

        :return: The event of this Colors.
        :rtype: Dict[str, ColorDefinition]
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Colors.

        A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its colorId field. Read-only.

        :param event: The event of this Colors.
        :type event: Dict[str, ColorDefinition]
        """

        self._event = event

    @property
    def kind(self):
        """Gets the kind of this Colors.

        Type of the resource (\"calendar#colors\").

        :return: The kind of this Colors.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Colors.

        Type of the resource (\"calendar#colors\").

        :param kind: The kind of this Colors.
        :type kind: str
        """

        self._kind = kind

    @property
    def updated(self):
        """Gets the updated of this Colors.

        Last modification time of the color palette (as a RFC3339 timestamp). Read-only.

        :return: The updated of this Colors.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Colors.

        Last modification time of the color palette (as a RFC3339 timestamp). Read-only.

        :param updated: The updated of this Colors.
        :type updated: datetime
        """

        self._updated = updated
