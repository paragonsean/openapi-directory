# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conference_parameters_add_on_parameters import ConferenceParametersAddOnParameters
from openapi_server import util


class ConferenceParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_on_parameters: ConferenceParametersAddOnParameters=None):
        """ConferenceParameters - a model defined in OpenAPI

        :param add_on_parameters: The add_on_parameters of this ConferenceParameters.
        """
        self.openapi_types = {
            'add_on_parameters': ConferenceParametersAddOnParameters
        }

        self.attribute_map = {
            'add_on_parameters': 'addOnParameters'
        }

        self._add_on_parameters = add_on_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConferenceParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConferenceParameters of this ConferenceParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_on_parameters(self):
        """Gets the add_on_parameters of this ConferenceParameters.


        :return: The add_on_parameters of this ConferenceParameters.
        :rtype: ConferenceParametersAddOnParameters
        """
        return self._add_on_parameters

    @add_on_parameters.setter
    def add_on_parameters(self, add_on_parameters):
        """Sets the add_on_parameters of this ConferenceParameters.


        :param add_on_parameters: The add_on_parameters of this ConferenceParameters.
        :type add_on_parameters: ConferenceParametersAddOnParameters
        """

        self._add_on_parameters = add_on_parameters
