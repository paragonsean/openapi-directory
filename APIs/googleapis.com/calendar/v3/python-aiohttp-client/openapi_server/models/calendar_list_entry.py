# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.calendar_list_entry_notification_settings import CalendarListEntryNotificationSettings
from openapi_server.models.conference_properties import ConferenceProperties
from openapi_server.models.event_reminder import EventReminder
from openapi_server import util


class CalendarListEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_role: str=None, background_color: str=None, color_id: str=None, conference_properties: ConferenceProperties=None, default_reminders: List[EventReminder]=None, deleted: bool=False, description: str=None, etag: str=None, foreground_color: str=None, hidden: bool=False, id: str=None, kind: str='calendar#calendarListEntry', location: str=None, notification_settings: CalendarListEntryNotificationSettings=None, primary: bool=False, selected: bool=False, summary: str=None, summary_override: str=None, time_zone: str=None):
        """CalendarListEntry - a model defined in OpenAPI

        :param access_role: The access_role of this CalendarListEntry.
        :param background_color: The background_color of this CalendarListEntry.
        :param color_id: The color_id of this CalendarListEntry.
        :param conference_properties: The conference_properties of this CalendarListEntry.
        :param default_reminders: The default_reminders of this CalendarListEntry.
        :param deleted: The deleted of this CalendarListEntry.
        :param description: The description of this CalendarListEntry.
        :param etag: The etag of this CalendarListEntry.
        :param foreground_color: The foreground_color of this CalendarListEntry.
        :param hidden: The hidden of this CalendarListEntry.
        :param id: The id of this CalendarListEntry.
        :param kind: The kind of this CalendarListEntry.
        :param location: The location of this CalendarListEntry.
        :param notification_settings: The notification_settings of this CalendarListEntry.
        :param primary: The primary of this CalendarListEntry.
        :param selected: The selected of this CalendarListEntry.
        :param summary: The summary of this CalendarListEntry.
        :param summary_override: The summary_override of this CalendarListEntry.
        :param time_zone: The time_zone of this CalendarListEntry.
        """
        self.openapi_types = {
            'access_role': str,
            'background_color': str,
            'color_id': str,
            'conference_properties': ConferenceProperties,
            'default_reminders': List[EventReminder],
            'deleted': bool,
            'description': str,
            'etag': str,
            'foreground_color': str,
            'hidden': bool,
            'id': str,
            'kind': str,
            'location': str,
            'notification_settings': CalendarListEntryNotificationSettings,
            'primary': bool,
            'selected': bool,
            'summary': str,
            'summary_override': str,
            'time_zone': str
        }

        self.attribute_map = {
            'access_role': 'accessRole',
            'background_color': 'backgroundColor',
            'color_id': 'colorId',
            'conference_properties': 'conferenceProperties',
            'default_reminders': 'defaultReminders',
            'deleted': 'deleted',
            'description': 'description',
            'etag': 'etag',
            'foreground_color': 'foregroundColor',
            'hidden': 'hidden',
            'id': 'id',
            'kind': 'kind',
            'location': 'location',
            'notification_settings': 'notificationSettings',
            'primary': 'primary',
            'selected': 'selected',
            'summary': 'summary',
            'summary_override': 'summaryOverride',
            'time_zone': 'timeZone'
        }

        self._access_role = access_role
        self._background_color = background_color
        self._color_id = color_id
        self._conference_properties = conference_properties
        self._default_reminders = default_reminders
        self._deleted = deleted
        self._description = description
        self._etag = etag
        self._foreground_color = foreground_color
        self._hidden = hidden
        self._id = id
        self._kind = kind
        self._location = location
        self._notification_settings = notification_settings
        self._primary = primary
        self._selected = selected
        self._summary = summary
        self._summary_override = summary_override
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalendarListEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalendarListEntry of this CalendarListEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_role(self):
        """Gets the access_role of this CalendarListEntry.

        The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:   - \"freeBusyReader\" - Provides read access to free/busy information.  - \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.

        :return: The access_role of this CalendarListEntry.
        :rtype: str
        """
        return self._access_role

    @access_role.setter
    def access_role(self, access_role):
        """Sets the access_role of this CalendarListEntry.

        The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:   - \"freeBusyReader\" - Provides read access to free/busy information.  - \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.

        :param access_role: The access_role of this CalendarListEntry.
        :type access_role: str
        """

        self._access_role = access_role

    @property
    def background_color(self):
        """Gets the background_color of this CalendarListEntry.

        The main color of the calendar in the hexadecimal format \"#0088aa\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.

        :return: The background_color of this CalendarListEntry.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this CalendarListEntry.

        The main color of the calendar in the hexadecimal format \"#0088aa\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.

        :param background_color: The background_color of this CalendarListEntry.
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def color_id(self):
        """Gets the color_id of this CalendarListEntry.

        The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional.

        :return: The color_id of this CalendarListEntry.
        :rtype: str
        """
        return self._color_id

    @color_id.setter
    def color_id(self, color_id):
        """Sets the color_id of this CalendarListEntry.

        The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional.

        :param color_id: The color_id of this CalendarListEntry.
        :type color_id: str
        """

        self._color_id = color_id

    @property
    def conference_properties(self):
        """Gets the conference_properties of this CalendarListEntry.


        :return: The conference_properties of this CalendarListEntry.
        :rtype: ConferenceProperties
        """
        return self._conference_properties

    @conference_properties.setter
    def conference_properties(self, conference_properties):
        """Sets the conference_properties of this CalendarListEntry.


        :param conference_properties: The conference_properties of this CalendarListEntry.
        :type conference_properties: ConferenceProperties
        """

        self._conference_properties = conference_properties

    @property
    def default_reminders(self):
        """Gets the default_reminders of this CalendarListEntry.

        The default reminders that the authenticated user has for this calendar.

        :return: The default_reminders of this CalendarListEntry.
        :rtype: List[EventReminder]
        """
        return self._default_reminders

    @default_reminders.setter
    def default_reminders(self, default_reminders):
        """Sets the default_reminders of this CalendarListEntry.

        The default reminders that the authenticated user has for this calendar.

        :param default_reminders: The default_reminders of this CalendarListEntry.
        :type default_reminders: List[EventReminder]
        """

        self._default_reminders = default_reminders

    @property
    def deleted(self):
        """Gets the deleted of this CalendarListEntry.

        Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False.

        :return: The deleted of this CalendarListEntry.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CalendarListEntry.

        Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False.

        :param deleted: The deleted of this CalendarListEntry.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this CalendarListEntry.

        Description of the calendar. Optional. Read-only.

        :return: The description of this CalendarListEntry.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CalendarListEntry.

        Description of the calendar. Optional. Read-only.

        :param description: The description of this CalendarListEntry.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this CalendarListEntry.

        ETag of the resource.

        :return: The etag of this CalendarListEntry.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CalendarListEntry.

        ETag of the resource.

        :param etag: The etag of this CalendarListEntry.
        :type etag: str
        """

        self._etag = etag

    @property
    def foreground_color(self):
        """Gets the foreground_color of this CalendarListEntry.

        The foreground color of the calendar in the hexadecimal format \"#ffffff\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.

        :return: The foreground_color of this CalendarListEntry.
        :rtype: str
        """
        return self._foreground_color

    @foreground_color.setter
    def foreground_color(self, foreground_color):
        """Sets the foreground_color of this CalendarListEntry.

        The foreground color of the calendar in the hexadecimal format \"#ffffff\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional.

        :param foreground_color: The foreground_color of this CalendarListEntry.
        :type foreground_color: str
        """

        self._foreground_color = foreground_color

    @property
    def hidden(self):
        """Gets the hidden of this CalendarListEntry.

        Whether the calendar has been hidden from the list. Optional. The attribute is only returned when the calendar is hidden, in which case the value is true.

        :return: The hidden of this CalendarListEntry.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this CalendarListEntry.

        Whether the calendar has been hidden from the list. Optional. The attribute is only returned when the calendar is hidden, in which case the value is true.

        :param hidden: The hidden of this CalendarListEntry.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this CalendarListEntry.

        Identifier of the calendar.

        :return: The id of this CalendarListEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalendarListEntry.

        Identifier of the calendar.

        :param id: The id of this CalendarListEntry.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this CalendarListEntry.

        Type of the resource (\"calendar#calendarListEntry\").

        :return: The kind of this CalendarListEntry.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CalendarListEntry.

        Type of the resource (\"calendar#calendarListEntry\").

        :param kind: The kind of this CalendarListEntry.
        :type kind: str
        """

        self._kind = kind

    @property
    def location(self):
        """Gets the location of this CalendarListEntry.

        Geographic location of the calendar as free-form text. Optional. Read-only.

        :return: The location of this CalendarListEntry.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CalendarListEntry.

        Geographic location of the calendar as free-form text. Optional. Read-only.

        :param location: The location of this CalendarListEntry.
        :type location: str
        """

        self._location = location

    @property
    def notification_settings(self):
        """Gets the notification_settings of this CalendarListEntry.


        :return: The notification_settings of this CalendarListEntry.
        :rtype: CalendarListEntryNotificationSettings
        """
        return self._notification_settings

    @notification_settings.setter
    def notification_settings(self, notification_settings):
        """Sets the notification_settings of this CalendarListEntry.


        :param notification_settings: The notification_settings of this CalendarListEntry.
        :type notification_settings: CalendarListEntryNotificationSettings
        """

        self._notification_settings = notification_settings

    @property
    def primary(self):
        """Gets the primary of this CalendarListEntry.

        Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False.

        :return: The primary of this CalendarListEntry.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this CalendarListEntry.

        Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False.

        :param primary: The primary of this CalendarListEntry.
        :type primary: bool
        """

        self._primary = primary

    @property
    def selected(self):
        """Gets the selected of this CalendarListEntry.

        Whether the calendar content shows up in the calendar UI. Optional. The default is False.

        :return: The selected of this CalendarListEntry.
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this CalendarListEntry.

        Whether the calendar content shows up in the calendar UI. Optional. The default is False.

        :param selected: The selected of this CalendarListEntry.
        :type selected: bool
        """

        self._selected = selected

    @property
    def summary(self):
        """Gets the summary of this CalendarListEntry.

        Title of the calendar. Read-only.

        :return: The summary of this CalendarListEntry.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CalendarListEntry.

        Title of the calendar. Read-only.

        :param summary: The summary of this CalendarListEntry.
        :type summary: str
        """

        self._summary = summary

    @property
    def summary_override(self):
        """Gets the summary_override of this CalendarListEntry.

        The summary that the authenticated user has set for this calendar. Optional.

        :return: The summary_override of this CalendarListEntry.
        :rtype: str
        """
        return self._summary_override

    @summary_override.setter
    def summary_override(self, summary_override):
        """Sets the summary_override of this CalendarListEntry.

        The summary that the authenticated user has set for this calendar. Optional.

        :param summary_override: The summary_override of this CalendarListEntry.
        :type summary_override: str
        """

        self._summary_override = summary_override

    @property
    def time_zone(self):
        """Gets the time_zone of this CalendarListEntry.

        The time zone of the calendar. Optional. Read-only.

        :return: The time_zone of this CalendarListEntry.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this CalendarListEntry.

        The time zone of the calendar. Optional. Read-only.

        :param time_zone: The time_zone of this CalendarListEntry.
        :type time_zone: str
        """

        self._time_zone = time_zone
