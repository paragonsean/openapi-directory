# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventGadget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display: str=None, height: int=None, icon_link: str=None, link: str=None, preferences: Dict[str, str]=None, title: str=None, type: str=None, width: int=None):
        """EventGadget - a model defined in OpenAPI

        :param display: The display of this EventGadget.
        :param height: The height of this EventGadget.
        :param icon_link: The icon_link of this EventGadget.
        :param link: The link of this EventGadget.
        :param preferences: The preferences of this EventGadget.
        :param title: The title of this EventGadget.
        :param type: The type of this EventGadget.
        :param width: The width of this EventGadget.
        """
        self.openapi_types = {
            'display': str,
            'height': int,
            'icon_link': str,
            'link': str,
            'preferences': Dict[str, str],
            'title': str,
            'type': str,
            'width': int
        }

        self.attribute_map = {
            'display': 'display',
            'height': 'height',
            'icon_link': 'iconLink',
            'link': 'link',
            'preferences': 'preferences',
            'title': 'title',
            'type': 'type',
            'width': 'width'
        }

        self._display = display
        self._height = height
        self._icon_link = icon_link
        self._link = link
        self._preferences = preferences
        self._title = title
        self._type = type
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventGadget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event_gadget of this EventGadget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display(self):
        """Gets the display of this EventGadget.

        The gadget's display mode. Deprecated. Possible values are:   - \"icon\" - The gadget displays next to the event's title in the calendar view.  - \"chip\" - The gadget displays when the event is clicked.

        :return: The display of this EventGadget.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this EventGadget.

        The gadget's display mode. Deprecated. Possible values are:   - \"icon\" - The gadget displays next to the event's title in the calendar view.  - \"chip\" - The gadget displays when the event is clicked.

        :param display: The display of this EventGadget.
        :type display: str
        """

        self._display = display

    @property
    def height(self):
        """Gets the height of this EventGadget.

        The gadget's height in pixels. The height must be an integer greater than 0. Optional. Deprecated.

        :return: The height of this EventGadget.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this EventGadget.

        The gadget's height in pixels. The height must be an integer greater than 0. Optional. Deprecated.

        :param height: The height of this EventGadget.
        :type height: int
        """

        self._height = height

    @property
    def icon_link(self):
        """Gets the icon_link of this EventGadget.

        The gadget's icon URL. The URL scheme must be HTTPS. Deprecated.

        :return: The icon_link of this EventGadget.
        :rtype: str
        """
        return self._icon_link

    @icon_link.setter
    def icon_link(self, icon_link):
        """Sets the icon_link of this EventGadget.

        The gadget's icon URL. The URL scheme must be HTTPS. Deprecated.

        :param icon_link: The icon_link of this EventGadget.
        :type icon_link: str
        """

        self._icon_link = icon_link

    @property
    def link(self):
        """Gets the link of this EventGadget.

        The gadget's URL. The URL scheme must be HTTPS. Deprecated.

        :return: The link of this EventGadget.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this EventGadget.

        The gadget's URL. The URL scheme must be HTTPS. Deprecated.

        :param link: The link of this EventGadget.
        :type link: str
        """

        self._link = link

    @property
    def preferences(self):
        """Gets the preferences of this EventGadget.

        Preferences.

        :return: The preferences of this EventGadget.
        :rtype: Dict[str, str]
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this EventGadget.

        Preferences.

        :param preferences: The preferences of this EventGadget.
        :type preferences: Dict[str, str]
        """

        self._preferences = preferences

    @property
    def title(self):
        """Gets the title of this EventGadget.

        The gadget's title. Deprecated.

        :return: The title of this EventGadget.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EventGadget.

        The gadget's title. Deprecated.

        :param title: The title of this EventGadget.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this EventGadget.

        The gadget's type. Deprecated.

        :return: The type of this EventGadget.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventGadget.

        The gadget's type. Deprecated.

        :param type: The type of this EventGadget.
        :type type: str
        """

        self._type = type

    @property
    def width(self):
        """Gets the width of this EventGadget.

        The gadget's width in pixels. The width must be an integer greater than 0. Optional. Deprecated.

        :return: The width of this EventGadget.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this EventGadget.

        The gadget's width in pixels. The width must be an integer greater than 0. Optional. Deprecated.

        :param width: The width of this EventGadget.
        :type width: int
        """

        self._width = width
