# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_reminder import EventReminder
from openapi_server import util


class EventReminders(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, overrides: List[EventReminder]=None, use_default: bool=None):
        """EventReminders - a model defined in OpenAPI

        :param overrides: The overrides of this EventReminders.
        :param use_default: The use_default of this EventReminders.
        """
        self.openapi_types = {
            'overrides': List[EventReminder],
            'use_default': bool
        }

        self.attribute_map = {
            'overrides': 'overrides',
            'use_default': 'useDefault'
        }

        self._overrides = overrides
        self._use_default = use_default

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventReminders':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event_reminders of this EventReminders.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def overrides(self):
        """Gets the overrides of this EventReminders.

        If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.

        :return: The overrides of this EventReminders.
        :rtype: List[EventReminder]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this EventReminders.

        If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.

        :param overrides: The overrides of this EventReminders.
        :type overrides: List[EventReminder]
        """

        self._overrides = overrides

    @property
    def use_default(self):
        """Gets the use_default of this EventReminders.

        Whether the default reminders of the calendar apply to the event.

        :return: The use_default of this EventReminders.
        :rtype: bool
        """
        return self._use_default

    @use_default.setter
    def use_default(self, use_default):
        """Sets the use_default of this EventReminders.

        Whether the default reminders of the calendar apply to the event.

        :param use_default: The use_default of this EventReminders.
        :type use_default: bool
        """

        self._use_default = use_default
