# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server import util


class FreeBusyGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calendars: List[str]=None, errors: List[Error]=None):
        """FreeBusyGroup - a model defined in OpenAPI

        :param calendars: The calendars of this FreeBusyGroup.
        :param errors: The errors of this FreeBusyGroup.
        """
        self.openapi_types = {
            'calendars': List[str],
            'errors': List[Error]
        }

        self.attribute_map = {
            'calendars': 'calendars',
            'errors': 'errors'
        }

        self._calendars = calendars
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FreeBusyGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FreeBusyGroup of this FreeBusyGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calendars(self):
        """Gets the calendars of this FreeBusyGroup.

        List of calendars' identifiers within a group.

        :return: The calendars of this FreeBusyGroup.
        :rtype: List[str]
        """
        return self._calendars

    @calendars.setter
    def calendars(self, calendars):
        """Sets the calendars of this FreeBusyGroup.

        List of calendars' identifiers within a group.

        :param calendars: The calendars of this FreeBusyGroup.
        :type calendars: List[str]
        """

        self._calendars = calendars

    @property
    def errors(self):
        """Gets the errors of this FreeBusyGroup.

        Optional error(s) (if computation for the group failed).

        :return: The errors of this FreeBusyGroup.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this FreeBusyGroup.

        Optional error(s) (if computation for the group failed).

        :param errors: The errors of this FreeBusyGroup.
        :type errors: List[Error]
        """

        self._errors = errors
