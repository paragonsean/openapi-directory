# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventFocusTimeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_decline_mode: str=None, chat_status: str=None, decline_message: str=None):
        """EventFocusTimeProperties - a model defined in OpenAPI

        :param auto_decline_mode: The auto_decline_mode of this EventFocusTimeProperties.
        :param chat_status: The chat_status of this EventFocusTimeProperties.
        :param decline_message: The decline_message of this EventFocusTimeProperties.
        """
        self.openapi_types = {
            'auto_decline_mode': str,
            'chat_status': str,
            'decline_message': str
        }

        self.attribute_map = {
            'auto_decline_mode': 'autoDeclineMode',
            'chat_status': 'chatStatus',
            'decline_message': 'declineMessage'
        }

        self._auto_decline_mode = auto_decline_mode
        self._chat_status = chat_status
        self._decline_message = decline_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventFocusTimeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventFocusTimeProperties of this EventFocusTimeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_decline_mode(self):
        """Gets the auto_decline_mode of this EventFocusTimeProperties.

        Whether to decline meeting invitations which overlap Focus Time events. Valid values are declineNone, meaning that no meeting invitations are declined; declineAllConflictingInvitations, meaning that all conflicting meeting invitations that conflict with the event are declined; and declineOnlyNewConflictingInvitations, meaning that only new conflicting meeting invitations which arrive while the Focus Time event is present are to be declined.

        :return: The auto_decline_mode of this EventFocusTimeProperties.
        :rtype: str
        """
        return self._auto_decline_mode

    @auto_decline_mode.setter
    def auto_decline_mode(self, auto_decline_mode):
        """Sets the auto_decline_mode of this EventFocusTimeProperties.

        Whether to decline meeting invitations which overlap Focus Time events. Valid values are declineNone, meaning that no meeting invitations are declined; declineAllConflictingInvitations, meaning that all conflicting meeting invitations that conflict with the event are declined; and declineOnlyNewConflictingInvitations, meaning that only new conflicting meeting invitations which arrive while the Focus Time event is present are to be declined.

        :param auto_decline_mode: The auto_decline_mode of this EventFocusTimeProperties.
        :type auto_decline_mode: str
        """

        self._auto_decline_mode = auto_decline_mode

    @property
    def chat_status(self):
        """Gets the chat_status of this EventFocusTimeProperties.

        The status to mark the user in Chat and related products. This can be available or doNotDisturb.

        :return: The chat_status of this EventFocusTimeProperties.
        :rtype: str
        """
        return self._chat_status

    @chat_status.setter
    def chat_status(self, chat_status):
        """Sets the chat_status of this EventFocusTimeProperties.

        The status to mark the user in Chat and related products. This can be available or doNotDisturb.

        :param chat_status: The chat_status of this EventFocusTimeProperties.
        :type chat_status: str
        """

        self._chat_status = chat_status

    @property
    def decline_message(self):
        """Gets the decline_message of this EventFocusTimeProperties.

        Response message to set if an existing event or new invitation is automatically declined by Calendar.

        :return: The decline_message of this EventFocusTimeProperties.
        :rtype: str
        """
        return self._decline_message

    @decline_message.setter
    def decline_message(self, decline_message):
        """Sets the decline_message of this EventFocusTimeProperties.

        Response message to set if an existing event or new invitation is automatically declined by Calendar.

        :param decline_message: The decline_message of this EventFocusTimeProperties.
        :type decline_message: str
        """

        self._decline_message = decline_message
