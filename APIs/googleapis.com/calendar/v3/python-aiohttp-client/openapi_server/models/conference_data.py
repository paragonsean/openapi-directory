# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conference_parameters import ConferenceParameters
from openapi_server.models.conference_solution import ConferenceSolution
from openapi_server.models.create_conference_request import CreateConferenceRequest
from openapi_server.models.entry_point import EntryPoint
from openapi_server import util


class ConferenceData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conference_id: str=None, conference_solution: ConferenceSolution=None, create_request: CreateConferenceRequest=None, entry_points: List[EntryPoint]=None, notes: str=None, parameters: ConferenceParameters=None, signature: str=None):
        """ConferenceData - a model defined in OpenAPI

        :param conference_id: The conference_id of this ConferenceData.
        :param conference_solution: The conference_solution of this ConferenceData.
        :param create_request: The create_request of this ConferenceData.
        :param entry_points: The entry_points of this ConferenceData.
        :param notes: The notes of this ConferenceData.
        :param parameters: The parameters of this ConferenceData.
        :param signature: The signature of this ConferenceData.
        """
        self.openapi_types = {
            'conference_id': str,
            'conference_solution': ConferenceSolution,
            'create_request': CreateConferenceRequest,
            'entry_points': List[EntryPoint],
            'notes': str,
            'parameters': ConferenceParameters,
            'signature': str
        }

        self.attribute_map = {
            'conference_id': 'conferenceId',
            'conference_solution': 'conferenceSolution',
            'create_request': 'createRequest',
            'entry_points': 'entryPoints',
            'notes': 'notes',
            'parameters': 'parameters',
            'signature': 'signature'
        }

        self._conference_id = conference_id
        self._conference_solution = conference_solution
        self._create_request = create_request
        self._entry_points = entry_points
        self._notes = notes
        self._parameters = parameters
        self._signature = signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConferenceData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConferenceData of this ConferenceData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conference_id(self):
        """Gets the conference_id of this ConferenceData.

        The ID of the conference. Can be used by developers to keep track of conferences, should not be displayed to users. The ID value is formed differently for each conference solution type:   - eventHangout: ID is not set. (This conference type is deprecated.) - eventNamedHangout: ID is the name of the Hangout. (This conference type is deprecated.) - hangoutsMeet: ID is the 10-letter meeting code, for example aaa-bbbb-ccc. - addOn: ID is defined by the third-party provider.  Optional.

        :return: The conference_id of this ConferenceData.
        :rtype: str
        """
        return self._conference_id

    @conference_id.setter
    def conference_id(self, conference_id):
        """Sets the conference_id of this ConferenceData.

        The ID of the conference. Can be used by developers to keep track of conferences, should not be displayed to users. The ID value is formed differently for each conference solution type:   - eventHangout: ID is not set. (This conference type is deprecated.) - eventNamedHangout: ID is the name of the Hangout. (This conference type is deprecated.) - hangoutsMeet: ID is the 10-letter meeting code, for example aaa-bbbb-ccc. - addOn: ID is defined by the third-party provider.  Optional.

        :param conference_id: The conference_id of this ConferenceData.
        :type conference_id: str
        """

        self._conference_id = conference_id

    @property
    def conference_solution(self):
        """Gets the conference_solution of this ConferenceData.


        :return: The conference_solution of this ConferenceData.
        :rtype: ConferenceSolution
        """
        return self._conference_solution

    @conference_solution.setter
    def conference_solution(self, conference_solution):
        """Sets the conference_solution of this ConferenceData.


        :param conference_solution: The conference_solution of this ConferenceData.
        :type conference_solution: ConferenceSolution
        """

        self._conference_solution = conference_solution

    @property
    def create_request(self):
        """Gets the create_request of this ConferenceData.


        :return: The create_request of this ConferenceData.
        :rtype: CreateConferenceRequest
        """
        return self._create_request

    @create_request.setter
    def create_request(self, create_request):
        """Sets the create_request of this ConferenceData.


        :param create_request: The create_request of this ConferenceData.
        :type create_request: CreateConferenceRequest
        """

        self._create_request = create_request

    @property
    def entry_points(self):
        """Gets the entry_points of this ConferenceData.

        Information about individual conference entry points, such as URLs or phone numbers. All of them must belong to the same conference. Either conferenceSolution and at least one entryPoint, or createRequest is required.

        :return: The entry_points of this ConferenceData.
        :rtype: List[EntryPoint]
        """
        return self._entry_points

    @entry_points.setter
    def entry_points(self, entry_points):
        """Sets the entry_points of this ConferenceData.

        Information about individual conference entry points, such as URLs or phone numbers. All of them must belong to the same conference. Either conferenceSolution and at least one entryPoint, or createRequest is required.

        :param entry_points: The entry_points of this ConferenceData.
        :type entry_points: List[EntryPoint]
        """

        self._entry_points = entry_points

    @property
    def notes(self):
        """Gets the notes of this ConferenceData.

        Additional notes (such as instructions from the domain administrator, legal notices) to display to the user. Can contain HTML. The maximum length is 2048 characters. Optional.

        :return: The notes of this ConferenceData.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ConferenceData.

        Additional notes (such as instructions from the domain administrator, legal notices) to display to the user. Can contain HTML. The maximum length is 2048 characters. Optional.

        :param notes: The notes of this ConferenceData.
        :type notes: str
        """

        self._notes = notes

    @property
    def parameters(self):
        """Gets the parameters of this ConferenceData.


        :return: The parameters of this ConferenceData.
        :rtype: ConferenceParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ConferenceData.


        :param parameters: The parameters of this ConferenceData.
        :type parameters: ConferenceParameters
        """

        self._parameters = parameters

    @property
    def signature(self):
        """Gets the signature of this ConferenceData.

        The signature of the conference data. Generated on server side. Unset for a conference with a failed create request. Optional for a conference with a pending create request.

        :return: The signature of this ConferenceData.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ConferenceData.

        The signature of the conference data. Generated on server side. Unset for a conference with a failed create request. Optional for a conference with a pending create request.

        :param signature: The signature of this ConferenceData.
        :type signature: str
        """

        self._signature = signature
