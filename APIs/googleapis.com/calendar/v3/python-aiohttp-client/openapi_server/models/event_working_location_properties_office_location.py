# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventWorkingLocationPropertiesOfficeLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, building_id: str=None, desk_id: str=None, floor_id: str=None, floor_section_id: str=None, label: str=None):
        """EventWorkingLocationPropertiesOfficeLocation - a model defined in OpenAPI

        :param building_id: The building_id of this EventWorkingLocationPropertiesOfficeLocation.
        :param desk_id: The desk_id of this EventWorkingLocationPropertiesOfficeLocation.
        :param floor_id: The floor_id of this EventWorkingLocationPropertiesOfficeLocation.
        :param floor_section_id: The floor_section_id of this EventWorkingLocationPropertiesOfficeLocation.
        :param label: The label of this EventWorkingLocationPropertiesOfficeLocation.
        """
        self.openapi_types = {
            'building_id': str,
            'desk_id': str,
            'floor_id': str,
            'floor_section_id': str,
            'label': str
        }

        self.attribute_map = {
            'building_id': 'buildingId',
            'desk_id': 'deskId',
            'floor_id': 'floorId',
            'floor_section_id': 'floorSectionId',
            'label': 'label'
        }

        self._building_id = building_id
        self._desk_id = desk_id
        self._floor_id = floor_id
        self._floor_section_id = floor_section_id
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventWorkingLocationPropertiesOfficeLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventWorkingLocationProperties_officeLocation of this EventWorkingLocationPropertiesOfficeLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def building_id(self):
        """Gets the building_id of this EventWorkingLocationPropertiesOfficeLocation.

        An optional building identifier. This should reference a building ID in the organization's Resources database.

        :return: The building_id of this EventWorkingLocationPropertiesOfficeLocation.
        :rtype: str
        """
        return self._building_id

    @building_id.setter
    def building_id(self, building_id):
        """Sets the building_id of this EventWorkingLocationPropertiesOfficeLocation.

        An optional building identifier. This should reference a building ID in the organization's Resources database.

        :param building_id: The building_id of this EventWorkingLocationPropertiesOfficeLocation.
        :type building_id: str
        """

        self._building_id = building_id

    @property
    def desk_id(self):
        """Gets the desk_id of this EventWorkingLocationPropertiesOfficeLocation.

        An optional desk identifier.

        :return: The desk_id of this EventWorkingLocationPropertiesOfficeLocation.
        :rtype: str
        """
        return self._desk_id

    @desk_id.setter
    def desk_id(self, desk_id):
        """Sets the desk_id of this EventWorkingLocationPropertiesOfficeLocation.

        An optional desk identifier.

        :param desk_id: The desk_id of this EventWorkingLocationPropertiesOfficeLocation.
        :type desk_id: str
        """

        self._desk_id = desk_id

    @property
    def floor_id(self):
        """Gets the floor_id of this EventWorkingLocationPropertiesOfficeLocation.

        An optional floor identifier.

        :return: The floor_id of this EventWorkingLocationPropertiesOfficeLocation.
        :rtype: str
        """
        return self._floor_id

    @floor_id.setter
    def floor_id(self, floor_id):
        """Sets the floor_id of this EventWorkingLocationPropertiesOfficeLocation.

        An optional floor identifier.

        :param floor_id: The floor_id of this EventWorkingLocationPropertiesOfficeLocation.
        :type floor_id: str
        """

        self._floor_id = floor_id

    @property
    def floor_section_id(self):
        """Gets the floor_section_id of this EventWorkingLocationPropertiesOfficeLocation.

        An optional floor section identifier.

        :return: The floor_section_id of this EventWorkingLocationPropertiesOfficeLocation.
        :rtype: str
        """
        return self._floor_section_id

    @floor_section_id.setter
    def floor_section_id(self, floor_section_id):
        """Sets the floor_section_id of this EventWorkingLocationPropertiesOfficeLocation.

        An optional floor section identifier.

        :param floor_section_id: The floor_section_id of this EventWorkingLocationPropertiesOfficeLocation.
        :type floor_section_id: str
        """

        self._floor_section_id = floor_section_id

    @property
    def label(self):
        """Gets the label of this EventWorkingLocationPropertiesOfficeLocation.

        The office name that's displayed in Calendar Web and Mobile clients. We recommend you reference a building name in the organization's Resources database.

        :return: The label of this EventWorkingLocationPropertiesOfficeLocation.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EventWorkingLocationPropertiesOfficeLocation.

        The office name that's displayed in Calendar Web and Mobile clients. We recommend you reference a building name in the organization's Resources database.

        :param label: The label of this EventWorkingLocationPropertiesOfficeLocation.
        :type label: str
        """

        self._label = label
