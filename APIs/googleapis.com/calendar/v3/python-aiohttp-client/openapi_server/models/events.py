# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event import Event
from openapi_server.models.event_reminder import EventReminder
from openapi_server import util


class Events(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_role: str=None, default_reminders: List[EventReminder]=None, description: str=None, etag: str=None, items: List[Event]=None, kind: str='calendar#events', next_page_token: str=None, next_sync_token: str=None, summary: str=None, time_zone: str=None, updated: datetime=None):
        """Events - a model defined in OpenAPI

        :param access_role: The access_role of this Events.
        :param default_reminders: The default_reminders of this Events.
        :param description: The description of this Events.
        :param etag: The etag of this Events.
        :param items: The items of this Events.
        :param kind: The kind of this Events.
        :param next_page_token: The next_page_token of this Events.
        :param next_sync_token: The next_sync_token of this Events.
        :param summary: The summary of this Events.
        :param time_zone: The time_zone of this Events.
        :param updated: The updated of this Events.
        """
        self.openapi_types = {
            'access_role': str,
            'default_reminders': List[EventReminder],
            'description': str,
            'etag': str,
            'items': List[Event],
            'kind': str,
            'next_page_token': str,
            'next_sync_token': str,
            'summary': str,
            'time_zone': str,
            'updated': datetime
        }

        self.attribute_map = {
            'access_role': 'accessRole',
            'default_reminders': 'defaultReminders',
            'description': 'description',
            'etag': 'etag',
            'items': 'items',
            'kind': 'kind',
            'next_page_token': 'nextPageToken',
            'next_sync_token': 'nextSyncToken',
            'summary': 'summary',
            'time_zone': 'timeZone',
            'updated': 'updated'
        }

        self._access_role = access_role
        self._default_reminders = default_reminders
        self._description = description
        self._etag = etag
        self._items = items
        self._kind = kind
        self._next_page_token = next_page_token
        self._next_sync_token = next_sync_token
        self._summary = summary
        self._time_zone = time_zone
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Events':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Events of this Events.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_role(self):
        """Gets the access_role of this Events.

        The user's access role for this calendar. Read-only. Possible values are:   - \"none\" - The user has no access.  - \"freeBusyReader\" - The user has read access to free/busy information.  - \"reader\" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \"writer\" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \"owner\" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.

        :return: The access_role of this Events.
        :rtype: str
        """
        return self._access_role

    @access_role.setter
    def access_role(self, access_role):
        """Sets the access_role of this Events.

        The user's access role for this calendar. Read-only. Possible values are:   - \"none\" - The user has no access.  - \"freeBusyReader\" - The user has read access to free/busy information.  - \"reader\" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden.  - \"writer\" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible.  - \"owner\" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.

        :param access_role: The access_role of this Events.
        :type access_role: str
        """

        self._access_role = access_role

    @property
    def default_reminders(self):
        """Gets the default_reminders of this Events.

        The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True).

        :return: The default_reminders of this Events.
        :rtype: List[EventReminder]
        """
        return self._default_reminders

    @default_reminders.setter
    def default_reminders(self, default_reminders):
        """Sets the default_reminders of this Events.

        The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True).

        :param default_reminders: The default_reminders of this Events.
        :type default_reminders: List[EventReminder]
        """

        self._default_reminders = default_reminders

    @property
    def description(self):
        """Gets the description of this Events.

        Description of the calendar. Read-only.

        :return: The description of this Events.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Events.

        Description of the calendar. Read-only.

        :param description: The description of this Events.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this Events.

        ETag of the collection.

        :return: The etag of this Events.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Events.

        ETag of the collection.

        :param etag: The etag of this Events.
        :type etag: str
        """

        self._etag = etag

    @property
    def items(self):
        """Gets the items of this Events.

        List of events on the calendar.

        :return: The items of this Events.
        :rtype: List[Event]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Events.

        List of events on the calendar.

        :param items: The items of this Events.
        :type items: List[Event]
        """

        self._items = items

    @property
    def kind(self):
        """Gets the kind of this Events.

        Type of the collection (\"calendar#events\").

        :return: The kind of this Events.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Events.

        Type of the collection (\"calendar#events\").

        :param kind: The kind of this Events.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_page_token(self):
        """Gets the next_page_token of this Events.

        Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.

        :return: The next_page_token of this Events.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this Events.

        Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.

        :param next_page_token: The next_page_token of this Events.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def next_sync_token(self):
        """Gets the next_sync_token of this Events.

        Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.

        :return: The next_sync_token of this Events.
        :rtype: str
        """
        return self._next_sync_token

    @next_sync_token.setter
    def next_sync_token(self, next_sync_token):
        """Sets the next_sync_token of this Events.

        Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.

        :param next_sync_token: The next_sync_token of this Events.
        :type next_sync_token: str
        """

        self._next_sync_token = next_sync_token

    @property
    def summary(self):
        """Gets the summary of this Events.

        Title of the calendar. Read-only.

        :return: The summary of this Events.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Events.

        Title of the calendar. Read-only.

        :param summary: The summary of this Events.
        :type summary: str
        """

        self._summary = summary

    @property
    def time_zone(self):
        """Gets the time_zone of this Events.

        The time zone of the calendar. Read-only.

        :return: The time_zone of this Events.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Events.

        The time zone of the calendar. Read-only.

        :param time_zone: The time_zone of this Events.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def updated(self):
        """Gets the updated of this Events.

        Last modification time of the calendar (as a RFC3339 timestamp). Read-only.

        :return: The updated of this Events.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Events.

        Last modification time of the calendar (as a RFC3339 timestamp). Read-only.

        :param updated: The updated of this Events.
        :type updated: datetime
        """

        self._updated = updated
