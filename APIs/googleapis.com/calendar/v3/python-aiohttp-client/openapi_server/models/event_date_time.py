# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventDateTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: date=None, date_time: datetime=None, time_zone: str=None):
        """EventDateTime - a model defined in OpenAPI

        :param _date: The _date of this EventDateTime.
        :param date_time: The date_time of this EventDateTime.
        :param time_zone: The time_zone of this EventDateTime.
        """
        self.openapi_types = {
            '_date': date,
            'date_time': datetime,
            'time_zone': str
        }

        self.attribute_map = {
            '_date': 'date',
            'date_time': 'dateTime',
            'time_zone': 'timeZone'
        }

        self.__date = _date
        self._date_time = date_time
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventDateTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventDateTime of this EventDateTime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this EventDateTime.

        The date, in the format \"yyyy-mm-dd\", if this is an all-day event.

        :return: The _date of this EventDateTime.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EventDateTime.

        The date, in the format \"yyyy-mm-dd\", if this is an all-day event.

        :param _date: The _date of this EventDateTime.
        :type _date: date
        """

        self.__date = _date

    @property
    def date_time(self):
        """Gets the date_time of this EventDateTime.

        The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.

        :return: The date_time of this EventDateTime.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this EventDateTime.

        The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.

        :param date_time: The date_time of this EventDateTime.
        :type date_time: datetime
        """

        self._date_time = date_time

    @property
    def time_zone(self):
        """Gets the time_zone of this EventDateTime.

        The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.

        :return: The time_zone of this EventDateTime.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this EventDateTime.

        The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end.

        :param time_zone: The time_zone of this EventDateTime.
        :type time_zone: str
        """

        self._time_zone = time_zone
