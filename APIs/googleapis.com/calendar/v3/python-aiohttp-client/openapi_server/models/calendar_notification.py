# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CalendarNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, type: str=None):
        """CalendarNotification - a model defined in OpenAPI

        :param method: The method of this CalendarNotification.
        :param type: The type of this CalendarNotification.
        """
        self.openapi_types = {
            'method': str,
            'type': str
        }

        self.attribute_map = {
            'method': 'method',
            'type': 'type'
        }

        self._method = method
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalendarNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalendarNotification of this CalendarNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this CalendarNotification.

        The method used to deliver the notification. The possible value is:   - \"email\" - Notifications are sent via email.   Required when adding a notification.

        :return: The method of this CalendarNotification.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this CalendarNotification.

        The method used to deliver the notification. The possible value is:   - \"email\" - Notifications are sent via email.   Required when adding a notification.

        :param method: The method of this CalendarNotification.
        :type method: str
        """

        self._method = method

    @property
    def type(self):
        """Gets the type of this CalendarNotification.

        The type of notification. Possible values are:   - \"eventCreation\" - Notification sent when a new event is put on the calendar.  - \"eventChange\" - Notification sent when an event is changed.  - \"eventCancellation\" - Notification sent when an event is cancelled.  - \"eventResponse\" - Notification sent when an attendee responds to the event invitation.  - \"agenda\" - An agenda with the events of the day (sent out in the morning).   Required when adding a notification.

        :return: The type of this CalendarNotification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CalendarNotification.

        The type of notification. Possible values are:   - \"eventCreation\" - Notification sent when a new event is put on the calendar.  - \"eventChange\" - Notification sent when an event is changed.  - \"eventCancellation\" - Notification sent when an event is cancelled.  - \"eventResponse\" - Notification sent when an attendee responds to the event invitation.  - \"agenda\" - An agenda with the events of the day (sent out in the morning).   Required when adding a notification.

        :param type: The type of this CalendarNotification.
        :type type: str
        """

        self._type = type
