# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_working_location_properties_custom_location import EventWorkingLocationPropertiesCustomLocation
from openapi_server.models.event_working_location_properties_office_location import EventWorkingLocationPropertiesOfficeLocation
from openapi_server import util


class EventWorkingLocationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_location: EventWorkingLocationPropertiesCustomLocation=None, home_office: object=None, office_location: EventWorkingLocationPropertiesOfficeLocation=None, type: str=None):
        """EventWorkingLocationProperties - a model defined in OpenAPI

        :param custom_location: The custom_location of this EventWorkingLocationProperties.
        :param home_office: The home_office of this EventWorkingLocationProperties.
        :param office_location: The office_location of this EventWorkingLocationProperties.
        :param type: The type of this EventWorkingLocationProperties.
        """
        self.openapi_types = {
            'custom_location': EventWorkingLocationPropertiesCustomLocation,
            'home_office': object,
            'office_location': EventWorkingLocationPropertiesOfficeLocation,
            'type': str
        }

        self.attribute_map = {
            'custom_location': 'customLocation',
            'home_office': 'homeOffice',
            'office_location': 'officeLocation',
            'type': 'type'
        }

        self._custom_location = custom_location
        self._home_office = home_office
        self._office_location = office_location
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventWorkingLocationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventWorkingLocationProperties of this EventWorkingLocationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_location(self):
        """Gets the custom_location of this EventWorkingLocationProperties.


        :return: The custom_location of this EventWorkingLocationProperties.
        :rtype: EventWorkingLocationPropertiesCustomLocation
        """
        return self._custom_location

    @custom_location.setter
    def custom_location(self, custom_location):
        """Sets the custom_location of this EventWorkingLocationProperties.


        :param custom_location: The custom_location of this EventWorkingLocationProperties.
        :type custom_location: EventWorkingLocationPropertiesCustomLocation
        """

        self._custom_location = custom_location

    @property
    def home_office(self):
        """Gets the home_office of this EventWorkingLocationProperties.

        If present, specifies that the user is working at home.

        :return: The home_office of this EventWorkingLocationProperties.
        :rtype: object
        """
        return self._home_office

    @home_office.setter
    def home_office(self, home_office):
        """Sets the home_office of this EventWorkingLocationProperties.

        If present, specifies that the user is working at home.

        :param home_office: The home_office of this EventWorkingLocationProperties.
        :type home_office: object
        """

        self._home_office = home_office

    @property
    def office_location(self):
        """Gets the office_location of this EventWorkingLocationProperties.


        :return: The office_location of this EventWorkingLocationProperties.
        :rtype: EventWorkingLocationPropertiesOfficeLocation
        """
        return self._office_location

    @office_location.setter
    def office_location(self, office_location):
        """Sets the office_location of this EventWorkingLocationProperties.


        :param office_location: The office_location of this EventWorkingLocationProperties.
        :type office_location: EventWorkingLocationPropertiesOfficeLocation
        """

        self._office_location = office_location

    @property
    def type(self):
        """Gets the type of this EventWorkingLocationProperties.

        Type of the working location. Possible values are:   - \"homeOffice\" - The user is working at home.  - \"officeLocation\" - The user is working from an office.  - \"customLocation\" - The user is working from a custom location.  Any details are specified in a sub-field of the specified name, but this field may be missing if empty. Any other fields are ignored. Required when adding working location properties.

        :return: The type of this EventWorkingLocationProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventWorkingLocationProperties.

        Type of the working location. Possible values are:   - \"homeOffice\" - The user is working at home.  - \"officeLocation\" - The user is working from an office.  - \"customLocation\" - The user is working from a custom location.  Any details are specified in a sub-field of the specified name, but this field may be missing if empty. Any other fields are ignored. Required when adding working location properties.

        :param type: The type of this EventWorkingLocationProperties.
        :type type: str
        """

        self._type = type
