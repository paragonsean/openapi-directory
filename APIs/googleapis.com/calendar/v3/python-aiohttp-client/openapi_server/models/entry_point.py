# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntryPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_code: str=None, entry_point_features: List[str]=None, entry_point_type: str=None, label: str=None, meeting_code: str=None, passcode: str=None, password: str=None, pin: str=None, region_code: str=None, uri: str=None):
        """EntryPoint - a model defined in OpenAPI

        :param access_code: The access_code of this EntryPoint.
        :param entry_point_features: The entry_point_features of this EntryPoint.
        :param entry_point_type: The entry_point_type of this EntryPoint.
        :param label: The label of this EntryPoint.
        :param meeting_code: The meeting_code of this EntryPoint.
        :param passcode: The passcode of this EntryPoint.
        :param password: The password of this EntryPoint.
        :param pin: The pin of this EntryPoint.
        :param region_code: The region_code of this EntryPoint.
        :param uri: The uri of this EntryPoint.
        """
        self.openapi_types = {
            'access_code': str,
            'entry_point_features': List[str],
            'entry_point_type': str,
            'label': str,
            'meeting_code': str,
            'passcode': str,
            'password': str,
            'pin': str,
            'region_code': str,
            'uri': str
        }

        self.attribute_map = {
            'access_code': 'accessCode',
            'entry_point_features': 'entryPointFeatures',
            'entry_point_type': 'entryPointType',
            'label': 'label',
            'meeting_code': 'meetingCode',
            'passcode': 'passcode',
            'password': 'password',
            'pin': 'pin',
            'region_code': 'regionCode',
            'uri': 'uri'
        }

        self._access_code = access_code
        self._entry_point_features = entry_point_features
        self._entry_point_type = entry_point_type
        self._label = label
        self._meeting_code = meeting_code
        self._passcode = passcode
        self._password = password
        self._pin = pin
        self._region_code = region_code
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntryPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntryPoint of this EntryPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_code(self):
        """Gets the access_code of this EntryPoint.

        The access code to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.

        :return: The access_code of this EntryPoint.
        :rtype: str
        """
        return self._access_code

    @access_code.setter
    def access_code(self, access_code):
        """Sets the access_code of this EntryPoint.

        The access code to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.

        :param access_code: The access_code of this EntryPoint.
        :type access_code: str
        """

        self._access_code = access_code

    @property
    def entry_point_features(self):
        """Gets the entry_point_features of this EntryPoint.

        Features of the entry point, such as being toll or toll-free. One entry point can have multiple features. However, toll and toll-free cannot be both set on the same entry point.

        :return: The entry_point_features of this EntryPoint.
        :rtype: List[str]
        """
        return self._entry_point_features

    @entry_point_features.setter
    def entry_point_features(self, entry_point_features):
        """Sets the entry_point_features of this EntryPoint.

        Features of the entry point, such as being toll or toll-free. One entry point can have multiple features. However, toll and toll-free cannot be both set on the same entry point.

        :param entry_point_features: The entry_point_features of this EntryPoint.
        :type entry_point_features: List[str]
        """

        self._entry_point_features = entry_point_features

    @property
    def entry_point_type(self):
        """Gets the entry_point_type of this EntryPoint.

        The type of the conference entry point. Possible values are:   - \"video\" - joining a conference over HTTP. A conference can have zero or one video entry point. - \"phone\" - joining a conference by dialing a phone number. A conference can have zero or more phone entry points. - \"sip\" - joining a conference over SIP. A conference can have zero or one sip entry point. - \"more\" - further conference joining instructions, for example additional phone numbers. A conference can have zero or one more entry point. A conference with only a more entry point is not a valid conference.

        :return: The entry_point_type of this EntryPoint.
        :rtype: str
        """
        return self._entry_point_type

    @entry_point_type.setter
    def entry_point_type(self, entry_point_type):
        """Sets the entry_point_type of this EntryPoint.

        The type of the conference entry point. Possible values are:   - \"video\" - joining a conference over HTTP. A conference can have zero or one video entry point. - \"phone\" - joining a conference by dialing a phone number. A conference can have zero or more phone entry points. - \"sip\" - joining a conference over SIP. A conference can have zero or one sip entry point. - \"more\" - further conference joining instructions, for example additional phone numbers. A conference can have zero or one more entry point. A conference with only a more entry point is not a valid conference.

        :param entry_point_type: The entry_point_type of this EntryPoint.
        :type entry_point_type: str
        """

        self._entry_point_type = entry_point_type

    @property
    def label(self):
        """Gets the label of this EntryPoint.

        The label for the URI. Visible to end users. Not localized. The maximum length is 512 characters. Examples:   - for video: meet.google.com/aaa-bbbb-ccc - for phone: +1 123 268 2601 - for sip: 12345678@altostrat.com - for more: should not be filled   Optional.

        :return: The label of this EntryPoint.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EntryPoint.

        The label for the URI. Visible to end users. Not localized. The maximum length is 512 characters. Examples:   - for video: meet.google.com/aaa-bbbb-ccc - for phone: +1 123 268 2601 - for sip: 12345678@altostrat.com - for more: should not be filled   Optional.

        :param label: The label of this EntryPoint.
        :type label: str
        """

        self._label = label

    @property
    def meeting_code(self):
        """Gets the meeting_code of this EntryPoint.

        The meeting code to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.

        :return: The meeting_code of this EntryPoint.
        :rtype: str
        """
        return self._meeting_code

    @meeting_code.setter
    def meeting_code(self, meeting_code):
        """Sets the meeting_code of this EntryPoint.

        The meeting code to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.

        :param meeting_code: The meeting_code of this EntryPoint.
        :type meeting_code: str
        """

        self._meeting_code = meeting_code

    @property
    def passcode(self):
        """Gets the passcode of this EntryPoint.

        The passcode to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.

        :return: The passcode of this EntryPoint.
        :rtype: str
        """
        return self._passcode

    @passcode.setter
    def passcode(self, passcode):
        """Sets the passcode of this EntryPoint.

        The passcode to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.

        :param passcode: The passcode of this EntryPoint.
        :type passcode: str
        """

        self._passcode = passcode

    @property
    def password(self):
        """Gets the password of this EntryPoint.

        The password to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.

        :return: The password of this EntryPoint.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EntryPoint.

        The password to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.

        :param password: The password of this EntryPoint.
        :type password: str
        """

        self._password = password

    @property
    def pin(self):
        """Gets the pin of this EntryPoint.

        The PIN to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.

        :return: The pin of this EntryPoint.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this EntryPoint.

        The PIN to access the conference. The maximum length is 128 characters. When creating new conference data, populate only the subset of {meetingCode, accessCode, passcode, password, pin} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. Optional.

        :param pin: The pin of this EntryPoint.
        :type pin: str
        """

        self._pin = pin

    @property
    def region_code(self):
        """Gets the region_code of this EntryPoint.

        The CLDR/ISO 3166 region code for the country associated with this phone access. Example: \"SE\" for Sweden. Calendar backend will populate this field only for EntryPointType.PHONE.

        :return: The region_code of this EntryPoint.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this EntryPoint.

        The CLDR/ISO 3166 region code for the country associated with this phone access. Example: \"SE\" for Sweden. Calendar backend will populate this field only for EntryPointType.PHONE.

        :param region_code: The region_code of this EntryPoint.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def uri(self):
        """Gets the uri of this EntryPoint.

        The URI of the entry point. The maximum length is 1300 characters. Format:   - for video, http: or https: schema is required. - for phone, tel: schema is required. The URI should include the entire dial sequence (e.g., tel:+12345678900,,,123456789;1234). - for sip, sip: schema is required, e.g., sip:12345678@myprovider.com. - for more, http: or https: schema is required.

        :return: The uri of this EntryPoint.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this EntryPoint.

        The URI of the entry point. The maximum length is 1300 characters. Format:   - for video, http: or https: schema is required. - for phone, tel: schema is required. The URI should include the entire dial sequence (e.g., tel:+12345678900,,,123456789;1234). - for sip, sip: schema is required, e.g., sip:12345678@myprovider.com. - for more, http: or https: schema is required.

        :param uri: The uri of this EntryPoint.
        :type uri: str
        """

        self._uri = uri
