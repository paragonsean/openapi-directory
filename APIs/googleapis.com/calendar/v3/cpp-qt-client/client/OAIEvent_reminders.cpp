/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_reminders.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_reminders::OAIEvent_reminders(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_reminders::OAIEvent_reminders() {
    this->initializeModel();
}

OAIEvent_reminders::~OAIEvent_reminders() {}

void OAIEvent_reminders::initializeModel() {

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_use_default_isSet = false;
    m_use_default_isValid = false;
}

void OAIEvent_reminders::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_reminders::fromJsonObject(QJsonObject json) {

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("overrides")]);
    m_overrides_isSet = !json[QString("overrides")].isNull() && m_overrides_isValid;

    m_use_default_isValid = ::OpenAPI::fromJsonValue(m_use_default, json[QString("useDefault")]);
    m_use_default_isSet = !json[QString("useDefault")].isNull() && m_use_default_isValid;
}

QString OAIEvent_reminders::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_reminders::asJsonObject() const {
    QJsonObject obj;
    if (m_overrides.size() > 0) {
        obj.insert(QString("overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_use_default_isSet) {
        obj.insert(QString("useDefault"), ::OpenAPI::toJsonValue(m_use_default));
    }
    return obj;
}

QList<OAIEventReminder> OAIEvent_reminders::getOverrides() const {
    return m_overrides;
}
void OAIEvent_reminders::setOverrides(const QList<OAIEventReminder> &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIEvent_reminders::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIEvent_reminders::is_overrides_Valid() const{
    return m_overrides_isValid;
}

bool OAIEvent_reminders::isUseDefault() const {
    return m_use_default;
}
void OAIEvent_reminders::setUseDefault(const bool &use_default) {
    m_use_default = use_default;
    m_use_default_isSet = true;
}

bool OAIEvent_reminders::is_use_default_Set() const{
    return m_use_default_isSet;
}

bool OAIEvent_reminders::is_use_default_Valid() const{
    return m_use_default_isValid;
}

bool OAIEvent_reminders::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_default_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_reminders::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
