/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventAttachment::OAIEventAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventAttachment::OAIEventAttachment() {
    this->initializeModel();
}

OAIEventAttachment::~OAIEventAttachment() {}

void OAIEventAttachment::initializeModel() {

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_file_url_isSet = false;
    m_file_url_isValid = false;

    m_icon_link_isSet = false;
    m_icon_link_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIEventAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventAttachment::fromJsonObject(QJsonObject json) {

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("fileId")]);
    m_file_id_isSet = !json[QString("fileId")].isNull() && m_file_id_isValid;

    m_file_url_isValid = ::OpenAPI::fromJsonValue(m_file_url, json[QString("fileUrl")]);
    m_file_url_isSet = !json[QString("fileUrl")].isNull() && m_file_url_isValid;

    m_icon_link_isValid = ::OpenAPI::fromJsonValue(m_icon_link, json[QString("iconLink")]);
    m_icon_link_isSet = !json[QString("iconLink")].isNull() && m_icon_link_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIEventAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_file_id_isSet) {
        obj.insert(QString("fileId"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_file_url_isSet) {
        obj.insert(QString("fileUrl"), ::OpenAPI::toJsonValue(m_file_url));
    }
    if (m_icon_link_isSet) {
        obj.insert(QString("iconLink"), ::OpenAPI::toJsonValue(m_icon_link));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIEventAttachment::getFileId() const {
    return m_file_id;
}
void OAIEventAttachment::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIEventAttachment::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIEventAttachment::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAIEventAttachment::getFileUrl() const {
    return m_file_url;
}
void OAIEventAttachment::setFileUrl(const QString &file_url) {
    m_file_url = file_url;
    m_file_url_isSet = true;
}

bool OAIEventAttachment::is_file_url_Set() const{
    return m_file_url_isSet;
}

bool OAIEventAttachment::is_file_url_Valid() const{
    return m_file_url_isValid;
}

QString OAIEventAttachment::getIconLink() const {
    return m_icon_link;
}
void OAIEventAttachment::setIconLink(const QString &icon_link) {
    m_icon_link = icon_link;
    m_icon_link_isSet = true;
}

bool OAIEventAttachment::is_icon_link_Set() const{
    return m_icon_link_isSet;
}

bool OAIEventAttachment::is_icon_link_Valid() const{
    return m_icon_link_isValid;
}

QString OAIEventAttachment::getMimeType() const {
    return m_mime_type;
}
void OAIEventAttachment::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIEventAttachment::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIEventAttachment::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIEventAttachment::getTitle() const {
    return m_title;
}
void OAIEventAttachment::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEventAttachment::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEventAttachment::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIEventAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
