/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventWorkingLocationProperties_officeLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventWorkingLocationProperties_officeLocation::OAIEventWorkingLocationProperties_officeLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventWorkingLocationProperties_officeLocation::OAIEventWorkingLocationProperties_officeLocation() {
    this->initializeModel();
}

OAIEventWorkingLocationProperties_officeLocation::~OAIEventWorkingLocationProperties_officeLocation() {}

void OAIEventWorkingLocationProperties_officeLocation::initializeModel() {

    m_building_id_isSet = false;
    m_building_id_isValid = false;

    m_desk_id_isSet = false;
    m_desk_id_isValid = false;

    m_floor_id_isSet = false;
    m_floor_id_isValid = false;

    m_floor_section_id_isSet = false;
    m_floor_section_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAIEventWorkingLocationProperties_officeLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventWorkingLocationProperties_officeLocation::fromJsonObject(QJsonObject json) {

    m_building_id_isValid = ::OpenAPI::fromJsonValue(m_building_id, json[QString("buildingId")]);
    m_building_id_isSet = !json[QString("buildingId")].isNull() && m_building_id_isValid;

    m_desk_id_isValid = ::OpenAPI::fromJsonValue(m_desk_id, json[QString("deskId")]);
    m_desk_id_isSet = !json[QString("deskId")].isNull() && m_desk_id_isValid;

    m_floor_id_isValid = ::OpenAPI::fromJsonValue(m_floor_id, json[QString("floorId")]);
    m_floor_id_isSet = !json[QString("floorId")].isNull() && m_floor_id_isValid;

    m_floor_section_id_isValid = ::OpenAPI::fromJsonValue(m_floor_section_id, json[QString("floorSectionId")]);
    m_floor_section_id_isSet = !json[QString("floorSectionId")].isNull() && m_floor_section_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAIEventWorkingLocationProperties_officeLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventWorkingLocationProperties_officeLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_building_id_isSet) {
        obj.insert(QString("buildingId"), ::OpenAPI::toJsonValue(m_building_id));
    }
    if (m_desk_id_isSet) {
        obj.insert(QString("deskId"), ::OpenAPI::toJsonValue(m_desk_id));
    }
    if (m_floor_id_isSet) {
        obj.insert(QString("floorId"), ::OpenAPI::toJsonValue(m_floor_id));
    }
    if (m_floor_section_id_isSet) {
        obj.insert(QString("floorSectionId"), ::OpenAPI::toJsonValue(m_floor_section_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

QString OAIEventWorkingLocationProperties_officeLocation::getBuildingId() const {
    return m_building_id;
}
void OAIEventWorkingLocationProperties_officeLocation::setBuildingId(const QString &building_id) {
    m_building_id = building_id;
    m_building_id_isSet = true;
}

bool OAIEventWorkingLocationProperties_officeLocation::is_building_id_Set() const{
    return m_building_id_isSet;
}

bool OAIEventWorkingLocationProperties_officeLocation::is_building_id_Valid() const{
    return m_building_id_isValid;
}

QString OAIEventWorkingLocationProperties_officeLocation::getDeskId() const {
    return m_desk_id;
}
void OAIEventWorkingLocationProperties_officeLocation::setDeskId(const QString &desk_id) {
    m_desk_id = desk_id;
    m_desk_id_isSet = true;
}

bool OAIEventWorkingLocationProperties_officeLocation::is_desk_id_Set() const{
    return m_desk_id_isSet;
}

bool OAIEventWorkingLocationProperties_officeLocation::is_desk_id_Valid() const{
    return m_desk_id_isValid;
}

QString OAIEventWorkingLocationProperties_officeLocation::getFloorId() const {
    return m_floor_id;
}
void OAIEventWorkingLocationProperties_officeLocation::setFloorId(const QString &floor_id) {
    m_floor_id = floor_id;
    m_floor_id_isSet = true;
}

bool OAIEventWorkingLocationProperties_officeLocation::is_floor_id_Set() const{
    return m_floor_id_isSet;
}

bool OAIEventWorkingLocationProperties_officeLocation::is_floor_id_Valid() const{
    return m_floor_id_isValid;
}

QString OAIEventWorkingLocationProperties_officeLocation::getFloorSectionId() const {
    return m_floor_section_id;
}
void OAIEventWorkingLocationProperties_officeLocation::setFloorSectionId(const QString &floor_section_id) {
    m_floor_section_id = floor_section_id;
    m_floor_section_id_isSet = true;
}

bool OAIEventWorkingLocationProperties_officeLocation::is_floor_section_id_Set() const{
    return m_floor_section_id_isSet;
}

bool OAIEventWorkingLocationProperties_officeLocation::is_floor_section_id_Valid() const{
    return m_floor_section_id_isValid;
}

QString OAIEventWorkingLocationProperties_officeLocation::getLabel() const {
    return m_label;
}
void OAIEventWorkingLocationProperties_officeLocation::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIEventWorkingLocationProperties_officeLocation::is_label_Set() const{
    return m_label_isSet;
}

bool OAIEventWorkingLocationProperties_officeLocation::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIEventWorkingLocationProperties_officeLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_building_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floor_section_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventWorkingLocationProperties_officeLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
