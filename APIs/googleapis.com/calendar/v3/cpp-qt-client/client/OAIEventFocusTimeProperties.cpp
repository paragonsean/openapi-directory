/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventFocusTimeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventFocusTimeProperties::OAIEventFocusTimeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventFocusTimeProperties::OAIEventFocusTimeProperties() {
    this->initializeModel();
}

OAIEventFocusTimeProperties::~OAIEventFocusTimeProperties() {}

void OAIEventFocusTimeProperties::initializeModel() {

    m_auto_decline_mode_isSet = false;
    m_auto_decline_mode_isValid = false;

    m_chat_status_isSet = false;
    m_chat_status_isValid = false;

    m_decline_message_isSet = false;
    m_decline_message_isValid = false;
}

void OAIEventFocusTimeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventFocusTimeProperties::fromJsonObject(QJsonObject json) {

    m_auto_decline_mode_isValid = ::OpenAPI::fromJsonValue(m_auto_decline_mode, json[QString("autoDeclineMode")]);
    m_auto_decline_mode_isSet = !json[QString("autoDeclineMode")].isNull() && m_auto_decline_mode_isValid;

    m_chat_status_isValid = ::OpenAPI::fromJsonValue(m_chat_status, json[QString("chatStatus")]);
    m_chat_status_isSet = !json[QString("chatStatus")].isNull() && m_chat_status_isValid;

    m_decline_message_isValid = ::OpenAPI::fromJsonValue(m_decline_message, json[QString("declineMessage")]);
    m_decline_message_isSet = !json[QString("declineMessage")].isNull() && m_decline_message_isValid;
}

QString OAIEventFocusTimeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventFocusTimeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_decline_mode_isSet) {
        obj.insert(QString("autoDeclineMode"), ::OpenAPI::toJsonValue(m_auto_decline_mode));
    }
    if (m_chat_status_isSet) {
        obj.insert(QString("chatStatus"), ::OpenAPI::toJsonValue(m_chat_status));
    }
    if (m_decline_message_isSet) {
        obj.insert(QString("declineMessage"), ::OpenAPI::toJsonValue(m_decline_message));
    }
    return obj;
}

QString OAIEventFocusTimeProperties::getAutoDeclineMode() const {
    return m_auto_decline_mode;
}
void OAIEventFocusTimeProperties::setAutoDeclineMode(const QString &auto_decline_mode) {
    m_auto_decline_mode = auto_decline_mode;
    m_auto_decline_mode_isSet = true;
}

bool OAIEventFocusTimeProperties::is_auto_decline_mode_Set() const{
    return m_auto_decline_mode_isSet;
}

bool OAIEventFocusTimeProperties::is_auto_decline_mode_Valid() const{
    return m_auto_decline_mode_isValid;
}

QString OAIEventFocusTimeProperties::getChatStatus() const {
    return m_chat_status;
}
void OAIEventFocusTimeProperties::setChatStatus(const QString &chat_status) {
    m_chat_status = chat_status;
    m_chat_status_isSet = true;
}

bool OAIEventFocusTimeProperties::is_chat_status_Set() const{
    return m_chat_status_isSet;
}

bool OAIEventFocusTimeProperties::is_chat_status_Valid() const{
    return m_chat_status_isValid;
}

QString OAIEventFocusTimeProperties::getDeclineMessage() const {
    return m_decline_message;
}
void OAIEventFocusTimeProperties::setDeclineMessage(const QString &decline_message) {
    m_decline_message = decline_message;
    m_decline_message_isSet = true;
}

bool OAIEventFocusTimeProperties::is_decline_message_Set() const{
    return m_decline_message_isSet;
}

bool OAIEventFocusTimeProperties::is_decline_message_Valid() const{
    return m_decline_message_isValid;
}

bool OAIEventFocusTimeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_decline_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chat_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decline_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventFocusTimeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
