/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvents.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvents::OAIEvents(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvents::OAIEvents() {
    this->initializeModel();
}

OAIEvents::~OAIEvents() {}

void OAIEvents::initializeModel() {

    m_access_role_isSet = false;
    m_access_role_isValid = false;

    m_default_reminders_isSet = false;
    m_default_reminders_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_next_sync_token_isSet = false;
    m_next_sync_token_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIEvents::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvents::fromJsonObject(QJsonObject json) {

    m_access_role_isValid = ::OpenAPI::fromJsonValue(m_access_role, json[QString("accessRole")]);
    m_access_role_isSet = !json[QString("accessRole")].isNull() && m_access_role_isValid;

    m_default_reminders_isValid = ::OpenAPI::fromJsonValue(m_default_reminders, json[QString("defaultReminders")]);
    m_default_reminders_isSet = !json[QString("defaultReminders")].isNull() && m_default_reminders_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_next_sync_token_isValid = ::OpenAPI::fromJsonValue(m_next_sync_token, json[QString("nextSyncToken")]);
    m_next_sync_token_isSet = !json[QString("nextSyncToken")].isNull() && m_next_sync_token_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIEvents::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvents::asJsonObject() const {
    QJsonObject obj;
    if (m_access_role_isSet) {
        obj.insert(QString("accessRole"), ::OpenAPI::toJsonValue(m_access_role));
    }
    if (m_default_reminders.size() > 0) {
        obj.insert(QString("defaultReminders"), ::OpenAPI::toJsonValue(m_default_reminders));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_next_sync_token_isSet) {
        obj.insert(QString("nextSyncToken"), ::OpenAPI::toJsonValue(m_next_sync_token));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QString OAIEvents::getAccessRole() const {
    return m_access_role;
}
void OAIEvents::setAccessRole(const QString &access_role) {
    m_access_role = access_role;
    m_access_role_isSet = true;
}

bool OAIEvents::is_access_role_Set() const{
    return m_access_role_isSet;
}

bool OAIEvents::is_access_role_Valid() const{
    return m_access_role_isValid;
}

QList<OAIEventReminder> OAIEvents::getDefaultReminders() const {
    return m_default_reminders;
}
void OAIEvents::setDefaultReminders(const QList<OAIEventReminder> &default_reminders) {
    m_default_reminders = default_reminders;
    m_default_reminders_isSet = true;
}

bool OAIEvents::is_default_reminders_Set() const{
    return m_default_reminders_isSet;
}

bool OAIEvents::is_default_reminders_Valid() const{
    return m_default_reminders_isValid;
}

QString OAIEvents::getDescription() const {
    return m_description;
}
void OAIEvents::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEvents::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEvents::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEvents::getEtag() const {
    return m_etag;
}
void OAIEvents::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIEvents::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIEvents::is_etag_Valid() const{
    return m_etag_isValid;
}

QList<OAIEvent> OAIEvents::getItems() const {
    return m_items;
}
void OAIEvents::setItems(const QList<OAIEvent> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIEvents::is_items_Set() const{
    return m_items_isSet;
}

bool OAIEvents::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIEvents::getKind() const {
    return m_kind;
}
void OAIEvents::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIEvents::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIEvents::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIEvents::getNextPageToken() const {
    return m_next_page_token;
}
void OAIEvents::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIEvents::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIEvents::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QString OAIEvents::getNextSyncToken() const {
    return m_next_sync_token;
}
void OAIEvents::setNextSyncToken(const QString &next_sync_token) {
    m_next_sync_token = next_sync_token;
    m_next_sync_token_isSet = true;
}

bool OAIEvents::is_next_sync_token_Set() const{
    return m_next_sync_token_isSet;
}

bool OAIEvents::is_next_sync_token_Valid() const{
    return m_next_sync_token_isValid;
}

QString OAIEvents::getSummary() const {
    return m_summary;
}
void OAIEvents::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIEvents::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIEvents::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIEvents::getTimeZone() const {
    return m_time_zone;
}
void OAIEvents::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIEvents::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIEvents::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QDateTime OAIEvents::getUpdated() const {
    return m_updated;
}
void OAIEvents::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIEvents::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIEvents::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIEvents::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_reminders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_sync_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvents::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
