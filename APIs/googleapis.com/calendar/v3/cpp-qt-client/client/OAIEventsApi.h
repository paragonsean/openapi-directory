/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventsApi_H
#define OAI_OAIEventsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChannel.h"
#include "OAIEvent.h"
#include "OAIEvents.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventsApi : public QObject {
    Q_OBJECT

public:
    OAIEventsApi(const int timeOut = 0);
    ~OAIEventsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  send_notifications bool [optional]
    * @param[in]  send_updates QString [optional]
    */
    virtual void calendar_events_delete(const QString &calendar_id, const QString &event_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &send_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &send_updates = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  always_include_email bool [optional]
    * @param[in]  max_attendees qint32 [optional]
    * @param[in]  time_zone QString [optional]
    */
    virtual void calendar_events_get(const QString &calendar_id, const QString &event_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &always_include_email = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_attendees = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  conference_data_version qint32 [optional]
    * @param[in]  supports_attachments bool [optional]
    * @param[in]  oai_event OAIEvent [optional]
    */
    virtual void calendar_events_import(const QString &calendar_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &conference_data_version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &supports_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIEvent> &oai_event = ::OpenAPI::OptionalParam<OAIEvent>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  conference_data_version qint32 [optional]
    * @param[in]  max_attendees qint32 [optional]
    * @param[in]  send_notifications bool [optional]
    * @param[in]  send_updates QString [optional]
    * @param[in]  supports_attachments bool [optional]
    * @param[in]  oai_event OAIEvent [optional]
    */
    virtual void calendar_events_insert(const QString &calendar_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &conference_data_version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_attendees = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &send_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &send_updates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &supports_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIEvent> &oai_event = ::OpenAPI::OptionalParam<OAIEvent>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  always_include_email bool [optional]
    * @param[in]  max_attendees qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  original_start QString [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  show_deleted bool [optional]
    * @param[in]  time_max QString [optional]
    * @param[in]  time_min QString [optional]
    * @param[in]  time_zone QString [optional]
    */
    virtual void calendar_events_instances(const QString &calendar_id, const QString &event_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &always_include_email = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_attendees = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &original_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  always_include_email bool [optional]
    * @param[in]  event_types QList<QString> [optional]
    * @param[in]  i_cal_uid QString [optional]
    * @param[in]  max_attendees qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  private_extended_property QList<QString> [optional]
    * @param[in]  q QString [optional]
    * @param[in]  shared_extended_property QList<QString> [optional]
    * @param[in]  show_deleted bool [optional]
    * @param[in]  show_hidden_invitations bool [optional]
    * @param[in]  single_events bool [optional]
    * @param[in]  sync_token QString [optional]
    * @param[in]  time_max QString [optional]
    * @param[in]  time_min QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  updated_min QString [optional]
    */
    virtual void calendar_events_list(const QString &calendar_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &always_include_email = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &i_cal_uid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_attendees = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &private_extended_property = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &shared_extended_property = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &show_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden_invitations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &single_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sync_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated_min = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  destination QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  send_notifications bool [optional]
    * @param[in]  send_updates QString [optional]
    */
    virtual void calendar_events_move(const QString &calendar_id, const QString &event_id, const QString &destination, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &send_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &send_updates = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  always_include_email bool [optional]
    * @param[in]  conference_data_version qint32 [optional]
    * @param[in]  max_attendees qint32 [optional]
    * @param[in]  send_notifications bool [optional]
    * @param[in]  send_updates QString [optional]
    * @param[in]  supports_attachments bool [optional]
    * @param[in]  oai_event OAIEvent [optional]
    */
    virtual void calendar_events_patch(const QString &calendar_id, const QString &event_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &always_include_email = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &conference_data_version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_attendees = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &send_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &send_updates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &supports_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIEvent> &oai_event = ::OpenAPI::OptionalParam<OAIEvent>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  text QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  send_notifications bool [optional]
    * @param[in]  send_updates QString [optional]
    */
    virtual void calendar_events_quickAdd(const QString &calendar_id, const QString &text, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &send_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &send_updates = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  always_include_email bool [optional]
    * @param[in]  conference_data_version qint32 [optional]
    * @param[in]  max_attendees qint32 [optional]
    * @param[in]  send_notifications bool [optional]
    * @param[in]  send_updates QString [optional]
    * @param[in]  supports_attachments bool [optional]
    * @param[in]  oai_event OAIEvent [optional]
    */
    virtual void calendar_events_update(const QString &calendar_id, const QString &event_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &always_include_email = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &conference_data_version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_attendees = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &send_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &send_updates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &supports_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIEvent> &oai_event = ::OpenAPI::OptionalParam<OAIEvent>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  always_include_email bool [optional]
    * @param[in]  event_types QList<QString> [optional]
    * @param[in]  i_cal_uid QString [optional]
    * @param[in]  max_attendees qint32 [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  private_extended_property QList<QString> [optional]
    * @param[in]  q QString [optional]
    * @param[in]  shared_extended_property QList<QString> [optional]
    * @param[in]  show_deleted bool [optional]
    * @param[in]  show_hidden_invitations bool [optional]
    * @param[in]  single_events bool [optional]
    * @param[in]  sync_token QString [optional]
    * @param[in]  time_max QString [optional]
    * @param[in]  time_min QString [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  updated_min QString [optional]
    * @param[in]  oai_channel OAIChannel [optional]
    */
    virtual void calendar_events_watch(const QString &calendar_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &always_include_email = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &i_cal_uid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_attendees = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &private_extended_property = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &shared_extended_property = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &show_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden_invitations = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &single_events = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sync_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated_min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIChannel> &oai_channel = ::OpenAPI::OptionalParam<OAIChannel>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void calendar_events_deleteCallback(OAIHttpRequestWorker *worker);
    void calendar_events_getCallback(OAIHttpRequestWorker *worker);
    void calendar_events_importCallback(OAIHttpRequestWorker *worker);
    void calendar_events_insertCallback(OAIHttpRequestWorker *worker);
    void calendar_events_instancesCallback(OAIHttpRequestWorker *worker);
    void calendar_events_listCallback(OAIHttpRequestWorker *worker);
    void calendar_events_moveCallback(OAIHttpRequestWorker *worker);
    void calendar_events_patchCallback(OAIHttpRequestWorker *worker);
    void calendar_events_quickAddCallback(OAIHttpRequestWorker *worker);
    void calendar_events_updateCallback(OAIHttpRequestWorker *worker);
    void calendar_events_watchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void calendar_events_deleteSignal();
    void calendar_events_getSignal(OAIEvent summary);
    void calendar_events_importSignal(OAIEvent summary);
    void calendar_events_insertSignal(OAIEvent summary);
    void calendar_events_instancesSignal(OAIEvents summary);
    void calendar_events_listSignal(OAIEvents summary);
    void calendar_events_moveSignal(OAIEvent summary);
    void calendar_events_patchSignal(OAIEvent summary);
    void calendar_events_quickAddSignal(OAIEvent summary);
    void calendar_events_updateSignal(OAIEvent summary);
    void calendar_events_watchSignal(OAIChannel summary);


    void calendar_events_deleteSignalFull(OAIHttpRequestWorker *worker);
    void calendar_events_getSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void calendar_events_importSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void calendar_events_insertSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void calendar_events_instancesSignalFull(OAIHttpRequestWorker *worker, OAIEvents summary);
    void calendar_events_listSignalFull(OAIHttpRequestWorker *worker, OAIEvents summary);
    void calendar_events_moveSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void calendar_events_patchSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void calendar_events_quickAddSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void calendar_events_updateSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void calendar_events_watchSignalFull(OAIHttpRequestWorker *worker, OAIChannel summary);

    Q_DECL_DEPRECATED_X("Use calendar_events_deleteSignalError() instead")
    void calendar_events_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_getSignalError() instead")
    void calendar_events_getSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_getSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_importSignalError() instead")
    void calendar_events_importSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_importSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_insertSignalError() instead")
    void calendar_events_insertSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_insertSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_instancesSignalError() instead")
    void calendar_events_instancesSignalE(OAIEvents summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_instancesSignalError(OAIEvents summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_listSignalError() instead")
    void calendar_events_listSignalE(OAIEvents summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_listSignalError(OAIEvents summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_moveSignalError() instead")
    void calendar_events_moveSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_moveSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_patchSignalError() instead")
    void calendar_events_patchSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_patchSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_quickAddSignalError() instead")
    void calendar_events_quickAddSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_quickAddSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_updateSignalError() instead")
    void calendar_events_updateSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_updateSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_watchSignalError() instead")
    void calendar_events_watchSignalE(OAIChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_watchSignalError(OAIChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use calendar_events_deleteSignalErrorFull() instead")
    void calendar_events_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_getSignalErrorFull() instead")
    void calendar_events_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_importSignalErrorFull() instead")
    void calendar_events_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_insertSignalErrorFull() instead")
    void calendar_events_insertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_insertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_instancesSignalErrorFull() instead")
    void calendar_events_instancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_instancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_listSignalErrorFull() instead")
    void calendar_events_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_moveSignalErrorFull() instead")
    void calendar_events_moveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_moveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_patchSignalErrorFull() instead")
    void calendar_events_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_quickAddSignalErrorFull() instead")
    void calendar_events_quickAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_quickAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_updateSignalErrorFull() instead")
    void calendar_events_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_events_watchSignalErrorFull() instead")
    void calendar_events_watchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_events_watchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
