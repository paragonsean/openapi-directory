/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventWorkingLocationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventWorkingLocationProperties::OAIEventWorkingLocationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventWorkingLocationProperties::OAIEventWorkingLocationProperties() {
    this->initializeModel();
}

OAIEventWorkingLocationProperties::~OAIEventWorkingLocationProperties() {}

void OAIEventWorkingLocationProperties::initializeModel() {

    m_custom_location_isSet = false;
    m_custom_location_isValid = false;

    m_home_office_isSet = false;
    m_home_office_isValid = false;

    m_office_location_isSet = false;
    m_office_location_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEventWorkingLocationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventWorkingLocationProperties::fromJsonObject(QJsonObject json) {

    m_custom_location_isValid = ::OpenAPI::fromJsonValue(m_custom_location, json[QString("customLocation")]);
    m_custom_location_isSet = !json[QString("customLocation")].isNull() && m_custom_location_isValid;

    m_home_office_isValid = ::OpenAPI::fromJsonValue(m_home_office, json[QString("homeOffice")]);
    m_home_office_isSet = !json[QString("homeOffice")].isNull() && m_home_office_isValid;

    m_office_location_isValid = ::OpenAPI::fromJsonValue(m_office_location, json[QString("officeLocation")]);
    m_office_location_isSet = !json[QString("officeLocation")].isNull() && m_office_location_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEventWorkingLocationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventWorkingLocationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_location.isSet()) {
        obj.insert(QString("customLocation"), ::OpenAPI::toJsonValue(m_custom_location));
    }
    if (m_home_office_isSet) {
        obj.insert(QString("homeOffice"), ::OpenAPI::toJsonValue(m_home_office));
    }
    if (m_office_location.isSet()) {
        obj.insert(QString("officeLocation"), ::OpenAPI::toJsonValue(m_office_location));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIEventWorkingLocationProperties_customLocation OAIEventWorkingLocationProperties::getCustomLocation() const {
    return m_custom_location;
}
void OAIEventWorkingLocationProperties::setCustomLocation(const OAIEventWorkingLocationProperties_customLocation &custom_location) {
    m_custom_location = custom_location;
    m_custom_location_isSet = true;
}

bool OAIEventWorkingLocationProperties::is_custom_location_Set() const{
    return m_custom_location_isSet;
}

bool OAIEventWorkingLocationProperties::is_custom_location_Valid() const{
    return m_custom_location_isValid;
}

QJsonValue OAIEventWorkingLocationProperties::getHomeOffice() const {
    return m_home_office;
}
void OAIEventWorkingLocationProperties::setHomeOffice(const QJsonValue &home_office) {
    m_home_office = home_office;
    m_home_office_isSet = true;
}

bool OAIEventWorkingLocationProperties::is_home_office_Set() const{
    return m_home_office_isSet;
}

bool OAIEventWorkingLocationProperties::is_home_office_Valid() const{
    return m_home_office_isValid;
}

OAIEventWorkingLocationProperties_officeLocation OAIEventWorkingLocationProperties::getOfficeLocation() const {
    return m_office_location;
}
void OAIEventWorkingLocationProperties::setOfficeLocation(const OAIEventWorkingLocationProperties_officeLocation &office_location) {
    m_office_location = office_location;
    m_office_location_isSet = true;
}

bool OAIEventWorkingLocationProperties::is_office_location_Set() const{
    return m_office_location_isSet;
}

bool OAIEventWorkingLocationProperties::is_office_location_Valid() const{
    return m_office_location_isValid;
}

QString OAIEventWorkingLocationProperties::getType() const {
    return m_type;
}
void OAIEventWorkingLocationProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventWorkingLocationProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventWorkingLocationProperties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEventWorkingLocationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventWorkingLocationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
