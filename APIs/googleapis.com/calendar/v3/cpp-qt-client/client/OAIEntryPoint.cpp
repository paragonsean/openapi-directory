/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntryPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntryPoint::OAIEntryPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntryPoint::OAIEntryPoint() {
    this->initializeModel();
}

OAIEntryPoint::~OAIEntryPoint() {}

void OAIEntryPoint::initializeModel() {

    m_access_code_isSet = false;
    m_access_code_isValid = false;

    m_entry_point_features_isSet = false;
    m_entry_point_features_isValid = false;

    m_entry_point_type_isSet = false;
    m_entry_point_type_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_meeting_code_isSet = false;
    m_meeting_code_isValid = false;

    m_passcode_isSet = false;
    m_passcode_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_pin_isSet = false;
    m_pin_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIEntryPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntryPoint::fromJsonObject(QJsonObject json) {

    m_access_code_isValid = ::OpenAPI::fromJsonValue(m_access_code, json[QString("accessCode")]);
    m_access_code_isSet = !json[QString("accessCode")].isNull() && m_access_code_isValid;

    m_entry_point_features_isValid = ::OpenAPI::fromJsonValue(m_entry_point_features, json[QString("entryPointFeatures")]);
    m_entry_point_features_isSet = !json[QString("entryPointFeatures")].isNull() && m_entry_point_features_isValid;

    m_entry_point_type_isValid = ::OpenAPI::fromJsonValue(m_entry_point_type, json[QString("entryPointType")]);
    m_entry_point_type_isSet = !json[QString("entryPointType")].isNull() && m_entry_point_type_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_meeting_code_isValid = ::OpenAPI::fromJsonValue(m_meeting_code, json[QString("meetingCode")]);
    m_meeting_code_isSet = !json[QString("meetingCode")].isNull() && m_meeting_code_isValid;

    m_passcode_isValid = ::OpenAPI::fromJsonValue(m_passcode, json[QString("passcode")]);
    m_passcode_isSet = !json[QString("passcode")].isNull() && m_passcode_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_pin_isValid = ::OpenAPI::fromJsonValue(m_pin, json[QString("pin")]);
    m_pin_isSet = !json[QString("pin")].isNull() && m_pin_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIEntryPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntryPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_access_code_isSet) {
        obj.insert(QString("accessCode"), ::OpenAPI::toJsonValue(m_access_code));
    }
    if (m_entry_point_features.size() > 0) {
        obj.insert(QString("entryPointFeatures"), ::OpenAPI::toJsonValue(m_entry_point_features));
    }
    if (m_entry_point_type_isSet) {
        obj.insert(QString("entryPointType"), ::OpenAPI::toJsonValue(m_entry_point_type));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_meeting_code_isSet) {
        obj.insert(QString("meetingCode"), ::OpenAPI::toJsonValue(m_meeting_code));
    }
    if (m_passcode_isSet) {
        obj.insert(QString("passcode"), ::OpenAPI::toJsonValue(m_passcode));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_pin_isSet) {
        obj.insert(QString("pin"), ::OpenAPI::toJsonValue(m_pin));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIEntryPoint::getAccessCode() const {
    return m_access_code;
}
void OAIEntryPoint::setAccessCode(const QString &access_code) {
    m_access_code = access_code;
    m_access_code_isSet = true;
}

bool OAIEntryPoint::is_access_code_Set() const{
    return m_access_code_isSet;
}

bool OAIEntryPoint::is_access_code_Valid() const{
    return m_access_code_isValid;
}

QList<QString> OAIEntryPoint::getEntryPointFeatures() const {
    return m_entry_point_features;
}
void OAIEntryPoint::setEntryPointFeatures(const QList<QString> &entry_point_features) {
    m_entry_point_features = entry_point_features;
    m_entry_point_features_isSet = true;
}

bool OAIEntryPoint::is_entry_point_features_Set() const{
    return m_entry_point_features_isSet;
}

bool OAIEntryPoint::is_entry_point_features_Valid() const{
    return m_entry_point_features_isValid;
}

QString OAIEntryPoint::getEntryPointType() const {
    return m_entry_point_type;
}
void OAIEntryPoint::setEntryPointType(const QString &entry_point_type) {
    m_entry_point_type = entry_point_type;
    m_entry_point_type_isSet = true;
}

bool OAIEntryPoint::is_entry_point_type_Set() const{
    return m_entry_point_type_isSet;
}

bool OAIEntryPoint::is_entry_point_type_Valid() const{
    return m_entry_point_type_isValid;
}

QString OAIEntryPoint::getLabel() const {
    return m_label;
}
void OAIEntryPoint::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIEntryPoint::is_label_Set() const{
    return m_label_isSet;
}

bool OAIEntryPoint::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIEntryPoint::getMeetingCode() const {
    return m_meeting_code;
}
void OAIEntryPoint::setMeetingCode(const QString &meeting_code) {
    m_meeting_code = meeting_code;
    m_meeting_code_isSet = true;
}

bool OAIEntryPoint::is_meeting_code_Set() const{
    return m_meeting_code_isSet;
}

bool OAIEntryPoint::is_meeting_code_Valid() const{
    return m_meeting_code_isValid;
}

QString OAIEntryPoint::getPasscode() const {
    return m_passcode;
}
void OAIEntryPoint::setPasscode(const QString &passcode) {
    m_passcode = passcode;
    m_passcode_isSet = true;
}

bool OAIEntryPoint::is_passcode_Set() const{
    return m_passcode_isSet;
}

bool OAIEntryPoint::is_passcode_Valid() const{
    return m_passcode_isValid;
}

QString OAIEntryPoint::getPassword() const {
    return m_password;
}
void OAIEntryPoint::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIEntryPoint::is_password_Set() const{
    return m_password_isSet;
}

bool OAIEntryPoint::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIEntryPoint::getPin() const {
    return m_pin;
}
void OAIEntryPoint::setPin(const QString &pin) {
    m_pin = pin;
    m_pin_isSet = true;
}

bool OAIEntryPoint::is_pin_Set() const{
    return m_pin_isSet;
}

bool OAIEntryPoint::is_pin_Valid() const{
    return m_pin_isValid;
}

QString OAIEntryPoint::getRegionCode() const {
    return m_region_code;
}
void OAIEntryPoint::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIEntryPoint::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIEntryPoint::is_region_code_Valid() const{
    return m_region_code_isValid;
}

QString OAIEntryPoint::getUri() const {
    return m_uri;
}
void OAIEntryPoint::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIEntryPoint::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIEntryPoint::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIEntryPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_point_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_point_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntryPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
