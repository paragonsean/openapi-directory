/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICalendarListApi_H
#define OAI_OAICalendarListApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICalendarList.h"
#include "OAICalendarListEntry.h"
#include "OAIChannel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICalendarListApi : public QObject {
    Q_OBJECT

public:
    OAICalendarListApi(const int timeOut = 0);
    ~OAICalendarListApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void calendar_calendarList_delete(const QString &calendar_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void calendar_calendarList_get(const QString &calendar_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  color_rgb_format bool [optional]
    * @param[in]  oai_calendar_list_entry OAICalendarListEntry [optional]
    */
    virtual void calendar_calendarList_insert(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &color_rgb_format = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAICalendarListEntry> &oai_calendar_list_entry = ::OpenAPI::OptionalParam<OAICalendarListEntry>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  min_access_role QString [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  show_deleted bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  sync_token QString [optional]
    */
    virtual void calendar_calendarList_list(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &min_access_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sync_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  color_rgb_format bool [optional]
    * @param[in]  oai_calendar_list_entry OAICalendarListEntry [optional]
    */
    virtual void calendar_calendarList_patch(const QString &calendar_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &color_rgb_format = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAICalendarListEntry> &oai_calendar_list_entry = ::OpenAPI::OptionalParam<OAICalendarListEntry>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  color_rgb_format bool [optional]
    * @param[in]  oai_calendar_list_entry OAICalendarListEntry [optional]
    */
    virtual void calendar_calendarList_update(const QString &calendar_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &color_rgb_format = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAICalendarListEntry> &oai_calendar_list_entry = ::OpenAPI::OptionalParam<OAICalendarListEntry>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  min_access_role QString [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  show_deleted bool [optional]
    * @param[in]  show_hidden bool [optional]
    * @param[in]  sync_token QString [optional]
    * @param[in]  oai_channel OAIChannel [optional]
    */
    virtual void calendar_calendarList_watch(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &min_access_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_hidden = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sync_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIChannel> &oai_channel = ::OpenAPI::OptionalParam<OAIChannel>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void calendar_calendarList_deleteCallback(OAIHttpRequestWorker *worker);
    void calendar_calendarList_getCallback(OAIHttpRequestWorker *worker);
    void calendar_calendarList_insertCallback(OAIHttpRequestWorker *worker);
    void calendar_calendarList_listCallback(OAIHttpRequestWorker *worker);
    void calendar_calendarList_patchCallback(OAIHttpRequestWorker *worker);
    void calendar_calendarList_updateCallback(OAIHttpRequestWorker *worker);
    void calendar_calendarList_watchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void calendar_calendarList_deleteSignal();
    void calendar_calendarList_getSignal(OAICalendarListEntry summary);
    void calendar_calendarList_insertSignal(OAICalendarListEntry summary);
    void calendar_calendarList_listSignal(OAICalendarList summary);
    void calendar_calendarList_patchSignal(OAICalendarListEntry summary);
    void calendar_calendarList_updateSignal(OAICalendarListEntry summary);
    void calendar_calendarList_watchSignal(OAIChannel summary);


    void calendar_calendarList_deleteSignalFull(OAIHttpRequestWorker *worker);
    void calendar_calendarList_getSignalFull(OAIHttpRequestWorker *worker, OAICalendarListEntry summary);
    void calendar_calendarList_insertSignalFull(OAIHttpRequestWorker *worker, OAICalendarListEntry summary);
    void calendar_calendarList_listSignalFull(OAIHttpRequestWorker *worker, OAICalendarList summary);
    void calendar_calendarList_patchSignalFull(OAIHttpRequestWorker *worker, OAICalendarListEntry summary);
    void calendar_calendarList_updateSignalFull(OAIHttpRequestWorker *worker, OAICalendarListEntry summary);
    void calendar_calendarList_watchSignalFull(OAIHttpRequestWorker *worker, OAIChannel summary);

    Q_DECL_DEPRECATED_X("Use calendar_calendarList_deleteSignalError() instead")
    void calendar_calendarList_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_calendarList_getSignalError() instead")
    void calendar_calendarList_getSignalE(OAICalendarListEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_getSignalError(OAICalendarListEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_calendarList_insertSignalError() instead")
    void calendar_calendarList_insertSignalE(OAICalendarListEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_insertSignalError(OAICalendarListEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_calendarList_listSignalError() instead")
    void calendar_calendarList_listSignalE(OAICalendarList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_listSignalError(OAICalendarList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_calendarList_patchSignalError() instead")
    void calendar_calendarList_patchSignalE(OAICalendarListEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_patchSignalError(OAICalendarListEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_calendarList_updateSignalError() instead")
    void calendar_calendarList_updateSignalE(OAICalendarListEntry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_updateSignalError(OAICalendarListEntry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_calendarList_watchSignalError() instead")
    void calendar_calendarList_watchSignalE(OAIChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_watchSignalError(OAIChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use calendar_calendarList_deleteSignalErrorFull() instead")
    void calendar_calendarList_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_calendarList_getSignalErrorFull() instead")
    void calendar_calendarList_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_calendarList_insertSignalErrorFull() instead")
    void calendar_calendarList_insertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_insertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_calendarList_listSignalErrorFull() instead")
    void calendar_calendarList_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_calendarList_patchSignalErrorFull() instead")
    void calendar_calendarList_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_calendarList_updateSignalErrorFull() instead")
    void calendar_calendarList_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_calendarList_watchSignalErrorFull() instead")
    void calendar_calendarList_watchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_calendarList_watchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
