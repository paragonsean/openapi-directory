/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_anyone_can_add_self_isSet = false;
    m_anyone_can_add_self_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_attendees_isSet = false;
    m_attendees_isValid = false;

    m_attendees_omitted_isSet = false;
    m_attendees_omitted_isValid = false;

    m_color_id_isSet = false;
    m_color_id_isValid = false;

    m_conference_data_isSet = false;
    m_conference_data_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_end_time_unspecified_isSet = false;
    m_end_time_unspecified_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_extended_properties_isSet = false;
    m_extended_properties_isValid = false;

    m_focus_time_properties_isSet = false;
    m_focus_time_properties_isValid = false;

    m_gadget_isSet = false;
    m_gadget_isValid = false;

    m_guests_can_invite_others_isSet = false;
    m_guests_can_invite_others_isValid = false;

    m_guests_can_modify_isSet = false;
    m_guests_can_modify_isValid = false;

    m_guests_can_see_other_guests_isSet = false;
    m_guests_can_see_other_guests_isValid = false;

    m_hangout_link_isSet = false;
    m_hangout_link_isValid = false;

    m_html_link_isSet = false;
    m_html_link_isValid = false;

    m_i_cal_uid_isSet = false;
    m_i_cal_uid_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_organizer_isSet = false;
    m_organizer_isValid = false;

    m_original_start_time_isSet = false;
    m_original_start_time_isValid = false;

    m_out_of_office_properties_isSet = false;
    m_out_of_office_properties_isValid = false;

    m_private_copy_isSet = false;
    m_private_copy_isValid = false;

    m_recurrence_isSet = false;
    m_recurrence_isValid = false;

    m_recurring_event_id_isSet = false;
    m_recurring_event_id_isValid = false;

    m_reminders_isSet = false;
    m_reminders_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_transparency_isSet = false;
    m_transparency_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_working_location_properties_isSet = false;
    m_working_location_properties_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_anyone_can_add_self_isValid = ::OpenAPI::fromJsonValue(m_anyone_can_add_self, json[QString("anyoneCanAddSelf")]);
    m_anyone_can_add_self_isSet = !json[QString("anyoneCanAddSelf")].isNull() && m_anyone_can_add_self_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_attendees_isValid = ::OpenAPI::fromJsonValue(m_attendees, json[QString("attendees")]);
    m_attendees_isSet = !json[QString("attendees")].isNull() && m_attendees_isValid;

    m_attendees_omitted_isValid = ::OpenAPI::fromJsonValue(m_attendees_omitted, json[QString("attendeesOmitted")]);
    m_attendees_omitted_isSet = !json[QString("attendeesOmitted")].isNull() && m_attendees_omitted_isValid;

    m_color_id_isValid = ::OpenAPI::fromJsonValue(m_color_id, json[QString("colorId")]);
    m_color_id_isSet = !json[QString("colorId")].isNull() && m_color_id_isValid;

    m_conference_data_isValid = ::OpenAPI::fromJsonValue(m_conference_data, json[QString("conferenceData")]);
    m_conference_data_isSet = !json[QString("conferenceData")].isNull() && m_conference_data_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_end_time_unspecified_isValid = ::OpenAPI::fromJsonValue(m_end_time_unspecified, json[QString("endTimeUnspecified")]);
    m_end_time_unspecified_isSet = !json[QString("endTimeUnspecified")].isNull() && m_end_time_unspecified_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_extended_properties_isValid = ::OpenAPI::fromJsonValue(m_extended_properties, json[QString("extendedProperties")]);
    m_extended_properties_isSet = !json[QString("extendedProperties")].isNull() && m_extended_properties_isValid;

    m_focus_time_properties_isValid = ::OpenAPI::fromJsonValue(m_focus_time_properties, json[QString("focusTimeProperties")]);
    m_focus_time_properties_isSet = !json[QString("focusTimeProperties")].isNull() && m_focus_time_properties_isValid;

    m_gadget_isValid = ::OpenAPI::fromJsonValue(m_gadget, json[QString("gadget")]);
    m_gadget_isSet = !json[QString("gadget")].isNull() && m_gadget_isValid;

    m_guests_can_invite_others_isValid = ::OpenAPI::fromJsonValue(m_guests_can_invite_others, json[QString("guestsCanInviteOthers")]);
    m_guests_can_invite_others_isSet = !json[QString("guestsCanInviteOthers")].isNull() && m_guests_can_invite_others_isValid;

    m_guests_can_modify_isValid = ::OpenAPI::fromJsonValue(m_guests_can_modify, json[QString("guestsCanModify")]);
    m_guests_can_modify_isSet = !json[QString("guestsCanModify")].isNull() && m_guests_can_modify_isValid;

    m_guests_can_see_other_guests_isValid = ::OpenAPI::fromJsonValue(m_guests_can_see_other_guests, json[QString("guestsCanSeeOtherGuests")]);
    m_guests_can_see_other_guests_isSet = !json[QString("guestsCanSeeOtherGuests")].isNull() && m_guests_can_see_other_guests_isValid;

    m_hangout_link_isValid = ::OpenAPI::fromJsonValue(m_hangout_link, json[QString("hangoutLink")]);
    m_hangout_link_isSet = !json[QString("hangoutLink")].isNull() && m_hangout_link_isValid;

    m_html_link_isValid = ::OpenAPI::fromJsonValue(m_html_link, json[QString("htmlLink")]);
    m_html_link_isSet = !json[QString("htmlLink")].isNull() && m_html_link_isValid;

    m_i_cal_uid_isValid = ::OpenAPI::fromJsonValue(m_i_cal_uid, json[QString("iCalUID")]);
    m_i_cal_uid_isSet = !json[QString("iCalUID")].isNull() && m_i_cal_uid_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_organizer_isValid = ::OpenAPI::fromJsonValue(m_organizer, json[QString("organizer")]);
    m_organizer_isSet = !json[QString("organizer")].isNull() && m_organizer_isValid;

    m_original_start_time_isValid = ::OpenAPI::fromJsonValue(m_original_start_time, json[QString("originalStartTime")]);
    m_original_start_time_isSet = !json[QString("originalStartTime")].isNull() && m_original_start_time_isValid;

    m_out_of_office_properties_isValid = ::OpenAPI::fromJsonValue(m_out_of_office_properties, json[QString("outOfOfficeProperties")]);
    m_out_of_office_properties_isSet = !json[QString("outOfOfficeProperties")].isNull() && m_out_of_office_properties_isValid;

    m_private_copy_isValid = ::OpenAPI::fromJsonValue(m_private_copy, json[QString("privateCopy")]);
    m_private_copy_isSet = !json[QString("privateCopy")].isNull() && m_private_copy_isValid;

    m_recurrence_isValid = ::OpenAPI::fromJsonValue(m_recurrence, json[QString("recurrence")]);
    m_recurrence_isSet = !json[QString("recurrence")].isNull() && m_recurrence_isValid;

    m_recurring_event_id_isValid = ::OpenAPI::fromJsonValue(m_recurring_event_id, json[QString("recurringEventId")]);
    m_recurring_event_id_isSet = !json[QString("recurringEventId")].isNull() && m_recurring_event_id_isValid;

    m_reminders_isValid = ::OpenAPI::fromJsonValue(m_reminders, json[QString("reminders")]);
    m_reminders_isSet = !json[QString("reminders")].isNull() && m_reminders_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_transparency_isValid = ::OpenAPI::fromJsonValue(m_transparency, json[QString("transparency")]);
    m_transparency_isSet = !json[QString("transparency")].isNull() && m_transparency_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;

    m_working_location_properties_isValid = ::OpenAPI::fromJsonValue(m_working_location_properties, json[QString("workingLocationProperties")]);
    m_working_location_properties_isSet = !json[QString("workingLocationProperties")].isNull() && m_working_location_properties_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_anyone_can_add_self_isSet) {
        obj.insert(QString("anyoneCanAddSelf"), ::OpenAPI::toJsonValue(m_anyone_can_add_self));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_attendees.size() > 0) {
        obj.insert(QString("attendees"), ::OpenAPI::toJsonValue(m_attendees));
    }
    if (m_attendees_omitted_isSet) {
        obj.insert(QString("attendeesOmitted"), ::OpenAPI::toJsonValue(m_attendees_omitted));
    }
    if (m_color_id_isSet) {
        obj.insert(QString("colorId"), ::OpenAPI::toJsonValue(m_color_id));
    }
    if (m_conference_data.isSet()) {
        obj.insert(QString("conferenceData"), ::OpenAPI::toJsonValue(m_conference_data));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end.isSet()) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_end_time_unspecified_isSet) {
        obj.insert(QString("endTimeUnspecified"), ::OpenAPI::toJsonValue(m_end_time_unspecified));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_extended_properties.isSet()) {
        obj.insert(QString("extendedProperties"), ::OpenAPI::toJsonValue(m_extended_properties));
    }
    if (m_focus_time_properties.isSet()) {
        obj.insert(QString("focusTimeProperties"), ::OpenAPI::toJsonValue(m_focus_time_properties));
    }
    if (m_gadget.isSet()) {
        obj.insert(QString("gadget"), ::OpenAPI::toJsonValue(m_gadget));
    }
    if (m_guests_can_invite_others_isSet) {
        obj.insert(QString("guestsCanInviteOthers"), ::OpenAPI::toJsonValue(m_guests_can_invite_others));
    }
    if (m_guests_can_modify_isSet) {
        obj.insert(QString("guestsCanModify"), ::OpenAPI::toJsonValue(m_guests_can_modify));
    }
    if (m_guests_can_see_other_guests_isSet) {
        obj.insert(QString("guestsCanSeeOtherGuests"), ::OpenAPI::toJsonValue(m_guests_can_see_other_guests));
    }
    if (m_hangout_link_isSet) {
        obj.insert(QString("hangoutLink"), ::OpenAPI::toJsonValue(m_hangout_link));
    }
    if (m_html_link_isSet) {
        obj.insert(QString("htmlLink"), ::OpenAPI::toJsonValue(m_html_link));
    }
    if (m_i_cal_uid_isSet) {
        obj.insert(QString("iCalUID"), ::OpenAPI::toJsonValue(m_i_cal_uid));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_organizer.isSet()) {
        obj.insert(QString("organizer"), ::OpenAPI::toJsonValue(m_organizer));
    }
    if (m_original_start_time.isSet()) {
        obj.insert(QString("originalStartTime"), ::OpenAPI::toJsonValue(m_original_start_time));
    }
    if (m_out_of_office_properties.isSet()) {
        obj.insert(QString("outOfOfficeProperties"), ::OpenAPI::toJsonValue(m_out_of_office_properties));
    }
    if (m_private_copy_isSet) {
        obj.insert(QString("privateCopy"), ::OpenAPI::toJsonValue(m_private_copy));
    }
    if (m_recurrence.size() > 0) {
        obj.insert(QString("recurrence"), ::OpenAPI::toJsonValue(m_recurrence));
    }
    if (m_recurring_event_id_isSet) {
        obj.insert(QString("recurringEventId"), ::OpenAPI::toJsonValue(m_recurring_event_id));
    }
    if (m_reminders.isSet()) {
        obj.insert(QString("reminders"), ::OpenAPI::toJsonValue(m_reminders));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_start.isSet()) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_transparency_isSet) {
        obj.insert(QString("transparency"), ::OpenAPI::toJsonValue(m_transparency));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_working_location_properties.isSet()) {
        obj.insert(QString("workingLocationProperties"), ::OpenAPI::toJsonValue(m_working_location_properties));
    }
    return obj;
}

bool OAIEvent::isAnyoneCanAddSelf() const {
    return m_anyone_can_add_self;
}
void OAIEvent::setAnyoneCanAddSelf(const bool &anyone_can_add_self) {
    m_anyone_can_add_self = anyone_can_add_self;
    m_anyone_can_add_self_isSet = true;
}

bool OAIEvent::is_anyone_can_add_self_Set() const{
    return m_anyone_can_add_self_isSet;
}

bool OAIEvent::is_anyone_can_add_self_Valid() const{
    return m_anyone_can_add_self_isValid;
}

QList<OAIEventAttachment> OAIEvent::getAttachments() const {
    return m_attachments;
}
void OAIEvent::setAttachments(const QList<OAIEventAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIEvent::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIEvent::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QList<OAIEventAttendee> OAIEvent::getAttendees() const {
    return m_attendees;
}
void OAIEvent::setAttendees(const QList<OAIEventAttendee> &attendees) {
    m_attendees = attendees;
    m_attendees_isSet = true;
}

bool OAIEvent::is_attendees_Set() const{
    return m_attendees_isSet;
}

bool OAIEvent::is_attendees_Valid() const{
    return m_attendees_isValid;
}

bool OAIEvent::isAttendeesOmitted() const {
    return m_attendees_omitted;
}
void OAIEvent::setAttendeesOmitted(const bool &attendees_omitted) {
    m_attendees_omitted = attendees_omitted;
    m_attendees_omitted_isSet = true;
}

bool OAIEvent::is_attendees_omitted_Set() const{
    return m_attendees_omitted_isSet;
}

bool OAIEvent::is_attendees_omitted_Valid() const{
    return m_attendees_omitted_isValid;
}

QString OAIEvent::getColorId() const {
    return m_color_id;
}
void OAIEvent::setColorId(const QString &color_id) {
    m_color_id = color_id;
    m_color_id_isSet = true;
}

bool OAIEvent::is_color_id_Set() const{
    return m_color_id_isSet;
}

bool OAIEvent::is_color_id_Valid() const{
    return m_color_id_isValid;
}

OAIConferenceData OAIEvent::getConferenceData() const {
    return m_conference_data;
}
void OAIEvent::setConferenceData(const OAIConferenceData &conference_data) {
    m_conference_data = conference_data;
    m_conference_data_isSet = true;
}

bool OAIEvent::is_conference_data_Set() const{
    return m_conference_data_isSet;
}

bool OAIEvent::is_conference_data_Valid() const{
    return m_conference_data_isValid;
}

QDateTime OAIEvent::getCreated() const {
    return m_created;
}
void OAIEvent::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIEvent::is_created_Set() const{
    return m_created_isSet;
}

bool OAIEvent::is_created_Valid() const{
    return m_created_isValid;
}

OAIEvent_creator OAIEvent::getCreator() const {
    return m_creator;
}
void OAIEvent::setCreator(const OAIEvent_creator &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIEvent::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIEvent::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAIEvent::getDescription() const {
    return m_description;
}
void OAIEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEvent::is_description_Valid() const{
    return m_description_isValid;
}

OAIEventDateTime OAIEvent::getEnd() const {
    return m_end;
}
void OAIEvent::setEnd(const OAIEventDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIEvent::is_end_Set() const{
    return m_end_isSet;
}

bool OAIEvent::is_end_Valid() const{
    return m_end_isValid;
}

bool OAIEvent::isEndTimeUnspecified() const {
    return m_end_time_unspecified;
}
void OAIEvent::setEndTimeUnspecified(const bool &end_time_unspecified) {
    m_end_time_unspecified = end_time_unspecified;
    m_end_time_unspecified_isSet = true;
}

bool OAIEvent::is_end_time_unspecified_Set() const{
    return m_end_time_unspecified_isSet;
}

bool OAIEvent::is_end_time_unspecified_Valid() const{
    return m_end_time_unspecified_isValid;
}

QString OAIEvent::getEtag() const {
    return m_etag;
}
void OAIEvent::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIEvent::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIEvent::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIEvent::getEventType() const {
    return m_event_type;
}
void OAIEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

OAIEvent_extendedProperties OAIEvent::getExtendedProperties() const {
    return m_extended_properties;
}
void OAIEvent::setExtendedProperties(const OAIEvent_extendedProperties &extended_properties) {
    m_extended_properties = extended_properties;
    m_extended_properties_isSet = true;
}

bool OAIEvent::is_extended_properties_Set() const{
    return m_extended_properties_isSet;
}

bool OAIEvent::is_extended_properties_Valid() const{
    return m_extended_properties_isValid;
}

OAIEventFocusTimeProperties OAIEvent::getFocusTimeProperties() const {
    return m_focus_time_properties;
}
void OAIEvent::setFocusTimeProperties(const OAIEventFocusTimeProperties &focus_time_properties) {
    m_focus_time_properties = focus_time_properties;
    m_focus_time_properties_isSet = true;
}

bool OAIEvent::is_focus_time_properties_Set() const{
    return m_focus_time_properties_isSet;
}

bool OAIEvent::is_focus_time_properties_Valid() const{
    return m_focus_time_properties_isValid;
}

OAIEvent_gadget OAIEvent::getGadget() const {
    return m_gadget;
}
void OAIEvent::setGadget(const OAIEvent_gadget &gadget) {
    m_gadget = gadget;
    m_gadget_isSet = true;
}

bool OAIEvent::is_gadget_Set() const{
    return m_gadget_isSet;
}

bool OAIEvent::is_gadget_Valid() const{
    return m_gadget_isValid;
}

bool OAIEvent::isGuestsCanInviteOthers() const {
    return m_guests_can_invite_others;
}
void OAIEvent::setGuestsCanInviteOthers(const bool &guests_can_invite_others) {
    m_guests_can_invite_others = guests_can_invite_others;
    m_guests_can_invite_others_isSet = true;
}

bool OAIEvent::is_guests_can_invite_others_Set() const{
    return m_guests_can_invite_others_isSet;
}

bool OAIEvent::is_guests_can_invite_others_Valid() const{
    return m_guests_can_invite_others_isValid;
}

bool OAIEvent::isGuestsCanModify() const {
    return m_guests_can_modify;
}
void OAIEvent::setGuestsCanModify(const bool &guests_can_modify) {
    m_guests_can_modify = guests_can_modify;
    m_guests_can_modify_isSet = true;
}

bool OAIEvent::is_guests_can_modify_Set() const{
    return m_guests_can_modify_isSet;
}

bool OAIEvent::is_guests_can_modify_Valid() const{
    return m_guests_can_modify_isValid;
}

bool OAIEvent::isGuestsCanSeeOtherGuests() const {
    return m_guests_can_see_other_guests;
}
void OAIEvent::setGuestsCanSeeOtherGuests(const bool &guests_can_see_other_guests) {
    m_guests_can_see_other_guests = guests_can_see_other_guests;
    m_guests_can_see_other_guests_isSet = true;
}

bool OAIEvent::is_guests_can_see_other_guests_Set() const{
    return m_guests_can_see_other_guests_isSet;
}

bool OAIEvent::is_guests_can_see_other_guests_Valid() const{
    return m_guests_can_see_other_guests_isValid;
}

QString OAIEvent::getHangoutLink() const {
    return m_hangout_link;
}
void OAIEvent::setHangoutLink(const QString &hangout_link) {
    m_hangout_link = hangout_link;
    m_hangout_link_isSet = true;
}

bool OAIEvent::is_hangout_link_Set() const{
    return m_hangout_link_isSet;
}

bool OAIEvent::is_hangout_link_Valid() const{
    return m_hangout_link_isValid;
}

QString OAIEvent::getHtmlLink() const {
    return m_html_link;
}
void OAIEvent::setHtmlLink(const QString &html_link) {
    m_html_link = html_link;
    m_html_link_isSet = true;
}

bool OAIEvent::is_html_link_Set() const{
    return m_html_link_isSet;
}

bool OAIEvent::is_html_link_Valid() const{
    return m_html_link_isValid;
}

QString OAIEvent::getICalUid() const {
    return m_i_cal_uid;
}
void OAIEvent::setICalUid(const QString &i_cal_uid) {
    m_i_cal_uid = i_cal_uid;
    m_i_cal_uid_isSet = true;
}

bool OAIEvent::is_i_cal_uid_Set() const{
    return m_i_cal_uid_isSet;
}

bool OAIEvent::is_i_cal_uid_Valid() const{
    return m_i_cal_uid_isValid;
}

QString OAIEvent::getId() const {
    return m_id;
}
void OAIEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEvent::getKind() const {
    return m_kind;
}
void OAIEvent::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIEvent::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIEvent::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIEvent::getLocation() const {
    return m_location;
}
void OAIEvent::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIEvent::is_location_Set() const{
    return m_location_isSet;
}

bool OAIEvent::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIEvent::isLocked() const {
    return m_locked;
}
void OAIEvent::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIEvent::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIEvent::is_locked_Valid() const{
    return m_locked_isValid;
}

OAIEvent_organizer OAIEvent::getOrganizer() const {
    return m_organizer;
}
void OAIEvent::setOrganizer(const OAIEvent_organizer &organizer) {
    m_organizer = organizer;
    m_organizer_isSet = true;
}

bool OAIEvent::is_organizer_Set() const{
    return m_organizer_isSet;
}

bool OAIEvent::is_organizer_Valid() const{
    return m_organizer_isValid;
}

OAIEventDateTime OAIEvent::getOriginalStartTime() const {
    return m_original_start_time;
}
void OAIEvent::setOriginalStartTime(const OAIEventDateTime &original_start_time) {
    m_original_start_time = original_start_time;
    m_original_start_time_isSet = true;
}

bool OAIEvent::is_original_start_time_Set() const{
    return m_original_start_time_isSet;
}

bool OAIEvent::is_original_start_time_Valid() const{
    return m_original_start_time_isValid;
}

OAIEventOutOfOfficeProperties OAIEvent::getOutOfOfficeProperties() const {
    return m_out_of_office_properties;
}
void OAIEvent::setOutOfOfficeProperties(const OAIEventOutOfOfficeProperties &out_of_office_properties) {
    m_out_of_office_properties = out_of_office_properties;
    m_out_of_office_properties_isSet = true;
}

bool OAIEvent::is_out_of_office_properties_Set() const{
    return m_out_of_office_properties_isSet;
}

bool OAIEvent::is_out_of_office_properties_Valid() const{
    return m_out_of_office_properties_isValid;
}

bool OAIEvent::isPrivateCopy() const {
    return m_private_copy;
}
void OAIEvent::setPrivateCopy(const bool &private_copy) {
    m_private_copy = private_copy;
    m_private_copy_isSet = true;
}

bool OAIEvent::is_private_copy_Set() const{
    return m_private_copy_isSet;
}

bool OAIEvent::is_private_copy_Valid() const{
    return m_private_copy_isValid;
}

QList<QString> OAIEvent::getRecurrence() const {
    return m_recurrence;
}
void OAIEvent::setRecurrence(const QList<QString> &recurrence) {
    m_recurrence = recurrence;
    m_recurrence_isSet = true;
}

bool OAIEvent::is_recurrence_Set() const{
    return m_recurrence_isSet;
}

bool OAIEvent::is_recurrence_Valid() const{
    return m_recurrence_isValid;
}

QString OAIEvent::getRecurringEventId() const {
    return m_recurring_event_id;
}
void OAIEvent::setRecurringEventId(const QString &recurring_event_id) {
    m_recurring_event_id = recurring_event_id;
    m_recurring_event_id_isSet = true;
}

bool OAIEvent::is_recurring_event_id_Set() const{
    return m_recurring_event_id_isSet;
}

bool OAIEvent::is_recurring_event_id_Valid() const{
    return m_recurring_event_id_isValid;
}

OAIEvent_reminders OAIEvent::getReminders() const {
    return m_reminders;
}
void OAIEvent::setReminders(const OAIEvent_reminders &reminders) {
    m_reminders = reminders;
    m_reminders_isSet = true;
}

bool OAIEvent::is_reminders_Set() const{
    return m_reminders_isSet;
}

bool OAIEvent::is_reminders_Valid() const{
    return m_reminders_isValid;
}

qint32 OAIEvent::getSequence() const {
    return m_sequence;
}
void OAIEvent::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIEvent::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIEvent::is_sequence_Valid() const{
    return m_sequence_isValid;
}

OAIEvent_source OAIEvent::getSource() const {
    return m_source;
}
void OAIEvent::setSource(const OAIEvent_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIEvent::is_source_Set() const{
    return m_source_isSet;
}

bool OAIEvent::is_source_Valid() const{
    return m_source_isValid;
}

OAIEventDateTime OAIEvent::getStart() const {
    return m_start;
}
void OAIEvent::setStart(const OAIEventDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIEvent::is_start_Set() const{
    return m_start_isSet;
}

bool OAIEvent::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIEvent::getStatus() const {
    return m_status;
}
void OAIEvent::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEvent::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEvent::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEvent::getSummary() const {
    return m_summary;
}
void OAIEvent::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIEvent::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIEvent::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIEvent::getTransparency() const {
    return m_transparency;
}
void OAIEvent::setTransparency(const QString &transparency) {
    m_transparency = transparency;
    m_transparency_isSet = true;
}

bool OAIEvent::is_transparency_Set() const{
    return m_transparency_isSet;
}

bool OAIEvent::is_transparency_Valid() const{
    return m_transparency_isValid;
}

QDateTime OAIEvent::getUpdated() const {
    return m_updated;
}
void OAIEvent::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIEvent::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIEvent::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIEvent::getVisibility() const {
    return m_visibility;
}
void OAIEvent::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIEvent::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIEvent::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIEventWorkingLocationProperties OAIEvent::getWorkingLocationProperties() const {
    return m_working_location_properties;
}
void OAIEvent::setWorkingLocationProperties(const OAIEventWorkingLocationProperties &working_location_properties) {
    m_working_location_properties = working_location_properties;
    m_working_location_properties_isSet = true;
}

bool OAIEvent::is_working_location_properties_Set() const{
    return m_working_location_properties_isSet;
}

bool OAIEvent::is_working_location_properties_Valid() const{
    return m_working_location_properties_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anyone_can_add_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attendees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attendees_omitted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_unspecified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_focus_time_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gadget.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guests_can_invite_others_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guests_can_modify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guests_can_see_other_guests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hangout_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_cal_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_start_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_of_office_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_copy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reminders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transparency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_location_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
