/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannel::OAIChannel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannel::OAIChannel() {
    this->initializeModel();
}

OAIChannel::~OAIChannel() {}

void OAIChannel::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIChannel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannel::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIChannel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannel::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_uri_isSet) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIChannel::getAddress() const {
    return m_address;
}
void OAIChannel::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIChannel::is_address_Set() const{
    return m_address_isSet;
}

bool OAIChannel::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIChannel::getExpiration() const {
    return m_expiration;
}
void OAIChannel::setExpiration(const QString &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIChannel::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIChannel::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAIChannel::getId() const {
    return m_id;
}
void OAIChannel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChannel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChannel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIChannel::getKind() const {
    return m_kind;
}
void OAIChannel::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIChannel::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIChannel::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QString> OAIChannel::getParams() const {
    return m_params;
}
void OAIChannel::setParams(const QMap<QString, QString> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIChannel::is_params_Set() const{
    return m_params_isSet;
}

bool OAIChannel::is_params_Valid() const{
    return m_params_isValid;
}

bool OAIChannel::isPayload() const {
    return m_payload;
}
void OAIChannel::setPayload(const bool &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIChannel::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIChannel::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAIChannel::getResourceId() const {
    return m_resource_id;
}
void OAIChannel::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIChannel::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIChannel::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIChannel::getResourceUri() const {
    return m_resource_uri;
}
void OAIChannel::setResourceUri(const QString &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAIChannel::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAIChannel::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

QString OAIChannel::getToken() const {
    return m_token;
}
void OAIChannel::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIChannel::is_token_Set() const{
    return m_token_isSet;
}

bool OAIChannel::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIChannel::getType() const {
    return m_type;
}
void OAIChannel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIChannel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
