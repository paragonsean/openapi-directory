/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalendarListEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalendarListEntry::OAICalendarListEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalendarListEntry::OAICalendarListEntry() {
    this->initializeModel();
}

OAICalendarListEntry::~OAICalendarListEntry() {}

void OAICalendarListEntry::initializeModel() {

    m_access_role_isSet = false;
    m_access_role_isValid = false;

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_color_id_isSet = false;
    m_color_id_isValid = false;

    m_conference_properties_isSet = false;
    m_conference_properties_isValid = false;

    m_default_reminders_isSet = false;
    m_default_reminders_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_foreground_color_isSet = false;
    m_foreground_color_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_notification_settings_isSet = false;
    m_notification_settings_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_selected_isSet = false;
    m_selected_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_summary_override_isSet = false;
    m_summary_override_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAICalendarListEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalendarListEntry::fromJsonObject(QJsonObject json) {

    m_access_role_isValid = ::OpenAPI::fromJsonValue(m_access_role, json[QString("accessRole")]);
    m_access_role_isSet = !json[QString("accessRole")].isNull() && m_access_role_isValid;

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_color_id_isValid = ::OpenAPI::fromJsonValue(m_color_id, json[QString("colorId")]);
    m_color_id_isSet = !json[QString("colorId")].isNull() && m_color_id_isValid;

    m_conference_properties_isValid = ::OpenAPI::fromJsonValue(m_conference_properties, json[QString("conferenceProperties")]);
    m_conference_properties_isSet = !json[QString("conferenceProperties")].isNull() && m_conference_properties_isValid;

    m_default_reminders_isValid = ::OpenAPI::fromJsonValue(m_default_reminders, json[QString("defaultReminders")]);
    m_default_reminders_isSet = !json[QString("defaultReminders")].isNull() && m_default_reminders_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_foreground_color_isValid = ::OpenAPI::fromJsonValue(m_foreground_color, json[QString("foregroundColor")]);
    m_foreground_color_isSet = !json[QString("foregroundColor")].isNull() && m_foreground_color_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_notification_settings_isValid = ::OpenAPI::fromJsonValue(m_notification_settings, json[QString("notificationSettings")]);
    m_notification_settings_isSet = !json[QString("notificationSettings")].isNull() && m_notification_settings_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_selected_isValid = ::OpenAPI::fromJsonValue(m_selected, json[QString("selected")]);
    m_selected_isSet = !json[QString("selected")].isNull() && m_selected_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_summary_override_isValid = ::OpenAPI::fromJsonValue(m_summary_override, json[QString("summaryOverride")]);
    m_summary_override_isSet = !json[QString("summaryOverride")].isNull() && m_summary_override_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAICalendarListEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalendarListEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_access_role_isSet) {
        obj.insert(QString("accessRole"), ::OpenAPI::toJsonValue(m_access_role));
    }
    if (m_background_color_isSet) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_color_id_isSet) {
        obj.insert(QString("colorId"), ::OpenAPI::toJsonValue(m_color_id));
    }
    if (m_conference_properties.isSet()) {
        obj.insert(QString("conferenceProperties"), ::OpenAPI::toJsonValue(m_conference_properties));
    }
    if (m_default_reminders.size() > 0) {
        obj.insert(QString("defaultReminders"), ::OpenAPI::toJsonValue(m_default_reminders));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_foreground_color_isSet) {
        obj.insert(QString("foregroundColor"), ::OpenAPI::toJsonValue(m_foreground_color));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_notification_settings.isSet()) {
        obj.insert(QString("notificationSettings"), ::OpenAPI::toJsonValue(m_notification_settings));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_selected_isSet) {
        obj.insert(QString("selected"), ::OpenAPI::toJsonValue(m_selected));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_summary_override_isSet) {
        obj.insert(QString("summaryOverride"), ::OpenAPI::toJsonValue(m_summary_override));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAICalendarListEntry::getAccessRole() const {
    return m_access_role;
}
void OAICalendarListEntry::setAccessRole(const QString &access_role) {
    m_access_role = access_role;
    m_access_role_isSet = true;
}

bool OAICalendarListEntry::is_access_role_Set() const{
    return m_access_role_isSet;
}

bool OAICalendarListEntry::is_access_role_Valid() const{
    return m_access_role_isValid;
}

QString OAICalendarListEntry::getBackgroundColor() const {
    return m_background_color;
}
void OAICalendarListEntry::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAICalendarListEntry::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAICalendarListEntry::is_background_color_Valid() const{
    return m_background_color_isValid;
}

QString OAICalendarListEntry::getColorId() const {
    return m_color_id;
}
void OAICalendarListEntry::setColorId(const QString &color_id) {
    m_color_id = color_id;
    m_color_id_isSet = true;
}

bool OAICalendarListEntry::is_color_id_Set() const{
    return m_color_id_isSet;
}

bool OAICalendarListEntry::is_color_id_Valid() const{
    return m_color_id_isValid;
}

OAIConferenceProperties OAICalendarListEntry::getConferenceProperties() const {
    return m_conference_properties;
}
void OAICalendarListEntry::setConferenceProperties(const OAIConferenceProperties &conference_properties) {
    m_conference_properties = conference_properties;
    m_conference_properties_isSet = true;
}

bool OAICalendarListEntry::is_conference_properties_Set() const{
    return m_conference_properties_isSet;
}

bool OAICalendarListEntry::is_conference_properties_Valid() const{
    return m_conference_properties_isValid;
}

QList<OAIEventReminder> OAICalendarListEntry::getDefaultReminders() const {
    return m_default_reminders;
}
void OAICalendarListEntry::setDefaultReminders(const QList<OAIEventReminder> &default_reminders) {
    m_default_reminders = default_reminders;
    m_default_reminders_isSet = true;
}

bool OAICalendarListEntry::is_default_reminders_Set() const{
    return m_default_reminders_isSet;
}

bool OAICalendarListEntry::is_default_reminders_Valid() const{
    return m_default_reminders_isValid;
}

bool OAICalendarListEntry::isDeleted() const {
    return m_deleted;
}
void OAICalendarListEntry::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAICalendarListEntry::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAICalendarListEntry::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAICalendarListEntry::getDescription() const {
    return m_description;
}
void OAICalendarListEntry::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICalendarListEntry::is_description_Set() const{
    return m_description_isSet;
}

bool OAICalendarListEntry::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICalendarListEntry::getEtag() const {
    return m_etag;
}
void OAICalendarListEntry::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAICalendarListEntry::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAICalendarListEntry::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAICalendarListEntry::getForegroundColor() const {
    return m_foreground_color;
}
void OAICalendarListEntry::setForegroundColor(const QString &foreground_color) {
    m_foreground_color = foreground_color;
    m_foreground_color_isSet = true;
}

bool OAICalendarListEntry::is_foreground_color_Set() const{
    return m_foreground_color_isSet;
}

bool OAICalendarListEntry::is_foreground_color_Valid() const{
    return m_foreground_color_isValid;
}

bool OAICalendarListEntry::isHidden() const {
    return m_hidden;
}
void OAICalendarListEntry::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAICalendarListEntry::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAICalendarListEntry::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAICalendarListEntry::getId() const {
    return m_id;
}
void OAICalendarListEntry::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICalendarListEntry::is_id_Set() const{
    return m_id_isSet;
}

bool OAICalendarListEntry::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICalendarListEntry::getKind() const {
    return m_kind;
}
void OAICalendarListEntry::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICalendarListEntry::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICalendarListEntry::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAICalendarListEntry::getLocation() const {
    return m_location;
}
void OAICalendarListEntry::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICalendarListEntry::is_location_Set() const{
    return m_location_isSet;
}

bool OAICalendarListEntry::is_location_Valid() const{
    return m_location_isValid;
}

OAICalendarListEntry_notificationSettings OAICalendarListEntry::getNotificationSettings() const {
    return m_notification_settings;
}
void OAICalendarListEntry::setNotificationSettings(const OAICalendarListEntry_notificationSettings &notification_settings) {
    m_notification_settings = notification_settings;
    m_notification_settings_isSet = true;
}

bool OAICalendarListEntry::is_notification_settings_Set() const{
    return m_notification_settings_isSet;
}

bool OAICalendarListEntry::is_notification_settings_Valid() const{
    return m_notification_settings_isValid;
}

bool OAICalendarListEntry::isPrimary() const {
    return m_primary;
}
void OAICalendarListEntry::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAICalendarListEntry::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAICalendarListEntry::is_primary_Valid() const{
    return m_primary_isValid;
}

bool OAICalendarListEntry::isSelected() const {
    return m_selected;
}
void OAICalendarListEntry::setSelected(const bool &selected) {
    m_selected = selected;
    m_selected_isSet = true;
}

bool OAICalendarListEntry::is_selected_Set() const{
    return m_selected_isSet;
}

bool OAICalendarListEntry::is_selected_Valid() const{
    return m_selected_isValid;
}

QString OAICalendarListEntry::getSummary() const {
    return m_summary;
}
void OAICalendarListEntry::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAICalendarListEntry::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAICalendarListEntry::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAICalendarListEntry::getSummaryOverride() const {
    return m_summary_override;
}
void OAICalendarListEntry::setSummaryOverride(const QString &summary_override) {
    m_summary_override = summary_override;
    m_summary_override_isSet = true;
}

bool OAICalendarListEntry::is_summary_override_Set() const{
    return m_summary_override_isSet;
}

bool OAICalendarListEntry::is_summary_override_Valid() const{
    return m_summary_override_isValid;
}

QString OAICalendarListEntry::getTimeZone() const {
    return m_time_zone;
}
void OAICalendarListEntry::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAICalendarListEntry::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAICalendarListEntry::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAICalendarListEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_reminders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalendarListEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
