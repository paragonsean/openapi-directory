/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalendar.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalendar::OAICalendar(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalendar::OAICalendar() {
    this->initializeModel();
}

OAICalendar::~OAICalendar() {}

void OAICalendar::initializeModel() {

    m_conference_properties_isSet = false;
    m_conference_properties_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAICalendar::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalendar::fromJsonObject(QJsonObject json) {

    m_conference_properties_isValid = ::OpenAPI::fromJsonValue(m_conference_properties, json[QString("conferenceProperties")]);
    m_conference_properties_isSet = !json[QString("conferenceProperties")].isNull() && m_conference_properties_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAICalendar::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalendar::asJsonObject() const {
    QJsonObject obj;
    if (m_conference_properties.isSet()) {
        obj.insert(QString("conferenceProperties"), ::OpenAPI::toJsonValue(m_conference_properties));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

OAIConferenceProperties OAICalendar::getConferenceProperties() const {
    return m_conference_properties;
}
void OAICalendar::setConferenceProperties(const OAIConferenceProperties &conference_properties) {
    m_conference_properties = conference_properties;
    m_conference_properties_isSet = true;
}

bool OAICalendar::is_conference_properties_Set() const{
    return m_conference_properties_isSet;
}

bool OAICalendar::is_conference_properties_Valid() const{
    return m_conference_properties_isValid;
}

QString OAICalendar::getDescription() const {
    return m_description;
}
void OAICalendar::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICalendar::is_description_Set() const{
    return m_description_isSet;
}

bool OAICalendar::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICalendar::getEtag() const {
    return m_etag;
}
void OAICalendar::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAICalendar::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAICalendar::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAICalendar::getId() const {
    return m_id;
}
void OAICalendar::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICalendar::is_id_Set() const{
    return m_id_isSet;
}

bool OAICalendar::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICalendar::getKind() const {
    return m_kind;
}
void OAICalendar::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICalendar::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICalendar::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAICalendar::getLocation() const {
    return m_location;
}
void OAICalendar::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICalendar::is_location_Set() const{
    return m_location_isSet;
}

bool OAICalendar::is_location_Valid() const{
    return m_location_isValid;
}

QString OAICalendar::getSummary() const {
    return m_summary;
}
void OAICalendar::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAICalendar::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAICalendar::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAICalendar::getTimeZone() const {
    return m_time_zone;
}
void OAICalendar::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAICalendar::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAICalendar::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAICalendar::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conference_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalendar::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
