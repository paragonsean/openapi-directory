/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFreeBusyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFreeBusyRequest::OAIFreeBusyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFreeBusyRequest::OAIFreeBusyRequest() {
    this->initializeModel();
}

OAIFreeBusyRequest::~OAIFreeBusyRequest() {}

void OAIFreeBusyRequest::initializeModel() {

    m_calendar_expansion_max_isSet = false;
    m_calendar_expansion_max_isValid = false;

    m_group_expansion_max_isSet = false;
    m_group_expansion_max_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_time_max_isSet = false;
    m_time_max_isValid = false;

    m_time_min_isSet = false;
    m_time_min_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIFreeBusyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFreeBusyRequest::fromJsonObject(QJsonObject json) {

    m_calendar_expansion_max_isValid = ::OpenAPI::fromJsonValue(m_calendar_expansion_max, json[QString("calendarExpansionMax")]);
    m_calendar_expansion_max_isSet = !json[QString("calendarExpansionMax")].isNull() && m_calendar_expansion_max_isValid;

    m_group_expansion_max_isValid = ::OpenAPI::fromJsonValue(m_group_expansion_max, json[QString("groupExpansionMax")]);
    m_group_expansion_max_isSet = !json[QString("groupExpansionMax")].isNull() && m_group_expansion_max_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_time_max_isValid = ::OpenAPI::fromJsonValue(m_time_max, json[QString("timeMax")]);
    m_time_max_isSet = !json[QString("timeMax")].isNull() && m_time_max_isValid;

    m_time_min_isValid = ::OpenAPI::fromJsonValue(m_time_min, json[QString("timeMin")]);
    m_time_min_isSet = !json[QString("timeMin")].isNull() && m_time_min_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIFreeBusyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFreeBusyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_calendar_expansion_max_isSet) {
        obj.insert(QString("calendarExpansionMax"), ::OpenAPI::toJsonValue(m_calendar_expansion_max));
    }
    if (m_group_expansion_max_isSet) {
        obj.insert(QString("groupExpansionMax"), ::OpenAPI::toJsonValue(m_group_expansion_max));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_time_max_isSet) {
        obj.insert(QString("timeMax"), ::OpenAPI::toJsonValue(m_time_max));
    }
    if (m_time_min_isSet) {
        obj.insert(QString("timeMin"), ::OpenAPI::toJsonValue(m_time_min));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

qint32 OAIFreeBusyRequest::getCalendarExpansionMax() const {
    return m_calendar_expansion_max;
}
void OAIFreeBusyRequest::setCalendarExpansionMax(const qint32 &calendar_expansion_max) {
    m_calendar_expansion_max = calendar_expansion_max;
    m_calendar_expansion_max_isSet = true;
}

bool OAIFreeBusyRequest::is_calendar_expansion_max_Set() const{
    return m_calendar_expansion_max_isSet;
}

bool OAIFreeBusyRequest::is_calendar_expansion_max_Valid() const{
    return m_calendar_expansion_max_isValid;
}

qint32 OAIFreeBusyRequest::getGroupExpansionMax() const {
    return m_group_expansion_max;
}
void OAIFreeBusyRequest::setGroupExpansionMax(const qint32 &group_expansion_max) {
    m_group_expansion_max = group_expansion_max;
    m_group_expansion_max_isSet = true;
}

bool OAIFreeBusyRequest::is_group_expansion_max_Set() const{
    return m_group_expansion_max_isSet;
}

bool OAIFreeBusyRequest::is_group_expansion_max_Valid() const{
    return m_group_expansion_max_isValid;
}

QList<OAIFreeBusyRequestItem> OAIFreeBusyRequest::getItems() const {
    return m_items;
}
void OAIFreeBusyRequest::setItems(const QList<OAIFreeBusyRequestItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIFreeBusyRequest::is_items_Set() const{
    return m_items_isSet;
}

bool OAIFreeBusyRequest::is_items_Valid() const{
    return m_items_isValid;
}

QDateTime OAIFreeBusyRequest::getTimeMax() const {
    return m_time_max;
}
void OAIFreeBusyRequest::setTimeMax(const QDateTime &time_max) {
    m_time_max = time_max;
    m_time_max_isSet = true;
}

bool OAIFreeBusyRequest::is_time_max_Set() const{
    return m_time_max_isSet;
}

bool OAIFreeBusyRequest::is_time_max_Valid() const{
    return m_time_max_isValid;
}

QDateTime OAIFreeBusyRequest::getTimeMin() const {
    return m_time_min;
}
void OAIFreeBusyRequest::setTimeMin(const QDateTime &time_min) {
    m_time_min = time_min;
    m_time_min_isSet = true;
}

bool OAIFreeBusyRequest::is_time_min_Set() const{
    return m_time_min_isSet;
}

bool OAIFreeBusyRequest::is_time_min_Valid() const{
    return m_time_min_isValid;
}

QString OAIFreeBusyRequest::getTimeZone() const {
    return m_time_zone;
}
void OAIFreeBusyRequest::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIFreeBusyRequest::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIFreeBusyRequest::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIFreeBusyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calendar_expansion_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_expansion_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFreeBusyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
