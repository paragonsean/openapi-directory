/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAclApi_H
#define OAI_OAIAclApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcl.h"
#include "OAIAclRule.h"
#include "OAIChannel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAclApi : public QObject {
    Q_OBJECT

public:
    OAIAclApi(const int timeOut = 0);
    ~OAIAclApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  rule_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void calendar_acl_delete(const QString &calendar_id, const QString &rule_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  rule_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void calendar_acl_get(const QString &calendar_id, const QString &rule_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  send_notifications bool [optional]
    * @param[in]  oai_acl_rule OAIAclRule [optional]
    */
    virtual void calendar_acl_insert(const QString &calendar_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &send_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIAclRule> &oai_acl_rule = ::OpenAPI::OptionalParam<OAIAclRule>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  show_deleted bool [optional]
    * @param[in]  sync_token QString [optional]
    */
    virtual void calendar_acl_list(const QString &calendar_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sync_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  rule_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  send_notifications bool [optional]
    * @param[in]  oai_acl_rule OAIAclRule [optional]
    */
    virtual void calendar_acl_patch(const QString &calendar_id, const QString &rule_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &send_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIAclRule> &oai_acl_rule = ::OpenAPI::OptionalParam<OAIAclRule>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  rule_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  send_notifications bool [optional]
    * @param[in]  oai_acl_rule OAIAclRule [optional]
    */
    virtual void calendar_acl_update(const QString &calendar_id, const QString &rule_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &send_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIAclRule> &oai_acl_rule = ::OpenAPI::OptionalParam<OAIAclRule>());

    /**
    * @param[in]  calendar_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  show_deleted bool [optional]
    * @param[in]  sync_token QString [optional]
    * @param[in]  oai_channel OAIChannel [optional]
    */
    virtual void calendar_acl_watch(const QString &calendar_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sync_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIChannel> &oai_channel = ::OpenAPI::OptionalParam<OAIChannel>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void calendar_acl_deleteCallback(OAIHttpRequestWorker *worker);
    void calendar_acl_getCallback(OAIHttpRequestWorker *worker);
    void calendar_acl_insertCallback(OAIHttpRequestWorker *worker);
    void calendar_acl_listCallback(OAIHttpRequestWorker *worker);
    void calendar_acl_patchCallback(OAIHttpRequestWorker *worker);
    void calendar_acl_updateCallback(OAIHttpRequestWorker *worker);
    void calendar_acl_watchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void calendar_acl_deleteSignal();
    void calendar_acl_getSignal(OAIAclRule summary);
    void calendar_acl_insertSignal(OAIAclRule summary);
    void calendar_acl_listSignal(OAIAcl summary);
    void calendar_acl_patchSignal(OAIAclRule summary);
    void calendar_acl_updateSignal(OAIAclRule summary);
    void calendar_acl_watchSignal(OAIChannel summary);


    void calendar_acl_deleteSignalFull(OAIHttpRequestWorker *worker);
    void calendar_acl_getSignalFull(OAIHttpRequestWorker *worker, OAIAclRule summary);
    void calendar_acl_insertSignalFull(OAIHttpRequestWorker *worker, OAIAclRule summary);
    void calendar_acl_listSignalFull(OAIHttpRequestWorker *worker, OAIAcl summary);
    void calendar_acl_patchSignalFull(OAIHttpRequestWorker *worker, OAIAclRule summary);
    void calendar_acl_updateSignalFull(OAIHttpRequestWorker *worker, OAIAclRule summary);
    void calendar_acl_watchSignalFull(OAIHttpRequestWorker *worker, OAIChannel summary);

    Q_DECL_DEPRECATED_X("Use calendar_acl_deleteSignalError() instead")
    void calendar_acl_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_acl_getSignalError() instead")
    void calendar_acl_getSignalE(OAIAclRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_getSignalError(OAIAclRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_acl_insertSignalError() instead")
    void calendar_acl_insertSignalE(OAIAclRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_insertSignalError(OAIAclRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_acl_listSignalError() instead")
    void calendar_acl_listSignalE(OAIAcl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_listSignalError(OAIAcl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_acl_patchSignalError() instead")
    void calendar_acl_patchSignalE(OAIAclRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_patchSignalError(OAIAclRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_acl_updateSignalError() instead")
    void calendar_acl_updateSignalE(OAIAclRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_updateSignalError(OAIAclRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_acl_watchSignalError() instead")
    void calendar_acl_watchSignalE(OAIChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_watchSignalError(OAIChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use calendar_acl_deleteSignalErrorFull() instead")
    void calendar_acl_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_acl_getSignalErrorFull() instead")
    void calendar_acl_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_acl_insertSignalErrorFull() instead")
    void calendar_acl_insertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_insertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_acl_listSignalErrorFull() instead")
    void calendar_acl_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_acl_patchSignalErrorFull() instead")
    void calendar_acl_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_acl_updateSignalErrorFull() instead")
    void calendar_acl_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use calendar_acl_watchSignalErrorFull() instead")
    void calendar_acl_watchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void calendar_acl_watchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
