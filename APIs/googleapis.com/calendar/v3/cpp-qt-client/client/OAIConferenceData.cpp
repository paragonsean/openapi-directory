/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConferenceData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConferenceData::OAIConferenceData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConferenceData::OAIConferenceData() {
    this->initializeModel();
}

OAIConferenceData::~OAIConferenceData() {}

void OAIConferenceData::initializeModel() {

    m_conference_id_isSet = false;
    m_conference_id_isValid = false;

    m_conference_solution_isSet = false;
    m_conference_solution_isValid = false;

    m_create_request_isSet = false;
    m_create_request_isValid = false;

    m_entry_points_isSet = false;
    m_entry_points_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;
}

void OAIConferenceData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConferenceData::fromJsonObject(QJsonObject json) {

    m_conference_id_isValid = ::OpenAPI::fromJsonValue(m_conference_id, json[QString("conferenceId")]);
    m_conference_id_isSet = !json[QString("conferenceId")].isNull() && m_conference_id_isValid;

    m_conference_solution_isValid = ::OpenAPI::fromJsonValue(m_conference_solution, json[QString("conferenceSolution")]);
    m_conference_solution_isSet = !json[QString("conferenceSolution")].isNull() && m_conference_solution_isValid;

    m_create_request_isValid = ::OpenAPI::fromJsonValue(m_create_request, json[QString("createRequest")]);
    m_create_request_isSet = !json[QString("createRequest")].isNull() && m_create_request_isValid;

    m_entry_points_isValid = ::OpenAPI::fromJsonValue(m_entry_points, json[QString("entryPoints")]);
    m_entry_points_isSet = !json[QString("entryPoints")].isNull() && m_entry_points_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;
}

QString OAIConferenceData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConferenceData::asJsonObject() const {
    QJsonObject obj;
    if (m_conference_id_isSet) {
        obj.insert(QString("conferenceId"), ::OpenAPI::toJsonValue(m_conference_id));
    }
    if (m_conference_solution.isSet()) {
        obj.insert(QString("conferenceSolution"), ::OpenAPI::toJsonValue(m_conference_solution));
    }
    if (m_create_request.isSet()) {
        obj.insert(QString("createRequest"), ::OpenAPI::toJsonValue(m_create_request));
    }
    if (m_entry_points.size() > 0) {
        obj.insert(QString("entryPoints"), ::OpenAPI::toJsonValue(m_entry_points));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    return obj;
}

QString OAIConferenceData::getConferenceId() const {
    return m_conference_id;
}
void OAIConferenceData::setConferenceId(const QString &conference_id) {
    m_conference_id = conference_id;
    m_conference_id_isSet = true;
}

bool OAIConferenceData::is_conference_id_Set() const{
    return m_conference_id_isSet;
}

bool OAIConferenceData::is_conference_id_Valid() const{
    return m_conference_id_isValid;
}

OAIConferenceSolution OAIConferenceData::getConferenceSolution() const {
    return m_conference_solution;
}
void OAIConferenceData::setConferenceSolution(const OAIConferenceSolution &conference_solution) {
    m_conference_solution = conference_solution;
    m_conference_solution_isSet = true;
}

bool OAIConferenceData::is_conference_solution_Set() const{
    return m_conference_solution_isSet;
}

bool OAIConferenceData::is_conference_solution_Valid() const{
    return m_conference_solution_isValid;
}

OAICreateConferenceRequest OAIConferenceData::getCreateRequest() const {
    return m_create_request;
}
void OAIConferenceData::setCreateRequest(const OAICreateConferenceRequest &create_request) {
    m_create_request = create_request;
    m_create_request_isSet = true;
}

bool OAIConferenceData::is_create_request_Set() const{
    return m_create_request_isSet;
}

bool OAIConferenceData::is_create_request_Valid() const{
    return m_create_request_isValid;
}

QList<OAIEntryPoint> OAIConferenceData::getEntryPoints() const {
    return m_entry_points;
}
void OAIConferenceData::setEntryPoints(const QList<OAIEntryPoint> &entry_points) {
    m_entry_points = entry_points;
    m_entry_points_isSet = true;
}

bool OAIConferenceData::is_entry_points_Set() const{
    return m_entry_points_isSet;
}

bool OAIConferenceData::is_entry_points_Valid() const{
    return m_entry_points_isValid;
}

QString OAIConferenceData::getNotes() const {
    return m_notes;
}
void OAIConferenceData::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIConferenceData::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIConferenceData::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIConferenceParameters OAIConferenceData::getParameters() const {
    return m_parameters;
}
void OAIConferenceData::setParameters(const OAIConferenceParameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIConferenceData::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIConferenceData::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIConferenceData::getSignature() const {
    return m_signature;
}
void OAIConferenceData::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIConferenceData::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIConferenceData::is_signature_Valid() const{
    return m_signature_isValid;
}

bool OAIConferenceData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_solution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConferenceData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
