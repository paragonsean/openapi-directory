/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColors::OAIColors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColors::OAIColors() {
    this->initializeModel();
}

OAIColors::~OAIColors() {}

void OAIColors::initializeModel() {

    m_calendar_isSet = false;
    m_calendar_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIColors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColors::fromJsonObject(QJsonObject json) {

    m_calendar_isValid = ::OpenAPI::fromJsonValue(m_calendar, json[QString("calendar")]);
    m_calendar_isSet = !json[QString("calendar")].isNull() && m_calendar_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIColors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColors::asJsonObject() const {
    QJsonObject obj;
    if (m_calendar.size() > 0) {
        obj.insert(QString("calendar"), ::OpenAPI::toJsonValue(m_calendar));
    }
    if (m_event.size() > 0) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QMap<QString, OAIColorDefinition> OAIColors::getCalendar() const {
    return m_calendar;
}
void OAIColors::setCalendar(const QMap<QString, OAIColorDefinition> &calendar) {
    m_calendar = calendar;
    m_calendar_isSet = true;
}

bool OAIColors::is_calendar_Set() const{
    return m_calendar_isSet;
}

bool OAIColors::is_calendar_Valid() const{
    return m_calendar_isValid;
}

QMap<QString, OAIColorDefinition> OAIColors::getEvent() const {
    return m_event;
}
void OAIColors::setEvent(const QMap<QString, OAIColorDefinition> &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIColors::is_event_Set() const{
    return m_event_isSet;
}

bool OAIColors::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIColors::getKind() const {
    return m_kind;
}
void OAIColors::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIColors::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIColors::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAIColors::getUpdated() const {
    return m_updated;
}
void OAIColors::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIColors::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIColors::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIColors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calendar.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
