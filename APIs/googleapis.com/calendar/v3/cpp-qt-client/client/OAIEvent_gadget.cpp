/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_gadget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_gadget::OAIEvent_gadget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_gadget::OAIEvent_gadget() {
    this->initializeModel();
}

OAIEvent_gadget::~OAIEvent_gadget() {}

void OAIEvent_gadget::initializeModel() {

    m_display_isSet = false;
    m_display_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_icon_link_isSet = false;
    m_icon_link_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_preferences_isSet = false;
    m_preferences_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIEvent_gadget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_gadget::fromJsonObject(QJsonObject json) {

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_icon_link_isValid = ::OpenAPI::fromJsonValue(m_icon_link, json[QString("iconLink")]);
    m_icon_link_isSet = !json[QString("iconLink")].isNull() && m_icon_link_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("preferences")]);
    m_preferences_isSet = !json[QString("preferences")].isNull() && m_preferences_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIEvent_gadget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_gadget::asJsonObject() const {
    QJsonObject obj;
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_icon_link_isSet) {
        obj.insert(QString("iconLink"), ::OpenAPI::toJsonValue(m_icon_link));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_preferences.size() > 0) {
        obj.insert(QString("preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIEvent_gadget::getDisplay() const {
    return m_display;
}
void OAIEvent_gadget::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIEvent_gadget::is_display_Set() const{
    return m_display_isSet;
}

bool OAIEvent_gadget::is_display_Valid() const{
    return m_display_isValid;
}

qint32 OAIEvent_gadget::getHeight() const {
    return m_height;
}
void OAIEvent_gadget::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIEvent_gadget::is_height_Set() const{
    return m_height_isSet;
}

bool OAIEvent_gadget::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIEvent_gadget::getIconLink() const {
    return m_icon_link;
}
void OAIEvent_gadget::setIconLink(const QString &icon_link) {
    m_icon_link = icon_link;
    m_icon_link_isSet = true;
}

bool OAIEvent_gadget::is_icon_link_Set() const{
    return m_icon_link_isSet;
}

bool OAIEvent_gadget::is_icon_link_Valid() const{
    return m_icon_link_isValid;
}

QString OAIEvent_gadget::getLink() const {
    return m_link;
}
void OAIEvent_gadget::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIEvent_gadget::is_link_Set() const{
    return m_link_isSet;
}

bool OAIEvent_gadget::is_link_Valid() const{
    return m_link_isValid;
}

QMap<QString, QString> OAIEvent_gadget::getPreferences() const {
    return m_preferences;
}
void OAIEvent_gadget::setPreferences(const QMap<QString, QString> &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAIEvent_gadget::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAIEvent_gadget::is_preferences_Valid() const{
    return m_preferences_isValid;
}

QString OAIEvent_gadget::getTitle() const {
    return m_title;
}
void OAIEvent_gadget::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEvent_gadget::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEvent_gadget::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIEvent_gadget::getType() const {
    return m_type;
}
void OAIEvent_gadget::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEvent_gadget::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEvent_gadget::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIEvent_gadget::getWidth() const {
    return m_width;
}
void OAIEvent_gadget::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIEvent_gadget::is_width_Set() const{
    return m_width_isSet;
}

bool OAIEvent_gadget::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIEvent_gadget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_gadget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
