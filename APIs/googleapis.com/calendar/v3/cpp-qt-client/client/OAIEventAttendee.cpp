/**
 * Calendar API
 * Manipulates events and other calendar data.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventAttendee.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventAttendee::OAIEventAttendee(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventAttendee::OAIEventAttendee() {
    this->initializeModel();
}

OAIEventAttendee::~OAIEventAttendee() {}

void OAIEventAttendee::initializeModel() {

    m_additional_guests_isSet = false;
    m_additional_guests_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_optional_isSet = false;
    m_optional_isValid = false;

    m_organizer_isSet = false;
    m_organizer_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_response_status_isSet = false;
    m_response_status_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIEventAttendee::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventAttendee::fromJsonObject(QJsonObject json) {

    m_additional_guests_isValid = ::OpenAPI::fromJsonValue(m_additional_guests, json[QString("additionalGuests")]);
    m_additional_guests_isSet = !json[QString("additionalGuests")].isNull() && m_additional_guests_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_optional_isValid = ::OpenAPI::fromJsonValue(m_optional, json[QString("optional")]);
    m_optional_isSet = !json[QString("optional")].isNull() && m_optional_isValid;

    m_organizer_isValid = ::OpenAPI::fromJsonValue(m_organizer, json[QString("organizer")]);
    m_organizer_isSet = !json[QString("organizer")].isNull() && m_organizer_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_response_status_isValid = ::OpenAPI::fromJsonValue(m_response_status, json[QString("responseStatus")]);
    m_response_status_isSet = !json[QString("responseStatus")].isNull() && m_response_status_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAIEventAttendee::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventAttendee::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_guests_isSet) {
        obj.insert(QString("additionalGuests"), ::OpenAPI::toJsonValue(m_additional_guests));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_optional_isSet) {
        obj.insert(QString("optional"), ::OpenAPI::toJsonValue(m_optional));
    }
    if (m_organizer_isSet) {
        obj.insert(QString("organizer"), ::OpenAPI::toJsonValue(m_organizer));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_response_status_isSet) {
        obj.insert(QString("responseStatus"), ::OpenAPI::toJsonValue(m_response_status));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

qint32 OAIEventAttendee::getAdditionalGuests() const {
    return m_additional_guests;
}
void OAIEventAttendee::setAdditionalGuests(const qint32 &additional_guests) {
    m_additional_guests = additional_guests;
    m_additional_guests_isSet = true;
}

bool OAIEventAttendee::is_additional_guests_Set() const{
    return m_additional_guests_isSet;
}

bool OAIEventAttendee::is_additional_guests_Valid() const{
    return m_additional_guests_isValid;
}

QString OAIEventAttendee::getComment() const {
    return m_comment;
}
void OAIEventAttendee::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIEventAttendee::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIEventAttendee::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIEventAttendee::getDisplayName() const {
    return m_display_name;
}
void OAIEventAttendee::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIEventAttendee::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIEventAttendee::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIEventAttendee::getEmail() const {
    return m_email;
}
void OAIEventAttendee::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIEventAttendee::is_email_Set() const{
    return m_email_isSet;
}

bool OAIEventAttendee::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIEventAttendee::getId() const {
    return m_id;
}
void OAIEventAttendee::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventAttendee::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventAttendee::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIEventAttendee::isOptional() const {
    return m_optional;
}
void OAIEventAttendee::setOptional(const bool &optional) {
    m_optional = optional;
    m_optional_isSet = true;
}

bool OAIEventAttendee::is_optional_Set() const{
    return m_optional_isSet;
}

bool OAIEventAttendee::is_optional_Valid() const{
    return m_optional_isValid;
}

bool OAIEventAttendee::isOrganizer() const {
    return m_organizer;
}
void OAIEventAttendee::setOrganizer(const bool &organizer) {
    m_organizer = organizer;
    m_organizer_isSet = true;
}

bool OAIEventAttendee::is_organizer_Set() const{
    return m_organizer_isSet;
}

bool OAIEventAttendee::is_organizer_Valid() const{
    return m_organizer_isValid;
}

bool OAIEventAttendee::isResource() const {
    return m_resource;
}
void OAIEventAttendee::setResource(const bool &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIEventAttendee::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIEventAttendee::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIEventAttendee::getResponseStatus() const {
    return m_response_status;
}
void OAIEventAttendee::setResponseStatus(const QString &response_status) {
    m_response_status = response_status;
    m_response_status_isSet = true;
}

bool OAIEventAttendee::is_response_status_Set() const{
    return m_response_status_isSet;
}

bool OAIEventAttendee::is_response_status_Valid() const{
    return m_response_status_isValid;
}

bool OAIEventAttendee::isSelf() const {
    return m_self;
}
void OAIEventAttendee::setSelf(const bool &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIEventAttendee::is_self_Set() const{
    return m_self_isSet;
}

bool OAIEventAttendee::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIEventAttendee::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_guests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventAttendee::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
