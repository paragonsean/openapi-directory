/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStepEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStepEntry::OAIStepEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStepEntry::OAIStepEntry() {
    this->initializeModel();
}

OAIStepEntry::~OAIStepEntry() {}

void OAIStepEntry::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_entry_id_isSet = false;
    m_entry_id_isValid = false;

    m_exception_isSet = false;
    m_exception_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_navigation_info_isSet = false;
    m_navigation_info_isValid = false;

    m_routine_isSet = false;
    m_routine_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;

    m_step_entry_metadata_isSet = false;
    m_step_entry_metadata_isValid = false;

    m_step_type_isSet = false;
    m_step_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIStepEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStepEntry::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_entry_id_isValid = ::OpenAPI::fromJsonValue(m_entry_id, json[QString("entryId")]);
    m_entry_id_isSet = !json[QString("entryId")].isNull() && m_entry_id_isValid;

    m_exception_isValid = ::OpenAPI::fromJsonValue(m_exception, json[QString("exception")]);
    m_exception_isSet = !json[QString("exception")].isNull() && m_exception_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_navigation_info_isValid = ::OpenAPI::fromJsonValue(m_navigation_info, json[QString("navigationInfo")]);
    m_navigation_info_isSet = !json[QString("navigationInfo")].isNull() && m_navigation_info_isValid;

    m_routine_isValid = ::OpenAPI::fromJsonValue(m_routine, json[QString("routine")]);
    m_routine_isSet = !json[QString("routine")].isNull() && m_routine_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("step")]);
    m_step_isSet = !json[QString("step")].isNull() && m_step_isValid;

    m_step_entry_metadata_isValid = ::OpenAPI::fromJsonValue(m_step_entry_metadata, json[QString("stepEntryMetadata")]);
    m_step_entry_metadata_isSet = !json[QString("stepEntryMetadata")].isNull() && m_step_entry_metadata_isValid;

    m_step_type_isValid = ::OpenAPI::fromJsonValue(m_step_type, json[QString("stepType")]);
    m_step_type_isSet = !json[QString("stepType")].isNull() && m_step_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIStepEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStepEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_entry_id_isSet) {
        obj.insert(QString("entryId"), ::OpenAPI::toJsonValue(m_entry_id));
    }
    if (m_exception.isSet()) {
        obj.insert(QString("exception"), ::OpenAPI::toJsonValue(m_exception));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_navigation_info.isSet()) {
        obj.insert(QString("navigationInfo"), ::OpenAPI::toJsonValue(m_navigation_info));
    }
    if (m_routine_isSet) {
        obj.insert(QString("routine"), ::OpenAPI::toJsonValue(m_routine));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_step_isSet) {
        obj.insert(QString("step"), ::OpenAPI::toJsonValue(m_step));
    }
    if (m_step_entry_metadata.isSet()) {
        obj.insert(QString("stepEntryMetadata"), ::OpenAPI::toJsonValue(m_step_entry_metadata));
    }
    if (m_step_type_isSet) {
        obj.insert(QString("stepType"), ::OpenAPI::toJsonValue(m_step_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIStepEntry::getCreateTime() const {
    return m_create_time;
}
void OAIStepEntry::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIStepEntry::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIStepEntry::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIStepEntry::getEntryId() const {
    return m_entry_id;
}
void OAIStepEntry::setEntryId(const QString &entry_id) {
    m_entry_id = entry_id;
    m_entry_id_isSet = true;
}

bool OAIStepEntry::is_entry_id_Set() const{
    return m_entry_id_isSet;
}

bool OAIStepEntry::is_entry_id_Valid() const{
    return m_entry_id_isValid;
}

OAIException OAIStepEntry::getException() const {
    return m_exception;
}
void OAIStepEntry::setException(const OAIException &exception) {
    m_exception = exception;
    m_exception_isSet = true;
}

bool OAIStepEntry::is_exception_Set() const{
    return m_exception_isSet;
}

bool OAIStepEntry::is_exception_Valid() const{
    return m_exception_isValid;
}

QString OAIStepEntry::getName() const {
    return m_name;
}
void OAIStepEntry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStepEntry::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStepEntry::is_name_Valid() const{
    return m_name_isValid;
}

OAINavigationInfo OAIStepEntry::getNavigationInfo() const {
    return m_navigation_info;
}
void OAIStepEntry::setNavigationInfo(const OAINavigationInfo &navigation_info) {
    m_navigation_info = navigation_info;
    m_navigation_info_isSet = true;
}

bool OAIStepEntry::is_navigation_info_Set() const{
    return m_navigation_info_isSet;
}

bool OAIStepEntry::is_navigation_info_Valid() const{
    return m_navigation_info_isValid;
}

QString OAIStepEntry::getRoutine() const {
    return m_routine;
}
void OAIStepEntry::setRoutine(const QString &routine) {
    m_routine = routine;
    m_routine_isSet = true;
}

bool OAIStepEntry::is_routine_Set() const{
    return m_routine_isSet;
}

bool OAIStepEntry::is_routine_Valid() const{
    return m_routine_isValid;
}

QString OAIStepEntry::getState() const {
    return m_state;
}
void OAIStepEntry::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStepEntry::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStepEntry::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIStepEntry::getStep() const {
    return m_step;
}
void OAIStepEntry::setStep(const QString &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAIStepEntry::is_step_Set() const{
    return m_step_isSet;
}

bool OAIStepEntry::is_step_Valid() const{
    return m_step_isValid;
}

OAIStepEntryMetadata OAIStepEntry::getStepEntryMetadata() const {
    return m_step_entry_metadata;
}
void OAIStepEntry::setStepEntryMetadata(const OAIStepEntryMetadata &step_entry_metadata) {
    m_step_entry_metadata = step_entry_metadata;
    m_step_entry_metadata_isSet = true;
}

bool OAIStepEntry::is_step_entry_metadata_Set() const{
    return m_step_entry_metadata_isSet;
}

bool OAIStepEntry::is_step_entry_metadata_Valid() const{
    return m_step_entry_metadata_isValid;
}

QString OAIStepEntry::getStepType() const {
    return m_step_type;
}
void OAIStepEntry::setStepType(const QString &step_type) {
    m_step_type = step_type;
    m_step_type_isSet = true;
}

bool OAIStepEntry::is_step_type_Set() const{
    return m_step_type_isSet;
}

bool OAIStepEntry::is_step_type_Valid() const{
    return m_step_type_isValid;
}

QString OAIStepEntry::getUpdateTime() const {
    return m_update_time;
}
void OAIStepEntry::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIStepEntry::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIStepEntry::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIStepEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_navigation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_entry_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStepEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
