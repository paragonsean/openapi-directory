/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallback.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallback::OAICallback(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallback::OAICallback() {
    this->initializeModel();
}

OAICallback::~OAICallback() {}

void OAICallback::initializeModel() {

    m_available_payloads_isSet = false;
    m_available_payloads_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_waiters_isSet = false;
    m_waiters_isValid = false;
}

void OAICallback::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallback::fromJsonObject(QJsonObject json) {

    m_available_payloads_isValid = ::OpenAPI::fromJsonValue(m_available_payloads, json[QString("availablePayloads")]);
    m_available_payloads_isSet = !json[QString("availablePayloads")].isNull() && m_available_payloads_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_waiters_isValid = ::OpenAPI::fromJsonValue(m_waiters, json[QString("waiters")]);
    m_waiters_isSet = !json[QString("waiters")].isNull() && m_waiters_isValid;
}

QString OAICallback::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallback::asJsonObject() const {
    QJsonObject obj;
    if (m_available_payloads.size() > 0) {
        obj.insert(QString("availablePayloads"), ::OpenAPI::toJsonValue(m_available_payloads));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_waiters_isSet) {
        obj.insert(QString("waiters"), ::OpenAPI::toJsonValue(m_waiters));
    }
    return obj;
}

QList<QString> OAICallback::getAvailablePayloads() const {
    return m_available_payloads;
}
void OAICallback::setAvailablePayloads(const QList<QString> &available_payloads) {
    m_available_payloads = available_payloads;
    m_available_payloads_isSet = true;
}

bool OAICallback::is_available_payloads_Set() const{
    return m_available_payloads_isSet;
}

bool OAICallback::is_available_payloads_Valid() const{
    return m_available_payloads_isValid;
}

QString OAICallback::getMethod() const {
    return m_method;
}
void OAICallback::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAICallback::is_method_Set() const{
    return m_method_isSet;
}

bool OAICallback::is_method_Valid() const{
    return m_method_isValid;
}

QString OAICallback::getName() const {
    return m_name;
}
void OAICallback::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICallback::is_name_Set() const{
    return m_name_isSet;
}

bool OAICallback::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICallback::getWaiters() const {
    return m_waiters;
}
void OAICallback::setWaiters(const QString &waiters) {
    m_waiters = waiters;
    m_waiters_isSet = true;
}

bool OAICallback::is_waiters_Set() const{
    return m_waiters_isSet;
}

bool OAICallback::is_waiters_Valid() const{
    return m_waiters_isValid;
}

bool OAICallback::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_payloads.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_waiters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallback::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
