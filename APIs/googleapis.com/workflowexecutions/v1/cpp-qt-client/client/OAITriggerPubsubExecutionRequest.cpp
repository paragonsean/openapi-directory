/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITriggerPubsubExecutionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITriggerPubsubExecutionRequest::OAITriggerPubsubExecutionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITriggerPubsubExecutionRequest::OAITriggerPubsubExecutionRequest() {
    this->initializeModel();
}

OAITriggerPubsubExecutionRequest::~OAITriggerPubsubExecutionRequest() {}

void OAITriggerPubsubExecutionRequest::initializeModel() {

    m_gcp_cloud_events_mode_isSet = false;
    m_gcp_cloud_events_mode_isValid = false;

    m_delivery_attempt_isSet = false;
    m_delivery_attempt_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;
}

void OAITriggerPubsubExecutionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITriggerPubsubExecutionRequest::fromJsonObject(QJsonObject json) {

    m_gcp_cloud_events_mode_isValid = ::OpenAPI::fromJsonValue(m_gcp_cloud_events_mode, json[QString("GCPCloudEventsMode")]);
    m_gcp_cloud_events_mode_isSet = !json[QString("GCPCloudEventsMode")].isNull() && m_gcp_cloud_events_mode_isValid;

    m_delivery_attempt_isValid = ::OpenAPI::fromJsonValue(m_delivery_attempt, json[QString("deliveryAttempt")]);
    m_delivery_attempt_isSet = !json[QString("deliveryAttempt")].isNull() && m_delivery_attempt_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;
}

QString OAITriggerPubsubExecutionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITriggerPubsubExecutionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_gcp_cloud_events_mode_isSet) {
        obj.insert(QString("GCPCloudEventsMode"), ::OpenAPI::toJsonValue(m_gcp_cloud_events_mode));
    }
    if (m_delivery_attempt_isSet) {
        obj.insert(QString("deliveryAttempt"), ::OpenAPI::toJsonValue(m_delivery_attempt));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_subscription_isSet) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    return obj;
}

QString OAITriggerPubsubExecutionRequest::getGcpCloudEventsMode() const {
    return m_gcp_cloud_events_mode;
}
void OAITriggerPubsubExecutionRequest::setGcpCloudEventsMode(const QString &gcp_cloud_events_mode) {
    m_gcp_cloud_events_mode = gcp_cloud_events_mode;
    m_gcp_cloud_events_mode_isSet = true;
}

bool OAITriggerPubsubExecutionRequest::is_gcp_cloud_events_mode_Set() const{
    return m_gcp_cloud_events_mode_isSet;
}

bool OAITriggerPubsubExecutionRequest::is_gcp_cloud_events_mode_Valid() const{
    return m_gcp_cloud_events_mode_isValid;
}

qint32 OAITriggerPubsubExecutionRequest::getDeliveryAttempt() const {
    return m_delivery_attempt;
}
void OAITriggerPubsubExecutionRequest::setDeliveryAttempt(const qint32 &delivery_attempt) {
    m_delivery_attempt = delivery_attempt;
    m_delivery_attempt_isSet = true;
}

bool OAITriggerPubsubExecutionRequest::is_delivery_attempt_Set() const{
    return m_delivery_attempt_isSet;
}

bool OAITriggerPubsubExecutionRequest::is_delivery_attempt_Valid() const{
    return m_delivery_attempt_isValid;
}

OAIPubsubMessage OAITriggerPubsubExecutionRequest::getMessage() const {
    return m_message;
}
void OAITriggerPubsubExecutionRequest::setMessage(const OAIPubsubMessage &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITriggerPubsubExecutionRequest::is_message_Set() const{
    return m_message_isSet;
}

bool OAITriggerPubsubExecutionRequest::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITriggerPubsubExecutionRequest::getSubscription() const {
    return m_subscription;
}
void OAITriggerPubsubExecutionRequest::setSubscription(const QString &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAITriggerPubsubExecutionRequest::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAITriggerPubsubExecutionRequest::is_subscription_Valid() const{
    return m_subscription_isValid;
}

bool OAITriggerPubsubExecutionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcp_cloud_events_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITriggerPubsubExecutionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
