/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListStepEntriesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListStepEntriesResponse::OAIListStepEntriesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListStepEntriesResponse::OAIListStepEntriesResponse() {
    this->initializeModel();
}

OAIListStepEntriesResponse::~OAIListStepEntriesResponse() {}

void OAIListStepEntriesResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_step_entries_isSet = false;
    m_step_entries_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;
}

void OAIListStepEntriesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListStepEntriesResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_step_entries_isValid = ::OpenAPI::fromJsonValue(m_step_entries, json[QString("stepEntries")]);
    m_step_entries_isSet = !json[QString("stepEntries")].isNull() && m_step_entries_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("totalSize")]);
    m_total_size_isSet = !json[QString("totalSize")].isNull() && m_total_size_isValid;
}

QString OAIListStepEntriesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListStepEntriesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_step_entries.size() > 0) {
        obj.insert(QString("stepEntries"), ::OpenAPI::toJsonValue(m_step_entries));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("totalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    return obj;
}

QString OAIListStepEntriesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListStepEntriesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListStepEntriesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListStepEntriesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIStepEntry> OAIListStepEntriesResponse::getStepEntries() const {
    return m_step_entries;
}
void OAIListStepEntriesResponse::setStepEntries(const QList<OAIStepEntry> &step_entries) {
    m_step_entries = step_entries;
    m_step_entries_isSet = true;
}

bool OAIListStepEntriesResponse::is_step_entries_Set() const{
    return m_step_entries_isSet;
}

bool OAIListStepEntriesResponse::is_step_entries_Valid() const{
    return m_step_entries_isValid;
}

qint32 OAIListStepEntriesResponse::getTotalSize() const {
    return m_total_size;
}
void OAIListStepEntriesResponse::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIListStepEntriesResponse::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIListStepEntriesResponse::is_total_size_Valid() const{
    return m_total_size_isValid;
}

bool OAIListStepEntriesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListStepEntriesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
