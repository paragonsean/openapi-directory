/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_stack_trace_isSet = false;
    m_stack_trace_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_stack_trace_isValid = ::OpenAPI::fromJsonValue(m_stack_trace, json[QString("stackTrace")]);
    m_stack_trace_isSet = !json[QString("stackTrace")].isNull() && m_stack_trace_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_stack_trace.isSet()) {
        obj.insert(QString("stackTrace"), ::OpenAPI::toJsonValue(m_stack_trace));
    }
    return obj;
}

QString OAIError::getContext() const {
    return m_context;
}
void OAIError::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIError::is_context_Set() const{
    return m_context_isSet;
}

bool OAIError::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIError::getPayload() const {
    return m_payload;
}
void OAIError::setPayload(const QString &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIError::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIError::is_payload_Valid() const{
    return m_payload_isValid;
}

OAIStackTrace OAIError::getStackTrace() const {
    return m_stack_trace;
}
void OAIError::setStackTrace(const OAIStackTrace &stack_trace) {
    m_stack_trace = stack_trace;
    m_stack_trace_isSet = true;
}

bool OAIError::is_stack_trace_Set() const{
    return m_stack_trace_isSet;
}

bool OAIError::is_stack_trace_Valid() const{
    return m_stack_trace_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_trace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
