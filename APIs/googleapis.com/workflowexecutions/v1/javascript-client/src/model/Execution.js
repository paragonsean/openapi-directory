/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Error from './Error';
import StateError from './StateError';
import Status from './Status';

/**
 * The Execution model module.
 * @module model/Execution
 * @version v1
 */
class Execution {
    /**
     * Constructs a new <code>Execution</code>.
     * A running instance of a [Workflow](/workflows/docs/reference/rest/v1/projects.locations.workflows).
     * @alias module:model/Execution
     */
    constructor() { 
        
        Execution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Execution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Execution} obj Optional instance to populate.
     * @return {module:model/Execution} The populated <code>Execution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Execution();

            if (data.hasOwnProperty('argument')) {
                obj['argument'] = ApiClient.convertToType(data['argument'], 'String');
            }
            if (data.hasOwnProperty('callLogLevel')) {
                obj['callLogLevel'] = ApiClient.convertToType(data['callLogLevel'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('disableConcurrencyQuotaOverflowBuffering')) {
                obj['disableConcurrencyQuotaOverflowBuffering'] = ApiClient.convertToType(data['disableConcurrencyQuotaOverflowBuffering'], 'Boolean');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = Error.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateError')) {
                obj['stateError'] = StateError.constructFromObject(data['stateError']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('workflowRevisionId')) {
                obj['workflowRevisionId'] = ApiClient.convertToType(data['workflowRevisionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Execution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Execution</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['argument'] && !(typeof data['argument'] === 'string' || data['argument'] instanceof String)) {
            throw new Error("Expected the field `argument` to be a primitive type in the JSON string but got " + data['argument']);
        }
        // ensure the json data is a string
        if (data['callLogLevel'] && !(typeof data['callLogLevel'] === 'string' || data['callLogLevel'] instanceof String)) {
            throw new Error("Expected the field `callLogLevel` to be a primitive type in the JSON string but got " + data['callLogLevel']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          Error.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `stateError`
        if (data['stateError']) { // data not null
          StateError.validateJSON(data['stateError']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['workflowRevisionId'] && !(typeof data['workflowRevisionId'] === 'string' || data['workflowRevisionId'] instanceof String)) {
            throw new Error("Expected the field `workflowRevisionId` to be a primitive type in the JSON string but got " + data['workflowRevisionId']);
        }

        return true;
    }


}



/**
 * Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{\"argument\":\"{\\\"firstName\\\":\\\"FIRST\\\",\\\"lastName\\\":\\\"LAST\\\"}\"}'`
 * @member {String} argument
 */
Execution.prototype['argument'] = undefined;

/**
 * The call logging level associated to this execution.
 * @member {module:model/Execution.CallLogLevelEnum} callLogLevel
 */
Execution.prototype['callLogLevel'] = undefined;

/**
 * Output only. Marks the creation of the execution.
 * @member {String} createTime
 */
Execution.prototype['createTime'] = undefined;

/**
 * Optional. If set to true, the execution will not be backlogged when the concurrency quota is exhausted. The backlog execution starts when the concurrency quota becomes available.
 * @member {Boolean} disableConcurrencyQuotaOverflowBuffering
 */
Execution.prototype['disableConcurrencyQuotaOverflowBuffering'] = undefined;

/**
 * Output only. Measures the duration of the execution.
 * @member {String} duration
 */
Execution.prototype['duration'] = undefined;

/**
 * Output only. Marks the end of execution, successful or not.
 * @member {String} endTime
 */
Execution.prototype['endTime'] = undefined;

/**
 * @member {module:model/Error} error
 */
Execution.prototype['error'] = undefined;

/**
 * Labels associated with this execution. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed. By default, labels are inherited from the workflow but are overridden by any labels associated with the execution.
 * @member {Object.<String, String>} labels
 */
Execution.prototype['labels'] = undefined;

/**
 * Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
 * @member {String} name
 */
Execution.prototype['name'] = undefined;

/**
 * Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.
 * @member {String} result
 */
Execution.prototype['result'] = undefined;

/**
 * Output only. Marks the beginning of execution.
 * @member {String} startTime
 */
Execution.prototype['startTime'] = undefined;

/**
 * Output only. Current state of the execution.
 * @member {module:model/Execution.StateEnum} state
 */
Execution.prototype['state'] = undefined;

/**
 * @member {module:model/StateError} stateError
 */
Execution.prototype['stateError'] = undefined;

/**
 * @member {module:model/Status} status
 */
Execution.prototype['status'] = undefined;

/**
 * Output only. Revision of the workflow this execution is using.
 * @member {String} workflowRevisionId
 */
Execution.prototype['workflowRevisionId'] = undefined;





/**
 * Allowed values for the <code>callLogLevel</code> property.
 * @enum {String}
 * @readonly
 */
Execution['CallLogLevelEnum'] = {

    /**
     * value: "CALL_LOG_LEVEL_UNSPECIFIED"
     * @const
     */
    "CALL_LOG_LEVEL_UNSPECIFIED": "CALL_LOG_LEVEL_UNSPECIFIED",

    /**
     * value: "LOG_ALL_CALLS"
     * @const
     */
    "LOG_ALL_CALLS": "LOG_ALL_CALLS",

    /**
     * value: "LOG_ERRORS_ONLY"
     * @const
     */
    "LOG_ERRORS_ONLY": "LOG_ERRORS_ONLY",

    /**
     * value: "LOG_NONE"
     * @const
     */
    "LOG_NONE": "LOG_NONE"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Execution['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "UNAVAILABLE"
     * @const
     */
    "UNAVAILABLE": "UNAVAILABLE",

    /**
     * value: "QUEUED"
     * @const
     */
    "QUEUED": "QUEUED"
};



export default Execution;

