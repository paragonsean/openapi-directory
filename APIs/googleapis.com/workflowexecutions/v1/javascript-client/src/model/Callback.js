/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Callback model module.
 * @module model/Callback
 * @version v1
 */
class Callback {
    /**
     * Constructs a new <code>Callback</code>.
     * An instance of a Callback created by an execution.
     * @alias module:model/Callback
     */
    constructor() { 
        
        Callback.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Callback</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Callback} obj Optional instance to populate.
     * @return {module:model/Callback} The populated <code>Callback</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Callback();

            if (data.hasOwnProperty('availablePayloads')) {
                obj['availablePayloads'] = ApiClient.convertToType(data['availablePayloads'], ['String']);
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('waiters')) {
                obj['waiters'] = ApiClient.convertToType(data['waiters'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Callback</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Callback</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['availablePayloads'])) {
            throw new Error("Expected the field `availablePayloads` to be an array in the JSON data but got " + data['availablePayloads']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['waiters'] && !(typeof data['waiters'] === 'string' || data['waiters'] instanceof String)) {
            throw new Error("Expected the field `waiters` to be a primitive type in the JSON string but got " + data['waiters']);
        }

        return true;
    }


}



/**
 * Output only. The payloads received by the callback that have not been processed by a waiting execution step.
 * @member {Array.<String>} availablePayloads
 */
Callback.prototype['availablePayloads'] = undefined;

/**
 * Output only. The method accepted by the callback. For example: GET, POST, PUT.
 * @member {String} method
 */
Callback.prototype['method'] = undefined;

/**
 * Output only. The resource name of the callback. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/callback/{callback}
 * @member {String} name
 */
Callback.prototype['name'] = undefined;

/**
 * Output only. Number of execution steps waiting on this callback.
 * @member {String} waiters
 */
Callback.prototype['waiters'] = undefined;






export default Callback;

