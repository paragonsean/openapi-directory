/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NavigationInfo model module.
 * @module model/NavigationInfo
 * @version v1
 */
class NavigationInfo {
    /**
     * Constructs a new <code>NavigationInfo</code>.
     * NavigationInfo describes what steps if any come before or after this step, or what steps are parents or children of this step.
     * @alias module:model/NavigationInfo
     */
    constructor() { 
        
        NavigationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NavigationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NavigationInfo} obj Optional instance to populate.
     * @return {module:model/NavigationInfo} The populated <code>NavigationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NavigationInfo();

            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], ['String']);
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ApiClient.convertToType(data['next'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('previous')) {
                obj['previous'] = ApiClient.convertToType(data['previous'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NavigationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NavigationInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['children'])) {
            throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
        }
        // ensure the json data is a string
        if (data['next'] && !(typeof data['next'] === 'string' || data['next'] instanceof String)) {
            throw new Error("Expected the field `next` to be a primitive type in the JSON string but got " + data['next']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        // ensure the json data is a string
        if (data['previous'] && !(typeof data['previous'] === 'string' || data['previous'] instanceof String)) {
            throw new Error("Expected the field `previous` to be a primitive type in the JSON string but got " + data['previous']);
        }

        return true;
    }


}



/**
 * Step entries that can be reached by \"stepping into\" e.g. a subworkflow call.
 * @member {Array.<String>} children
 */
NavigationInfo.prototype['children'] = undefined;

/**
 * The index of the next step in the current workflow, if any.
 * @member {String} next
 */
NavigationInfo.prototype['next'] = undefined;

/**
 * The step entry, if any, that can be reached by \"stepping out\" of the current workflow being executed.
 * @member {String} parent
 */
NavigationInfo.prototype['parent'] = undefined;

/**
 * The index of the previous step in the current workflow, if any.
 * @member {String} previous
 */
NavigationInfo.prototype['previous'] = undefined;






export default NavigationInfo;

