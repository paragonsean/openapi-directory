/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Exception from './Exception';
import NavigationInfo from './NavigationInfo';
import StepEntryMetadata from './StepEntryMetadata';

/**
 * The StepEntry model module.
 * @module model/StepEntry
 * @version v1
 */
class StepEntry {
    /**
     * Constructs a new <code>StepEntry</code>.
     * An StepEntry contains debugging information for a step transition in a workflow execution.
     * @alias module:model/StepEntry
     */
    constructor() { 
        
        StepEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StepEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StepEntry} obj Optional instance to populate.
     * @return {module:model/StepEntry} The populated <code>StepEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StepEntry();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('entryId')) {
                obj['entryId'] = ApiClient.convertToType(data['entryId'], 'String');
            }
            if (data.hasOwnProperty('exception')) {
                obj['exception'] = Exception.constructFromObject(data['exception']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('navigationInfo')) {
                obj['navigationInfo'] = NavigationInfo.constructFromObject(data['navigationInfo']);
            }
            if (data.hasOwnProperty('routine')) {
                obj['routine'] = ApiClient.convertToType(data['routine'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('step')) {
                obj['step'] = ApiClient.convertToType(data['step'], 'String');
            }
            if (data.hasOwnProperty('stepEntryMetadata')) {
                obj['stepEntryMetadata'] = StepEntryMetadata.constructFromObject(data['stepEntryMetadata']);
            }
            if (data.hasOwnProperty('stepType')) {
                obj['stepType'] = ApiClient.convertToType(data['stepType'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StepEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StepEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['entryId'] && !(typeof data['entryId'] === 'string' || data['entryId'] instanceof String)) {
            throw new Error("Expected the field `entryId` to be a primitive type in the JSON string but got " + data['entryId']);
        }
        // validate the optional field `exception`
        if (data['exception']) { // data not null
          Exception.validateJSON(data['exception']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `navigationInfo`
        if (data['navigationInfo']) { // data not null
          NavigationInfo.validateJSON(data['navigationInfo']);
        }
        // ensure the json data is a string
        if (data['routine'] && !(typeof data['routine'] === 'string' || data['routine'] instanceof String)) {
            throw new Error("Expected the field `routine` to be a primitive type in the JSON string but got " + data['routine']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['step'] && !(typeof data['step'] === 'string' || data['step'] instanceof String)) {
            throw new Error("Expected the field `step` to be a primitive type in the JSON string but got " + data['step']);
        }
        // validate the optional field `stepEntryMetadata`
        if (data['stepEntryMetadata']) { // data not null
          StepEntryMetadata.validateJSON(data['stepEntryMetadata']);
        }
        // ensure the json data is a string
        if (data['stepType'] && !(typeof data['stepType'] === 'string' || data['stepType'] instanceof String)) {
            throw new Error("Expected the field `stepType` to be a primitive type in the JSON string but got " + data['stepType']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The creation time of the step entry.
 * @member {String} createTime
 */
StepEntry.prototype['createTime'] = undefined;

/**
 * Output only. The numeric ID of this step entry, used for navigation.
 * @member {String} entryId
 */
StepEntry.prototype['entryId'] = undefined;

/**
 * @member {module:model/Exception} exception
 */
StepEntry.prototype['exception'] = undefined;

/**
 * Output only. The full resource name of the step entry. Each step entry has a unique entry ID, which is a monotonically increasing counter. Step entry names have the format: `projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/stepEntries/{step_entry}`.
 * @member {String} name
 */
StepEntry.prototype['name'] = undefined;

/**
 * @member {module:model/NavigationInfo} navigationInfo
 */
StepEntry.prototype['navigationInfo'] = undefined;

/**
 * Output only. The name of the routine this step entry belongs to. A routine name is the subworkflow name defined in the YAML source code. The top level routine name is `main`.
 * @member {String} routine
 */
StepEntry.prototype['routine'] = undefined;

/**
 * Output only. The state of the step entry.
 * @member {module:model/StepEntry.StateEnum} state
 */
StepEntry.prototype['state'] = undefined;

/**
 * Output only. The name of the step this step entry belongs to.
 * @member {String} step
 */
StepEntry.prototype['step'] = undefined;

/**
 * @member {module:model/StepEntryMetadata} stepEntryMetadata
 */
StepEntry.prototype['stepEntryMetadata'] = undefined;

/**
 * Output only. The type of the step this step entry belongs to.
 * @member {module:model/StepEntry.StepTypeEnum} stepType
 */
StepEntry.prototype['stepType'] = undefined;

/**
 * Output only. The most recently updated time of the step entry.
 * @member {String} updateTime
 */
StepEntry.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
StepEntry['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "STATE_IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "STATE_IN_PROGRESS",

    /**
     * value: "STATE_SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "STATE_SUCCEEDED",

    /**
     * value: "STATE_FAILED"
     * @const
     */
    "FAILED": "STATE_FAILED"
};


/**
 * Allowed values for the <code>stepType</code> property.
 * @enum {String}
 * @readonly
 */
StepEntry['StepTypeEnum'] = {

    /**
     * value: "STEP_TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "STEP_TYPE_UNSPECIFIED",

    /**
     * value: "STEP_ASSIGN"
     * @const
     */
    "ASSIGN": "STEP_ASSIGN",

    /**
     * value: "STEP_STD_LIB_CALL"
     * @const
     */
    "STD_LIB_CALL": "STEP_STD_LIB_CALL",

    /**
     * value: "STEP_CONNECTOR_CALL"
     * @const
     */
    "CONNECTOR_CALL": "STEP_CONNECTOR_CALL",

    /**
     * value: "STEP_SUBWORKFLOW_CALL"
     * @const
     */
    "SUBWORKFLOW_CALL": "STEP_SUBWORKFLOW_CALL",

    /**
     * value: "STEP_CALL"
     * @const
     */
    "CALL": "STEP_CALL",

    /**
     * value: "STEP_SWITCH"
     * @const
     */
    "SWITCH": "STEP_SWITCH",

    /**
     * value: "STEP_CONDITION"
     * @const
     */
    "CONDITION": "STEP_CONDITION",

    /**
     * value: "STEP_FOR"
     * @const
     */
    "FOR": "STEP_FOR",

    /**
     * value: "STEP_FOR_ITERATION"
     * @const
     */
    "FOR_ITERATION": "STEP_FOR_ITERATION",

    /**
     * value: "STEP_PARALLEL_FOR"
     * @const
     */
    "PARALLEL_FOR": "STEP_PARALLEL_FOR",

    /**
     * value: "STEP_PARALLEL_BRANCH"
     * @const
     */
    "PARALLEL_BRANCH": "STEP_PARALLEL_BRANCH",

    /**
     * value: "STEP_PARALLEL_BRANCH_ENTRY"
     * @const
     */
    "PARALLEL_BRANCH_ENTRY": "STEP_PARALLEL_BRANCH_ENTRY",

    /**
     * value: "STEP_TRY_RETRY_EXCEPT"
     * @const
     */
    "TRY_RETRY_EXCEPT": "STEP_TRY_RETRY_EXCEPT",

    /**
     * value: "STEP_TRY"
     * @const
     */
    "TRY": "STEP_TRY",

    /**
     * value: "STEP_RETRY"
     * @const
     */
    "RETRY": "STEP_RETRY",

    /**
     * value: "STEP_EXCEPT"
     * @const
     */
    "EXCEPT": "STEP_EXCEPT",

    /**
     * value: "STEP_RETURN"
     * @const
     */
    "RETURN": "STEP_RETURN",

    /**
     * value: "STEP_RAISE"
     * @const
     */
    "RAISE": "STEP_RAISE",

    /**
     * value: "STEP_GOTO"
     * @const
     */
    "GOTO": "STEP_GOTO"
};



export default StepEntry;

