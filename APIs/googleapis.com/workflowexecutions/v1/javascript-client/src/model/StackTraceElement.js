/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Position from './Position';

/**
 * The StackTraceElement model module.
 * @module model/StackTraceElement
 * @version v1
 */
class StackTraceElement {
    /**
     * Constructs a new <code>StackTraceElement</code>.
     * A single stack element (frame) where an error occurred.
     * @alias module:model/StackTraceElement
     */
    constructor() { 
        
        StackTraceElement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StackTraceElement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StackTraceElement} obj Optional instance to populate.
     * @return {module:model/StackTraceElement} The populated <code>StackTraceElement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StackTraceElement();

            if (data.hasOwnProperty('position')) {
                obj['position'] = Position.constructFromObject(data['position']);
            }
            if (data.hasOwnProperty('routine')) {
                obj['routine'] = ApiClient.convertToType(data['routine'], 'String');
            }
            if (data.hasOwnProperty('step')) {
                obj['step'] = ApiClient.convertToType(data['step'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StackTraceElement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StackTraceElement</code>.
     */
    static validateJSON(data) {
        // validate the optional field `position`
        if (data['position']) { // data not null
          Position.validateJSON(data['position']);
        }
        // ensure the json data is a string
        if (data['routine'] && !(typeof data['routine'] === 'string' || data['routine'] instanceof String)) {
            throw new Error("Expected the field `routine` to be a primitive type in the JSON string but got " + data['routine']);
        }
        // ensure the json data is a string
        if (data['step'] && !(typeof data['step'] === 'string' || data['step'] instanceof String)) {
            throw new Error("Expected the field `step` to be a primitive type in the JSON string but got " + data['step']);
        }

        return true;
    }


}



/**
 * @member {module:model/Position} position
 */
StackTraceElement.prototype['position'] = undefined;

/**
 * The routine where the error occurred.
 * @member {String} routine
 */
StackTraceElement.prototype['routine'] = undefined;

/**
 * The step the error occurred at.
 * @member {String} step
 */
StackTraceElement.prototype['step'] = undefined;






export default StackTraceElement;

