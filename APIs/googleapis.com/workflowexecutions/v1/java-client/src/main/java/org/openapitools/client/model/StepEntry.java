/*
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Exception;
import org.openapitools.client.model.NavigationInfo;
import org.openapitools.client.model.StepEntryMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An StepEntry contains debugging information for a step transition in a workflow execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:09.480271-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StepEntry {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_ENTRY_ID = "entryId";
  @SerializedName(SERIALIZED_NAME_ENTRY_ID)
  private String entryId;

  public static final String SERIALIZED_NAME_EXCEPTION = "exception";
  @SerializedName(SERIALIZED_NAME_EXCEPTION)
  private Exception exception;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAVIGATION_INFO = "navigationInfo";
  @SerializedName(SERIALIZED_NAME_NAVIGATION_INFO)
  private NavigationInfo navigationInfo;

  public static final String SERIALIZED_NAME_ROUTINE = "routine";
  @SerializedName(SERIALIZED_NAME_ROUTINE)
  private String routine;

  /**
   * Output only. The state of the step entry.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNSPECIFIED("STATE_UNSPECIFIED"),
    
    IN_PROGRESS("STATE_IN_PROGRESS"),
    
    SUCCEEDED("STATE_SUCCEEDED"),
    
    FAILED("STATE_FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STEP = "step";
  @SerializedName(SERIALIZED_NAME_STEP)
  private String step;

  public static final String SERIALIZED_NAME_STEP_ENTRY_METADATA = "stepEntryMetadata";
  @SerializedName(SERIALIZED_NAME_STEP_ENTRY_METADATA)
  private StepEntryMetadata stepEntryMetadata;

  /**
   * Output only. The type of the step this step entry belongs to.
   */
  @JsonAdapter(StepTypeEnum.Adapter.class)
  public enum StepTypeEnum {
    TYPE_UNSPECIFIED("STEP_TYPE_UNSPECIFIED"),
    
    ASSIGN("STEP_ASSIGN"),
    
    STD_LIB_CALL("STEP_STD_LIB_CALL"),
    
    CONNECTOR_CALL("STEP_CONNECTOR_CALL"),
    
    SUBWORKFLOW_CALL("STEP_SUBWORKFLOW_CALL"),
    
    CALL("STEP_CALL"),
    
    SWITCH("STEP_SWITCH"),
    
    CONDITION("STEP_CONDITION"),
    
    FOR("STEP_FOR"),
    
    FOR_ITERATION("STEP_FOR_ITERATION"),
    
    PARALLEL_FOR("STEP_PARALLEL_FOR"),
    
    PARALLEL_BRANCH("STEP_PARALLEL_BRANCH"),
    
    PARALLEL_BRANCH_ENTRY("STEP_PARALLEL_BRANCH_ENTRY"),
    
    TRY_RETRY_EXCEPT("STEP_TRY_RETRY_EXCEPT"),
    
    TRY("STEP_TRY"),
    
    RETRY("STEP_RETRY"),
    
    EXCEPT("STEP_EXCEPT"),
    
    RETURN("STEP_RETURN"),
    
    RAISE("STEP_RAISE"),
    
    GOTO("STEP_GOTO");

    private String value;

    StepTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StepTypeEnum fromValue(String value) {
      for (StepTypeEnum b : StepTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StepTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StepTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StepTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StepTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StepTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STEP_TYPE = "stepType";
  @SerializedName(SERIALIZED_NAME_STEP_TYPE)
  private StepTypeEnum stepType;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public StepEntry() {
  }

  public StepEntry(
     String createTime, 
     String entryId, 
     String name, 
     String routine, 
     StateEnum state, 
     String step, 
     StepTypeEnum stepType, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.entryId = entryId;
    this.name = name;
    this.routine = routine;
    this.state = state;
    this.step = step;
    this.stepType = stepType;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The creation time of the step entry.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The numeric ID of this step entry, used for navigation.
   * @return entryId
   */
  @javax.annotation.Nullable
  public String getEntryId() {
    return entryId;
  }



  public StepEntry exception(Exception exception) {
    this.exception = exception;
    return this;
  }

  /**
   * Get exception
   * @return exception
   */
  @javax.annotation.Nullable
  public Exception getException() {
    return exception;
  }

  public void setException(Exception exception) {
    this.exception = exception;
  }


  /**
   * Output only. The full resource name of the step entry. Each step entry has a unique entry ID, which is a monotonically increasing counter. Step entry names have the format: &#x60;projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/stepEntries/{step_entry}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public StepEntry navigationInfo(NavigationInfo navigationInfo) {
    this.navigationInfo = navigationInfo;
    return this;
  }

  /**
   * Get navigationInfo
   * @return navigationInfo
   */
  @javax.annotation.Nullable
  public NavigationInfo getNavigationInfo() {
    return navigationInfo;
  }

  public void setNavigationInfo(NavigationInfo navigationInfo) {
    this.navigationInfo = navigationInfo;
  }


  /**
   * Output only. The name of the routine this step entry belongs to. A routine name is the subworkflow name defined in the YAML source code. The top level routine name is &#x60;main&#x60;.
   * @return routine
   */
  @javax.annotation.Nullable
  public String getRoutine() {
    return routine;
  }



  /**
   * Output only. The state of the step entry.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The name of the step this step entry belongs to.
   * @return step
   */
  @javax.annotation.Nullable
  public String getStep() {
    return step;
  }



  public StepEntry stepEntryMetadata(StepEntryMetadata stepEntryMetadata) {
    this.stepEntryMetadata = stepEntryMetadata;
    return this;
  }

  /**
   * Get stepEntryMetadata
   * @return stepEntryMetadata
   */
  @javax.annotation.Nullable
  public StepEntryMetadata getStepEntryMetadata() {
    return stepEntryMetadata;
  }

  public void setStepEntryMetadata(StepEntryMetadata stepEntryMetadata) {
    this.stepEntryMetadata = stepEntryMetadata;
  }


  /**
   * Output only. The type of the step this step entry belongs to.
   * @return stepType
   */
  @javax.annotation.Nullable
  public StepTypeEnum getStepType() {
    return stepType;
  }



  /**
   * Output only. The most recently updated time of the step entry.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StepEntry stepEntry = (StepEntry) o;
    return Objects.equals(this.createTime, stepEntry.createTime) &&
        Objects.equals(this.entryId, stepEntry.entryId) &&
        Objects.equals(this.exception, stepEntry.exception) &&
        Objects.equals(this.name, stepEntry.name) &&
        Objects.equals(this.navigationInfo, stepEntry.navigationInfo) &&
        Objects.equals(this.routine, stepEntry.routine) &&
        Objects.equals(this.state, stepEntry.state) &&
        Objects.equals(this.step, stepEntry.step) &&
        Objects.equals(this.stepEntryMetadata, stepEntry.stepEntryMetadata) &&
        Objects.equals(this.stepType, stepEntry.stepType) &&
        Objects.equals(this.updateTime, stepEntry.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, entryId, exception, name, navigationInfo, routine, state, step, stepEntryMetadata, stepType, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StepEntry {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    entryId: ").append(toIndentedString(entryId)).append("\n");
    sb.append("    exception: ").append(toIndentedString(exception)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    navigationInfo: ").append(toIndentedString(navigationInfo)).append("\n");
    sb.append("    routine: ").append(toIndentedString(routine)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    stepEntryMetadata: ").append(toIndentedString(stepEntryMetadata)).append("\n");
    sb.append("    stepType: ").append(toIndentedString(stepType)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("entryId");
    openapiFields.add("exception");
    openapiFields.add("name");
    openapiFields.add("navigationInfo");
    openapiFields.add("routine");
    openapiFields.add("state");
    openapiFields.add("step");
    openapiFields.add("stepEntryMetadata");
    openapiFields.add("stepType");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StepEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StepEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StepEntry is not found in the empty JSON string", StepEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StepEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StepEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("entryId") != null && !jsonObj.get("entryId").isJsonNull()) && !jsonObj.get("entryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entryId").toString()));
      }
      // validate the optional field `exception`
      if (jsonObj.get("exception") != null && !jsonObj.get("exception").isJsonNull()) {
        Exception.validateJsonElement(jsonObj.get("exception"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `navigationInfo`
      if (jsonObj.get("navigationInfo") != null && !jsonObj.get("navigationInfo").isJsonNull()) {
        NavigationInfo.validateJsonElement(jsonObj.get("navigationInfo"));
      }
      if ((jsonObj.get("routine") != null && !jsonObj.get("routine").isJsonNull()) && !jsonObj.get("routine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routine").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("step") != null && !jsonObj.get("step").isJsonNull()) && !jsonObj.get("step").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `step` to be a primitive type in the JSON string but got `%s`", jsonObj.get("step").toString()));
      }
      // validate the optional field `stepEntryMetadata`
      if (jsonObj.get("stepEntryMetadata") != null && !jsonObj.get("stepEntryMetadata").isJsonNull()) {
        StepEntryMetadata.validateJsonElement(jsonObj.get("stepEntryMetadata"));
      }
      if ((jsonObj.get("stepType") != null && !jsonObj.get("stepType").isJsonNull()) && !jsonObj.get("stepType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepType").toString()));
      }
      // validate the optional field `stepType`
      if (jsonObj.get("stepType") != null && !jsonObj.get("stepType").isJsonNull()) {
        StepTypeEnum.validateJsonElement(jsonObj.get("stepType"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StepEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StepEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StepEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StepEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<StepEntry>() {
           @Override
           public void write(JsonWriter out, StepEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StepEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StepEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StepEntry
   * @throws IOException if the JSON string is invalid with respect to StepEntry
   */
  public static StepEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StepEntry.class);
  }

  /**
   * Convert an instance of StepEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

