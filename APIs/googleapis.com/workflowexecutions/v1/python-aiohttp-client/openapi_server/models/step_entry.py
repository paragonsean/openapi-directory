# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exception import Exception
from openapi_server.models.navigation_info import NavigationInfo
from openapi_server.models.step_entry_metadata import StepEntryMetadata
from openapi_server import util


class StepEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, entry_id: str=None, exception: Exception=None, name: str=None, navigation_info: NavigationInfo=None, routine: str=None, state: str=None, step: str=None, step_entry_metadata: StepEntryMetadata=None, step_type: str=None, update_time: str=None):
        """StepEntry - a model defined in OpenAPI

        :param create_time: The create_time of this StepEntry.
        :param entry_id: The entry_id of this StepEntry.
        :param exception: The exception of this StepEntry.
        :param name: The name of this StepEntry.
        :param navigation_info: The navigation_info of this StepEntry.
        :param routine: The routine of this StepEntry.
        :param state: The state of this StepEntry.
        :param step: The step of this StepEntry.
        :param step_entry_metadata: The step_entry_metadata of this StepEntry.
        :param step_type: The step_type of this StepEntry.
        :param update_time: The update_time of this StepEntry.
        """
        self.openapi_types = {
            'create_time': str,
            'entry_id': str,
            'exception': Exception,
            'name': str,
            'navigation_info': NavigationInfo,
            'routine': str,
            'state': str,
            'step': str,
            'step_entry_metadata': StepEntryMetadata,
            'step_type': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'entry_id': 'entryId',
            'exception': 'exception',
            'name': 'name',
            'navigation_info': 'navigationInfo',
            'routine': 'routine',
            'state': 'state',
            'step': 'step',
            'step_entry_metadata': 'stepEntryMetadata',
            'step_type': 'stepType',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._entry_id = entry_id
        self._exception = exception
        self._name = name
        self._navigation_info = navigation_info
        self._routine = routine
        self._state = state
        self._step = step
        self._step_entry_metadata = step_entry_metadata
        self._step_type = step_type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StepEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StepEntry of this StepEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this StepEntry.

        Output only. The creation time of the step entry.

        :return: The create_time of this StepEntry.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this StepEntry.

        Output only. The creation time of the step entry.

        :param create_time: The create_time of this StepEntry.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def entry_id(self):
        """Gets the entry_id of this StepEntry.

        Output only. The numeric ID of this step entry, used for navigation.

        :return: The entry_id of this StepEntry.
        :rtype: str
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this StepEntry.

        Output only. The numeric ID of this step entry, used for navigation.

        :param entry_id: The entry_id of this StepEntry.
        :type entry_id: str
        """

        self._entry_id = entry_id

    @property
    def exception(self):
        """Gets the exception of this StepEntry.


        :return: The exception of this StepEntry.
        :rtype: Exception
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this StepEntry.


        :param exception: The exception of this StepEntry.
        :type exception: Exception
        """

        self._exception = exception

    @property
    def name(self):
        """Gets the name of this StepEntry.

        Output only. The full resource name of the step entry. Each step entry has a unique entry ID, which is a monotonically increasing counter. Step entry names have the format: `projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/stepEntries/{step_entry}`.

        :return: The name of this StepEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StepEntry.

        Output only. The full resource name of the step entry. Each step entry has a unique entry ID, which is a monotonically increasing counter. Step entry names have the format: `projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/stepEntries/{step_entry}`.

        :param name: The name of this StepEntry.
        :type name: str
        """

        self._name = name

    @property
    def navigation_info(self):
        """Gets the navigation_info of this StepEntry.


        :return: The navigation_info of this StepEntry.
        :rtype: NavigationInfo
        """
        return self._navigation_info

    @navigation_info.setter
    def navigation_info(self, navigation_info):
        """Sets the navigation_info of this StepEntry.


        :param navigation_info: The navigation_info of this StepEntry.
        :type navigation_info: NavigationInfo
        """

        self._navigation_info = navigation_info

    @property
    def routine(self):
        """Gets the routine of this StepEntry.

        Output only. The name of the routine this step entry belongs to. A routine name is the subworkflow name defined in the YAML source code. The top level routine name is `main`.

        :return: The routine of this StepEntry.
        :rtype: str
        """
        return self._routine

    @routine.setter
    def routine(self, routine):
        """Sets the routine of this StepEntry.

        Output only. The name of the routine this step entry belongs to. A routine name is the subworkflow name defined in the YAML source code. The top level routine name is `main`.

        :param routine: The routine of this StepEntry.
        :type routine: str
        """

        self._routine = routine

    @property
    def state(self):
        """Gets the state of this StepEntry.

        Output only. The state of the step entry.

        :return: The state of this StepEntry.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StepEntry.

        Output only. The state of the step entry.

        :param state: The state of this StepEntry.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "STATE_IN_PROGRESS", "STATE_SUCCEEDED", "STATE_FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def step(self):
        """Gets the step of this StepEntry.

        Output only. The name of the step this step entry belongs to.

        :return: The step of this StepEntry.
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this StepEntry.

        Output only. The name of the step this step entry belongs to.

        :param step: The step of this StepEntry.
        :type step: str
        """

        self._step = step

    @property
    def step_entry_metadata(self):
        """Gets the step_entry_metadata of this StepEntry.


        :return: The step_entry_metadata of this StepEntry.
        :rtype: StepEntryMetadata
        """
        return self._step_entry_metadata

    @step_entry_metadata.setter
    def step_entry_metadata(self, step_entry_metadata):
        """Sets the step_entry_metadata of this StepEntry.


        :param step_entry_metadata: The step_entry_metadata of this StepEntry.
        :type step_entry_metadata: StepEntryMetadata
        """

        self._step_entry_metadata = step_entry_metadata

    @property
    def step_type(self):
        """Gets the step_type of this StepEntry.

        Output only. The type of the step this step entry belongs to.

        :return: The step_type of this StepEntry.
        :rtype: str
        """
        return self._step_type

    @step_type.setter
    def step_type(self, step_type):
        """Sets the step_type of this StepEntry.

        Output only. The type of the step this step entry belongs to.

        :param step_type: The step_type of this StepEntry.
        :type step_type: str
        """
        allowed_values = ["STEP_TYPE_UNSPECIFIED", "STEP_ASSIGN", "STEP_STD_LIB_CALL", "STEP_CONNECTOR_CALL", "STEP_SUBWORKFLOW_CALL", "STEP_CALL", "STEP_SWITCH", "STEP_CONDITION", "STEP_FOR", "STEP_FOR_ITERATION", "STEP_PARALLEL_FOR", "STEP_PARALLEL_BRANCH", "STEP_PARALLEL_BRANCH_ENTRY", "STEP_TRY_RETRY_EXCEPT", "STEP_TRY", "STEP_RETRY", "STEP_EXCEPT", "STEP_RETURN", "STEP_RAISE", "STEP_GOTO"]  # noqa: E501
        if step_type not in allowed_values:
            raise ValueError(
                "Invalid value for `step_type` ({0}), must be one of {1}"
                .format(step_type, allowed_values)
            )

        self._step_type = step_type

    @property
    def update_time(self):
        """Gets the update_time of this StepEntry.

        Output only. The most recently updated time of the step entry.

        :return: The update_time of this StepEntry.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this StepEntry.

        Output only. The most recently updated time of the step entry.

        :param update_time: The update_time of this StepEntry.
        :type update_time: str
        """

        self._update_time = update_time
