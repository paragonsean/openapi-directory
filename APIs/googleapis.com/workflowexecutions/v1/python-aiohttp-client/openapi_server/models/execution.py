# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.state_error import StateError
from openapi_server.models.status import Status
from openapi_server import util


class Execution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, argument: str=None, call_log_level: str=None, create_time: str=None, disable_concurrency_quota_overflow_buffering: bool=None, duration: str=None, end_time: str=None, error: Error=None, labels: Dict[str, str]=None, name: str=None, result: str=None, start_time: str=None, state: str=None, state_error: StateError=None, status: Status=None, workflow_revision_id: str=None):
        """Execution - a model defined in OpenAPI

        :param argument: The argument of this Execution.
        :param call_log_level: The call_log_level of this Execution.
        :param create_time: The create_time of this Execution.
        :param disable_concurrency_quota_overflow_buffering: The disable_concurrency_quota_overflow_buffering of this Execution.
        :param duration: The duration of this Execution.
        :param end_time: The end_time of this Execution.
        :param error: The error of this Execution.
        :param labels: The labels of this Execution.
        :param name: The name of this Execution.
        :param result: The result of this Execution.
        :param start_time: The start_time of this Execution.
        :param state: The state of this Execution.
        :param state_error: The state_error of this Execution.
        :param status: The status of this Execution.
        :param workflow_revision_id: The workflow_revision_id of this Execution.
        """
        self.openapi_types = {
            'argument': str,
            'call_log_level': str,
            'create_time': str,
            'disable_concurrency_quota_overflow_buffering': bool,
            'duration': str,
            'end_time': str,
            'error': Error,
            'labels': Dict[str, str],
            'name': str,
            'result': str,
            'start_time': str,
            'state': str,
            'state_error': StateError,
            'status': Status,
            'workflow_revision_id': str
        }

        self.attribute_map = {
            'argument': 'argument',
            'call_log_level': 'callLogLevel',
            'create_time': 'createTime',
            'disable_concurrency_quota_overflow_buffering': 'disableConcurrencyQuotaOverflowBuffering',
            'duration': 'duration',
            'end_time': 'endTime',
            'error': 'error',
            'labels': 'labels',
            'name': 'name',
            'result': 'result',
            'start_time': 'startTime',
            'state': 'state',
            'state_error': 'stateError',
            'status': 'status',
            'workflow_revision_id': 'workflowRevisionId'
        }

        self._argument = argument
        self._call_log_level = call_log_level
        self._create_time = create_time
        self._disable_concurrency_quota_overflow_buffering = disable_concurrency_quota_overflow_buffering
        self._duration = duration
        self._end_time = end_time
        self._error = error
        self._labels = labels
        self._name = name
        self._result = result
        self._start_time = start_time
        self._state = state
        self._state_error = state_error
        self._status = status
        self._workflow_revision_id = workflow_revision_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Execution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Execution of this Execution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def argument(self):
        """Gets the argument of this Execution.

        Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{\"argument\":\"{\\\"firstName\\\":\\\"FIRST\\\",\\\"lastName\\\":\\\"LAST\\\"}\"}'`

        :return: The argument of this Execution.
        :rtype: str
        """
        return self._argument

    @argument.setter
    def argument(self, argument):
        """Sets the argument of this Execution.

        Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{\"argument\":\"{\\\"firstName\\\":\\\"FIRST\\\",\\\"lastName\\\":\\\"LAST\\\"}\"}'`

        :param argument: The argument of this Execution.
        :type argument: str
        """

        self._argument = argument

    @property
    def call_log_level(self):
        """Gets the call_log_level of this Execution.

        The call logging level associated to this execution.

        :return: The call_log_level of this Execution.
        :rtype: str
        """
        return self._call_log_level

    @call_log_level.setter
    def call_log_level(self, call_log_level):
        """Sets the call_log_level of this Execution.

        The call logging level associated to this execution.

        :param call_log_level: The call_log_level of this Execution.
        :type call_log_level: str
        """
        allowed_values = ["CALL_LOG_LEVEL_UNSPECIFIED", "LOG_ALL_CALLS", "LOG_ERRORS_ONLY", "LOG_NONE"]  # noqa: E501
        if call_log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `call_log_level` ({0}), must be one of {1}"
                .format(call_log_level, allowed_values)
            )

        self._call_log_level = call_log_level

    @property
    def create_time(self):
        """Gets the create_time of this Execution.

        Output only. Marks the creation of the execution.

        :return: The create_time of this Execution.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Execution.

        Output only. Marks the creation of the execution.

        :param create_time: The create_time of this Execution.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def disable_concurrency_quota_overflow_buffering(self):
        """Gets the disable_concurrency_quota_overflow_buffering of this Execution.

        Optional. If set to true, the execution will not be backlogged when the concurrency quota is exhausted. The backlog execution starts when the concurrency quota becomes available.

        :return: The disable_concurrency_quota_overflow_buffering of this Execution.
        :rtype: bool
        """
        return self._disable_concurrency_quota_overflow_buffering

    @disable_concurrency_quota_overflow_buffering.setter
    def disable_concurrency_quota_overflow_buffering(self, disable_concurrency_quota_overflow_buffering):
        """Sets the disable_concurrency_quota_overflow_buffering of this Execution.

        Optional. If set to true, the execution will not be backlogged when the concurrency quota is exhausted. The backlog execution starts when the concurrency quota becomes available.

        :param disable_concurrency_quota_overflow_buffering: The disable_concurrency_quota_overflow_buffering of this Execution.
        :type disable_concurrency_quota_overflow_buffering: bool
        """

        self._disable_concurrency_quota_overflow_buffering = disable_concurrency_quota_overflow_buffering

    @property
    def duration(self):
        """Gets the duration of this Execution.

        Output only. Measures the duration of the execution.

        :return: The duration of this Execution.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Execution.

        Output only. Measures the duration of the execution.

        :param duration: The duration of this Execution.
        :type duration: str
        """

        self._duration = duration

    @property
    def end_time(self):
        """Gets the end_time of this Execution.

        Output only. Marks the end of execution, successful or not.

        :return: The end_time of this Execution.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Execution.

        Output only. Marks the end of execution, successful or not.

        :param end_time: The end_time of this Execution.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def error(self):
        """Gets the error of this Execution.


        :return: The error of this Execution.
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Execution.


        :param error: The error of this Execution.
        :type error: Error
        """

        self._error = error

    @property
    def labels(self):
        """Gets the labels of this Execution.

        Labels associated with this execution. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed. By default, labels are inherited from the workflow but are overridden by any labels associated with the execution.

        :return: The labels of this Execution.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Execution.

        Labels associated with this execution. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed. By default, labels are inherited from the workflow but are overridden by any labels associated with the execution.

        :param labels: The labels of this Execution.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Execution.

        Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}

        :return: The name of this Execution.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Execution.

        Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}

        :param name: The name of this Execution.
        :type name: str
        """

        self._name = name

    @property
    def result(self):
        """Gets the result of this Execution.

        Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.

        :return: The result of this Execution.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Execution.

        Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.

        :param result: The result of this Execution.
        :type result: str
        """

        self._result = result

    @property
    def start_time(self):
        """Gets the start_time of this Execution.

        Output only. Marks the beginning of execution.

        :return: The start_time of this Execution.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Execution.

        Output only. Marks the beginning of execution.

        :param start_time: The start_time of this Execution.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this Execution.

        Output only. Current state of the execution.

        :return: The state of this Execution.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Execution.

        Output only. Current state of the execution.

        :param state: The state of this Execution.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "SUCCEEDED", "FAILED", "CANCELLED", "UNAVAILABLE", "QUEUED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_error(self):
        """Gets the state_error of this Execution.


        :return: The state_error of this Execution.
        :rtype: StateError
        """
        return self._state_error

    @state_error.setter
    def state_error(self, state_error):
        """Sets the state_error of this Execution.


        :param state_error: The state_error of this Execution.
        :type state_error: StateError
        """

        self._state_error = state_error

    @property
    def status(self):
        """Gets the status of this Execution.


        :return: The status of this Execution.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Execution.


        :param status: The status of this Execution.
        :type status: Status
        """

        self._status = status

    @property
    def workflow_revision_id(self):
        """Gets the workflow_revision_id of this Execution.

        Output only. Revision of the workflow this execution is using.

        :return: The workflow_revision_id of this Execution.
        :rtype: str
        """
        return self._workflow_revision_id

    @workflow_revision_id.setter
    def workflow_revision_id(self, workflow_revision_id):
        """Sets the workflow_revision_id of this Execution.

        Output only. Revision of the workflow this execution is using.

        :param workflow_revision_id: The workflow_revision_id of this Execution.
        :type workflow_revision_id: str
        """

        self._workflow_revision_id = workflow_revision_id
