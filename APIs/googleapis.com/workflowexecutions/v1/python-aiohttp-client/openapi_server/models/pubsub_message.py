# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PubsubMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, data: str=None, message_id: str=None, ordering_key: str=None, publish_time: str=None):
        """PubsubMessage - a model defined in OpenAPI

        :param attributes: The attributes of this PubsubMessage.
        :param data: The data of this PubsubMessage.
        :param message_id: The message_id of this PubsubMessage.
        :param ordering_key: The ordering_key of this PubsubMessage.
        :param publish_time: The publish_time of this PubsubMessage.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'data': str,
            'message_id': str,
            'ordering_key': str,
            'publish_time': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'data': 'data',
            'message_id': 'messageId',
            'ordering_key': 'orderingKey',
            'publish_time': 'publishTime'
        }

        self._attributes = attributes
        self._data = data
        self._message_id = message_id
        self._ordering_key = ordering_key
        self._publish_time = publish_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PubsubMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PubsubMessage of this PubsubMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this PubsubMessage.

        Optional. Attributes for this message. If this field is empty, the message must contain non-empty data. This can be used to filter messages on the subscription.

        :return: The attributes of this PubsubMessage.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PubsubMessage.

        Optional. Attributes for this message. If this field is empty, the message must contain non-empty data. This can be used to filter messages on the subscription.

        :param attributes: The attributes of this PubsubMessage.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def data(self):
        """Gets the data of this PubsubMessage.

        Optional. The message data field. If this field is empty, the message must contain at least one attribute.

        :return: The data of this PubsubMessage.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PubsubMessage.

        Optional. The message data field. If this field is empty, the message must contain at least one attribute.

        :param data: The data of this PubsubMessage.
        :type data: str
        """

        self._data = data

    @property
    def message_id(self):
        """Gets the message_id of this PubsubMessage.

        ID of this message, assigned by the server when the message is published. Guaranteed to be unique within the topic. This value may be read by a subscriber that receives a `PubsubMessage` via a `Pull` call or a push delivery. It must not be populated by the publisher in a `Publish` call.

        :return: The message_id of this PubsubMessage.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this PubsubMessage.

        ID of this message, assigned by the server when the message is published. Guaranteed to be unique within the topic. This value may be read by a subscriber that receives a `PubsubMessage` via a `Pull` call or a push delivery. It must not be populated by the publisher in a `Publish` call.

        :param message_id: The message_id of this PubsubMessage.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def ordering_key(self):
        """Gets the ordering_key of this PubsubMessage.

        Optional. If non-empty, identifies related messages for which publish order should be respected. If a `Subscription` has `enable_message_ordering` set to `true`, messages published with the same non-empty `ordering_key` value will be delivered to subscribers in the order in which they are received by the Pub/Sub system. All `PubsubMessage`s published in a given `PublishRequest` must specify the same `ordering_key` value. For more information, see [ordering messages](https://cloud.google.com/pubsub/docs/ordering).

        :return: The ordering_key of this PubsubMessage.
        :rtype: str
        """
        return self._ordering_key

    @ordering_key.setter
    def ordering_key(self, ordering_key):
        """Sets the ordering_key of this PubsubMessage.

        Optional. If non-empty, identifies related messages for which publish order should be respected. If a `Subscription` has `enable_message_ordering` set to `true`, messages published with the same non-empty `ordering_key` value will be delivered to subscribers in the order in which they are received by the Pub/Sub system. All `PubsubMessage`s published in a given `PublishRequest` must specify the same `ordering_key` value. For more information, see [ordering messages](https://cloud.google.com/pubsub/docs/ordering).

        :param ordering_key: The ordering_key of this PubsubMessage.
        :type ordering_key: str
        """

        self._ordering_key = ordering_key

    @property
    def publish_time(self):
        """Gets the publish_time of this PubsubMessage.

        The time at which the message was published, populated by the server when it receives the `Publish` call. It must not be populated by the publisher in a `Publish` call.

        :return: The publish_time of this PubsubMessage.
        :rtype: str
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time):
        """Sets the publish_time of this PubsubMessage.

        The time at which the message was published, populated by the server when it receives the `Publish` call. It must not be populated by the publisher in a `Publish` call.

        :param publish_time: The publish_time of this PubsubMessage.
        :type publish_time: str
        """

        self._publish_time = publish_time
