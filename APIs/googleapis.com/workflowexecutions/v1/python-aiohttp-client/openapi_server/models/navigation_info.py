# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NavigationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: List[str]=None, next: str=None, parent: str=None, previous: str=None):
        """NavigationInfo - a model defined in OpenAPI

        :param children: The children of this NavigationInfo.
        :param next: The next of this NavigationInfo.
        :param parent: The parent of this NavigationInfo.
        :param previous: The previous of this NavigationInfo.
        """
        self.openapi_types = {
            'children': List[str],
            'next': str,
            'parent': str,
            'previous': str
        }

        self.attribute_map = {
            'children': 'children',
            'next': 'next',
            'parent': 'parent',
            'previous': 'previous'
        }

        self._children = children
        self._next = next
        self._parent = parent
        self._previous = previous

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NavigationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NavigationInfo of this NavigationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this NavigationInfo.

        Step entries that can be reached by \"stepping into\" e.g. a subworkflow call.

        :return: The children of this NavigationInfo.
        :rtype: List[str]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this NavigationInfo.

        Step entries that can be reached by \"stepping into\" e.g. a subworkflow call.

        :param children: The children of this NavigationInfo.
        :type children: List[str]
        """

        self._children = children

    @property
    def next(self):
        """Gets the next of this NavigationInfo.

        The index of the next step in the current workflow, if any.

        :return: The next of this NavigationInfo.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this NavigationInfo.

        The index of the next step in the current workflow, if any.

        :param next: The next of this NavigationInfo.
        :type next: str
        """

        self._next = next

    @property
    def parent(self):
        """Gets the parent of this NavigationInfo.

        The step entry, if any, that can be reached by \"stepping out\" of the current workflow being executed.

        :return: The parent of this NavigationInfo.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this NavigationInfo.

        The step entry, if any, that can be reached by \"stepping out\" of the current workflow being executed.

        :param parent: The parent of this NavigationInfo.
        :type parent: str
        """

        self._parent = parent

    @property
    def previous(self):
        """Gets the previous of this NavigationInfo.

        The index of the previous step in the current workflow, if any.

        :return: The previous of this NavigationInfo.
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this NavigationInfo.

        The index of the previous step in the current workflow, if any.

        :param previous: The previous of this NavigationInfo.
        :type previous: str
        """

        self._previous = previous
