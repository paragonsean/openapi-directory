# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pubsub_message import PubsubMessage
from openapi_server import util


class TriggerPubsubExecutionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gcp_cloud_events_mode: str=None, delivery_attempt: int=None, message: PubsubMessage=None, subscription: str=None):
        """TriggerPubsubExecutionRequest - a model defined in OpenAPI

        :param gcp_cloud_events_mode: The gcp_cloud_events_mode of this TriggerPubsubExecutionRequest.
        :param delivery_attempt: The delivery_attempt of this TriggerPubsubExecutionRequest.
        :param message: The message of this TriggerPubsubExecutionRequest.
        :param subscription: The subscription of this TriggerPubsubExecutionRequest.
        """
        self.openapi_types = {
            'gcp_cloud_events_mode': str,
            'delivery_attempt': int,
            'message': PubsubMessage,
            'subscription': str
        }

        self.attribute_map = {
            'gcp_cloud_events_mode': 'GCPCloudEventsMode',
            'delivery_attempt': 'deliveryAttempt',
            'message': 'message',
            'subscription': 'subscription'
        }

        self._gcp_cloud_events_mode = gcp_cloud_events_mode
        self._delivery_attempt = delivery_attempt
        self._message = message
        self._subscription = subscription

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TriggerPubsubExecutionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TriggerPubsubExecutionRequest of this TriggerPubsubExecutionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gcp_cloud_events_mode(self):
        """Gets the gcp_cloud_events_mode of this TriggerPubsubExecutionRequest.

        Required. LINT: LEGACY_NAMES The query parameter value for __GCP_CloudEventsMode, set by the Eventarc service when configuring triggers.

        :return: The gcp_cloud_events_mode of this TriggerPubsubExecutionRequest.
        :rtype: str
        """
        return self._gcp_cloud_events_mode

    @gcp_cloud_events_mode.setter
    def gcp_cloud_events_mode(self, gcp_cloud_events_mode):
        """Sets the gcp_cloud_events_mode of this TriggerPubsubExecutionRequest.

        Required. LINT: LEGACY_NAMES The query parameter value for __GCP_CloudEventsMode, set by the Eventarc service when configuring triggers.

        :param gcp_cloud_events_mode: The gcp_cloud_events_mode of this TriggerPubsubExecutionRequest.
        :type gcp_cloud_events_mode: str
        """

        self._gcp_cloud_events_mode = gcp_cloud_events_mode

    @property
    def delivery_attempt(self):
        """Gets the delivery_attempt of this TriggerPubsubExecutionRequest.

        The number of attempts that have been made to deliver this message. This is set by Pub/Sub for subscriptions that have the \"dead letter\" feature enabled, and hence provided here for compatibility, but is ignored by Workflows.

        :return: The delivery_attempt of this TriggerPubsubExecutionRequest.
        :rtype: int
        """
        return self._delivery_attempt

    @delivery_attempt.setter
    def delivery_attempt(self, delivery_attempt):
        """Sets the delivery_attempt of this TriggerPubsubExecutionRequest.

        The number of attempts that have been made to deliver this message. This is set by Pub/Sub for subscriptions that have the \"dead letter\" feature enabled, and hence provided here for compatibility, but is ignored by Workflows.

        :param delivery_attempt: The delivery_attempt of this TriggerPubsubExecutionRequest.
        :type delivery_attempt: int
        """

        self._delivery_attempt = delivery_attempt

    @property
    def message(self):
        """Gets the message of this TriggerPubsubExecutionRequest.


        :return: The message of this TriggerPubsubExecutionRequest.
        :rtype: PubsubMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TriggerPubsubExecutionRequest.


        :param message: The message of this TriggerPubsubExecutionRequest.
        :type message: PubsubMessage
        """

        self._message = message

    @property
    def subscription(self):
        """Gets the subscription of this TriggerPubsubExecutionRequest.

        Required. The subscription of the Pub/Sub push notification. Format: projects/{project}/subscriptions/{sub}

        :return: The subscription of this TriggerPubsubExecutionRequest.
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this TriggerPubsubExecutionRequest.

        Required. The subscription of the Pub/Sub push notification. Format: projects/{project}/subscriptions/{sub}

        :param subscription: The subscription of this TriggerPubsubExecutionRequest.
        :type subscription: str
        """

        self._subscription = subscription
