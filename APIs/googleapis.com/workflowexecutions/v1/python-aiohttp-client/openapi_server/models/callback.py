# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Callback(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_payloads: List[str]=None, method: str=None, name: str=None, waiters: str=None):
        """Callback - a model defined in OpenAPI

        :param available_payloads: The available_payloads of this Callback.
        :param method: The method of this Callback.
        :param name: The name of this Callback.
        :param waiters: The waiters of this Callback.
        """
        self.openapi_types = {
            'available_payloads': List[str],
            'method': str,
            'name': str,
            'waiters': str
        }

        self.attribute_map = {
            'available_payloads': 'availablePayloads',
            'method': 'method',
            'name': 'name',
            'waiters': 'waiters'
        }

        self._available_payloads = available_payloads
        self._method = method
        self._name = name
        self._waiters = waiters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Callback':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Callback of this Callback.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_payloads(self):
        """Gets the available_payloads of this Callback.

        Output only. The payloads received by the callback that have not been processed by a waiting execution step.

        :return: The available_payloads of this Callback.
        :rtype: List[str]
        """
        return self._available_payloads

    @available_payloads.setter
    def available_payloads(self, available_payloads):
        """Sets the available_payloads of this Callback.

        Output only. The payloads received by the callback that have not been processed by a waiting execution step.

        :param available_payloads: The available_payloads of this Callback.
        :type available_payloads: List[str]
        """

        self._available_payloads = available_payloads

    @property
    def method(self):
        """Gets the method of this Callback.

        Output only. The method accepted by the callback. For example: GET, POST, PUT.

        :return: The method of this Callback.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Callback.

        Output only. The method accepted by the callback. For example: GET, POST, PUT.

        :param method: The method of this Callback.
        :type method: str
        """

        self._method = method

    @property
    def name(self):
        """Gets the name of this Callback.

        Output only. The resource name of the callback. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/callback/{callback}

        :return: The name of this Callback.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Callback.

        Output only. The resource name of the callback. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/callback/{callback}

        :param name: The name of this Callback.
        :type name: str
        """

        self._name = name

    @property
    def waiters(self):
        """Gets the waiters of this Callback.

        Output only. Number of execution steps waiting on this callback.

        :return: The waiters of this Callback.
        :rtype: str
        """
        return self._waiters

    @waiters.setter
    def waiters(self, waiters):
        """Sets the waiters of this Callback.

        Output only. Number of execution steps waiting on this callback.

        :param waiters: The waiters of this Callback.
        :type waiters: str
        """

        self._waiters = waiters
