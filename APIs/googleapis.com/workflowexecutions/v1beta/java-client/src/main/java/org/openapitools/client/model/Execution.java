/*
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A running instance of a [Workflow](/workflows/docs/reference/rest/v1beta/projects.locations.workflows).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:37.539190-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Execution {
  public static final String SERIALIZED_NAME_ARGUMENT = "argument";
  @SerializedName(SERIALIZED_NAME_ARGUMENT)
  private String argument;

  /**
   * The call logging level associated to this execution.
   */
  @JsonAdapter(CallLogLevelEnum.Adapter.class)
  public enum CallLogLevelEnum {
    CALL_LOG_LEVEL_UNSPECIFIED("CALL_LOG_LEVEL_UNSPECIFIED"),
    
    LOG_ALL_CALLS("LOG_ALL_CALLS"),
    
    LOG_ERRORS_ONLY("LOG_ERRORS_ONLY");

    private String value;

    CallLogLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CallLogLevelEnum fromValue(String value) {
      for (CallLogLevelEnum b : CallLogLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CallLogLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CallLogLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CallLogLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CallLogLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CallLogLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALL_LOG_LEVEL = "callLogLevel";
  @SerializedName(SERIALIZED_NAME_CALL_LOG_LEVEL)
  private CallLogLevelEnum callLogLevel;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Error error;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * Output only. Current state of the execution.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    CANCELLED("CANCELLED"),
    
    UNAVAILABLE("UNAVAILABLE"),
    
    QUEUED("QUEUED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_WORKFLOW_REVISION_ID = "workflowRevisionId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_REVISION_ID)
  private String workflowRevisionId;

  public Execution() {
  }

  public Execution(
     String endTime, 
     String name, 
     String result, 
     String startTime, 
     StateEnum state, 
     String workflowRevisionId
  ) {
    this();
    this.endTime = endTime;
    this.name = name;
    this.result = result;
    this.startTime = startTime;
    this.state = state;
    this.workflowRevisionId = workflowRevisionId;
  }

  public Execution argument(String argument) {
    this.argument = argument;
    return this;
  }

  /**
   * Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of &#x60;argument&#x60;. Example: &#x60;&#39;{\&quot;argument\&quot;:\&quot;{\\\&quot;firstName\\\&quot;:\\\&quot;FIRST\\\&quot;,\\\&quot;lastName\\\&quot;:\\\&quot;LAST\\\&quot;}\&quot;}&#39;&#x60;
   * @return argument
   */
  @javax.annotation.Nullable
  public String getArgument() {
    return argument;
  }

  public void setArgument(String argument) {
    this.argument = argument;
  }


  public Execution callLogLevel(CallLogLevelEnum callLogLevel) {
    this.callLogLevel = callLogLevel;
    return this;
  }

  /**
   * The call logging level associated to this execution.
   * @return callLogLevel
   */
  @javax.annotation.Nullable
  public CallLogLevelEnum getCallLogLevel() {
    return callLogLevel;
  }

  public void setCallLogLevel(CallLogLevelEnum callLogLevel) {
    this.callLogLevel = callLogLevel;
  }


  /**
   * Output only. Marks the end of execution, successful or not.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }



  public Execution error(Error error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Error getError() {
    return error;
  }

  public void setError(Error error) {
    this.error = error;
  }


  /**
   * Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Output of the execution represented as a JSON string. The value can only be present if the execution&#39;s state is &#x60;SUCCEEDED&#x60;.
   * @return result
   */
  @javax.annotation.Nullable
  public String getResult() {
    return result;
  }



  /**
   * Output only. Marks the beginning of execution.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }



  /**
   * Output only. Current state of the execution.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public Execution status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  /**
   * Output only. Revision of the workflow this execution is using.
   * @return workflowRevisionId
   */
  @javax.annotation.Nullable
  public String getWorkflowRevisionId() {
    return workflowRevisionId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Execution execution = (Execution) o;
    return Objects.equals(this.argument, execution.argument) &&
        Objects.equals(this.callLogLevel, execution.callLogLevel) &&
        Objects.equals(this.endTime, execution.endTime) &&
        Objects.equals(this.error, execution.error) &&
        Objects.equals(this.name, execution.name) &&
        Objects.equals(this.result, execution.result) &&
        Objects.equals(this.startTime, execution.startTime) &&
        Objects.equals(this.state, execution.state) &&
        Objects.equals(this.status, execution.status) &&
        Objects.equals(this.workflowRevisionId, execution.workflowRevisionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(argument, callLogLevel, endTime, error, name, result, startTime, state, status, workflowRevisionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Execution {\n");
    sb.append("    argument: ").append(toIndentedString(argument)).append("\n");
    sb.append("    callLogLevel: ").append(toIndentedString(callLogLevel)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    workflowRevisionId: ").append(toIndentedString(workflowRevisionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("argument");
    openapiFields.add("callLogLevel");
    openapiFields.add("endTime");
    openapiFields.add("error");
    openapiFields.add("name");
    openapiFields.add("result");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("workflowRevisionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Execution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Execution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Execution is not found in the empty JSON string", Execution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Execution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Execution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("argument") != null && !jsonObj.get("argument").isJsonNull()) && !jsonObj.get("argument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `argument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("argument").toString()));
      }
      if ((jsonObj.get("callLogLevel") != null && !jsonObj.get("callLogLevel").isJsonNull()) && !jsonObj.get("callLogLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callLogLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callLogLevel").toString()));
      }
      // validate the optional field `callLogLevel`
      if (jsonObj.get("callLogLevel") != null && !jsonObj.get("callLogLevel").isJsonNull()) {
        CallLogLevelEnum.validateJsonElement(jsonObj.get("callLogLevel"));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        Error.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("workflowRevisionId") != null && !jsonObj.get("workflowRevisionId").isJsonNull()) && !jsonObj.get("workflowRevisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflowRevisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflowRevisionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Execution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Execution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Execution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Execution.class));

       return (TypeAdapter<T>) new TypeAdapter<Execution>() {
           @Override
           public void write(JsonWriter out, Execution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Execution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Execution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Execution
   * @throws IOException if the JSON string is invalid with respect to Execution
   */
  public static Execution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Execution.class);
  }

  /**
   * Convert an instance of Execution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

