/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecution::OAIExecution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecution::OAIExecution() {
    this->initializeModel();
}

OAIExecution::~OAIExecution() {}

void OAIExecution::initializeModel() {

    m_argument_isSet = false;
    m_argument_isValid = false;

    m_call_log_level_isSet = false;
    m_call_log_level_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_workflow_revision_id_isSet = false;
    m_workflow_revision_id_isValid = false;
}

void OAIExecution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecution::fromJsonObject(QJsonObject json) {

    m_argument_isValid = ::OpenAPI::fromJsonValue(m_argument, json[QString("argument")]);
    m_argument_isSet = !json[QString("argument")].isNull() && m_argument_isValid;

    m_call_log_level_isValid = ::OpenAPI::fromJsonValue(m_call_log_level, json[QString("callLogLevel")]);
    m_call_log_level_isSet = !json[QString("callLogLevel")].isNull() && m_call_log_level_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_workflow_revision_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_revision_id, json[QString("workflowRevisionId")]);
    m_workflow_revision_id_isSet = !json[QString("workflowRevisionId")].isNull() && m_workflow_revision_id_isValid;
}

QString OAIExecution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecution::asJsonObject() const {
    QJsonObject obj;
    if (m_argument_isSet) {
        obj.insert(QString("argument"), ::OpenAPI::toJsonValue(m_argument));
    }
    if (m_call_log_level_isSet) {
        obj.insert(QString("callLogLevel"), ::OpenAPI::toJsonValue(m_call_log_level));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_workflow_revision_id_isSet) {
        obj.insert(QString("workflowRevisionId"), ::OpenAPI::toJsonValue(m_workflow_revision_id));
    }
    return obj;
}

QString OAIExecution::getArgument() const {
    return m_argument;
}
void OAIExecution::setArgument(const QString &argument) {
    m_argument = argument;
    m_argument_isSet = true;
}

bool OAIExecution::is_argument_Set() const{
    return m_argument_isSet;
}

bool OAIExecution::is_argument_Valid() const{
    return m_argument_isValid;
}

QString OAIExecution::getCallLogLevel() const {
    return m_call_log_level;
}
void OAIExecution::setCallLogLevel(const QString &call_log_level) {
    m_call_log_level = call_log_level;
    m_call_log_level_isSet = true;
}

bool OAIExecution::is_call_log_level_Set() const{
    return m_call_log_level_isSet;
}

bool OAIExecution::is_call_log_level_Valid() const{
    return m_call_log_level_isValid;
}

QString OAIExecution::getEndTime() const {
    return m_end_time;
}
void OAIExecution::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIExecution::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIExecution::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIError OAIExecution::getError() const {
    return m_error;
}
void OAIExecution::setError(const OAIError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIExecution::is_error_Set() const{
    return m_error_isSet;
}

bool OAIExecution::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIExecution::getName() const {
    return m_name;
}
void OAIExecution::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExecution::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExecution::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExecution::getResult() const {
    return m_result;
}
void OAIExecution::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIExecution::is_result_Set() const{
    return m_result_isSet;
}

bool OAIExecution::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIExecution::getStartTime() const {
    return m_start_time;
}
void OAIExecution::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIExecution::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIExecution::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIExecution::getState() const {
    return m_state;
}
void OAIExecution::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIExecution::is_state_Set() const{
    return m_state_isSet;
}

bool OAIExecution::is_state_Valid() const{
    return m_state_isValid;
}

OAIStatus OAIExecution::getStatus() const {
    return m_status;
}
void OAIExecution::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExecution::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExecution::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIExecution::getWorkflowRevisionId() const {
    return m_workflow_revision_id;
}
void OAIExecution::setWorkflowRevisionId(const QString &workflow_revision_id) {
    m_workflow_revision_id = workflow_revision_id;
    m_workflow_revision_id_isSet = true;
}

bool OAIExecution::is_workflow_revision_id_Set() const{
    return m_workflow_revision_id_isSet;
}

bool OAIExecution::is_workflow_revision_id_Valid() const{
    return m_workflow_revision_id_isValid;
}

bool OAIExecution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_argument_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_log_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
