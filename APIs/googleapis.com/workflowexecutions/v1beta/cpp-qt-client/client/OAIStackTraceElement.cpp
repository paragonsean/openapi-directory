/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackTraceElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackTraceElement::OAIStackTraceElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackTraceElement::OAIStackTraceElement() {
    this->initializeModel();
}

OAIStackTraceElement::~OAIStackTraceElement() {}

void OAIStackTraceElement::initializeModel() {

    m_position_isSet = false;
    m_position_isValid = false;

    m_routine_isSet = false;
    m_routine_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;
}

void OAIStackTraceElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackTraceElement::fromJsonObject(QJsonObject json) {

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_routine_isValid = ::OpenAPI::fromJsonValue(m_routine, json[QString("routine")]);
    m_routine_isSet = !json[QString("routine")].isNull() && m_routine_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("step")]);
    m_step_isSet = !json[QString("step")].isNull() && m_step_isValid;
}

QString OAIStackTraceElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackTraceElement::asJsonObject() const {
    QJsonObject obj;
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_routine_isSet) {
        obj.insert(QString("routine"), ::OpenAPI::toJsonValue(m_routine));
    }
    if (m_step_isSet) {
        obj.insert(QString("step"), ::OpenAPI::toJsonValue(m_step));
    }
    return obj;
}

OAIPosition OAIStackTraceElement::getPosition() const {
    return m_position;
}
void OAIStackTraceElement::setPosition(const OAIPosition &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIStackTraceElement::is_position_Set() const{
    return m_position_isSet;
}

bool OAIStackTraceElement::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIStackTraceElement::getRoutine() const {
    return m_routine;
}
void OAIStackTraceElement::setRoutine(const QString &routine) {
    m_routine = routine;
    m_routine_isSet = true;
}

bool OAIStackTraceElement::is_routine_Set() const{
    return m_routine_isSet;
}

bool OAIStackTraceElement::is_routine_Valid() const{
    return m_routine_isValid;
}

QString OAIStackTraceElement::getStep() const {
    return m_step;
}
void OAIStackTraceElement::setStep(const QString &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAIStackTraceElement::is_step_Set() const{
    return m_step_isSet;
}

bool OAIStackTraceElement::is_step_Valid() const{
    return m_step_isValid;
}

bool OAIStackTraceElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackTraceElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
