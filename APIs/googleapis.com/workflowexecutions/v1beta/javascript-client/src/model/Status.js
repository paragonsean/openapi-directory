/**
 * Workflow Executions API
 * Execute workflows created with Workflows API.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Step from './Step';

/**
 * The Status model module.
 * @module model/Status
 * @version v1beta
 */
class Status {
    /**
     * Constructs a new <code>Status</code>.
     * Represents the current status of this execution.
     * @alias module:model/Status
     */
    constructor() { 
        
        Status.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Status</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Status} obj Optional instance to populate.
     * @return {module:model/Status} The populated <code>Status</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Status();

            if (data.hasOwnProperty('currentSteps')) {
                obj['currentSteps'] = ApiClient.convertToType(data['currentSteps'], [Step]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Status</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Status</code>.
     */
    static validateJSON(data) {
        if (data['currentSteps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['currentSteps'])) {
                throw new Error("Expected the field `currentSteps` to be an array in the JSON data but got " + data['currentSteps']);
            }
            // validate the optional field `currentSteps` (array)
            for (const item of data['currentSteps']) {
                Step.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A list of currently executing or last executed step names for the workflow execution currently running. If the workflow has succeeded or failed, this is the last attempted or executed step. Presently, if the current step is inside a subworkflow, the list only includes that step. In the future, the list will contain items for each step in the call stack, starting with the outermost step in the `main` subworkflow, and ending with the most deeply nested step.
 * @member {Array.<module:model/Step>} currentSteps
 */
Status.prototype['currentSteps'] = undefined;






export default Status;

