/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersion::OAIVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersion::OAIVersion() {
    this->initializeModel();
}

OAIVersion::~OAIVersion() {}

void OAIVersion::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_related_tags_isSet = false;
    m_related_tags_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersion::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_related_tags_isValid = ::OpenAPI::fromJsonValue(m_related_tags, json[QString("relatedTags")]);
    m_related_tags_isSet = !json[QString("relatedTags")].isNull() && m_related_tags_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_related_tags.size() > 0) {
        obj.insert(QString("relatedTags"), ::OpenAPI::toJsonValue(m_related_tags));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIVersion::getCreateTime() const {
    return m_create_time;
}
void OAIVersion::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIVersion::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIVersion::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIVersion::getDescription() const {
    return m_description;
}
void OAIVersion::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVersion::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVersion::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QJsonValue> OAIVersion::getMetadata() const {
    return m_metadata;
}
void OAIVersion::setMetadata(const QMap<QString, QJsonValue> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIVersion::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIVersion::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIVersion::getName() const {
    return m_name;
}
void OAIVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVersion::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITag> OAIVersion::getRelatedTags() const {
    return m_related_tags;
}
void OAIVersion::setRelatedTags(const QList<OAITag> &related_tags) {
    m_related_tags = related_tags;
    m_related_tags_isSet = true;
}

bool OAIVersion::is_related_tags_Set() const{
    return m_related_tags_isSet;
}

bool OAIVersion::is_related_tags_Valid() const{
    return m_related_tags_isValid;
}

QString OAIVersion::getUpdateTime() const {
    return m_update_time;
}
void OAIVersion::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIVersion::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIVersion::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
