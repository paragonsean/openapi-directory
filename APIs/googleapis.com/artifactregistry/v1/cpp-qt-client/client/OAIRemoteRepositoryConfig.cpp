/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteRepositoryConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteRepositoryConfig::OAIRemoteRepositoryConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteRepositoryConfig::OAIRemoteRepositoryConfig() {
    this->initializeModel();
}

OAIRemoteRepositoryConfig::~OAIRemoteRepositoryConfig() {}

void OAIRemoteRepositoryConfig::initializeModel() {

    m_apt_repository_isSet = false;
    m_apt_repository_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_docker_repository_isSet = false;
    m_docker_repository_isValid = false;

    m_maven_repository_isSet = false;
    m_maven_repository_isValid = false;

    m_npm_repository_isSet = false;
    m_npm_repository_isValid = false;

    m_python_repository_isSet = false;
    m_python_repository_isValid = false;

    m_upstream_credentials_isSet = false;
    m_upstream_credentials_isValid = false;

    m_yum_repository_isSet = false;
    m_yum_repository_isValid = false;
}

void OAIRemoteRepositoryConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteRepositoryConfig::fromJsonObject(QJsonObject json) {

    m_apt_repository_isValid = ::OpenAPI::fromJsonValue(m_apt_repository, json[QString("aptRepository")]);
    m_apt_repository_isSet = !json[QString("aptRepository")].isNull() && m_apt_repository_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_docker_repository_isValid = ::OpenAPI::fromJsonValue(m_docker_repository, json[QString("dockerRepository")]);
    m_docker_repository_isSet = !json[QString("dockerRepository")].isNull() && m_docker_repository_isValid;

    m_maven_repository_isValid = ::OpenAPI::fromJsonValue(m_maven_repository, json[QString("mavenRepository")]);
    m_maven_repository_isSet = !json[QString("mavenRepository")].isNull() && m_maven_repository_isValid;

    m_npm_repository_isValid = ::OpenAPI::fromJsonValue(m_npm_repository, json[QString("npmRepository")]);
    m_npm_repository_isSet = !json[QString("npmRepository")].isNull() && m_npm_repository_isValid;

    m_python_repository_isValid = ::OpenAPI::fromJsonValue(m_python_repository, json[QString("pythonRepository")]);
    m_python_repository_isSet = !json[QString("pythonRepository")].isNull() && m_python_repository_isValid;

    m_upstream_credentials_isValid = ::OpenAPI::fromJsonValue(m_upstream_credentials, json[QString("upstreamCredentials")]);
    m_upstream_credentials_isSet = !json[QString("upstreamCredentials")].isNull() && m_upstream_credentials_isValid;

    m_yum_repository_isValid = ::OpenAPI::fromJsonValue(m_yum_repository, json[QString("yumRepository")]);
    m_yum_repository_isSet = !json[QString("yumRepository")].isNull() && m_yum_repository_isValid;
}

QString OAIRemoteRepositoryConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteRepositoryConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_apt_repository.isSet()) {
        obj.insert(QString("aptRepository"), ::OpenAPI::toJsonValue(m_apt_repository));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_docker_repository.isSet()) {
        obj.insert(QString("dockerRepository"), ::OpenAPI::toJsonValue(m_docker_repository));
    }
    if (m_maven_repository.isSet()) {
        obj.insert(QString("mavenRepository"), ::OpenAPI::toJsonValue(m_maven_repository));
    }
    if (m_npm_repository.isSet()) {
        obj.insert(QString("npmRepository"), ::OpenAPI::toJsonValue(m_npm_repository));
    }
    if (m_python_repository.isSet()) {
        obj.insert(QString("pythonRepository"), ::OpenAPI::toJsonValue(m_python_repository));
    }
    if (m_upstream_credentials.isSet()) {
        obj.insert(QString("upstreamCredentials"), ::OpenAPI::toJsonValue(m_upstream_credentials));
    }
    if (m_yum_repository.isSet()) {
        obj.insert(QString("yumRepository"), ::OpenAPI::toJsonValue(m_yum_repository));
    }
    return obj;
}

OAIAptRepository OAIRemoteRepositoryConfig::getAptRepository() const {
    return m_apt_repository;
}
void OAIRemoteRepositoryConfig::setAptRepository(const OAIAptRepository &apt_repository) {
    m_apt_repository = apt_repository;
    m_apt_repository_isSet = true;
}

bool OAIRemoteRepositoryConfig::is_apt_repository_Set() const{
    return m_apt_repository_isSet;
}

bool OAIRemoteRepositoryConfig::is_apt_repository_Valid() const{
    return m_apt_repository_isValid;
}

QString OAIRemoteRepositoryConfig::getDescription() const {
    return m_description;
}
void OAIRemoteRepositoryConfig::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRemoteRepositoryConfig::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRemoteRepositoryConfig::is_description_Valid() const{
    return m_description_isValid;
}

OAIDockerRepository OAIRemoteRepositoryConfig::getDockerRepository() const {
    return m_docker_repository;
}
void OAIRemoteRepositoryConfig::setDockerRepository(const OAIDockerRepository &docker_repository) {
    m_docker_repository = docker_repository;
    m_docker_repository_isSet = true;
}

bool OAIRemoteRepositoryConfig::is_docker_repository_Set() const{
    return m_docker_repository_isSet;
}

bool OAIRemoteRepositoryConfig::is_docker_repository_Valid() const{
    return m_docker_repository_isValid;
}

OAIMavenRepository OAIRemoteRepositoryConfig::getMavenRepository() const {
    return m_maven_repository;
}
void OAIRemoteRepositoryConfig::setMavenRepository(const OAIMavenRepository &maven_repository) {
    m_maven_repository = maven_repository;
    m_maven_repository_isSet = true;
}

bool OAIRemoteRepositoryConfig::is_maven_repository_Set() const{
    return m_maven_repository_isSet;
}

bool OAIRemoteRepositoryConfig::is_maven_repository_Valid() const{
    return m_maven_repository_isValid;
}

OAINpmRepository OAIRemoteRepositoryConfig::getNpmRepository() const {
    return m_npm_repository;
}
void OAIRemoteRepositoryConfig::setNpmRepository(const OAINpmRepository &npm_repository) {
    m_npm_repository = npm_repository;
    m_npm_repository_isSet = true;
}

bool OAIRemoteRepositoryConfig::is_npm_repository_Set() const{
    return m_npm_repository_isSet;
}

bool OAIRemoteRepositoryConfig::is_npm_repository_Valid() const{
    return m_npm_repository_isValid;
}

OAIPythonRepository OAIRemoteRepositoryConfig::getPythonRepository() const {
    return m_python_repository;
}
void OAIRemoteRepositoryConfig::setPythonRepository(const OAIPythonRepository &python_repository) {
    m_python_repository = python_repository;
    m_python_repository_isSet = true;
}

bool OAIRemoteRepositoryConfig::is_python_repository_Set() const{
    return m_python_repository_isSet;
}

bool OAIRemoteRepositoryConfig::is_python_repository_Valid() const{
    return m_python_repository_isValid;
}

OAIUpstreamCredentials OAIRemoteRepositoryConfig::getUpstreamCredentials() const {
    return m_upstream_credentials;
}
void OAIRemoteRepositoryConfig::setUpstreamCredentials(const OAIUpstreamCredentials &upstream_credentials) {
    m_upstream_credentials = upstream_credentials;
    m_upstream_credentials_isSet = true;
}

bool OAIRemoteRepositoryConfig::is_upstream_credentials_Set() const{
    return m_upstream_credentials_isSet;
}

bool OAIRemoteRepositoryConfig::is_upstream_credentials_Valid() const{
    return m_upstream_credentials_isValid;
}

OAIYumRepository OAIRemoteRepositoryConfig::getYumRepository() const {
    return m_yum_repository;
}
void OAIRemoteRepositoryConfig::setYumRepository(const OAIYumRepository &yum_repository) {
    m_yum_repository = yum_repository;
    m_yum_repository_isSet = true;
}

bool OAIRemoteRepositoryConfig::is_yum_repository_Set() const{
    return m_yum_repository_isSet;
}

bool OAIRemoteRepositoryConfig::is_yum_repository_Valid() const{
    return m_yum_repository_isValid;
}

bool OAIRemoteRepositoryConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apt_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maven_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_npm_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_python_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upstream_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_yum_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteRepositoryConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
