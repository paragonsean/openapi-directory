/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICleanupPolicyMostRecentVersions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICleanupPolicyMostRecentVersions::OAICleanupPolicyMostRecentVersions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICleanupPolicyMostRecentVersions::OAICleanupPolicyMostRecentVersions() {
    this->initializeModel();
}

OAICleanupPolicyMostRecentVersions::~OAICleanupPolicyMostRecentVersions() {}

void OAICleanupPolicyMostRecentVersions::initializeModel() {

    m_keep_count_isSet = false;
    m_keep_count_isValid = false;

    m_package_name_prefixes_isSet = false;
    m_package_name_prefixes_isValid = false;
}

void OAICleanupPolicyMostRecentVersions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICleanupPolicyMostRecentVersions::fromJsonObject(QJsonObject json) {

    m_keep_count_isValid = ::OpenAPI::fromJsonValue(m_keep_count, json[QString("keepCount")]);
    m_keep_count_isSet = !json[QString("keepCount")].isNull() && m_keep_count_isValid;

    m_package_name_prefixes_isValid = ::OpenAPI::fromJsonValue(m_package_name_prefixes, json[QString("packageNamePrefixes")]);
    m_package_name_prefixes_isSet = !json[QString("packageNamePrefixes")].isNull() && m_package_name_prefixes_isValid;
}

QString OAICleanupPolicyMostRecentVersions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICleanupPolicyMostRecentVersions::asJsonObject() const {
    QJsonObject obj;
    if (m_keep_count_isSet) {
        obj.insert(QString("keepCount"), ::OpenAPI::toJsonValue(m_keep_count));
    }
    if (m_package_name_prefixes.size() > 0) {
        obj.insert(QString("packageNamePrefixes"), ::OpenAPI::toJsonValue(m_package_name_prefixes));
    }
    return obj;
}

qint32 OAICleanupPolicyMostRecentVersions::getKeepCount() const {
    return m_keep_count;
}
void OAICleanupPolicyMostRecentVersions::setKeepCount(const qint32 &keep_count) {
    m_keep_count = keep_count;
    m_keep_count_isSet = true;
}

bool OAICleanupPolicyMostRecentVersions::is_keep_count_Set() const{
    return m_keep_count_isSet;
}

bool OAICleanupPolicyMostRecentVersions::is_keep_count_Valid() const{
    return m_keep_count_isValid;
}

QList<QString> OAICleanupPolicyMostRecentVersions::getPackageNamePrefixes() const {
    return m_package_name_prefixes;
}
void OAICleanupPolicyMostRecentVersions::setPackageNamePrefixes(const QList<QString> &package_name_prefixes) {
    m_package_name_prefixes = package_name_prefixes;
    m_package_name_prefixes_isSet = true;
}

bool OAICleanupPolicyMostRecentVersions::is_package_name_prefixes_Set() const{
    return m_package_name_prefixes_isSet;
}

bool OAICleanupPolicyMostRecentVersions::is_package_name_prefixes_Valid() const{
    return m_package_name_prefixes_isValid;
}

bool OAICleanupPolicyMostRecentVersions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keep_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICleanupPolicyMostRecentVersions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
