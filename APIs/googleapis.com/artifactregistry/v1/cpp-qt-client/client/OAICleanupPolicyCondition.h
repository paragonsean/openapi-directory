/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICleanupPolicyCondition.h
 *
 * CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries are set, all must be satisfied for the condition to be satisfied.
 */

#ifndef OAICleanupPolicyCondition_H
#define OAICleanupPolicyCondition_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICleanupPolicyCondition : public OAIObject {
public:
    OAICleanupPolicyCondition();
    OAICleanupPolicyCondition(QString json);
    ~OAICleanupPolicyCondition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNewerThan() const;
    void setNewerThan(const QString &newer_than);
    bool is_newer_than_Set() const;
    bool is_newer_than_Valid() const;

    QString getOlderThan() const;
    void setOlderThan(const QString &older_than);
    bool is_older_than_Set() const;
    bool is_older_than_Valid() const;

    QList<QString> getPackageNamePrefixes() const;
    void setPackageNamePrefixes(const QList<QString> &package_name_prefixes);
    bool is_package_name_prefixes_Set() const;
    bool is_package_name_prefixes_Valid() const;

    QList<QString> getTagPrefixes() const;
    void setTagPrefixes(const QList<QString> &tag_prefixes);
    bool is_tag_prefixes_Set() const;
    bool is_tag_prefixes_Valid() const;

    QString getTagState() const;
    void setTagState(const QString &tag_state);
    bool is_tag_state_Set() const;
    bool is_tag_state_Valid() const;

    QList<QString> getVersionNamePrefixes() const;
    void setVersionNamePrefixes(const QList<QString> &version_name_prefixes);
    bool is_version_name_prefixes_Set() const;
    bool is_version_name_prefixes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_newer_than;
    bool m_newer_than_isSet;
    bool m_newer_than_isValid;

    QString m_older_than;
    bool m_older_than_isSet;
    bool m_older_than_isValid;

    QList<QString> m_package_name_prefixes;
    bool m_package_name_prefixes_isSet;
    bool m_package_name_prefixes_isValid;

    QList<QString> m_tag_prefixes;
    bool m_tag_prefixes_isSet;
    bool m_tag_prefixes_isValid;

    QString m_tag_state;
    bool m_tag_state_isSet;
    bool m_tag_state_isValid;

    QList<QString> m_version_name_prefixes;
    bool m_version_name_prefixes_isSet;
    bool m_version_name_prefixes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICleanupPolicyCondition)

#endif // OAICleanupPolicyCondition_H
