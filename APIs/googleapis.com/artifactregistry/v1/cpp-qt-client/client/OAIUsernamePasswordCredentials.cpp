/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsernamePasswordCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsernamePasswordCredentials::OAIUsernamePasswordCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsernamePasswordCredentials::OAIUsernamePasswordCredentials() {
    this->initializeModel();
}

OAIUsernamePasswordCredentials::~OAIUsernamePasswordCredentials() {}

void OAIUsernamePasswordCredentials::initializeModel() {

    m_password_secret_version_isSet = false;
    m_password_secret_version_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUsernamePasswordCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsernamePasswordCredentials::fromJsonObject(QJsonObject json) {

    m_password_secret_version_isValid = ::OpenAPI::fromJsonValue(m_password_secret_version, json[QString("passwordSecretVersion")]);
    m_password_secret_version_isSet = !json[QString("passwordSecretVersion")].isNull() && m_password_secret_version_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUsernamePasswordCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsernamePasswordCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_password_secret_version_isSet) {
        obj.insert(QString("passwordSecretVersion"), ::OpenAPI::toJsonValue(m_password_secret_version));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIUsernamePasswordCredentials::getPasswordSecretVersion() const {
    return m_password_secret_version;
}
void OAIUsernamePasswordCredentials::setPasswordSecretVersion(const QString &password_secret_version) {
    m_password_secret_version = password_secret_version;
    m_password_secret_version_isSet = true;
}

bool OAIUsernamePasswordCredentials::is_password_secret_version_Set() const{
    return m_password_secret_version_isSet;
}

bool OAIUsernamePasswordCredentials::is_password_secret_version_Valid() const{
    return m_password_secret_version_isValid;
}

QString OAIUsernamePasswordCredentials::getUsername() const {
    return m_username;
}
void OAIUsernamePasswordCredentials::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUsernamePasswordCredentials::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUsernamePasswordCredentials::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUsernamePasswordCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_password_secret_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsernamePasswordCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
