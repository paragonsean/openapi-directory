/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICleanupPolicyCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICleanupPolicyCondition::OAICleanupPolicyCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICleanupPolicyCondition::OAICleanupPolicyCondition() {
    this->initializeModel();
}

OAICleanupPolicyCondition::~OAICleanupPolicyCondition() {}

void OAICleanupPolicyCondition::initializeModel() {

    m_newer_than_isSet = false;
    m_newer_than_isValid = false;

    m_older_than_isSet = false;
    m_older_than_isValid = false;

    m_package_name_prefixes_isSet = false;
    m_package_name_prefixes_isValid = false;

    m_tag_prefixes_isSet = false;
    m_tag_prefixes_isValid = false;

    m_tag_state_isSet = false;
    m_tag_state_isValid = false;

    m_version_name_prefixes_isSet = false;
    m_version_name_prefixes_isValid = false;
}

void OAICleanupPolicyCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICleanupPolicyCondition::fromJsonObject(QJsonObject json) {

    m_newer_than_isValid = ::OpenAPI::fromJsonValue(m_newer_than, json[QString("newerThan")]);
    m_newer_than_isSet = !json[QString("newerThan")].isNull() && m_newer_than_isValid;

    m_older_than_isValid = ::OpenAPI::fromJsonValue(m_older_than, json[QString("olderThan")]);
    m_older_than_isSet = !json[QString("olderThan")].isNull() && m_older_than_isValid;

    m_package_name_prefixes_isValid = ::OpenAPI::fromJsonValue(m_package_name_prefixes, json[QString("packageNamePrefixes")]);
    m_package_name_prefixes_isSet = !json[QString("packageNamePrefixes")].isNull() && m_package_name_prefixes_isValid;

    m_tag_prefixes_isValid = ::OpenAPI::fromJsonValue(m_tag_prefixes, json[QString("tagPrefixes")]);
    m_tag_prefixes_isSet = !json[QString("tagPrefixes")].isNull() && m_tag_prefixes_isValid;

    m_tag_state_isValid = ::OpenAPI::fromJsonValue(m_tag_state, json[QString("tagState")]);
    m_tag_state_isSet = !json[QString("tagState")].isNull() && m_tag_state_isValid;

    m_version_name_prefixes_isValid = ::OpenAPI::fromJsonValue(m_version_name_prefixes, json[QString("versionNamePrefixes")]);
    m_version_name_prefixes_isSet = !json[QString("versionNamePrefixes")].isNull() && m_version_name_prefixes_isValid;
}

QString OAICleanupPolicyCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICleanupPolicyCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_newer_than_isSet) {
        obj.insert(QString("newerThan"), ::OpenAPI::toJsonValue(m_newer_than));
    }
    if (m_older_than_isSet) {
        obj.insert(QString("olderThan"), ::OpenAPI::toJsonValue(m_older_than));
    }
    if (m_package_name_prefixes.size() > 0) {
        obj.insert(QString("packageNamePrefixes"), ::OpenAPI::toJsonValue(m_package_name_prefixes));
    }
    if (m_tag_prefixes.size() > 0) {
        obj.insert(QString("tagPrefixes"), ::OpenAPI::toJsonValue(m_tag_prefixes));
    }
    if (m_tag_state_isSet) {
        obj.insert(QString("tagState"), ::OpenAPI::toJsonValue(m_tag_state));
    }
    if (m_version_name_prefixes.size() > 0) {
        obj.insert(QString("versionNamePrefixes"), ::OpenAPI::toJsonValue(m_version_name_prefixes));
    }
    return obj;
}

QString OAICleanupPolicyCondition::getNewerThan() const {
    return m_newer_than;
}
void OAICleanupPolicyCondition::setNewerThan(const QString &newer_than) {
    m_newer_than = newer_than;
    m_newer_than_isSet = true;
}

bool OAICleanupPolicyCondition::is_newer_than_Set() const{
    return m_newer_than_isSet;
}

bool OAICleanupPolicyCondition::is_newer_than_Valid() const{
    return m_newer_than_isValid;
}

QString OAICleanupPolicyCondition::getOlderThan() const {
    return m_older_than;
}
void OAICleanupPolicyCondition::setOlderThan(const QString &older_than) {
    m_older_than = older_than;
    m_older_than_isSet = true;
}

bool OAICleanupPolicyCondition::is_older_than_Set() const{
    return m_older_than_isSet;
}

bool OAICleanupPolicyCondition::is_older_than_Valid() const{
    return m_older_than_isValid;
}

QList<QString> OAICleanupPolicyCondition::getPackageNamePrefixes() const {
    return m_package_name_prefixes;
}
void OAICleanupPolicyCondition::setPackageNamePrefixes(const QList<QString> &package_name_prefixes) {
    m_package_name_prefixes = package_name_prefixes;
    m_package_name_prefixes_isSet = true;
}

bool OAICleanupPolicyCondition::is_package_name_prefixes_Set() const{
    return m_package_name_prefixes_isSet;
}

bool OAICleanupPolicyCondition::is_package_name_prefixes_Valid() const{
    return m_package_name_prefixes_isValid;
}

QList<QString> OAICleanupPolicyCondition::getTagPrefixes() const {
    return m_tag_prefixes;
}
void OAICleanupPolicyCondition::setTagPrefixes(const QList<QString> &tag_prefixes) {
    m_tag_prefixes = tag_prefixes;
    m_tag_prefixes_isSet = true;
}

bool OAICleanupPolicyCondition::is_tag_prefixes_Set() const{
    return m_tag_prefixes_isSet;
}

bool OAICleanupPolicyCondition::is_tag_prefixes_Valid() const{
    return m_tag_prefixes_isValid;
}

QString OAICleanupPolicyCondition::getTagState() const {
    return m_tag_state;
}
void OAICleanupPolicyCondition::setTagState(const QString &tag_state) {
    m_tag_state = tag_state;
    m_tag_state_isSet = true;
}

bool OAICleanupPolicyCondition::is_tag_state_Set() const{
    return m_tag_state_isSet;
}

bool OAICleanupPolicyCondition::is_tag_state_Valid() const{
    return m_tag_state_isValid;
}

QList<QString> OAICleanupPolicyCondition::getVersionNamePrefixes() const {
    return m_version_name_prefixes;
}
void OAICleanupPolicyCondition::setVersionNamePrefixes(const QList<QString> &version_name_prefixes) {
    m_version_name_prefixes = version_name_prefixes;
    m_version_name_prefixes_isSet = true;
}

bool OAICleanupPolicyCondition::is_version_name_prefixes_Set() const{
    return m_version_name_prefixes_isSet;
}

bool OAICleanupPolicyCondition::is_version_name_prefixes_Valid() const{
    return m_version_name_prefixes_isValid;
}

bool OAICleanupPolicyCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_newer_than_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_older_than_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_name_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICleanupPolicyCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
