/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository() {
    this->initializeModel();
}

OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::~OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository() {}

void OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::initializeModel() {

    m_repository_base_isSet = false;
    m_repository_base_isValid = false;

    m_repository_path_isSet = false;
    m_repository_path_isValid = false;
}

void OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::fromJsonObject(QJsonObject json) {

    m_repository_base_isValid = ::OpenAPI::fromJsonValue(m_repository_base, json[QString("repositoryBase")]);
    m_repository_base_isSet = !json[QString("repositoryBase")].isNull() && m_repository_base_isValid;

    m_repository_path_isValid = ::OpenAPI::fromJsonValue(m_repository_path, json[QString("repositoryPath")]);
    m_repository_path_isSet = !json[QString("repositoryPath")].isNull() && m_repository_path_isValid;
}

QString OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_repository_base_isSet) {
        obj.insert(QString("repositoryBase"), ::OpenAPI::toJsonValue(m_repository_base));
    }
    if (m_repository_path_isSet) {
        obj.insert(QString("repositoryPath"), ::OpenAPI::toJsonValue(m_repository_path));
    }
    return obj;
}

QString OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::getRepositoryBase() const {
    return m_repository_base;
}
void OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::setRepositoryBase(const QString &repository_base) {
    m_repository_base = repository_base;
    m_repository_base_isSet = true;
}

bool OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::is_repository_base_Set() const{
    return m_repository_base_isSet;
}

bool OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::is_repository_base_Valid() const{
    return m_repository_base_isValid;
}

QString OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::getRepositoryPath() const {
    return m_repository_path;
}
void OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::setRepositoryPath(const QString &repository_path) {
    m_repository_path = repository_path;
    m_repository_path_isSet = true;
}

bool OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::is_repository_path_Set() const{
    return m_repository_path_isSet;
}

bool OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::is_repository_path_Valid() const{
    return m_repository_path_isValid;
}

bool OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
