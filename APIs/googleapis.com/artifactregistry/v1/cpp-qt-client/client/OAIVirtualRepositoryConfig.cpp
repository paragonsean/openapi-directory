/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualRepositoryConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualRepositoryConfig::OAIVirtualRepositoryConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualRepositoryConfig::OAIVirtualRepositoryConfig() {
    this->initializeModel();
}

OAIVirtualRepositoryConfig::~OAIVirtualRepositoryConfig() {}

void OAIVirtualRepositoryConfig::initializeModel() {

    m_upstream_policies_isSet = false;
    m_upstream_policies_isValid = false;
}

void OAIVirtualRepositoryConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualRepositoryConfig::fromJsonObject(QJsonObject json) {

    m_upstream_policies_isValid = ::OpenAPI::fromJsonValue(m_upstream_policies, json[QString("upstreamPolicies")]);
    m_upstream_policies_isSet = !json[QString("upstreamPolicies")].isNull() && m_upstream_policies_isValid;
}

QString OAIVirtualRepositoryConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualRepositoryConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_upstream_policies.size() > 0) {
        obj.insert(QString("upstreamPolicies"), ::OpenAPI::toJsonValue(m_upstream_policies));
    }
    return obj;
}

QList<OAIUpstreamPolicy> OAIVirtualRepositoryConfig::getUpstreamPolicies() const {
    return m_upstream_policies;
}
void OAIVirtualRepositoryConfig::setUpstreamPolicies(const QList<OAIUpstreamPolicy> &upstream_policies) {
    m_upstream_policies = upstream_policies;
    m_upstream_policies_isSet = true;
}

bool OAIVirtualRepositoryConfig::is_upstream_policies_Set() const{
    return m_upstream_policies_isSet;
}

bool OAIVirtualRepositoryConfig::is_upstream_policies_Valid() const{
    return m_upstream_policies_isValid;
}

bool OAIVirtualRepositoryConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_upstream_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualRepositoryConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
