/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPythonRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPythonRepository::OAIPythonRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPythonRepository::OAIPythonRepository() {
    this->initializeModel();
}

OAIPythonRepository::~OAIPythonRepository() {}

void OAIPythonRepository::initializeModel() {

    m_public_repository_isSet = false;
    m_public_repository_isValid = false;
}

void OAIPythonRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPythonRepository::fromJsonObject(QJsonObject json) {

    m_public_repository_isValid = ::OpenAPI::fromJsonValue(m_public_repository, json[QString("publicRepository")]);
    m_public_repository_isSet = !json[QString("publicRepository")].isNull() && m_public_repository_isValid;
}

QString OAIPythonRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPythonRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_public_repository_isSet) {
        obj.insert(QString("publicRepository"), ::OpenAPI::toJsonValue(m_public_repository));
    }
    return obj;
}

QString OAIPythonRepository::getPublicRepository() const {
    return m_public_repository;
}
void OAIPythonRepository::setPublicRepository(const QString &public_repository) {
    m_public_repository = public_repository;
    m_public_repository_isSet = true;
}

bool OAIPythonRepository::is_public_repository_Set() const{
    return m_public_repository_isSet;
}

bool OAIPythonRepository::is_public_repository_Valid() const{
    return m_public_repository_isValid;
}

bool OAIPythonRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_public_repository_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPythonRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
