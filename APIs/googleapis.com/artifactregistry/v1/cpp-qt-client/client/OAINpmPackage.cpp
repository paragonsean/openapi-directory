/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINpmPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINpmPackage::OAINpmPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINpmPackage::OAINpmPackage() {
    this->initializeModel();
}

OAINpmPackage::~OAINpmPackage() {}

void OAINpmPackage::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAINpmPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINpmPackage::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAINpmPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINpmPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAINpmPackage::getCreateTime() const {
    return m_create_time;
}
void OAINpmPackage::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAINpmPackage::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAINpmPackage::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAINpmPackage::getName() const {
    return m_name;
}
void OAINpmPackage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINpmPackage::is_name_Set() const{
    return m_name_isSet;
}

bool OAINpmPackage::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINpmPackage::getPackageName() const {
    return m_package_name;
}
void OAINpmPackage::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAINpmPackage::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAINpmPackage::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QList<QString> OAINpmPackage::getTags() const {
    return m_tags;
}
void OAINpmPackage::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAINpmPackage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAINpmPackage::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAINpmPackage::getUpdateTime() const {
    return m_update_time;
}
void OAINpmPackage::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAINpmPackage::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAINpmPackage::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAINpmPackage::getVersion() const {
    return m_version;
}
void OAINpmPackage::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAINpmPackage::is_version_Set() const{
    return m_version_isSet;
}

bool OAINpmPackage::is_version_Valid() const{
    return m_version_isValid;
}

bool OAINpmPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINpmPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
