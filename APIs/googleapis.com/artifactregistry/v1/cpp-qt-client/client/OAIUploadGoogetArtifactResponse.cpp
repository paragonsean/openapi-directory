/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadGoogetArtifactResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadGoogetArtifactResponse::OAIUploadGoogetArtifactResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadGoogetArtifactResponse::OAIUploadGoogetArtifactResponse() {
    this->initializeModel();
}

OAIUploadGoogetArtifactResponse::~OAIUploadGoogetArtifactResponse() {}

void OAIUploadGoogetArtifactResponse::initializeModel() {

    m_googet_artifacts_isSet = false;
    m_googet_artifacts_isValid = false;
}

void OAIUploadGoogetArtifactResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadGoogetArtifactResponse::fromJsonObject(QJsonObject json) {

    m_googet_artifacts_isValid = ::OpenAPI::fromJsonValue(m_googet_artifacts, json[QString("googetArtifacts")]);
    m_googet_artifacts_isSet = !json[QString("googetArtifacts")].isNull() && m_googet_artifacts_isValid;
}

QString OAIUploadGoogetArtifactResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadGoogetArtifactResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_googet_artifacts.size() > 0) {
        obj.insert(QString("googetArtifacts"), ::OpenAPI::toJsonValue(m_googet_artifacts));
    }
    return obj;
}

QList<OAIGoogetArtifact> OAIUploadGoogetArtifactResponse::getGoogetArtifacts() const {
    return m_googet_artifacts;
}
void OAIUploadGoogetArtifactResponse::setGoogetArtifacts(const QList<OAIGoogetArtifact> &googet_artifacts) {
    m_googet_artifacts = googet_artifacts;
    m_googet_artifacts_isSet = true;
}

bool OAIUploadGoogetArtifactResponse::is_googet_artifacts_Set() const{
    return m_googet_artifacts_isSet;
}

bool OAIUploadGoogetArtifactResponse::is_googet_artifacts_Valid() const{
    return m_googet_artifacts_isValid;
}

bool OAIUploadGoogetArtifactResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_googet_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadGoogetArtifactResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
