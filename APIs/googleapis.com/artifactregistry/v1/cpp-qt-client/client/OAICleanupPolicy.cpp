/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICleanupPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICleanupPolicy::OAICleanupPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICleanupPolicy::OAICleanupPolicy() {
    this->initializeModel();
}

OAICleanupPolicy::~OAICleanupPolicy() {}

void OAICleanupPolicy::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_most_recent_versions_isSet = false;
    m_most_recent_versions_isValid = false;
}

void OAICleanupPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICleanupPolicy::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_most_recent_versions_isValid = ::OpenAPI::fromJsonValue(m_most_recent_versions, json[QString("mostRecentVersions")]);
    m_most_recent_versions_isSet = !json[QString("mostRecentVersions")].isNull() && m_most_recent_versions_isValid;
}

QString OAICleanupPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICleanupPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_most_recent_versions.isSet()) {
        obj.insert(QString("mostRecentVersions"), ::OpenAPI::toJsonValue(m_most_recent_versions));
    }
    return obj;
}

QString OAICleanupPolicy::getAction() const {
    return m_action;
}
void OAICleanupPolicy::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICleanupPolicy::is_action_Set() const{
    return m_action_isSet;
}

bool OAICleanupPolicy::is_action_Valid() const{
    return m_action_isValid;
}

OAICleanupPolicyCondition OAICleanupPolicy::getCondition() const {
    return m_condition;
}
void OAICleanupPolicy::setCondition(const OAICleanupPolicyCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAICleanupPolicy::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAICleanupPolicy::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAICleanupPolicy::getId() const {
    return m_id;
}
void OAICleanupPolicy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICleanupPolicy::is_id_Set() const{
    return m_id_isSet;
}

bool OAICleanupPolicy::is_id_Valid() const{
    return m_id_isValid;
}

OAICleanupPolicyMostRecentVersions OAICleanupPolicy::getMostRecentVersions() const {
    return m_most_recent_versions;
}
void OAICleanupPolicy::setMostRecentVersions(const OAICleanupPolicyMostRecentVersions &most_recent_versions) {
    m_most_recent_versions = most_recent_versions;
    m_most_recent_versions_isSet = true;
}

bool OAICleanupPolicy::is_most_recent_versions_Set() const{
    return m_most_recent_versions_isSet;
}

bool OAICleanupPolicy::is_most_recent_versions_Valid() const{
    return m_most_recent_versions_isValid;
}

bool OAICleanupPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_most_recent_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICleanupPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
