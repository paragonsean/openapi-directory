/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDockerImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDockerImage::OAIDockerImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDockerImage::OAIDockerImage() {
    this->initializeModel();
}

OAIDockerImage::~OAIDockerImage() {}

void OAIDockerImage::initializeModel() {

    m_build_time_isSet = false;
    m_build_time_isValid = false;

    m_image_size_bytes_isSet = false;
    m_image_size_bytes_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_upload_time_isSet = false;
    m_upload_time_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIDockerImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDockerImage::fromJsonObject(QJsonObject json) {

    m_build_time_isValid = ::OpenAPI::fromJsonValue(m_build_time, json[QString("buildTime")]);
    m_build_time_isSet = !json[QString("buildTime")].isNull() && m_build_time_isValid;

    m_image_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_image_size_bytes, json[QString("imageSizeBytes")]);
    m_image_size_bytes_isSet = !json[QString("imageSizeBytes")].isNull() && m_image_size_bytes_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_upload_time_isValid = ::OpenAPI::fromJsonValue(m_upload_time, json[QString("uploadTime")]);
    m_upload_time_isSet = !json[QString("uploadTime")].isNull() && m_upload_time_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIDockerImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDockerImage::asJsonObject() const {
    QJsonObject obj;
    if (m_build_time_isSet) {
        obj.insert(QString("buildTime"), ::OpenAPI::toJsonValue(m_build_time));
    }
    if (m_image_size_bytes_isSet) {
        obj.insert(QString("imageSizeBytes"), ::OpenAPI::toJsonValue(m_image_size_bytes));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_upload_time_isSet) {
        obj.insert(QString("uploadTime"), ::OpenAPI::toJsonValue(m_upload_time));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIDockerImage::getBuildTime() const {
    return m_build_time;
}
void OAIDockerImage::setBuildTime(const QString &build_time) {
    m_build_time = build_time;
    m_build_time_isSet = true;
}

bool OAIDockerImage::is_build_time_Set() const{
    return m_build_time_isSet;
}

bool OAIDockerImage::is_build_time_Valid() const{
    return m_build_time_isValid;
}

QString OAIDockerImage::getImageSizeBytes() const {
    return m_image_size_bytes;
}
void OAIDockerImage::setImageSizeBytes(const QString &image_size_bytes) {
    m_image_size_bytes = image_size_bytes;
    m_image_size_bytes_isSet = true;
}

bool OAIDockerImage::is_image_size_bytes_Set() const{
    return m_image_size_bytes_isSet;
}

bool OAIDockerImage::is_image_size_bytes_Valid() const{
    return m_image_size_bytes_isValid;
}

QString OAIDockerImage::getMediaType() const {
    return m_media_type;
}
void OAIDockerImage::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIDockerImage::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIDockerImage::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIDockerImage::getName() const {
    return m_name;
}
void OAIDockerImage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDockerImage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDockerImage::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIDockerImage::getTags() const {
    return m_tags;
}
void OAIDockerImage::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDockerImage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDockerImage::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIDockerImage::getUpdateTime() const {
    return m_update_time;
}
void OAIDockerImage::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIDockerImage::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIDockerImage::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIDockerImage::getUploadTime() const {
    return m_upload_time;
}
void OAIDockerImage::setUploadTime(const QString &upload_time) {
    m_upload_time = upload_time;
    m_upload_time_isSet = true;
}

bool OAIDockerImage::is_upload_time_Set() const{
    return m_upload_time_isSet;
}

bool OAIDockerImage::is_upload_time_Valid() const{
    return m_upload_time_isValid;
}

QString OAIDockerImage::getUri() const {
    return m_uri;
}
void OAIDockerImage::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIDockerImage::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIDockerImage::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIDockerImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDockerImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
