/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpstreamPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpstreamPolicy::OAIUpstreamPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpstreamPolicy::OAIUpstreamPolicy() {
    this->initializeModel();
}

OAIUpstreamPolicy::~OAIUpstreamPolicy() {}

void OAIUpstreamPolicy::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;
}

void OAIUpstreamPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpstreamPolicy::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;
}

QString OAIUpstreamPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpstreamPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    return obj;
}

QString OAIUpstreamPolicy::getId() const {
    return m_id;
}
void OAIUpstreamPolicy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpstreamPolicy::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpstreamPolicy::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIUpstreamPolicy::getPriority() const {
    return m_priority;
}
void OAIUpstreamPolicy::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIUpstreamPolicy::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIUpstreamPolicy::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIUpstreamPolicy::getRepository() const {
    return m_repository;
}
void OAIUpstreamPolicy::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIUpstreamPolicy::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIUpstreamPolicy::is_repository_Valid() const{
    return m_repository_isValid;
}

bool OAIUpstreamPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpstreamPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
