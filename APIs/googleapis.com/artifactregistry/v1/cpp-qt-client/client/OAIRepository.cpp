/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepository::OAIRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepository::OAIRepository() {
    this->initializeModel();
}

OAIRepository::~OAIRepository() {}

void OAIRepository::initializeModel() {

    m_cleanup_policies_isSet = false;
    m_cleanup_policies_isValid = false;

    m_cleanup_policy_dry_run_isSet = false;
    m_cleanup_policy_dry_run_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disallow_unspecified_mode_isSet = false;
    m_disallow_unspecified_mode_isValid = false;

    m_docker_config_isSet = false;
    m_docker_config_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_kms_key_name_isSet = false;
    m_kms_key_name_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_maven_config_isSet = false;
    m_maven_config_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_remote_repository_config_isSet = false;
    m_remote_repository_config_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_virtual_repository_config_isSet = false;
    m_virtual_repository_config_isValid = false;
}

void OAIRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepository::fromJsonObject(QJsonObject json) {

    m_cleanup_policies_isValid = ::OpenAPI::fromJsonValue(m_cleanup_policies, json[QString("cleanupPolicies")]);
    m_cleanup_policies_isSet = !json[QString("cleanupPolicies")].isNull() && m_cleanup_policies_isValid;

    m_cleanup_policy_dry_run_isValid = ::OpenAPI::fromJsonValue(m_cleanup_policy_dry_run, json[QString("cleanupPolicyDryRun")]);
    m_cleanup_policy_dry_run_isSet = !json[QString("cleanupPolicyDryRun")].isNull() && m_cleanup_policy_dry_run_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disallow_unspecified_mode_isValid = ::OpenAPI::fromJsonValue(m_disallow_unspecified_mode, json[QString("disallowUnspecifiedMode")]);
    m_disallow_unspecified_mode_isSet = !json[QString("disallowUnspecifiedMode")].isNull() && m_disallow_unspecified_mode_isValid;

    m_docker_config_isValid = ::OpenAPI::fromJsonValue(m_docker_config, json[QString("dockerConfig")]);
    m_docker_config_isSet = !json[QString("dockerConfig")].isNull() && m_docker_config_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_kms_key_name_isValid = ::OpenAPI::fromJsonValue(m_kms_key_name, json[QString("kmsKeyName")]);
    m_kms_key_name_isSet = !json[QString("kmsKeyName")].isNull() && m_kms_key_name_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_maven_config_isValid = ::OpenAPI::fromJsonValue(m_maven_config, json[QString("mavenConfig")]);
    m_maven_config_isSet = !json[QString("mavenConfig")].isNull() && m_maven_config_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_remote_repository_config_isValid = ::OpenAPI::fromJsonValue(m_remote_repository_config, json[QString("remoteRepositoryConfig")]);
    m_remote_repository_config_isSet = !json[QString("remoteRepositoryConfig")].isNull() && m_remote_repository_config_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("sizeBytes")]);
    m_size_bytes_isSet = !json[QString("sizeBytes")].isNull() && m_size_bytes_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_virtual_repository_config_isValid = ::OpenAPI::fromJsonValue(m_virtual_repository_config, json[QString("virtualRepositoryConfig")]);
    m_virtual_repository_config_isSet = !json[QString("virtualRepositoryConfig")].isNull() && m_virtual_repository_config_isValid;
}

QString OAIRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_cleanup_policies.size() > 0) {
        obj.insert(QString("cleanupPolicies"), ::OpenAPI::toJsonValue(m_cleanup_policies));
    }
    if (m_cleanup_policy_dry_run_isSet) {
        obj.insert(QString("cleanupPolicyDryRun"), ::OpenAPI::toJsonValue(m_cleanup_policy_dry_run));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disallow_unspecified_mode_isSet) {
        obj.insert(QString("disallowUnspecifiedMode"), ::OpenAPI::toJsonValue(m_disallow_unspecified_mode));
    }
    if (m_docker_config.isSet()) {
        obj.insert(QString("dockerConfig"), ::OpenAPI::toJsonValue(m_docker_config));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_kms_key_name_isSet) {
        obj.insert(QString("kmsKeyName"), ::OpenAPI::toJsonValue(m_kms_key_name));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_maven_config.isSet()) {
        obj.insert(QString("mavenConfig"), ::OpenAPI::toJsonValue(m_maven_config));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_remote_repository_config.isSet()) {
        obj.insert(QString("remoteRepositoryConfig"), ::OpenAPI::toJsonValue(m_remote_repository_config));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("sizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_virtual_repository_config.isSet()) {
        obj.insert(QString("virtualRepositoryConfig"), ::OpenAPI::toJsonValue(m_virtual_repository_config));
    }
    return obj;
}

QMap<QString, OAICleanupPolicy> OAIRepository::getCleanupPolicies() const {
    return m_cleanup_policies;
}
void OAIRepository::setCleanupPolicies(const QMap<QString, OAICleanupPolicy> &cleanup_policies) {
    m_cleanup_policies = cleanup_policies;
    m_cleanup_policies_isSet = true;
}

bool OAIRepository::is_cleanup_policies_Set() const{
    return m_cleanup_policies_isSet;
}

bool OAIRepository::is_cleanup_policies_Valid() const{
    return m_cleanup_policies_isValid;
}

bool OAIRepository::isCleanupPolicyDryRun() const {
    return m_cleanup_policy_dry_run;
}
void OAIRepository::setCleanupPolicyDryRun(const bool &cleanup_policy_dry_run) {
    m_cleanup_policy_dry_run = cleanup_policy_dry_run;
    m_cleanup_policy_dry_run_isSet = true;
}

bool OAIRepository::is_cleanup_policy_dry_run_Set() const{
    return m_cleanup_policy_dry_run_isSet;
}

bool OAIRepository::is_cleanup_policy_dry_run_Valid() const{
    return m_cleanup_policy_dry_run_isValid;
}

QString OAIRepository::getCreateTime() const {
    return m_create_time;
}
void OAIRepository::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIRepository::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIRepository::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIRepository::getDescription() const {
    return m_description;
}
void OAIRepository::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRepository::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRepository::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIRepository::isDisallowUnspecifiedMode() const {
    return m_disallow_unspecified_mode;
}
void OAIRepository::setDisallowUnspecifiedMode(const bool &disallow_unspecified_mode) {
    m_disallow_unspecified_mode = disallow_unspecified_mode;
    m_disallow_unspecified_mode_isSet = true;
}

bool OAIRepository::is_disallow_unspecified_mode_Set() const{
    return m_disallow_unspecified_mode_isSet;
}

bool OAIRepository::is_disallow_unspecified_mode_Valid() const{
    return m_disallow_unspecified_mode_isValid;
}

OAIDockerRepositoryConfig OAIRepository::getDockerConfig() const {
    return m_docker_config;
}
void OAIRepository::setDockerConfig(const OAIDockerRepositoryConfig &docker_config) {
    m_docker_config = docker_config;
    m_docker_config_isSet = true;
}

bool OAIRepository::is_docker_config_Set() const{
    return m_docker_config_isSet;
}

bool OAIRepository::is_docker_config_Valid() const{
    return m_docker_config_isValid;
}

QString OAIRepository::getFormat() const {
    return m_format;
}
void OAIRepository::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIRepository::is_format_Set() const{
    return m_format_isSet;
}

bool OAIRepository::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIRepository::getKmsKeyName() const {
    return m_kms_key_name;
}
void OAIRepository::setKmsKeyName(const QString &kms_key_name) {
    m_kms_key_name = kms_key_name;
    m_kms_key_name_isSet = true;
}

bool OAIRepository::is_kms_key_name_Set() const{
    return m_kms_key_name_isSet;
}

bool OAIRepository::is_kms_key_name_Valid() const{
    return m_kms_key_name_isValid;
}

QMap<QString, QString> OAIRepository::getLabels() const {
    return m_labels;
}
void OAIRepository::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIRepository::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIRepository::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIMavenRepositoryConfig OAIRepository::getMavenConfig() const {
    return m_maven_config;
}
void OAIRepository::setMavenConfig(const OAIMavenRepositoryConfig &maven_config) {
    m_maven_config = maven_config;
    m_maven_config_isSet = true;
}

bool OAIRepository::is_maven_config_Set() const{
    return m_maven_config_isSet;
}

bool OAIRepository::is_maven_config_Valid() const{
    return m_maven_config_isValid;
}

QString OAIRepository::getMode() const {
    return m_mode;
}
void OAIRepository::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIRepository::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIRepository::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIRepository::getName() const {
    return m_name;
}
void OAIRepository::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRepository::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRepository::is_name_Valid() const{
    return m_name_isValid;
}

OAIRemoteRepositoryConfig OAIRepository::getRemoteRepositoryConfig() const {
    return m_remote_repository_config;
}
void OAIRepository::setRemoteRepositoryConfig(const OAIRemoteRepositoryConfig &remote_repository_config) {
    m_remote_repository_config = remote_repository_config;
    m_remote_repository_config_isSet = true;
}

bool OAIRepository::is_remote_repository_config_Set() const{
    return m_remote_repository_config_isSet;
}

bool OAIRepository::is_remote_repository_config_Valid() const{
    return m_remote_repository_config_isValid;
}

bool OAIRepository::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIRepository::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIRepository::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIRepository::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

QString OAIRepository::getSizeBytes() const {
    return m_size_bytes;
}
void OAIRepository::setSizeBytes(const QString &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAIRepository::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAIRepository::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

QString OAIRepository::getUpdateTime() const {
    return m_update_time;
}
void OAIRepository::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIRepository::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIRepository::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIVirtualRepositoryConfig OAIRepository::getVirtualRepositoryConfig() const {
    return m_virtual_repository_config;
}
void OAIRepository::setVirtualRepositoryConfig(const OAIVirtualRepositoryConfig &virtual_repository_config) {
    m_virtual_repository_config = virtual_repository_config;
    m_virtual_repository_config_isSet = true;
}

bool OAIRepository::is_virtual_repository_config_Set() const{
    return m_virtual_repository_config_isSet;
}

bool OAIRepository::is_virtual_repository_config_Valid() const{
    return m_virtual_repository_config_isValid;
}

bool OAIRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cleanup_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cleanup_policy_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disallow_unspecified_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maven_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_repository_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_repository_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
