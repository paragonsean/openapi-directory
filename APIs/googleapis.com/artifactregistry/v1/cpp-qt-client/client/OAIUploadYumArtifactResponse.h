/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUploadYumArtifactResponse.h
 *
 * The response of the completed artifact upload operation. This response is contained in the Operation and available to users.
 */

#ifndef OAIUploadYumArtifactResponse_H
#define OAIUploadYumArtifactResponse_H

#include <QJsonObject>

#include "OAIYumArtifact.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIYumArtifact;

class OAIUploadYumArtifactResponse : public OAIObject {
public:
    OAIUploadYumArtifactResponse();
    OAIUploadYumArtifactResponse(QString json);
    ~OAIUploadYumArtifactResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIYumArtifact> getYumArtifacts() const;
    void setYumArtifacts(const QList<OAIYumArtifact> &yum_artifacts);
    bool is_yum_artifacts_Set() const;
    bool is_yum_artifacts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIYumArtifact> m_yum_artifacts;
    bool m_yum_artifacts_isSet;
    bool m_yum_artifacts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUploadYumArtifactResponse)

#endif // OAIUploadYumArtifactResponse_H
