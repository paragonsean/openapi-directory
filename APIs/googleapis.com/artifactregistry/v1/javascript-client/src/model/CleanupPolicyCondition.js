/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CleanupPolicyCondition model module.
 * @module model/CleanupPolicyCondition
 * @version v1
 */
class CleanupPolicyCondition {
    /**
     * Constructs a new <code>CleanupPolicyCondition</code>.
     * CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries are set, all must be satisfied for the condition to be satisfied.
     * @alias module:model/CleanupPolicyCondition
     */
    constructor() { 
        
        CleanupPolicyCondition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CleanupPolicyCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CleanupPolicyCondition} obj Optional instance to populate.
     * @return {module:model/CleanupPolicyCondition} The populated <code>CleanupPolicyCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CleanupPolicyCondition();

            if (data.hasOwnProperty('newerThan')) {
                obj['newerThan'] = ApiClient.convertToType(data['newerThan'], 'String');
            }
            if (data.hasOwnProperty('olderThan')) {
                obj['olderThan'] = ApiClient.convertToType(data['olderThan'], 'String');
            }
            if (data.hasOwnProperty('packageNamePrefixes')) {
                obj['packageNamePrefixes'] = ApiClient.convertToType(data['packageNamePrefixes'], ['String']);
            }
            if (data.hasOwnProperty('tagPrefixes')) {
                obj['tagPrefixes'] = ApiClient.convertToType(data['tagPrefixes'], ['String']);
            }
            if (data.hasOwnProperty('tagState')) {
                obj['tagState'] = ApiClient.convertToType(data['tagState'], 'String');
            }
            if (data.hasOwnProperty('versionNamePrefixes')) {
                obj['versionNamePrefixes'] = ApiClient.convertToType(data['versionNamePrefixes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CleanupPolicyCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CleanupPolicyCondition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['newerThan'] && !(typeof data['newerThan'] === 'string' || data['newerThan'] instanceof String)) {
            throw new Error("Expected the field `newerThan` to be a primitive type in the JSON string but got " + data['newerThan']);
        }
        // ensure the json data is a string
        if (data['olderThan'] && !(typeof data['olderThan'] === 'string' || data['olderThan'] instanceof String)) {
            throw new Error("Expected the field `olderThan` to be a primitive type in the JSON string but got " + data['olderThan']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['packageNamePrefixes'])) {
            throw new Error("Expected the field `packageNamePrefixes` to be an array in the JSON data but got " + data['packageNamePrefixes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tagPrefixes'])) {
            throw new Error("Expected the field `tagPrefixes` to be an array in the JSON data but got " + data['tagPrefixes']);
        }
        // ensure the json data is a string
        if (data['tagState'] && !(typeof data['tagState'] === 'string' || data['tagState'] instanceof String)) {
            throw new Error("Expected the field `tagState` to be a primitive type in the JSON string but got " + data['tagState']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['versionNamePrefixes'])) {
            throw new Error("Expected the field `versionNamePrefixes` to be an array in the JSON data but got " + data['versionNamePrefixes']);
        }

        return true;
    }


}



/**
 * Match versions newer than a duration.
 * @member {String} newerThan
 */
CleanupPolicyCondition.prototype['newerThan'] = undefined;

/**
 * Match versions older than a duration.
 * @member {String} olderThan
 */
CleanupPolicyCondition.prototype['olderThan'] = undefined;

/**
 * Match versions by package prefix. Applied on any prefix match.
 * @member {Array.<String>} packageNamePrefixes
 */
CleanupPolicyCondition.prototype['packageNamePrefixes'] = undefined;

/**
 * Match versions by tag prefix. Applied on any prefix match.
 * @member {Array.<String>} tagPrefixes
 */
CleanupPolicyCondition.prototype['tagPrefixes'] = undefined;

/**
 * Match versions by tag status.
 * @member {module:model/CleanupPolicyCondition.TagStateEnum} tagState
 */
CleanupPolicyCondition.prototype['tagState'] = undefined;

/**
 * Match versions by version name prefix. Applied on any prefix match.
 * @member {Array.<String>} versionNamePrefixes
 */
CleanupPolicyCondition.prototype['versionNamePrefixes'] = undefined;





/**
 * Allowed values for the <code>tagState</code> property.
 * @enum {String}
 * @readonly
 */
CleanupPolicyCondition['TagStateEnum'] = {

    /**
     * value: "TAG_STATE_UNSPECIFIED"
     * @const
     */
    "TAG_STATE_UNSPECIFIED": "TAG_STATE_UNSPECIFIED",

    /**
     * value: "TAGGED"
     * @const
     */
    "TAGGED": "TAGGED",

    /**
     * value: "UNTAGGED"
     * @const
     */
    "UNTAGGED": "UNTAGGED",

    /**
     * value: "ANY"
     * @const
     */
    "ANY": "ANY"
};



export default CleanupPolicyCondition;

