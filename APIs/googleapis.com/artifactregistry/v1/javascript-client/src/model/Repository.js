/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CleanupPolicy from './CleanupPolicy';
import DockerRepositoryConfig from './DockerRepositoryConfig';
import MavenRepositoryConfig from './MavenRepositoryConfig';
import RemoteRepositoryConfig from './RemoteRepositoryConfig';
import VirtualRepositoryConfig from './VirtualRepositoryConfig';

/**
 * The Repository model module.
 * @module model/Repository
 * @version v1
 */
class Repository {
    /**
     * Constructs a new <code>Repository</code>.
     * A Repository for storing artifacts with a specific format.
     * @alias module:model/Repository
     */
    constructor() { 
        
        Repository.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Repository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Repository} obj Optional instance to populate.
     * @return {module:model/Repository} The populated <code>Repository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Repository();

            if (data.hasOwnProperty('cleanupPolicies')) {
                obj['cleanupPolicies'] = ApiClient.convertToType(data['cleanupPolicies'], {'String': CleanupPolicy});
            }
            if (data.hasOwnProperty('cleanupPolicyDryRun')) {
                obj['cleanupPolicyDryRun'] = ApiClient.convertToType(data['cleanupPolicyDryRun'], 'Boolean');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('disallowUnspecifiedMode')) {
                obj['disallowUnspecifiedMode'] = ApiClient.convertToType(data['disallowUnspecifiedMode'], 'Boolean');
            }
            if (data.hasOwnProperty('dockerConfig')) {
                obj['dockerConfig'] = DockerRepositoryConfig.constructFromObject(data['dockerConfig']);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('kmsKeyName')) {
                obj['kmsKeyName'] = ApiClient.convertToType(data['kmsKeyName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mavenConfig')) {
                obj['mavenConfig'] = MavenRepositoryConfig.constructFromObject(data['mavenConfig']);
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('remoteRepositoryConfig')) {
                obj['remoteRepositoryConfig'] = RemoteRepositoryConfig.constructFromObject(data['remoteRepositoryConfig']);
            }
            if (data.hasOwnProperty('satisfiesPzs')) {
                obj['satisfiesPzs'] = ApiClient.convertToType(data['satisfiesPzs'], 'Boolean');
            }
            if (data.hasOwnProperty('sizeBytes')) {
                obj['sizeBytes'] = ApiClient.convertToType(data['sizeBytes'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('virtualRepositoryConfig')) {
                obj['virtualRepositoryConfig'] = VirtualRepositoryConfig.constructFromObject(data['virtualRepositoryConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Repository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Repository</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `dockerConfig`
        if (data['dockerConfig']) { // data not null
          DockerRepositoryConfig.validateJSON(data['dockerConfig']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['kmsKeyName'] && !(typeof data['kmsKeyName'] === 'string' || data['kmsKeyName'] instanceof String)) {
            throw new Error("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got " + data['kmsKeyName']);
        }
        // validate the optional field `mavenConfig`
        if (data['mavenConfig']) { // data not null
          MavenRepositoryConfig.validateJSON(data['mavenConfig']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `remoteRepositoryConfig`
        if (data['remoteRepositoryConfig']) { // data not null
          RemoteRepositoryConfig.validateJSON(data['remoteRepositoryConfig']);
        }
        // ensure the json data is a string
        if (data['sizeBytes'] && !(typeof data['sizeBytes'] === 'string' || data['sizeBytes'] instanceof String)) {
            throw new Error("Expected the field `sizeBytes` to be a primitive type in the JSON string but got " + data['sizeBytes']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `virtualRepositoryConfig`
        if (data['virtualRepositoryConfig']) { // data not null
          VirtualRepositoryConfig.validateJSON(data['virtualRepositoryConfig']);
        }

        return true;
    }


}



/**
 * Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.
 * @member {Object.<String, module:model/CleanupPolicy>} cleanupPolicies
 */
Repository.prototype['cleanupPolicies'] = undefined;

/**
 * Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.
 * @member {Boolean} cleanupPolicyDryRun
 */
Repository.prototype['cleanupPolicyDryRun'] = undefined;

/**
 * Output only. The time when the repository was created.
 * @member {String} createTime
 */
Repository.prototype['createTime'] = undefined;

/**
 * The user-provided description of the repository.
 * @member {String} description
 */
Repository.prototype['description'] = undefined;

/**
 * Optional. If this is true, aunspecified repo type will be treated as error. Is used for new repo types that don't have any specific fields. Right now is used by AOSS team when creating repos for customers.
 * @member {Boolean} disallowUnspecifiedMode
 */
Repository.prototype['disallowUnspecifiedMode'] = undefined;

/**
 * @member {module:model/DockerRepositoryConfig} dockerConfig
 */
Repository.prototype['dockerConfig'] = undefined;

/**
 * Optional. The format of packages that are stored in the repository.
 * @member {module:model/Repository.FormatEnum} format
 */
Repository.prototype['format'] = undefined;

/**
 * The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.
 * @member {String} kmsKeyName
 */
Repository.prototype['kmsKeyName'] = undefined;

/**
 * Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.
 * @member {Object.<String, String>} labels
 */
Repository.prototype['labels'] = undefined;

/**
 * @member {module:model/MavenRepositoryConfig} mavenConfig
 */
Repository.prototype['mavenConfig'] = undefined;

/**
 * Optional. The mode of the repository.
 * @member {module:model/Repository.ModeEnum} mode
 */
Repository.prototype['mode'] = undefined;

/**
 * The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`.
 * @member {String} name
 */
Repository.prototype['name'] = undefined;

/**
 * @member {module:model/RemoteRepositoryConfig} remoteRepositoryConfig
 */
Repository.prototype['remoteRepositoryConfig'] = undefined;

/**
 * Output only. If set, the repository satisfies physical zone separation.
 * @member {Boolean} satisfiesPzs
 */
Repository.prototype['satisfiesPzs'] = undefined;

/**
 * Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.
 * @member {String} sizeBytes
 */
Repository.prototype['sizeBytes'] = undefined;

/**
 * Output only. The time when the repository was last updated.
 * @member {String} updateTime
 */
Repository.prototype['updateTime'] = undefined;

/**
 * @member {module:model/VirtualRepositoryConfig} virtualRepositoryConfig
 */
Repository.prototype['virtualRepositoryConfig'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
Repository['FormatEnum'] = {

    /**
     * value: "FORMAT_UNSPECIFIED"
     * @const
     */
    "FORMAT_UNSPECIFIED": "FORMAT_UNSPECIFIED",

    /**
     * value: "DOCKER"
     * @const
     */
    "DOCKER": "DOCKER",

    /**
     * value: "MAVEN"
     * @const
     */
    "MAVEN": "MAVEN",

    /**
     * value: "NPM"
     * @const
     */
    "NPM": "NPM",

    /**
     * value: "APT"
     * @const
     */
    "APT": "APT",

    /**
     * value: "YUM"
     * @const
     */
    "YUM": "YUM",

    /**
     * value: "GOOGET"
     * @const
     */
    "GOOGET": "GOOGET",

    /**
     * value: "PYTHON"
     * @const
     */
    "PYTHON": "PYTHON",

    /**
     * value: "KFP"
     * @const
     */
    "KFP": "KFP",

    /**
     * value: "GO"
     * @const
     */
    "GO": "GO"
};


/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
Repository['ModeEnum'] = {

    /**
     * value: "MODE_UNSPECIFIED"
     * @const
     */
    "MODE_UNSPECIFIED": "MODE_UNSPECIFIED",

    /**
     * value: "STANDARD_REPOSITORY"
     * @const
     */
    "STANDARD_REPOSITORY": "STANDARD_REPOSITORY",

    /**
     * value: "VIRTUAL_REPOSITORY"
     * @const
     */
    "VIRTUAL_REPOSITORY": "VIRTUAL_REPOSITORY",

    /**
     * value: "REMOTE_REPOSITORY"
     * @const
     */
    "REMOTE_REPOSITORY": "REMOTE_REPOSITORY"
};



export default Repository;

