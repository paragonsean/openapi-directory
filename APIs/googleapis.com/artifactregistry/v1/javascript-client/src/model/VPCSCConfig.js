/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VPCSCConfig model module.
 * @module model/VPCSCConfig
 * @version v1
 */
class VPCSCConfig {
    /**
     * Constructs a new <code>VPCSCConfig</code>.
     * The Artifact Registry VPC SC config that apply to a Project.
     * @alias module:model/VPCSCConfig
     */
    constructor() { 
        
        VPCSCConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VPCSCConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VPCSCConfig} obj Optional instance to populate.
     * @return {module:model/VPCSCConfig} The populated <code>VPCSCConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VPCSCConfig();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('vpcscPolicy')) {
                obj['vpcscPolicy'] = ApiClient.convertToType(data['vpcscPolicy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VPCSCConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VPCSCConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['vpcscPolicy'] && !(typeof data['vpcscPolicy'] === 'string' || data['vpcscPolicy'] instanceof String)) {
            throw new Error("Expected the field `vpcscPolicy` to be a primitive type in the JSON string but got " + data['vpcscPolicy']);
        }

        return true;
    }


}



/**
 * The name of the project's VPC SC Config. Always of the form: projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In response: always set
 * @member {String} name
 */
VPCSCConfig.prototype['name'] = undefined;

/**
 * The project per location VPC SC policy that defines the VPC SC behavior for the Remote Repository (Allow/Deny).
 * @member {module:model/VPCSCConfig.VpcscPolicyEnum} vpcscPolicy
 */
VPCSCConfig.prototype['vpcscPolicy'] = undefined;





/**
 * Allowed values for the <code>vpcscPolicy</code> property.
 * @enum {String}
 * @readonly
 */
VPCSCConfig['VpcscPolicyEnum'] = {

    /**
     * value: "VPCSC_POLICY_UNSPECIFIED"
     * @const
     */
    "VPCSC_POLICY_UNSPECIFIED": "VPCSC_POLICY_UNSPECIFIED",

    /**
     * value: "DENY"
     * @const
     */
    "DENY": "DENY",

    /**
     * value: "ALLOW"
     * @const
     */
    "ALLOW": "ALLOW"
};



export default VPCSCConfig;

