/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tag from './Tag';

/**
 * The Version model module.
 * @module model/Version
 * @version v1
 */
class Version {
    /**
     * Constructs a new <code>Version</code>.
     * The body of a version resource. A version resource represents a collection of components, such as files and other data. This may correspond to a version in many package management schemes.
     * @alias module:model/Version
     */
    constructor() { 
        
        Version.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Version</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Version} obj Optional instance to populate.
     * @return {module:model/Version} The populated <code>Version</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Version();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('relatedTags')) {
                obj['relatedTags'] = ApiClient.convertToType(data['relatedTags'], [Tag]);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Version</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Version</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['relatedTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relatedTags'])) {
                throw new Error("Expected the field `relatedTags` to be an array in the JSON data but got " + data['relatedTags']);
            }
            // validate the optional field `relatedTags` (array)
            for (const item of data['relatedTags']) {
                Tag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * The time when the version was created.
 * @member {String} createTime
 */
Version.prototype['createTime'] = undefined;

/**
 * Optional. Description of the version, as specified in its metadata.
 * @member {String} description
 */
Version.prototype['description'] = undefined;

/**
 * Output only. Repository-specific Metadata stored against this version. The fields returned are defined by the underlying repository-specific resource. Currently, the resources could be: DockerImage MavenArtifact
 * @member {Object.<String, Object>} metadata
 */
Version.prototype['metadata'] = undefined;

/**
 * The name of the version, for example: \"projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/art1\". If the package or version ID parts contain slashes, the slashes are escaped.
 * @member {String} name
 */
Version.prototype['name'] = undefined;

/**
 * Output only. A list of related tags. Will contain up to 100 tags that reference this version.
 * @member {Array.<module:model/Tag>} relatedTags
 */
Version.prototype['relatedTags'] = undefined;

/**
 * The time when the version was last updated.
 * @member {String} updateTime
 */
Version.prototype['updateTime'] = undefined;






export default Version;

