/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpstreamPolicy model module.
 * @module model/UpstreamPolicy
 * @version v1
 */
class UpstreamPolicy {
    /**
     * Constructs a new <code>UpstreamPolicy</code>.
     * Artifact policy configuration for the repository contents.
     * @alias module:model/UpstreamPolicy
     */
    constructor() { 
        
        UpstreamPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpstreamPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpstreamPolicy} obj Optional instance to populate.
     * @return {module:model/UpstreamPolicy} The populated <code>UpstreamPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpstreamPolicy();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpstreamPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpstreamPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['repository'] && !(typeof data['repository'] === 'string' || data['repository'] instanceof String)) {
            throw new Error("Expected the field `repository` to be a primitive type in the JSON string but got " + data['repository']);
        }

        return true;
    }


}



/**
 * The user-provided ID of the upstream policy.
 * @member {String} id
 */
UpstreamPolicy.prototype['id'] = undefined;

/**
 * Entries with a greater priority value take precedence in the pull order.
 * @member {Number} priority
 */
UpstreamPolicy.prototype['priority'] = undefined;

/**
 * A reference to the repository resource, for example: `projects/p1/locations/us-central1/repositories/repo1`.
 * @member {String} repository
 */
UpstreamPolicy.prototype['repository'] = undefined;






export default UpstreamPolicy;

