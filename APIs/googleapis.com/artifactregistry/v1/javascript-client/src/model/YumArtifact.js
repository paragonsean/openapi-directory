/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The YumArtifact model module.
 * @module model/YumArtifact
 * @version v1
 */
class YumArtifact {
    /**
     * Constructs a new <code>YumArtifact</code>.
     * A detailed representation of a Yum artifact.
     * @alias module:model/YumArtifact
     */
    constructor() { 
        
        YumArtifact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>YumArtifact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/YumArtifact} obj Optional instance to populate.
     * @return {module:model/YumArtifact} The populated <code>YumArtifact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new YumArtifact();

            if (data.hasOwnProperty('architecture')) {
                obj['architecture'] = ApiClient.convertToType(data['architecture'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('packageName')) {
                obj['packageName'] = ApiClient.convertToType(data['packageName'], 'String');
            }
            if (data.hasOwnProperty('packageType')) {
                obj['packageType'] = ApiClient.convertToType(data['packageType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>YumArtifact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>YumArtifact</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['architecture'] && !(typeof data['architecture'] === 'string' || data['architecture'] instanceof String)) {
            throw new Error("Expected the field `architecture` to be a primitive type in the JSON string but got " + data['architecture']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['packageName'] && !(typeof data['packageName'] === 'string' || data['packageName'] instanceof String)) {
            throw new Error("Expected the field `packageName` to be a primitive type in the JSON string but got " + data['packageName']);
        }
        // ensure the json data is a string
        if (data['packageType'] && !(typeof data['packageType'] === 'string' || data['packageType'] instanceof String)) {
            throw new Error("Expected the field `packageType` to be a primitive type in the JSON string but got " + data['packageType']);
        }

        return true;
    }


}



/**
 * Output only. Operating system architecture of the artifact.
 * @member {String} architecture
 */
YumArtifact.prototype['architecture'] = undefined;

/**
 * Output only. The Artifact Registry resource name of the artifact.
 * @member {String} name
 */
YumArtifact.prototype['name'] = undefined;

/**
 * Output only. The yum package name of the artifact.
 * @member {String} packageName
 */
YumArtifact.prototype['packageName'] = undefined;

/**
 * Output only. An artifact is a binary or source package.
 * @member {module:model/YumArtifact.PackageTypeEnum} packageType
 */
YumArtifact.prototype['packageType'] = undefined;





/**
 * Allowed values for the <code>packageType</code> property.
 * @enum {String}
 * @readonly
 */
YumArtifact['PackageTypeEnum'] = {

    /**
     * value: "PACKAGE_TYPE_UNSPECIFIED"
     * @const
     */
    "PACKAGE_TYPE_UNSPECIFIED": "PACKAGE_TYPE_UNSPECIFIED",

    /**
     * value: "BINARY"
     * @const
     */
    "BINARY": "BINARY",

    /**
     * value: "SOURCE"
     * @const
     */
    "SOURCE": "SOURCE"
};



export default YumArtifact;

