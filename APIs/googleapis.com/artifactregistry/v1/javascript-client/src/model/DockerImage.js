/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DockerImage model module.
 * @module model/DockerImage
 * @version v1
 */
class DockerImage {
    /**
     * Constructs a new <code>DockerImage</code>.
     * DockerImage represents a docker artifact. The following fields are returned as untyped metadata in the Version resource, using camelcase keys (i.e. metadata.imageSizeBytes): * imageSizeBytes * mediaType * buildTime
     * @alias module:model/DockerImage
     */
    constructor() { 
        
        DockerImage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DockerImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DockerImage} obj Optional instance to populate.
     * @return {module:model/DockerImage} The populated <code>DockerImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DockerImage();

            if (data.hasOwnProperty('buildTime')) {
                obj['buildTime'] = ApiClient.convertToType(data['buildTime'], 'String');
            }
            if (data.hasOwnProperty('imageSizeBytes')) {
                obj['imageSizeBytes'] = ApiClient.convertToType(data['imageSizeBytes'], 'String');
            }
            if (data.hasOwnProperty('mediaType')) {
                obj['mediaType'] = ApiClient.convertToType(data['mediaType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('uploadTime')) {
                obj['uploadTime'] = ApiClient.convertToType(data['uploadTime'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DockerImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DockerImage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['buildTime'] && !(typeof data['buildTime'] === 'string' || data['buildTime'] instanceof String)) {
            throw new Error("Expected the field `buildTime` to be a primitive type in the JSON string but got " + data['buildTime']);
        }
        // ensure the json data is a string
        if (data['imageSizeBytes'] && !(typeof data['imageSizeBytes'] === 'string' || data['imageSizeBytes'] instanceof String)) {
            throw new Error("Expected the field `imageSizeBytes` to be a primitive type in the JSON string but got " + data['imageSizeBytes']);
        }
        // ensure the json data is a string
        if (data['mediaType'] && !(typeof data['mediaType'] === 'string' || data['mediaType'] instanceof String)) {
            throw new Error("Expected the field `mediaType` to be a primitive type in the JSON string but got " + data['mediaType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['uploadTime'] && !(typeof data['uploadTime'] === 'string' || data['uploadTime'] instanceof String)) {
            throw new Error("Expected the field `uploadTime` to be a primitive type in the JSON string but got " + data['uploadTime']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * The time this image was built. This field is returned as the 'metadata.buildTime' field in the Version resource. The build time is returned to the client as an RFC 3339 string, which can be easily used with the JavaScript Date constructor.
 * @member {String} buildTime
 */
DockerImage.prototype['buildTime'] = undefined;

/**
 * Calculated size of the image. This field is returned as the 'metadata.imageSizeBytes' field in the Version resource.
 * @member {String} imageSizeBytes
 */
DockerImage.prototype['imageSizeBytes'] = undefined;

/**
 * Media type of this image, e.g. \"application/vnd.docker.distribution.manifest.v2+json\". This field is returned as the 'metadata.mediaType' field in the Version resource.
 * @member {String} mediaType
 */
DockerImage.prototype['mediaType'] = undefined;

/**
 * Required. registry_location, project_id, repository_name and image id forms a unique image name:`projects//locations//repository//dockerImages/`. For example, \"projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and \"nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\" is the image's digest.
 * @member {String} name
 */
DockerImage.prototype['name'] = undefined;

/**
 * Tags attached to this image.
 * @member {Array.<String>} tags
 */
DockerImage.prototype['tags'] = undefined;

/**
 * Output only. The time when the docker image was last updated.
 * @member {String} updateTime
 */
DockerImage.prototype['updateTime'] = undefined;

/**
 * Time the image was uploaded.
 * @member {String} uploadTime
 */
DockerImage.prototype['uploadTime'] = undefined;

/**
 * Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
 * @member {String} uri
 */
DockerImage.prototype['uri'] = undefined;






export default DockerImage;

