/*
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AptRepository;
import org.openapitools.client.model.DockerRepository;
import org.openapitools.client.model.MavenRepository;
import org.openapitools.client.model.NpmRepository;
import org.openapitools.client.model.PythonRepository;
import org.openapitools.client.model.UpstreamCredentials;
import org.openapitools.client.model.YumRepository;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Remote repository configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:16.114902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemoteRepositoryConfig {
  public static final String SERIALIZED_NAME_APT_REPOSITORY = "aptRepository";
  @SerializedName(SERIALIZED_NAME_APT_REPOSITORY)
  private AptRepository aptRepository;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCKER_REPOSITORY = "dockerRepository";
  @SerializedName(SERIALIZED_NAME_DOCKER_REPOSITORY)
  private DockerRepository dockerRepository;

  public static final String SERIALIZED_NAME_MAVEN_REPOSITORY = "mavenRepository";
  @SerializedName(SERIALIZED_NAME_MAVEN_REPOSITORY)
  private MavenRepository mavenRepository;

  public static final String SERIALIZED_NAME_NPM_REPOSITORY = "npmRepository";
  @SerializedName(SERIALIZED_NAME_NPM_REPOSITORY)
  private NpmRepository npmRepository;

  public static final String SERIALIZED_NAME_PYTHON_REPOSITORY = "pythonRepository";
  @SerializedName(SERIALIZED_NAME_PYTHON_REPOSITORY)
  private PythonRepository pythonRepository;

  public static final String SERIALIZED_NAME_UPSTREAM_CREDENTIALS = "upstreamCredentials";
  @SerializedName(SERIALIZED_NAME_UPSTREAM_CREDENTIALS)
  private UpstreamCredentials upstreamCredentials;

  public static final String SERIALIZED_NAME_YUM_REPOSITORY = "yumRepository";
  @SerializedName(SERIALIZED_NAME_YUM_REPOSITORY)
  private YumRepository yumRepository;

  public RemoteRepositoryConfig() {
  }

  public RemoteRepositoryConfig aptRepository(AptRepository aptRepository) {
    this.aptRepository = aptRepository;
    return this;
  }

  /**
   * Get aptRepository
   * @return aptRepository
   */
  @javax.annotation.Nullable
  public AptRepository getAptRepository() {
    return aptRepository;
  }

  public void setAptRepository(AptRepository aptRepository) {
    this.aptRepository = aptRepository;
  }


  public RemoteRepositoryConfig description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the remote source.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RemoteRepositoryConfig dockerRepository(DockerRepository dockerRepository) {
    this.dockerRepository = dockerRepository;
    return this;
  }

  /**
   * Get dockerRepository
   * @return dockerRepository
   */
  @javax.annotation.Nullable
  public DockerRepository getDockerRepository() {
    return dockerRepository;
  }

  public void setDockerRepository(DockerRepository dockerRepository) {
    this.dockerRepository = dockerRepository;
  }


  public RemoteRepositoryConfig mavenRepository(MavenRepository mavenRepository) {
    this.mavenRepository = mavenRepository;
    return this;
  }

  /**
   * Get mavenRepository
   * @return mavenRepository
   */
  @javax.annotation.Nullable
  public MavenRepository getMavenRepository() {
    return mavenRepository;
  }

  public void setMavenRepository(MavenRepository mavenRepository) {
    this.mavenRepository = mavenRepository;
  }


  public RemoteRepositoryConfig npmRepository(NpmRepository npmRepository) {
    this.npmRepository = npmRepository;
    return this;
  }

  /**
   * Get npmRepository
   * @return npmRepository
   */
  @javax.annotation.Nullable
  public NpmRepository getNpmRepository() {
    return npmRepository;
  }

  public void setNpmRepository(NpmRepository npmRepository) {
    this.npmRepository = npmRepository;
  }


  public RemoteRepositoryConfig pythonRepository(PythonRepository pythonRepository) {
    this.pythonRepository = pythonRepository;
    return this;
  }

  /**
   * Get pythonRepository
   * @return pythonRepository
   */
  @javax.annotation.Nullable
  public PythonRepository getPythonRepository() {
    return pythonRepository;
  }

  public void setPythonRepository(PythonRepository pythonRepository) {
    this.pythonRepository = pythonRepository;
  }


  public RemoteRepositoryConfig upstreamCredentials(UpstreamCredentials upstreamCredentials) {
    this.upstreamCredentials = upstreamCredentials;
    return this;
  }

  /**
   * Get upstreamCredentials
   * @return upstreamCredentials
   */
  @javax.annotation.Nullable
  public UpstreamCredentials getUpstreamCredentials() {
    return upstreamCredentials;
  }

  public void setUpstreamCredentials(UpstreamCredentials upstreamCredentials) {
    this.upstreamCredentials = upstreamCredentials;
  }


  public RemoteRepositoryConfig yumRepository(YumRepository yumRepository) {
    this.yumRepository = yumRepository;
    return this;
  }

  /**
   * Get yumRepository
   * @return yumRepository
   */
  @javax.annotation.Nullable
  public YumRepository getYumRepository() {
    return yumRepository;
  }

  public void setYumRepository(YumRepository yumRepository) {
    this.yumRepository = yumRepository;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteRepositoryConfig remoteRepositoryConfig = (RemoteRepositoryConfig) o;
    return Objects.equals(this.aptRepository, remoteRepositoryConfig.aptRepository) &&
        Objects.equals(this.description, remoteRepositoryConfig.description) &&
        Objects.equals(this.dockerRepository, remoteRepositoryConfig.dockerRepository) &&
        Objects.equals(this.mavenRepository, remoteRepositoryConfig.mavenRepository) &&
        Objects.equals(this.npmRepository, remoteRepositoryConfig.npmRepository) &&
        Objects.equals(this.pythonRepository, remoteRepositoryConfig.pythonRepository) &&
        Objects.equals(this.upstreamCredentials, remoteRepositoryConfig.upstreamCredentials) &&
        Objects.equals(this.yumRepository, remoteRepositoryConfig.yumRepository);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aptRepository, description, dockerRepository, mavenRepository, npmRepository, pythonRepository, upstreamCredentials, yumRepository);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteRepositoryConfig {\n");
    sb.append("    aptRepository: ").append(toIndentedString(aptRepository)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dockerRepository: ").append(toIndentedString(dockerRepository)).append("\n");
    sb.append("    mavenRepository: ").append(toIndentedString(mavenRepository)).append("\n");
    sb.append("    npmRepository: ").append(toIndentedString(npmRepository)).append("\n");
    sb.append("    pythonRepository: ").append(toIndentedString(pythonRepository)).append("\n");
    sb.append("    upstreamCredentials: ").append(toIndentedString(upstreamCredentials)).append("\n");
    sb.append("    yumRepository: ").append(toIndentedString(yumRepository)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aptRepository");
    openapiFields.add("description");
    openapiFields.add("dockerRepository");
    openapiFields.add("mavenRepository");
    openapiFields.add("npmRepository");
    openapiFields.add("pythonRepository");
    openapiFields.add("upstreamCredentials");
    openapiFields.add("yumRepository");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoteRepositoryConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoteRepositoryConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoteRepositoryConfig is not found in the empty JSON string", RemoteRepositoryConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoteRepositoryConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoteRepositoryConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `aptRepository`
      if (jsonObj.get("aptRepository") != null && !jsonObj.get("aptRepository").isJsonNull()) {
        AptRepository.validateJsonElement(jsonObj.get("aptRepository"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `dockerRepository`
      if (jsonObj.get("dockerRepository") != null && !jsonObj.get("dockerRepository").isJsonNull()) {
        DockerRepository.validateJsonElement(jsonObj.get("dockerRepository"));
      }
      // validate the optional field `mavenRepository`
      if (jsonObj.get("mavenRepository") != null && !jsonObj.get("mavenRepository").isJsonNull()) {
        MavenRepository.validateJsonElement(jsonObj.get("mavenRepository"));
      }
      // validate the optional field `npmRepository`
      if (jsonObj.get("npmRepository") != null && !jsonObj.get("npmRepository").isJsonNull()) {
        NpmRepository.validateJsonElement(jsonObj.get("npmRepository"));
      }
      // validate the optional field `pythonRepository`
      if (jsonObj.get("pythonRepository") != null && !jsonObj.get("pythonRepository").isJsonNull()) {
        PythonRepository.validateJsonElement(jsonObj.get("pythonRepository"));
      }
      // validate the optional field `upstreamCredentials`
      if (jsonObj.get("upstreamCredentials") != null && !jsonObj.get("upstreamCredentials").isJsonNull()) {
        UpstreamCredentials.validateJsonElement(jsonObj.get("upstreamCredentials"));
      }
      // validate the optional field `yumRepository`
      if (jsonObj.get("yumRepository") != null && !jsonObj.get("yumRepository").isJsonNull()) {
        YumRepository.validateJsonElement(jsonObj.get("yumRepository"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoteRepositoryConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoteRepositoryConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoteRepositoryConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoteRepositoryConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoteRepositoryConfig>() {
           @Override
           public void write(JsonWriter out, RemoteRepositoryConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoteRepositoryConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoteRepositoryConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoteRepositoryConfig
   * @throws IOException if the JSON string is invalid with respect to RemoteRepositoryConfig
   */
  public static RemoteRepositoryConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoteRepositoryConfig.class);
  }

  /**
   * Convert an instance of RemoteRepositoryConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

