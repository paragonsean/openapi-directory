/*
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries are set, all must be satisfied for the condition to be satisfied.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:16.114902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CleanupPolicyCondition {
  public static final String SERIALIZED_NAME_NEWER_THAN = "newerThan";
  @SerializedName(SERIALIZED_NAME_NEWER_THAN)
  private String newerThan;

  public static final String SERIALIZED_NAME_OLDER_THAN = "olderThan";
  @SerializedName(SERIALIZED_NAME_OLDER_THAN)
  private String olderThan;

  public static final String SERIALIZED_NAME_PACKAGE_NAME_PREFIXES = "packageNamePrefixes";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME_PREFIXES)
  private List<String> packageNamePrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAG_PREFIXES = "tagPrefixes";
  @SerializedName(SERIALIZED_NAME_TAG_PREFIXES)
  private List<String> tagPrefixes = new ArrayList<>();

  /**
   * Match versions by tag status.
   */
  @JsonAdapter(TagStateEnum.Adapter.class)
  public enum TagStateEnum {
    TAG_STATE_UNSPECIFIED("TAG_STATE_UNSPECIFIED"),
    
    TAGGED("TAGGED"),
    
    UNTAGGED("UNTAGGED"),
    
    ANY("ANY");

    private String value;

    TagStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TagStateEnum fromValue(String value) {
      for (TagStateEnum b : TagStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TagStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TagStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TagStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TagStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TagStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAG_STATE = "tagState";
  @SerializedName(SERIALIZED_NAME_TAG_STATE)
  private TagStateEnum tagState;

  public static final String SERIALIZED_NAME_VERSION_NAME_PREFIXES = "versionNamePrefixes";
  @SerializedName(SERIALIZED_NAME_VERSION_NAME_PREFIXES)
  private List<String> versionNamePrefixes = new ArrayList<>();

  public CleanupPolicyCondition() {
  }

  public CleanupPolicyCondition newerThan(String newerThan) {
    this.newerThan = newerThan;
    return this;
  }

  /**
   * Match versions newer than a duration.
   * @return newerThan
   */
  @javax.annotation.Nullable
  public String getNewerThan() {
    return newerThan;
  }

  public void setNewerThan(String newerThan) {
    this.newerThan = newerThan;
  }


  public CleanupPolicyCondition olderThan(String olderThan) {
    this.olderThan = olderThan;
    return this;
  }

  /**
   * Match versions older than a duration.
   * @return olderThan
   */
  @javax.annotation.Nullable
  public String getOlderThan() {
    return olderThan;
  }

  public void setOlderThan(String olderThan) {
    this.olderThan = olderThan;
  }


  public CleanupPolicyCondition packageNamePrefixes(List<String> packageNamePrefixes) {
    this.packageNamePrefixes = packageNamePrefixes;
    return this;
  }

  public CleanupPolicyCondition addPackageNamePrefixesItem(String packageNamePrefixesItem) {
    if (this.packageNamePrefixes == null) {
      this.packageNamePrefixes = new ArrayList<>();
    }
    this.packageNamePrefixes.add(packageNamePrefixesItem);
    return this;
  }

  /**
   * Match versions by package prefix. Applied on any prefix match.
   * @return packageNamePrefixes
   */
  @javax.annotation.Nullable
  public List<String> getPackageNamePrefixes() {
    return packageNamePrefixes;
  }

  public void setPackageNamePrefixes(List<String> packageNamePrefixes) {
    this.packageNamePrefixes = packageNamePrefixes;
  }


  public CleanupPolicyCondition tagPrefixes(List<String> tagPrefixes) {
    this.tagPrefixes = tagPrefixes;
    return this;
  }

  public CleanupPolicyCondition addTagPrefixesItem(String tagPrefixesItem) {
    if (this.tagPrefixes == null) {
      this.tagPrefixes = new ArrayList<>();
    }
    this.tagPrefixes.add(tagPrefixesItem);
    return this;
  }

  /**
   * Match versions by tag prefix. Applied on any prefix match.
   * @return tagPrefixes
   */
  @javax.annotation.Nullable
  public List<String> getTagPrefixes() {
    return tagPrefixes;
  }

  public void setTagPrefixes(List<String> tagPrefixes) {
    this.tagPrefixes = tagPrefixes;
  }


  public CleanupPolicyCondition tagState(TagStateEnum tagState) {
    this.tagState = tagState;
    return this;
  }

  /**
   * Match versions by tag status.
   * @return tagState
   */
  @javax.annotation.Nullable
  public TagStateEnum getTagState() {
    return tagState;
  }

  public void setTagState(TagStateEnum tagState) {
    this.tagState = tagState;
  }


  public CleanupPolicyCondition versionNamePrefixes(List<String> versionNamePrefixes) {
    this.versionNamePrefixes = versionNamePrefixes;
    return this;
  }

  public CleanupPolicyCondition addVersionNamePrefixesItem(String versionNamePrefixesItem) {
    if (this.versionNamePrefixes == null) {
      this.versionNamePrefixes = new ArrayList<>();
    }
    this.versionNamePrefixes.add(versionNamePrefixesItem);
    return this;
  }

  /**
   * Match versions by version name prefix. Applied on any prefix match.
   * @return versionNamePrefixes
   */
  @javax.annotation.Nullable
  public List<String> getVersionNamePrefixes() {
    return versionNamePrefixes;
  }

  public void setVersionNamePrefixes(List<String> versionNamePrefixes) {
    this.versionNamePrefixes = versionNamePrefixes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CleanupPolicyCondition cleanupPolicyCondition = (CleanupPolicyCondition) o;
    return Objects.equals(this.newerThan, cleanupPolicyCondition.newerThan) &&
        Objects.equals(this.olderThan, cleanupPolicyCondition.olderThan) &&
        Objects.equals(this.packageNamePrefixes, cleanupPolicyCondition.packageNamePrefixes) &&
        Objects.equals(this.tagPrefixes, cleanupPolicyCondition.tagPrefixes) &&
        Objects.equals(this.tagState, cleanupPolicyCondition.tagState) &&
        Objects.equals(this.versionNamePrefixes, cleanupPolicyCondition.versionNamePrefixes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newerThan, olderThan, packageNamePrefixes, tagPrefixes, tagState, versionNamePrefixes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CleanupPolicyCondition {\n");
    sb.append("    newerThan: ").append(toIndentedString(newerThan)).append("\n");
    sb.append("    olderThan: ").append(toIndentedString(olderThan)).append("\n");
    sb.append("    packageNamePrefixes: ").append(toIndentedString(packageNamePrefixes)).append("\n");
    sb.append("    tagPrefixes: ").append(toIndentedString(tagPrefixes)).append("\n");
    sb.append("    tagState: ").append(toIndentedString(tagState)).append("\n");
    sb.append("    versionNamePrefixes: ").append(toIndentedString(versionNamePrefixes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("newerThan");
    openapiFields.add("olderThan");
    openapiFields.add("packageNamePrefixes");
    openapiFields.add("tagPrefixes");
    openapiFields.add("tagState");
    openapiFields.add("versionNamePrefixes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CleanupPolicyCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CleanupPolicyCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CleanupPolicyCondition is not found in the empty JSON string", CleanupPolicyCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CleanupPolicyCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CleanupPolicyCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("newerThan") != null && !jsonObj.get("newerThan").isJsonNull()) && !jsonObj.get("newerThan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newerThan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newerThan").toString()));
      }
      if ((jsonObj.get("olderThan") != null && !jsonObj.get("olderThan").isJsonNull()) && !jsonObj.get("olderThan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `olderThan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("olderThan").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("packageNamePrefixes") != null && !jsonObj.get("packageNamePrefixes").isJsonNull() && !jsonObj.get("packageNamePrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageNamePrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("packageNamePrefixes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tagPrefixes") != null && !jsonObj.get("tagPrefixes").isJsonNull() && !jsonObj.get("tagPrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagPrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("tagPrefixes").toString()));
      }
      if ((jsonObj.get("tagState") != null && !jsonObj.get("tagState").isJsonNull()) && !jsonObj.get("tagState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagState").toString()));
      }
      // validate the optional field `tagState`
      if (jsonObj.get("tagState") != null && !jsonObj.get("tagState").isJsonNull()) {
        TagStateEnum.validateJsonElement(jsonObj.get("tagState"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("versionNamePrefixes") != null && !jsonObj.get("versionNamePrefixes").isJsonNull() && !jsonObj.get("versionNamePrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionNamePrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("versionNamePrefixes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CleanupPolicyCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CleanupPolicyCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CleanupPolicyCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CleanupPolicyCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<CleanupPolicyCondition>() {
           @Override
           public void write(JsonWriter out, CleanupPolicyCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CleanupPolicyCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CleanupPolicyCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CleanupPolicyCondition
   * @throws IOException if the JSON string is invalid with respect to CleanupPolicyCondition
   */
  public static CleanupPolicyCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CleanupPolicyCondition.class);
  }

  /**
   * Convert an instance of CleanupPolicyCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

