/*
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DockerImage represents a docker artifact. The following fields are returned as untyped metadata in the Version resource, using camelcase keys (i.e. metadata.imageSizeBytes): * imageSizeBytes * mediaType * buildTime
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:16.114902-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DockerImage {
  public static final String SERIALIZED_NAME_BUILD_TIME = "buildTime";
  @SerializedName(SERIALIZED_NAME_BUILD_TIME)
  private String buildTime;

  public static final String SERIALIZED_NAME_IMAGE_SIZE_BYTES = "imageSizeBytes";
  @SerializedName(SERIALIZED_NAME_IMAGE_SIZE_BYTES)
  private String imageSizeBytes;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "mediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_UPLOAD_TIME = "uploadTime";
  @SerializedName(SERIALIZED_NAME_UPLOAD_TIME)
  private String uploadTime;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public DockerImage() {
  }

  public DockerImage(
     String updateTime
  ) {
    this();
    this.updateTime = updateTime;
  }

  public DockerImage buildTime(String buildTime) {
    this.buildTime = buildTime;
    return this;
  }

  /**
   * The time this image was built. This field is returned as the &#39;metadata.buildTime&#39; field in the Version resource. The build time is returned to the client as an RFC 3339 string, which can be easily used with the JavaScript Date constructor.
   * @return buildTime
   */
  @javax.annotation.Nullable
  public String getBuildTime() {
    return buildTime;
  }

  public void setBuildTime(String buildTime) {
    this.buildTime = buildTime;
  }


  public DockerImage imageSizeBytes(String imageSizeBytes) {
    this.imageSizeBytes = imageSizeBytes;
    return this;
  }

  /**
   * Calculated size of the image. This field is returned as the &#39;metadata.imageSizeBytes&#39; field in the Version resource.
   * @return imageSizeBytes
   */
  @javax.annotation.Nullable
  public String getImageSizeBytes() {
    return imageSizeBytes;
  }

  public void setImageSizeBytes(String imageSizeBytes) {
    this.imageSizeBytes = imageSizeBytes;
  }


  public DockerImage mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Media type of this image, e.g. \&quot;application/vnd.docker.distribution.manifest.v2+json\&quot;. This field is returned as the &#39;metadata.mediaType&#39; field in the Version resource.
   * @return mediaType
   */
  @javax.annotation.Nullable
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public DockerImage name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. registry_location, project_id, repository_name and image id forms a unique image name:&#x60;projects//locations//repository//dockerImages/&#x60;. For example, \&quot;projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\&quot;, where \&quot;us-west4\&quot; is the registry_location, \&quot;test-project\&quot; is the project_id, \&quot;test-repo\&quot; is the repository_name and \&quot;nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\&quot; is the image&#39;s digest.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DockerImage tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DockerImage addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags attached to this image.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  /**
   * Output only. The time when the docker image was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public DockerImage uploadTime(String uploadTime) {
    this.uploadTime = uploadTime;
    return this;
  }

  /**
   * Time the image was uploaded.
   * @return uploadTime
   */
  @javax.annotation.Nullable
  public String getUploadTime() {
    return uploadTime;
  }

  public void setUploadTime(String uploadTime) {
    this.uploadTime = uploadTime;
  }


  public DockerImage uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DockerImage dockerImage = (DockerImage) o;
    return Objects.equals(this.buildTime, dockerImage.buildTime) &&
        Objects.equals(this.imageSizeBytes, dockerImage.imageSizeBytes) &&
        Objects.equals(this.mediaType, dockerImage.mediaType) &&
        Objects.equals(this.name, dockerImage.name) &&
        Objects.equals(this.tags, dockerImage.tags) &&
        Objects.equals(this.updateTime, dockerImage.updateTime) &&
        Objects.equals(this.uploadTime, dockerImage.uploadTime) &&
        Objects.equals(this.uri, dockerImage.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildTime, imageSizeBytes, mediaType, name, tags, updateTime, uploadTime, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DockerImage {\n");
    sb.append("    buildTime: ").append(toIndentedString(buildTime)).append("\n");
    sb.append("    imageSizeBytes: ").append(toIndentedString(imageSizeBytes)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    uploadTime: ").append(toIndentedString(uploadTime)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildTime");
    openapiFields.add("imageSizeBytes");
    openapiFields.add("mediaType");
    openapiFields.add("name");
    openapiFields.add("tags");
    openapiFields.add("updateTime");
    openapiFields.add("uploadTime");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DockerImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DockerImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DockerImage is not found in the empty JSON string", DockerImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DockerImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DockerImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buildTime") != null && !jsonObj.get("buildTime").isJsonNull()) && !jsonObj.get("buildTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildTime").toString()));
      }
      if ((jsonObj.get("imageSizeBytes") != null && !jsonObj.get("imageSizeBytes").isJsonNull()) && !jsonObj.get("imageSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageSizeBytes").toString()));
      }
      if ((jsonObj.get("mediaType") != null && !jsonObj.get("mediaType").isJsonNull()) && !jsonObj.get("mediaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaType").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("uploadTime") != null && !jsonObj.get("uploadTime").isJsonNull()) && !jsonObj.get("uploadTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploadTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploadTime").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DockerImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DockerImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DockerImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DockerImage.class));

       return (TypeAdapter<T>) new TypeAdapter<DockerImage>() {
           @Override
           public void write(JsonWriter out, DockerImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DockerImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DockerImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DockerImage
   * @throws IOException if the JSON string is invalid with respect to DockerImage
   */
  public static DockerImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DockerImage.class);
  }

  /**
   * Convert an instance of DockerImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

