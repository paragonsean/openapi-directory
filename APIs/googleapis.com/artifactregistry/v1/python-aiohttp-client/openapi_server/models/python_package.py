# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PythonPackage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, name: str=None, package_name: str=None, update_time: str=None, uri: str=None, version: str=None):
        """PythonPackage - a model defined in OpenAPI

        :param create_time: The create_time of this PythonPackage.
        :param name: The name of this PythonPackage.
        :param package_name: The package_name of this PythonPackage.
        :param update_time: The update_time of this PythonPackage.
        :param uri: The uri of this PythonPackage.
        :param version: The version of this PythonPackage.
        """
        self.openapi_types = {
            'create_time': str,
            'name': str,
            'package_name': str,
            'update_time': str,
            'uri': str,
            'version': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'name': 'name',
            'package_name': 'packageName',
            'update_time': 'updateTime',
            'uri': 'uri',
            'version': 'version'
        }

        self._create_time = create_time
        self._name = name
        self._package_name = package_name
        self._update_time = update_time
        self._uri = uri
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PythonPackage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PythonPackage of this PythonPackage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this PythonPackage.

        Output only. Time the package was created.

        :return: The create_time of this PythonPackage.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this PythonPackage.

        Output only. Time the package was created.

        :param create_time: The create_time of this PythonPackage.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def name(self):
        """Gets the name of this PythonPackage.

        Required. registry_location, project_id, repository_name and python_package forms a unique package name:`projects//locations//repository//pythonPackages/`. For example, \"projects/test-project/locations/us-west4/repositories/test-repo/pythonPackages/ python_package:1.0.0\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and python_package:1.0.0\" is the python package.

        :return: The name of this PythonPackage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PythonPackage.

        Required. registry_location, project_id, repository_name and python_package forms a unique package name:`projects//locations//repository//pythonPackages/`. For example, \"projects/test-project/locations/us-west4/repositories/test-repo/pythonPackages/ python_package:1.0.0\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and python_package:1.0.0\" is the python package.

        :param name: The name of this PythonPackage.
        :type name: str
        """

        self._name = name

    @property
    def package_name(self):
        """Gets the package_name of this PythonPackage.

        Package for the artifact.

        :return: The package_name of this PythonPackage.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this PythonPackage.

        Package for the artifact.

        :param package_name: The package_name of this PythonPackage.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def update_time(self):
        """Gets the update_time of this PythonPackage.

        Output only. Time the package was updated.

        :return: The update_time of this PythonPackage.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this PythonPackage.

        Output only. Time the package was updated.

        :param update_time: The update_time of this PythonPackage.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def uri(self):
        """Gets the uri of this PythonPackage.

        Required. URL to access the package. Example: us-west4-python.pkg.dev/test-project/test-repo/python_package/file-name-1.0.0.tar.gz

        :return: The uri of this PythonPackage.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PythonPackage.

        Required. URL to access the package. Example: us-west4-python.pkg.dev/test-project/test-repo/python_package/file-name-1.0.0.tar.gz

        :param uri: The uri of this PythonPackage.
        :type uri: str
        """

        self._uri = uri

    @property
    def version(self):
        """Gets the version of this PythonPackage.

        Version of this package.

        :return: The version of this PythonPackage.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PythonPackage.

        Version of this package.

        :param version: The version of this PythonPackage.
        :type version: str
        """

        self._version = version
