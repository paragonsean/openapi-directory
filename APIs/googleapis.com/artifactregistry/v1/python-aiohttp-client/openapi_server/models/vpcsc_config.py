# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VPCSCConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, vpcsc_policy: str=None):
        """VPCSCConfig - a model defined in OpenAPI

        :param name: The name of this VPCSCConfig.
        :param vpcsc_policy: The vpcsc_policy of this VPCSCConfig.
        """
        self.openapi_types = {
            'name': str,
            'vpcsc_policy': str
        }

        self.attribute_map = {
            'name': 'name',
            'vpcsc_policy': 'vpcscPolicy'
        }

        self._name = name
        self._vpcsc_policy = vpcsc_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VPCSCConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VPCSCConfig of this VPCSCConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this VPCSCConfig.

        The name of the project's VPC SC Config. Always of the form: projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In response: always set

        :return: The name of this VPCSCConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VPCSCConfig.

        The name of the project's VPC SC Config. Always of the form: projects/{projectID}/locations/{location}/vpcscConfig In update request: never set In response: always set

        :param name: The name of this VPCSCConfig.
        :type name: str
        """

        self._name = name

    @property
    def vpcsc_policy(self):
        """Gets the vpcsc_policy of this VPCSCConfig.

        The project per location VPC SC policy that defines the VPC SC behavior for the Remote Repository (Allow/Deny).

        :return: The vpcsc_policy of this VPCSCConfig.
        :rtype: str
        """
        return self._vpcsc_policy

    @vpcsc_policy.setter
    def vpcsc_policy(self, vpcsc_policy):
        """Sets the vpcsc_policy of this VPCSCConfig.

        The project per location VPC SC policy that defines the VPC SC behavior for the Remote Repository (Allow/Deny).

        :param vpcsc_policy: The vpcsc_policy of this VPCSCConfig.
        :type vpcsc_policy: str
        """
        allowed_values = ["VPCSC_POLICY_UNSPECIFIED", "DENY", "ALLOW"]  # noqa: E501
        if vpcsc_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `vpcsc_policy` ({0}), must be one of {1}"
                .format(vpcsc_policy, allowed_values)
            )

        self._vpcsc_policy = vpcsc_policy
