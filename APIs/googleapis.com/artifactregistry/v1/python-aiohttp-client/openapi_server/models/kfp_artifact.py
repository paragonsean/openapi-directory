# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KfpArtifact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, version: str=None):
        """KfpArtifact - a model defined in OpenAPI

        :param name: The name of this KfpArtifact.
        :param version: The version of this KfpArtifact.
        """
        self.openapi_types = {
            'name': str,
            'version': str
        }

        self.attribute_map = {
            'name': 'name',
            'version': 'version'
        }

        self._name = name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KfpArtifact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KfpArtifact of this KfpArtifact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this KfpArtifact.

        Output only. Resource name of the KFP artifact. Since users don't directly interact with this resource, the name will be derived from the associated version. For example, when version = \".../versions/sha256:abcdef...\", the name will be \".../kfpArtifacts/sha256:abcdef...\".

        :return: The name of this KfpArtifact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KfpArtifact.

        Output only. Resource name of the KFP artifact. Since users don't directly interact with this resource, the name will be derived from the associated version. For example, when version = \".../versions/sha256:abcdef...\", the name will be \".../kfpArtifacts/sha256:abcdef...\".

        :param name: The name of this KfpArtifact.
        :type name: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this KfpArtifact.

        The version associated with the KFP artifact. Must follow the Semantic Versioning standard.

        :return: The version of this KfpArtifact.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this KfpArtifact.

        The version associated with the KFP artifact. Must follow the Semantic Versioning standard.

        :param version: The version of this KfpArtifact.
        :type version: str
        """

        self._version = version
