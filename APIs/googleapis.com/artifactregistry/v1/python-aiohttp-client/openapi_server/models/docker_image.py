# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DockerImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_time: str=None, image_size_bytes: str=None, media_type: str=None, name: str=None, tags: List[str]=None, update_time: str=None, upload_time: str=None, uri: str=None):
        """DockerImage - a model defined in OpenAPI

        :param build_time: The build_time of this DockerImage.
        :param image_size_bytes: The image_size_bytes of this DockerImage.
        :param media_type: The media_type of this DockerImage.
        :param name: The name of this DockerImage.
        :param tags: The tags of this DockerImage.
        :param update_time: The update_time of this DockerImage.
        :param upload_time: The upload_time of this DockerImage.
        :param uri: The uri of this DockerImage.
        """
        self.openapi_types = {
            'build_time': str,
            'image_size_bytes': str,
            'media_type': str,
            'name': str,
            'tags': List[str],
            'update_time': str,
            'upload_time': str,
            'uri': str
        }

        self.attribute_map = {
            'build_time': 'buildTime',
            'image_size_bytes': 'imageSizeBytes',
            'media_type': 'mediaType',
            'name': 'name',
            'tags': 'tags',
            'update_time': 'updateTime',
            'upload_time': 'uploadTime',
            'uri': 'uri'
        }

        self._build_time = build_time
        self._image_size_bytes = image_size_bytes
        self._media_type = media_type
        self._name = name
        self._tags = tags
        self._update_time = update_time
        self._upload_time = upload_time
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DockerImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DockerImage of this DockerImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_time(self):
        """Gets the build_time of this DockerImage.

        The time this image was built. This field is returned as the 'metadata.buildTime' field in the Version resource. The build time is returned to the client as an RFC 3339 string, which can be easily used with the JavaScript Date constructor.

        :return: The build_time of this DockerImage.
        :rtype: str
        """
        return self._build_time

    @build_time.setter
    def build_time(self, build_time):
        """Sets the build_time of this DockerImage.

        The time this image was built. This field is returned as the 'metadata.buildTime' field in the Version resource. The build time is returned to the client as an RFC 3339 string, which can be easily used with the JavaScript Date constructor.

        :param build_time: The build_time of this DockerImage.
        :type build_time: str
        """

        self._build_time = build_time

    @property
    def image_size_bytes(self):
        """Gets the image_size_bytes of this DockerImage.

        Calculated size of the image. This field is returned as the 'metadata.imageSizeBytes' field in the Version resource.

        :return: The image_size_bytes of this DockerImage.
        :rtype: str
        """
        return self._image_size_bytes

    @image_size_bytes.setter
    def image_size_bytes(self, image_size_bytes):
        """Sets the image_size_bytes of this DockerImage.

        Calculated size of the image. This field is returned as the 'metadata.imageSizeBytes' field in the Version resource.

        :param image_size_bytes: The image_size_bytes of this DockerImage.
        :type image_size_bytes: str
        """

        self._image_size_bytes = image_size_bytes

    @property
    def media_type(self):
        """Gets the media_type of this DockerImage.

        Media type of this image, e.g. \"application/vnd.docker.distribution.manifest.v2+json\". This field is returned as the 'metadata.mediaType' field in the Version resource.

        :return: The media_type of this DockerImage.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this DockerImage.

        Media type of this image, e.g. \"application/vnd.docker.distribution.manifest.v2+json\". This field is returned as the 'metadata.mediaType' field in the Version resource.

        :param media_type: The media_type of this DockerImage.
        :type media_type: str
        """

        self._media_type = media_type

    @property
    def name(self):
        """Gets the name of this DockerImage.

        Required. registry_location, project_id, repository_name and image id forms a unique image name:`projects//locations//repository//dockerImages/`. For example, \"projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and \"nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\" is the image's digest.

        :return: The name of this DockerImage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DockerImage.

        Required. registry_location, project_id, repository_name and image id forms a unique image name:`projects//locations//repository//dockerImages/`. For example, \"projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\", where \"us-west4\" is the registry_location, \"test-project\" is the project_id, \"test-repo\" is the repository_name and \"nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf\" is the image's digest.

        :param name: The name of this DockerImage.
        :type name: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this DockerImage.

        Tags attached to this image.

        :return: The tags of this DockerImage.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DockerImage.

        Tags attached to this image.

        :param tags: The tags of this DockerImage.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def update_time(self):
        """Gets the update_time of this DockerImage.

        Output only. The time when the docker image was last updated.

        :return: The update_time of this DockerImage.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this DockerImage.

        Output only. The time when the docker image was last updated.

        :param update_time: The update_time of this DockerImage.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def upload_time(self):
        """Gets the upload_time of this DockerImage.

        Time the image was uploaded.

        :return: The upload_time of this DockerImage.
        :rtype: str
        """
        return self._upload_time

    @upload_time.setter
    def upload_time(self, upload_time):
        """Sets the upload_time of this DockerImage.

        Time the image was uploaded.

        :param upload_time: The upload_time of this DockerImage.
        :type upload_time: str
        """

        self._upload_time = upload_time

    @property
    def uri(self):
        """Gets the uri of this DockerImage.

        Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf

        :return: The uri of this DockerImage.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this DockerImage.

        Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf

        :param uri: The uri of this DockerImage.
        :type uri: str
        """

        self._uri = uri
