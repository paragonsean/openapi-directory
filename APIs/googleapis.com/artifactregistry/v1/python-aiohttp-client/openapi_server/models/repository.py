# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cleanup_policy import CleanupPolicy
from openapi_server.models.docker_repository_config import DockerRepositoryConfig
from openapi_server.models.maven_repository_config import MavenRepositoryConfig
from openapi_server.models.remote_repository_config import RemoteRepositoryConfig
from openapi_server.models.virtual_repository_config import VirtualRepositoryConfig
from openapi_server import util


class Repository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cleanup_policies: Dict[str, CleanupPolicy]=None, cleanup_policy_dry_run: bool=None, create_time: str=None, description: str=None, disallow_unspecified_mode: bool=None, docker_config: DockerRepositoryConfig=None, format: str=None, kms_key_name: str=None, labels: Dict[str, str]=None, maven_config: MavenRepositoryConfig=None, mode: str=None, name: str=None, remote_repository_config: RemoteRepositoryConfig=None, satisfies_pzs: bool=None, size_bytes: str=None, update_time: str=None, virtual_repository_config: VirtualRepositoryConfig=None):
        """Repository - a model defined in OpenAPI

        :param cleanup_policies: The cleanup_policies of this Repository.
        :param cleanup_policy_dry_run: The cleanup_policy_dry_run of this Repository.
        :param create_time: The create_time of this Repository.
        :param description: The description of this Repository.
        :param disallow_unspecified_mode: The disallow_unspecified_mode of this Repository.
        :param docker_config: The docker_config of this Repository.
        :param format: The format of this Repository.
        :param kms_key_name: The kms_key_name of this Repository.
        :param labels: The labels of this Repository.
        :param maven_config: The maven_config of this Repository.
        :param mode: The mode of this Repository.
        :param name: The name of this Repository.
        :param remote_repository_config: The remote_repository_config of this Repository.
        :param satisfies_pzs: The satisfies_pzs of this Repository.
        :param size_bytes: The size_bytes of this Repository.
        :param update_time: The update_time of this Repository.
        :param virtual_repository_config: The virtual_repository_config of this Repository.
        """
        self.openapi_types = {
            'cleanup_policies': Dict[str, CleanupPolicy],
            'cleanup_policy_dry_run': bool,
            'create_time': str,
            'description': str,
            'disallow_unspecified_mode': bool,
            'docker_config': DockerRepositoryConfig,
            'format': str,
            'kms_key_name': str,
            'labels': Dict[str, str],
            'maven_config': MavenRepositoryConfig,
            'mode': str,
            'name': str,
            'remote_repository_config': RemoteRepositoryConfig,
            'satisfies_pzs': bool,
            'size_bytes': str,
            'update_time': str,
            'virtual_repository_config': VirtualRepositoryConfig
        }

        self.attribute_map = {
            'cleanup_policies': 'cleanupPolicies',
            'cleanup_policy_dry_run': 'cleanupPolicyDryRun',
            'create_time': 'createTime',
            'description': 'description',
            'disallow_unspecified_mode': 'disallowUnspecifiedMode',
            'docker_config': 'dockerConfig',
            'format': 'format',
            'kms_key_name': 'kmsKeyName',
            'labels': 'labels',
            'maven_config': 'mavenConfig',
            'mode': 'mode',
            'name': 'name',
            'remote_repository_config': 'remoteRepositoryConfig',
            'satisfies_pzs': 'satisfiesPzs',
            'size_bytes': 'sizeBytes',
            'update_time': 'updateTime',
            'virtual_repository_config': 'virtualRepositoryConfig'
        }

        self._cleanup_policies = cleanup_policies
        self._cleanup_policy_dry_run = cleanup_policy_dry_run
        self._create_time = create_time
        self._description = description
        self._disallow_unspecified_mode = disallow_unspecified_mode
        self._docker_config = docker_config
        self._format = format
        self._kms_key_name = kms_key_name
        self._labels = labels
        self._maven_config = maven_config
        self._mode = mode
        self._name = name
        self._remote_repository_config = remote_repository_config
        self._satisfies_pzs = satisfies_pzs
        self._size_bytes = size_bytes
        self._update_time = update_time
        self._virtual_repository_config = virtual_repository_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Repository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Repository of this Repository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cleanup_policies(self):
        """Gets the cleanup_policies of this Repository.

        Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.

        :return: The cleanup_policies of this Repository.
        :rtype: Dict[str, CleanupPolicy]
        """
        return self._cleanup_policies

    @cleanup_policies.setter
    def cleanup_policies(self, cleanup_policies):
        """Sets the cleanup_policies of this Repository.

        Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.

        :param cleanup_policies: The cleanup_policies of this Repository.
        :type cleanup_policies: Dict[str, CleanupPolicy]
        """

        self._cleanup_policies = cleanup_policies

    @property
    def cleanup_policy_dry_run(self):
        """Gets the cleanup_policy_dry_run of this Repository.

        Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.

        :return: The cleanup_policy_dry_run of this Repository.
        :rtype: bool
        """
        return self._cleanup_policy_dry_run

    @cleanup_policy_dry_run.setter
    def cleanup_policy_dry_run(self, cleanup_policy_dry_run):
        """Sets the cleanup_policy_dry_run of this Repository.

        Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.

        :param cleanup_policy_dry_run: The cleanup_policy_dry_run of this Repository.
        :type cleanup_policy_dry_run: bool
        """

        self._cleanup_policy_dry_run = cleanup_policy_dry_run

    @property
    def create_time(self):
        """Gets the create_time of this Repository.

        Output only. The time when the repository was created.

        :return: The create_time of this Repository.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Repository.

        Output only. The time when the repository was created.

        :param create_time: The create_time of this Repository.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Repository.

        The user-provided description of the repository.

        :return: The description of this Repository.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Repository.

        The user-provided description of the repository.

        :param description: The description of this Repository.
        :type description: str
        """

        self._description = description

    @property
    def disallow_unspecified_mode(self):
        """Gets the disallow_unspecified_mode of this Repository.

        Optional. If this is true, aunspecified repo type will be treated as error. Is used for new repo types that don't have any specific fields. Right now is used by AOSS team when creating repos for customers.

        :return: The disallow_unspecified_mode of this Repository.
        :rtype: bool
        """
        return self._disallow_unspecified_mode

    @disallow_unspecified_mode.setter
    def disallow_unspecified_mode(self, disallow_unspecified_mode):
        """Sets the disallow_unspecified_mode of this Repository.

        Optional. If this is true, aunspecified repo type will be treated as error. Is used for new repo types that don't have any specific fields. Right now is used by AOSS team when creating repos for customers.

        :param disallow_unspecified_mode: The disallow_unspecified_mode of this Repository.
        :type disallow_unspecified_mode: bool
        """

        self._disallow_unspecified_mode = disallow_unspecified_mode

    @property
    def docker_config(self):
        """Gets the docker_config of this Repository.


        :return: The docker_config of this Repository.
        :rtype: DockerRepositoryConfig
        """
        return self._docker_config

    @docker_config.setter
    def docker_config(self, docker_config):
        """Sets the docker_config of this Repository.


        :param docker_config: The docker_config of this Repository.
        :type docker_config: DockerRepositoryConfig
        """

        self._docker_config = docker_config

    @property
    def format(self):
        """Gets the format of this Repository.

        Optional. The format of packages that are stored in the repository.

        :return: The format of this Repository.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Repository.

        Optional. The format of packages that are stored in the repository.

        :param format: The format of this Repository.
        :type format: str
        """
        allowed_values = ["FORMAT_UNSPECIFIED", "DOCKER", "MAVEN", "NPM", "APT", "YUM", "GOOGET", "PYTHON", "KFP", "GO"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this Repository.

        The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.

        :return: The kms_key_name of this Repository.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this Repository.

        The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.

        :param kms_key_name: The kms_key_name of this Repository.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def labels(self):
        """Gets the labels of this Repository.

        Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.

        :return: The labels of this Repository.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Repository.

        Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.

        :param labels: The labels of this Repository.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def maven_config(self):
        """Gets the maven_config of this Repository.


        :return: The maven_config of this Repository.
        :rtype: MavenRepositoryConfig
        """
        return self._maven_config

    @maven_config.setter
    def maven_config(self, maven_config):
        """Sets the maven_config of this Repository.


        :param maven_config: The maven_config of this Repository.
        :type maven_config: MavenRepositoryConfig
        """

        self._maven_config = maven_config

    @property
    def mode(self):
        """Gets the mode of this Repository.

        Optional. The mode of the repository.

        :return: The mode of this Repository.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Repository.

        Optional. The mode of the repository.

        :param mode: The mode of this Repository.
        :type mode: str
        """
        allowed_values = ["MODE_UNSPECIFIED", "STANDARD_REPOSITORY", "VIRTUAL_REPOSITORY", "REMOTE_REPOSITORY"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this Repository.

        The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`.

        :return: The name of this Repository.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repository.

        The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`.

        :param name: The name of this Repository.
        :type name: str
        """

        self._name = name

    @property
    def remote_repository_config(self):
        """Gets the remote_repository_config of this Repository.


        :return: The remote_repository_config of this Repository.
        :rtype: RemoteRepositoryConfig
        """
        return self._remote_repository_config

    @remote_repository_config.setter
    def remote_repository_config(self, remote_repository_config):
        """Sets the remote_repository_config of this Repository.


        :param remote_repository_config: The remote_repository_config of this Repository.
        :type remote_repository_config: RemoteRepositoryConfig
        """

        self._remote_repository_config = remote_repository_config

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Repository.

        Output only. If set, the repository satisfies physical zone separation.

        :return: The satisfies_pzs of this Repository.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Repository.

        Output only. If set, the repository satisfies physical zone separation.

        :param satisfies_pzs: The satisfies_pzs of this Repository.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def size_bytes(self):
        """Gets the size_bytes of this Repository.

        Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.

        :return: The size_bytes of this Repository.
        :rtype: str
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this Repository.

        Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.

        :param size_bytes: The size_bytes of this Repository.
        :type size_bytes: str
        """

        self._size_bytes = size_bytes

    @property
    def update_time(self):
        """Gets the update_time of this Repository.

        Output only. The time when the repository was last updated.

        :return: The update_time of this Repository.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Repository.

        Output only. The time when the repository was last updated.

        :param update_time: The update_time of this Repository.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def virtual_repository_config(self):
        """Gets the virtual_repository_config of this Repository.


        :return: The virtual_repository_config of this Repository.
        :rtype: VirtualRepositoryConfig
        """
        return self._virtual_repository_config

    @virtual_repository_config.setter
    def virtual_repository_config(self, virtual_repository_config):
        """Sets the virtual_repository_config of this Repository.


        :param virtual_repository_config: The virtual_repository_config of this Repository.
        :type virtual_repository_config: VirtualRepositoryConfig
        """

        self._virtual_repository_config = virtual_repository_config
