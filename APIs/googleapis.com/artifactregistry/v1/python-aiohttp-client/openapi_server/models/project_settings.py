# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, legacy_redirection_state: str=None, name: str=None):
        """ProjectSettings - a model defined in OpenAPI

        :param legacy_redirection_state: The legacy_redirection_state of this ProjectSettings.
        :param name: The name of this ProjectSettings.
        """
        self.openapi_types = {
            'legacy_redirection_state': str,
            'name': str
        }

        self.attribute_map = {
            'legacy_redirection_state': 'legacyRedirectionState',
            'name': 'name'
        }

        self._legacy_redirection_state = legacy_redirection_state
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectSettings of this ProjectSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def legacy_redirection_state(self):
        """Gets the legacy_redirection_state of this ProjectSettings.

        The redirection state of the legacy repositories in this project.

        :return: The legacy_redirection_state of this ProjectSettings.
        :rtype: str
        """
        return self._legacy_redirection_state

    @legacy_redirection_state.setter
    def legacy_redirection_state(self, legacy_redirection_state):
        """Sets the legacy_redirection_state of this ProjectSettings.

        The redirection state of the legacy repositories in this project.

        :param legacy_redirection_state: The legacy_redirection_state of this ProjectSettings.
        :type legacy_redirection_state: str
        """
        allowed_values = ["REDIRECTION_STATE_UNSPECIFIED", "REDIRECTION_FROM_GCR_IO_DISABLED", "REDIRECTION_FROM_GCR_IO_ENABLED", "REDIRECTION_FROM_GCR_IO_FINALIZED"]  # noqa: E501
        if legacy_redirection_state not in allowed_values:
            raise ValueError(
                "Invalid value for `legacy_redirection_state` ({0}), must be one of {1}"
                .format(legacy_redirection_state, allowed_values)
            )

        self._legacy_redirection_state = legacy_redirection_state

    @property
    def name(self):
        """Gets the name of this ProjectSettings.

        The name of the project's settings. Always of the form: projects/{project-id}/projectSettings In update request: never set In response: always set

        :return: The name of this ProjectSettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectSettings.

        The name of the project's settings. Always of the form: projects/{project-id}/projectSettings In update request: never set In response: always set

        :param name: The name of this ProjectSettings.
        :type name: str
        """

        self._name = name
