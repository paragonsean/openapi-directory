# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cleanup_policy_condition import CleanupPolicyCondition
from openapi_server.models.cleanup_policy_most_recent_versions import CleanupPolicyMostRecentVersions
from openapi_server import util


class CleanupPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, condition: CleanupPolicyCondition=None, id: str=None, most_recent_versions: CleanupPolicyMostRecentVersions=None):
        """CleanupPolicy - a model defined in OpenAPI

        :param action: The action of this CleanupPolicy.
        :param condition: The condition of this CleanupPolicy.
        :param id: The id of this CleanupPolicy.
        :param most_recent_versions: The most_recent_versions of this CleanupPolicy.
        """
        self.openapi_types = {
            'action': str,
            'condition': CleanupPolicyCondition,
            'id': str,
            'most_recent_versions': CleanupPolicyMostRecentVersions
        }

        self.attribute_map = {
            'action': 'action',
            'condition': 'condition',
            'id': 'id',
            'most_recent_versions': 'mostRecentVersions'
        }

        self._action = action
        self._condition = condition
        self._id = id
        self._most_recent_versions = most_recent_versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CleanupPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CleanupPolicy of this CleanupPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this CleanupPolicy.

        Policy action.

        :return: The action of this CleanupPolicy.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CleanupPolicy.

        Policy action.

        :param action: The action of this CleanupPolicy.
        :type action: str
        """
        allowed_values = ["ACTION_UNSPECIFIED", "DELETE", "KEEP"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def condition(self):
        """Gets the condition of this CleanupPolicy.


        :return: The condition of this CleanupPolicy.
        :rtype: CleanupPolicyCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this CleanupPolicy.


        :param condition: The condition of this CleanupPolicy.
        :type condition: CleanupPolicyCondition
        """

        self._condition = condition

    @property
    def id(self):
        """Gets the id of this CleanupPolicy.

        The user-provided ID of the cleanup policy.

        :return: The id of this CleanupPolicy.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CleanupPolicy.

        The user-provided ID of the cleanup policy.

        :param id: The id of this CleanupPolicy.
        :type id: str
        """

        self._id = id

    @property
    def most_recent_versions(self):
        """Gets the most_recent_versions of this CleanupPolicy.


        :return: The most_recent_versions of this CleanupPolicy.
        :rtype: CleanupPolicyMostRecentVersions
        """
        return self._most_recent_versions

    @most_recent_versions.setter
    def most_recent_versions(self, most_recent_versions):
        """Sets the most_recent_versions of this CleanupPolicy.


        :param most_recent_versions: The most_recent_versions of this CleanupPolicy.
        :type most_recent_versions: CleanupPolicyMostRecentVersions
        """

        self._most_recent_versions = most_recent_versions
