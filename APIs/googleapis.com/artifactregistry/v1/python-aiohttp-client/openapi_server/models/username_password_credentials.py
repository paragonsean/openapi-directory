# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsernamePasswordCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password_secret_version: str=None, username: str=None):
        """UsernamePasswordCredentials - a model defined in OpenAPI

        :param password_secret_version: The password_secret_version of this UsernamePasswordCredentials.
        :param username: The username of this UsernamePasswordCredentials.
        """
        self.openapi_types = {
            'password_secret_version': str,
            'username': str
        }

        self.attribute_map = {
            'password_secret_version': 'passwordSecretVersion',
            'username': 'username'
        }

        self._password_secret_version = password_secret_version
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsernamePasswordCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsernamePasswordCredentials of this UsernamePasswordCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password_secret_version(self):
        """Gets the password_secret_version of this UsernamePasswordCredentials.

        The Secret Manager key version that holds the password to access the remote repository. Must be in the format of `projects/{project}/secrets/{secret}/versions/{version}`.

        :return: The password_secret_version of this UsernamePasswordCredentials.
        :rtype: str
        """
        return self._password_secret_version

    @password_secret_version.setter
    def password_secret_version(self, password_secret_version):
        """Sets the password_secret_version of this UsernamePasswordCredentials.

        The Secret Manager key version that holds the password to access the remote repository. Must be in the format of `projects/{project}/secrets/{secret}/versions/{version}`.

        :param password_secret_version: The password_secret_version of this UsernamePasswordCredentials.
        :type password_secret_version: str
        """

        self._password_secret_version = password_secret_version

    @property
    def username(self):
        """Gets the username of this UsernamePasswordCredentials.

        The username to access the remote repository.

        :return: The username of this UsernamePasswordCredentials.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UsernamePasswordCredentials.

        The username to access the remote repository.

        :param username: The username of this UsernamePasswordCredentials.
        :type username: str
        """

        self._username = username
