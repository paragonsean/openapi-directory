# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CleanupPolicyCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, newer_than: str=None, older_than: str=None, package_name_prefixes: List[str]=None, tag_prefixes: List[str]=None, tag_state: str=None, version_name_prefixes: List[str]=None):
        """CleanupPolicyCondition - a model defined in OpenAPI

        :param newer_than: The newer_than of this CleanupPolicyCondition.
        :param older_than: The older_than of this CleanupPolicyCondition.
        :param package_name_prefixes: The package_name_prefixes of this CleanupPolicyCondition.
        :param tag_prefixes: The tag_prefixes of this CleanupPolicyCondition.
        :param tag_state: The tag_state of this CleanupPolicyCondition.
        :param version_name_prefixes: The version_name_prefixes of this CleanupPolicyCondition.
        """
        self.openapi_types = {
            'newer_than': str,
            'older_than': str,
            'package_name_prefixes': List[str],
            'tag_prefixes': List[str],
            'tag_state': str,
            'version_name_prefixes': List[str]
        }

        self.attribute_map = {
            'newer_than': 'newerThan',
            'older_than': 'olderThan',
            'package_name_prefixes': 'packageNamePrefixes',
            'tag_prefixes': 'tagPrefixes',
            'tag_state': 'tagState',
            'version_name_prefixes': 'versionNamePrefixes'
        }

        self._newer_than = newer_than
        self._older_than = older_than
        self._package_name_prefixes = package_name_prefixes
        self._tag_prefixes = tag_prefixes
        self._tag_state = tag_state
        self._version_name_prefixes = version_name_prefixes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CleanupPolicyCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CleanupPolicyCondition of this CleanupPolicyCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def newer_than(self):
        """Gets the newer_than of this CleanupPolicyCondition.

        Match versions newer than a duration.

        :return: The newer_than of this CleanupPolicyCondition.
        :rtype: str
        """
        return self._newer_than

    @newer_than.setter
    def newer_than(self, newer_than):
        """Sets the newer_than of this CleanupPolicyCondition.

        Match versions newer than a duration.

        :param newer_than: The newer_than of this CleanupPolicyCondition.
        :type newer_than: str
        """

        self._newer_than = newer_than

    @property
    def older_than(self):
        """Gets the older_than of this CleanupPolicyCondition.

        Match versions older than a duration.

        :return: The older_than of this CleanupPolicyCondition.
        :rtype: str
        """
        return self._older_than

    @older_than.setter
    def older_than(self, older_than):
        """Sets the older_than of this CleanupPolicyCondition.

        Match versions older than a duration.

        :param older_than: The older_than of this CleanupPolicyCondition.
        :type older_than: str
        """

        self._older_than = older_than

    @property
    def package_name_prefixes(self):
        """Gets the package_name_prefixes of this CleanupPolicyCondition.

        Match versions by package prefix. Applied on any prefix match.

        :return: The package_name_prefixes of this CleanupPolicyCondition.
        :rtype: List[str]
        """
        return self._package_name_prefixes

    @package_name_prefixes.setter
    def package_name_prefixes(self, package_name_prefixes):
        """Sets the package_name_prefixes of this CleanupPolicyCondition.

        Match versions by package prefix. Applied on any prefix match.

        :param package_name_prefixes: The package_name_prefixes of this CleanupPolicyCondition.
        :type package_name_prefixes: List[str]
        """

        self._package_name_prefixes = package_name_prefixes

    @property
    def tag_prefixes(self):
        """Gets the tag_prefixes of this CleanupPolicyCondition.

        Match versions by tag prefix. Applied on any prefix match.

        :return: The tag_prefixes of this CleanupPolicyCondition.
        :rtype: List[str]
        """
        return self._tag_prefixes

    @tag_prefixes.setter
    def tag_prefixes(self, tag_prefixes):
        """Sets the tag_prefixes of this CleanupPolicyCondition.

        Match versions by tag prefix. Applied on any prefix match.

        :param tag_prefixes: The tag_prefixes of this CleanupPolicyCondition.
        :type tag_prefixes: List[str]
        """

        self._tag_prefixes = tag_prefixes

    @property
    def tag_state(self):
        """Gets the tag_state of this CleanupPolicyCondition.

        Match versions by tag status.

        :return: The tag_state of this CleanupPolicyCondition.
        :rtype: str
        """
        return self._tag_state

    @tag_state.setter
    def tag_state(self, tag_state):
        """Sets the tag_state of this CleanupPolicyCondition.

        Match versions by tag status.

        :param tag_state: The tag_state of this CleanupPolicyCondition.
        :type tag_state: str
        """
        allowed_values = ["TAG_STATE_UNSPECIFIED", "TAGGED", "UNTAGGED", "ANY"]  # noqa: E501
        if tag_state not in allowed_values:
            raise ValueError(
                "Invalid value for `tag_state` ({0}), must be one of {1}"
                .format(tag_state, allowed_values)
            )

        self._tag_state = tag_state

    @property
    def version_name_prefixes(self):
        """Gets the version_name_prefixes of this CleanupPolicyCondition.

        Match versions by version name prefix. Applied on any prefix match.

        :return: The version_name_prefixes of this CleanupPolicyCondition.
        :rtype: List[str]
        """
        return self._version_name_prefixes

    @version_name_prefixes.setter
    def version_name_prefixes(self, version_name_prefixes):
        """Sets the version_name_prefixes of this CleanupPolicyCondition.

        Match versions by version name prefix. Applied on any prefix match.

        :param version_name_prefixes: The version_name_prefixes of this CleanupPolicyCondition.
        :type version_name_prefixes: List[str]
        """

        self._version_name_prefixes = version_name_prefixes
