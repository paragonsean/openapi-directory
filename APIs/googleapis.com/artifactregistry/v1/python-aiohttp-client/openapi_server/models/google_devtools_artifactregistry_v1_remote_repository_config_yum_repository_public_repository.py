# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_base: str=None, repository_path: str=None):
        """GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository - a model defined in OpenAPI

        :param repository_base: The repository_base of this GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository.
        :param repository_path: The repository_path of this GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository.
        """
        self.openapi_types = {
            'repository_base': str,
            'repository_path': str
        }

        self.attribute_map = {
            'repository_base': 'repositoryBase',
            'repository_path': 'repositoryPath'
        }

        self._repository_base = repository_base
        self._repository_path = repository_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository of this GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_base(self):
        """Gets the repository_base of this GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository.

        A common public repository base for Yum.

        :return: The repository_base of this GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository.
        :rtype: str
        """
        return self._repository_base

    @repository_base.setter
    def repository_base(self, repository_base):
        """Sets the repository_base of this GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository.

        A common public repository base for Yum.

        :param repository_base: The repository_base of this GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository.
        :type repository_base: str
        """
        allowed_values = ["REPOSITORY_BASE_UNSPECIFIED", "CENTOS", "CENTOS_DEBUG", "CENTOS_VAULT", "CENTOS_STREAM", "ROCKY", "EPEL"]  # noqa: E501
        if repository_base not in allowed_values:
            raise ValueError(
                "Invalid value for `repository_base` ({0}), must be one of {1}"
                .format(repository_base, allowed_values)
            )

        self._repository_base = repository_base

    @property
    def repository_path(self):
        """Gets the repository_path of this GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository.

        A custom field to define a path to a specific repository from the base.

        :return: The repository_path of this GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository.
        :rtype: str
        """
        return self._repository_path

    @repository_path.setter
    def repository_path(self, repository_path):
        """Sets the repository_path of this GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository.

        A custom field to define a path to a specific repository from the base.

        :param repository_path: The repository_path of this GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository.
        :type repository_path: str
        """

        self._repository_path = repository_path
