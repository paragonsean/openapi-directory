/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFile::OAIFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFile::OAIFile() {
    this->initializeModel();
}

OAIFile::~OAIFile() {}

void OAIFile::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_hashes_isSet = false;
    m_hashes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFile::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_hashes_isValid = ::OpenAPI::fromJsonValue(m_hashes, json[QString("hashes")]);
    m_hashes_isSet = !json[QString("hashes")].isNull() && m_hashes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("sizeBytes")]);
    m_size_bytes_isSet = !json[QString("sizeBytes")].isNull() && m_size_bytes_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFile::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_hashes.size() > 0) {
        obj.insert(QString("hashes"), ::OpenAPI::toJsonValue(m_hashes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("sizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIFile::getCreateTime() const {
    return m_create_time;
}
void OAIFile::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIFile::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIFile::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList<OAIHash> OAIFile::getHashes() const {
    return m_hashes;
}
void OAIFile::setHashes(const QList<OAIHash> &hashes) {
    m_hashes = hashes;
    m_hashes_isSet = true;
}

bool OAIFile::is_hashes_Set() const{
    return m_hashes_isSet;
}

bool OAIFile::is_hashes_Valid() const{
    return m_hashes_isValid;
}

QString OAIFile::getName() const {
    return m_name;
}
void OAIFile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFile::getOwner() const {
    return m_owner;
}
void OAIFile::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIFile::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIFile::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIFile::getSizeBytes() const {
    return m_size_bytes;
}
void OAIFile::setSizeBytes(const QString &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAIFile::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAIFile::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

QString OAIFile::getUpdateTime() const {
    return m_update_time;
}
void OAIFile::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIFile::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIFile::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
