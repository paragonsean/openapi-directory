/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Binding from './model/Binding';
import Expr from './model/Expr';
import File from './model/File';
import Hash from './model/Hash';
import ListFilesResponse from './model/ListFilesResponse';
import ListLocationsResponse from './model/ListLocationsResponse';
import ListPackagesResponse from './model/ListPackagesResponse';
import ListRepositoriesResponse from './model/ListRepositoriesResponse';
import ListTagsResponse from './model/ListTagsResponse';
import ListVersionsResponse from './model/ListVersionsResponse';
import Location from './model/Location';
import Operation from './model/Operation';
import Package from './model/Package';
import Policy from './model/Policy';
import Repository from './model/Repository';
import SetIamPolicyRequest from './model/SetIamPolicyRequest';
import Status from './model/Status';
import Tag from './model/Tag';
import TestIamPermissionsRequest from './model/TestIamPermissionsRequest';
import TestIamPermissionsResponse from './model/TestIamPermissionsResponse';
import Version from './model/Version';
import ProjectsApi from './api/ProjectsApi';


/**
* Store and manage build artifacts in a scalable and integrated service built on Google infrastructure..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ArtifactRegistryApi = require('index'); // See note below*.
* var xxxSvc = new ArtifactRegistryApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ArtifactRegistryApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ArtifactRegistryApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ArtifactRegistryApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1beta1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Binding model constructor.
     * @property {module:model/Binding}
     */
    Binding,

    /**
     * The Expr model constructor.
     * @property {module:model/Expr}
     */
    Expr,

    /**
     * The File model constructor.
     * @property {module:model/File}
     */
    File,

    /**
     * The Hash model constructor.
     * @property {module:model/Hash}
     */
    Hash,

    /**
     * The ListFilesResponse model constructor.
     * @property {module:model/ListFilesResponse}
     */
    ListFilesResponse,

    /**
     * The ListLocationsResponse model constructor.
     * @property {module:model/ListLocationsResponse}
     */
    ListLocationsResponse,

    /**
     * The ListPackagesResponse model constructor.
     * @property {module:model/ListPackagesResponse}
     */
    ListPackagesResponse,

    /**
     * The ListRepositoriesResponse model constructor.
     * @property {module:model/ListRepositoriesResponse}
     */
    ListRepositoriesResponse,

    /**
     * The ListTagsResponse model constructor.
     * @property {module:model/ListTagsResponse}
     */
    ListTagsResponse,

    /**
     * The ListVersionsResponse model constructor.
     * @property {module:model/ListVersionsResponse}
     */
    ListVersionsResponse,

    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The Package model constructor.
     * @property {module:model/Package}
     */
    Package,

    /**
     * The Policy model constructor.
     * @property {module:model/Policy}
     */
    Policy,

    /**
     * The Repository model constructor.
     * @property {module:model/Repository}
     */
    Repository,

    /**
     * The SetIamPolicyRequest model constructor.
     * @property {module:model/SetIamPolicyRequest}
     */
    SetIamPolicyRequest,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The Tag model constructor.
     * @property {module:model/Tag}
     */
    Tag,

    /**
     * The TestIamPermissionsRequest model constructor.
     * @property {module:model/TestIamPermissionsRequest}
     */
    TestIamPermissionsRequest,

    /**
     * The TestIamPermissionsResponse model constructor.
     * @property {module:model/TestIamPermissionsResponse}
     */
    TestIamPermissionsResponse,

    /**
     * The Version model constructor.
     * @property {module:model/Version}
     */
    Version,

    /**
    * The ProjectsApi service constructor.
    * @property {module:api/ProjectsApi}
    */
    ProjectsApi
};
