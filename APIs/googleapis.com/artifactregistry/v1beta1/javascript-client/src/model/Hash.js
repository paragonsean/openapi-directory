/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Hash model module.
 * @module model/Hash
 * @version v1beta1
 */
class Hash {
    /**
     * Constructs a new <code>Hash</code>.
     * A hash of file content.
     * @alias module:model/Hash
     */
    constructor() { 
        
        Hash.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Hash</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Hash} obj Optional instance to populate.
     * @return {module:model/Hash} The populated <code>Hash</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Hash();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Hash</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Hash</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The algorithm used to compute the hash value.
 * @member {module:model/Hash.TypeEnum} type
 */
Hash.prototype['type'] = undefined;

/**
 * The hash value.
 * @member {Blob} value
 */
Hash.prototype['value'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Hash['TypeEnum'] = {

    /**
     * value: "HASH_TYPE_UNSPECIFIED"
     * @const
     */
    "HASH_TYPE_UNSPECIFIED": "HASH_TYPE_UNSPECIFIED",

    /**
     * value: "SHA256"
     * @const
     */
    "SHA256": "SHA256",

    /**
     * value: "MD5"
     * @const
     */
    "MD5": "MD5"
};



export default Hash;

