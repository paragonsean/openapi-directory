# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AptArtifact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, component: str=None, control_file: str=None, name: str=None, package_name: str=None, package_type: str=None):
        """AptArtifact - a model defined in OpenAPI

        :param architecture: The architecture of this AptArtifact.
        :param component: The component of this AptArtifact.
        :param control_file: The control_file of this AptArtifact.
        :param name: The name of this AptArtifact.
        :param package_name: The package_name of this AptArtifact.
        :param package_type: The package_type of this AptArtifact.
        """
        self.openapi_types = {
            'architecture': str,
            'component': str,
            'control_file': str,
            'name': str,
            'package_name': str,
            'package_type': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'component': 'component',
            'control_file': 'controlFile',
            'name': 'name',
            'package_name': 'packageName',
            'package_type': 'packageType'
        }

        self._architecture = architecture
        self._component = component
        self._control_file = control_file
        self._name = name
        self._package_name = package_name
        self._package_type = package_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AptArtifact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AptArtifact of this AptArtifact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this AptArtifact.

        Output only. Operating system architecture of the artifact.

        :return: The architecture of this AptArtifact.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this AptArtifact.

        Output only. Operating system architecture of the artifact.

        :param architecture: The architecture of this AptArtifact.
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def component(self):
        """Gets the component of this AptArtifact.

        Output only. Repository component of the artifact.

        :return: The component of this AptArtifact.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this AptArtifact.

        Output only. Repository component of the artifact.

        :param component: The component of this AptArtifact.
        :type component: str
        """

        self._component = component

    @property
    def control_file(self):
        """Gets the control_file of this AptArtifact.

        Output only. Contents of the artifact's control metadata file.

        :return: The control_file of this AptArtifact.
        :rtype: str
        """
        return self._control_file

    @control_file.setter
    def control_file(self, control_file):
        """Sets the control_file of this AptArtifact.

        Output only. Contents of the artifact's control metadata file.

        :param control_file: The control_file of this AptArtifact.
        :type control_file: str
        """

        self._control_file = control_file

    @property
    def name(self):
        """Gets the name of this AptArtifact.

        Output only. The Artifact Registry resource name of the artifact.

        :return: The name of this AptArtifact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AptArtifact.

        Output only. The Artifact Registry resource name of the artifact.

        :param name: The name of this AptArtifact.
        :type name: str
        """

        self._name = name

    @property
    def package_name(self):
        """Gets the package_name of this AptArtifact.

        Output only. The Apt package name of the artifact.

        :return: The package_name of this AptArtifact.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this AptArtifact.

        Output only. The Apt package name of the artifact.

        :param package_name: The package_name of this AptArtifact.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def package_type(self):
        """Gets the package_type of this AptArtifact.

        Output only. An artifact is a binary or source package.

        :return: The package_type of this AptArtifact.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this AptArtifact.

        Output only. An artifact is a binary or source package.

        :param package_type: The package_type of this AptArtifact.
        :type package_type: str
        """
        allowed_values = ["PACKAGE_TYPE_UNSPECIFIED", "BINARY", "SOURCE"]  # noqa: E501
        if package_type not in allowed_values:
            raise ValueError(
                "Invalid value for `package_type` ({0}), must be one of {1}"
                .format(package_type, allowed_values)
            )

        self._package_type = package_type
