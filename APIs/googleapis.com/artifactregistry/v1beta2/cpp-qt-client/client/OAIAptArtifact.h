/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAptArtifact.h
 *
 * A detailed representation of an Apt artifact. Information in the record is derived from the archive&#39;s control file. See https://www.debian.org/doc/debian-policy/ch-controlfields.html
 */

#ifndef OAIAptArtifact_H
#define OAIAptArtifact_H

#include <QJsonObject>

#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAptArtifact : public OAIObject {
public:
    OAIAptArtifact();
    OAIAptArtifact(QString json);
    ~OAIAptArtifact() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchitecture() const;
    void setArchitecture(const QString &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    QString getComponent() const;
    void setComponent(const QString &component);
    bool is_component_Set() const;
    bool is_component_Valid() const;

    QByteArray getControlFile() const;
    void setControlFile(const QByteArray &control_file);
    bool is_control_file_Set() const;
    bool is_control_file_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPackageName() const;
    void setPackageName(const QString &package_name);
    bool is_package_name_Set() const;
    bool is_package_name_Valid() const;

    QString getPackageType() const;
    void setPackageType(const QString &package_type);
    bool is_package_type_Set() const;
    bool is_package_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    QString m_component;
    bool m_component_isSet;
    bool m_component_isValid;

    QByteArray m_control_file;
    bool m_control_file_isSet;
    bool m_control_file_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_package_name;
    bool m_package_name_isSet;
    bool m_package_name_isValid;

    QString m_package_type;
    bool m_package_type_isSet;
    bool m_package_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAptArtifact)

#endif // OAIAptArtifact_H
