/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMavenRepositoryConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMavenRepositoryConfig::OAIMavenRepositoryConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMavenRepositoryConfig::OAIMavenRepositoryConfig() {
    this->initializeModel();
}

OAIMavenRepositoryConfig::~OAIMavenRepositoryConfig() {}

void OAIMavenRepositoryConfig::initializeModel() {

    m_allow_snapshot_overwrites_isSet = false;
    m_allow_snapshot_overwrites_isValid = false;

    m_version_policy_isSet = false;
    m_version_policy_isValid = false;
}

void OAIMavenRepositoryConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMavenRepositoryConfig::fromJsonObject(QJsonObject json) {

    m_allow_snapshot_overwrites_isValid = ::OpenAPI::fromJsonValue(m_allow_snapshot_overwrites, json[QString("allowSnapshotOverwrites")]);
    m_allow_snapshot_overwrites_isSet = !json[QString("allowSnapshotOverwrites")].isNull() && m_allow_snapshot_overwrites_isValid;

    m_version_policy_isValid = ::OpenAPI::fromJsonValue(m_version_policy, json[QString("versionPolicy")]);
    m_version_policy_isSet = !json[QString("versionPolicy")].isNull() && m_version_policy_isValid;
}

QString OAIMavenRepositoryConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMavenRepositoryConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_snapshot_overwrites_isSet) {
        obj.insert(QString("allowSnapshotOverwrites"), ::OpenAPI::toJsonValue(m_allow_snapshot_overwrites));
    }
    if (m_version_policy_isSet) {
        obj.insert(QString("versionPolicy"), ::OpenAPI::toJsonValue(m_version_policy));
    }
    return obj;
}

bool OAIMavenRepositoryConfig::isAllowSnapshotOverwrites() const {
    return m_allow_snapshot_overwrites;
}
void OAIMavenRepositoryConfig::setAllowSnapshotOverwrites(const bool &allow_snapshot_overwrites) {
    m_allow_snapshot_overwrites = allow_snapshot_overwrites;
    m_allow_snapshot_overwrites_isSet = true;
}

bool OAIMavenRepositoryConfig::is_allow_snapshot_overwrites_Set() const{
    return m_allow_snapshot_overwrites_isSet;
}

bool OAIMavenRepositoryConfig::is_allow_snapshot_overwrites_Valid() const{
    return m_allow_snapshot_overwrites_isValid;
}

QString OAIMavenRepositoryConfig::getVersionPolicy() const {
    return m_version_policy;
}
void OAIMavenRepositoryConfig::setVersionPolicy(const QString &version_policy) {
    m_version_policy = version_policy;
    m_version_policy_isSet = true;
}

bool OAIMavenRepositoryConfig::is_version_policy_Set() const{
    return m_version_policy_isSet;
}

bool OAIMavenRepositoryConfig::is_version_policy_Valid() const{
    return m_version_policy_isValid;
}

bool OAIMavenRepositoryConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_snapshot_overwrites_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMavenRepositoryConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
