/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportAptArtifactsRequest.h
 *
 * The request to import new apt artifacts.
 */

#ifndef OAIImportAptArtifactsRequest_H
#define OAIImportAptArtifactsRequest_H

#include <QJsonObject>

#include "OAIImportAptArtifactsGcsSource.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImportAptArtifactsGcsSource;

class OAIImportAptArtifactsRequest : public OAIObject {
public:
    OAIImportAptArtifactsRequest();
    OAIImportAptArtifactsRequest(QString json);
    ~OAIImportAptArtifactsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIImportAptArtifactsGcsSource getGcsSource() const;
    void setGcsSource(const OAIImportAptArtifactsGcsSource &gcs_source);
    bool is_gcs_source_Set() const;
    bool is_gcs_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIImportAptArtifactsGcsSource m_gcs_source;
    bool m_gcs_source_isSet;
    bool m_gcs_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportAptArtifactsRequest)

#endif // OAIImportAptArtifactsRequest_H
