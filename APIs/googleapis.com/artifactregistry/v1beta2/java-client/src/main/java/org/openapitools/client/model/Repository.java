/*
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.MavenRepositoryConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Repository for storing artifacts with a specific format.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:11.672782-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Repository {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Optional. The format of packages that are stored in the repository.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    FORMAT_UNSPECIFIED("FORMAT_UNSPECIFIED"),
    
    DOCKER("DOCKER"),
    
    MAVEN("MAVEN"),
    
    NPM("NPM"),
    
    APT("APT"),
    
    YUM("YUM"),
    
    GOOGET("GOOGET"),
    
    PYTHON("PYTHON");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_KMS_KEY_NAME = "kmsKeyName";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_NAME)
  private String kmsKeyName;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MAVEN_CONFIG = "mavenConfig";
  @SerializedName(SERIALIZED_NAME_MAVEN_CONFIG)
  private MavenRepositoryConfig mavenConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SATISFIES_PZS = "satisfiesPzs";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZS)
  private Boolean satisfiesPzs;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "sizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  private String sizeBytes;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Repository() {
  }

  public Repository(
     String createTime, 
     Boolean satisfiesPzs, 
     String sizeBytes, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.satisfiesPzs = satisfiesPzs;
    this.sizeBytes = sizeBytes;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The time when the repository was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Repository description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The user-provided description of the repository.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Repository format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Optional. The format of packages that are stored in the repository.
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public Repository kmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
    return this;
  }

  /**
   * The Cloud KMS resource name of the customer managed encryption key that&#39;s used to encrypt the contents of the Repository. Has the form: &#x60;projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key&#x60;. This value may not be changed after the Repository has been created.
   * @return kmsKeyName
   */
  @javax.annotation.Nullable
  public String getKmsKeyName() {
    return kmsKeyName;
  }

  public void setKmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
  }


  public Repository labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Repository putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Repository mavenConfig(MavenRepositoryConfig mavenConfig) {
    this.mavenConfig = mavenConfig;
    return this;
  }

  /**
   * Get mavenConfig
   * @return mavenConfig
   */
  @javax.annotation.Nullable
  public MavenRepositoryConfig getMavenConfig() {
    return mavenConfig;
  }

  public void setMavenConfig(MavenRepositoryConfig mavenConfig) {
    this.mavenConfig = mavenConfig;
  }


  public Repository name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the repository, for example: &#x60;projects/p1/locations/us-central1/repositories/repo1&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. If set, the repository satisfies physical zone separation.
   * @return satisfiesPzs
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzs() {
    return satisfiesPzs;
  }



  /**
   * Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.
   * @return sizeBytes
   */
  @javax.annotation.Nullable
  public String getSizeBytes() {
    return sizeBytes;
  }



  /**
   * Output only. The time when the repository was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Repository repository = (Repository) o;
    return Objects.equals(this.createTime, repository.createTime) &&
        Objects.equals(this.description, repository.description) &&
        Objects.equals(this.format, repository.format) &&
        Objects.equals(this.kmsKeyName, repository.kmsKeyName) &&
        Objects.equals(this.labels, repository.labels) &&
        Objects.equals(this.mavenConfig, repository.mavenConfig) &&
        Objects.equals(this.name, repository.name) &&
        Objects.equals(this.satisfiesPzs, repository.satisfiesPzs) &&
        Objects.equals(this.sizeBytes, repository.sizeBytes) &&
        Objects.equals(this.updateTime, repository.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, format, kmsKeyName, labels, mavenConfig, name, satisfiesPzs, sizeBytes, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Repository {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    kmsKeyName: ").append(toIndentedString(kmsKeyName)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    mavenConfig: ").append(toIndentedString(mavenConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    satisfiesPzs: ").append(toIndentedString(satisfiesPzs)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("format");
    openapiFields.add("kmsKeyName");
    openapiFields.add("labels");
    openapiFields.add("mavenConfig");
    openapiFields.add("name");
    openapiFields.add("satisfiesPzs");
    openapiFields.add("sizeBytes");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Repository
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Repository.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Repository is not found in the empty JSON string", Repository.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Repository.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Repository` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("kmsKeyName") != null && !jsonObj.get("kmsKeyName").isJsonNull()) && !jsonObj.get("kmsKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKeyName").toString()));
      }
      // validate the optional field `mavenConfig`
      if (jsonObj.get("mavenConfig") != null && !jsonObj.get("mavenConfig").isJsonNull()) {
        MavenRepositoryConfig.validateJsonElement(jsonObj.get("mavenConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sizeBytes") != null && !jsonObj.get("sizeBytes").isJsonNull()) && !jsonObj.get("sizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeBytes").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Repository.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Repository' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Repository> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Repository.class));

       return (TypeAdapter<T>) new TypeAdapter<Repository>() {
           @Override
           public void write(JsonWriter out, Repository value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Repository read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Repository given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Repository
   * @throws IOException if the JSON string is invalid with respect to Repository
   */
  public static Repository fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Repository.class);
  }

  /**
   * Convert an instance of Repository to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

