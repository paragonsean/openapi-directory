/*
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Artifact Registry settings that apply to a Project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:11.672782-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectSettings {
  /**
   * The redirection state of the legacy repositories in this project.
   */
  @JsonAdapter(LegacyRedirectionStateEnum.Adapter.class)
  public enum LegacyRedirectionStateEnum {
    STATE_UNSPECIFIED("REDIRECTION_STATE_UNSPECIFIED"),
    
    FROM_GCR_IO_DISABLED("REDIRECTION_FROM_GCR_IO_DISABLED"),
    
    FROM_GCR_IO_ENABLED("REDIRECTION_FROM_GCR_IO_ENABLED"),
    
    FROM_GCR_IO_FINALIZED("REDIRECTION_FROM_GCR_IO_FINALIZED");

    private String value;

    LegacyRedirectionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegacyRedirectionStateEnum fromValue(String value) {
      for (LegacyRedirectionStateEnum b : LegacyRedirectionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegacyRedirectionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegacyRedirectionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegacyRedirectionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegacyRedirectionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegacyRedirectionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGACY_REDIRECTION_STATE = "legacyRedirectionState";
  @SerializedName(SERIALIZED_NAME_LEGACY_REDIRECTION_STATE)
  private LegacyRedirectionStateEnum legacyRedirectionState;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ProjectSettings() {
  }

  public ProjectSettings legacyRedirectionState(LegacyRedirectionStateEnum legacyRedirectionState) {
    this.legacyRedirectionState = legacyRedirectionState;
    return this;
  }

  /**
   * The redirection state of the legacy repositories in this project.
   * @return legacyRedirectionState
   */
  @javax.annotation.Nullable
  public LegacyRedirectionStateEnum getLegacyRedirectionState() {
    return legacyRedirectionState;
  }

  public void setLegacyRedirectionState(LegacyRedirectionStateEnum legacyRedirectionState) {
    this.legacyRedirectionState = legacyRedirectionState;
  }


  public ProjectSettings name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the project&#39;s settings. Always of the form: projects/{project-id}/projectSettings In update request: never set In response: always set
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectSettings projectSettings = (ProjectSettings) o;
    return Objects.equals(this.legacyRedirectionState, projectSettings.legacyRedirectionState) &&
        Objects.equals(this.name, projectSettings.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(legacyRedirectionState, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectSettings {\n");
    sb.append("    legacyRedirectionState: ").append(toIndentedString(legacyRedirectionState)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("legacyRedirectionState");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectSettings is not found in the empty JSON string", ProjectSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("legacyRedirectionState") != null && !jsonObj.get("legacyRedirectionState").isJsonNull()) && !jsonObj.get("legacyRedirectionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacyRedirectionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacyRedirectionState").toString()));
      }
      // validate the optional field `legacyRedirectionState`
      if (jsonObj.get("legacyRedirectionState") != null && !jsonObj.get("legacyRedirectionState").isJsonNull()) {
        LegacyRedirectionStateEnum.validateJsonElement(jsonObj.get("legacyRedirectionState"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectSettings>() {
           @Override
           public void write(JsonWriter out, ProjectSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectSettings
   * @throws IOException if the JSON string is invalid with respect to ProjectSettings
   */
  public static ProjectSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectSettings.class);
  }

  /**
   * Convert an instance of ProjectSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

