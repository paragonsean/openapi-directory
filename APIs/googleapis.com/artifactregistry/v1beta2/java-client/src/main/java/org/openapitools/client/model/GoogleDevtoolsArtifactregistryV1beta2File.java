/*
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Hash;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Files store content that is potentially associated with Packages or Versions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:11.672782-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleDevtoolsArtifactregistryV1beta2File {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_HASHES = "hashes";
  @SerializedName(SERIALIZED_NAME_HASHES)
  private List<Hash> hashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "sizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  private String sizeBytes;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleDevtoolsArtifactregistryV1beta2File() {
  }

  public GoogleDevtoolsArtifactregistryV1beta2File(
     String createTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The time when the File was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleDevtoolsArtifactregistryV1beta2File hashes(List<Hash> hashes) {
    this.hashes = hashes;
    return this;
  }

  public GoogleDevtoolsArtifactregistryV1beta2File addHashesItem(Hash hashesItem) {
    if (this.hashes == null) {
      this.hashes = new ArrayList<>();
    }
    this.hashes.add(hashesItem);
    return this;
  }

  /**
   * The hashes of the file content.
   * @return hashes
   */
  @javax.annotation.Nullable
  public List<Hash> getHashes() {
    return hashes;
  }

  public void setHashes(List<Hash> hashes) {
    this.hashes = hashes;
  }


  public GoogleDevtoolsArtifactregistryV1beta2File name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the file, for example: \&quot;projects/p1/locations/us-central1/repositories/repo1/files/a%2Fb%2Fc.txt\&quot;. If the file ID part contains slashes, they are escaped.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleDevtoolsArtifactregistryV1beta2File owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * The name of the Package or Version that owns this file, if any.
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public GoogleDevtoolsArtifactregistryV1beta2File sizeBytes(String sizeBytes) {
    this.sizeBytes = sizeBytes;
    return this;
  }

  /**
   * The size of the File in bytes.
   * @return sizeBytes
   */
  @javax.annotation.Nullable
  public String getSizeBytes() {
    return sizeBytes;
  }

  public void setSizeBytes(String sizeBytes) {
    this.sizeBytes = sizeBytes;
  }


  /**
   * Output only. The time when the File was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleDevtoolsArtifactregistryV1beta2File googleDevtoolsArtifactregistryV1beta2File = (GoogleDevtoolsArtifactregistryV1beta2File) o;
    return Objects.equals(this.createTime, googleDevtoolsArtifactregistryV1beta2File.createTime) &&
        Objects.equals(this.hashes, googleDevtoolsArtifactregistryV1beta2File.hashes) &&
        Objects.equals(this.name, googleDevtoolsArtifactregistryV1beta2File.name) &&
        Objects.equals(this.owner, googleDevtoolsArtifactregistryV1beta2File.owner) &&
        Objects.equals(this.sizeBytes, googleDevtoolsArtifactregistryV1beta2File.sizeBytes) &&
        Objects.equals(this.updateTime, googleDevtoolsArtifactregistryV1beta2File.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, hashes, name, owner, sizeBytes, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleDevtoolsArtifactregistryV1beta2File {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    hashes: ").append(toIndentedString(hashes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("hashes");
    openapiFields.add("name");
    openapiFields.add("owner");
    openapiFields.add("sizeBytes");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleDevtoolsArtifactregistryV1beta2File
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleDevtoolsArtifactregistryV1beta2File.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleDevtoolsArtifactregistryV1beta2File is not found in the empty JSON string", GoogleDevtoolsArtifactregistryV1beta2File.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleDevtoolsArtifactregistryV1beta2File.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleDevtoolsArtifactregistryV1beta2File` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if (jsonObj.get("hashes") != null && !jsonObj.get("hashes").isJsonNull()) {
        JsonArray jsonArrayhashes = jsonObj.getAsJsonArray("hashes");
        if (jsonArrayhashes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hashes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hashes` to be an array in the JSON string but got `%s`", jsonObj.get("hashes").toString()));
          }

          // validate the optional field `hashes` (array)
          for (int i = 0; i < jsonArrayhashes.size(); i++) {
            Hash.validateJsonElement(jsonArrayhashes.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("sizeBytes") != null && !jsonObj.get("sizeBytes").isJsonNull()) && !jsonObj.get("sizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeBytes").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleDevtoolsArtifactregistryV1beta2File.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleDevtoolsArtifactregistryV1beta2File' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleDevtoolsArtifactregistryV1beta2File> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleDevtoolsArtifactregistryV1beta2File.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleDevtoolsArtifactregistryV1beta2File>() {
           @Override
           public void write(JsonWriter out, GoogleDevtoolsArtifactregistryV1beta2File value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleDevtoolsArtifactregistryV1beta2File read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleDevtoolsArtifactregistryV1beta2File given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleDevtoolsArtifactregistryV1beta2File
   * @throws IOException if the JSON string is invalid with respect to GoogleDevtoolsArtifactregistryV1beta2File
   */
  public static GoogleDevtoolsArtifactregistryV1beta2File fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleDevtoolsArtifactregistryV1beta2File.class);
  }

  /**
   * Convert an instance of GoogleDevtoolsArtifactregistryV1beta2File to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

