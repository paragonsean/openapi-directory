/**
 * Artifact Registry API
 * Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImportYumArtifactsErrorInfo from './ImportYumArtifactsErrorInfo';
import YumArtifact from './YumArtifact';

/**
 * The ImportYumArtifactsResponse model module.
 * @module model/ImportYumArtifactsResponse
 * @version v1beta2
 */
class ImportYumArtifactsResponse {
    /**
     * Constructs a new <code>ImportYumArtifactsResponse</code>.
     * The response message from importing YUM artifacts.
     * @alias module:model/ImportYumArtifactsResponse
     */
    constructor() { 
        
        ImportYumArtifactsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImportYumArtifactsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportYumArtifactsResponse} obj Optional instance to populate.
     * @return {module:model/ImportYumArtifactsResponse} The populated <code>ImportYumArtifactsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportYumArtifactsResponse();

            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ImportYumArtifactsErrorInfo]);
            }
            if (data.hasOwnProperty('yumArtifacts')) {
                obj['yumArtifacts'] = ApiClient.convertToType(data['yumArtifacts'], [YumArtifact]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportYumArtifactsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportYumArtifactsResponse</code>.
     */
    static validateJSON(data) {
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ImportYumArtifactsErrorInfo.validateJSON(item);
            };
        }
        if (data['yumArtifacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['yumArtifacts'])) {
                throw new Error("Expected the field `yumArtifacts` to be an array in the JSON data but got " + data['yumArtifacts']);
            }
            // validate the optional field `yumArtifacts` (array)
            for (const item of data['yumArtifacts']) {
                YumArtifact.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Detailed error info for packages that were not imported.
 * @member {Array.<module:model/ImportYumArtifactsErrorInfo>} errors
 */
ImportYumArtifactsResponse.prototype['errors'] = undefined;

/**
 * The yum artifacts imported.
 * @member {Array.<module:model/YumArtifact>} yumArtifacts
 */
ImportYumArtifactsResponse.prototype['yumArtifacts'] = undefined;






export default ImportYumArtifactsResponse;

