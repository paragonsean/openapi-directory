/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryPlan from './QueryPlan';

/**
 * The ResultSetStats model module.
 * @module model/ResultSetStats
 * @version v1
 */
class ResultSetStats {
    /**
     * Constructs a new <code>ResultSetStats</code>.
     * Additional statistics about a ResultSet or PartialResultSet.
     * @alias module:model/ResultSetStats
     */
    constructor() { 
        
        ResultSetStats.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResultSetStats</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResultSetStats} obj Optional instance to populate.
     * @return {module:model/ResultSetStats} The populated <code>ResultSetStats</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResultSetStats();

            if (data.hasOwnProperty('queryPlan')) {
                obj['queryPlan'] = QueryPlan.constructFromObject(data['queryPlan']);
            }
            if (data.hasOwnProperty('queryStats')) {
                obj['queryStats'] = ApiClient.convertToType(data['queryStats'], {'String': Object});
            }
            if (data.hasOwnProperty('rowCountExact')) {
                obj['rowCountExact'] = ApiClient.convertToType(data['rowCountExact'], 'String');
            }
            if (data.hasOwnProperty('rowCountLowerBound')) {
                obj['rowCountLowerBound'] = ApiClient.convertToType(data['rowCountLowerBound'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResultSetStats</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResultSetStats</code>.
     */
    static validateJSON(data) {
        // validate the optional field `queryPlan`
        if (data['queryPlan']) { // data not null
          QueryPlan.validateJSON(data['queryPlan']);
        }
        // ensure the json data is a string
        if (data['rowCountExact'] && !(typeof data['rowCountExact'] === 'string' || data['rowCountExact'] instanceof String)) {
            throw new Error("Expected the field `rowCountExact` to be a primitive type in the JSON string but got " + data['rowCountExact']);
        }
        // ensure the json data is a string
        if (data['rowCountLowerBound'] && !(typeof data['rowCountLowerBound'] === 'string' || data['rowCountLowerBound'] instanceof String)) {
            throw new Error("Expected the field `rowCountLowerBound` to be a primitive type in the JSON string but got " + data['rowCountLowerBound']);
        }

        return true;
    }


}



/**
 * @member {module:model/QueryPlan} queryPlan
 */
ResultSetStats.prototype['queryPlan'] = undefined;

/**
 * Aggregated statistics from the execution of the query. Only present when the query is profiled. For example, a query could return the statistics as follows: { \"rows_returned\": \"3\", \"elapsed_time\": \"1.22 secs\", \"cpu_time\": \"1.19 secs\" }
 * @member {Object.<String, Object>} queryStats
 */
ResultSetStats.prototype['queryStats'] = undefined;

/**
 * Standard DML returns an exact count of rows that were modified.
 * @member {String} rowCountExact
 */
ResultSetStats.prototype['rowCountExact'] = undefined;

/**
 * Partitioned DML does not offer exactly-once semantics, so it returns a lower bound of the rows modified.
 * @member {String} rowCountLowerBound
 */
ResultSetStats.prototype['rowCountLowerBound'] = undefined;






export default ResultSetStats;

