/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetDatabaseDdlResponse model module.
 * @module model/GetDatabaseDdlResponse
 * @version v1
 */
class GetDatabaseDdlResponse {
    /**
     * Constructs a new <code>GetDatabaseDdlResponse</code>.
     * The response for GetDatabaseDdl.
     * @alias module:model/GetDatabaseDdlResponse
     */
    constructor() { 
        
        GetDatabaseDdlResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetDatabaseDdlResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetDatabaseDdlResponse} obj Optional instance to populate.
     * @return {module:model/GetDatabaseDdlResponse} The populated <code>GetDatabaseDdlResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetDatabaseDdlResponse();

            if (data.hasOwnProperty('protoDescriptors')) {
                obj['protoDescriptors'] = ApiClient.convertToType(data['protoDescriptors'], 'Blob');
            }
            if (data.hasOwnProperty('statements')) {
                obj['statements'] = ApiClient.convertToType(data['statements'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetDatabaseDdlResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetDatabaseDdlResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['statements'])) {
            throw new Error("Expected the field `statements` to be an array in the JSON data but got " + data['statements']);
        }

        return true;
    }


}



/**
 * Proto descriptors stored in the database. Contains a protobuf-serialized [google.protobuf.FileDescriptorSet](https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto). For more details, see protobuffer [self description](https://developers.google.com/protocol-buffers/docs/techniques#self-description).
 * @member {Blob} protoDescriptors
 */
GetDatabaseDdlResponse.prototype['protoDescriptors'] = undefined;

/**
 * A list of formatted DDL statements defining the schema of the database specified in the request.
 * @member {Array.<String>} statements
 */
GetDatabaseDdlResponse.prototype['statements'] = undefined;






export default GetDatabaseDdlResponse;

