/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlanNode from './PlanNode';
import QueryAdvisorResult from './QueryAdvisorResult';

/**
 * The QueryPlan model module.
 * @module model/QueryPlan
 * @version v1
 */
class QueryPlan {
    /**
     * Constructs a new <code>QueryPlan</code>.
     * Contains an ordered list of nodes appearing in the query plan.
     * @alias module:model/QueryPlan
     */
    constructor() { 
        
        QueryPlan.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryPlan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryPlan} obj Optional instance to populate.
     * @return {module:model/QueryPlan} The populated <code>QueryPlan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryPlan();

            if (data.hasOwnProperty('planNodes')) {
                obj['planNodes'] = ApiClient.convertToType(data['planNodes'], [PlanNode]);
            }
            if (data.hasOwnProperty('queryAdvice')) {
                obj['queryAdvice'] = QueryAdvisorResult.constructFromObject(data['queryAdvice']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryPlan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryPlan</code>.
     */
    static validateJSON(data) {
        if (data['planNodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['planNodes'])) {
                throw new Error("Expected the field `planNodes` to be an array in the JSON data but got " + data['planNodes']);
            }
            // validate the optional field `planNodes` (array)
            for (const item of data['planNodes']) {
                PlanNode.validateJSON(item);
            };
        }
        // validate the optional field `queryAdvice`
        if (data['queryAdvice']) { // data not null
          QueryAdvisorResult.validateJSON(data['queryAdvice']);
        }

        return true;
    }


}



/**
 * The nodes in the query plan. Plan nodes are returned in pre-order starting with the plan root. Each PlanNode's `id` corresponds to its index in `plan_nodes`.
 * @member {Array.<module:model/PlanNode>} planNodes
 */
QueryPlan.prototype['planNodes'] = undefined;

/**
 * @member {module:model/QueryAdvisorResult} queryAdvice
 */
QueryPlan.prototype['queryAdvice'] = undefined;






export default QueryPlan;

