/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IndexedHotKey model module.
 * @module model/IndexedHotKey
 * @version v1
 */
class IndexedHotKey {
    /**
     * Constructs a new <code>IndexedHotKey</code>.
     * A message representing a (sparse) collection of hot keys for specific key buckets.
     * @alias module:model/IndexedHotKey
     */
    constructor() { 
        
        IndexedHotKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IndexedHotKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IndexedHotKey} obj Optional instance to populate.
     * @return {module:model/IndexedHotKey} The populated <code>IndexedHotKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IndexedHotKey();

            if (data.hasOwnProperty('sparseHotKeys')) {
                obj['sparseHotKeys'] = ApiClient.convertToType(data['sparseHotKeys'], {'String': 'Number'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IndexedHotKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IndexedHotKey</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * A (sparse) mapping from key bucket index to the index of the specific hot row key for that key bucket. The index of the hot row key can be translated to the actual row key via the ScanData.VisualizationData.indexed_keys repeated field.
 * @member {Object.<String, Number>} sparseHotKeys
 */
IndexedHotKey.prototype['sparseHotKeys'] = undefined;






export default IndexedHotKey;

