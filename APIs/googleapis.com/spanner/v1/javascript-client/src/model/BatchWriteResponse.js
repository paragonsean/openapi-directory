/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';

/**
 * The BatchWriteResponse model module.
 * @module model/BatchWriteResponse
 * @version v1
 */
class BatchWriteResponse {
    /**
     * Constructs a new <code>BatchWriteResponse</code>.
     * The result of applying a batch of mutations.
     * @alias module:model/BatchWriteResponse
     */
    constructor() { 
        
        BatchWriteResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BatchWriteResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchWriteResponse} obj Optional instance to populate.
     * @return {module:model/BatchWriteResponse} The populated <code>BatchWriteResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchWriteResponse();

            if (data.hasOwnProperty('commitTimestamp')) {
                obj['commitTimestamp'] = ApiClient.convertToType(data['commitTimestamp'], 'String');
            }
            if (data.hasOwnProperty('indexes')) {
                obj['indexes'] = ApiClient.convertToType(data['indexes'], ['Number']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchWriteResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchWriteResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commitTimestamp'] && !(typeof data['commitTimestamp'] === 'string' || data['commitTimestamp'] instanceof String)) {
            throw new Error("Expected the field `commitTimestamp` to be a primitive type in the JSON string but got " + data['commitTimestamp']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['indexes'])) {
            throw new Error("Expected the field `indexes` to be an array in the JSON data but got " + data['indexes']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * The commit timestamp of the transaction that applied this batch. Present if `status` is `OK`, absent otherwise.
 * @member {String} commitTimestamp
 */
BatchWriteResponse.prototype['commitTimestamp'] = undefined;

/**
 * The mutation groups applied in this batch. The values index into the `mutation_groups` field in the corresponding `BatchWriteRequest`.
 * @member {Array.<Number>} indexes
 */
BatchWriteResponse.prototype['indexes'] = undefined;

/**
 * @member {module:model/Status} status
 */
BatchWriteResponse.prototype['status'] = undefined;






export default BatchWriteResponse;

