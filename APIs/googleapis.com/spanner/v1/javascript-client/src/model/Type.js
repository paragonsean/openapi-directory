/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StructType from './StructType';

/**
 * The Type model module.
 * @module model/Type
 * @version v1
 */
class Type {
    /**
     * Constructs a new <code>Type</code>.
     * &#x60;Type&#x60; indicates the type of a Cloud Spanner value, as might be stored in a table cell or returned from an SQL query.
     * @alias module:model/Type
     */
    constructor() { 
        
        Type.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Type</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Type} obj Optional instance to populate.
     * @return {module:model/Type} The populated <code>Type</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Type();

            if (data.hasOwnProperty('arrayElementType')) {
                obj['arrayElementType'] = Type.constructFromObject(data['arrayElementType']);
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('protoTypeFqn')) {
                obj['protoTypeFqn'] = ApiClient.convertToType(data['protoTypeFqn'], 'String');
            }
            if (data.hasOwnProperty('structType')) {
                obj['structType'] = StructType.constructFromObject(data['structType']);
            }
            if (data.hasOwnProperty('typeAnnotation')) {
                obj['typeAnnotation'] = ApiClient.convertToType(data['typeAnnotation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Type</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Type</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arrayElementType`
        if (data['arrayElementType']) { // data not null
          Type.validateJSON(data['arrayElementType']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['protoTypeFqn'] && !(typeof data['protoTypeFqn'] === 'string' || data['protoTypeFqn'] instanceof String)) {
            throw new Error("Expected the field `protoTypeFqn` to be a primitive type in the JSON string but got " + data['protoTypeFqn']);
        }
        // validate the optional field `structType`
        if (data['structType']) { // data not null
          StructType.validateJSON(data['structType']);
        }
        // ensure the json data is a string
        if (data['typeAnnotation'] && !(typeof data['typeAnnotation'] === 'string' || data['typeAnnotation'] instanceof String)) {
            throw new Error("Expected the field `typeAnnotation` to be a primitive type in the JSON string but got " + data['typeAnnotation']);
        }

        return true;
    }


}



/**
 * @member {module:model/Type} arrayElementType
 */
Type.prototype['arrayElementType'] = undefined;

/**
 * Required. The TypeCode for this type.
 * @member {module:model/Type.CodeEnum} code
 */
Type.prototype['code'] = undefined;

/**
 * If code == PROTO or code == ENUM, then `proto_type_fqn` is the fully qualified name of the proto type representing the proto/enum definition.
 * @member {String} protoTypeFqn
 */
Type.prototype['protoTypeFqn'] = undefined;

/**
 * @member {module:model/StructType} structType
 */
Type.prototype['structType'] = undefined;

/**
 * The TypeAnnotationCode that disambiguates SQL type that Spanner will use to represent values of this type during query processing. This is necessary for some type codes because a single TypeCode can be mapped to different SQL types depending on the SQL dialect. type_annotation typically is not needed to process the content of a value (it doesn't affect serialization) and clients can ignore it on the read path.
 * @member {module:model/Type.TypeAnnotationEnum} typeAnnotation
 */
Type.prototype['typeAnnotation'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
Type['CodeEnum'] = {

    /**
     * value: "TYPE_CODE_UNSPECIFIED"
     * @const
     */
    "TYPE_CODE_UNSPECIFIED": "TYPE_CODE_UNSPECIFIED",

    /**
     * value: "BOOL"
     * @const
     */
    "BOOL": "BOOL",

    /**
     * value: "INT64"
     * @const
     */
    "INT64": "INT64",

    /**
     * value: "FLOAT64"
     * @const
     */
    "FLOAT64": "FLOAT64",

    /**
     * value: "FLOAT32"
     * @const
     */
    "FLOAT32": "FLOAT32",

    /**
     * value: "TIMESTAMP"
     * @const
     */
    "TIMESTAMP": "TIMESTAMP",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "BYTES"
     * @const
     */
    "BYTES": "BYTES",

    /**
     * value: "ARRAY"
     * @const
     */
    "ARRAY": "ARRAY",

    /**
     * value: "STRUCT"
     * @const
     */
    "STRUCT": "STRUCT",

    /**
     * value: "NUMERIC"
     * @const
     */
    "NUMERIC": "NUMERIC",

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON",

    /**
     * value: "PROTO"
     * @const
     */
    "PROTO": "PROTO",

    /**
     * value: "ENUM"
     * @const
     */
    "ENUM": "ENUM"
};


/**
 * Allowed values for the <code>typeAnnotation</code> property.
 * @enum {String}
 * @readonly
 */
Type['TypeAnnotationEnum'] = {

    /**
     * value: "TYPE_ANNOTATION_CODE_UNSPECIFIED"
     * @const
     */
    "TYPE_ANNOTATION_CODE_UNSPECIFIED": "TYPE_ANNOTATION_CODE_UNSPECIFIED",

    /**
     * value: "PG_NUMERIC"
     * @const
     */
    "PG_NUMERIC": "PG_NUMERIC",

    /**
     * value: "PG_JSONB"
     * @const
     */
    "PG_JSONB": "PG_JSONB"
};



export default Type;

