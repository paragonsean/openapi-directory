/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OperationProgress from './OperationProgress';

/**
 * The CopyBackupMetadata model module.
 * @module model/CopyBackupMetadata
 * @version v1
 */
class CopyBackupMetadata {
    /**
     * Constructs a new <code>CopyBackupMetadata</code>.
     * Metadata type for the operation returned by CopyBackup.
     * @alias module:model/CopyBackupMetadata
     */
    constructor() { 
        
        CopyBackupMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CopyBackupMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CopyBackupMetadata} obj Optional instance to populate.
     * @return {module:model/CopyBackupMetadata} The populated <code>CopyBackupMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CopyBackupMetadata();

            if (data.hasOwnProperty('cancelTime')) {
                obj['cancelTime'] = ApiClient.convertToType(data['cancelTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = OperationProgress.constructFromObject(data['progress']);
            }
            if (data.hasOwnProperty('sourceBackup')) {
                obj['sourceBackup'] = ApiClient.convertToType(data['sourceBackup'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CopyBackupMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CopyBackupMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cancelTime'] && !(typeof data['cancelTime'] === 'string' || data['cancelTime'] instanceof String)) {
            throw new Error("Expected the field `cancelTime` to be a primitive type in the JSON string but got " + data['cancelTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `progress`
        if (data['progress']) { // data not null
          OperationProgress.validateJSON(data['progress']);
        }
        // ensure the json data is a string
        if (data['sourceBackup'] && !(typeof data['sourceBackup'] === 'string' || data['sourceBackup'] instanceof String)) {
            throw new Error("Expected the field `sourceBackup` to be a primitive type in the JSON string but got " + data['sourceBackup']);
        }

        return true;
    }


}



/**
 * The time at which cancellation of CopyBackup operation was received. Operations.CancelOperation starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
 * @member {String} cancelTime
 */
CopyBackupMetadata.prototype['cancelTime'] = undefined;

/**
 * The name of the backup being created through the copy operation. Values are of the form `projects//instances//backups/`.
 * @member {String} name
 */
CopyBackupMetadata.prototype['name'] = undefined;

/**
 * @member {module:model/OperationProgress} progress
 */
CopyBackupMetadata.prototype['progress'] = undefined;

/**
 * The name of the source backup that is being copied. Values are of the form `projects//instances//backups/`.
 * @member {String} sourceBackup
 */
CopyBackupMetadata.prototype['sourceBackup'] = undefined;






export default CopyBackupMetadata;

