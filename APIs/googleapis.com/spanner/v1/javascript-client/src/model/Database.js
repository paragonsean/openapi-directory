/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptionConfig from './EncryptionConfig';
import EncryptionInfo from './EncryptionInfo';
import RestoreInfo from './RestoreInfo';

/**
 * The Database model module.
 * @module model/Database
 * @version v1
 */
class Database {
    /**
     * Constructs a new <code>Database</code>.
     * A Cloud Spanner database.
     * @alias module:model/Database
     */
    constructor() { 
        
        Database.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Database</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Database} obj Optional instance to populate.
     * @return {module:model/Database} The populated <code>Database</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Database();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('databaseDialect')) {
                obj['databaseDialect'] = ApiClient.convertToType(data['databaseDialect'], 'String');
            }
            if (data.hasOwnProperty('defaultLeader')) {
                obj['defaultLeader'] = ApiClient.convertToType(data['defaultLeader'], 'String');
            }
            if (data.hasOwnProperty('earliestVersionTime')) {
                obj['earliestVersionTime'] = ApiClient.convertToType(data['earliestVersionTime'], 'String');
            }
            if (data.hasOwnProperty('enableDropProtection')) {
                obj['enableDropProtection'] = ApiClient.convertToType(data['enableDropProtection'], 'Boolean');
            }
            if (data.hasOwnProperty('encryptionConfig')) {
                obj['encryptionConfig'] = EncryptionConfig.constructFromObject(data['encryptionConfig']);
            }
            if (data.hasOwnProperty('encryptionInfo')) {
                obj['encryptionInfo'] = ApiClient.convertToType(data['encryptionInfo'], [EncryptionInfo]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('restoreInfo')) {
                obj['restoreInfo'] = RestoreInfo.constructFromObject(data['restoreInfo']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('versionRetentionPeriod')) {
                obj['versionRetentionPeriod'] = ApiClient.convertToType(data['versionRetentionPeriod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Database</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Database</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['databaseDialect'] && !(typeof data['databaseDialect'] === 'string' || data['databaseDialect'] instanceof String)) {
            throw new Error("Expected the field `databaseDialect` to be a primitive type in the JSON string but got " + data['databaseDialect']);
        }
        // ensure the json data is a string
        if (data['defaultLeader'] && !(typeof data['defaultLeader'] === 'string' || data['defaultLeader'] instanceof String)) {
            throw new Error("Expected the field `defaultLeader` to be a primitive type in the JSON string but got " + data['defaultLeader']);
        }
        // ensure the json data is a string
        if (data['earliestVersionTime'] && !(typeof data['earliestVersionTime'] === 'string' || data['earliestVersionTime'] instanceof String)) {
            throw new Error("Expected the field `earliestVersionTime` to be a primitive type in the JSON string but got " + data['earliestVersionTime']);
        }
        // validate the optional field `encryptionConfig`
        if (data['encryptionConfig']) { // data not null
          EncryptionConfig.validateJSON(data['encryptionConfig']);
        }
        if (data['encryptionInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['encryptionInfo'])) {
                throw new Error("Expected the field `encryptionInfo` to be an array in the JSON data but got " + data['encryptionInfo']);
            }
            // validate the optional field `encryptionInfo` (array)
            for (const item of data['encryptionInfo']) {
                EncryptionInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `restoreInfo`
        if (data['restoreInfo']) { // data not null
          RestoreInfo.validateJSON(data['restoreInfo']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['versionRetentionPeriod'] && !(typeof data['versionRetentionPeriod'] === 'string' || data['versionRetentionPeriod'] instanceof String)) {
            throw new Error("Expected the field `versionRetentionPeriod` to be a primitive type in the JSON string but got " + data['versionRetentionPeriod']);
        }

        return true;
    }


}



/**
 * Output only. If exists, the time at which the database creation started.
 * @member {String} createTime
 */
Database.prototype['createTime'] = undefined;

/**
 * Output only. The dialect of the Cloud Spanner Database.
 * @member {module:model/Database.DatabaseDialectEnum} databaseDialect
 */
Database.prototype['databaseDialect'] = undefined;

/**
 * Output only. The read-write region which contains the database's leader replicas. This is the same as the value of default_leader database option set using DatabaseAdmin.CreateDatabase or DatabaseAdmin.UpdateDatabaseDdl. If not explicitly set, this is empty.
 * @member {String} defaultLeader
 */
Database.prototype['defaultLeader'] = undefined;

/**
 * Output only. Earliest timestamp at which older versions of the data can be read. This value is continuously updated by Cloud Spanner and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.
 * @member {String} earliestVersionTime
 */
Database.prototype['earliestVersionTime'] = undefined;

/**
 * Whether drop protection is enabled for this database. Defaults to false, if not set. For more details, please see how to [prevent accidental database deletion](https://cloud.google.com/spanner/docs/prevent-database-deletion).
 * @member {Boolean} enableDropProtection
 */
Database.prototype['enableDropProtection'] = undefined;

/**
 * @member {module:model/EncryptionConfig} encryptionConfig
 */
Database.prototype['encryptionConfig'] = undefined;

/**
 * Output only. For databases that are using customer managed encryption, this field contains the encryption information for the database, such as all Cloud KMS key versions that are in use. The `encryption_status' field inside of each `EncryptionInfo` is not populated. For databases that are using Google default or other types of encryption, this field is empty. This field is propagated lazily from the backend. There might be a delay from when a key version is being used and when it appears in this field.
 * @member {Array.<module:model/EncryptionInfo>} encryptionInfo
 */
Database.prototype['encryptionInfo'] = undefined;

/**
 * Required. The name of the database. Values are of the form `projects//instances//databases/`, where `` is as specified in the `CREATE DATABASE` statement. This name can be passed to other API methods to identify the database.
 * @member {String} name
 */
Database.prototype['name'] = undefined;

/**
 * Output only. If true, the database is being updated. If false, there are no ongoing update operations for the database.
 * @member {Boolean} reconciling
 */
Database.prototype['reconciling'] = undefined;

/**
 * @member {module:model/RestoreInfo} restoreInfo
 */
Database.prototype['restoreInfo'] = undefined;

/**
 * Output only. The current database state.
 * @member {module:model/Database.StateEnum} state
 */
Database.prototype['state'] = undefined;

/**
 * Output only. The period in which Cloud Spanner retains all versions of data for the database. This is the same as the value of version_retention_period database option set using UpdateDatabaseDdl. Defaults to 1 hour, if not set.
 * @member {String} versionRetentionPeriod
 */
Database.prototype['versionRetentionPeriod'] = undefined;





/**
 * Allowed values for the <code>databaseDialect</code> property.
 * @enum {String}
 * @readonly
 */
Database['DatabaseDialectEnum'] = {

    /**
     * value: "DATABASE_DIALECT_UNSPECIFIED"
     * @const
     */
    "DATABASE_DIALECT_UNSPECIFIED": "DATABASE_DIALECT_UNSPECIFIED",

    /**
     * value: "GOOGLE_STANDARD_SQL"
     * @const
     */
    "GOOGLE_STANDARD_SQL": "GOOGLE_STANDARD_SQL",

    /**
     * value: "POSTGRESQL"
     * @const
     */
    "POSTGRESQL": "POSTGRESQL"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Database['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "READY_OPTIMIZING"
     * @const
     */
    "READY_OPTIMIZING": "READY_OPTIMIZING"
};



export default Database;

