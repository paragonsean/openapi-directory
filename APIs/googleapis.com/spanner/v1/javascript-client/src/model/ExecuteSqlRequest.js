/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DirectedReadOptions from './DirectedReadOptions';
import QueryOptions from './QueryOptions';
import RequestOptions from './RequestOptions';
import TransactionSelector from './TransactionSelector';
import Type from './Type';

/**
 * The ExecuteSqlRequest model module.
 * @module model/ExecuteSqlRequest
 * @version v1
 */
class ExecuteSqlRequest {
    /**
     * Constructs a new <code>ExecuteSqlRequest</code>.
     * The request for ExecuteSql and ExecuteStreamingSql.
     * @alias module:model/ExecuteSqlRequest
     */
    constructor() { 
        
        ExecuteSqlRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExecuteSqlRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecuteSqlRequest} obj Optional instance to populate.
     * @return {module:model/ExecuteSqlRequest} The populated <code>ExecuteSqlRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecuteSqlRequest();

            if (data.hasOwnProperty('dataBoostEnabled')) {
                obj['dataBoostEnabled'] = ApiClient.convertToType(data['dataBoostEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('directedReadOptions')) {
                obj['directedReadOptions'] = DirectedReadOptions.constructFromObject(data['directedReadOptions']);
            }
            if (data.hasOwnProperty('paramTypes')) {
                obj['paramTypes'] = ApiClient.convertToType(data['paramTypes'], {'String': Type});
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], {'String': Object});
            }
            if (data.hasOwnProperty('partitionToken')) {
                obj['partitionToken'] = ApiClient.convertToType(data['partitionToken'], 'Blob');
            }
            if (data.hasOwnProperty('queryMode')) {
                obj['queryMode'] = ApiClient.convertToType(data['queryMode'], 'String');
            }
            if (data.hasOwnProperty('queryOptions')) {
                obj['queryOptions'] = QueryOptions.constructFromObject(data['queryOptions']);
            }
            if (data.hasOwnProperty('requestOptions')) {
                obj['requestOptions'] = RequestOptions.constructFromObject(data['requestOptions']);
            }
            if (data.hasOwnProperty('resumeToken')) {
                obj['resumeToken'] = ApiClient.convertToType(data['resumeToken'], 'Blob');
            }
            if (data.hasOwnProperty('seqno')) {
                obj['seqno'] = ApiClient.convertToType(data['seqno'], 'String');
            }
            if (data.hasOwnProperty('sql')) {
                obj['sql'] = ApiClient.convertToType(data['sql'], 'String');
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = TransactionSelector.constructFromObject(data['transaction']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecuteSqlRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecuteSqlRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `directedReadOptions`
        if (data['directedReadOptions']) { // data not null
          DirectedReadOptions.validateJSON(data['directedReadOptions']);
        }
        // ensure the json data is a string
        if (data['queryMode'] && !(typeof data['queryMode'] === 'string' || data['queryMode'] instanceof String)) {
            throw new Error("Expected the field `queryMode` to be a primitive type in the JSON string but got " + data['queryMode']);
        }
        // validate the optional field `queryOptions`
        if (data['queryOptions']) { // data not null
          QueryOptions.validateJSON(data['queryOptions']);
        }
        // validate the optional field `requestOptions`
        if (data['requestOptions']) { // data not null
          RequestOptions.validateJSON(data['requestOptions']);
        }
        // ensure the json data is a string
        if (data['seqno'] && !(typeof data['seqno'] === 'string' || data['seqno'] instanceof String)) {
            throw new Error("Expected the field `seqno` to be a primitive type in the JSON string but got " + data['seqno']);
        }
        // ensure the json data is a string
        if (data['sql'] && !(typeof data['sql'] === 'string' || data['sql'] instanceof String)) {
            throw new Error("Expected the field `sql` to be a primitive type in the JSON string but got " + data['sql']);
        }
        // validate the optional field `transaction`
        if (data['transaction']) { // data not null
          TransactionSelector.validateJSON(data['transaction']);
        }

        return true;
    }


}



/**
 * If this is for a partitioned query and this field is set to `true`, the request is executed with Spanner Data Boost independent compute resources. If the field is set to `true` but the request does not set `partition_token`, the API returns an `INVALID_ARGUMENT` error.
 * @member {Boolean} dataBoostEnabled
 */
ExecuteSqlRequest.prototype['dataBoostEnabled'] = undefined;

/**
 * @member {module:model/DirectedReadOptions} directedReadOptions
 */
ExecuteSqlRequest.prototype['directedReadOptions'] = undefined;

/**
 * It is not always possible for Cloud Spanner to infer the right SQL type from a JSON value. For example, values of type `BYTES` and values of type `STRING` both appear in params as JSON strings. In these cases, `param_types` can be used to specify the exact SQL type for some or all of the SQL statement parameters. See the definition of Type for more information about SQL types.
 * @member {Object.<String, module:model/Type>} paramTypes
 */
ExecuteSqlRequest.prototype['paramTypes'] = undefined;

/**
 * Parameter names and values that bind to placeholders in the SQL string. A parameter placeholder consists of the `@` character followed by the parameter name (for example, `@firstName`). Parameter names must conform to the naming requirements of identifiers as specified at https://cloud.google.com/spanner/docs/lexical#identifiers. Parameters can appear anywhere that a literal value is expected. The same parameter name can be used more than once, for example: `\"WHERE id > @msg_id AND id < @msg_id + 100\"` It is an error to execute a SQL statement with unbound parameters.
 * @member {Object.<String, Object>} params
 */
ExecuteSqlRequest.prototype['params'] = undefined;

/**
 * If present, results will be restricted to the specified partition previously created using PartitionQuery(). There must be an exact match for the values of fields common to this message and the PartitionQueryRequest message used to create this partition_token.
 * @member {Blob} partitionToken
 */
ExecuteSqlRequest.prototype['partitionToken'] = undefined;

/**
 * Used to control the amount of debugging information returned in ResultSetStats. If partition_token is set, query_mode can only be set to QueryMode.NORMAL.
 * @member {module:model/ExecuteSqlRequest.QueryModeEnum} queryMode
 */
ExecuteSqlRequest.prototype['queryMode'] = undefined;

/**
 * @member {module:model/QueryOptions} queryOptions
 */
ExecuteSqlRequest.prototype['queryOptions'] = undefined;

/**
 * @member {module:model/RequestOptions} requestOptions
 */
ExecuteSqlRequest.prototype['requestOptions'] = undefined;

/**
 * If this request is resuming a previously interrupted SQL statement execution, `resume_token` should be copied from the last PartialResultSet yielded before the interruption. Doing this enables the new SQL statement execution to resume where the last one left off. The rest of the request parameters must exactly match the request that yielded this token.
 * @member {Blob} resumeToken
 */
ExecuteSqlRequest.prototype['resumeToken'] = undefined;

/**
 * A per-transaction sequence number used to identify this request. This field makes each request idempotent such that if the request is received multiple times, at most one will succeed. The sequence number must be monotonically increasing within the transaction. If a request arrives for the first time with an out-of-order sequence number, the transaction may be aborted. Replays of previously handled requests will yield the same response as the first execution. Required for DML statements. Ignored for queries.
 * @member {String} seqno
 */
ExecuteSqlRequest.prototype['seqno'] = undefined;

/**
 * Required. The SQL string.
 * @member {String} sql
 */
ExecuteSqlRequest.prototype['sql'] = undefined;

/**
 * @member {module:model/TransactionSelector} transaction
 */
ExecuteSqlRequest.prototype['transaction'] = undefined;





/**
 * Allowed values for the <code>queryMode</code> property.
 * @enum {String}
 * @readonly
 */
ExecuteSqlRequest['QueryModeEnum'] = {

    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL",

    /**
     * value: "PLAN"
     * @const
     */
    "PLAN": "PLAN",

    /**
     * value: "PROFILE"
     * @const
     */
    "PROFILE": "PROFILE"
};



export default ExecuteSqlRequest;

