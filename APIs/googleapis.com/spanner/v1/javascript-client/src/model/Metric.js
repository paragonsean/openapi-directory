/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DerivedMetric from './DerivedMetric';
import IndexedHotKey from './IndexedHotKey';
import IndexedKeyRangeInfos from './IndexedKeyRangeInfos';
import LocalizedString from './LocalizedString';
import MetricMatrix from './MetricMatrix';

/**
 * The Metric model module.
 * @module model/Metric
 * @version v1
 */
class Metric {
    /**
     * Constructs a new <code>Metric</code>.
     * A message representing the actual monitoring data, values for each key bucket over time, of a metric.
     * @alias module:model/Metric
     */
    constructor() { 
        
        Metric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metric} obj Optional instance to populate.
     * @return {module:model/Metric} The populated <code>Metric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metric();

            if (data.hasOwnProperty('aggregation')) {
                obj['aggregation'] = ApiClient.convertToType(data['aggregation'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = LocalizedString.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('derived')) {
                obj['derived'] = DerivedMetric.constructFromObject(data['derived']);
            }
            if (data.hasOwnProperty('displayLabel')) {
                obj['displayLabel'] = LocalizedString.constructFromObject(data['displayLabel']);
            }
            if (data.hasOwnProperty('hasNonzeroData')) {
                obj['hasNonzeroData'] = ApiClient.convertToType(data['hasNonzeroData'], 'Boolean');
            }
            if (data.hasOwnProperty('hotValue')) {
                obj['hotValue'] = ApiClient.convertToType(data['hotValue'], 'Number');
            }
            if (data.hasOwnProperty('indexedHotKeys')) {
                obj['indexedHotKeys'] = ApiClient.convertToType(data['indexedHotKeys'], {'String': IndexedHotKey});
            }
            if (data.hasOwnProperty('indexedKeyRangeInfos')) {
                obj['indexedKeyRangeInfos'] = ApiClient.convertToType(data['indexedKeyRangeInfos'], {'String': IndexedKeyRangeInfos});
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = LocalizedString.constructFromObject(data['info']);
            }
            if (data.hasOwnProperty('matrix')) {
                obj['matrix'] = MetricMatrix.constructFromObject(data['matrix']);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = LocalizedString.constructFromObject(data['unit']);
            }
            if (data.hasOwnProperty('visible')) {
                obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metric</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregation'] && !(typeof data['aggregation'] === 'string' || data['aggregation'] instanceof String)) {
            throw new Error("Expected the field `aggregation` to be a primitive type in the JSON string but got " + data['aggregation']);
        }
        // validate the optional field `category`
        if (data['category']) { // data not null
          LocalizedString.validateJSON(data['category']);
        }
        // validate the optional field `derived`
        if (data['derived']) { // data not null
          DerivedMetric.validateJSON(data['derived']);
        }
        // validate the optional field `displayLabel`
        if (data['displayLabel']) { // data not null
          LocalizedString.validateJSON(data['displayLabel']);
        }
        // validate the optional field `info`
        if (data['info']) { // data not null
          LocalizedString.validateJSON(data['info']);
        }
        // validate the optional field `matrix`
        if (data['matrix']) { // data not null
          MetricMatrix.validateJSON(data['matrix']);
        }
        // validate the optional field `unit`
        if (data['unit']) { // data not null
          LocalizedString.validateJSON(data['unit']);
        }

        return true;
    }


}



/**
 * The aggregation function used to aggregate each key bucket
 * @member {module:model/Metric.AggregationEnum} aggregation
 */
Metric.prototype['aggregation'] = undefined;

/**
 * @member {module:model/LocalizedString} category
 */
Metric.prototype['category'] = undefined;

/**
 * @member {module:model/DerivedMetric} derived
 */
Metric.prototype['derived'] = undefined;

/**
 * @member {module:model/LocalizedString} displayLabel
 */
Metric.prototype['displayLabel'] = undefined;

/**
 * Whether the metric has any non-zero data.
 * @member {Boolean} hasNonzeroData
 */
Metric.prototype['hasNonzeroData'] = undefined;

/**
 * The value that is considered hot for the metric. On a per metric basis hotness signals high utilization and something that might potentially be a cause for concern by the end user. hot_value is used to calibrate and scale visual color scales.
 * @member {Number} hotValue
 */
Metric.prototype['hotValue'] = undefined;

/**
 * The (sparse) mapping from time index to an IndexedHotKey message, representing those time intervals for which there are hot keys.
 * @member {Object.<String, module:model/IndexedHotKey>} indexedHotKeys
 */
Metric.prototype['indexedHotKeys'] = undefined;

/**
 * The (sparse) mapping from time interval index to an IndexedKeyRangeInfos message, representing those time intervals for which there are informational messages concerning key ranges.
 * @member {Object.<String, module:model/IndexedKeyRangeInfos>} indexedKeyRangeInfos
 */
Metric.prototype['indexedKeyRangeInfos'] = undefined;

/**
 * @member {module:model/LocalizedString} info
 */
Metric.prototype['info'] = undefined;

/**
 * @member {module:model/MetricMatrix} matrix
 */
Metric.prototype['matrix'] = undefined;

/**
 * @member {module:model/LocalizedString} unit
 */
Metric.prototype['unit'] = undefined;

/**
 * Whether the metric is visible to the end user.
 * @member {Boolean} visible
 */
Metric.prototype['visible'] = undefined;





/**
 * Allowed values for the <code>aggregation</code> property.
 * @enum {String}
 * @readonly
 */
Metric['AggregationEnum'] = {

    /**
     * value: "AGGREGATION_UNSPECIFIED"
     * @const
     */
    "AGGREGATION_UNSPECIFIED": "AGGREGATION_UNSPECIFIED",

    /**
     * value: "MAX"
     * @const
     */
    "MAX": "MAX",

    /**
     * value: "SUM"
     * @const
     */
    "SUM": "SUM"
};



export default Metric;

