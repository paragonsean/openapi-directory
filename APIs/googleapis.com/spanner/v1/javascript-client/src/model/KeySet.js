/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyRange from './KeyRange';

/**
 * The KeySet model module.
 * @module model/KeySet
 * @version v1
 */
class KeySet {
    /**
     * Constructs a new <code>KeySet</code>.
     * &#x60;KeySet&#x60; defines a collection of Cloud Spanner keys and/or key ranges. All the keys are expected to be in the same table or index. The keys need not be sorted in any particular way. If the same key is specified multiple times in the set (for example if two ranges, two keys, or a key and a range overlap), Cloud Spanner behaves as if the key were only specified once.
     * @alias module:model/KeySet
     */
    constructor() { 
        
        KeySet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeySet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeySet} obj Optional instance to populate.
     * @return {module:model/KeySet} The populated <code>KeySet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeySet();

            if (data.hasOwnProperty('all')) {
                obj['all'] = ApiClient.convertToType(data['all'], 'Boolean');
            }
            if (data.hasOwnProperty('keys')) {
                obj['keys'] = ApiClient.convertToType(data['keys'], [[Object]]);
            }
            if (data.hasOwnProperty('ranges')) {
                obj['ranges'] = ApiClient.convertToType(data['ranges'], [KeyRange]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeySet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeySet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['keys'])) {
            throw new Error("Expected the field `keys` to be an array in the JSON data but got " + data['keys']);
        }
        if (data['ranges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ranges'])) {
                throw new Error("Expected the field `ranges` to be an array in the JSON data but got " + data['ranges']);
            }
            // validate the optional field `ranges` (array)
            for (const item of data['ranges']) {
                KeyRange.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * For convenience `all` can be set to `true` to indicate that this `KeySet` matches all keys in the table or index. Note that any keys specified in `keys` or `ranges` are only yielded once.
 * @member {Boolean} all
 */
KeySet.prototype['all'] = undefined;

/**
 * A list of specific keys. Entries in `keys` should have exactly as many elements as there are columns in the primary or index key with which this `KeySet` is used. Individual key values are encoded as described here.
 * @member {Array.<Array.<Object>>} keys
 */
KeySet.prototype['keys'] = undefined;

/**
 * A list of key ranges. See KeyRange for more information about key range specifications.
 * @member {Array.<module:model/KeyRange>} ranges
 */
KeySet.prototype['ranges'] = undefined;






export default KeySet;

