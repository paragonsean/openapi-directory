/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReadWrite model module.
 * @module model/ReadWrite
 * @version v1
 */
class ReadWrite {
    /**
     * Constructs a new <code>ReadWrite</code>.
     * Message type to initiate a read-write transaction. Currently this transaction type has no options.
     * @alias module:model/ReadWrite
     */
    constructor() { 
        
        ReadWrite.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReadWrite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReadWrite} obj Optional instance to populate.
     * @return {module:model/ReadWrite} The populated <code>ReadWrite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReadWrite();

            if (data.hasOwnProperty('readLockMode')) {
                obj['readLockMode'] = ApiClient.convertToType(data['readLockMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReadWrite</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReadWrite</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['readLockMode'] && !(typeof data['readLockMode'] === 'string' || data['readLockMode'] instanceof String)) {
            throw new Error("Expected the field `readLockMode` to be a primitive type in the JSON string but got " + data['readLockMode']);
        }

        return true;
    }


}



/**
 * Read lock mode for the transaction.
 * @member {module:model/ReadWrite.ReadLockModeEnum} readLockMode
 */
ReadWrite.prototype['readLockMode'] = undefined;





/**
 * Allowed values for the <code>readLockMode</code> property.
 * @enum {String}
 * @readonly
 */
ReadWrite['ReadLockModeEnum'] = {

    /**
     * value: "READ_LOCK_MODE_UNSPECIFIED"
     * @const
     */
    "READ_LOCK_MODE_UNSPECIFIED": "READ_LOCK_MODE_UNSPECIFIED",

    /**
     * value: "PESSIMISTIC"
     * @const
     */
    "PESSIMISTIC": "PESSIMISTIC",

    /**
     * value: "OPTIMISTIC"
     * @const
     */
    "OPTIMISTIC": "OPTIMISTIC"
};



export default ReadWrite;

