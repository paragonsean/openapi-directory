/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Delete from './Delete';
import Write from './Write';

/**
 * The Mutation model module.
 * @module model/Mutation
 * @version v1
 */
class Mutation {
    /**
     * Constructs a new <code>Mutation</code>.
     * A modification to one or more Cloud Spanner rows. Mutations can be applied to a Cloud Spanner database by sending them in a Commit call.
     * @alias module:model/Mutation
     */
    constructor() { 
        
        Mutation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Mutation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Mutation} obj Optional instance to populate.
     * @return {module:model/Mutation} The populated <code>Mutation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Mutation();

            if (data.hasOwnProperty('delete')) {
                obj['delete'] = Delete.constructFromObject(data['delete']);
            }
            if (data.hasOwnProperty('insert')) {
                obj['insert'] = Write.constructFromObject(data['insert']);
            }
            if (data.hasOwnProperty('insertOrUpdate')) {
                obj['insertOrUpdate'] = Write.constructFromObject(data['insertOrUpdate']);
            }
            if (data.hasOwnProperty('replace')) {
                obj['replace'] = Write.constructFromObject(data['replace']);
            }
            if (data.hasOwnProperty('update')) {
                obj['update'] = Write.constructFromObject(data['update']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Mutation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Mutation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `delete`
        if (data['delete']) { // data not null
          Delete.validateJSON(data['delete']);
        }
        // validate the optional field `insert`
        if (data['insert']) { // data not null
          Write.validateJSON(data['insert']);
        }
        // validate the optional field `insertOrUpdate`
        if (data['insertOrUpdate']) { // data not null
          Write.validateJSON(data['insertOrUpdate']);
        }
        // validate the optional field `replace`
        if (data['replace']) { // data not null
          Write.validateJSON(data['replace']);
        }
        // validate the optional field `update`
        if (data['update']) { // data not null
          Write.validateJSON(data['update']);
        }

        return true;
    }


}



/**
 * @member {module:model/Delete} delete
 */
Mutation.prototype['delete'] = undefined;

/**
 * @member {module:model/Write} insert
 */
Mutation.prototype['insert'] = undefined;

/**
 * @member {module:model/Write} insertOrUpdate
 */
Mutation.prototype['insertOrUpdate'] = undefined;

/**
 * @member {module:model/Write} replace
 */
Mutation.prototype['replace'] = undefined;

/**
 * @member {module:model/Write} update
 */
Mutation.prototype['update'] = undefined;






export default Mutation;

