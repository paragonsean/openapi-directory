/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BackupInfo from './BackupInfo';

/**
 * The RestoreInfo model module.
 * @module model/RestoreInfo
 * @version v1
 */
class RestoreInfo {
    /**
     * Constructs a new <code>RestoreInfo</code>.
     * Information about the database restore.
     * @alias module:model/RestoreInfo
     */
    constructor() { 
        
        RestoreInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RestoreInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RestoreInfo} obj Optional instance to populate.
     * @return {module:model/RestoreInfo} The populated <code>RestoreInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestoreInfo();

            if (data.hasOwnProperty('backupInfo')) {
                obj['backupInfo'] = BackupInfo.constructFromObject(data['backupInfo']);
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestoreInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestoreInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `backupInfo`
        if (data['backupInfo']) { // data not null
          BackupInfo.validateJSON(data['backupInfo']);
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }

        return true;
    }


}



/**
 * @member {module:model/BackupInfo} backupInfo
 */
RestoreInfo.prototype['backupInfo'] = undefined;

/**
 * The type of the restore source.
 * @member {module:model/RestoreInfo.SourceTypeEnum} sourceType
 */
RestoreInfo.prototype['sourceType'] = undefined;





/**
 * Allowed values for the <code>sourceType</code> property.
 * @enum {String}
 * @readonly
 */
RestoreInfo['SourceTypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "BACKUP"
     * @const
     */
    "BACKUP": "BACKUP"
};



export default RestoreInfo;

