/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContextValue from './ContextValue';
import LocalizedString from './LocalizedString';

/**
 * The KeyRangeInfo model module.
 * @module model/KeyRangeInfo
 * @version v1
 */
class KeyRangeInfo {
    /**
     * Constructs a new <code>KeyRangeInfo</code>.
     * A message representing information for a key range (possibly one key).
     * @alias module:model/KeyRangeInfo
     */
    constructor() { 
        
        KeyRangeInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeyRangeInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyRangeInfo} obj Optional instance to populate.
     * @return {module:model/KeyRangeInfo} The populated <code>KeyRangeInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyRangeInfo();

            if (data.hasOwnProperty('contextValues')) {
                obj['contextValues'] = ApiClient.convertToType(data['contextValues'], [ContextValue]);
            }
            if (data.hasOwnProperty('endKeyIndex')) {
                obj['endKeyIndex'] = ApiClient.convertToType(data['endKeyIndex'], 'Number');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = LocalizedString.constructFromObject(data['info']);
            }
            if (data.hasOwnProperty('keysCount')) {
                obj['keysCount'] = ApiClient.convertToType(data['keysCount'], 'String');
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = LocalizedString.constructFromObject(data['metric']);
            }
            if (data.hasOwnProperty('startKeyIndex')) {
                obj['startKeyIndex'] = ApiClient.convertToType(data['startKeyIndex'], 'Number');
            }
            if (data.hasOwnProperty('timeOffset')) {
                obj['timeOffset'] = ApiClient.convertToType(data['timeOffset'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = LocalizedString.constructFromObject(data['unit']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyRangeInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyRangeInfo</code>.
     */
    static validateJSON(data) {
        if (data['contextValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contextValues'])) {
                throw new Error("Expected the field `contextValues` to be an array in the JSON data but got " + data['contextValues']);
            }
            // validate the optional field `contextValues` (array)
            for (const item of data['contextValues']) {
                ContextValue.validateJSON(item);
            };
        }
        // validate the optional field `info`
        if (data['info']) { // data not null
          LocalizedString.validateJSON(data['info']);
        }
        // ensure the json data is a string
        if (data['keysCount'] && !(typeof data['keysCount'] === 'string' || data['keysCount'] instanceof String)) {
            throw new Error("Expected the field `keysCount` to be a primitive type in the JSON string but got " + data['keysCount']);
        }
        // validate the optional field `metric`
        if (data['metric']) { // data not null
          LocalizedString.validateJSON(data['metric']);
        }
        // ensure the json data is a string
        if (data['timeOffset'] && !(typeof data['timeOffset'] === 'string' || data['timeOffset'] instanceof String)) {
            throw new Error("Expected the field `timeOffset` to be a primitive type in the JSON string but got " + data['timeOffset']);
        }
        // validate the optional field `unit`
        if (data['unit']) { // data not null
          LocalizedString.validateJSON(data['unit']);
        }

        return true;
    }


}



/**
 * The list of context values for this key range.
 * @member {Array.<module:model/ContextValue>} contextValues
 */
KeyRangeInfo.prototype['contextValues'] = undefined;

/**
 * The index of the end key in indexed_keys.
 * @member {Number} endKeyIndex
 */
KeyRangeInfo.prototype['endKeyIndex'] = undefined;

/**
 * @member {module:model/LocalizedString} info
 */
KeyRangeInfo.prototype['info'] = undefined;

/**
 * The number of keys this range covers.
 * @member {String} keysCount
 */
KeyRangeInfo.prototype['keysCount'] = undefined;

/**
 * @member {module:model/LocalizedString} metric
 */
KeyRangeInfo.prototype['metric'] = undefined;

/**
 * The index of the start key in indexed_keys.
 * @member {Number} startKeyIndex
 */
KeyRangeInfo.prototype['startKeyIndex'] = undefined;

/**
 * The time offset. This is the time since the start of the time interval.
 * @member {String} timeOffset
 */
KeyRangeInfo.prototype['timeOffset'] = undefined;

/**
 * @member {module:model/LocalizedString} unit
 */
KeyRangeInfo.prototype['unit'] = undefined;

/**
 * The value of the metric.
 * @member {Number} value
 */
KeyRangeInfo.prototype['value'] = undefined;






export default KeyRangeInfo;

