/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RestoreDatabaseEncryptionConfig from './RestoreDatabaseEncryptionConfig';

/**
 * The RestoreDatabaseRequest model module.
 * @module model/RestoreDatabaseRequest
 * @version v1
 */
class RestoreDatabaseRequest {
    /**
     * Constructs a new <code>RestoreDatabaseRequest</code>.
     * The request for RestoreDatabase.
     * @alias module:model/RestoreDatabaseRequest
     */
    constructor() { 
        
        RestoreDatabaseRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RestoreDatabaseRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RestoreDatabaseRequest} obj Optional instance to populate.
     * @return {module:model/RestoreDatabaseRequest} The populated <code>RestoreDatabaseRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestoreDatabaseRequest();

            if (data.hasOwnProperty('backup')) {
                obj['backup'] = ApiClient.convertToType(data['backup'], 'String');
            }
            if (data.hasOwnProperty('databaseId')) {
                obj['databaseId'] = ApiClient.convertToType(data['databaseId'], 'String');
            }
            if (data.hasOwnProperty('encryptionConfig')) {
                obj['encryptionConfig'] = RestoreDatabaseEncryptionConfig.constructFromObject(data['encryptionConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestoreDatabaseRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestoreDatabaseRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backup'] && !(typeof data['backup'] === 'string' || data['backup'] instanceof String)) {
            throw new Error("Expected the field `backup` to be a primitive type in the JSON string but got " + data['backup']);
        }
        // ensure the json data is a string
        if (data['databaseId'] && !(typeof data['databaseId'] === 'string' || data['databaseId'] instanceof String)) {
            throw new Error("Expected the field `databaseId` to be a primitive type in the JSON string but got " + data['databaseId']);
        }
        // validate the optional field `encryptionConfig`
        if (data['encryptionConfig']) { // data not null
          RestoreDatabaseEncryptionConfig.validateJSON(data['encryptionConfig']);
        }

        return true;
    }


}



/**
 * Name of the backup from which to restore. Values are of the form `projects//instances//backups/`.
 * @member {String} backup
 */
RestoreDatabaseRequest.prototype['backup'] = undefined;

/**
 * Required. The id of the database to create and restore to. This database must not already exist. The `database_id` appended to `parent` forms the full database name of the form `projects//instances//databases/`.
 * @member {String} databaseId
 */
RestoreDatabaseRequest.prototype['databaseId'] = undefined;

/**
 * @member {module:model/RestoreDatabaseEncryptionConfig} encryptionConfig
 */
RestoreDatabaseRequest.prototype['encryptionConfig'] = undefined;






export default RestoreDatabaseRequest;

