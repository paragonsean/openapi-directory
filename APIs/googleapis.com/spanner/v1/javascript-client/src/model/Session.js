/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Session model module.
 * @module model/Session
 * @version v1
 */
class Session {
    /**
     * Constructs a new <code>Session</code>.
     * A session in the Cloud Spanner API.
     * @alias module:model/Session
     */
    constructor() { 
        
        Session.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Session} obj Optional instance to populate.
     * @return {module:model/Session} The populated <code>Session</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Session();

            if (data.hasOwnProperty('approximateLastUseTime')) {
                obj['approximateLastUseTime'] = ApiClient.convertToType(data['approximateLastUseTime'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('creatorRole')) {
                obj['creatorRole'] = ApiClient.convertToType(data['creatorRole'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Session</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Session</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['approximateLastUseTime'] && !(typeof data['approximateLastUseTime'] === 'string' || data['approximateLastUseTime'] instanceof String)) {
            throw new Error("Expected the field `approximateLastUseTime` to be a primitive type in the JSON string but got " + data['approximateLastUseTime']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['creatorRole'] && !(typeof data['creatorRole'] === 'string' || data['creatorRole'] instanceof String)) {
            throw new Error("Expected the field `creatorRole` to be a primitive type in the JSON string but got " + data['creatorRole']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Output only. The approximate timestamp when the session is last used. It is typically earlier than the actual last use time.
 * @member {String} approximateLastUseTime
 */
Session.prototype['approximateLastUseTime'] = undefined;

/**
 * Output only. The timestamp when the session is created.
 * @member {String} createTime
 */
Session.prototype['createTime'] = undefined;

/**
 * The database role which created this session.
 * @member {String} creatorRole
 */
Session.prototype['creatorRole'] = undefined;

/**
 * The labels for the session. * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. * No more than 64 labels can be associated with a given session. See https://goo.gl/xmQnxf for more information on and examples of labels.
 * @member {Object.<String, String>} labels
 */
Session.prototype['labels'] = undefined;

/**
 * Output only. The name of the session. This is always system-assigned.
 * @member {String} name
 */
Session.prototype['name'] = undefined;






export default Session;

