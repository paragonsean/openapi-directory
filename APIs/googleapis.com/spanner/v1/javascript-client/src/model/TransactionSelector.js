/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionOptions from './TransactionOptions';

/**
 * The TransactionSelector model module.
 * @module model/TransactionSelector
 * @version v1
 */
class TransactionSelector {
    /**
     * Constructs a new <code>TransactionSelector</code>.
     * This message is used to select the transaction in which a Read or ExecuteSql call runs. See TransactionOptions for more information about transactions.
     * @alias module:model/TransactionSelector
     */
    constructor() { 
        
        TransactionSelector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionSelector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionSelector} obj Optional instance to populate.
     * @return {module:model/TransactionSelector} The populated <code>TransactionSelector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionSelector();

            if (data.hasOwnProperty('begin')) {
                obj['begin'] = TransactionOptions.constructFromObject(data['begin']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Blob');
            }
            if (data.hasOwnProperty('singleUse')) {
                obj['singleUse'] = TransactionOptions.constructFromObject(data['singleUse']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionSelector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionSelector</code>.
     */
    static validateJSON(data) {
        // validate the optional field `begin`
        if (data['begin']) { // data not null
          TransactionOptions.validateJSON(data['begin']);
        }
        // validate the optional field `singleUse`
        if (data['singleUse']) { // data not null
          TransactionOptions.validateJSON(data['singleUse']);
        }

        return true;
    }


}



/**
 * @member {module:model/TransactionOptions} begin
 */
TransactionSelector.prototype['begin'] = undefined;

/**
 * Execute the read or SQL query in a previously-started transaction.
 * @member {Blob} id
 */
TransactionSelector.prototype['id'] = undefined;

/**
 * @member {module:model/TransactionOptions} singleUse
 */
TransactionSelector.prototype['singleUse'] = undefined;






export default TransactionSelector;

