/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BackupInfo model module.
 * @module model/BackupInfo
 * @version v1
 */
class BackupInfo {
    /**
     * Constructs a new <code>BackupInfo</code>.
     * Information about a backup.
     * @alias module:model/BackupInfo
     */
    constructor() { 
        
        BackupInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BackupInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BackupInfo} obj Optional instance to populate.
     * @return {module:model/BackupInfo} The populated <code>BackupInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BackupInfo();

            if (data.hasOwnProperty('backup')) {
                obj['backup'] = ApiClient.convertToType(data['backup'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('sourceDatabase')) {
                obj['sourceDatabase'] = ApiClient.convertToType(data['sourceDatabase'], 'String');
            }
            if (data.hasOwnProperty('versionTime')) {
                obj['versionTime'] = ApiClient.convertToType(data['versionTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BackupInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BackupInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backup'] && !(typeof data['backup'] === 'string' || data['backup'] instanceof String)) {
            throw new Error("Expected the field `backup` to be a primitive type in the JSON string but got " + data['backup']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['sourceDatabase'] && !(typeof data['sourceDatabase'] === 'string' || data['sourceDatabase'] instanceof String)) {
            throw new Error("Expected the field `sourceDatabase` to be a primitive type in the JSON string but got " + data['sourceDatabase']);
        }
        // ensure the json data is a string
        if (data['versionTime'] && !(typeof data['versionTime'] === 'string' || data['versionTime'] instanceof String)) {
            throw new Error("Expected the field `versionTime` to be a primitive type in the JSON string but got " + data['versionTime']);
        }

        return true;
    }


}



/**
 * Name of the backup.
 * @member {String} backup
 */
BackupInfo.prototype['backup'] = undefined;

/**
 * The time the CreateBackup request was received.
 * @member {String} createTime
 */
BackupInfo.prototype['createTime'] = undefined;

/**
 * Name of the database the backup was created from.
 * @member {String} sourceDatabase
 */
BackupInfo.prototype['sourceDatabase'] = undefined;

/**
 * The backup contains an externally consistent copy of `source_database` at the timestamp specified by `version_time`. If the CreateBackup request did not specify `version_time`, the `version_time` of the backup is equivalent to the `create_time`.
 * @member {String} versionTime
 */
BackupInfo.prototype['versionTime'] = undefined;






export default BackupInfo;

