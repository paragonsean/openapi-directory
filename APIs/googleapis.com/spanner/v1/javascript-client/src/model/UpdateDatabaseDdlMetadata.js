/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DdlStatementActionInfo from './DdlStatementActionInfo';
import OperationProgress from './OperationProgress';

/**
 * The UpdateDatabaseDdlMetadata model module.
 * @module model/UpdateDatabaseDdlMetadata
 * @version v1
 */
class UpdateDatabaseDdlMetadata {
    /**
     * Constructs a new <code>UpdateDatabaseDdlMetadata</code>.
     * Metadata type for the operation returned by UpdateDatabaseDdl.
     * @alias module:model/UpdateDatabaseDdlMetadata
     */
    constructor() { 
        
        UpdateDatabaseDdlMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateDatabaseDdlMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateDatabaseDdlMetadata} obj Optional instance to populate.
     * @return {module:model/UpdateDatabaseDdlMetadata} The populated <code>UpdateDatabaseDdlMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateDatabaseDdlMetadata();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [DdlStatementActionInfo]);
            }
            if (data.hasOwnProperty('commitTimestamps')) {
                obj['commitTimestamps'] = ApiClient.convertToType(data['commitTimestamps'], ['String']);
            }
            if (data.hasOwnProperty('database')) {
                obj['database'] = ApiClient.convertToType(data['database'], 'String');
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = ApiClient.convertToType(data['progress'], [OperationProgress]);
            }
            if (data.hasOwnProperty('statements')) {
                obj['statements'] = ApiClient.convertToType(data['statements'], ['String']);
            }
            if (data.hasOwnProperty('throttled')) {
                obj['throttled'] = ApiClient.convertToType(data['throttled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateDatabaseDdlMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateDatabaseDdlMetadata</code>.
     */
    static validateJSON(data) {
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                DdlStatementActionInfo.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['commitTimestamps'])) {
            throw new Error("Expected the field `commitTimestamps` to be an array in the JSON data but got " + data['commitTimestamps']);
        }
        // ensure the json data is a string
        if (data['database'] && !(typeof data['database'] === 'string' || data['database'] instanceof String)) {
            throw new Error("Expected the field `database` to be a primitive type in the JSON string but got " + data['database']);
        }
        if (data['progress']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['progress'])) {
                throw new Error("Expected the field `progress` to be an array in the JSON data but got " + data['progress']);
            }
            // validate the optional field `progress` (array)
            for (const item of data['progress']) {
                OperationProgress.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['statements'])) {
            throw new Error("Expected the field `statements` to be an array in the JSON data but got " + data['statements']);
        }

        return true;
    }


}



/**
 * The brief action info for the DDL statements. `actions[i]` is the brief info for `statements[i]`.
 * @member {Array.<module:model/DdlStatementActionInfo>} actions
 */
UpdateDatabaseDdlMetadata.prototype['actions'] = undefined;

/**
 * Reports the commit timestamps of all statements that have succeeded so far, where `commit_timestamps[i]` is the commit timestamp for the statement `statements[i]`.
 * @member {Array.<String>} commitTimestamps
 */
UpdateDatabaseDdlMetadata.prototype['commitTimestamps'] = undefined;

/**
 * The database being modified.
 * @member {String} database
 */
UpdateDatabaseDdlMetadata.prototype['database'] = undefined;

/**
 * The progress of the UpdateDatabaseDdl operations. All DDL statements will have continuously updating progress, and `progress[i]` is the operation progress for `statements[i]`. Also, `progress[i]` will have start time and end time populated with commit timestamp of operation, as well as a progress of 100% once the operation has completed.
 * @member {Array.<module:model/OperationProgress>} progress
 */
UpdateDatabaseDdlMetadata.prototype['progress'] = undefined;

/**
 * For an update this list contains all the statements. For an individual statement, this list contains only that statement.
 * @member {Array.<String>} statements
 */
UpdateDatabaseDdlMetadata.prototype['statements'] = undefined;

/**
 * Output only. When true, indicates that the operation is throttled e.g. due to resource constraints. When resources become available the operation will resume and this field will be false again.
 * @member {Boolean} throttled
 */
UpdateDatabaseDdlMetadata.prototype['throttled'] = undefined;






export default UpdateDatabaseDdlMetadata;

