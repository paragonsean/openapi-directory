/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PrefixNode model module.
 * @module model/PrefixNode
 * @version v1
 */
class PrefixNode {
    /**
     * Constructs a new <code>PrefixNode</code>.
     * A message representing a key prefix node in the key prefix hierarchy. for eg. Bigtable keyspaces are lexicographically ordered mappings of keys to values. Keys often have a shared prefix structure where users use the keys to organize data. Eg ///employee In this case Keysight will possibly use one node for a company and reuse it for all employees that fall under the company. Doing so improves legibility in the UI.
     * @alias module:model/PrefixNode
     */
    constructor() { 
        
        PrefixNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrefixNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrefixNode} obj Optional instance to populate.
     * @return {module:model/PrefixNode} The populated <code>PrefixNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrefixNode();

            if (data.hasOwnProperty('dataSourceNode')) {
                obj['dataSourceNode'] = ApiClient.convertToType(data['dataSourceNode'], 'Boolean');
            }
            if (data.hasOwnProperty('depth')) {
                obj['depth'] = ApiClient.convertToType(data['depth'], 'Number');
            }
            if (data.hasOwnProperty('endIndex')) {
                obj['endIndex'] = ApiClient.convertToType(data['endIndex'], 'Number');
            }
            if (data.hasOwnProperty('startIndex')) {
                obj['startIndex'] = ApiClient.convertToType(data['startIndex'], 'Number');
            }
            if (data.hasOwnProperty('word')) {
                obj['word'] = ApiClient.convertToType(data['word'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrefixNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrefixNode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['word'] && !(typeof data['word'] === 'string' || data['word'] instanceof String)) {
            throw new Error("Expected the field `word` to be a primitive type in the JSON string but got " + data['word']);
        }

        return true;
    }


}



/**
 * Whether this corresponds to a data_source name.
 * @member {Boolean} dataSourceNode
 */
PrefixNode.prototype['dataSourceNode'] = undefined;

/**
 * The depth in the prefix hierarchy.
 * @member {Number} depth
 */
PrefixNode.prototype['depth'] = undefined;

/**
 * The index of the end key bucket of the range that this node spans.
 * @member {Number} endIndex
 */
PrefixNode.prototype['endIndex'] = undefined;

/**
 * The index of the start key bucket of the range that this node spans.
 * @member {Number} startIndex
 */
PrefixNode.prototype['startIndex'] = undefined;

/**
 * The string represented by the prefix node.
 * @member {String} word
 */
PrefixNode.prototype['word'] = undefined;






export default PrefixNode;

