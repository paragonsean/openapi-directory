/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResultSetMetadata from './ResultSetMetadata';
import ResultSetStats from './ResultSetStats';

/**
 * The ResultSet model module.
 * @module model/ResultSet
 * @version v1
 */
class ResultSet {
    /**
     * Constructs a new <code>ResultSet</code>.
     * Results from Read or ExecuteSql.
     * @alias module:model/ResultSet
     */
    constructor() { 
        
        ResultSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResultSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResultSet} obj Optional instance to populate.
     * @return {module:model/ResultSet} The populated <code>ResultSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResultSet();

            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ResultSetMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [[Object]]);
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = ResultSetStats.constructFromObject(data['stats']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResultSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResultSet</code>.
     */
    static validateJSON(data) {
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          ResultSetMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rows'])) {
            throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          ResultSetStats.validateJSON(data['stats']);
        }

        return true;
    }


}



/**
 * @member {module:model/ResultSetMetadata} metadata
 */
ResultSet.prototype['metadata'] = undefined;

/**
 * Each element in `rows` is a row whose format is defined by metadata.row_type. The ith element in each row matches the ith field in metadata.row_type. Elements are encoded based on type as described here.
 * @member {Array.<Array.<Object>>} rows
 */
ResultSet.prototype['rows'] = undefined;

/**
 * @member {module:model/ResultSetStats} stats
 */
ResultSet.prototype['stats'] = undefined;






export default ResultSet;

