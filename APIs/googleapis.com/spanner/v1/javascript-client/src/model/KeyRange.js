/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeyRange model module.
 * @module model/KeyRange
 * @version v1
 */
class KeyRange {
    /**
     * Constructs a new <code>KeyRange</code>.
     * KeyRange represents a range of rows in a table or index. A range has a start key and an end key. These keys can be open or closed, indicating if the range includes rows with that key. Keys are represented by lists, where the ith value in the list corresponds to the ith component of the table or index primary key. Individual values are encoded as described here. For example, consider the following table definition: CREATE TABLE UserEvents ( UserName STRING(MAX), EventDate STRING(10) ) PRIMARY KEY(UserName, EventDate); The following keys name rows in this table: \&quot;Bob\&quot;, \&quot;2014-09-23\&quot; Since the &#x60;UserEvents&#x60; table&#39;s &#x60;PRIMARY KEY&#x60; clause names two columns, each &#x60;UserEvents&#x60; key has two elements; the first is the &#x60;UserName&#x60;, and the second is the &#x60;EventDate&#x60;. Key ranges with multiple components are interpreted lexicographically by component using the table or index key&#39;s declared sort order. For example, the following range returns all events for user &#x60;\&quot;Bob\&quot;&#x60; that occurred in the year 2015: \&quot;start_closed\&quot;: [\&quot;Bob\&quot;, \&quot;2015-01-01\&quot;] \&quot;end_closed\&quot;: [\&quot;Bob\&quot;, \&quot;2015-12-31\&quot;] Start and end keys can omit trailing key components. This affects the inclusion and exclusion of rows that exactly match the provided key components: if the key is closed, then rows that exactly match the provided components are included; if the key is open, then rows that exactly match are not included. For example, the following range includes all events for &#x60;\&quot;Bob\&quot;&#x60; that occurred during and after the year 2000: \&quot;start_closed\&quot;: [\&quot;Bob\&quot;, \&quot;2000-01-01\&quot;] \&quot;end_closed\&quot;: [\&quot;Bob\&quot;] The next example retrieves all events for &#x60;\&quot;Bob\&quot;&#x60;: \&quot;start_closed\&quot;: [\&quot;Bob\&quot;] \&quot;end_closed\&quot;: [\&quot;Bob\&quot;] To retrieve events before the year 2000: \&quot;start_closed\&quot;: [\&quot;Bob\&quot;] \&quot;end_open\&quot;: [\&quot;Bob\&quot;, \&quot;2000-01-01\&quot;] The following range includes all rows in the table: \&quot;start_closed\&quot;: [] \&quot;end_closed\&quot;: [] This range returns all users whose &#x60;UserName&#x60; begins with any character from A to C: \&quot;start_closed\&quot;: [\&quot;A\&quot;] \&quot;end_open\&quot;: [\&quot;D\&quot;] This range returns all users whose &#x60;UserName&#x60; begins with B: \&quot;start_closed\&quot;: [\&quot;B\&quot;] \&quot;end_open\&quot;: [\&quot;C\&quot;] Key ranges honor column sort order. For example, suppose a table is defined as follows: CREATE TABLE DescendingSortedTable { Key INT64, ... ) PRIMARY KEY(Key DESC); The following range retrieves all rows with key values between 1 and 100 inclusive: \&quot;start_closed\&quot;: [\&quot;100\&quot;] \&quot;end_closed\&quot;: [\&quot;1\&quot;] Note that 100 is passed as the start, and 1 is passed as the end, because &#x60;Key&#x60; is a descending column in the schema.
     * @alias module:model/KeyRange
     */
    constructor() { 
        
        KeyRange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeyRange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyRange} obj Optional instance to populate.
     * @return {module:model/KeyRange} The populated <code>KeyRange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyRange();

            if (data.hasOwnProperty('endClosed')) {
                obj['endClosed'] = ApiClient.convertToType(data['endClosed'], [Object]);
            }
            if (data.hasOwnProperty('endOpen')) {
                obj['endOpen'] = ApiClient.convertToType(data['endOpen'], [Object]);
            }
            if (data.hasOwnProperty('startClosed')) {
                obj['startClosed'] = ApiClient.convertToType(data['startClosed'], [Object]);
            }
            if (data.hasOwnProperty('startOpen')) {
                obj['startOpen'] = ApiClient.convertToType(data['startOpen'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyRange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyRange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['endClosed'])) {
            throw new Error("Expected the field `endClosed` to be an array in the JSON data but got " + data['endClosed']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['endOpen'])) {
            throw new Error("Expected the field `endOpen` to be an array in the JSON data but got " + data['endOpen']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['startClosed'])) {
            throw new Error("Expected the field `startClosed` to be an array in the JSON data but got " + data['startClosed']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['startOpen'])) {
            throw new Error("Expected the field `startOpen` to be an array in the JSON data but got " + data['startOpen']);
        }

        return true;
    }


}



/**
 * If the end is closed, then the range includes all rows whose first `len(end_closed)` key columns exactly match `end_closed`.
 * @member {Array.<Object>} endClosed
 */
KeyRange.prototype['endClosed'] = undefined;

/**
 * If the end is open, then the range excludes rows whose first `len(end_open)` key columns exactly match `end_open`.
 * @member {Array.<Object>} endOpen
 */
KeyRange.prototype['endOpen'] = undefined;

/**
 * If the start is closed, then the range includes all rows whose first `len(start_closed)` key columns exactly match `start_closed`.
 * @member {Array.<Object>} startClosed
 */
KeyRange.prototype['startClosed'] = undefined;

/**
 * If the start is open, then the range excludes rows whose first `len(start_open)` key columns exactly match `start_open`.
 * @member {Array.<Object>} startOpen
 */
KeyRange.prototype['startOpen'] = undefined;






export default KeyRange;

