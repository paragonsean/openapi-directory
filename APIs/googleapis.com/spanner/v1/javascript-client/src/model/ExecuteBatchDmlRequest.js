/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RequestOptions from './RequestOptions';
import Statement from './Statement';
import TransactionSelector from './TransactionSelector';

/**
 * The ExecuteBatchDmlRequest model module.
 * @module model/ExecuteBatchDmlRequest
 * @version v1
 */
class ExecuteBatchDmlRequest {
    /**
     * Constructs a new <code>ExecuteBatchDmlRequest</code>.
     * The request for ExecuteBatchDml.
     * @alias module:model/ExecuteBatchDmlRequest
     */
    constructor() { 
        
        ExecuteBatchDmlRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExecuteBatchDmlRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecuteBatchDmlRequest} obj Optional instance to populate.
     * @return {module:model/ExecuteBatchDmlRequest} The populated <code>ExecuteBatchDmlRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecuteBatchDmlRequest();

            if (data.hasOwnProperty('requestOptions')) {
                obj['requestOptions'] = RequestOptions.constructFromObject(data['requestOptions']);
            }
            if (data.hasOwnProperty('seqno')) {
                obj['seqno'] = ApiClient.convertToType(data['seqno'], 'String');
            }
            if (data.hasOwnProperty('statements')) {
                obj['statements'] = ApiClient.convertToType(data['statements'], [Statement]);
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = TransactionSelector.constructFromObject(data['transaction']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecuteBatchDmlRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecuteBatchDmlRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `requestOptions`
        if (data['requestOptions']) { // data not null
          RequestOptions.validateJSON(data['requestOptions']);
        }
        // ensure the json data is a string
        if (data['seqno'] && !(typeof data['seqno'] === 'string' || data['seqno'] instanceof String)) {
            throw new Error("Expected the field `seqno` to be a primitive type in the JSON string but got " + data['seqno']);
        }
        if (data['statements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statements'])) {
                throw new Error("Expected the field `statements` to be an array in the JSON data but got " + data['statements']);
            }
            // validate the optional field `statements` (array)
            for (const item of data['statements']) {
                Statement.validateJSON(item);
            };
        }
        // validate the optional field `transaction`
        if (data['transaction']) { // data not null
          TransactionSelector.validateJSON(data['transaction']);
        }

        return true;
    }


}



/**
 * @member {module:model/RequestOptions} requestOptions
 */
ExecuteBatchDmlRequest.prototype['requestOptions'] = undefined;

/**
 * Required. A per-transaction sequence number used to identify this request. This field makes each request idempotent such that if the request is received multiple times, at most one will succeed. The sequence number must be monotonically increasing within the transaction. If a request arrives for the first time with an out-of-order sequence number, the transaction may be aborted. Replays of previously handled requests will yield the same response as the first execution.
 * @member {String} seqno
 */
ExecuteBatchDmlRequest.prototype['seqno'] = undefined;

/**
 * Required. The list of statements to execute in this batch. Statements are executed serially, such that the effects of statement `i` are visible to statement `i+1`. Each statement must be a DML statement. Execution stops at the first failed statement; the remaining statements are not executed. Callers must provide at least one statement.
 * @member {Array.<module:model/Statement>} statements
 */
ExecuteBatchDmlRequest.prototype['statements'] = undefined;

/**
 * @member {module:model/TransactionSelector} transaction
 */
ExecuteBatchDmlRequest.prototype['transaction'] = undefined;






export default ExecuteBatchDmlRequest;

