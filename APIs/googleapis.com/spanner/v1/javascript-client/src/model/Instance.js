/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoscalingConfig from './AutoscalingConfig';
import FreeInstanceMetadata from './FreeInstanceMetadata';

/**
 * The Instance model module.
 * @module model/Instance
 * @version v1
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * An isolated set of Cloud Spanner resources on which databases can be hosted.
     * @alias module:model/Instance
     */
    constructor() { 
        
        Instance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('autoscalingConfig')) {
                obj['autoscalingConfig'] = AutoscalingConfig.constructFromObject(data['autoscalingConfig']);
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('endpointUris')) {
                obj['endpointUris'] = ApiClient.convertToType(data['endpointUris'], ['String']);
            }
            if (data.hasOwnProperty('freeInstanceMetadata')) {
                obj['freeInstanceMetadata'] = FreeInstanceMetadata.constructFromObject(data['freeInstanceMetadata']);
            }
            if (data.hasOwnProperty('instanceType')) {
                obj['instanceType'] = ApiClient.convertToType(data['instanceType'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nodeCount')) {
                obj['nodeCount'] = ApiClient.convertToType(data['nodeCount'], 'Number');
            }
            if (data.hasOwnProperty('processingUnits')) {
                obj['processingUnits'] = ApiClient.convertToType(data['processingUnits'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        // validate the optional field `autoscalingConfig`
        if (data['autoscalingConfig']) { // data not null
          AutoscalingConfig.validateJSON(data['autoscalingConfig']);
        }
        // ensure the json data is a string
        if (data['config'] && !(typeof data['config'] === 'string' || data['config'] instanceof String)) {
            throw new Error("Expected the field `config` to be a primitive type in the JSON string but got " + data['config']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['endpointUris'])) {
            throw new Error("Expected the field `endpointUris` to be an array in the JSON data but got " + data['endpointUris']);
        }
        // validate the optional field `freeInstanceMetadata`
        if (data['freeInstanceMetadata']) { // data not null
          FreeInstanceMetadata.validateJSON(data['freeInstanceMetadata']);
        }
        // ensure the json data is a string
        if (data['instanceType'] && !(typeof data['instanceType'] === 'string' || data['instanceType'] instanceof String)) {
            throw new Error("Expected the field `instanceType` to be a primitive type in the JSON string but got " + data['instanceType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/AutoscalingConfig} autoscalingConfig
 */
Instance.prototype['autoscalingConfig'] = undefined;

/**
 * Required. The name of the instance's configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.
 * @member {String} config
 */
Instance.prototype['config'] = undefined;

/**
 * Output only. The time at which the instance was created.
 * @member {String} createTime
 */
Instance.prototype['createTime'] = undefined;

/**
 * Required. The descriptive name for this instance as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.
 * @member {String} displayName
 */
Instance.prototype['displayName'] = undefined;

/**
 * Deprecated. This field is not populated.
 * @member {Array.<String>} endpointUris
 */
Instance.prototype['endpointUris'] = undefined;

/**
 * @member {module:model/FreeInstanceMetadata} freeInstanceMetadata
 */
Instance.prototype['freeInstanceMetadata'] = undefined;

/**
 * The `InstanceType` of the current instance.
 * @member {module:model/Instance.InstanceTypeEnum} instanceType
 */
Instance.prototype['instanceType'] = undefined;

/**
 * Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. And so you are advised to use an internal label representation, such as JSON, which doesn't rely upon specific characters being disallowed. For example, representing labels as the string: name + \"_\" + value would prove problematic if we were to allow \"_\" in a future release.
 * @member {Object.<String, String>} labels
 */
Instance.prototype['labels'] = undefined;

/**
 * Required. A unique identifier for the instance, which cannot be changed after the instance is created. Values are of the form `projects//instances/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length.
 * @member {String} name
 */
Instance.prototype['name'] = undefined;

/**
 * The number of nodes allocated to this instance. At most one of either node_count or processing_units should be present in the message. Users can set the node_count field to specify the target number of nodes allocated to the instance. This may be zero in API responses for instances that are not yet in state `READY`. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.
 * @member {Number} nodeCount
 */
Instance.prototype['nodeCount'] = undefined;

/**
 * The number of processing units allocated to this instance. At most one of processing_units or node_count should be present in the message. Users can set the processing_units field to specify the target number of processing units allocated to the instance. This may be zero in API responses for instances that are not yet in state `READY`. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.
 * @member {Number} processingUnits
 */
Instance.prototype['processingUnits'] = undefined;

/**
 * Output only. The current instance state. For CreateInstance, the state must be either omitted or set to `CREATING`. For UpdateInstance, the state must be either omitted or set to `READY`.
 * @member {module:model/Instance.StateEnum} state
 */
Instance.prototype['state'] = undefined;

/**
 * Output only. The time at which the instance was most recently updated.
 * @member {String} updateTime
 */
Instance.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>instanceType</code> property.
 * @enum {String}
 * @readonly
 */
Instance['InstanceTypeEnum'] = {

    /**
     * value: "INSTANCE_TYPE_UNSPECIFIED"
     * @const
     */
    "INSTANCE_TYPE_UNSPECIFIED": "INSTANCE_TYPE_UNSPECIFIED",

    /**
     * value: "PROVISIONED"
     * @const
     */
    "PROVISIONED": "PROVISIONED",

    /**
     * value: "FREE_INSTANCE"
     * @const
     */
    "FREE_INSTANCE": "FREE_INSTANCE"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Instance['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY"
};



export default Instance;

