/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FreeInstanceMetadata model module.
 * @module model/FreeInstanceMetadata
 * @version v1
 */
class FreeInstanceMetadata {
    /**
     * Constructs a new <code>FreeInstanceMetadata</code>.
     * Free instance specific metadata that is kept even after an instance has been upgraded for tracking purposes.
     * @alias module:model/FreeInstanceMetadata
     */
    constructor() { 
        
        FreeInstanceMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FreeInstanceMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FreeInstanceMetadata} obj Optional instance to populate.
     * @return {module:model/FreeInstanceMetadata} The populated <code>FreeInstanceMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FreeInstanceMetadata();

            if (data.hasOwnProperty('expireBehavior')) {
                obj['expireBehavior'] = ApiClient.convertToType(data['expireBehavior'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('upgradeTime')) {
                obj['upgradeTime'] = ApiClient.convertToType(data['upgradeTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FreeInstanceMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FreeInstanceMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['expireBehavior'] && !(typeof data['expireBehavior'] === 'string' || data['expireBehavior'] instanceof String)) {
            throw new Error("Expected the field `expireBehavior` to be a primitive type in the JSON string but got " + data['expireBehavior']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['upgradeTime'] && !(typeof data['upgradeTime'] === 'string' || data['upgradeTime'] instanceof String)) {
            throw new Error("Expected the field `upgradeTime` to be a primitive type in the JSON string but got " + data['upgradeTime']);
        }

        return true;
    }


}



/**
 * Specifies the expiration behavior of a free instance. The default of ExpireBehavior is `REMOVE_AFTER_GRACE_PERIOD`. This can be modified during or after creation, and before expiration.
 * @member {module:model/FreeInstanceMetadata.ExpireBehaviorEnum} expireBehavior
 */
FreeInstanceMetadata.prototype['expireBehavior'] = undefined;

/**
 * Output only. Timestamp after which the instance will either be upgraded or scheduled for deletion after a grace period. ExpireBehavior is used to choose between upgrading or scheduling the free instance for deletion. This timestamp is set during the creation of a free instance.
 * @member {String} expireTime
 */
FreeInstanceMetadata.prototype['expireTime'] = undefined;

/**
 * Output only. If present, the timestamp at which the free instance was upgraded to a provisioned instance.
 * @member {String} upgradeTime
 */
FreeInstanceMetadata.prototype['upgradeTime'] = undefined;





/**
 * Allowed values for the <code>expireBehavior</code> property.
 * @enum {String}
 * @readonly
 */
FreeInstanceMetadata['ExpireBehaviorEnum'] = {

    /**
     * value: "EXPIRE_BEHAVIOR_UNSPECIFIED"
     * @const
     */
    "EXPIRE_BEHAVIOR_UNSPECIFIED": "EXPIRE_BEHAVIOR_UNSPECIFIED",

    /**
     * value: "FREE_TO_PROVISIONED"
     * @const
     */
    "FREE_TO_PROVISIONED": "FREE_TO_PROVISIONED",

    /**
     * value: "REMOVE_AFTER_GRACE_PERIOD"
     * @const
     */
    "REMOVE_AFTER_GRACE_PERIOD": "REMOVE_AFTER_GRACE_PERIOD"
};



export default FreeInstanceMetadata;

