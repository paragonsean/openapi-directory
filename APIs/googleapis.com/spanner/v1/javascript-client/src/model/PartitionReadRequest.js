/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeySet from './KeySet';
import PartitionOptions from './PartitionOptions';
import TransactionSelector from './TransactionSelector';

/**
 * The PartitionReadRequest model module.
 * @module model/PartitionReadRequest
 * @version v1
 */
class PartitionReadRequest {
    /**
     * Constructs a new <code>PartitionReadRequest</code>.
     * The request for PartitionRead
     * @alias module:model/PartitionReadRequest
     */
    constructor() { 
        
        PartitionReadRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PartitionReadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartitionReadRequest} obj Optional instance to populate.
     * @return {module:model/PartitionReadRequest} The populated <code>PartitionReadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartitionReadRequest();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], ['String']);
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'String');
            }
            if (data.hasOwnProperty('keySet')) {
                obj['keySet'] = KeySet.constructFromObject(data['keySet']);
            }
            if (data.hasOwnProperty('partitionOptions')) {
                obj['partitionOptions'] = PartitionOptions.constructFromObject(data['partitionOptions']);
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = ApiClient.convertToType(data['table'], 'String');
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = TransactionSelector.constructFromObject(data['transaction']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartitionReadRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartitionReadRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['columns'])) {
            throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
        }
        // ensure the json data is a string
        if (data['index'] && !(typeof data['index'] === 'string' || data['index'] instanceof String)) {
            throw new Error("Expected the field `index` to be a primitive type in the JSON string but got " + data['index']);
        }
        // validate the optional field `keySet`
        if (data['keySet']) { // data not null
          KeySet.validateJSON(data['keySet']);
        }
        // validate the optional field `partitionOptions`
        if (data['partitionOptions']) { // data not null
          PartitionOptions.validateJSON(data['partitionOptions']);
        }
        // ensure the json data is a string
        if (data['table'] && !(typeof data['table'] === 'string' || data['table'] instanceof String)) {
            throw new Error("Expected the field `table` to be a primitive type in the JSON string but got " + data['table']);
        }
        // validate the optional field `transaction`
        if (data['transaction']) { // data not null
          TransactionSelector.validateJSON(data['transaction']);
        }

        return true;
    }


}



/**
 * The columns of table to be returned for each row matching this request.
 * @member {Array.<String>} columns
 */
PartitionReadRequest.prototype['columns'] = undefined;

/**
 * If non-empty, the name of an index on table. This index is used instead of the table primary key when interpreting key_set and sorting result rows. See key_set for further information.
 * @member {String} index
 */
PartitionReadRequest.prototype['index'] = undefined;

/**
 * @member {module:model/KeySet} keySet
 */
PartitionReadRequest.prototype['keySet'] = undefined;

/**
 * @member {module:model/PartitionOptions} partitionOptions
 */
PartitionReadRequest.prototype['partitionOptions'] = undefined;

/**
 * Required. The name of the table in the database to be read.
 * @member {String} table
 */
PartitionReadRequest.prototype['table'] = undefined;

/**
 * @member {module:model/TransactionSelector} transaction
 */
PartitionReadRequest.prototype['transaction'] = undefined;






export default PartitionReadRequest;

