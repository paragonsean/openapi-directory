/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PartitionOptions from './PartitionOptions';
import TransactionSelector from './TransactionSelector';
import Type from './Type';

/**
 * The PartitionQueryRequest model module.
 * @module model/PartitionQueryRequest
 * @version v1
 */
class PartitionQueryRequest {
    /**
     * Constructs a new <code>PartitionQueryRequest</code>.
     * The request for PartitionQuery
     * @alias module:model/PartitionQueryRequest
     */
    constructor() { 
        
        PartitionQueryRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PartitionQueryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartitionQueryRequest} obj Optional instance to populate.
     * @return {module:model/PartitionQueryRequest} The populated <code>PartitionQueryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartitionQueryRequest();

            if (data.hasOwnProperty('paramTypes')) {
                obj['paramTypes'] = ApiClient.convertToType(data['paramTypes'], {'String': Type});
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], {'String': Object});
            }
            if (data.hasOwnProperty('partitionOptions')) {
                obj['partitionOptions'] = PartitionOptions.constructFromObject(data['partitionOptions']);
            }
            if (data.hasOwnProperty('sql')) {
                obj['sql'] = ApiClient.convertToType(data['sql'], 'String');
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = TransactionSelector.constructFromObject(data['transaction']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartitionQueryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartitionQueryRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `partitionOptions`
        if (data['partitionOptions']) { // data not null
          PartitionOptions.validateJSON(data['partitionOptions']);
        }
        // ensure the json data is a string
        if (data['sql'] && !(typeof data['sql'] === 'string' || data['sql'] instanceof String)) {
            throw new Error("Expected the field `sql` to be a primitive type in the JSON string but got " + data['sql']);
        }
        // validate the optional field `transaction`
        if (data['transaction']) { // data not null
          TransactionSelector.validateJSON(data['transaction']);
        }

        return true;
    }


}



/**
 * It is not always possible for Cloud Spanner to infer the right SQL type from a JSON value. For example, values of type `BYTES` and values of type `STRING` both appear in params as JSON strings. In these cases, `param_types` can be used to specify the exact SQL type for some or all of the SQL query parameters. See the definition of Type for more information about SQL types.
 * @member {Object.<String, module:model/Type>} paramTypes
 */
PartitionQueryRequest.prototype['paramTypes'] = undefined;

/**
 * Parameter names and values that bind to placeholders in the SQL string. A parameter placeholder consists of the `@` character followed by the parameter name (for example, `@firstName`). Parameter names can contain letters, numbers, and underscores. Parameters can appear anywhere that a literal value is expected. The same parameter name can be used more than once, for example: `\"WHERE id > @msg_id AND id < @msg_id + 100\"` It is an error to execute a SQL statement with unbound parameters.
 * @member {Object.<String, Object>} params
 */
PartitionQueryRequest.prototype['params'] = undefined;

/**
 * @member {module:model/PartitionOptions} partitionOptions
 */
PartitionQueryRequest.prototype['partitionOptions'] = undefined;

/**
 * Required. The query request to generate partitions for. The request will fail if the query is not root partitionable. For a query to be root partitionable, it needs to satisfy a few conditions. For example, if the query execution plan contains a distributed union operator, then it must be the first operator in the plan. For more information about other conditions, see [Read data in parallel](https://cloud.google.com/spanner/docs/reads#read_data_in_parallel). The query request must not contain DML commands, such as INSERT, UPDATE, or DELETE. Use ExecuteStreamingSql with a PartitionedDml transaction for large, partition-friendly DML operations.
 * @member {String} sql
 */
PartitionQueryRequest.prototype['sql'] = undefined;

/**
 * @member {module:model/TransactionSelector} transaction
 */
PartitionQueryRequest.prototype['transaction'] = undefined;






export default PartitionQueryRequest;

