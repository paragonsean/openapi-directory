/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QueryOptions model module.
 * @module model/QueryOptions
 * @version v1
 */
class QueryOptions {
    /**
     * Constructs a new <code>QueryOptions</code>.
     * Query optimizer configuration.
     * @alias module:model/QueryOptions
     */
    constructor() { 
        
        QueryOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryOptions} obj Optional instance to populate.
     * @return {module:model/QueryOptions} The populated <code>QueryOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryOptions();

            if (data.hasOwnProperty('optimizerStatisticsPackage')) {
                obj['optimizerStatisticsPackage'] = ApiClient.convertToType(data['optimizerStatisticsPackage'], 'String');
            }
            if (data.hasOwnProperty('optimizerVersion')) {
                obj['optimizerVersion'] = ApiClient.convertToType(data['optimizerVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['optimizerStatisticsPackage'] && !(typeof data['optimizerStatisticsPackage'] === 'string' || data['optimizerStatisticsPackage'] instanceof String)) {
            throw new Error("Expected the field `optimizerStatisticsPackage` to be a primitive type in the JSON string but got " + data['optimizerStatisticsPackage']);
        }
        // ensure the json data is a string
        if (data['optimizerVersion'] && !(typeof data['optimizerVersion'] === 'string' || data['optimizerVersion'] instanceof String)) {
            throw new Error("Expected the field `optimizerVersion` to be a primitive type in the JSON string but got " + data['optimizerVersion']);
        }

        return true;
    }


}



/**
 * An option to control the selection of optimizer statistics package. This parameter allows individual queries to use a different query optimizer statistics package. Specifying `latest` as a value instructs Cloud Spanner to use the latest generated statistics package. If not specified, Cloud Spanner uses the statistics package set at the database level options, or the latest package if the database option is not set. The statistics package requested by the query has to be exempt from garbage collection. This can be achieved with the following DDL statement: ``` ALTER STATISTICS SET OPTIONS (allow_gc=false) ``` The list of available statistics packages can be queried from `INFORMATION_SCHEMA.SPANNER_STATISTICS`. Executing a SQL statement with an invalid optimizer statistics package or with a statistics package that allows garbage collection fails with an `INVALID_ARGUMENT` error.
 * @member {String} optimizerStatisticsPackage
 */
QueryOptions.prototype['optimizerStatisticsPackage'] = undefined;

/**
 * An option to control the selection of optimizer version. This parameter allows individual queries to pick different query optimizer versions. Specifying `latest` as a value instructs Cloud Spanner to use the latest supported query optimizer version. If not specified, Cloud Spanner uses the optimizer version set at the database level options. Any other positive integer (from the list of supported optimizer versions) overrides the default optimizer version for query execution. The list of supported optimizer versions can be queried from SPANNER_SYS.SUPPORTED_OPTIMIZER_VERSIONS. Executing a SQL statement with an invalid optimizer version fails with an `INVALID_ARGUMENT` error. See https://cloud.google.com/spanner/docs/query-optimizer/manage-query-optimizer for more information on managing the query optimizer. The `optimizer_version` statement hint has precedence over this setting.
 * @member {String} optimizerVersion
 */
QueryOptions.prototype['optimizerVersion'] = undefined;






export default QueryOptions;

