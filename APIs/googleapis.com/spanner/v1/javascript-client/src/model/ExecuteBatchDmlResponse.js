/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResultSet from './ResultSet';
import Status from './Status';

/**
 * The ExecuteBatchDmlResponse model module.
 * @module model/ExecuteBatchDmlResponse
 * @version v1
 */
class ExecuteBatchDmlResponse {
    /**
     * Constructs a new <code>ExecuteBatchDmlResponse</code>.
     * The response for ExecuteBatchDml. Contains a list of ResultSet messages, one for each DML statement that has successfully executed, in the same order as the statements in the request. If a statement fails, the status in the response body identifies the cause of the failure. To check for DML statements that failed, use the following approach: 1. Check the status in the response message. The google.rpc.Code enum value &#x60;OK&#x60; indicates that all statements were executed successfully. 2. If the status was not &#x60;OK&#x60;, check the number of result sets in the response. If the response contains &#x60;N&#x60; ResultSet messages, then statement &#x60;N+1&#x60; in the request failed. Example 1: * Request: 5 DML statements, all executed successfully. * Response: 5 ResultSet messages, with the status &#x60;OK&#x60;. Example 2: * Request: 5 DML statements. The third statement has a syntax error. * Response: 2 ResultSet messages, and a syntax error (&#x60;INVALID_ARGUMENT&#x60;) status. The number of ResultSet messages indicates that the third statement failed, and the fourth and fifth statements were not executed.
     * @alias module:model/ExecuteBatchDmlResponse
     */
    constructor() { 
        
        ExecuteBatchDmlResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExecuteBatchDmlResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecuteBatchDmlResponse} obj Optional instance to populate.
     * @return {module:model/ExecuteBatchDmlResponse} The populated <code>ExecuteBatchDmlResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecuteBatchDmlResponse();

            if (data.hasOwnProperty('resultSets')) {
                obj['resultSets'] = ApiClient.convertToType(data['resultSets'], [ResultSet]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecuteBatchDmlResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecuteBatchDmlResponse</code>.
     */
    static validateJSON(data) {
        if (data['resultSets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resultSets'])) {
                throw new Error("Expected the field `resultSets` to be an array in the JSON data but got " + data['resultSets']);
            }
            // validate the optional field `resultSets` (array)
            for (const item of data['resultSets']) {
                ResultSet.validateJSON(item);
            };
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * One ResultSet for each statement in the request that ran successfully, in the same order as the statements in the request. Each ResultSet does not contain any rows. The ResultSetStats in each ResultSet contain the number of rows modified by the statement. Only the first ResultSet in the response contains valid ResultSetMetadata.
 * @member {Array.<module:model/ResultSet>} resultSets
 */
ExecuteBatchDmlResponse.prototype['resultSets'] = undefined;

/**
 * @member {module:model/Status} status
 */
ExecuteBatchDmlResponse.prototype['status'] = undefined;






export default ExecuteBatchDmlResponse;

