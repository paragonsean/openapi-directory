/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Mutation from './Mutation';
import RequestOptions from './RequestOptions';
import TransactionOptions from './TransactionOptions';

/**
 * The CommitRequest model module.
 * @module model/CommitRequest
 * @version v1
 */
class CommitRequest {
    /**
     * Constructs a new <code>CommitRequest</code>.
     * The request for Commit.
     * @alias module:model/CommitRequest
     */
    constructor() { 
        
        CommitRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommitRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitRequest} obj Optional instance to populate.
     * @return {module:model/CommitRequest} The populated <code>CommitRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitRequest();

            if (data.hasOwnProperty('maxCommitDelay')) {
                obj['maxCommitDelay'] = ApiClient.convertToType(data['maxCommitDelay'], 'String');
            }
            if (data.hasOwnProperty('mutations')) {
                obj['mutations'] = ApiClient.convertToType(data['mutations'], [Mutation]);
            }
            if (data.hasOwnProperty('requestOptions')) {
                obj['requestOptions'] = RequestOptions.constructFromObject(data['requestOptions']);
            }
            if (data.hasOwnProperty('returnCommitStats')) {
                obj['returnCommitStats'] = ApiClient.convertToType(data['returnCommitStats'], 'Boolean');
            }
            if (data.hasOwnProperty('singleUseTransaction')) {
                obj['singleUseTransaction'] = TransactionOptions.constructFromObject(data['singleUseTransaction']);
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['maxCommitDelay'] && !(typeof data['maxCommitDelay'] === 'string' || data['maxCommitDelay'] instanceof String)) {
            throw new Error("Expected the field `maxCommitDelay` to be a primitive type in the JSON string but got " + data['maxCommitDelay']);
        }
        if (data['mutations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mutations'])) {
                throw new Error("Expected the field `mutations` to be an array in the JSON data but got " + data['mutations']);
            }
            // validate the optional field `mutations` (array)
            for (const item of data['mutations']) {
                Mutation.validateJSON(item);
            };
        }
        // validate the optional field `requestOptions`
        if (data['requestOptions']) { // data not null
          RequestOptions.validateJSON(data['requestOptions']);
        }
        // validate the optional field `singleUseTransaction`
        if (data['singleUseTransaction']) { // data not null
          TransactionOptions.validateJSON(data['singleUseTransaction']);
        }

        return true;
    }


}



/**
 * Optional. The amount of latency this request is willing to incur in order to improve throughput. If this field is not set, Spanner assumes requests are relatively latency sensitive and automatically determines an appropriate delay time. You can specify a batching delay value between 0 and 500 ms.
 * @member {String} maxCommitDelay
 */
CommitRequest.prototype['maxCommitDelay'] = undefined;

/**
 * The mutations to be executed when this transaction commits. All mutations are applied atomically, in the order they appear in this list.
 * @member {Array.<module:model/Mutation>} mutations
 */
CommitRequest.prototype['mutations'] = undefined;

/**
 * @member {module:model/RequestOptions} requestOptions
 */
CommitRequest.prototype['requestOptions'] = undefined;

/**
 * If `true`, then statistics related to the transaction will be included in the CommitResponse. Default value is `false`.
 * @member {Boolean} returnCommitStats
 */
CommitRequest.prototype['returnCommitStats'] = undefined;

/**
 * @member {module:model/TransactionOptions} singleUseTransaction
 */
CommitRequest.prototype['singleUseTransaction'] = undefined;

/**
 * Commit a previously-started transaction.
 * @member {Blob} transactionId
 */
CommitRequest.prototype['transactionId'] = undefined;






export default CommitRequest;

