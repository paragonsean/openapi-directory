/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiagnosticMessage from './DiagnosticMessage';
import Metric from './Metric';
import PrefixNode from './PrefixNode';

/**
 * The VisualizationData model module.
 * @module model/VisualizationData
 * @version v1
 */
class VisualizationData {
    /**
     * Constructs a new <code>VisualizationData</code>.
     * @alias module:model/VisualizationData
     */
    constructor() { 
        
        VisualizationData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VisualizationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VisualizationData} obj Optional instance to populate.
     * @return {module:model/VisualizationData} The populated <code>VisualizationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VisualizationData();

            if (data.hasOwnProperty('dataSourceEndToken')) {
                obj['dataSourceEndToken'] = ApiClient.convertToType(data['dataSourceEndToken'], 'String');
            }
            if (data.hasOwnProperty('dataSourceSeparatorToken')) {
                obj['dataSourceSeparatorToken'] = ApiClient.convertToType(data['dataSourceSeparatorToken'], 'String');
            }
            if (data.hasOwnProperty('diagnosticMessages')) {
                obj['diagnosticMessages'] = ApiClient.convertToType(data['diagnosticMessages'], [DiagnosticMessage]);
            }
            if (data.hasOwnProperty('endKeyStrings')) {
                obj['endKeyStrings'] = ApiClient.convertToType(data['endKeyStrings'], ['String']);
            }
            if (data.hasOwnProperty('hasPii')) {
                obj['hasPii'] = ApiClient.convertToType(data['hasPii'], 'Boolean');
            }
            if (data.hasOwnProperty('indexedKeys')) {
                obj['indexedKeys'] = ApiClient.convertToType(data['indexedKeys'], ['String']);
            }
            if (data.hasOwnProperty('keySeparator')) {
                obj['keySeparator'] = ApiClient.convertToType(data['keySeparator'], 'String');
            }
            if (data.hasOwnProperty('keyUnit')) {
                obj['keyUnit'] = ApiClient.convertToType(data['keyUnit'], 'String');
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [Metric]);
            }
            if (data.hasOwnProperty('prefixNodes')) {
                obj['prefixNodes'] = ApiClient.convertToType(data['prefixNodes'], [PrefixNode]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VisualizationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VisualizationData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataSourceEndToken'] && !(typeof data['dataSourceEndToken'] === 'string' || data['dataSourceEndToken'] instanceof String)) {
            throw new Error("Expected the field `dataSourceEndToken` to be a primitive type in the JSON string but got " + data['dataSourceEndToken']);
        }
        // ensure the json data is a string
        if (data['dataSourceSeparatorToken'] && !(typeof data['dataSourceSeparatorToken'] === 'string' || data['dataSourceSeparatorToken'] instanceof String)) {
            throw new Error("Expected the field `dataSourceSeparatorToken` to be a primitive type in the JSON string but got " + data['dataSourceSeparatorToken']);
        }
        if (data['diagnosticMessages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['diagnosticMessages'])) {
                throw new Error("Expected the field `diagnosticMessages` to be an array in the JSON data but got " + data['diagnosticMessages']);
            }
            // validate the optional field `diagnosticMessages` (array)
            for (const item of data['diagnosticMessages']) {
                DiagnosticMessage.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['endKeyStrings'])) {
            throw new Error("Expected the field `endKeyStrings` to be an array in the JSON data but got " + data['endKeyStrings']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['indexedKeys'])) {
            throw new Error("Expected the field `indexedKeys` to be an array in the JSON data but got " + data['indexedKeys']);
        }
        // ensure the json data is a string
        if (data['keySeparator'] && !(typeof data['keySeparator'] === 'string' || data['keySeparator'] instanceof String)) {
            throw new Error("Expected the field `keySeparator` to be a primitive type in the JSON string but got " + data['keySeparator']);
        }
        // ensure the json data is a string
        if (data['keyUnit'] && !(typeof data['keyUnit'] === 'string' || data['keyUnit'] instanceof String)) {
            throw new Error("Expected the field `keyUnit` to be a primitive type in the JSON string but got " + data['keyUnit']);
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                Metric.validateJSON(item);
            };
        }
        if (data['prefixNodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['prefixNodes'])) {
                throw new Error("Expected the field `prefixNodes` to be an array in the JSON data but got " + data['prefixNodes']);
            }
            // validate the optional field `prefixNodes` (array)
            for (const item of data['prefixNodes']) {
                PrefixNode.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The token signifying the end of a data_source.
 * @member {String} dataSourceEndToken
 */
VisualizationData.prototype['dataSourceEndToken'] = undefined;

/**
 * The token delimiting a datasource name from the rest of a key in a data_source.
 * @member {String} dataSourceSeparatorToken
 */
VisualizationData.prototype['dataSourceSeparatorToken'] = undefined;

/**
 * The list of messages (info, alerts, ...)
 * @member {Array.<module:model/DiagnosticMessage>} diagnosticMessages
 */
VisualizationData.prototype['diagnosticMessages'] = undefined;

/**
 * We discretize the entire keyspace into buckets. Assuming each bucket has an inclusive keyrange and covers keys from k(i) ... k(n). In this case k(n) would be an end key for a given range. end_key_string is the collection of all such end keys
 * @member {Array.<String>} endKeyStrings
 */
VisualizationData.prototype['endKeyStrings'] = undefined;

/**
 * Whether this scan contains PII.
 * @member {Boolean} hasPii
 */
VisualizationData.prototype['hasPii'] = undefined;

/**
 * Keys of key ranges that contribute significantly to a given metric Can be thought of as heavy hitters.
 * @member {Array.<String>} indexedKeys
 */
VisualizationData.prototype['indexedKeys'] = undefined;

/**
 * The token delimiting the key prefixes.
 * @member {String} keySeparator
 */
VisualizationData.prototype['keySeparator'] = undefined;

/**
 * The unit for the key: e.g. 'key' or 'chunk'.
 * @member {module:model/VisualizationData.KeyUnitEnum} keyUnit
 */
VisualizationData.prototype['keyUnit'] = undefined;

/**
 * The list of data objects for each metric.
 * @member {Array.<module:model/Metric>} metrics
 */
VisualizationData.prototype['metrics'] = undefined;

/**
 * The list of extracted key prefix nodes used in the key prefix hierarchy.
 * @member {Array.<module:model/PrefixNode>} prefixNodes
 */
VisualizationData.prototype['prefixNodes'] = undefined;





/**
 * Allowed values for the <code>keyUnit</code> property.
 * @enum {String}
 * @readonly
 */
VisualizationData['KeyUnitEnum'] = {

    /**
     * value: "KEY_UNIT_UNSPECIFIED"
     * @const
     */
    "KEY_UNIT_UNSPECIFIED": "KEY_UNIT_UNSPECIFIED",

    /**
     * value: "KEY"
     * @const
     */
    "KEY": "KEY",

    /**
     * value: "CHUNK"
     * @const
     */
    "CHUNK": "CHUNK"
};



export default VisualizationData;

