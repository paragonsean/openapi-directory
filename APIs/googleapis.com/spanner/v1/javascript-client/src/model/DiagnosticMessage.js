/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalizedString from './LocalizedString';

/**
 * The DiagnosticMessage model module.
 * @module model/DiagnosticMessage
 * @version v1
 */
class DiagnosticMessage {
    /**
     * Constructs a new <code>DiagnosticMessage</code>.
     * A message representing the key visualizer diagnostic messages.
     * @alias module:model/DiagnosticMessage
     */
    constructor() { 
        
        DiagnosticMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiagnosticMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosticMessage} obj Optional instance to populate.
     * @return {module:model/DiagnosticMessage} The populated <code>DiagnosticMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosticMessage();

            if (data.hasOwnProperty('info')) {
                obj['info'] = LocalizedString.constructFromObject(data['info']);
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = LocalizedString.constructFromObject(data['metric']);
            }
            if (data.hasOwnProperty('metricSpecific')) {
                obj['metricSpecific'] = ApiClient.convertToType(data['metricSpecific'], 'Boolean');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('shortMessage')) {
                obj['shortMessage'] = LocalizedString.constructFromObject(data['shortMessage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosticMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosticMessage</code>.
     */
    static validateJSON(data) {
        // validate the optional field `info`
        if (data['info']) { // data not null
          LocalizedString.validateJSON(data['info']);
        }
        // validate the optional field `metric`
        if (data['metric']) { // data not null
          LocalizedString.validateJSON(data['metric']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // validate the optional field `shortMessage`
        if (data['shortMessage']) { // data not null
          LocalizedString.validateJSON(data['shortMessage']);
        }

        return true;
    }


}



/**
 * @member {module:model/LocalizedString} info
 */
DiagnosticMessage.prototype['info'] = undefined;

/**
 * @member {module:model/LocalizedString} metric
 */
DiagnosticMessage.prototype['metric'] = undefined;

/**
 * Whether this message is specific only for the current metric. By default Diagnostics are shown for all metrics, regardless which metric is the currently selected metric in the UI. However occasionally a metric will generate so many messages that the resulting visual clutter becomes overwhelming. In this case setting this to true, will show the diagnostic messages for that metric only if it is the currently selected metric.
 * @member {Boolean} metricSpecific
 */
DiagnosticMessage.prototype['metricSpecific'] = undefined;

/**
 * The severity of the diagnostic message.
 * @member {module:model/DiagnosticMessage.SeverityEnum} severity
 */
DiagnosticMessage.prototype['severity'] = undefined;

/**
 * @member {module:model/LocalizedString} shortMessage
 */
DiagnosticMessage.prototype['shortMessage'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
DiagnosticMessage['SeverityEnum'] = {

    /**
     * value: "SEVERITY_UNSPECIFIED"
     * @const
     */
    "SEVERITY_UNSPECIFIED": "SEVERITY_UNSPECIFIED",

    /**
     * value: "INFO"
     * @const
     */
    "INFO": "INFO",

    /**
     * value: "WARNING"
     * @const
     */
    "WARNING": "WARNING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "FATAL"
     * @const
     */
    "FATAL": "FATAL"
};



export default DiagnosticMessage;

