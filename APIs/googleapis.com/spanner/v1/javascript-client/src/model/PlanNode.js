/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChildLink from './ChildLink';
import ShortRepresentation from './ShortRepresentation';

/**
 * The PlanNode model module.
 * @module model/PlanNode
 * @version v1
 */
class PlanNode {
    /**
     * Constructs a new <code>PlanNode</code>.
     * Node information for nodes appearing in a QueryPlan.plan_nodes.
     * @alias module:model/PlanNode
     */
    constructor() { 
        
        PlanNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlanNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlanNode} obj Optional instance to populate.
     * @return {module:model/PlanNode} The populated <code>PlanNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlanNode();

            if (data.hasOwnProperty('childLinks')) {
                obj['childLinks'] = ApiClient.convertToType(data['childLinks'], [ChildLink]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('executionStats')) {
                obj['executionStats'] = ApiClient.convertToType(data['executionStats'], {'String': Object});
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('shortRepresentation')) {
                obj['shortRepresentation'] = ShortRepresentation.constructFromObject(data['shortRepresentation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlanNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlanNode</code>.
     */
    static validateJSON(data) {
        if (data['childLinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['childLinks'])) {
                throw new Error("Expected the field `childLinks` to be an array in the JSON data but got " + data['childLinks']);
            }
            // validate the optional field `childLinks` (array)
            for (const item of data['childLinks']) {
                ChildLink.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `shortRepresentation`
        if (data['shortRepresentation']) { // data not null
          ShortRepresentation.validateJSON(data['shortRepresentation']);
        }

        return true;
    }


}



/**
 * List of child node `index`es and their relationship to this parent.
 * @member {Array.<module:model/ChildLink>} childLinks
 */
PlanNode.prototype['childLinks'] = undefined;

/**
 * The display name for the node.
 * @member {String} displayName
 */
PlanNode.prototype['displayName'] = undefined;

/**
 * The execution statistics associated with the node, contained in a group of key-value pairs. Only present if the plan was returned as a result of a profile query. For example, number of executions, number of rows/time per execution etc.
 * @member {Object.<String, Object>} executionStats
 */
PlanNode.prototype['executionStats'] = undefined;

/**
 * The `PlanNode`'s index in node list.
 * @member {Number} index
 */
PlanNode.prototype['index'] = undefined;

/**
 * Used to determine the type of node. May be needed for visualizing different kinds of nodes differently. For example, If the node is a SCALAR node, it will have a condensed representation which can be used to directly embed a description of the node in its parent.
 * @member {module:model/PlanNode.KindEnum} kind
 */
PlanNode.prototype['kind'] = undefined;

/**
 * Attributes relevant to the node contained in a group of key-value pairs. For example, a Parameter Reference node could have the following information in its metadata: { \"parameter_reference\": \"param1\", \"parameter_type\": \"array\" }
 * @member {Object.<String, Object>} metadata
 */
PlanNode.prototype['metadata'] = undefined;

/**
 * @member {module:model/ShortRepresentation} shortRepresentation
 */
PlanNode.prototype['shortRepresentation'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
PlanNode['KindEnum'] = {

    /**
     * value: "KIND_UNSPECIFIED"
     * @const
     */
    "KIND_UNSPECIFIED": "KIND_UNSPECIFIED",

    /**
     * value: "RELATIONAL"
     * @const
     */
    "RELATIONAL": "RELATIONAL",

    /**
     * value: "SCALAR"
     * @const
     */
    "SCALAR": "SCALAR"
};



export default PlanNode;

