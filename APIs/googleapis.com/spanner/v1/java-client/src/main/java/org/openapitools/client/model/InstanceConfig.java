/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ReplicaInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A possible configuration for a Cloud Spanner instance. Configurations define the geographic placement of nodes and their replication.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceConfig {
  public static final String SERIALIZED_NAME_BASE_CONFIG = "baseConfig";
  @SerializedName(SERIALIZED_NAME_BASE_CONFIG)
  private String baseConfig;

  /**
   * Output only. Whether this instance config is a Google or User Managed Configuration.
   */
  @JsonAdapter(ConfigTypeEnum.Adapter.class)
  public enum ConfigTypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    GOOGLE_MANAGED("GOOGLE_MANAGED"),
    
    USER_MANAGED("USER_MANAGED");

    private String value;

    ConfigTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfigTypeEnum fromValue(String value) {
      for (ConfigTypeEnum b : ConfigTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfigTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfigTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfigTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfigTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfigTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIG_TYPE = "configType";
  @SerializedName(SERIALIZED_NAME_CONFIG_TYPE)
  private ConfigTypeEnum configType;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  /**
   * Output only. Describes whether free instances are available to be created in this instance config.
   */
  @JsonAdapter(FreeInstanceAvailabilityEnum.Adapter.class)
  public enum FreeInstanceAvailabilityEnum {
    FREE_INSTANCE_AVAILABILITY_UNSPECIFIED("FREE_INSTANCE_AVAILABILITY_UNSPECIFIED"),
    
    AVAILABLE("AVAILABLE"),
    
    UNSUPPORTED("UNSUPPORTED"),
    
    DISABLED("DISABLED"),
    
    QUOTA_EXCEEDED("QUOTA_EXCEEDED");

    private String value;

    FreeInstanceAvailabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreeInstanceAvailabilityEnum fromValue(String value) {
      for (FreeInstanceAvailabilityEnum b : FreeInstanceAvailabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FreeInstanceAvailabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreeInstanceAvailabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreeInstanceAvailabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FreeInstanceAvailabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FreeInstanceAvailabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREE_INSTANCE_AVAILABILITY = "freeInstanceAvailability";
  @SerializedName(SERIALIZED_NAME_FREE_INSTANCE_AVAILABILITY)
  private FreeInstanceAvailabilityEnum freeInstanceAvailability;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LEADER_OPTIONS = "leaderOptions";
  @SerializedName(SERIALIZED_NAME_LEADER_OPTIONS)
  private List<String> leaderOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONAL_REPLICAS = "optionalReplicas";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_REPLICAS)
  private List<ReplicaInfo> optionalReplicas = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  public static final String SERIALIZED_NAME_REPLICAS = "replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  private List<ReplicaInfo> replicas = new ArrayList<>();

  /**
   * Output only. The current instance config state. Applicable only for USER_MANAGED configs.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    READY("READY");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STORAGE_LIMIT_PER_PROCESSING_UNIT = "storageLimitPerProcessingUnit";
  @SerializedName(SERIALIZED_NAME_STORAGE_LIMIT_PER_PROCESSING_UNIT)
  private String storageLimitPerProcessingUnit;

  public InstanceConfig() {
  }

  public InstanceConfig(
     ConfigTypeEnum configType, 
     FreeInstanceAvailabilityEnum freeInstanceAvailability, 
     List<ReplicaInfo> optionalReplicas, 
     Boolean reconciling, 
     StateEnum state, 
     String storageLimitPerProcessingUnit
  ) {
    this();
    this.configType = configType;
    this.freeInstanceAvailability = freeInstanceAvailability;
    this.optionalReplicas = optionalReplicas;
    this.reconciling = reconciling;
    this.state = state;
    this.storageLimitPerProcessingUnit = storageLimitPerProcessingUnit;
  }

  public InstanceConfig baseConfig(String baseConfig) {
    this.baseConfig = baseConfig;
    return this;
  }

  /**
   * Base configuration name, e.g. projects//instanceConfigs/nam3, based on which this configuration is created. Only set for user managed configurations. &#x60;base_config&#x60; must refer to a configuration of type GOOGLE_MANAGED in the same project as this configuration.
   * @return baseConfig
   */
  @javax.annotation.Nullable
  public String getBaseConfig() {
    return baseConfig;
  }

  public void setBaseConfig(String baseConfig) {
    this.baseConfig = baseConfig;
  }


  /**
   * Output only. Whether this instance config is a Google or User Managed Configuration.
   * @return configType
   */
  @javax.annotation.Nullable
  public ConfigTypeEnum getConfigType() {
    return configType;
  }



  public InstanceConfig displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of this instance configuration as it appears in UIs.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public InstanceConfig etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance config from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance config updates in order to avoid race conditions: An etag is returned in the response which contains instance configs, and systems are expected to put that etag in the request to update instance config to ensure that their change will be applied to the same version of the instance config. If no etag is provided in the call to update instance config, then the existing instance config is overwritten blindly.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  /**
   * Output only. Describes whether free instances are available to be created in this instance config.
   * @return freeInstanceAvailability
   */
  @javax.annotation.Nullable
  public FreeInstanceAvailabilityEnum getFreeInstanceAvailability() {
    return freeInstanceAvailability;
  }



  public InstanceConfig labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public InstanceConfig putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer&#39;s organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: &#x60;a-z{0,62}&#x60;. * Label values must be between 0 and 63 characters long and must conform to the regular expression &#x60;[a-z0-9_-]{0,63}&#x60;. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. Therefore, you are advised to use an internal label representation, such as JSON, which doesn&#39;t rely upon specific characters being disallowed. For example, representing labels as the string: name + \&quot;_\&quot; + value would prove problematic if we were to allow \&quot;_\&quot; in a future release.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public InstanceConfig leaderOptions(List<String> leaderOptions) {
    this.leaderOptions = leaderOptions;
    return this;
  }

  public InstanceConfig addLeaderOptionsItem(String leaderOptionsItem) {
    if (this.leaderOptions == null) {
      this.leaderOptions = new ArrayList<>();
    }
    this.leaderOptions.add(leaderOptionsItem);
    return this;
  }

  /**
   * Allowed values of the \&quot;default_leader\&quot; schema option for databases in instances that use this instance configuration.
   * @return leaderOptions
   */
  @javax.annotation.Nullable
  public List<String> getLeaderOptions() {
    return leaderOptions;
  }

  public void setLeaderOptions(List<String> leaderOptions) {
    this.leaderOptions = leaderOptions;
  }


  public InstanceConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A unique identifier for the instance configuration. Values are of the form &#x60;projects//instanceConfigs/a-z*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. The available optional replicas to choose from for user managed configurations. Populated for Google managed configurations.
   * @return optionalReplicas
   */
  @javax.annotation.Nullable
  public List<ReplicaInfo> getOptionalReplicas() {
    return optionalReplicas;
  }



  /**
   * Output only. If true, the instance config is being created or updated. If false, there are no ongoing operations for the instance config.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  public InstanceConfig replicas(List<ReplicaInfo> replicas) {
    this.replicas = replicas;
    return this;
  }

  public InstanceConfig addReplicasItem(ReplicaInfo replicasItem) {
    if (this.replicas == null) {
      this.replicas = new ArrayList<>();
    }
    this.replicas.add(replicasItem);
    return this;
  }

  /**
   * The geographic placement of nodes in this instance configuration and their replication properties.
   * @return replicas
   */
  @javax.annotation.Nullable
  public List<ReplicaInfo> getReplicas() {
    return replicas;
  }

  public void setReplicas(List<ReplicaInfo> replicas) {
    this.replicas = replicas;
  }


  /**
   * Output only. The current instance config state. Applicable only for USER_MANAGED configs.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The storage limit in bytes per processing unit.
   * @return storageLimitPerProcessingUnit
   */
  @javax.annotation.Nullable
  public String getStorageLimitPerProcessingUnit() {
    return storageLimitPerProcessingUnit;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceConfig instanceConfig = (InstanceConfig) o;
    return Objects.equals(this.baseConfig, instanceConfig.baseConfig) &&
        Objects.equals(this.configType, instanceConfig.configType) &&
        Objects.equals(this.displayName, instanceConfig.displayName) &&
        Objects.equals(this.etag, instanceConfig.etag) &&
        Objects.equals(this.freeInstanceAvailability, instanceConfig.freeInstanceAvailability) &&
        Objects.equals(this.labels, instanceConfig.labels) &&
        Objects.equals(this.leaderOptions, instanceConfig.leaderOptions) &&
        Objects.equals(this.name, instanceConfig.name) &&
        Objects.equals(this.optionalReplicas, instanceConfig.optionalReplicas) &&
        Objects.equals(this.reconciling, instanceConfig.reconciling) &&
        Objects.equals(this.replicas, instanceConfig.replicas) &&
        Objects.equals(this.state, instanceConfig.state) &&
        Objects.equals(this.storageLimitPerProcessingUnit, instanceConfig.storageLimitPerProcessingUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseConfig, configType, displayName, etag, freeInstanceAvailability, labels, leaderOptions, name, optionalReplicas, reconciling, replicas, state, storageLimitPerProcessingUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceConfig {\n");
    sb.append("    baseConfig: ").append(toIndentedString(baseConfig)).append("\n");
    sb.append("    configType: ").append(toIndentedString(configType)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    freeInstanceAvailability: ").append(toIndentedString(freeInstanceAvailability)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    leaderOptions: ").append(toIndentedString(leaderOptions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optionalReplicas: ").append(toIndentedString(optionalReplicas)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storageLimitPerProcessingUnit: ").append(toIndentedString(storageLimitPerProcessingUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseConfig");
    openapiFields.add("configType");
    openapiFields.add("displayName");
    openapiFields.add("etag");
    openapiFields.add("freeInstanceAvailability");
    openapiFields.add("labels");
    openapiFields.add("leaderOptions");
    openapiFields.add("name");
    openapiFields.add("optionalReplicas");
    openapiFields.add("reconciling");
    openapiFields.add("replicas");
    openapiFields.add("state");
    openapiFields.add("storageLimitPerProcessingUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceConfig is not found in the empty JSON string", InstanceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseConfig") != null && !jsonObj.get("baseConfig").isJsonNull()) && !jsonObj.get("baseConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseConfig").toString()));
      }
      if ((jsonObj.get("configType") != null && !jsonObj.get("configType").isJsonNull()) && !jsonObj.get("configType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configType").toString()));
      }
      // validate the optional field `configType`
      if (jsonObj.get("configType") != null && !jsonObj.get("configType").isJsonNull()) {
        ConfigTypeEnum.validateJsonElement(jsonObj.get("configType"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("freeInstanceAvailability") != null && !jsonObj.get("freeInstanceAvailability").isJsonNull()) && !jsonObj.get("freeInstanceAvailability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeInstanceAvailability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeInstanceAvailability").toString()));
      }
      // validate the optional field `freeInstanceAvailability`
      if (jsonObj.get("freeInstanceAvailability") != null && !jsonObj.get("freeInstanceAvailability").isJsonNull()) {
        FreeInstanceAvailabilityEnum.validateJsonElement(jsonObj.get("freeInstanceAvailability"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("leaderOptions") != null && !jsonObj.get("leaderOptions").isJsonNull() && !jsonObj.get("leaderOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaderOptions` to be an array in the JSON string but got `%s`", jsonObj.get("leaderOptions").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("optionalReplicas") != null && !jsonObj.get("optionalReplicas").isJsonNull()) {
        JsonArray jsonArrayoptionalReplicas = jsonObj.getAsJsonArray("optionalReplicas");
        if (jsonArrayoptionalReplicas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("optionalReplicas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `optionalReplicas` to be an array in the JSON string but got `%s`", jsonObj.get("optionalReplicas").toString()));
          }

          // validate the optional field `optionalReplicas` (array)
          for (int i = 0; i < jsonArrayoptionalReplicas.size(); i++) {
            ReplicaInfo.validateJsonElement(jsonArrayoptionalReplicas.get(i));
          };
        }
      }
      if (jsonObj.get("replicas") != null && !jsonObj.get("replicas").isJsonNull()) {
        JsonArray jsonArrayreplicas = jsonObj.getAsJsonArray("replicas");
        if (jsonArrayreplicas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("replicas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `replicas` to be an array in the JSON string but got `%s`", jsonObj.get("replicas").toString()));
          }

          // validate the optional field `replicas` (array)
          for (int i = 0; i < jsonArrayreplicas.size(); i++) {
            ReplicaInfo.validateJsonElement(jsonArrayreplicas.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("storageLimitPerProcessingUnit") != null && !jsonObj.get("storageLimitPerProcessingUnit").isJsonNull()) && !jsonObj.get("storageLimitPerProcessingUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageLimitPerProcessingUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageLimitPerProcessingUnit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceConfig>() {
           @Override
           public void write(JsonWriter out, InstanceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceConfig
   * @throws IOException if the JSON string is invalid with respect to InstanceConfig
   */
  public static InstanceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceConfig.class);
  }

  /**
   * Convert an instance of InstanceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

