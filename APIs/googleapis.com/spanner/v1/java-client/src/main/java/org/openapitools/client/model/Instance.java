/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AutoscalingConfig;
import org.openapitools.client.model.FreeInstanceMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An isolated set of Cloud Spanner resources on which databases can be hosted.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Instance {
  public static final String SERIALIZED_NAME_AUTOSCALING_CONFIG = "autoscalingConfig";
  @SerializedName(SERIALIZED_NAME_AUTOSCALING_CONFIG)
  private AutoscalingConfig autoscalingConfig;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private String config;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENDPOINT_URIS = "endpointUris";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_URIS)
  private List<String> endpointUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_FREE_INSTANCE_METADATA = "freeInstanceMetadata";
  @SerializedName(SERIALIZED_NAME_FREE_INSTANCE_METADATA)
  private FreeInstanceMetadata freeInstanceMetadata;

  /**
   * The &#x60;InstanceType&#x60; of the current instance.
   */
  @JsonAdapter(InstanceTypeEnum.Adapter.class)
  public enum InstanceTypeEnum {
    INSTANCE_TYPE_UNSPECIFIED("INSTANCE_TYPE_UNSPECIFIED"),
    
    PROVISIONED("PROVISIONED"),
    
    FREE_INSTANCE("FREE_INSTANCE");

    private String value;

    InstanceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstanceTypeEnum fromValue(String value) {
      for (InstanceTypeEnum b : InstanceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstanceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstanceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstanceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstanceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InstanceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private InstanceTypeEnum instanceType;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_COUNT = "nodeCount";
  @SerializedName(SERIALIZED_NAME_NODE_COUNT)
  private Integer nodeCount;

  public static final String SERIALIZED_NAME_PROCESSING_UNITS = "processingUnits";
  @SerializedName(SERIALIZED_NAME_PROCESSING_UNITS)
  private Integer processingUnits;

  /**
   * Output only. The current instance state. For CreateInstance, the state must be either omitted or set to &#x60;CREATING&#x60;. For UpdateInstance, the state must be either omitted or set to &#x60;READY&#x60;.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    READY("READY");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Instance() {
  }

  public Instance(
     String createTime, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.state = state;
    this.updateTime = updateTime;
  }

  public Instance autoscalingConfig(AutoscalingConfig autoscalingConfig) {
    this.autoscalingConfig = autoscalingConfig;
    return this;
  }

  /**
   * Get autoscalingConfig
   * @return autoscalingConfig
   */
  @javax.annotation.Nullable
  public AutoscalingConfig getAutoscalingConfig() {
    return autoscalingConfig;
  }

  public void setAutoscalingConfig(AutoscalingConfig autoscalingConfig) {
    this.autoscalingConfig = autoscalingConfig;
  }


  public Instance config(String config) {
    this.config = config;
    return this;
  }

  /**
   * Required. The name of the instance&#39;s configuration. Values are of the form &#x60;projects//instanceConfigs/&#x60;. See also InstanceConfig and ListInstanceConfigs.
   * @return config
   */
  @javax.annotation.Nullable
  public String getConfig() {
    return config;
  }

  public void setConfig(String config) {
    this.config = config;
  }


  /**
   * Output only. The time at which the instance was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Instance displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The descriptive name for this instance as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Instance endpointUris(List<String> endpointUris) {
    this.endpointUris = endpointUris;
    return this;
  }

  public Instance addEndpointUrisItem(String endpointUrisItem) {
    if (this.endpointUris == null) {
      this.endpointUris = new ArrayList<>();
    }
    this.endpointUris.add(endpointUrisItem);
    return this;
  }

  /**
   * Deprecated. This field is not populated.
   * @return endpointUris
   */
  @javax.annotation.Nullable
  public List<String> getEndpointUris() {
    return endpointUris;
  }

  public void setEndpointUris(List<String> endpointUris) {
    this.endpointUris = endpointUris;
  }


  public Instance freeInstanceMetadata(FreeInstanceMetadata freeInstanceMetadata) {
    this.freeInstanceMetadata = freeInstanceMetadata;
    return this;
  }

  /**
   * Get freeInstanceMetadata
   * @return freeInstanceMetadata
   */
  @javax.annotation.Nullable
  public FreeInstanceMetadata getFreeInstanceMetadata() {
    return freeInstanceMetadata;
  }

  public void setFreeInstanceMetadata(FreeInstanceMetadata freeInstanceMetadata) {
    this.freeInstanceMetadata = freeInstanceMetadata;
  }


  public Instance instanceType(InstanceTypeEnum instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * The &#x60;InstanceType&#x60; of the current instance.
   * @return instanceType
   */
  @javax.annotation.Nullable
  public InstanceTypeEnum getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(InstanceTypeEnum instanceType) {
    this.instanceType = instanceType;
  }


  public Instance labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Instance putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer&#39;s organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: &#x60;a-z{0,62}&#x60;. * Label values must be between 0 and 63 characters long and must conform to the regular expression &#x60;[a-z0-9_-]{0,63}&#x60;. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. And so you are advised to use an internal label representation, such as JSON, which doesn&#39;t rely upon specific characters being disallowed. For example, representing labels as the string: name + \&quot;_\&quot; + value would prove problematic if we were to allow \&quot;_\&quot; in a future release.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Instance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. A unique identifier for the instance, which cannot be changed after the instance is created. Values are of the form &#x60;projects//instances/a-z*[a-z0-9]&#x60;. The final segment of the name must be between 2 and 64 characters in length.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Instance nodeCount(Integer nodeCount) {
    this.nodeCount = nodeCount;
    return this;
  }

  /**
   * The number of nodes allocated to this instance. At most one of either node_count or processing_units should be present in the message. Users can set the node_count field to specify the target number of nodes allocated to the instance. This may be zero in API responses for instances that are not yet in state &#x60;READY&#x60;. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.
   * @return nodeCount
   */
  @javax.annotation.Nullable
  public Integer getNodeCount() {
    return nodeCount;
  }

  public void setNodeCount(Integer nodeCount) {
    this.nodeCount = nodeCount;
  }


  public Instance processingUnits(Integer processingUnits) {
    this.processingUnits = processingUnits;
    return this;
  }

  /**
   * The number of processing units allocated to this instance. At most one of processing_units or node_count should be present in the message. Users can set the processing_units field to specify the target number of processing units allocated to the instance. This may be zero in API responses for instances that are not yet in state &#x60;READY&#x60;. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.
   * @return processingUnits
   */
  @javax.annotation.Nullable
  public Integer getProcessingUnits() {
    return processingUnits;
  }

  public void setProcessingUnits(Integer processingUnits) {
    this.processingUnits = processingUnits;
  }


  /**
   * Output only. The current instance state. For CreateInstance, the state must be either omitted or set to &#x60;CREATING&#x60;. For UpdateInstance, the state must be either omitted or set to &#x60;READY&#x60;.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The time at which the instance was most recently updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instance instance = (Instance) o;
    return Objects.equals(this.autoscalingConfig, instance.autoscalingConfig) &&
        Objects.equals(this.config, instance.config) &&
        Objects.equals(this.createTime, instance.createTime) &&
        Objects.equals(this.displayName, instance.displayName) &&
        Objects.equals(this.endpointUris, instance.endpointUris) &&
        Objects.equals(this.freeInstanceMetadata, instance.freeInstanceMetadata) &&
        Objects.equals(this.instanceType, instance.instanceType) &&
        Objects.equals(this.labels, instance.labels) &&
        Objects.equals(this.name, instance.name) &&
        Objects.equals(this.nodeCount, instance.nodeCount) &&
        Objects.equals(this.processingUnits, instance.processingUnits) &&
        Objects.equals(this.state, instance.state) &&
        Objects.equals(this.updateTime, instance.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoscalingConfig, config, createTime, displayName, endpointUris, freeInstanceMetadata, instanceType, labels, name, nodeCount, processingUnits, state, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instance {\n");
    sb.append("    autoscalingConfig: ").append(toIndentedString(autoscalingConfig)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    endpointUris: ").append(toIndentedString(endpointUris)).append("\n");
    sb.append("    freeInstanceMetadata: ").append(toIndentedString(freeInstanceMetadata)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeCount: ").append(toIndentedString(nodeCount)).append("\n");
    sb.append("    processingUnits: ").append(toIndentedString(processingUnits)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoscalingConfig");
    openapiFields.add("config");
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("endpointUris");
    openapiFields.add("freeInstanceMetadata");
    openapiFields.add("instanceType");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("nodeCount");
    openapiFields.add("processingUnits");
    openapiFields.add("state");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Instance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Instance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Instance is not found in the empty JSON string", Instance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Instance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Instance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autoscalingConfig`
      if (jsonObj.get("autoscalingConfig") != null && !jsonObj.get("autoscalingConfig").isJsonNull()) {
        AutoscalingConfig.validateJsonElement(jsonObj.get("autoscalingConfig"));
      }
      if ((jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) && !jsonObj.get("config").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("endpointUris") != null && !jsonObj.get("endpointUris").isJsonNull() && !jsonObj.get("endpointUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointUris` to be an array in the JSON string but got `%s`", jsonObj.get("endpointUris").toString()));
      }
      // validate the optional field `freeInstanceMetadata`
      if (jsonObj.get("freeInstanceMetadata") != null && !jsonObj.get("freeInstanceMetadata").isJsonNull()) {
        FreeInstanceMetadata.validateJsonElement(jsonObj.get("freeInstanceMetadata"));
      }
      if ((jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) && !jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      // validate the optional field `instanceType`
      if (jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) {
        InstanceTypeEnum.validateJsonElement(jsonObj.get("instanceType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Instance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Instance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Instance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Instance.class));

       return (TypeAdapter<T>) new TypeAdapter<Instance>() {
           @Override
           public void write(JsonWriter out, Instance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Instance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Instance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Instance
   * @throws IOException if the JSON string is invalid with respect to Instance
   */
  public static Instance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Instance.class);
  }

  /**
   * Convert an instance of Instance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

