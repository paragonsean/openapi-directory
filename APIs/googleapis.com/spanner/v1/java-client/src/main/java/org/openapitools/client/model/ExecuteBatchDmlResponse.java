/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResultSet;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response for ExecuteBatchDml. Contains a list of ResultSet messages, one for each DML statement that has successfully executed, in the same order as the statements in the request. If a statement fails, the status in the response body identifies the cause of the failure. To check for DML statements that failed, use the following approach: 1. Check the status in the response message. The google.rpc.Code enum value &#x60;OK&#x60; indicates that all statements were executed successfully. 2. If the status was not &#x60;OK&#x60;, check the number of result sets in the response. If the response contains &#x60;N&#x60; ResultSet messages, then statement &#x60;N+1&#x60; in the request failed. Example 1: * Request: 5 DML statements, all executed successfully. * Response: 5 ResultSet messages, with the status &#x60;OK&#x60;. Example 2: * Request: 5 DML statements. The third statement has a syntax error. * Response: 2 ResultSet messages, and a syntax error (&#x60;INVALID_ARGUMENT&#x60;) status. The number of ResultSet messages indicates that the third statement failed, and the fourth and fifth statements were not executed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExecuteBatchDmlResponse {
  public static final String SERIALIZED_NAME_RESULT_SETS = "resultSets";
  @SerializedName(SERIALIZED_NAME_RESULT_SETS)
  private List<ResultSet> resultSets = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public ExecuteBatchDmlResponse() {
  }

  public ExecuteBatchDmlResponse resultSets(List<ResultSet> resultSets) {
    this.resultSets = resultSets;
    return this;
  }

  public ExecuteBatchDmlResponse addResultSetsItem(ResultSet resultSetsItem) {
    if (this.resultSets == null) {
      this.resultSets = new ArrayList<>();
    }
    this.resultSets.add(resultSetsItem);
    return this;
  }

  /**
   * One ResultSet for each statement in the request that ran successfully, in the same order as the statements in the request. Each ResultSet does not contain any rows. The ResultSetStats in each ResultSet contain the number of rows modified by the statement. Only the first ResultSet in the response contains valid ResultSetMetadata.
   * @return resultSets
   */
  @javax.annotation.Nullable
  public List<ResultSet> getResultSets() {
    return resultSets;
  }

  public void setResultSets(List<ResultSet> resultSets) {
    this.resultSets = resultSets;
  }


  public ExecuteBatchDmlResponse status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecuteBatchDmlResponse executeBatchDmlResponse = (ExecuteBatchDmlResponse) o;
    return Objects.equals(this.resultSets, executeBatchDmlResponse.resultSets) &&
        Objects.equals(this.status, executeBatchDmlResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resultSets, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecuteBatchDmlResponse {\n");
    sb.append("    resultSets: ").append(toIndentedString(resultSets)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resultSets");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecuteBatchDmlResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecuteBatchDmlResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecuteBatchDmlResponse is not found in the empty JSON string", ExecuteBatchDmlResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecuteBatchDmlResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecuteBatchDmlResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("resultSets") != null && !jsonObj.get("resultSets").isJsonNull()) {
        JsonArray jsonArrayresultSets = jsonObj.getAsJsonArray("resultSets");
        if (jsonArrayresultSets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resultSets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resultSets` to be an array in the JSON string but got `%s`", jsonObj.get("resultSets").toString()));
          }

          // validate the optional field `resultSets` (array)
          for (int i = 0; i < jsonArrayresultSets.size(); i++) {
            ResultSet.validateJsonElement(jsonArrayresultSets.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecuteBatchDmlResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecuteBatchDmlResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecuteBatchDmlResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecuteBatchDmlResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecuteBatchDmlResponse>() {
           @Override
           public void write(JsonWriter out, ExecuteBatchDmlResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecuteBatchDmlResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecuteBatchDmlResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecuteBatchDmlResponse
   * @throws IOException if the JSON string is invalid with respect to ExecuteBatchDmlResponse
   */
  public static ExecuteBatchDmlResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecuteBatchDmlResponse.class);
  }

  /**
   * Convert an instance of ExecuteBatchDmlResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

