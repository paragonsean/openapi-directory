/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiagnosticMessage;
import org.openapitools.client.model.Metric;
import org.openapitools.client.model.PrefixNode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VisualizationData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VisualizationData {
  public static final String SERIALIZED_NAME_DATA_SOURCE_END_TOKEN = "dataSourceEndToken";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_END_TOKEN)
  private String dataSourceEndToken;

  public static final String SERIALIZED_NAME_DATA_SOURCE_SEPARATOR_TOKEN = "dataSourceSeparatorToken";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_SEPARATOR_TOKEN)
  private String dataSourceSeparatorToken;

  public static final String SERIALIZED_NAME_DIAGNOSTIC_MESSAGES = "diagnosticMessages";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTIC_MESSAGES)
  private List<DiagnosticMessage> diagnosticMessages = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_KEY_STRINGS = "endKeyStrings";
  @SerializedName(SERIALIZED_NAME_END_KEY_STRINGS)
  private List<String> endKeyStrings = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_PII = "hasPii";
  @SerializedName(SERIALIZED_NAME_HAS_PII)
  private Boolean hasPii;

  public static final String SERIALIZED_NAME_INDEXED_KEYS = "indexedKeys";
  @SerializedName(SERIALIZED_NAME_INDEXED_KEYS)
  private List<String> indexedKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEY_SEPARATOR = "keySeparator";
  @SerializedName(SERIALIZED_NAME_KEY_SEPARATOR)
  private String keySeparator;

  /**
   * The unit for the key: e.g. &#39;key&#39; or &#39;chunk&#39;.
   */
  @JsonAdapter(KeyUnitEnum.Adapter.class)
  public enum KeyUnitEnum {
    KEY_UNIT_UNSPECIFIED("KEY_UNIT_UNSPECIFIED"),
    
    KEY("KEY"),
    
    CHUNK("CHUNK");

    private String value;

    KeyUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyUnitEnum fromValue(String value) {
      for (KeyUnitEnum b : KeyUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEY_UNIT = "keyUnit";
  @SerializedName(SERIALIZED_NAME_KEY_UNIT)
  private KeyUnitEnum keyUnit;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<Metric> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFIX_NODES = "prefixNodes";
  @SerializedName(SERIALIZED_NAME_PREFIX_NODES)
  private List<PrefixNode> prefixNodes = new ArrayList<>();

  public VisualizationData() {
  }

  public VisualizationData dataSourceEndToken(String dataSourceEndToken) {
    this.dataSourceEndToken = dataSourceEndToken;
    return this;
  }

  /**
   * The token signifying the end of a data_source.
   * @return dataSourceEndToken
   */
  @javax.annotation.Nullable
  public String getDataSourceEndToken() {
    return dataSourceEndToken;
  }

  public void setDataSourceEndToken(String dataSourceEndToken) {
    this.dataSourceEndToken = dataSourceEndToken;
  }


  public VisualizationData dataSourceSeparatorToken(String dataSourceSeparatorToken) {
    this.dataSourceSeparatorToken = dataSourceSeparatorToken;
    return this;
  }

  /**
   * The token delimiting a datasource name from the rest of a key in a data_source.
   * @return dataSourceSeparatorToken
   */
  @javax.annotation.Nullable
  public String getDataSourceSeparatorToken() {
    return dataSourceSeparatorToken;
  }

  public void setDataSourceSeparatorToken(String dataSourceSeparatorToken) {
    this.dataSourceSeparatorToken = dataSourceSeparatorToken;
  }


  public VisualizationData diagnosticMessages(List<DiagnosticMessage> diagnosticMessages) {
    this.diagnosticMessages = diagnosticMessages;
    return this;
  }

  public VisualizationData addDiagnosticMessagesItem(DiagnosticMessage diagnosticMessagesItem) {
    if (this.diagnosticMessages == null) {
      this.diagnosticMessages = new ArrayList<>();
    }
    this.diagnosticMessages.add(diagnosticMessagesItem);
    return this;
  }

  /**
   * The list of messages (info, alerts, ...)
   * @return diagnosticMessages
   */
  @javax.annotation.Nullable
  public List<DiagnosticMessage> getDiagnosticMessages() {
    return diagnosticMessages;
  }

  public void setDiagnosticMessages(List<DiagnosticMessage> diagnosticMessages) {
    this.diagnosticMessages = diagnosticMessages;
  }


  public VisualizationData endKeyStrings(List<String> endKeyStrings) {
    this.endKeyStrings = endKeyStrings;
    return this;
  }

  public VisualizationData addEndKeyStringsItem(String endKeyStringsItem) {
    if (this.endKeyStrings == null) {
      this.endKeyStrings = new ArrayList<>();
    }
    this.endKeyStrings.add(endKeyStringsItem);
    return this;
  }

  /**
   * We discretize the entire keyspace into buckets. Assuming each bucket has an inclusive keyrange and covers keys from k(i) ... k(n). In this case k(n) would be an end key for a given range. end_key_string is the collection of all such end keys
   * @return endKeyStrings
   */
  @javax.annotation.Nullable
  public List<String> getEndKeyStrings() {
    return endKeyStrings;
  }

  public void setEndKeyStrings(List<String> endKeyStrings) {
    this.endKeyStrings = endKeyStrings;
  }


  public VisualizationData hasPii(Boolean hasPii) {
    this.hasPii = hasPii;
    return this;
  }

  /**
   * Whether this scan contains PII.
   * @return hasPii
   */
  @javax.annotation.Nullable
  public Boolean getHasPii() {
    return hasPii;
  }

  public void setHasPii(Boolean hasPii) {
    this.hasPii = hasPii;
  }


  public VisualizationData indexedKeys(List<String> indexedKeys) {
    this.indexedKeys = indexedKeys;
    return this;
  }

  public VisualizationData addIndexedKeysItem(String indexedKeysItem) {
    if (this.indexedKeys == null) {
      this.indexedKeys = new ArrayList<>();
    }
    this.indexedKeys.add(indexedKeysItem);
    return this;
  }

  /**
   * Keys of key ranges that contribute significantly to a given metric Can be thought of as heavy hitters.
   * @return indexedKeys
   */
  @javax.annotation.Nullable
  public List<String> getIndexedKeys() {
    return indexedKeys;
  }

  public void setIndexedKeys(List<String> indexedKeys) {
    this.indexedKeys = indexedKeys;
  }


  public VisualizationData keySeparator(String keySeparator) {
    this.keySeparator = keySeparator;
    return this;
  }

  /**
   * The token delimiting the key prefixes.
   * @return keySeparator
   */
  @javax.annotation.Nullable
  public String getKeySeparator() {
    return keySeparator;
  }

  public void setKeySeparator(String keySeparator) {
    this.keySeparator = keySeparator;
  }


  public VisualizationData keyUnit(KeyUnitEnum keyUnit) {
    this.keyUnit = keyUnit;
    return this;
  }

  /**
   * The unit for the key: e.g. &#39;key&#39; or &#39;chunk&#39;.
   * @return keyUnit
   */
  @javax.annotation.Nullable
  public KeyUnitEnum getKeyUnit() {
    return keyUnit;
  }

  public void setKeyUnit(KeyUnitEnum keyUnit) {
    this.keyUnit = keyUnit;
  }


  public VisualizationData metrics(List<Metric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public VisualizationData addMetricsItem(Metric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * The list of data objects for each metric.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<Metric> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<Metric> metrics) {
    this.metrics = metrics;
  }


  public VisualizationData prefixNodes(List<PrefixNode> prefixNodes) {
    this.prefixNodes = prefixNodes;
    return this;
  }

  public VisualizationData addPrefixNodesItem(PrefixNode prefixNodesItem) {
    if (this.prefixNodes == null) {
      this.prefixNodes = new ArrayList<>();
    }
    this.prefixNodes.add(prefixNodesItem);
    return this;
  }

  /**
   * The list of extracted key prefix nodes used in the key prefix hierarchy.
   * @return prefixNodes
   */
  @javax.annotation.Nullable
  public List<PrefixNode> getPrefixNodes() {
    return prefixNodes;
  }

  public void setPrefixNodes(List<PrefixNode> prefixNodes) {
    this.prefixNodes = prefixNodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VisualizationData visualizationData = (VisualizationData) o;
    return Objects.equals(this.dataSourceEndToken, visualizationData.dataSourceEndToken) &&
        Objects.equals(this.dataSourceSeparatorToken, visualizationData.dataSourceSeparatorToken) &&
        Objects.equals(this.diagnosticMessages, visualizationData.diagnosticMessages) &&
        Objects.equals(this.endKeyStrings, visualizationData.endKeyStrings) &&
        Objects.equals(this.hasPii, visualizationData.hasPii) &&
        Objects.equals(this.indexedKeys, visualizationData.indexedKeys) &&
        Objects.equals(this.keySeparator, visualizationData.keySeparator) &&
        Objects.equals(this.keyUnit, visualizationData.keyUnit) &&
        Objects.equals(this.metrics, visualizationData.metrics) &&
        Objects.equals(this.prefixNodes, visualizationData.prefixNodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSourceEndToken, dataSourceSeparatorToken, diagnosticMessages, endKeyStrings, hasPii, indexedKeys, keySeparator, keyUnit, metrics, prefixNodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VisualizationData {\n");
    sb.append("    dataSourceEndToken: ").append(toIndentedString(dataSourceEndToken)).append("\n");
    sb.append("    dataSourceSeparatorToken: ").append(toIndentedString(dataSourceSeparatorToken)).append("\n");
    sb.append("    diagnosticMessages: ").append(toIndentedString(diagnosticMessages)).append("\n");
    sb.append("    endKeyStrings: ").append(toIndentedString(endKeyStrings)).append("\n");
    sb.append("    hasPii: ").append(toIndentedString(hasPii)).append("\n");
    sb.append("    indexedKeys: ").append(toIndentedString(indexedKeys)).append("\n");
    sb.append("    keySeparator: ").append(toIndentedString(keySeparator)).append("\n");
    sb.append("    keyUnit: ").append(toIndentedString(keyUnit)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    prefixNodes: ").append(toIndentedString(prefixNodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSourceEndToken");
    openapiFields.add("dataSourceSeparatorToken");
    openapiFields.add("diagnosticMessages");
    openapiFields.add("endKeyStrings");
    openapiFields.add("hasPii");
    openapiFields.add("indexedKeys");
    openapiFields.add("keySeparator");
    openapiFields.add("keyUnit");
    openapiFields.add("metrics");
    openapiFields.add("prefixNodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VisualizationData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VisualizationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VisualizationData is not found in the empty JSON string", VisualizationData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VisualizationData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VisualizationData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSourceEndToken") != null && !jsonObj.get("dataSourceEndToken").isJsonNull()) && !jsonObj.get("dataSourceEndToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceEndToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceEndToken").toString()));
      }
      if ((jsonObj.get("dataSourceSeparatorToken") != null && !jsonObj.get("dataSourceSeparatorToken").isJsonNull()) && !jsonObj.get("dataSourceSeparatorToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceSeparatorToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceSeparatorToken").toString()));
      }
      if (jsonObj.get("diagnosticMessages") != null && !jsonObj.get("diagnosticMessages").isJsonNull()) {
        JsonArray jsonArraydiagnosticMessages = jsonObj.getAsJsonArray("diagnosticMessages");
        if (jsonArraydiagnosticMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("diagnosticMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `diagnosticMessages` to be an array in the JSON string but got `%s`", jsonObj.get("diagnosticMessages").toString()));
          }

          // validate the optional field `diagnosticMessages` (array)
          for (int i = 0; i < jsonArraydiagnosticMessages.size(); i++) {
            DiagnosticMessage.validateJsonElement(jsonArraydiagnosticMessages.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("endKeyStrings") != null && !jsonObj.get("endKeyStrings").isJsonNull() && !jsonObj.get("endKeyStrings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `endKeyStrings` to be an array in the JSON string but got `%s`", jsonObj.get("endKeyStrings").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("indexedKeys") != null && !jsonObj.get("indexedKeys").isJsonNull() && !jsonObj.get("indexedKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexedKeys` to be an array in the JSON string but got `%s`", jsonObj.get("indexedKeys").toString()));
      }
      if ((jsonObj.get("keySeparator") != null && !jsonObj.get("keySeparator").isJsonNull()) && !jsonObj.get("keySeparator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keySeparator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keySeparator").toString()));
      }
      if ((jsonObj.get("keyUnit") != null && !jsonObj.get("keyUnit").isJsonNull()) && !jsonObj.get("keyUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyUnit").toString()));
      }
      // validate the optional field `keyUnit`
      if (jsonObj.get("keyUnit") != null && !jsonObj.get("keyUnit").isJsonNull()) {
        KeyUnitEnum.validateJsonElement(jsonObj.get("keyUnit"));
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            Metric.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if (jsonObj.get("prefixNodes") != null && !jsonObj.get("prefixNodes").isJsonNull()) {
        JsonArray jsonArrayprefixNodes = jsonObj.getAsJsonArray("prefixNodes");
        if (jsonArrayprefixNodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("prefixNodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `prefixNodes` to be an array in the JSON string but got `%s`", jsonObj.get("prefixNodes").toString()));
          }

          // validate the optional field `prefixNodes` (array)
          for (int i = 0; i < jsonArrayprefixNodes.size(); i++) {
            PrefixNode.validateJsonElement(jsonArrayprefixNodes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VisualizationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VisualizationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VisualizationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VisualizationData.class));

       return (TypeAdapter<T>) new TypeAdapter<VisualizationData>() {
           @Override
           public void write(JsonWriter out, VisualizationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VisualizationData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VisualizationData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VisualizationData
   * @throws IOException if the JSON string is invalid with respect to VisualizationData
   */
  public static VisualizationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VisualizationData.class);
  }

  /**
   * Convert an instance of VisualizationData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

