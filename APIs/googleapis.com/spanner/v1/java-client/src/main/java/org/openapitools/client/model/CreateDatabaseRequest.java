/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EncryptionConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for CreateDatabase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDatabaseRequest {
  public static final String SERIALIZED_NAME_CREATE_STATEMENT = "createStatement";
  @SerializedName(SERIALIZED_NAME_CREATE_STATEMENT)
  private String createStatement;

  /**
   * Optional. The dialect of the Cloud Spanner Database.
   */
  @JsonAdapter(DatabaseDialectEnum.Adapter.class)
  public enum DatabaseDialectEnum {
    DATABASE_DIALECT_UNSPECIFIED("DATABASE_DIALECT_UNSPECIFIED"),
    
    GOOGLE_STANDARD_SQL("GOOGLE_STANDARD_SQL"),
    
    POSTGRESQL("POSTGRESQL");

    private String value;

    DatabaseDialectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatabaseDialectEnum fromValue(String value) {
      for (DatabaseDialectEnum b : DatabaseDialectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatabaseDialectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatabaseDialectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatabaseDialectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatabaseDialectEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatabaseDialectEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATABASE_DIALECT = "databaseDialect";
  @SerializedName(SERIALIZED_NAME_DATABASE_DIALECT)
  private DatabaseDialectEnum databaseDialect;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIG = "encryptionConfig";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIG)
  private EncryptionConfig encryptionConfig;

  public static final String SERIALIZED_NAME_EXTRA_STATEMENTS = "extraStatements";
  @SerializedName(SERIALIZED_NAME_EXTRA_STATEMENTS)
  private List<String> extraStatements = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROTO_DESCRIPTORS = "protoDescriptors";
  @SerializedName(SERIALIZED_NAME_PROTO_DESCRIPTORS)
  private byte[] protoDescriptors;

  public CreateDatabaseRequest() {
  }

  public CreateDatabaseRequest createStatement(String createStatement) {
    this.createStatement = createStatement;
    return this;
  }

  /**
   * Required. A &#x60;CREATE DATABASE&#x60; statement, which specifies the ID of the new database. The database ID must conform to the regular expression &#x60;a-z*[a-z0-9]&#x60; and be between 2 and 30 characters in length. If the database ID is a reserved word or if it contains a hyphen, the database ID must be enclosed in backticks (&#x60;&#x60; &#x60; &#x60;&#x60;).
   * @return createStatement
   */
  @javax.annotation.Nullable
  public String getCreateStatement() {
    return createStatement;
  }

  public void setCreateStatement(String createStatement) {
    this.createStatement = createStatement;
  }


  public CreateDatabaseRequest databaseDialect(DatabaseDialectEnum databaseDialect) {
    this.databaseDialect = databaseDialect;
    return this;
  }

  /**
   * Optional. The dialect of the Cloud Spanner Database.
   * @return databaseDialect
   */
  @javax.annotation.Nullable
  public DatabaseDialectEnum getDatabaseDialect() {
    return databaseDialect;
  }

  public void setDatabaseDialect(DatabaseDialectEnum databaseDialect) {
    this.databaseDialect = databaseDialect;
  }


  public CreateDatabaseRequest encryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Get encryptionConfig
   * @return encryptionConfig
   */
  @javax.annotation.Nullable
  public EncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  public void setEncryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
  }


  public CreateDatabaseRequest extraStatements(List<String> extraStatements) {
    this.extraStatements = extraStatements;
    return this;
  }

  public CreateDatabaseRequest addExtraStatementsItem(String extraStatementsItem) {
    if (this.extraStatements == null) {
      this.extraStatements = new ArrayList<>();
    }
    this.extraStatements.add(extraStatementsItem);
    return this;
  }

  /**
   * Optional. A list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the database is not created.
   * @return extraStatements
   */
  @javax.annotation.Nullable
  public List<String> getExtraStatements() {
    return extraStatements;
  }

  public void setExtraStatements(List<String> extraStatements) {
    this.extraStatements = extraStatements;
  }


  public CreateDatabaseRequest protoDescriptors(byte[] protoDescriptors) {
    this.protoDescriptors = protoDescriptors;
    return this;
  }

  /**
   * Optional. Proto descriptors used by CREATE/ALTER PROTO BUNDLE statements in &#39;extra_statements&#39; above. Contains a protobuf-serialized [google.protobuf.FileDescriptorSet](https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto). To generate it, [install](https://grpc.io/docs/protoc-installation/) and run &#x60;protoc&#x60; with --include_imports and --descriptor_set_out. For example, to generate for moon/shot/app.proto, run &#x60;&#x60;&#x60; $protoc --proto_path&#x3D;/app_path --proto_path&#x3D;/lib_path \\ --include_imports \\ --descriptor_set_out&#x3D;descriptors.data \\ moon/shot/app.proto &#x60;&#x60;&#x60; For more details, see protobuffer [self description](https://developers.google.com/protocol-buffers/docs/techniques#self-description).
   * @return protoDescriptors
   */
  @javax.annotation.Nullable
  public byte[] getProtoDescriptors() {
    return protoDescriptors;
  }

  public void setProtoDescriptors(byte[] protoDescriptors) {
    this.protoDescriptors = protoDescriptors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDatabaseRequest createDatabaseRequest = (CreateDatabaseRequest) o;
    return Objects.equals(this.createStatement, createDatabaseRequest.createStatement) &&
        Objects.equals(this.databaseDialect, createDatabaseRequest.databaseDialect) &&
        Objects.equals(this.encryptionConfig, createDatabaseRequest.encryptionConfig) &&
        Objects.equals(this.extraStatements, createDatabaseRequest.extraStatements) &&
        Arrays.equals(this.protoDescriptors, createDatabaseRequest.protoDescriptors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createStatement, databaseDialect, encryptionConfig, extraStatements, Arrays.hashCode(protoDescriptors));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDatabaseRequest {\n");
    sb.append("    createStatement: ").append(toIndentedString(createStatement)).append("\n");
    sb.append("    databaseDialect: ").append(toIndentedString(databaseDialect)).append("\n");
    sb.append("    encryptionConfig: ").append(toIndentedString(encryptionConfig)).append("\n");
    sb.append("    extraStatements: ").append(toIndentedString(extraStatements)).append("\n");
    sb.append("    protoDescriptors: ").append(toIndentedString(protoDescriptors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createStatement");
    openapiFields.add("databaseDialect");
    openapiFields.add("encryptionConfig");
    openapiFields.add("extraStatements");
    openapiFields.add("protoDescriptors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDatabaseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDatabaseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDatabaseRequest is not found in the empty JSON string", CreateDatabaseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDatabaseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDatabaseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createStatement") != null && !jsonObj.get("createStatement").isJsonNull()) && !jsonObj.get("createStatement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createStatement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createStatement").toString()));
      }
      if ((jsonObj.get("databaseDialect") != null && !jsonObj.get("databaseDialect").isJsonNull()) && !jsonObj.get("databaseDialect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseDialect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseDialect").toString()));
      }
      // validate the optional field `databaseDialect`
      if (jsonObj.get("databaseDialect") != null && !jsonObj.get("databaseDialect").isJsonNull()) {
        DatabaseDialectEnum.validateJsonElement(jsonObj.get("databaseDialect"));
      }
      // validate the optional field `encryptionConfig`
      if (jsonObj.get("encryptionConfig") != null && !jsonObj.get("encryptionConfig").isJsonNull()) {
        EncryptionConfig.validateJsonElement(jsonObj.get("encryptionConfig"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("extraStatements") != null && !jsonObj.get("extraStatements").isJsonNull() && !jsonObj.get("extraStatements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `extraStatements` to be an array in the JSON string but got `%s`", jsonObj.get("extraStatements").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDatabaseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDatabaseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDatabaseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDatabaseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDatabaseRequest>() {
           @Override
           public void write(JsonWriter out, CreateDatabaseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDatabaseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDatabaseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDatabaseRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDatabaseRequest
   */
  public static CreateDatabaseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDatabaseRequest.class);
  }

  /**
   * Convert an instance of CreateDatabaseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

