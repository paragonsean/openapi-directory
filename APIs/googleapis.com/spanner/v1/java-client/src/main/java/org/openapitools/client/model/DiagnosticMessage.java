/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LocalizedString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A message representing the key visualizer diagnostic messages.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiagnosticMessage {
  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private LocalizedString info;

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private LocalizedString metric;

  public static final String SERIALIZED_NAME_METRIC_SPECIFIC = "metricSpecific";
  @SerializedName(SERIALIZED_NAME_METRIC_SPECIFIC)
  private Boolean metricSpecific;

  /**
   * The severity of the diagnostic message.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    SEVERITY_UNSPECIFIED("SEVERITY_UNSPECIFIED"),
    
    INFO("INFO"),
    
    WARNING("WARNING"),
    
    ERROR("ERROR"),
    
    FATAL("FATAL");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_SHORT_MESSAGE = "shortMessage";
  @SerializedName(SERIALIZED_NAME_SHORT_MESSAGE)
  private LocalizedString shortMessage;

  public DiagnosticMessage() {
  }

  public DiagnosticMessage info(LocalizedString info) {
    this.info = info;
    return this;
  }

  /**
   * Get info
   * @return info
   */
  @javax.annotation.Nullable
  public LocalizedString getInfo() {
    return info;
  }

  public void setInfo(LocalizedString info) {
    this.info = info;
  }


  public DiagnosticMessage metric(LocalizedString metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Get metric
   * @return metric
   */
  @javax.annotation.Nullable
  public LocalizedString getMetric() {
    return metric;
  }

  public void setMetric(LocalizedString metric) {
    this.metric = metric;
  }


  public DiagnosticMessage metricSpecific(Boolean metricSpecific) {
    this.metricSpecific = metricSpecific;
    return this;
  }

  /**
   * Whether this message is specific only for the current metric. By default Diagnostics are shown for all metrics, regardless which metric is the currently selected metric in the UI. However occasionally a metric will generate so many messages that the resulting visual clutter becomes overwhelming. In this case setting this to true, will show the diagnostic messages for that metric only if it is the currently selected metric.
   * @return metricSpecific
   */
  @javax.annotation.Nullable
  public Boolean getMetricSpecific() {
    return metricSpecific;
  }

  public void setMetricSpecific(Boolean metricSpecific) {
    this.metricSpecific = metricSpecific;
  }


  public DiagnosticMessage severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * The severity of the diagnostic message.
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public DiagnosticMessage shortMessage(LocalizedString shortMessage) {
    this.shortMessage = shortMessage;
    return this;
  }

  /**
   * Get shortMessage
   * @return shortMessage
   */
  @javax.annotation.Nullable
  public LocalizedString getShortMessage() {
    return shortMessage;
  }

  public void setShortMessage(LocalizedString shortMessage) {
    this.shortMessage = shortMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticMessage diagnosticMessage = (DiagnosticMessage) o;
    return Objects.equals(this.info, diagnosticMessage.info) &&
        Objects.equals(this.metric, diagnosticMessage.metric) &&
        Objects.equals(this.metricSpecific, diagnosticMessage.metricSpecific) &&
        Objects.equals(this.severity, diagnosticMessage.severity) &&
        Objects.equals(this.shortMessage, diagnosticMessage.shortMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(info, metric, metricSpecific, severity, shortMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticMessage {\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    metricSpecific: ").append(toIndentedString(metricSpecific)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    shortMessage: ").append(toIndentedString(shortMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("info");
    openapiFields.add("metric");
    openapiFields.add("metricSpecific");
    openapiFields.add("severity");
    openapiFields.add("shortMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiagnosticMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiagnosticMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiagnosticMessage is not found in the empty JSON string", DiagnosticMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiagnosticMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiagnosticMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `info`
      if (jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("info"));
      }
      // validate the optional field `metric`
      if (jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("metric"));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      // validate the optional field `shortMessage`
      if (jsonObj.get("shortMessage") != null && !jsonObj.get("shortMessage").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("shortMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiagnosticMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiagnosticMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiagnosticMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiagnosticMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<DiagnosticMessage>() {
           @Override
           public void write(JsonWriter out, DiagnosticMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiagnosticMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiagnosticMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiagnosticMessage
   * @throws IOException if the JSON string is invalid with respect to DiagnosticMessage
   */
  public static DiagnosticMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiagnosticMessage.class);
  }

  /**
   * Convert an instance of DiagnosticMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

