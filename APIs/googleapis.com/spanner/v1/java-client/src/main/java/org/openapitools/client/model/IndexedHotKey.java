/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A message representing a (sparse) collection of hot keys for specific key buckets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IndexedHotKey {
  public static final String SERIALIZED_NAME_SPARSE_HOT_KEYS = "sparseHotKeys";
  @SerializedName(SERIALIZED_NAME_SPARSE_HOT_KEYS)
  private Map<String, Integer> sparseHotKeys = new HashMap<>();

  public IndexedHotKey() {
  }

  public IndexedHotKey sparseHotKeys(Map<String, Integer> sparseHotKeys) {
    this.sparseHotKeys = sparseHotKeys;
    return this;
  }

  public IndexedHotKey putSparseHotKeysItem(String key, Integer sparseHotKeysItem) {
    if (this.sparseHotKeys == null) {
      this.sparseHotKeys = new HashMap<>();
    }
    this.sparseHotKeys.put(key, sparseHotKeysItem);
    return this;
  }

  /**
   * A (sparse) mapping from key bucket index to the index of the specific hot row key for that key bucket. The index of the hot row key can be translated to the actual row key via the ScanData.VisualizationData.indexed_keys repeated field.
   * @return sparseHotKeys
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getSparseHotKeys() {
    return sparseHotKeys;
  }

  public void setSparseHotKeys(Map<String, Integer> sparseHotKeys) {
    this.sparseHotKeys = sparseHotKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexedHotKey indexedHotKey = (IndexedHotKey) o;
    return Objects.equals(this.sparseHotKeys, indexedHotKey.sparseHotKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sparseHotKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexedHotKey {\n");
    sb.append("    sparseHotKeys: ").append(toIndentedString(sparseHotKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sparseHotKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndexedHotKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndexedHotKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndexedHotKey is not found in the empty JSON string", IndexedHotKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndexedHotKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndexedHotKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndexedHotKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndexedHotKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndexedHotKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndexedHotKey.class));

       return (TypeAdapter<T>) new TypeAdapter<IndexedHotKey>() {
           @Override
           public void write(JsonWriter out, IndexedHotKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndexedHotKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndexedHotKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndexedHotKey
   * @throws IOException if the JSON string is invalid with respect to IndexedHotKey
   */
  public static IndexedHotKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndexedHotKey.class);
  }

  /**
   * Convert an instance of IndexedHotKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

