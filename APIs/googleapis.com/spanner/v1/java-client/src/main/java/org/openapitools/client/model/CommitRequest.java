/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Mutation;
import org.openapitools.client.model.RequestOptions;
import org.openapitools.client.model.TransactionOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for Commit.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommitRequest {
  public static final String SERIALIZED_NAME_MAX_COMMIT_DELAY = "maxCommitDelay";
  @SerializedName(SERIALIZED_NAME_MAX_COMMIT_DELAY)
  private String maxCommitDelay;

  public static final String SERIALIZED_NAME_MUTATIONS = "mutations";
  @SerializedName(SERIALIZED_NAME_MUTATIONS)
  private List<Mutation> mutations = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_OPTIONS = "requestOptions";
  @SerializedName(SERIALIZED_NAME_REQUEST_OPTIONS)
  private RequestOptions requestOptions;

  public static final String SERIALIZED_NAME_RETURN_COMMIT_STATS = "returnCommitStats";
  @SerializedName(SERIALIZED_NAME_RETURN_COMMIT_STATS)
  private Boolean returnCommitStats;

  public static final String SERIALIZED_NAME_SINGLE_USE_TRANSACTION = "singleUseTransaction";
  @SerializedName(SERIALIZED_NAME_SINGLE_USE_TRANSACTION)
  private TransactionOptions singleUseTransaction;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private byte[] transactionId;

  public CommitRequest() {
  }

  public CommitRequest maxCommitDelay(String maxCommitDelay) {
    this.maxCommitDelay = maxCommitDelay;
    return this;
  }

  /**
   * Optional. The amount of latency this request is willing to incur in order to improve throughput. If this field is not set, Spanner assumes requests are relatively latency sensitive and automatically determines an appropriate delay time. You can specify a batching delay value between 0 and 500 ms.
   * @return maxCommitDelay
   */
  @javax.annotation.Nullable
  public String getMaxCommitDelay() {
    return maxCommitDelay;
  }

  public void setMaxCommitDelay(String maxCommitDelay) {
    this.maxCommitDelay = maxCommitDelay;
  }


  public CommitRequest mutations(List<Mutation> mutations) {
    this.mutations = mutations;
    return this;
  }

  public CommitRequest addMutationsItem(Mutation mutationsItem) {
    if (this.mutations == null) {
      this.mutations = new ArrayList<>();
    }
    this.mutations.add(mutationsItem);
    return this;
  }

  /**
   * The mutations to be executed when this transaction commits. All mutations are applied atomically, in the order they appear in this list.
   * @return mutations
   */
  @javax.annotation.Nullable
  public List<Mutation> getMutations() {
    return mutations;
  }

  public void setMutations(List<Mutation> mutations) {
    this.mutations = mutations;
  }


  public CommitRequest requestOptions(RequestOptions requestOptions) {
    this.requestOptions = requestOptions;
    return this;
  }

  /**
   * Get requestOptions
   * @return requestOptions
   */
  @javax.annotation.Nullable
  public RequestOptions getRequestOptions() {
    return requestOptions;
  }

  public void setRequestOptions(RequestOptions requestOptions) {
    this.requestOptions = requestOptions;
  }


  public CommitRequest returnCommitStats(Boolean returnCommitStats) {
    this.returnCommitStats = returnCommitStats;
    return this;
  }

  /**
   * If &#x60;true&#x60;, then statistics related to the transaction will be included in the CommitResponse. Default value is &#x60;false&#x60;.
   * @return returnCommitStats
   */
  @javax.annotation.Nullable
  public Boolean getReturnCommitStats() {
    return returnCommitStats;
  }

  public void setReturnCommitStats(Boolean returnCommitStats) {
    this.returnCommitStats = returnCommitStats;
  }


  public CommitRequest singleUseTransaction(TransactionOptions singleUseTransaction) {
    this.singleUseTransaction = singleUseTransaction;
    return this;
  }

  /**
   * Get singleUseTransaction
   * @return singleUseTransaction
   */
  @javax.annotation.Nullable
  public TransactionOptions getSingleUseTransaction() {
    return singleUseTransaction;
  }

  public void setSingleUseTransaction(TransactionOptions singleUseTransaction) {
    this.singleUseTransaction = singleUseTransaction;
  }


  public CommitRequest transactionId(byte[] transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Commit a previously-started transaction.
   * @return transactionId
   */
  @javax.annotation.Nullable
  public byte[] getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(byte[] transactionId) {
    this.transactionId = transactionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommitRequest commitRequest = (CommitRequest) o;
    return Objects.equals(this.maxCommitDelay, commitRequest.maxCommitDelay) &&
        Objects.equals(this.mutations, commitRequest.mutations) &&
        Objects.equals(this.requestOptions, commitRequest.requestOptions) &&
        Objects.equals(this.returnCommitStats, commitRequest.returnCommitStats) &&
        Objects.equals(this.singleUseTransaction, commitRequest.singleUseTransaction) &&
        Arrays.equals(this.transactionId, commitRequest.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxCommitDelay, mutations, requestOptions, returnCommitStats, singleUseTransaction, Arrays.hashCode(transactionId));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommitRequest {\n");
    sb.append("    maxCommitDelay: ").append(toIndentedString(maxCommitDelay)).append("\n");
    sb.append("    mutations: ").append(toIndentedString(mutations)).append("\n");
    sb.append("    requestOptions: ").append(toIndentedString(requestOptions)).append("\n");
    sb.append("    returnCommitStats: ").append(toIndentedString(returnCommitStats)).append("\n");
    sb.append("    singleUseTransaction: ").append(toIndentedString(singleUseTransaction)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxCommitDelay");
    openapiFields.add("mutations");
    openapiFields.add("requestOptions");
    openapiFields.add("returnCommitStats");
    openapiFields.add("singleUseTransaction");
    openapiFields.add("transactionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommitRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommitRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommitRequest is not found in the empty JSON string", CommitRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommitRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommitRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maxCommitDelay") != null && !jsonObj.get("maxCommitDelay").isJsonNull()) && !jsonObj.get("maxCommitDelay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxCommitDelay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxCommitDelay").toString()));
      }
      if (jsonObj.get("mutations") != null && !jsonObj.get("mutations").isJsonNull()) {
        JsonArray jsonArraymutations = jsonObj.getAsJsonArray("mutations");
        if (jsonArraymutations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mutations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mutations` to be an array in the JSON string but got `%s`", jsonObj.get("mutations").toString()));
          }

          // validate the optional field `mutations` (array)
          for (int i = 0; i < jsonArraymutations.size(); i++) {
            Mutation.validateJsonElement(jsonArraymutations.get(i));
          };
        }
      }
      // validate the optional field `requestOptions`
      if (jsonObj.get("requestOptions") != null && !jsonObj.get("requestOptions").isJsonNull()) {
        RequestOptions.validateJsonElement(jsonObj.get("requestOptions"));
      }
      // validate the optional field `singleUseTransaction`
      if (jsonObj.get("singleUseTransaction") != null && !jsonObj.get("singleUseTransaction").isJsonNull()) {
        TransactionOptions.validateJsonElement(jsonObj.get("singleUseTransaction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommitRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommitRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommitRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommitRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CommitRequest>() {
           @Override
           public void write(JsonWriter out, CommitRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommitRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommitRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommitRequest
   * @throws IOException if the JSON string is invalid with respect to CommitRequest
   */
  public static CommitRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommitRequest.class);
  }

  /**
   * Convert an instance of CommitRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

