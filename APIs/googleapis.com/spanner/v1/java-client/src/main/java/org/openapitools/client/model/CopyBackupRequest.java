/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CopyBackupEncryptionConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for CopyBackup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CopyBackupRequest {
  public static final String SERIALIZED_NAME_BACKUP_ID = "backupId";
  @SerializedName(SERIALIZED_NAME_BACKUP_ID)
  private String backupId;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIG = "encryptionConfig";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIG)
  private CopyBackupEncryptionConfig encryptionConfig;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_SOURCE_BACKUP = "sourceBackup";
  @SerializedName(SERIALIZED_NAME_SOURCE_BACKUP)
  private String sourceBackup;

  public CopyBackupRequest() {
  }

  public CopyBackupRequest backupId(String backupId) {
    this.backupId = backupId;
    return this;
  }

  /**
   * Required. The id of the backup copy. The &#x60;backup_id&#x60; appended to &#x60;parent&#x60; forms the full backup_uri of the form &#x60;projects//instances//backups/&#x60;.
   * @return backupId
   */
  @javax.annotation.Nullable
  public String getBackupId() {
    return backupId;
  }

  public void setBackupId(String backupId) {
    this.backupId = backupId;
  }


  public CopyBackupRequest encryptionConfig(CopyBackupEncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Get encryptionConfig
   * @return encryptionConfig
   */
  @javax.annotation.Nullable
  public CopyBackupEncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  public void setEncryptionConfig(CopyBackupEncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
  }


  public CopyBackupRequest expireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Required. The expiration time of the backup in microsecond granularity. The expiration time must be at least 6 hours and at most 366 days from the &#x60;create_time&#x60; of the source backup. Once the &#x60;expire_time&#x60; has passed, the backup is eligible to be automatically deleted by Cloud Spanner to free the resources used by the backup.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(String expireTime) {
    this.expireTime = expireTime;
  }


  public CopyBackupRequest sourceBackup(String sourceBackup) {
    this.sourceBackup = sourceBackup;
    return this;
  }

  /**
   * Required. The source backup to be copied. The source backup needs to be in READY state for it to be copied. Once CopyBackup is in progress, the source backup cannot be deleted or cleaned up on expiration until CopyBackup is finished. Values are of the form: &#x60;projects//instances//backups/&#x60;.
   * @return sourceBackup
   */
  @javax.annotation.Nullable
  public String getSourceBackup() {
    return sourceBackup;
  }

  public void setSourceBackup(String sourceBackup) {
    this.sourceBackup = sourceBackup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopyBackupRequest copyBackupRequest = (CopyBackupRequest) o;
    return Objects.equals(this.backupId, copyBackupRequest.backupId) &&
        Objects.equals(this.encryptionConfig, copyBackupRequest.encryptionConfig) &&
        Objects.equals(this.expireTime, copyBackupRequest.expireTime) &&
        Objects.equals(this.sourceBackup, copyBackupRequest.sourceBackup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupId, encryptionConfig, expireTime, sourceBackup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopyBackupRequest {\n");
    sb.append("    backupId: ").append(toIndentedString(backupId)).append("\n");
    sb.append("    encryptionConfig: ").append(toIndentedString(encryptionConfig)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    sourceBackup: ").append(toIndentedString(sourceBackup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupId");
    openapiFields.add("encryptionConfig");
    openapiFields.add("expireTime");
    openapiFields.add("sourceBackup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CopyBackupRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CopyBackupRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CopyBackupRequest is not found in the empty JSON string", CopyBackupRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CopyBackupRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CopyBackupRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupId") != null && !jsonObj.get("backupId").isJsonNull()) && !jsonObj.get("backupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupId").toString()));
      }
      // validate the optional field `encryptionConfig`
      if (jsonObj.get("encryptionConfig") != null && !jsonObj.get("encryptionConfig").isJsonNull()) {
        CopyBackupEncryptionConfig.validateJsonElement(jsonObj.get("encryptionConfig"));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("sourceBackup") != null && !jsonObj.get("sourceBackup").isJsonNull()) && !jsonObj.get("sourceBackup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceBackup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceBackup").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CopyBackupRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CopyBackupRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CopyBackupRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CopyBackupRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CopyBackupRequest>() {
           @Override
           public void write(JsonWriter out, CopyBackupRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CopyBackupRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CopyBackupRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CopyBackupRequest
   * @throws IOException if the JSON string is invalid with respect to CopyBackupRequest
   */
  public static CopyBackupRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CopyBackupRequest.class);
  }

  /**
   * Convert an instance of CopyBackupRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

