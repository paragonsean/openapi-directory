/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The autoscaling limits for the instance. Users can define the minimum and maximum compute capacity allocated to the instance, and the autoscaler will only scale within that range. Users can either use nodes or processing units to specify the limits, but should use the same unit to set both the min_limit and max_limit.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoscalingLimits {
  public static final String SERIALIZED_NAME_MAX_NODES = "maxNodes";
  @SerializedName(SERIALIZED_NAME_MAX_NODES)
  private Integer maxNodes;

  public static final String SERIALIZED_NAME_MAX_PROCESSING_UNITS = "maxProcessingUnits";
  @SerializedName(SERIALIZED_NAME_MAX_PROCESSING_UNITS)
  private Integer maxProcessingUnits;

  public static final String SERIALIZED_NAME_MIN_NODES = "minNodes";
  @SerializedName(SERIALIZED_NAME_MIN_NODES)
  private Integer minNodes;

  public static final String SERIALIZED_NAME_MIN_PROCESSING_UNITS = "minProcessingUnits";
  @SerializedName(SERIALIZED_NAME_MIN_PROCESSING_UNITS)
  private Integer minProcessingUnits;

  public AutoscalingLimits() {
  }

  public AutoscalingLimits maxNodes(Integer maxNodes) {
    this.maxNodes = maxNodes;
    return this;
  }

  /**
   * Maximum number of nodes allocated to the instance. If set, this number should be greater than or equal to min_nodes.
   * @return maxNodes
   */
  @javax.annotation.Nullable
  public Integer getMaxNodes() {
    return maxNodes;
  }

  public void setMaxNodes(Integer maxNodes) {
    this.maxNodes = maxNodes;
  }


  public AutoscalingLimits maxProcessingUnits(Integer maxProcessingUnits) {
    this.maxProcessingUnits = maxProcessingUnits;
    return this;
  }

  /**
   * Maximum number of processing units allocated to the instance. If set, this number should be multiples of 1000 and be greater than or equal to min_processing_units.
   * @return maxProcessingUnits
   */
  @javax.annotation.Nullable
  public Integer getMaxProcessingUnits() {
    return maxProcessingUnits;
  }

  public void setMaxProcessingUnits(Integer maxProcessingUnits) {
    this.maxProcessingUnits = maxProcessingUnits;
  }


  public AutoscalingLimits minNodes(Integer minNodes) {
    this.minNodes = minNodes;
    return this;
  }

  /**
   * Minimum number of nodes allocated to the instance. If set, this number should be greater than or equal to 1.
   * @return minNodes
   */
  @javax.annotation.Nullable
  public Integer getMinNodes() {
    return minNodes;
  }

  public void setMinNodes(Integer minNodes) {
    this.minNodes = minNodes;
  }


  public AutoscalingLimits minProcessingUnits(Integer minProcessingUnits) {
    this.minProcessingUnits = minProcessingUnits;
    return this;
  }

  /**
   * Minimum number of processing units allocated to the instance. If set, this number should be multiples of 1000.
   * @return minProcessingUnits
   */
  @javax.annotation.Nullable
  public Integer getMinProcessingUnits() {
    return minProcessingUnits;
  }

  public void setMinProcessingUnits(Integer minProcessingUnits) {
    this.minProcessingUnits = minProcessingUnits;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoscalingLimits autoscalingLimits = (AutoscalingLimits) o;
    return Objects.equals(this.maxNodes, autoscalingLimits.maxNodes) &&
        Objects.equals(this.maxProcessingUnits, autoscalingLimits.maxProcessingUnits) &&
        Objects.equals(this.minNodes, autoscalingLimits.minNodes) &&
        Objects.equals(this.minProcessingUnits, autoscalingLimits.minProcessingUnits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxNodes, maxProcessingUnits, minNodes, minProcessingUnits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoscalingLimits {\n");
    sb.append("    maxNodes: ").append(toIndentedString(maxNodes)).append("\n");
    sb.append("    maxProcessingUnits: ").append(toIndentedString(maxProcessingUnits)).append("\n");
    sb.append("    minNodes: ").append(toIndentedString(minNodes)).append("\n");
    sb.append("    minProcessingUnits: ").append(toIndentedString(minProcessingUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxNodes");
    openapiFields.add("maxProcessingUnits");
    openapiFields.add("minNodes");
    openapiFields.add("minProcessingUnits");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoscalingLimits
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoscalingLimits.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoscalingLimits is not found in the empty JSON string", AutoscalingLimits.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoscalingLimits.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoscalingLimits` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoscalingLimits.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoscalingLimits' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoscalingLimits> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoscalingLimits.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoscalingLimits>() {
           @Override
           public void write(JsonWriter out, AutoscalingLimits value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoscalingLimits read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoscalingLimits given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoscalingLimits
   * @throws IOException if the JSON string is invalid with respect to AutoscalingLimits
   */
  public static AutoscalingLimits fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoscalingLimits.class);
  }

  /**
   * Convert an instance of AutoscalingLimits to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

