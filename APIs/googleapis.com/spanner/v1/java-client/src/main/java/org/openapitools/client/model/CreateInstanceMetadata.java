/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Instance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata type for the operation returned by CreateInstance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateInstanceMetadata {
  public static final String SERIALIZED_NAME_CANCEL_TIME = "cancelTime";
  @SerializedName(SERIALIZED_NAME_CANCEL_TIME)
  private String cancelTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  /**
   * The expected fulfillment period of this create operation.
   */
  @JsonAdapter(ExpectedFulfillmentPeriodEnum.Adapter.class)
  public enum ExpectedFulfillmentPeriodEnum {
    UNSPECIFIED("FULFILLMENT_PERIOD_UNSPECIFIED"),
    
    NORMAL("FULFILLMENT_PERIOD_NORMAL"),
    
    EXTENDED("FULFILLMENT_PERIOD_EXTENDED");

    private String value;

    ExpectedFulfillmentPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpectedFulfillmentPeriodEnum fromValue(String value) {
      for (ExpectedFulfillmentPeriodEnum b : ExpectedFulfillmentPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpectedFulfillmentPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpectedFulfillmentPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpectedFulfillmentPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpectedFulfillmentPeriodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpectedFulfillmentPeriodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPECTED_FULFILLMENT_PERIOD = "expectedFulfillmentPeriod";
  @SerializedName(SERIALIZED_NAME_EXPECTED_FULFILLMENT_PERIOD)
  private ExpectedFulfillmentPeriodEnum expectedFulfillmentPeriod;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private Instance instance;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public CreateInstanceMetadata() {
  }

  public CreateInstanceMetadata cancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
    return this;
  }

  /**
   * The time at which this operation was cancelled. If set, this operation is in the process of undoing itself (which is guaranteed to succeed) and cannot be cancelled again.
   * @return cancelTime
   */
  @javax.annotation.Nullable
  public String getCancelTime() {
    return cancelTime;
  }

  public void setCancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
  }


  public CreateInstanceMetadata endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time at which this operation failed or was completed successfully.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public CreateInstanceMetadata expectedFulfillmentPeriod(ExpectedFulfillmentPeriodEnum expectedFulfillmentPeriod) {
    this.expectedFulfillmentPeriod = expectedFulfillmentPeriod;
    return this;
  }

  /**
   * The expected fulfillment period of this create operation.
   * @return expectedFulfillmentPeriod
   */
  @javax.annotation.Nullable
  public ExpectedFulfillmentPeriodEnum getExpectedFulfillmentPeriod() {
    return expectedFulfillmentPeriod;
  }

  public void setExpectedFulfillmentPeriod(ExpectedFulfillmentPeriodEnum expectedFulfillmentPeriod) {
    this.expectedFulfillmentPeriod = expectedFulfillmentPeriod;
  }


  public CreateInstanceMetadata instance(Instance instance) {
    this.instance = instance;
    return this;
  }

  /**
   * Get instance
   * @return instance
   */
  @javax.annotation.Nullable
  public Instance getInstance() {
    return instance;
  }

  public void setInstance(Instance instance) {
    this.instance = instance;
  }


  public CreateInstanceMetadata startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time at which the CreateInstance request was received.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateInstanceMetadata createInstanceMetadata = (CreateInstanceMetadata) o;
    return Objects.equals(this.cancelTime, createInstanceMetadata.cancelTime) &&
        Objects.equals(this.endTime, createInstanceMetadata.endTime) &&
        Objects.equals(this.expectedFulfillmentPeriod, createInstanceMetadata.expectedFulfillmentPeriod) &&
        Objects.equals(this.instance, createInstanceMetadata.instance) &&
        Objects.equals(this.startTime, createInstanceMetadata.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancelTime, endTime, expectedFulfillmentPeriod, instance, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateInstanceMetadata {\n");
    sb.append("    cancelTime: ").append(toIndentedString(cancelTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    expectedFulfillmentPeriod: ").append(toIndentedString(expectedFulfillmentPeriod)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancelTime");
    openapiFields.add("endTime");
    openapiFields.add("expectedFulfillmentPeriod");
    openapiFields.add("instance");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateInstanceMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateInstanceMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateInstanceMetadata is not found in the empty JSON string", CreateInstanceMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateInstanceMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateInstanceMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cancelTime") != null && !jsonObj.get("cancelTime").isJsonNull()) && !jsonObj.get("cancelTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelTime").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("expectedFulfillmentPeriod") != null && !jsonObj.get("expectedFulfillmentPeriod").isJsonNull()) && !jsonObj.get("expectedFulfillmentPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedFulfillmentPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedFulfillmentPeriod").toString()));
      }
      // validate the optional field `expectedFulfillmentPeriod`
      if (jsonObj.get("expectedFulfillmentPeriod") != null && !jsonObj.get("expectedFulfillmentPeriod").isJsonNull()) {
        ExpectedFulfillmentPeriodEnum.validateJsonElement(jsonObj.get("expectedFulfillmentPeriod"));
      }
      // validate the optional field `instance`
      if (jsonObj.get("instance") != null && !jsonObj.get("instance").isJsonNull()) {
        Instance.validateJsonElement(jsonObj.get("instance"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateInstanceMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateInstanceMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateInstanceMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateInstanceMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateInstanceMetadata>() {
           @Override
           public void write(JsonWriter out, CreateInstanceMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateInstanceMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateInstanceMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateInstanceMetadata
   * @throws IOException if the JSON string is invalid with respect to CreateInstanceMetadata
   */
  public static CreateInstanceMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateInstanceMetadata.class);
  }

  /**
   * Convert an instance of CreateInstanceMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

