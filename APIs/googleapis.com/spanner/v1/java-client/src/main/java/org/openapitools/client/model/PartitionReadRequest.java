/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeySet;
import org.openapitools.client.model.PartitionOptions;
import org.openapitools.client.model.TransactionSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for PartitionRead
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionReadRequest {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<String> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private String index;

  public static final String SERIALIZED_NAME_KEY_SET = "keySet";
  @SerializedName(SERIALIZED_NAME_KEY_SET)
  private KeySet keySet;

  public static final String SERIALIZED_NAME_PARTITION_OPTIONS = "partitionOptions";
  @SerializedName(SERIALIZED_NAME_PARTITION_OPTIONS)
  private PartitionOptions partitionOptions;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private String table;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private TransactionSelector transaction;

  public PartitionReadRequest() {
  }

  public PartitionReadRequest columns(List<String> columns) {
    this.columns = columns;
    return this;
  }

  public PartitionReadRequest addColumnsItem(String columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * The columns of table to be returned for each row matching this request.
   * @return columns
   */
  @javax.annotation.Nullable
  public List<String> getColumns() {
    return columns;
  }

  public void setColumns(List<String> columns) {
    this.columns = columns;
  }


  public PartitionReadRequest index(String index) {
    this.index = index;
    return this;
  }

  /**
   * If non-empty, the name of an index on table. This index is used instead of the table primary key when interpreting key_set and sorting result rows. See key_set for further information.
   * @return index
   */
  @javax.annotation.Nullable
  public String getIndex() {
    return index;
  }

  public void setIndex(String index) {
    this.index = index;
  }


  public PartitionReadRequest keySet(KeySet keySet) {
    this.keySet = keySet;
    return this;
  }

  /**
   * Get keySet
   * @return keySet
   */
  @javax.annotation.Nullable
  public KeySet getKeySet() {
    return keySet;
  }

  public void setKeySet(KeySet keySet) {
    this.keySet = keySet;
  }


  public PartitionReadRequest partitionOptions(PartitionOptions partitionOptions) {
    this.partitionOptions = partitionOptions;
    return this;
  }

  /**
   * Get partitionOptions
   * @return partitionOptions
   */
  @javax.annotation.Nullable
  public PartitionOptions getPartitionOptions() {
    return partitionOptions;
  }

  public void setPartitionOptions(PartitionOptions partitionOptions) {
    this.partitionOptions = partitionOptions;
  }


  public PartitionReadRequest table(String table) {
    this.table = table;
    return this;
  }

  /**
   * Required. The name of the table in the database to be read.
   * @return table
   */
  @javax.annotation.Nullable
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }


  public PartitionReadRequest transaction(TransactionSelector transaction) {
    this.transaction = transaction;
    return this;
  }

  /**
   * Get transaction
   * @return transaction
   */
  @javax.annotation.Nullable
  public TransactionSelector getTransaction() {
    return transaction;
  }

  public void setTransaction(TransactionSelector transaction) {
    this.transaction = transaction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionReadRequest partitionReadRequest = (PartitionReadRequest) o;
    return Objects.equals(this.columns, partitionReadRequest.columns) &&
        Objects.equals(this.index, partitionReadRequest.index) &&
        Objects.equals(this.keySet, partitionReadRequest.keySet) &&
        Objects.equals(this.partitionOptions, partitionReadRequest.partitionOptions) &&
        Objects.equals(this.table, partitionReadRequest.table) &&
        Objects.equals(this.transaction, partitionReadRequest.transaction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, index, keySet, partitionOptions, table, transaction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionReadRequest {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    keySet: ").append(toIndentedString(keySet)).append("\n");
    sb.append("    partitionOptions: ").append(toIndentedString(partitionOptions)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columns");
    openapiFields.add("index");
    openapiFields.add("keySet");
    openapiFields.add("partitionOptions");
    openapiFields.add("table");
    openapiFields.add("transaction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionReadRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionReadRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionReadRequest is not found in the empty JSON string", PartitionReadRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionReadRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionReadRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull() && !jsonObj.get("columns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
      }
      if ((jsonObj.get("index") != null && !jsonObj.get("index").isJsonNull()) && !jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      // validate the optional field `keySet`
      if (jsonObj.get("keySet") != null && !jsonObj.get("keySet").isJsonNull()) {
        KeySet.validateJsonElement(jsonObj.get("keySet"));
      }
      // validate the optional field `partitionOptions`
      if (jsonObj.get("partitionOptions") != null && !jsonObj.get("partitionOptions").isJsonNull()) {
        PartitionOptions.validateJsonElement(jsonObj.get("partitionOptions"));
      }
      if ((jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) && !jsonObj.get("table").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table").toString()));
      }
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        TransactionSelector.validateJsonElement(jsonObj.get("transaction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionReadRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionReadRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionReadRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionReadRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionReadRequest>() {
           @Override
           public void write(JsonWriter out, PartitionReadRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionReadRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionReadRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionReadRequest
   * @throws IOException if the JSON string is invalid with respect to PartitionReadRequest
   */
  public static PartitionReadRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionReadRequest.class);
  }

  /**
   * Convert an instance of PartitionReadRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

