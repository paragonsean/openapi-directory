/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The result of applying a batch of mutations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchWriteResponse {
  public static final String SERIALIZED_NAME_COMMIT_TIMESTAMP = "commitTimestamp";
  @SerializedName(SERIALIZED_NAME_COMMIT_TIMESTAMP)
  private String commitTimestamp;

  public static final String SERIALIZED_NAME_INDEXES = "indexes";
  @SerializedName(SERIALIZED_NAME_INDEXES)
  private List<Integer> indexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public BatchWriteResponse() {
  }

  public BatchWriteResponse commitTimestamp(String commitTimestamp) {
    this.commitTimestamp = commitTimestamp;
    return this;
  }

  /**
   * The commit timestamp of the transaction that applied this batch. Present if &#x60;status&#x60; is &#x60;OK&#x60;, absent otherwise.
   * @return commitTimestamp
   */
  @javax.annotation.Nullable
  public String getCommitTimestamp() {
    return commitTimestamp;
  }

  public void setCommitTimestamp(String commitTimestamp) {
    this.commitTimestamp = commitTimestamp;
  }


  public BatchWriteResponse indexes(List<Integer> indexes) {
    this.indexes = indexes;
    return this;
  }

  public BatchWriteResponse addIndexesItem(Integer indexesItem) {
    if (this.indexes == null) {
      this.indexes = new ArrayList<>();
    }
    this.indexes.add(indexesItem);
    return this;
  }

  /**
   * The mutation groups applied in this batch. The values index into the &#x60;mutation_groups&#x60; field in the corresponding &#x60;BatchWriteRequest&#x60;.
   * @return indexes
   */
  @javax.annotation.Nullable
  public List<Integer> getIndexes() {
    return indexes;
  }

  public void setIndexes(List<Integer> indexes) {
    this.indexes = indexes;
  }


  public BatchWriteResponse status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchWriteResponse batchWriteResponse = (BatchWriteResponse) o;
    return Objects.equals(this.commitTimestamp, batchWriteResponse.commitTimestamp) &&
        Objects.equals(this.indexes, batchWriteResponse.indexes) &&
        Objects.equals(this.status, batchWriteResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitTimestamp, indexes, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchWriteResponse {\n");
    sb.append("    commitTimestamp: ").append(toIndentedString(commitTimestamp)).append("\n");
    sb.append("    indexes: ").append(toIndentedString(indexes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commitTimestamp");
    openapiFields.add("indexes");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchWriteResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchWriteResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchWriteResponse is not found in the empty JSON string", BatchWriteResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchWriteResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchWriteResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commitTimestamp") != null && !jsonObj.get("commitTimestamp").isJsonNull()) && !jsonObj.get("commitTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitTimestamp").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("indexes") != null && !jsonObj.get("indexes").isJsonNull() && !jsonObj.get("indexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexes` to be an array in the JSON string but got `%s`", jsonObj.get("indexes").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchWriteResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchWriteResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchWriteResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchWriteResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchWriteResponse>() {
           @Override
           public void write(JsonWriter out, BatchWriteResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchWriteResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchWriteResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchWriteResponse
   * @throws IOException if the JSON string is invalid with respect to BatchWriteResponse
   */
  public static BatchWriteResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchWriteResponse.class);
  }

  /**
   * Convert an instance of BatchWriteResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

