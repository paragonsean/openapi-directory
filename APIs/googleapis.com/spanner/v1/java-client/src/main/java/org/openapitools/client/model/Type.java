/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StructType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;Type&#x60; indicates the type of a Cloud Spanner value, as might be stored in a table cell or returned from an SQL query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Type {
  public static final String SERIALIZED_NAME_ARRAY_ELEMENT_TYPE = "arrayElementType";
  @SerializedName(SERIALIZED_NAME_ARRAY_ELEMENT_TYPE)
  private Type arrayElementType;

  /**
   * Required. The TypeCode for this type.
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    TYPE_CODE_UNSPECIFIED("TYPE_CODE_UNSPECIFIED"),
    
    BOOL("BOOL"),
    
    INT64("INT64"),
    
    FLOAT64("FLOAT64"),
    
    FLOAT32("FLOAT32"),
    
    TIMESTAMP("TIMESTAMP"),
    
    DATE("DATE"),
    
    STRING("STRING"),
    
    BYTES("BYTES"),
    
    ARRAY("ARRAY"),
    
    STRUCT("STRUCT"),
    
    NUMERIC("NUMERIC"),
    
    JSON("JSON"),
    
    PROTO("PROTO"),
    
    ENUM("ENUM");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_PROTO_TYPE_FQN = "protoTypeFqn";
  @SerializedName(SERIALIZED_NAME_PROTO_TYPE_FQN)
  private String protoTypeFqn;

  public static final String SERIALIZED_NAME_STRUCT_TYPE = "structType";
  @SerializedName(SERIALIZED_NAME_STRUCT_TYPE)
  private StructType structType;

  /**
   * The TypeAnnotationCode that disambiguates SQL type that Spanner will use to represent values of this type during query processing. This is necessary for some type codes because a single TypeCode can be mapped to different SQL types depending on the SQL dialect. type_annotation typically is not needed to process the content of a value (it doesn&#39;t affect serialization) and clients can ignore it on the read path.
   */
  @JsonAdapter(TypeAnnotationEnum.Adapter.class)
  public enum TypeAnnotationEnum {
    TYPE_ANNOTATION_CODE_UNSPECIFIED("TYPE_ANNOTATION_CODE_UNSPECIFIED"),
    
    PG_NUMERIC("PG_NUMERIC"),
    
    PG_JSONB("PG_JSONB");

    private String value;

    TypeAnnotationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeAnnotationEnum fromValue(String value) {
      for (TypeAnnotationEnum b : TypeAnnotationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeAnnotationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeAnnotationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeAnnotationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeAnnotationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeAnnotationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE_ANNOTATION = "typeAnnotation";
  @SerializedName(SERIALIZED_NAME_TYPE_ANNOTATION)
  private TypeAnnotationEnum typeAnnotation;

  public Type() {
  }

  public Type arrayElementType(Type arrayElementType) {
    this.arrayElementType = arrayElementType;
    return this;
  }

  /**
   * Get arrayElementType
   * @return arrayElementType
   */
  @javax.annotation.Nullable
  public Type getArrayElementType() {
    return arrayElementType;
  }

  public void setArrayElementType(Type arrayElementType) {
    this.arrayElementType = arrayElementType;
  }


  public Type code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * Required. The TypeCode for this type.
   * @return code
   */
  @javax.annotation.Nullable
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public Type protoTypeFqn(String protoTypeFqn) {
    this.protoTypeFqn = protoTypeFqn;
    return this;
  }

  /**
   * If code &#x3D;&#x3D; PROTO or code &#x3D;&#x3D; ENUM, then &#x60;proto_type_fqn&#x60; is the fully qualified name of the proto type representing the proto/enum definition.
   * @return protoTypeFqn
   */
  @javax.annotation.Nullable
  public String getProtoTypeFqn() {
    return protoTypeFqn;
  }

  public void setProtoTypeFqn(String protoTypeFqn) {
    this.protoTypeFqn = protoTypeFqn;
  }


  public Type structType(StructType structType) {
    this.structType = structType;
    return this;
  }

  /**
   * Get structType
   * @return structType
   */
  @javax.annotation.Nullable
  public StructType getStructType() {
    return structType;
  }

  public void setStructType(StructType structType) {
    this.structType = structType;
  }


  public Type typeAnnotation(TypeAnnotationEnum typeAnnotation) {
    this.typeAnnotation = typeAnnotation;
    return this;
  }

  /**
   * The TypeAnnotationCode that disambiguates SQL type that Spanner will use to represent values of this type during query processing. This is necessary for some type codes because a single TypeCode can be mapped to different SQL types depending on the SQL dialect. type_annotation typically is not needed to process the content of a value (it doesn&#39;t affect serialization) and clients can ignore it on the read path.
   * @return typeAnnotation
   */
  @javax.annotation.Nullable
  public TypeAnnotationEnum getTypeAnnotation() {
    return typeAnnotation;
  }

  public void setTypeAnnotation(TypeAnnotationEnum typeAnnotation) {
    this.typeAnnotation = typeAnnotation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Type type = (Type) o;
    return Objects.equals(this.arrayElementType, type.arrayElementType) &&
        Objects.equals(this.code, type.code) &&
        Objects.equals(this.protoTypeFqn, type.protoTypeFqn) &&
        Objects.equals(this.structType, type.structType) &&
        Objects.equals(this.typeAnnotation, type.typeAnnotation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrayElementType, code, protoTypeFqn, structType, typeAnnotation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Type {\n");
    sb.append("    arrayElementType: ").append(toIndentedString(arrayElementType)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    protoTypeFqn: ").append(toIndentedString(protoTypeFqn)).append("\n");
    sb.append("    structType: ").append(toIndentedString(structType)).append("\n");
    sb.append("    typeAnnotation: ").append(toIndentedString(typeAnnotation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrayElementType");
    openapiFields.add("code");
    openapiFields.add("protoTypeFqn");
    openapiFields.add("structType");
    openapiFields.add("typeAnnotation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Type
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Type.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Type is not found in the empty JSON string", Type.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Type.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Type` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arrayElementType`
      if (jsonObj.get("arrayElementType") != null && !jsonObj.get("arrayElementType").isJsonNull()) {
        Type.validateJsonElement(jsonObj.get("arrayElementType"));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `code`
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) {
        CodeEnum.validateJsonElement(jsonObj.get("code"));
      }
      if ((jsonObj.get("protoTypeFqn") != null && !jsonObj.get("protoTypeFqn").isJsonNull()) && !jsonObj.get("protoTypeFqn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protoTypeFqn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protoTypeFqn").toString()));
      }
      // validate the optional field `structType`
      if (jsonObj.get("structType") != null && !jsonObj.get("structType").isJsonNull()) {
        StructType.validateJsonElement(jsonObj.get("structType"));
      }
      if ((jsonObj.get("typeAnnotation") != null && !jsonObj.get("typeAnnotation").isJsonNull()) && !jsonObj.get("typeAnnotation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeAnnotation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeAnnotation").toString()));
      }
      // validate the optional field `typeAnnotation`
      if (jsonObj.get("typeAnnotation") != null && !jsonObj.get("typeAnnotation").isJsonNull()) {
        TypeAnnotationEnum.validateJsonElement(jsonObj.get("typeAnnotation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Type.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Type' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Type> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Type.class));

       return (TypeAdapter<T>) new TypeAdapter<Type>() {
           @Override
           public void write(JsonWriter out, Type value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Type read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Type given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Type
   * @throws IOException if the JSON string is invalid with respect to Type
   */
  public static Type fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Type.class);
  }

  /**
   * Convert an instance of Type to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

