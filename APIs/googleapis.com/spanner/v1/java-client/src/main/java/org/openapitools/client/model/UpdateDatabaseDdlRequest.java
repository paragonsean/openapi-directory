/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Enqueues the given DDL statements to be applied, in order but not necessarily all at once, to the database schema at some point (or points) in the future. The server checks that the statements are executable (syntactically valid, name tables that exist, etc.) before enqueueing them, but they may still fail upon later execution (e.g., if a statement from another batch of statements is applied first and it conflicts in some way, or if there is some data-related problem like a &#x60;NULL&#x60; value in a column to which &#x60;NOT NULL&#x60; would be added). If a statement fails, all subsequent statements in the batch are automatically cancelled. Each batch of statements is assigned a name which can be used with the Operations API to monitor progress. See the operation_id field for more details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDatabaseDdlRequest {
  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_PROTO_DESCRIPTORS = "protoDescriptors";
  @SerializedName(SERIALIZED_NAME_PROTO_DESCRIPTORS)
  private byte[] protoDescriptors;

  public static final String SERIALIZED_NAME_STATEMENTS = "statements";
  @SerializedName(SERIALIZED_NAME_STATEMENTS)
  private List<String> statements = new ArrayList<>();

  public UpdateDatabaseDdlRequest() {
  }

  public UpdateDatabaseDdlRequest operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * If empty, the new update request is assigned an automatically-generated operation ID. Otherwise, &#x60;operation_id&#x60; is used to construct the name of the resulting Operation. Specifying an explicit operation ID simplifies determining whether the statements were executed in the event that the UpdateDatabaseDdl call is replayed, or the return value is otherwise lost: the database and &#x60;operation_id&#x60; fields can be combined to form the name of the resulting longrunning.Operation: &#x60;/operations/&#x60;. &#x60;operation_id&#x60; should be unique within the database, and must be a valid identifier: &#x60;a-z*&#x60;. Note that automatically-generated operation IDs always begin with an underscore. If the named operation already exists, UpdateDatabaseDdl returns &#x60;ALREADY_EXISTS&#x60;.
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public UpdateDatabaseDdlRequest protoDescriptors(byte[] protoDescriptors) {
    this.protoDescriptors = protoDescriptors;
    return this;
  }

  /**
   * Optional. Proto descriptors used by CREATE/ALTER PROTO BUNDLE statements. Contains a protobuf-serialized [google.protobuf.FileDescriptorSet](https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto). To generate it, [install](https://grpc.io/docs/protoc-installation/) and run &#x60;protoc&#x60; with --include_imports and --descriptor_set_out. For example, to generate for moon/shot/app.proto, run &#x60;&#x60;&#x60; $protoc --proto_path&#x3D;/app_path --proto_path&#x3D;/lib_path \\ --include_imports \\ --descriptor_set_out&#x3D;descriptors.data \\ moon/shot/app.proto &#x60;&#x60;&#x60; For more details, see protobuffer [self description](https://developers.google.com/protocol-buffers/docs/techniques#self-description).
   * @return protoDescriptors
   */
  @javax.annotation.Nullable
  public byte[] getProtoDescriptors() {
    return protoDescriptors;
  }

  public void setProtoDescriptors(byte[] protoDescriptors) {
    this.protoDescriptors = protoDescriptors;
  }


  public UpdateDatabaseDdlRequest statements(List<String> statements) {
    this.statements = statements;
    return this;
  }

  public UpdateDatabaseDdlRequest addStatementsItem(String statementsItem) {
    if (this.statements == null) {
      this.statements = new ArrayList<>();
    }
    this.statements.add(statementsItem);
    return this;
  }

  /**
   * Required. DDL statements to be applied to the database.
   * @return statements
   */
  @javax.annotation.Nullable
  public List<String> getStatements() {
    return statements;
  }

  public void setStatements(List<String> statements) {
    this.statements = statements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDatabaseDdlRequest updateDatabaseDdlRequest = (UpdateDatabaseDdlRequest) o;
    return Objects.equals(this.operationId, updateDatabaseDdlRequest.operationId) &&
        Arrays.equals(this.protoDescriptors, updateDatabaseDdlRequest.protoDescriptors) &&
        Objects.equals(this.statements, updateDatabaseDdlRequest.statements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operationId, Arrays.hashCode(protoDescriptors), statements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDatabaseDdlRequest {\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    protoDescriptors: ").append(toIndentedString(protoDescriptors)).append("\n");
    sb.append("    statements: ").append(toIndentedString(statements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("operationId");
    openapiFields.add("protoDescriptors");
    openapiFields.add("statements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDatabaseDdlRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDatabaseDdlRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDatabaseDdlRequest is not found in the empty JSON string", UpdateDatabaseDdlRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDatabaseDdlRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDatabaseDdlRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statements") != null && !jsonObj.get("statements").isJsonNull() && !jsonObj.get("statements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statements` to be an array in the JSON string but got `%s`", jsonObj.get("statements").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDatabaseDdlRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDatabaseDdlRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDatabaseDdlRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDatabaseDdlRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDatabaseDdlRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDatabaseDdlRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDatabaseDdlRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDatabaseDdlRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDatabaseDdlRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDatabaseDdlRequest
   */
  public static UpdateDatabaseDdlRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDatabaseDdlRequest.class);
  }

  /**
   * Convert an instance of UpdateDatabaseDdlRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

