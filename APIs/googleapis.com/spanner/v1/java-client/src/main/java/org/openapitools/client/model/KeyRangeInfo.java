/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContextValue;
import org.openapitools.client.model.LocalizedString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A message representing information for a key range (possibly one key).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeyRangeInfo {
  public static final String SERIALIZED_NAME_CONTEXT_VALUES = "contextValues";
  @SerializedName(SERIALIZED_NAME_CONTEXT_VALUES)
  private List<ContextValue> contextValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_KEY_INDEX = "endKeyIndex";
  @SerializedName(SERIALIZED_NAME_END_KEY_INDEX)
  private Integer endKeyIndex;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private LocalizedString info;

  public static final String SERIALIZED_NAME_KEYS_COUNT = "keysCount";
  @SerializedName(SERIALIZED_NAME_KEYS_COUNT)
  private String keysCount;

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private LocalizedString metric;

  public static final String SERIALIZED_NAME_START_KEY_INDEX = "startKeyIndex";
  @SerializedName(SERIALIZED_NAME_START_KEY_INDEX)
  private Integer startKeyIndex;

  public static final String SERIALIZED_NAME_TIME_OFFSET = "timeOffset";
  @SerializedName(SERIALIZED_NAME_TIME_OFFSET)
  private String timeOffset;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private LocalizedString unit;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Float value;

  public KeyRangeInfo() {
  }

  public KeyRangeInfo contextValues(List<ContextValue> contextValues) {
    this.contextValues = contextValues;
    return this;
  }

  public KeyRangeInfo addContextValuesItem(ContextValue contextValuesItem) {
    if (this.contextValues == null) {
      this.contextValues = new ArrayList<>();
    }
    this.contextValues.add(contextValuesItem);
    return this;
  }

  /**
   * The list of context values for this key range.
   * @return contextValues
   */
  @javax.annotation.Nullable
  public List<ContextValue> getContextValues() {
    return contextValues;
  }

  public void setContextValues(List<ContextValue> contextValues) {
    this.contextValues = contextValues;
  }


  public KeyRangeInfo endKeyIndex(Integer endKeyIndex) {
    this.endKeyIndex = endKeyIndex;
    return this;
  }

  /**
   * The index of the end key in indexed_keys.
   * @return endKeyIndex
   */
  @javax.annotation.Nullable
  public Integer getEndKeyIndex() {
    return endKeyIndex;
  }

  public void setEndKeyIndex(Integer endKeyIndex) {
    this.endKeyIndex = endKeyIndex;
  }


  public KeyRangeInfo info(LocalizedString info) {
    this.info = info;
    return this;
  }

  /**
   * Get info
   * @return info
   */
  @javax.annotation.Nullable
  public LocalizedString getInfo() {
    return info;
  }

  public void setInfo(LocalizedString info) {
    this.info = info;
  }


  public KeyRangeInfo keysCount(String keysCount) {
    this.keysCount = keysCount;
    return this;
  }

  /**
   * The number of keys this range covers.
   * @return keysCount
   */
  @javax.annotation.Nullable
  public String getKeysCount() {
    return keysCount;
  }

  public void setKeysCount(String keysCount) {
    this.keysCount = keysCount;
  }


  public KeyRangeInfo metric(LocalizedString metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Get metric
   * @return metric
   */
  @javax.annotation.Nullable
  public LocalizedString getMetric() {
    return metric;
  }

  public void setMetric(LocalizedString metric) {
    this.metric = metric;
  }


  public KeyRangeInfo startKeyIndex(Integer startKeyIndex) {
    this.startKeyIndex = startKeyIndex;
    return this;
  }

  /**
   * The index of the start key in indexed_keys.
   * @return startKeyIndex
   */
  @javax.annotation.Nullable
  public Integer getStartKeyIndex() {
    return startKeyIndex;
  }

  public void setStartKeyIndex(Integer startKeyIndex) {
    this.startKeyIndex = startKeyIndex;
  }


  public KeyRangeInfo timeOffset(String timeOffset) {
    this.timeOffset = timeOffset;
    return this;
  }

  /**
   * The time offset. This is the time since the start of the time interval.
   * @return timeOffset
   */
  @javax.annotation.Nullable
  public String getTimeOffset() {
    return timeOffset;
  }

  public void setTimeOffset(String timeOffset) {
    this.timeOffset = timeOffset;
  }


  public KeyRangeInfo unit(LocalizedString unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public LocalizedString getUnit() {
    return unit;
  }

  public void setUnit(LocalizedString unit) {
    this.unit = unit;
  }


  public KeyRangeInfo value(Float value) {
    this.value = value;
    return this;
  }

  /**
   * The value of the metric.
   * @return value
   */
  @javax.annotation.Nullable
  public Float getValue() {
    return value;
  }

  public void setValue(Float value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyRangeInfo keyRangeInfo = (KeyRangeInfo) o;
    return Objects.equals(this.contextValues, keyRangeInfo.contextValues) &&
        Objects.equals(this.endKeyIndex, keyRangeInfo.endKeyIndex) &&
        Objects.equals(this.info, keyRangeInfo.info) &&
        Objects.equals(this.keysCount, keyRangeInfo.keysCount) &&
        Objects.equals(this.metric, keyRangeInfo.metric) &&
        Objects.equals(this.startKeyIndex, keyRangeInfo.startKeyIndex) &&
        Objects.equals(this.timeOffset, keyRangeInfo.timeOffset) &&
        Objects.equals(this.unit, keyRangeInfo.unit) &&
        Objects.equals(this.value, keyRangeInfo.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contextValues, endKeyIndex, info, keysCount, metric, startKeyIndex, timeOffset, unit, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyRangeInfo {\n");
    sb.append("    contextValues: ").append(toIndentedString(contextValues)).append("\n");
    sb.append("    endKeyIndex: ").append(toIndentedString(endKeyIndex)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    keysCount: ").append(toIndentedString(keysCount)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    startKeyIndex: ").append(toIndentedString(startKeyIndex)).append("\n");
    sb.append("    timeOffset: ").append(toIndentedString(timeOffset)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contextValues");
    openapiFields.add("endKeyIndex");
    openapiFields.add("info");
    openapiFields.add("keysCount");
    openapiFields.add("metric");
    openapiFields.add("startKeyIndex");
    openapiFields.add("timeOffset");
    openapiFields.add("unit");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeyRangeInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeyRangeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyRangeInfo is not found in the empty JSON string", KeyRangeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeyRangeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyRangeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("contextValues") != null && !jsonObj.get("contextValues").isJsonNull()) {
        JsonArray jsonArraycontextValues = jsonObj.getAsJsonArray("contextValues");
        if (jsonArraycontextValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contextValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contextValues` to be an array in the JSON string but got `%s`", jsonObj.get("contextValues").toString()));
          }

          // validate the optional field `contextValues` (array)
          for (int i = 0; i < jsonArraycontextValues.size(); i++) {
            ContextValue.validateJsonElement(jsonArraycontextValues.get(i));
          };
        }
      }
      // validate the optional field `info`
      if (jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("info"));
      }
      if ((jsonObj.get("keysCount") != null && !jsonObj.get("keysCount").isJsonNull()) && !jsonObj.get("keysCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keysCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keysCount").toString()));
      }
      // validate the optional field `metric`
      if (jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("metric"));
      }
      if ((jsonObj.get("timeOffset") != null && !jsonObj.get("timeOffset").isJsonNull()) && !jsonObj.get("timeOffset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeOffset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeOffset").toString()));
      }
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyRangeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyRangeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyRangeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyRangeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyRangeInfo>() {
           @Override
           public void write(JsonWriter out, KeyRangeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyRangeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeyRangeInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeyRangeInfo
   * @throws IOException if the JSON string is invalid with respect to KeyRangeInfo
   */
  public static KeyRangeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyRangeInfo.class);
  }

  /**
   * Convert an instance of KeyRangeInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

