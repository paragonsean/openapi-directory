/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options for a PartitionQueryRequest and PartitionReadRequest.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionOptions {
  public static final String SERIALIZED_NAME_MAX_PARTITIONS = "maxPartitions";
  @SerializedName(SERIALIZED_NAME_MAX_PARTITIONS)
  private String maxPartitions;

  public static final String SERIALIZED_NAME_PARTITION_SIZE_BYTES = "partitionSizeBytes";
  @SerializedName(SERIALIZED_NAME_PARTITION_SIZE_BYTES)
  private String partitionSizeBytes;

  public PartitionOptions() {
  }

  public PartitionOptions maxPartitions(String maxPartitions) {
    this.maxPartitions = maxPartitions;
    return this;
  }

  /**
   * **Note:** This hint is currently ignored by PartitionQuery and PartitionRead requests. The desired maximum number of partitions to return. For example, this may be set to the number of workers available. The default for this option is currently 10,000. The maximum value is currently 200,000. This is only a hint. The actual number of partitions returned may be smaller or larger than this maximum count request.
   * @return maxPartitions
   */
  @javax.annotation.Nullable
  public String getMaxPartitions() {
    return maxPartitions;
  }

  public void setMaxPartitions(String maxPartitions) {
    this.maxPartitions = maxPartitions;
  }


  public PartitionOptions partitionSizeBytes(String partitionSizeBytes) {
    this.partitionSizeBytes = partitionSizeBytes;
    return this;
  }

  /**
   * **Note:** This hint is currently ignored by PartitionQuery and PartitionRead requests. The desired data size for each partition generated. The default for this option is currently 1 GiB. This is only a hint. The actual size of each partition may be smaller or larger than this size request.
   * @return partitionSizeBytes
   */
  @javax.annotation.Nullable
  public String getPartitionSizeBytes() {
    return partitionSizeBytes;
  }

  public void setPartitionSizeBytes(String partitionSizeBytes) {
    this.partitionSizeBytes = partitionSizeBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionOptions partitionOptions = (PartitionOptions) o;
    return Objects.equals(this.maxPartitions, partitionOptions.maxPartitions) &&
        Objects.equals(this.partitionSizeBytes, partitionOptions.partitionSizeBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxPartitions, partitionSizeBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionOptions {\n");
    sb.append("    maxPartitions: ").append(toIndentedString(maxPartitions)).append("\n");
    sb.append("    partitionSizeBytes: ").append(toIndentedString(partitionSizeBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxPartitions");
    openapiFields.add("partitionSizeBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionOptions is not found in the empty JSON string", PartitionOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maxPartitions") != null && !jsonObj.get("maxPartitions").isJsonNull()) && !jsonObj.get("maxPartitions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxPartitions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxPartitions").toString()));
      }
      if ((jsonObj.get("partitionSizeBytes") != null && !jsonObj.get("partitionSizeBytes").isJsonNull()) && !jsonObj.get("partitionSizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partitionSizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partitionSizeBytes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionOptions>() {
           @Override
           public void write(JsonWriter out, PartitionOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionOptions
   * @throws IOException if the JSON string is invalid with respect to PartitionOptions
   */
  public static PartitionOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionOptions.class);
  }

  /**
   * Convert an instance of PartitionOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

