/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ChildLink;
import org.openapitools.client.model.ShortRepresentation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Node information for nodes appearing in a QueryPlan.plan_nodes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlanNode {
  public static final String SERIALIZED_NAME_CHILD_LINKS = "childLinks";
  @SerializedName(SERIALIZED_NAME_CHILD_LINKS)
  private List<ChildLink> childLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXECUTION_STATS = "executionStats";
  @SerializedName(SERIALIZED_NAME_EXECUTION_STATS)
  private Map<String, Object> executionStats = new HashMap<>();

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  /**
   * Used to determine the type of node. May be needed for visualizing different kinds of nodes differently. For example, If the node is a SCALAR node, it will have a condensed representation which can be used to directly embed a description of the node in its parent.
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    KIND_UNSPECIFIED("KIND_UNSPECIFIED"),
    
    RELATIONAL("RELATIONAL"),
    
    SCALAR("SCALAR");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, Object> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_SHORT_REPRESENTATION = "shortRepresentation";
  @SerializedName(SERIALIZED_NAME_SHORT_REPRESENTATION)
  private ShortRepresentation shortRepresentation;

  public PlanNode() {
  }

  public PlanNode childLinks(List<ChildLink> childLinks) {
    this.childLinks = childLinks;
    return this;
  }

  public PlanNode addChildLinksItem(ChildLink childLinksItem) {
    if (this.childLinks == null) {
      this.childLinks = new ArrayList<>();
    }
    this.childLinks.add(childLinksItem);
    return this;
  }

  /**
   * List of child node &#x60;index&#x60;es and their relationship to this parent.
   * @return childLinks
   */
  @javax.annotation.Nullable
  public List<ChildLink> getChildLinks() {
    return childLinks;
  }

  public void setChildLinks(List<ChildLink> childLinks) {
    this.childLinks = childLinks;
  }


  public PlanNode displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name for the node.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public PlanNode executionStats(Map<String, Object> executionStats) {
    this.executionStats = executionStats;
    return this;
  }

  public PlanNode putExecutionStatsItem(String key, Object executionStatsItem) {
    if (this.executionStats == null) {
      this.executionStats = new HashMap<>();
    }
    this.executionStats.put(key, executionStatsItem);
    return this;
  }

  /**
   * The execution statistics associated with the node, contained in a group of key-value pairs. Only present if the plan was returned as a result of a profile query. For example, number of executions, number of rows/time per execution etc.
   * @return executionStats
   */
  @javax.annotation.Nullable
  public Map<String, Object> getExecutionStats() {
    return executionStats;
  }

  public void setExecutionStats(Map<String, Object> executionStats) {
    this.executionStats = executionStats;
  }


  public PlanNode index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The &#x60;PlanNode&#x60;&#39;s index in node list.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public PlanNode kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Used to determine the type of node. May be needed for visualizing different kinds of nodes differently. For example, If the node is a SCALAR node, it will have a condensed representation which can be used to directly embed a description of the node in its parent.
   * @return kind
   */
  @javax.annotation.Nullable
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public PlanNode metadata(Map<String, Object> metadata) {
    this.metadata = metadata;
    return this;
  }

  public PlanNode putMetadataItem(String key, Object metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Attributes relevant to the node contained in a group of key-value pairs. For example, a Parameter Reference node could have the following information in its metadata: { \&quot;parameter_reference\&quot;: \&quot;param1\&quot;, \&quot;parameter_type\&quot;: \&quot;array\&quot; }
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, Object> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, Object> metadata) {
    this.metadata = metadata;
  }


  public PlanNode shortRepresentation(ShortRepresentation shortRepresentation) {
    this.shortRepresentation = shortRepresentation;
    return this;
  }

  /**
   * Get shortRepresentation
   * @return shortRepresentation
   */
  @javax.annotation.Nullable
  public ShortRepresentation getShortRepresentation() {
    return shortRepresentation;
  }

  public void setShortRepresentation(ShortRepresentation shortRepresentation) {
    this.shortRepresentation = shortRepresentation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanNode planNode = (PlanNode) o;
    return Objects.equals(this.childLinks, planNode.childLinks) &&
        Objects.equals(this.displayName, planNode.displayName) &&
        Objects.equals(this.executionStats, planNode.executionStats) &&
        Objects.equals(this.index, planNode.index) &&
        Objects.equals(this.kind, planNode.kind) &&
        Objects.equals(this.metadata, planNode.metadata) &&
        Objects.equals(this.shortRepresentation, planNode.shortRepresentation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childLinks, displayName, executionStats, index, kind, metadata, shortRepresentation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanNode {\n");
    sb.append("    childLinks: ").append(toIndentedString(childLinks)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    executionStats: ").append(toIndentedString(executionStats)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    shortRepresentation: ").append(toIndentedString(shortRepresentation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("childLinks");
    openapiFields.add("displayName");
    openapiFields.add("executionStats");
    openapiFields.add("index");
    openapiFields.add("kind");
    openapiFields.add("metadata");
    openapiFields.add("shortRepresentation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlanNode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlanNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlanNode is not found in the empty JSON string", PlanNode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlanNode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlanNode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("childLinks") != null && !jsonObj.get("childLinks").isJsonNull()) {
        JsonArray jsonArraychildLinks = jsonObj.getAsJsonArray("childLinks");
        if (jsonArraychildLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childLinks` to be an array in the JSON string but got `%s`", jsonObj.get("childLinks").toString()));
          }

          // validate the optional field `childLinks` (array)
          for (int i = 0; i < jsonArraychildLinks.size(); i++) {
            ChildLink.validateJsonElement(jsonArraychildLinks.get(i));
          };
        }
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        KindEnum.validateJsonElement(jsonObj.get("kind"));
      }
      // validate the optional field `shortRepresentation`
      if (jsonObj.get("shortRepresentation") != null && !jsonObj.get("shortRepresentation").isJsonNull()) {
        ShortRepresentation.validateJsonElement(jsonObj.get("shortRepresentation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlanNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlanNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlanNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlanNode.class));

       return (TypeAdapter<T>) new TypeAdapter<PlanNode>() {
           @Override
           public void write(JsonWriter out, PlanNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlanNode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlanNode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlanNode
   * @throws IOException if the JSON string is invalid with respect to PlanNode
   */
  public static PlanNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlanNode.class);
  }

  /**
   * Convert an instance of PlanNode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

