/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResultSetMetadata;
import org.openapitools.client.model.ResultSetStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Partial results from a streaming read or SQL query. Streaming reads and SQL queries better tolerate large result sets, large rows, and large values, but are a little trickier to consume.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartialResultSet {
  public static final String SERIALIZED_NAME_CHUNKED_VALUE = "chunkedValue";
  @SerializedName(SERIALIZED_NAME_CHUNKED_VALUE)
  private Boolean chunkedValue;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ResultSetMetadata metadata;

  public static final String SERIALIZED_NAME_RESUME_TOKEN = "resumeToken";
  @SerializedName(SERIALIZED_NAME_RESUME_TOKEN)
  private byte[] resumeToken;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private ResultSetStats stats;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<Object> values = new ArrayList<>();

  public PartialResultSet() {
  }

  public PartialResultSet chunkedValue(Boolean chunkedValue) {
    this.chunkedValue = chunkedValue;
    return this;
  }

  /**
   * If true, then the final value in values is chunked, and must be combined with more values from subsequent &#x60;PartialResultSet&#x60;s to obtain a complete field value.
   * @return chunkedValue
   */
  @javax.annotation.Nullable
  public Boolean getChunkedValue() {
    return chunkedValue;
  }

  public void setChunkedValue(Boolean chunkedValue) {
    this.chunkedValue = chunkedValue;
  }


  public PartialResultSet metadata(ResultSetMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public ResultSetMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(ResultSetMetadata metadata) {
    this.metadata = metadata;
  }


  public PartialResultSet resumeToken(byte[] resumeToken) {
    this.resumeToken = resumeToken;
    return this;
  }

  /**
   * Streaming calls might be interrupted for a variety of reasons, such as TCP connection loss. If this occurs, the stream of results can be resumed by re-sending the original request and including &#x60;resume_token&#x60;. Note that executing any other transaction in the same session invalidates the token.
   * @return resumeToken
   */
  @javax.annotation.Nullable
  public byte[] getResumeToken() {
    return resumeToken;
  }

  public void setResumeToken(byte[] resumeToken) {
    this.resumeToken = resumeToken;
  }


  public PartialResultSet stats(ResultSetStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public ResultSetStats getStats() {
    return stats;
  }

  public void setStats(ResultSetStats stats) {
    this.stats = stats;
  }


  public PartialResultSet values(List<Object> values) {
    this.values = values;
    return this;
  }

  public PartialResultSet addValuesItem(Object valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * A streamed result set consists of a stream of values, which might be split into many &#x60;PartialResultSet&#x60; messages to accommodate large rows and/or large values. Every N complete values defines a row, where N is equal to the number of entries in metadata.row_type.fields. Most values are encoded based on type as described here. It is possible that the last value in values is \&quot;chunked\&quot;, meaning that the rest of the value is sent in subsequent &#x60;PartialResultSet&#x60;(s). This is denoted by the chunked_value field. Two or more chunked values can be merged to form a complete value as follows: * &#x60;bool/number/null&#x60;: cannot be chunked * &#x60;string&#x60;: concatenate the strings * &#x60;list&#x60;: concatenate the lists. If the last element in a list is a &#x60;string&#x60;, &#x60;list&#x60;, or &#x60;object&#x60;, merge it with the first element in the next list by applying these rules recursively. * &#x60;object&#x60;: concatenate the (field name, field value) pairs. If a field name is duplicated, then apply these rules recursively to merge the field values. Some examples of merging: # Strings are concatenated. \&quot;foo\&quot;, \&quot;bar\&quot; &#x3D;&gt; \&quot;foobar\&quot; # Lists of non-strings are concatenated. [2, 3], [4] &#x3D;&gt; [2, 3, 4] # Lists are concatenated, but the last and first elements are merged # because they are strings. [\&quot;a\&quot;, \&quot;b\&quot;], [\&quot;c\&quot;, \&quot;d\&quot;] &#x3D;&gt; [\&quot;a\&quot;, \&quot;bc\&quot;, \&quot;d\&quot;] # Lists are concatenated, but the last and first elements are merged # because they are lists. Recursively, the last and first elements # of the inner lists are merged because they are strings. [\&quot;a\&quot;, [\&quot;b\&quot;, \&quot;c\&quot;]], [[\&quot;d\&quot;], \&quot;e\&quot;] &#x3D;&gt; [\&quot;a\&quot;, [\&quot;b\&quot;, \&quot;cd\&quot;], \&quot;e\&quot;] # Non-overlapping object fields are combined. {\&quot;a\&quot;: \&quot;1\&quot;}, {\&quot;b\&quot;: \&quot;2\&quot;} &#x3D;&gt; {\&quot;a\&quot;: \&quot;1\&quot;, \&quot;b\&quot;: 2\&quot;} # Overlapping object fields are merged. {\&quot;a\&quot;: \&quot;1\&quot;}, {\&quot;a\&quot;: \&quot;2\&quot;} &#x3D;&gt; {\&quot;a\&quot;: \&quot;12\&quot;} # Examples of merging objects containing lists of strings. {\&quot;a\&quot;: [\&quot;1\&quot;]}, {\&quot;a\&quot;: [\&quot;2\&quot;]} &#x3D;&gt; {\&quot;a\&quot;: [\&quot;12\&quot;]} For a more complete example, suppose a streaming SQL query is yielding a result set whose rows contain a single string field. The following &#x60;PartialResultSet&#x60;s might be yielded: { \&quot;metadata\&quot;: { ... } \&quot;values\&quot;: [\&quot;Hello\&quot;, \&quot;W\&quot;] \&quot;chunked_value\&quot;: true \&quot;resume_token\&quot;: \&quot;Af65...\&quot; } { \&quot;values\&quot;: [\&quot;orl\&quot;] \&quot;chunked_value\&quot;: true } { \&quot;values\&quot;: [\&quot;d\&quot;] \&quot;resume_token\&quot;: \&quot;Zx1B...\&quot; } This sequence of &#x60;PartialResultSet&#x60;s encodes two rows, one containing the field value &#x60;\&quot;Hello\&quot;&#x60;, and a second containing the field value &#x60;\&quot;World\&quot; &#x3D; \&quot;W\&quot; + \&quot;orl\&quot; + \&quot;d\&quot;&#x60;. Not all &#x60;PartialResultSet&#x60;s contain a &#x60;resume_token&#x60;. Execution can only be resumed from a previously yielded &#x60;resume_token&#x60;. For the above sequence of &#x60;PartialResultSet&#x60;s, resuming the query with &#x60;\&quot;resume_token\&quot;: \&quot;Af65...\&quot;&#x60; will yield results from the &#x60;PartialResultSet&#x60; with value &#x60;[\&quot;orl\&quot;]&#x60;.
   * @return values
   */
  @javax.annotation.Nullable
  public List<Object> getValues() {
    return values;
  }

  public void setValues(List<Object> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartialResultSet partialResultSet = (PartialResultSet) o;
    return Objects.equals(this.chunkedValue, partialResultSet.chunkedValue) &&
        Objects.equals(this.metadata, partialResultSet.metadata) &&
        Arrays.equals(this.resumeToken, partialResultSet.resumeToken) &&
        Objects.equals(this.stats, partialResultSet.stats) &&
        Objects.equals(this.values, partialResultSet.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chunkedValue, metadata, Arrays.hashCode(resumeToken), stats, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartialResultSet {\n");
    sb.append("    chunkedValue: ").append(toIndentedString(chunkedValue)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    resumeToken: ").append(toIndentedString(resumeToken)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chunkedValue");
    openapiFields.add("metadata");
    openapiFields.add("resumeToken");
    openapiFields.add("stats");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartialResultSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartialResultSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartialResultSet is not found in the empty JSON string", PartialResultSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartialResultSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartialResultSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        ResultSetMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        ResultSetStats.validateJsonElement(jsonObj.get("stats"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartialResultSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartialResultSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartialResultSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartialResultSet.class));

       return (TypeAdapter<T>) new TypeAdapter<PartialResultSet>() {
           @Override
           public void write(JsonWriter out, PartialResultSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartialResultSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartialResultSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartialResultSet
   * @throws IOException if the JSON string is invalid with respect to PartialResultSet
   */
  public static PartialResultSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartialResultSet.class);
  }

  /**
   * Convert an instance of PartialResultSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

