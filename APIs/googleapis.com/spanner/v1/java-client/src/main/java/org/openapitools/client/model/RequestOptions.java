/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Common request options for various APIs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestOptions {
  /**
   * Priority for the request.
   */
  @JsonAdapter(PriorityEnum.Adapter.class)
  public enum PriorityEnum {
    UNSPECIFIED("PRIORITY_UNSPECIFIED"),
    
    LOW("PRIORITY_LOW"),
    
    MEDIUM("PRIORITY_MEDIUM"),
    
    HIGH("PRIORITY_HIGH");

    private String value;

    PriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriorityEnum fromValue(String value) {
      for (PriorityEnum b : PriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriorityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PriorityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private PriorityEnum priority;

  public static final String SERIALIZED_NAME_REQUEST_TAG = "requestTag";
  @SerializedName(SERIALIZED_NAME_REQUEST_TAG)
  private String requestTag;

  public static final String SERIALIZED_NAME_TRANSACTION_TAG = "transactionTag";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TAG)
  private String transactionTag;

  public RequestOptions() {
  }

  public RequestOptions priority(PriorityEnum priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Priority for the request.
   * @return priority
   */
  @javax.annotation.Nullable
  public PriorityEnum getPriority() {
    return priority;
  }

  public void setPriority(PriorityEnum priority) {
    this.priority = priority;
  }


  public RequestOptions requestTag(String requestTag) {
    this.requestTag = requestTag;
    return this;
  }

  /**
   * A per-request tag which can be applied to queries or reads, used for statistics collection. Both request_tag and transaction_tag can be specified for a read or query that belongs to a transaction. This field is ignored for requests where it&#39;s not applicable (e.g. CommitRequest). Legal characters for &#x60;request_tag&#x60; values are all printable characters (ASCII 32 - 126) and the length of a request_tag is limited to 50 characters. Values that exceed this limit are truncated. Any leading underscore (_) characters will be removed from the string.
   * @return requestTag
   */
  @javax.annotation.Nullable
  public String getRequestTag() {
    return requestTag;
  }

  public void setRequestTag(String requestTag) {
    this.requestTag = requestTag;
  }


  public RequestOptions transactionTag(String transactionTag) {
    this.transactionTag = transactionTag;
    return this;
  }

  /**
   * A tag used for statistics collection about this transaction. Both request_tag and transaction_tag can be specified for a read or query that belongs to a transaction. The value of transaction_tag should be the same for all requests belonging to the same transaction. If this request doesn&#39;t belong to any transaction, transaction_tag will be ignored. Legal characters for &#x60;transaction_tag&#x60; values are all printable characters (ASCII 32 - 126) and the length of a transaction_tag is limited to 50 characters. Values that exceed this limit are truncated. Any leading underscore (_) characters will be removed from the string.
   * @return transactionTag
   */
  @javax.annotation.Nullable
  public String getTransactionTag() {
    return transactionTag;
  }

  public void setTransactionTag(String transactionTag) {
    this.transactionTag = transactionTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestOptions requestOptions = (RequestOptions) o;
    return Objects.equals(this.priority, requestOptions.priority) &&
        Objects.equals(this.requestTag, requestOptions.requestTag) &&
        Objects.equals(this.transactionTag, requestOptions.transactionTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(priority, requestTag, transactionTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestOptions {\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    requestTag: ").append(toIndentedString(requestTag)).append("\n");
    sb.append("    transactionTag: ").append(toIndentedString(transactionTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("priority");
    openapiFields.add("requestTag");
    openapiFields.add("transactionTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestOptions is not found in the empty JSON string", RequestOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      // validate the optional field `priority`
      if (jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) {
        PriorityEnum.validateJsonElement(jsonObj.get("priority"));
      }
      if ((jsonObj.get("requestTag") != null && !jsonObj.get("requestTag").isJsonNull()) && !jsonObj.get("requestTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestTag").toString()));
      }
      if ((jsonObj.get("transactionTag") != null && !jsonObj.get("transactionTag").isJsonNull()) && !jsonObj.get("transactionTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionTag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestOptions>() {
           @Override
           public void write(JsonWriter out, RequestOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestOptions
   * @throws IOException if the JSON string is invalid with respect to RequestOptions
   */
  public static RequestOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestOptions.class);
  }

  /**
   * Convert an instance of RequestOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

