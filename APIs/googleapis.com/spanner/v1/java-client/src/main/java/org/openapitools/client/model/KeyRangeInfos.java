/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeyRangeInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A message representing a list of specific information for multiple key ranges.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeyRangeInfos {
  public static final String SERIALIZED_NAME_INFOS = "infos";
  @SerializedName(SERIALIZED_NAME_INFOS)
  private List<KeyRangeInfo> infos = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_SIZE = "totalSize";
  @SerializedName(SERIALIZED_NAME_TOTAL_SIZE)
  private Integer totalSize;

  public KeyRangeInfos() {
  }

  public KeyRangeInfos infos(List<KeyRangeInfo> infos) {
    this.infos = infos;
    return this;
  }

  public KeyRangeInfos addInfosItem(KeyRangeInfo infosItem) {
    if (this.infos == null) {
      this.infos = new ArrayList<>();
    }
    this.infos.add(infosItem);
    return this;
  }

  /**
   * The list individual KeyRangeInfos.
   * @return infos
   */
  @javax.annotation.Nullable
  public List<KeyRangeInfo> getInfos() {
    return infos;
  }

  public void setInfos(List<KeyRangeInfo> infos) {
    this.infos = infos;
  }


  public KeyRangeInfos totalSize(Integer totalSize) {
    this.totalSize = totalSize;
    return this;
  }

  /**
   * The total size of the list of all KeyRangeInfos. This may be larger than the number of repeated messages above. If that is the case, this number may be used to determine how many are not being shown.
   * @return totalSize
   */
  @javax.annotation.Nullable
  public Integer getTotalSize() {
    return totalSize;
  }

  public void setTotalSize(Integer totalSize) {
    this.totalSize = totalSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyRangeInfos keyRangeInfos = (KeyRangeInfos) o;
    return Objects.equals(this.infos, keyRangeInfos.infos) &&
        Objects.equals(this.totalSize, keyRangeInfos.totalSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(infos, totalSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyRangeInfos {\n");
    sb.append("    infos: ").append(toIndentedString(infos)).append("\n");
    sb.append("    totalSize: ").append(toIndentedString(totalSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("infos");
    openapiFields.add("totalSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeyRangeInfos
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeyRangeInfos.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyRangeInfos is not found in the empty JSON string", KeyRangeInfos.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeyRangeInfos.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyRangeInfos` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("infos") != null && !jsonObj.get("infos").isJsonNull()) {
        JsonArray jsonArrayinfos = jsonObj.getAsJsonArray("infos");
        if (jsonArrayinfos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("infos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `infos` to be an array in the JSON string but got `%s`", jsonObj.get("infos").toString()));
          }

          // validate the optional field `infos` (array)
          for (int i = 0; i < jsonArrayinfos.size(); i++) {
            KeyRangeInfo.validateJsonElement(jsonArrayinfos.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyRangeInfos.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyRangeInfos' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyRangeInfos> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyRangeInfos.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyRangeInfos>() {
           @Override
           public void write(JsonWriter out, KeyRangeInfos value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyRangeInfos read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeyRangeInfos given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeyRangeInfos
   * @throws IOException if the JSON string is invalid with respect to KeyRangeInfos
   */
  public static KeyRangeInfos fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyRangeInfos.class);
  }

  /**
   * Convert an instance of KeyRangeInfos to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

