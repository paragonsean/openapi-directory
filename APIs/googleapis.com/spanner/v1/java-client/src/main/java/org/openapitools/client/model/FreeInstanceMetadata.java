/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Free instance specific metadata that is kept even after an instance has been upgraded for tracking purposes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FreeInstanceMetadata {
  /**
   * Specifies the expiration behavior of a free instance. The default of ExpireBehavior is &#x60;REMOVE_AFTER_GRACE_PERIOD&#x60;. This can be modified during or after creation, and before expiration.
   */
  @JsonAdapter(ExpireBehaviorEnum.Adapter.class)
  public enum ExpireBehaviorEnum {
    EXPIRE_BEHAVIOR_UNSPECIFIED("EXPIRE_BEHAVIOR_UNSPECIFIED"),
    
    FREE_TO_PROVISIONED("FREE_TO_PROVISIONED"),
    
    REMOVE_AFTER_GRACE_PERIOD("REMOVE_AFTER_GRACE_PERIOD");

    private String value;

    ExpireBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpireBehaviorEnum fromValue(String value) {
      for (ExpireBehaviorEnum b : ExpireBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpireBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpireBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpireBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpireBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpireBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPIRE_BEHAVIOR = "expireBehavior";
  @SerializedName(SERIALIZED_NAME_EXPIRE_BEHAVIOR)
  private ExpireBehaviorEnum expireBehavior;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_UPGRADE_TIME = "upgradeTime";
  @SerializedName(SERIALIZED_NAME_UPGRADE_TIME)
  private String upgradeTime;

  public FreeInstanceMetadata() {
  }

  public FreeInstanceMetadata(
     String expireTime, 
     String upgradeTime
  ) {
    this();
    this.expireTime = expireTime;
    this.upgradeTime = upgradeTime;
  }

  public FreeInstanceMetadata expireBehavior(ExpireBehaviorEnum expireBehavior) {
    this.expireBehavior = expireBehavior;
    return this;
  }

  /**
   * Specifies the expiration behavior of a free instance. The default of ExpireBehavior is &#x60;REMOVE_AFTER_GRACE_PERIOD&#x60;. This can be modified during or after creation, and before expiration.
   * @return expireBehavior
   */
  @javax.annotation.Nullable
  public ExpireBehaviorEnum getExpireBehavior() {
    return expireBehavior;
  }

  public void setExpireBehavior(ExpireBehaviorEnum expireBehavior) {
    this.expireBehavior = expireBehavior;
  }


  /**
   * Output only. Timestamp after which the instance will either be upgraded or scheduled for deletion after a grace period. ExpireBehavior is used to choose between upgrading or scheduling the free instance for deletion. This timestamp is set during the creation of a free instance.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }



  /**
   * Output only. If present, the timestamp at which the free instance was upgraded to a provisioned instance.
   * @return upgradeTime
   */
  @javax.annotation.Nullable
  public String getUpgradeTime() {
    return upgradeTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FreeInstanceMetadata freeInstanceMetadata = (FreeInstanceMetadata) o;
    return Objects.equals(this.expireBehavior, freeInstanceMetadata.expireBehavior) &&
        Objects.equals(this.expireTime, freeInstanceMetadata.expireTime) &&
        Objects.equals(this.upgradeTime, freeInstanceMetadata.upgradeTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expireBehavior, expireTime, upgradeTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FreeInstanceMetadata {\n");
    sb.append("    expireBehavior: ").append(toIndentedString(expireBehavior)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    upgradeTime: ").append(toIndentedString(upgradeTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expireBehavior");
    openapiFields.add("expireTime");
    openapiFields.add("upgradeTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FreeInstanceMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FreeInstanceMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FreeInstanceMetadata is not found in the empty JSON string", FreeInstanceMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FreeInstanceMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FreeInstanceMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expireBehavior") != null && !jsonObj.get("expireBehavior").isJsonNull()) && !jsonObj.get("expireBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireBehavior").toString()));
      }
      // validate the optional field `expireBehavior`
      if (jsonObj.get("expireBehavior") != null && !jsonObj.get("expireBehavior").isJsonNull()) {
        ExpireBehaviorEnum.validateJsonElement(jsonObj.get("expireBehavior"));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("upgradeTime") != null && !jsonObj.get("upgradeTime").isJsonNull()) && !jsonObj.get("upgradeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FreeInstanceMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FreeInstanceMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FreeInstanceMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FreeInstanceMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<FreeInstanceMetadata>() {
           @Override
           public void write(JsonWriter out, FreeInstanceMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FreeInstanceMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FreeInstanceMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FreeInstanceMetadata
   * @throws IOException if the JSON string is invalid with respect to FreeInstanceMetadata
   */
  public static FreeInstanceMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FreeInstanceMetadata.class);
  }

  /**
   * Convert an instance of FreeInstanceMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

