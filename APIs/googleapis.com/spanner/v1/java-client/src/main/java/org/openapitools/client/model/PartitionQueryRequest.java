/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.PartitionOptions;
import org.openapitools.client.model.TransactionSelector;
import org.openapitools.client.model.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request for PartitionQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionQueryRequest {
  public static final String SERIALIZED_NAME_PARAM_TYPES = "paramTypes";
  @SerializedName(SERIALIZED_NAME_PARAM_TYPES)
  private Map<String, Type> paramTypes = new HashMap<>();

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private Map<String, Object> params = new HashMap<>();

  public static final String SERIALIZED_NAME_PARTITION_OPTIONS = "partitionOptions";
  @SerializedName(SERIALIZED_NAME_PARTITION_OPTIONS)
  private PartitionOptions partitionOptions;

  public static final String SERIALIZED_NAME_SQL = "sql";
  @SerializedName(SERIALIZED_NAME_SQL)
  private String sql;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private TransactionSelector transaction;

  public PartitionQueryRequest() {
  }

  public PartitionQueryRequest paramTypes(Map<String, Type> paramTypes) {
    this.paramTypes = paramTypes;
    return this;
  }

  public PartitionQueryRequest putParamTypesItem(String key, Type paramTypesItem) {
    if (this.paramTypes == null) {
      this.paramTypes = new HashMap<>();
    }
    this.paramTypes.put(key, paramTypesItem);
    return this;
  }

  /**
   * It is not always possible for Cloud Spanner to infer the right SQL type from a JSON value. For example, values of type &#x60;BYTES&#x60; and values of type &#x60;STRING&#x60; both appear in params as JSON strings. In these cases, &#x60;param_types&#x60; can be used to specify the exact SQL type for some or all of the SQL query parameters. See the definition of Type for more information about SQL types.
   * @return paramTypes
   */
  @javax.annotation.Nullable
  public Map<String, Type> getParamTypes() {
    return paramTypes;
  }

  public void setParamTypes(Map<String, Type> paramTypes) {
    this.paramTypes = paramTypes;
  }


  public PartitionQueryRequest params(Map<String, Object> params) {
    this.params = params;
    return this;
  }

  public PartitionQueryRequest putParamsItem(String key, Object paramsItem) {
    if (this.params == null) {
      this.params = new HashMap<>();
    }
    this.params.put(key, paramsItem);
    return this;
  }

  /**
   * Parameter names and values that bind to placeholders in the SQL string. A parameter placeholder consists of the &#x60;@&#x60; character followed by the parameter name (for example, &#x60;@firstName&#x60;). Parameter names can contain letters, numbers, and underscores. Parameters can appear anywhere that a literal value is expected. The same parameter name can be used more than once, for example: &#x60;\&quot;WHERE id &gt; @msg_id AND id &lt; @msg_id + 100\&quot;&#x60; It is an error to execute a SQL statement with unbound parameters.
   * @return params
   */
  @javax.annotation.Nullable
  public Map<String, Object> getParams() {
    return params;
  }

  public void setParams(Map<String, Object> params) {
    this.params = params;
  }


  public PartitionQueryRequest partitionOptions(PartitionOptions partitionOptions) {
    this.partitionOptions = partitionOptions;
    return this;
  }

  /**
   * Get partitionOptions
   * @return partitionOptions
   */
  @javax.annotation.Nullable
  public PartitionOptions getPartitionOptions() {
    return partitionOptions;
  }

  public void setPartitionOptions(PartitionOptions partitionOptions) {
    this.partitionOptions = partitionOptions;
  }


  public PartitionQueryRequest sql(String sql) {
    this.sql = sql;
    return this;
  }

  /**
   * Required. The query request to generate partitions for. The request will fail if the query is not root partitionable. For a query to be root partitionable, it needs to satisfy a few conditions. For example, if the query execution plan contains a distributed union operator, then it must be the first operator in the plan. For more information about other conditions, see [Read data in parallel](https://cloud.google.com/spanner/docs/reads#read_data_in_parallel). The query request must not contain DML commands, such as INSERT, UPDATE, or DELETE. Use ExecuteStreamingSql with a PartitionedDml transaction for large, partition-friendly DML operations.
   * @return sql
   */
  @javax.annotation.Nullable
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }


  public PartitionQueryRequest transaction(TransactionSelector transaction) {
    this.transaction = transaction;
    return this;
  }

  /**
   * Get transaction
   * @return transaction
   */
  @javax.annotation.Nullable
  public TransactionSelector getTransaction() {
    return transaction;
  }

  public void setTransaction(TransactionSelector transaction) {
    this.transaction = transaction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionQueryRequest partitionQueryRequest = (PartitionQueryRequest) o;
    return Objects.equals(this.paramTypes, partitionQueryRequest.paramTypes) &&
        Objects.equals(this.params, partitionQueryRequest.params) &&
        Objects.equals(this.partitionOptions, partitionQueryRequest.partitionOptions) &&
        Objects.equals(this.sql, partitionQueryRequest.sql) &&
        Objects.equals(this.transaction, partitionQueryRequest.transaction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paramTypes, params, partitionOptions, sql, transaction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionQueryRequest {\n");
    sb.append("    paramTypes: ").append(toIndentedString(paramTypes)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    partitionOptions: ").append(toIndentedString(partitionOptions)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paramTypes");
    openapiFields.add("params");
    openapiFields.add("partitionOptions");
    openapiFields.add("sql");
    openapiFields.add("transaction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionQueryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionQueryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionQueryRequest is not found in the empty JSON string", PartitionQueryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionQueryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionQueryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `partitionOptions`
      if (jsonObj.get("partitionOptions") != null && !jsonObj.get("partitionOptions").isJsonNull()) {
        PartitionOptions.validateJsonElement(jsonObj.get("partitionOptions"));
      }
      if ((jsonObj.get("sql") != null && !jsonObj.get("sql").isJsonNull()) && !jsonObj.get("sql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sql").toString()));
      }
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        TransactionSelector.validateJsonElement(jsonObj.get("transaction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionQueryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionQueryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionQueryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionQueryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionQueryRequest>() {
           @Override
           public void write(JsonWriter out, PartitionQueryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionQueryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionQueryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionQueryRequest
   * @throws IOException if the JSON string is invalid with respect to PartitionQueryRequest
   */
  public static PartitionQueryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionQueryRequest.class);
  }

  /**
   * Convert an instance of PartitionQueryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

