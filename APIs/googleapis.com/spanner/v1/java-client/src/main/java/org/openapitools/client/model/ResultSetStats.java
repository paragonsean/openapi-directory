/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.QueryPlan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional statistics about a ResultSet or PartialResultSet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResultSetStats {
  public static final String SERIALIZED_NAME_QUERY_PLAN = "queryPlan";
  @SerializedName(SERIALIZED_NAME_QUERY_PLAN)
  private QueryPlan queryPlan;

  public static final String SERIALIZED_NAME_QUERY_STATS = "queryStats";
  @SerializedName(SERIALIZED_NAME_QUERY_STATS)
  private Map<String, Object> queryStats = new HashMap<>();

  public static final String SERIALIZED_NAME_ROW_COUNT_EXACT = "rowCountExact";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT_EXACT)
  private String rowCountExact;

  public static final String SERIALIZED_NAME_ROW_COUNT_LOWER_BOUND = "rowCountLowerBound";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT_LOWER_BOUND)
  private String rowCountLowerBound;

  public ResultSetStats() {
  }

  public ResultSetStats queryPlan(QueryPlan queryPlan) {
    this.queryPlan = queryPlan;
    return this;
  }

  /**
   * Get queryPlan
   * @return queryPlan
   */
  @javax.annotation.Nullable
  public QueryPlan getQueryPlan() {
    return queryPlan;
  }

  public void setQueryPlan(QueryPlan queryPlan) {
    this.queryPlan = queryPlan;
  }


  public ResultSetStats queryStats(Map<String, Object> queryStats) {
    this.queryStats = queryStats;
    return this;
  }

  public ResultSetStats putQueryStatsItem(String key, Object queryStatsItem) {
    if (this.queryStats == null) {
      this.queryStats = new HashMap<>();
    }
    this.queryStats.put(key, queryStatsItem);
    return this;
  }

  /**
   * Aggregated statistics from the execution of the query. Only present when the query is profiled. For example, a query could return the statistics as follows: { \&quot;rows_returned\&quot;: \&quot;3\&quot;, \&quot;elapsed_time\&quot;: \&quot;1.22 secs\&quot;, \&quot;cpu_time\&quot;: \&quot;1.19 secs\&quot; }
   * @return queryStats
   */
  @javax.annotation.Nullable
  public Map<String, Object> getQueryStats() {
    return queryStats;
  }

  public void setQueryStats(Map<String, Object> queryStats) {
    this.queryStats = queryStats;
  }


  public ResultSetStats rowCountExact(String rowCountExact) {
    this.rowCountExact = rowCountExact;
    return this;
  }

  /**
   * Standard DML returns an exact count of rows that were modified.
   * @return rowCountExact
   */
  @javax.annotation.Nullable
  public String getRowCountExact() {
    return rowCountExact;
  }

  public void setRowCountExact(String rowCountExact) {
    this.rowCountExact = rowCountExact;
  }


  public ResultSetStats rowCountLowerBound(String rowCountLowerBound) {
    this.rowCountLowerBound = rowCountLowerBound;
    return this;
  }

  /**
   * Partitioned DML does not offer exactly-once semantics, so it returns a lower bound of the rows modified.
   * @return rowCountLowerBound
   */
  @javax.annotation.Nullable
  public String getRowCountLowerBound() {
    return rowCountLowerBound;
  }

  public void setRowCountLowerBound(String rowCountLowerBound) {
    this.rowCountLowerBound = rowCountLowerBound;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultSetStats resultSetStats = (ResultSetStats) o;
    return Objects.equals(this.queryPlan, resultSetStats.queryPlan) &&
        Objects.equals(this.queryStats, resultSetStats.queryStats) &&
        Objects.equals(this.rowCountExact, resultSetStats.rowCountExact) &&
        Objects.equals(this.rowCountLowerBound, resultSetStats.rowCountLowerBound);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryPlan, queryStats, rowCountExact, rowCountLowerBound);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultSetStats {\n");
    sb.append("    queryPlan: ").append(toIndentedString(queryPlan)).append("\n");
    sb.append("    queryStats: ").append(toIndentedString(queryStats)).append("\n");
    sb.append("    rowCountExact: ").append(toIndentedString(rowCountExact)).append("\n");
    sb.append("    rowCountLowerBound: ").append(toIndentedString(rowCountLowerBound)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("queryPlan");
    openapiFields.add("queryStats");
    openapiFields.add("rowCountExact");
    openapiFields.add("rowCountLowerBound");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResultSetStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResultSetStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResultSetStats is not found in the empty JSON string", ResultSetStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResultSetStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResultSetStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `queryPlan`
      if (jsonObj.get("queryPlan") != null && !jsonObj.get("queryPlan").isJsonNull()) {
        QueryPlan.validateJsonElement(jsonObj.get("queryPlan"));
      }
      if ((jsonObj.get("rowCountExact") != null && !jsonObj.get("rowCountExact").isJsonNull()) && !jsonObj.get("rowCountExact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rowCountExact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rowCountExact").toString()));
      }
      if ((jsonObj.get("rowCountLowerBound") != null && !jsonObj.get("rowCountLowerBound").isJsonNull()) && !jsonObj.get("rowCountLowerBound").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rowCountLowerBound` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rowCountLowerBound").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResultSetStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResultSetStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResultSetStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResultSetStats.class));

       return (TypeAdapter<T>) new TypeAdapter<ResultSetStats>() {
           @Override
           public void write(JsonWriter out, ResultSetStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResultSetStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResultSetStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResultSetStats
   * @throws IOException if the JSON string is invalid with respect to ResultSetStats
   */
  public static ResultSetStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResultSetStats.class);
  }

  /**
   * Convert an instance of ResultSetStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

