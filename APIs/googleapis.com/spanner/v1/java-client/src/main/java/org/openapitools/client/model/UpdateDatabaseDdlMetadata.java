/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DdlStatementActionInfo;
import org.openapitools.client.model.OperationProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata type for the operation returned by UpdateDatabaseDdl.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDatabaseDdlMetadata {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<DdlStatementActionInfo> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMIT_TIMESTAMPS = "commitTimestamps";
  @SerializedName(SERIALIZED_NAME_COMMIT_TIMESTAMPS)
  private List<String> commitTimestamps = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private String database;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private List<OperationProgress> progress = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATEMENTS = "statements";
  @SerializedName(SERIALIZED_NAME_STATEMENTS)
  private List<String> statements = new ArrayList<>();

  public static final String SERIALIZED_NAME_THROTTLED = "throttled";
  @SerializedName(SERIALIZED_NAME_THROTTLED)
  private Boolean throttled;

  public UpdateDatabaseDdlMetadata() {
  }

  public UpdateDatabaseDdlMetadata(
     Boolean throttled
  ) {
    this();
    this.throttled = throttled;
  }

  public UpdateDatabaseDdlMetadata actions(List<DdlStatementActionInfo> actions) {
    this.actions = actions;
    return this;
  }

  public UpdateDatabaseDdlMetadata addActionsItem(DdlStatementActionInfo actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * The brief action info for the DDL statements. &#x60;actions[i]&#x60; is the brief info for &#x60;statements[i]&#x60;.
   * @return actions
   */
  @javax.annotation.Nullable
  public List<DdlStatementActionInfo> getActions() {
    return actions;
  }

  public void setActions(List<DdlStatementActionInfo> actions) {
    this.actions = actions;
  }


  public UpdateDatabaseDdlMetadata commitTimestamps(List<String> commitTimestamps) {
    this.commitTimestamps = commitTimestamps;
    return this;
  }

  public UpdateDatabaseDdlMetadata addCommitTimestampsItem(String commitTimestampsItem) {
    if (this.commitTimestamps == null) {
      this.commitTimestamps = new ArrayList<>();
    }
    this.commitTimestamps.add(commitTimestampsItem);
    return this;
  }

  /**
   * Reports the commit timestamps of all statements that have succeeded so far, where &#x60;commit_timestamps[i]&#x60; is the commit timestamp for the statement &#x60;statements[i]&#x60;.
   * @return commitTimestamps
   */
  @javax.annotation.Nullable
  public List<String> getCommitTimestamps() {
    return commitTimestamps;
  }

  public void setCommitTimestamps(List<String> commitTimestamps) {
    this.commitTimestamps = commitTimestamps;
  }


  public UpdateDatabaseDdlMetadata database(String database) {
    this.database = database;
    return this;
  }

  /**
   * The database being modified.
   * @return database
   */
  @javax.annotation.Nullable
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }


  public UpdateDatabaseDdlMetadata progress(List<OperationProgress> progress) {
    this.progress = progress;
    return this;
  }

  public UpdateDatabaseDdlMetadata addProgressItem(OperationProgress progressItem) {
    if (this.progress == null) {
      this.progress = new ArrayList<>();
    }
    this.progress.add(progressItem);
    return this;
  }

  /**
   * The progress of the UpdateDatabaseDdl operations. All DDL statements will have continuously updating progress, and &#x60;progress[i]&#x60; is the operation progress for &#x60;statements[i]&#x60;. Also, &#x60;progress[i]&#x60; will have start time and end time populated with commit timestamp of operation, as well as a progress of 100% once the operation has completed.
   * @return progress
   */
  @javax.annotation.Nullable
  public List<OperationProgress> getProgress() {
    return progress;
  }

  public void setProgress(List<OperationProgress> progress) {
    this.progress = progress;
  }


  public UpdateDatabaseDdlMetadata statements(List<String> statements) {
    this.statements = statements;
    return this;
  }

  public UpdateDatabaseDdlMetadata addStatementsItem(String statementsItem) {
    if (this.statements == null) {
      this.statements = new ArrayList<>();
    }
    this.statements.add(statementsItem);
    return this;
  }

  /**
   * For an update this list contains all the statements. For an individual statement, this list contains only that statement.
   * @return statements
   */
  @javax.annotation.Nullable
  public List<String> getStatements() {
    return statements;
  }

  public void setStatements(List<String> statements) {
    this.statements = statements;
  }


  /**
   * Output only. When true, indicates that the operation is throttled e.g. due to resource constraints. When resources become available the operation will resume and this field will be false again.
   * @return throttled
   */
  @javax.annotation.Nullable
  public Boolean getThrottled() {
    return throttled;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDatabaseDdlMetadata updateDatabaseDdlMetadata = (UpdateDatabaseDdlMetadata) o;
    return Objects.equals(this.actions, updateDatabaseDdlMetadata.actions) &&
        Objects.equals(this.commitTimestamps, updateDatabaseDdlMetadata.commitTimestamps) &&
        Objects.equals(this.database, updateDatabaseDdlMetadata.database) &&
        Objects.equals(this.progress, updateDatabaseDdlMetadata.progress) &&
        Objects.equals(this.statements, updateDatabaseDdlMetadata.statements) &&
        Objects.equals(this.throttled, updateDatabaseDdlMetadata.throttled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, commitTimestamps, database, progress, statements, throttled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDatabaseDdlMetadata {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    commitTimestamps: ").append(toIndentedString(commitTimestamps)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    statements: ").append(toIndentedString(statements)).append("\n");
    sb.append("    throttled: ").append(toIndentedString(throttled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("commitTimestamps");
    openapiFields.add("database");
    openapiFields.add("progress");
    openapiFields.add("statements");
    openapiFields.add("throttled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDatabaseDdlMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDatabaseDdlMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDatabaseDdlMetadata is not found in the empty JSON string", UpdateDatabaseDdlMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDatabaseDdlMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDatabaseDdlMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            DdlStatementActionInfo.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("commitTimestamps") != null && !jsonObj.get("commitTimestamps").isJsonNull() && !jsonObj.get("commitTimestamps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitTimestamps` to be an array in the JSON string but got `%s`", jsonObj.get("commitTimestamps").toString()));
      }
      if ((jsonObj.get("database") != null && !jsonObj.get("database").isJsonNull()) && !jsonObj.get("database").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database").toString()));
      }
      if (jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) {
        JsonArray jsonArrayprogress = jsonObj.getAsJsonArray("progress");
        if (jsonArrayprogress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("progress").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `progress` to be an array in the JSON string but got `%s`", jsonObj.get("progress").toString()));
          }

          // validate the optional field `progress` (array)
          for (int i = 0; i < jsonArrayprogress.size(); i++) {
            OperationProgress.validateJsonElement(jsonArrayprogress.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statements") != null && !jsonObj.get("statements").isJsonNull() && !jsonObj.get("statements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statements` to be an array in the JSON string but got `%s`", jsonObj.get("statements").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDatabaseDdlMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDatabaseDdlMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDatabaseDdlMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDatabaseDdlMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDatabaseDdlMetadata>() {
           @Override
           public void write(JsonWriter out, UpdateDatabaseDdlMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDatabaseDdlMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDatabaseDdlMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDatabaseDdlMetadata
   * @throws IOException if the JSON string is invalid with respect to UpdateDatabaseDdlMetadata
   */
  public static UpdateDatabaseDdlMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDatabaseDdlMetadata.class);
  }

  /**
   * Convert an instance of UpdateDatabaseDdlMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

