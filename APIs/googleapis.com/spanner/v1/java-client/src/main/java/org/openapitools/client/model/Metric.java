/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DerivedMetric;
import org.openapitools.client.model.IndexedHotKey;
import org.openapitools.client.model.IndexedKeyRangeInfos;
import org.openapitools.client.model.LocalizedString;
import org.openapitools.client.model.MetricMatrix;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A message representing the actual monitoring data, values for each key bucket over time, of a metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Metric {
  /**
   * The aggregation function used to aggregate each key bucket
   */
  @JsonAdapter(AggregationEnum.Adapter.class)
  public enum AggregationEnum {
    AGGREGATION_UNSPECIFIED("AGGREGATION_UNSPECIFIED"),
    
    MAX("MAX"),
    
    SUM("SUM");

    private String value;

    AggregationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationEnum fromValue(String value) {
      for (AggregationEnum b : AggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION = "aggregation";
  @SerializedName(SERIALIZED_NAME_AGGREGATION)
  private AggregationEnum aggregation;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private LocalizedString category;

  public static final String SERIALIZED_NAME_DERIVED = "derived";
  @SerializedName(SERIALIZED_NAME_DERIVED)
  private DerivedMetric derived;

  public static final String SERIALIZED_NAME_DISPLAY_LABEL = "displayLabel";
  @SerializedName(SERIALIZED_NAME_DISPLAY_LABEL)
  private LocalizedString displayLabel;

  public static final String SERIALIZED_NAME_HAS_NONZERO_DATA = "hasNonzeroData";
  @SerializedName(SERIALIZED_NAME_HAS_NONZERO_DATA)
  private Boolean hasNonzeroData;

  public static final String SERIALIZED_NAME_HOT_VALUE = "hotValue";
  @SerializedName(SERIALIZED_NAME_HOT_VALUE)
  private Float hotValue;

  public static final String SERIALIZED_NAME_INDEXED_HOT_KEYS = "indexedHotKeys";
  @SerializedName(SERIALIZED_NAME_INDEXED_HOT_KEYS)
  private Map<String, IndexedHotKey> indexedHotKeys = new HashMap<>();

  public static final String SERIALIZED_NAME_INDEXED_KEY_RANGE_INFOS = "indexedKeyRangeInfos";
  @SerializedName(SERIALIZED_NAME_INDEXED_KEY_RANGE_INFOS)
  private Map<String, IndexedKeyRangeInfos> indexedKeyRangeInfos = new HashMap<>();

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private LocalizedString info;

  public static final String SERIALIZED_NAME_MATRIX = "matrix";
  @SerializedName(SERIALIZED_NAME_MATRIX)
  private MetricMatrix matrix;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private LocalizedString unit;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public Metric() {
  }

  public Metric aggregation(AggregationEnum aggregation) {
    this.aggregation = aggregation;
    return this;
  }

  /**
   * The aggregation function used to aggregate each key bucket
   * @return aggregation
   */
  @javax.annotation.Nullable
  public AggregationEnum getAggregation() {
    return aggregation;
  }

  public void setAggregation(AggregationEnum aggregation) {
    this.aggregation = aggregation;
  }


  public Metric category(LocalizedString category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public LocalizedString getCategory() {
    return category;
  }

  public void setCategory(LocalizedString category) {
    this.category = category;
  }


  public Metric derived(DerivedMetric derived) {
    this.derived = derived;
    return this;
  }

  /**
   * Get derived
   * @return derived
   */
  @javax.annotation.Nullable
  public DerivedMetric getDerived() {
    return derived;
  }

  public void setDerived(DerivedMetric derived) {
    this.derived = derived;
  }


  public Metric displayLabel(LocalizedString displayLabel) {
    this.displayLabel = displayLabel;
    return this;
  }

  /**
   * Get displayLabel
   * @return displayLabel
   */
  @javax.annotation.Nullable
  public LocalizedString getDisplayLabel() {
    return displayLabel;
  }

  public void setDisplayLabel(LocalizedString displayLabel) {
    this.displayLabel = displayLabel;
  }


  public Metric hasNonzeroData(Boolean hasNonzeroData) {
    this.hasNonzeroData = hasNonzeroData;
    return this;
  }

  /**
   * Whether the metric has any non-zero data.
   * @return hasNonzeroData
   */
  @javax.annotation.Nullable
  public Boolean getHasNonzeroData() {
    return hasNonzeroData;
  }

  public void setHasNonzeroData(Boolean hasNonzeroData) {
    this.hasNonzeroData = hasNonzeroData;
  }


  public Metric hotValue(Float hotValue) {
    this.hotValue = hotValue;
    return this;
  }

  /**
   * The value that is considered hot for the metric. On a per metric basis hotness signals high utilization and something that might potentially be a cause for concern by the end user. hot_value is used to calibrate and scale visual color scales.
   * @return hotValue
   */
  @javax.annotation.Nullable
  public Float getHotValue() {
    return hotValue;
  }

  public void setHotValue(Float hotValue) {
    this.hotValue = hotValue;
  }


  public Metric indexedHotKeys(Map<String, IndexedHotKey> indexedHotKeys) {
    this.indexedHotKeys = indexedHotKeys;
    return this;
  }

  public Metric putIndexedHotKeysItem(String key, IndexedHotKey indexedHotKeysItem) {
    if (this.indexedHotKeys == null) {
      this.indexedHotKeys = new HashMap<>();
    }
    this.indexedHotKeys.put(key, indexedHotKeysItem);
    return this;
  }

  /**
   * The (sparse) mapping from time index to an IndexedHotKey message, representing those time intervals for which there are hot keys.
   * @return indexedHotKeys
   */
  @javax.annotation.Nullable
  public Map<String, IndexedHotKey> getIndexedHotKeys() {
    return indexedHotKeys;
  }

  public void setIndexedHotKeys(Map<String, IndexedHotKey> indexedHotKeys) {
    this.indexedHotKeys = indexedHotKeys;
  }


  public Metric indexedKeyRangeInfos(Map<String, IndexedKeyRangeInfos> indexedKeyRangeInfos) {
    this.indexedKeyRangeInfos = indexedKeyRangeInfos;
    return this;
  }

  public Metric putIndexedKeyRangeInfosItem(String key, IndexedKeyRangeInfos indexedKeyRangeInfosItem) {
    if (this.indexedKeyRangeInfos == null) {
      this.indexedKeyRangeInfos = new HashMap<>();
    }
    this.indexedKeyRangeInfos.put(key, indexedKeyRangeInfosItem);
    return this;
  }

  /**
   * The (sparse) mapping from time interval index to an IndexedKeyRangeInfos message, representing those time intervals for which there are informational messages concerning key ranges.
   * @return indexedKeyRangeInfos
   */
  @javax.annotation.Nullable
  public Map<String, IndexedKeyRangeInfos> getIndexedKeyRangeInfos() {
    return indexedKeyRangeInfos;
  }

  public void setIndexedKeyRangeInfos(Map<String, IndexedKeyRangeInfos> indexedKeyRangeInfos) {
    this.indexedKeyRangeInfos = indexedKeyRangeInfos;
  }


  public Metric info(LocalizedString info) {
    this.info = info;
    return this;
  }

  /**
   * Get info
   * @return info
   */
  @javax.annotation.Nullable
  public LocalizedString getInfo() {
    return info;
  }

  public void setInfo(LocalizedString info) {
    this.info = info;
  }


  public Metric matrix(MetricMatrix matrix) {
    this.matrix = matrix;
    return this;
  }

  /**
   * Get matrix
   * @return matrix
   */
  @javax.annotation.Nullable
  public MetricMatrix getMatrix() {
    return matrix;
  }

  public void setMatrix(MetricMatrix matrix) {
    this.matrix = matrix;
  }


  public Metric unit(LocalizedString unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public LocalizedString getUnit() {
    return unit;
  }

  public void setUnit(LocalizedString unit) {
    this.unit = unit;
  }


  public Metric visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Whether the metric is visible to the end user.
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metric metric = (Metric) o;
    return Objects.equals(this.aggregation, metric.aggregation) &&
        Objects.equals(this.category, metric.category) &&
        Objects.equals(this.derived, metric.derived) &&
        Objects.equals(this.displayLabel, metric.displayLabel) &&
        Objects.equals(this.hasNonzeroData, metric.hasNonzeroData) &&
        Objects.equals(this.hotValue, metric.hotValue) &&
        Objects.equals(this.indexedHotKeys, metric.indexedHotKeys) &&
        Objects.equals(this.indexedKeyRangeInfos, metric.indexedKeyRangeInfos) &&
        Objects.equals(this.info, metric.info) &&
        Objects.equals(this.matrix, metric.matrix) &&
        Objects.equals(this.unit, metric.unit) &&
        Objects.equals(this.visible, metric.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregation, category, derived, displayLabel, hasNonzeroData, hotValue, indexedHotKeys, indexedKeyRangeInfos, info, matrix, unit, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metric {\n");
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    derived: ").append(toIndentedString(derived)).append("\n");
    sb.append("    displayLabel: ").append(toIndentedString(displayLabel)).append("\n");
    sb.append("    hasNonzeroData: ").append(toIndentedString(hasNonzeroData)).append("\n");
    sb.append("    hotValue: ").append(toIndentedString(hotValue)).append("\n");
    sb.append("    indexedHotKeys: ").append(toIndentedString(indexedHotKeys)).append("\n");
    sb.append("    indexedKeyRangeInfos: ").append(toIndentedString(indexedKeyRangeInfos)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    matrix: ").append(toIndentedString(matrix)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregation");
    openapiFields.add("category");
    openapiFields.add("derived");
    openapiFields.add("displayLabel");
    openapiFields.add("hasNonzeroData");
    openapiFields.add("hotValue");
    openapiFields.add("indexedHotKeys");
    openapiFields.add("indexedKeyRangeInfos");
    openapiFields.add("info");
    openapiFields.add("matrix");
    openapiFields.add("unit");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Metric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Metric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Metric is not found in the empty JSON string", Metric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Metric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Metric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregation") != null && !jsonObj.get("aggregation").isJsonNull()) && !jsonObj.get("aggregation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregation").toString()));
      }
      // validate the optional field `aggregation`
      if (jsonObj.get("aggregation") != null && !jsonObj.get("aggregation").isJsonNull()) {
        AggregationEnum.validateJsonElement(jsonObj.get("aggregation"));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("category"));
      }
      // validate the optional field `derived`
      if (jsonObj.get("derived") != null && !jsonObj.get("derived").isJsonNull()) {
        DerivedMetric.validateJsonElement(jsonObj.get("derived"));
      }
      // validate the optional field `displayLabel`
      if (jsonObj.get("displayLabel") != null && !jsonObj.get("displayLabel").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("displayLabel"));
      }
      // validate the optional field `info`
      if (jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("info"));
      }
      // validate the optional field `matrix`
      if (jsonObj.get("matrix") != null && !jsonObj.get("matrix").isJsonNull()) {
        MetricMatrix.validateJsonElement(jsonObj.get("matrix"));
      }
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        LocalizedString.validateJsonElement(jsonObj.get("unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metric.class));

       return (TypeAdapter<T>) new TypeAdapter<Metric>() {
           @Override
           public void write(JsonWriter out, Metric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Metric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Metric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Metric
   * @throws IOException if the JSON string is invalid with respect to Metric
   */
  public static Metric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metric.class);
  }

  /**
   * Convert an instance of Metric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

