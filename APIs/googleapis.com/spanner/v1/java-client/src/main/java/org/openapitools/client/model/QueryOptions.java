/*
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Query optimizer configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:23.689684-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryOptions {
  public static final String SERIALIZED_NAME_OPTIMIZER_STATISTICS_PACKAGE = "optimizerStatisticsPackage";
  @SerializedName(SERIALIZED_NAME_OPTIMIZER_STATISTICS_PACKAGE)
  private String optimizerStatisticsPackage;

  public static final String SERIALIZED_NAME_OPTIMIZER_VERSION = "optimizerVersion";
  @SerializedName(SERIALIZED_NAME_OPTIMIZER_VERSION)
  private String optimizerVersion;

  public QueryOptions() {
  }

  public QueryOptions optimizerStatisticsPackage(String optimizerStatisticsPackage) {
    this.optimizerStatisticsPackage = optimizerStatisticsPackage;
    return this;
  }

  /**
   * An option to control the selection of optimizer statistics package. This parameter allows individual queries to use a different query optimizer statistics package. Specifying &#x60;latest&#x60; as a value instructs Cloud Spanner to use the latest generated statistics package. If not specified, Cloud Spanner uses the statistics package set at the database level options, or the latest package if the database option is not set. The statistics package requested by the query has to be exempt from garbage collection. This can be achieved with the following DDL statement: &#x60;&#x60;&#x60; ALTER STATISTICS SET OPTIONS (allow_gc&#x3D;false) &#x60;&#x60;&#x60; The list of available statistics packages can be queried from &#x60;INFORMATION_SCHEMA.SPANNER_STATISTICS&#x60;. Executing a SQL statement with an invalid optimizer statistics package or with a statistics package that allows garbage collection fails with an &#x60;INVALID_ARGUMENT&#x60; error.
   * @return optimizerStatisticsPackage
   */
  @javax.annotation.Nullable
  public String getOptimizerStatisticsPackage() {
    return optimizerStatisticsPackage;
  }

  public void setOptimizerStatisticsPackage(String optimizerStatisticsPackage) {
    this.optimizerStatisticsPackage = optimizerStatisticsPackage;
  }


  public QueryOptions optimizerVersion(String optimizerVersion) {
    this.optimizerVersion = optimizerVersion;
    return this;
  }

  /**
   * An option to control the selection of optimizer version. This parameter allows individual queries to pick different query optimizer versions. Specifying &#x60;latest&#x60; as a value instructs Cloud Spanner to use the latest supported query optimizer version. If not specified, Cloud Spanner uses the optimizer version set at the database level options. Any other positive integer (from the list of supported optimizer versions) overrides the default optimizer version for query execution. The list of supported optimizer versions can be queried from SPANNER_SYS.SUPPORTED_OPTIMIZER_VERSIONS. Executing a SQL statement with an invalid optimizer version fails with an &#x60;INVALID_ARGUMENT&#x60; error. See https://cloud.google.com/spanner/docs/query-optimizer/manage-query-optimizer for more information on managing the query optimizer. The &#x60;optimizer_version&#x60; statement hint has precedence over this setting.
   * @return optimizerVersion
   */
  @javax.annotation.Nullable
  public String getOptimizerVersion() {
    return optimizerVersion;
  }

  public void setOptimizerVersion(String optimizerVersion) {
    this.optimizerVersion = optimizerVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryOptions queryOptions = (QueryOptions) o;
    return Objects.equals(this.optimizerStatisticsPackage, queryOptions.optimizerStatisticsPackage) &&
        Objects.equals(this.optimizerVersion, queryOptions.optimizerVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(optimizerStatisticsPackage, optimizerVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryOptions {\n");
    sb.append("    optimizerStatisticsPackage: ").append(toIndentedString(optimizerStatisticsPackage)).append("\n");
    sb.append("    optimizerVersion: ").append(toIndentedString(optimizerVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("optimizerStatisticsPackage");
    openapiFields.add("optimizerVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryOptions is not found in the empty JSON string", QueryOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("optimizerStatisticsPackage") != null && !jsonObj.get("optimizerStatisticsPackage").isJsonNull()) && !jsonObj.get("optimizerStatisticsPackage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optimizerStatisticsPackage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optimizerStatisticsPackage").toString()));
      }
      if ((jsonObj.get("optimizerVersion") != null && !jsonObj.get("optimizerVersion").isJsonNull()) && !jsonObj.get("optimizerVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optimizerVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optimizerVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryOptions>() {
           @Override
           public void write(JsonWriter out, QueryOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryOptions
   * @throws IOException if the JSON string is invalid with respect to QueryOptions
   */
  public static QueryOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryOptions.class);
  }

  /**
   * Convert an instance of QueryOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

