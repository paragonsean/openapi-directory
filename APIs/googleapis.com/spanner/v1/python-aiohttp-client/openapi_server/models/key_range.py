# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_closed: List[object]=None, end_open: List[object]=None, start_closed: List[object]=None, start_open: List[object]=None):
        """KeyRange - a model defined in OpenAPI

        :param end_closed: The end_closed of this KeyRange.
        :param end_open: The end_open of this KeyRange.
        :param start_closed: The start_closed of this KeyRange.
        :param start_open: The start_open of this KeyRange.
        """
        self.openapi_types = {
            'end_closed': List[object],
            'end_open': List[object],
            'start_closed': List[object],
            'start_open': List[object]
        }

        self.attribute_map = {
            'end_closed': 'endClosed',
            'end_open': 'endOpen',
            'start_closed': 'startClosed',
            'start_open': 'startOpen'
        }

        self._end_closed = end_closed
        self._end_open = end_open
        self._start_closed = start_closed
        self._start_open = start_open

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyRange of this KeyRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_closed(self):
        """Gets the end_closed of this KeyRange.

        If the end is closed, then the range includes all rows whose first `len(end_closed)` key columns exactly match `end_closed`.

        :return: The end_closed of this KeyRange.
        :rtype: List[object]
        """
        return self._end_closed

    @end_closed.setter
    def end_closed(self, end_closed):
        """Sets the end_closed of this KeyRange.

        If the end is closed, then the range includes all rows whose first `len(end_closed)` key columns exactly match `end_closed`.

        :param end_closed: The end_closed of this KeyRange.
        :type end_closed: List[object]
        """

        self._end_closed = end_closed

    @property
    def end_open(self):
        """Gets the end_open of this KeyRange.

        If the end is open, then the range excludes rows whose first `len(end_open)` key columns exactly match `end_open`.

        :return: The end_open of this KeyRange.
        :rtype: List[object]
        """
        return self._end_open

    @end_open.setter
    def end_open(self, end_open):
        """Sets the end_open of this KeyRange.

        If the end is open, then the range excludes rows whose first `len(end_open)` key columns exactly match `end_open`.

        :param end_open: The end_open of this KeyRange.
        :type end_open: List[object]
        """

        self._end_open = end_open

    @property
    def start_closed(self):
        """Gets the start_closed of this KeyRange.

        If the start is closed, then the range includes all rows whose first `len(start_closed)` key columns exactly match `start_closed`.

        :return: The start_closed of this KeyRange.
        :rtype: List[object]
        """
        return self._start_closed

    @start_closed.setter
    def start_closed(self, start_closed):
        """Sets the start_closed of this KeyRange.

        If the start is closed, then the range includes all rows whose first `len(start_closed)` key columns exactly match `start_closed`.

        :param start_closed: The start_closed of this KeyRange.
        :type start_closed: List[object]
        """

        self._start_closed = start_closed

    @property
    def start_open(self):
        """Gets the start_open of this KeyRange.

        If the start is open, then the range excludes rows whose first `len(start_open)` key columns exactly match `start_open`.

        :return: The start_open of this KeyRange.
        :rtype: List[object]
        """
        return self._start_open

    @start_open.setter
    def start_open(self, start_open):
        """Sets the start_open of this KeyRange.

        If the start is open, then the range excludes rows whose first `len(start_open)` key columns exactly match `start_open`.

        :param start_open: The start_open of this KeyRange.
        :type start_open: List[object]
        """

        self._start_open = start_open
