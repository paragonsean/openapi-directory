# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocalizedString(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: Dict[str, str]=None, message: str=None, token: str=None):
        """LocalizedString - a model defined in OpenAPI

        :param args: The args of this LocalizedString.
        :param message: The message of this LocalizedString.
        :param token: The token of this LocalizedString.
        """
        self.openapi_types = {
            'args': Dict[str, str],
            'message': str,
            'token': str
        }

        self.attribute_map = {
            'args': 'args',
            'message': 'message',
            'token': 'token'
        }

        self._args = args
        self._message = message
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocalizedString':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocalizedString of this LocalizedString.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this LocalizedString.

        A map of arguments used when creating the localized message. Keys represent parameter names which may be used by the localized version when substituting dynamic values.

        :return: The args of this LocalizedString.
        :rtype: Dict[str, str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this LocalizedString.

        A map of arguments used when creating the localized message. Keys represent parameter names which may be used by the localized version when substituting dynamic values.

        :param args: The args of this LocalizedString.
        :type args: Dict[str, str]
        """

        self._args = args

    @property
    def message(self):
        """Gets the message of this LocalizedString.

        The canonical English version of this message. If no token is provided or the front-end has no message associated with the token, this text will be displayed as-is.

        :return: The message of this LocalizedString.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LocalizedString.

        The canonical English version of this message. If no token is provided or the front-end has no message associated with the token, this text will be displayed as-is.

        :param message: The message of this LocalizedString.
        :type message: str
        """

        self._message = message

    @property
    def token(self):
        """Gets the token of this LocalizedString.

        The token identifying the message, e.g. 'METRIC_READ_CPU'. This should be unique within the service.

        :return: The token of this LocalizedString.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this LocalizedString.

        The token identifying the message, e.g. 'METRIC_READ_CPU'. This should be unique within the service.

        :param token: The token of this LocalizedString.
        :type token: str
        """

        self._token = token
