# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_progress import OperationProgress
from openapi_server import util


class CopyBackupMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancel_time: str=None, name: str=None, progress: OperationProgress=None, source_backup: str=None):
        """CopyBackupMetadata - a model defined in OpenAPI

        :param cancel_time: The cancel_time of this CopyBackupMetadata.
        :param name: The name of this CopyBackupMetadata.
        :param progress: The progress of this CopyBackupMetadata.
        :param source_backup: The source_backup of this CopyBackupMetadata.
        """
        self.openapi_types = {
            'cancel_time': str,
            'name': str,
            'progress': OperationProgress,
            'source_backup': str
        }

        self.attribute_map = {
            'cancel_time': 'cancelTime',
            'name': 'name',
            'progress': 'progress',
            'source_backup': 'sourceBackup'
        }

        self._cancel_time = cancel_time
        self._name = name
        self._progress = progress
        self._source_backup = source_backup

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyBackupMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyBackupMetadata of this CopyBackupMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancel_time(self):
        """Gets the cancel_time of this CopyBackupMetadata.

        The time at which cancellation of CopyBackup operation was received. Operations.CancelOperation starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.

        :return: The cancel_time of this CopyBackupMetadata.
        :rtype: str
        """
        return self._cancel_time

    @cancel_time.setter
    def cancel_time(self, cancel_time):
        """Sets the cancel_time of this CopyBackupMetadata.

        The time at which cancellation of CopyBackup operation was received. Operations.CancelOperation starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.

        :param cancel_time: The cancel_time of this CopyBackupMetadata.
        :type cancel_time: str
        """

        self._cancel_time = cancel_time

    @property
    def name(self):
        """Gets the name of this CopyBackupMetadata.

        The name of the backup being created through the copy operation. Values are of the form `projects//instances//backups/`.

        :return: The name of this CopyBackupMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CopyBackupMetadata.

        The name of the backup being created through the copy operation. Values are of the form `projects//instances//backups/`.

        :param name: The name of this CopyBackupMetadata.
        :type name: str
        """

        self._name = name

    @property
    def progress(self):
        """Gets the progress of this CopyBackupMetadata.


        :return: The progress of this CopyBackupMetadata.
        :rtype: OperationProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this CopyBackupMetadata.


        :param progress: The progress of this CopyBackupMetadata.
        :type progress: OperationProgress
        """

        self._progress = progress

    @property
    def source_backup(self):
        """Gets the source_backup of this CopyBackupMetadata.

        The name of the source backup that is being copied. Values are of the form `projects//instances//backups/`.

        :return: The source_backup of this CopyBackupMetadata.
        :rtype: str
        """
        return self._source_backup

    @source_backup.setter
    def source_backup(self, source_backup):
        """Sets the source_backup of this CopyBackupMetadata.

        The name of the source backup that is being copied. Values are of the form `projects//instances//backups/`.

        :param source_backup: The source_backup of this CopyBackupMetadata.
        :type source_backup: str
        """

        self._source_backup = source_backup
