# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackupInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup: str=None, create_time: str=None, source_database: str=None, version_time: str=None):
        """BackupInfo - a model defined in OpenAPI

        :param backup: The backup of this BackupInfo.
        :param create_time: The create_time of this BackupInfo.
        :param source_database: The source_database of this BackupInfo.
        :param version_time: The version_time of this BackupInfo.
        """
        self.openapi_types = {
            'backup': str,
            'create_time': str,
            'source_database': str,
            'version_time': str
        }

        self.attribute_map = {
            'backup': 'backup',
            'create_time': 'createTime',
            'source_database': 'sourceDatabase',
            'version_time': 'versionTime'
        }

        self._backup = backup
        self._create_time = create_time
        self._source_database = source_database
        self._version_time = version_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupInfo of this BackupInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup(self):
        """Gets the backup of this BackupInfo.

        Name of the backup.

        :return: The backup of this BackupInfo.
        :rtype: str
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """Sets the backup of this BackupInfo.

        Name of the backup.

        :param backup: The backup of this BackupInfo.
        :type backup: str
        """

        self._backup = backup

    @property
    def create_time(self):
        """Gets the create_time of this BackupInfo.

        The time the CreateBackup request was received.

        :return: The create_time of this BackupInfo.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this BackupInfo.

        The time the CreateBackup request was received.

        :param create_time: The create_time of this BackupInfo.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def source_database(self):
        """Gets the source_database of this BackupInfo.

        Name of the database the backup was created from.

        :return: The source_database of this BackupInfo.
        :rtype: str
        """
        return self._source_database

    @source_database.setter
    def source_database(self, source_database):
        """Sets the source_database of this BackupInfo.

        Name of the database the backup was created from.

        :param source_database: The source_database of this BackupInfo.
        :type source_database: str
        """

        self._source_database = source_database

    @property
    def version_time(self):
        """Gets the version_time of this BackupInfo.

        The backup contains an externally consistent copy of `source_database` at the timestamp specified by `version_time`. If the CreateBackup request did not specify `version_time`, the `version_time` of the backup is equivalent to the `create_time`.

        :return: The version_time of this BackupInfo.
        :rtype: str
        """
        return self._version_time

    @version_time.setter
    def version_time(self, version_time):
        """Sets the version_time of this BackupInfo.

        The backup contains an externally consistent copy of `source_database` at the timestamp specified by `version_time`. If the CreateBackup request did not specify `version_time`, the `version_time` of the backup is equivalent to the `create_time`.

        :param version_time: The version_time of this BackupInfo.
        :type version_time: str
        """

        self._version_time = version_time
