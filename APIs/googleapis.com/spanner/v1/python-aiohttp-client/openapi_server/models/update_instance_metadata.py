# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance import Instance
from openapi_server import util


class UpdateInstanceMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancel_time: str=None, end_time: str=None, expected_fulfillment_period: str=None, instance: Instance=None, start_time: str=None):
        """UpdateInstanceMetadata - a model defined in OpenAPI

        :param cancel_time: The cancel_time of this UpdateInstanceMetadata.
        :param end_time: The end_time of this UpdateInstanceMetadata.
        :param expected_fulfillment_period: The expected_fulfillment_period of this UpdateInstanceMetadata.
        :param instance: The instance of this UpdateInstanceMetadata.
        :param start_time: The start_time of this UpdateInstanceMetadata.
        """
        self.openapi_types = {
            'cancel_time': str,
            'end_time': str,
            'expected_fulfillment_period': str,
            'instance': Instance,
            'start_time': str
        }

        self.attribute_map = {
            'cancel_time': 'cancelTime',
            'end_time': 'endTime',
            'expected_fulfillment_period': 'expectedFulfillmentPeriod',
            'instance': 'instance',
            'start_time': 'startTime'
        }

        self._cancel_time = cancel_time
        self._end_time = end_time
        self._expected_fulfillment_period = expected_fulfillment_period
        self._instance = instance
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateInstanceMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateInstanceMetadata of this UpdateInstanceMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancel_time(self):
        """Gets the cancel_time of this UpdateInstanceMetadata.

        The time at which this operation was cancelled. If set, this operation is in the process of undoing itself (which is guaranteed to succeed) and cannot be cancelled again.

        :return: The cancel_time of this UpdateInstanceMetadata.
        :rtype: str
        """
        return self._cancel_time

    @cancel_time.setter
    def cancel_time(self, cancel_time):
        """Sets the cancel_time of this UpdateInstanceMetadata.

        The time at which this operation was cancelled. If set, this operation is in the process of undoing itself (which is guaranteed to succeed) and cannot be cancelled again.

        :param cancel_time: The cancel_time of this UpdateInstanceMetadata.
        :type cancel_time: str
        """

        self._cancel_time = cancel_time

    @property
    def end_time(self):
        """Gets the end_time of this UpdateInstanceMetadata.

        The time at which this operation failed or was completed successfully.

        :return: The end_time of this UpdateInstanceMetadata.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this UpdateInstanceMetadata.

        The time at which this operation failed or was completed successfully.

        :param end_time: The end_time of this UpdateInstanceMetadata.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def expected_fulfillment_period(self):
        """Gets the expected_fulfillment_period of this UpdateInstanceMetadata.

        The expected fulfillment period of this update operation.

        :return: The expected_fulfillment_period of this UpdateInstanceMetadata.
        :rtype: str
        """
        return self._expected_fulfillment_period

    @expected_fulfillment_period.setter
    def expected_fulfillment_period(self, expected_fulfillment_period):
        """Sets the expected_fulfillment_period of this UpdateInstanceMetadata.

        The expected fulfillment period of this update operation.

        :param expected_fulfillment_period: The expected_fulfillment_period of this UpdateInstanceMetadata.
        :type expected_fulfillment_period: str
        """
        allowed_values = ["FULFILLMENT_PERIOD_UNSPECIFIED", "FULFILLMENT_PERIOD_NORMAL", "FULFILLMENT_PERIOD_EXTENDED"]  # noqa: E501
        if expected_fulfillment_period not in allowed_values:
            raise ValueError(
                "Invalid value for `expected_fulfillment_period` ({0}), must be one of {1}"
                .format(expected_fulfillment_period, allowed_values)
            )

        self._expected_fulfillment_period = expected_fulfillment_period

    @property
    def instance(self):
        """Gets the instance of this UpdateInstanceMetadata.


        :return: The instance of this UpdateInstanceMetadata.
        :rtype: Instance
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this UpdateInstanceMetadata.


        :param instance: The instance of this UpdateInstanceMetadata.
        :type instance: Instance
        """

        self._instance = instance

    @property
    def start_time(self):
        """Gets the start_time of this UpdateInstanceMetadata.

        The time at which UpdateInstance request was received.

        :return: The start_time of this UpdateInstanceMetadata.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this UpdateInstanceMetadata.

        The time at which UpdateInstance request was received.

        :param start_time: The start_time of this UpdateInstanceMetadata.
        :type start_time: str
        """

        self._start_time = start_time
