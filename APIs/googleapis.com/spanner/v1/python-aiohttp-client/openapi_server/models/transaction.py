# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, read_timestamp: str=None):
        """Transaction - a model defined in OpenAPI

        :param id: The id of this Transaction.
        :param read_timestamp: The read_timestamp of this Transaction.
        """
        self.openapi_types = {
            'id': str,
            'read_timestamp': str
        }

        self.attribute_map = {
            'id': 'id',
            'read_timestamp': 'readTimestamp'
        }

        self._id = id
        self._read_timestamp = read_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Transaction.

        `id` may be used to identify the transaction in subsequent Read, ExecuteSql, Commit, or Rollback calls. Single-use read-only transactions do not have IDs, because single-use transactions do not support multiple requests.

        :return: The id of this Transaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        `id` may be used to identify the transaction in subsequent Read, ExecuteSql, Commit, or Rollback calls. Single-use read-only transactions do not have IDs, because single-use transactions do not support multiple requests.

        :param id: The id of this Transaction.
        :type id: str
        """

        self._id = id

    @property
    def read_timestamp(self):
        """Gets the read_timestamp of this Transaction.

        For snapshot read-only transactions, the read timestamp chosen for the transaction. Not returned by default: see TransactionOptions.ReadOnly.return_read_timestamp. A timestamp in RFC3339 UTC \\\"Zulu\\\" format, accurate to nanoseconds. Example: `\"2014-10-02T15:01:23.045123456Z\"`.

        :return: The read_timestamp of this Transaction.
        :rtype: str
        """
        return self._read_timestamp

    @read_timestamp.setter
    def read_timestamp(self, read_timestamp):
        """Sets the read_timestamp of this Transaction.

        For snapshot read-only transactions, the read timestamp chosen for the transaction. Not returned by default: see TransactionOptions.ReadOnly.return_read_timestamp. A timestamp in RFC3339 UTC \\\"Zulu\\\" format, accurate to nanoseconds. Example: `\"2014-10-02T15:01:23.045123456Z\"`.

        :param read_timestamp: The read_timestamp of this Transaction.
        :type read_timestamp: str
        """

        self._read_timestamp = read_timestamp
