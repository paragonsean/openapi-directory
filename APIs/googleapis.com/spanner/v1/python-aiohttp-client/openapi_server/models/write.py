# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Write(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[str]=None, table: str=None, values: List[List[object]]=None):
        """Write - a model defined in OpenAPI

        :param columns: The columns of this Write.
        :param table: The table of this Write.
        :param values: The values of this Write.
        """
        self.openapi_types = {
            'columns': List[str],
            'table': str,
            'values': List[List[object]]
        }

        self.attribute_map = {
            'columns': 'columns',
            'table': 'table',
            'values': 'values'
        }

        self._columns = columns
        self._table = table
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Write':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Write of this Write.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this Write.

        The names of the columns in table to be written. The list of columns must contain enough columns to allow Cloud Spanner to derive values for all primary key columns in the row(s) to be modified.

        :return: The columns of this Write.
        :rtype: List[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this Write.

        The names of the columns in table to be written. The list of columns must contain enough columns to allow Cloud Spanner to derive values for all primary key columns in the row(s) to be modified.

        :param columns: The columns of this Write.
        :type columns: List[str]
        """

        self._columns = columns

    @property
    def table(self):
        """Gets the table of this Write.

        Required. The table whose rows will be written.

        :return: The table of this Write.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this Write.

        Required. The table whose rows will be written.

        :param table: The table of this Write.
        :type table: str
        """

        self._table = table

    @property
    def values(self):
        """Gets the values of this Write.

        The values to be written. `values` can contain more than one list of values. If it does, then multiple rows are written, one for each entry in `values`. Each list in `values` must have exactly as many entries as there are entries in columns above. Sending multiple lists is equivalent to sending multiple `Mutation`s, each containing one `values` entry and repeating table and columns. Individual values in each list are encoded as described here.

        :return: The values of this Write.
        :rtype: List[List[object]]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Write.

        The values to be written. `values` can contain more than one list of values. If it does, then multiple rows are written, one for each entry in `values`. Each list in `values` must have exactly as many entries as there are entries in columns above. Sending multiple lists is equivalent to sending multiple `Mutation`s, each containing one `values` entry and repeating table and columns. Individual values in each list are encoded as described here.

        :param values: The values of this Write.
        :type values: List[List[object]]
        """

        self._values = values
