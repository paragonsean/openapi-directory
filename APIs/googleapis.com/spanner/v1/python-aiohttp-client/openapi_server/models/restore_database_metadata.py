# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_info import BackupInfo
from openapi_server.models.operation_progress import OperationProgress
from openapi_server import util


class RestoreDatabaseMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_info: BackupInfo=None, cancel_time: str=None, name: str=None, optimize_database_operation_name: str=None, progress: OperationProgress=None, source_type: str=None):
        """RestoreDatabaseMetadata - a model defined in OpenAPI

        :param backup_info: The backup_info of this RestoreDatabaseMetadata.
        :param cancel_time: The cancel_time of this RestoreDatabaseMetadata.
        :param name: The name of this RestoreDatabaseMetadata.
        :param optimize_database_operation_name: The optimize_database_operation_name of this RestoreDatabaseMetadata.
        :param progress: The progress of this RestoreDatabaseMetadata.
        :param source_type: The source_type of this RestoreDatabaseMetadata.
        """
        self.openapi_types = {
            'backup_info': BackupInfo,
            'cancel_time': str,
            'name': str,
            'optimize_database_operation_name': str,
            'progress': OperationProgress,
            'source_type': str
        }

        self.attribute_map = {
            'backup_info': 'backupInfo',
            'cancel_time': 'cancelTime',
            'name': 'name',
            'optimize_database_operation_name': 'optimizeDatabaseOperationName',
            'progress': 'progress',
            'source_type': 'sourceType'
        }

        self._backup_info = backup_info
        self._cancel_time = cancel_time
        self._name = name
        self._optimize_database_operation_name = optimize_database_operation_name
        self._progress = progress
        self._source_type = source_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestoreDatabaseMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestoreDatabaseMetadata of this RestoreDatabaseMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_info(self):
        """Gets the backup_info of this RestoreDatabaseMetadata.


        :return: The backup_info of this RestoreDatabaseMetadata.
        :rtype: BackupInfo
        """
        return self._backup_info

    @backup_info.setter
    def backup_info(self, backup_info):
        """Sets the backup_info of this RestoreDatabaseMetadata.


        :param backup_info: The backup_info of this RestoreDatabaseMetadata.
        :type backup_info: BackupInfo
        """

        self._backup_info = backup_info

    @property
    def cancel_time(self):
        """Gets the cancel_time of this RestoreDatabaseMetadata.

        The time at which cancellation of this operation was received. Operations.CancelOperation starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.

        :return: The cancel_time of this RestoreDatabaseMetadata.
        :rtype: str
        """
        return self._cancel_time

    @cancel_time.setter
    def cancel_time(self, cancel_time):
        """Sets the cancel_time of this RestoreDatabaseMetadata.

        The time at which cancellation of this operation was received. Operations.CancelOperation starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.

        :param cancel_time: The cancel_time of this RestoreDatabaseMetadata.
        :type cancel_time: str
        """

        self._cancel_time = cancel_time

    @property
    def name(self):
        """Gets the name of this RestoreDatabaseMetadata.

        Name of the database being created and restored to.

        :return: The name of this RestoreDatabaseMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RestoreDatabaseMetadata.

        Name of the database being created and restored to.

        :param name: The name of this RestoreDatabaseMetadata.
        :type name: str
        """

        self._name = name

    @property
    def optimize_database_operation_name(self):
        """Gets the optimize_database_operation_name of this RestoreDatabaseMetadata.

        If exists, the name of the long-running operation that will be used to track the post-restore optimization process to optimize the performance of the restored database, and remove the dependency on the restore source. The name is of the form `projects//instances//databases//operations/` where the is the name of database being created and restored to. The metadata type of the long-running operation is OptimizeRestoredDatabaseMetadata. This long-running operation will be automatically created by the system after the RestoreDatabase long-running operation completes successfully. This operation will not be created if the restore was not successful.

        :return: The optimize_database_operation_name of this RestoreDatabaseMetadata.
        :rtype: str
        """
        return self._optimize_database_operation_name

    @optimize_database_operation_name.setter
    def optimize_database_operation_name(self, optimize_database_operation_name):
        """Sets the optimize_database_operation_name of this RestoreDatabaseMetadata.

        If exists, the name of the long-running operation that will be used to track the post-restore optimization process to optimize the performance of the restored database, and remove the dependency on the restore source. The name is of the form `projects//instances//databases//operations/` where the is the name of database being created and restored to. The metadata type of the long-running operation is OptimizeRestoredDatabaseMetadata. This long-running operation will be automatically created by the system after the RestoreDatabase long-running operation completes successfully. This operation will not be created if the restore was not successful.

        :param optimize_database_operation_name: The optimize_database_operation_name of this RestoreDatabaseMetadata.
        :type optimize_database_operation_name: str
        """

        self._optimize_database_operation_name = optimize_database_operation_name

    @property
    def progress(self):
        """Gets the progress of this RestoreDatabaseMetadata.


        :return: The progress of this RestoreDatabaseMetadata.
        :rtype: OperationProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this RestoreDatabaseMetadata.


        :param progress: The progress of this RestoreDatabaseMetadata.
        :type progress: OperationProgress
        """

        self._progress = progress

    @property
    def source_type(self):
        """Gets the source_type of this RestoreDatabaseMetadata.

        The type of the restore source.

        :return: The source_type of this RestoreDatabaseMetadata.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this RestoreDatabaseMetadata.

        The type of the restore source.

        :param source_type: The source_type of this RestoreDatabaseMetadata.
        :type source_type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "BACKUP"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type
