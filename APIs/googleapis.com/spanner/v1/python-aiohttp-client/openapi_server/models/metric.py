# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.derived_metric import DerivedMetric
from openapi_server.models.indexed_hot_key import IndexedHotKey
from openapi_server.models.indexed_key_range_infos import IndexedKeyRangeInfos
from openapi_server.models.localized_string import LocalizedString
from openapi_server.models.metric_matrix import MetricMatrix
from openapi_server import util


class Metric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation: str=None, category: LocalizedString=None, derived: DerivedMetric=None, display_label: LocalizedString=None, has_nonzero_data: bool=None, hot_value: float=None, indexed_hot_keys: Dict[str, IndexedHotKey]=None, indexed_key_range_infos: Dict[str, IndexedKeyRangeInfos]=None, info: LocalizedString=None, matrix: MetricMatrix=None, unit: LocalizedString=None, visible: bool=None):
        """Metric - a model defined in OpenAPI

        :param aggregation: The aggregation of this Metric.
        :param category: The category of this Metric.
        :param derived: The derived of this Metric.
        :param display_label: The display_label of this Metric.
        :param has_nonzero_data: The has_nonzero_data of this Metric.
        :param hot_value: The hot_value of this Metric.
        :param indexed_hot_keys: The indexed_hot_keys of this Metric.
        :param indexed_key_range_infos: The indexed_key_range_infos of this Metric.
        :param info: The info of this Metric.
        :param matrix: The matrix of this Metric.
        :param unit: The unit of this Metric.
        :param visible: The visible of this Metric.
        """
        self.openapi_types = {
            'aggregation': str,
            'category': LocalizedString,
            'derived': DerivedMetric,
            'display_label': LocalizedString,
            'has_nonzero_data': bool,
            'hot_value': float,
            'indexed_hot_keys': Dict[str, IndexedHotKey],
            'indexed_key_range_infos': Dict[str, IndexedKeyRangeInfos],
            'info': LocalizedString,
            'matrix': MetricMatrix,
            'unit': LocalizedString,
            'visible': bool
        }

        self.attribute_map = {
            'aggregation': 'aggregation',
            'category': 'category',
            'derived': 'derived',
            'display_label': 'displayLabel',
            'has_nonzero_data': 'hasNonzeroData',
            'hot_value': 'hotValue',
            'indexed_hot_keys': 'indexedHotKeys',
            'indexed_key_range_infos': 'indexedKeyRangeInfos',
            'info': 'info',
            'matrix': 'matrix',
            'unit': 'unit',
            'visible': 'visible'
        }

        self._aggregation = aggregation
        self._category = category
        self._derived = derived
        self._display_label = display_label
        self._has_nonzero_data = has_nonzero_data
        self._hot_value = hot_value
        self._indexed_hot_keys = indexed_hot_keys
        self._indexed_key_range_infos = indexed_key_range_infos
        self._info = info
        self._matrix = matrix
        self._unit = unit
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metric of this Metric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation(self):
        """Gets the aggregation of this Metric.

        The aggregation function used to aggregate each key bucket

        :return: The aggregation of this Metric.
        :rtype: str
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this Metric.

        The aggregation function used to aggregate each key bucket

        :param aggregation: The aggregation of this Metric.
        :type aggregation: str
        """
        allowed_values = ["AGGREGATION_UNSPECIFIED", "MAX", "SUM"]  # noqa: E501
        if aggregation not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation` ({0}), must be one of {1}"
                .format(aggregation, allowed_values)
            )

        self._aggregation = aggregation

    @property
    def category(self):
        """Gets the category of this Metric.


        :return: The category of this Metric.
        :rtype: LocalizedString
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Metric.


        :param category: The category of this Metric.
        :type category: LocalizedString
        """

        self._category = category

    @property
    def derived(self):
        """Gets the derived of this Metric.


        :return: The derived of this Metric.
        :rtype: DerivedMetric
        """
        return self._derived

    @derived.setter
    def derived(self, derived):
        """Sets the derived of this Metric.


        :param derived: The derived of this Metric.
        :type derived: DerivedMetric
        """

        self._derived = derived

    @property
    def display_label(self):
        """Gets the display_label of this Metric.


        :return: The display_label of this Metric.
        :rtype: LocalizedString
        """
        return self._display_label

    @display_label.setter
    def display_label(self, display_label):
        """Sets the display_label of this Metric.


        :param display_label: The display_label of this Metric.
        :type display_label: LocalizedString
        """

        self._display_label = display_label

    @property
    def has_nonzero_data(self):
        """Gets the has_nonzero_data of this Metric.

        Whether the metric has any non-zero data.

        :return: The has_nonzero_data of this Metric.
        :rtype: bool
        """
        return self._has_nonzero_data

    @has_nonzero_data.setter
    def has_nonzero_data(self, has_nonzero_data):
        """Sets the has_nonzero_data of this Metric.

        Whether the metric has any non-zero data.

        :param has_nonzero_data: The has_nonzero_data of this Metric.
        :type has_nonzero_data: bool
        """

        self._has_nonzero_data = has_nonzero_data

    @property
    def hot_value(self):
        """Gets the hot_value of this Metric.

        The value that is considered hot for the metric. On a per metric basis hotness signals high utilization and something that might potentially be a cause for concern by the end user. hot_value is used to calibrate and scale visual color scales.

        :return: The hot_value of this Metric.
        :rtype: float
        """
        return self._hot_value

    @hot_value.setter
    def hot_value(self, hot_value):
        """Sets the hot_value of this Metric.

        The value that is considered hot for the metric. On a per metric basis hotness signals high utilization and something that might potentially be a cause for concern by the end user. hot_value is used to calibrate and scale visual color scales.

        :param hot_value: The hot_value of this Metric.
        :type hot_value: float
        """

        self._hot_value = hot_value

    @property
    def indexed_hot_keys(self):
        """Gets the indexed_hot_keys of this Metric.

        The (sparse) mapping from time index to an IndexedHotKey message, representing those time intervals for which there are hot keys.

        :return: The indexed_hot_keys of this Metric.
        :rtype: Dict[str, IndexedHotKey]
        """
        return self._indexed_hot_keys

    @indexed_hot_keys.setter
    def indexed_hot_keys(self, indexed_hot_keys):
        """Sets the indexed_hot_keys of this Metric.

        The (sparse) mapping from time index to an IndexedHotKey message, representing those time intervals for which there are hot keys.

        :param indexed_hot_keys: The indexed_hot_keys of this Metric.
        :type indexed_hot_keys: Dict[str, IndexedHotKey]
        """

        self._indexed_hot_keys = indexed_hot_keys

    @property
    def indexed_key_range_infos(self):
        """Gets the indexed_key_range_infos of this Metric.

        The (sparse) mapping from time interval index to an IndexedKeyRangeInfos message, representing those time intervals for which there are informational messages concerning key ranges.

        :return: The indexed_key_range_infos of this Metric.
        :rtype: Dict[str, IndexedKeyRangeInfos]
        """
        return self._indexed_key_range_infos

    @indexed_key_range_infos.setter
    def indexed_key_range_infos(self, indexed_key_range_infos):
        """Sets the indexed_key_range_infos of this Metric.

        The (sparse) mapping from time interval index to an IndexedKeyRangeInfos message, representing those time intervals for which there are informational messages concerning key ranges.

        :param indexed_key_range_infos: The indexed_key_range_infos of this Metric.
        :type indexed_key_range_infos: Dict[str, IndexedKeyRangeInfos]
        """

        self._indexed_key_range_infos = indexed_key_range_infos

    @property
    def info(self):
        """Gets the info of this Metric.


        :return: The info of this Metric.
        :rtype: LocalizedString
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Metric.


        :param info: The info of this Metric.
        :type info: LocalizedString
        """

        self._info = info

    @property
    def matrix(self):
        """Gets the matrix of this Metric.


        :return: The matrix of this Metric.
        :rtype: MetricMatrix
        """
        return self._matrix

    @matrix.setter
    def matrix(self, matrix):
        """Sets the matrix of this Metric.


        :param matrix: The matrix of this Metric.
        :type matrix: MetricMatrix
        """

        self._matrix = matrix

    @property
    def unit(self):
        """Gets the unit of this Metric.


        :return: The unit of this Metric.
        :rtype: LocalizedString
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Metric.


        :param unit: The unit of this Metric.
        :type unit: LocalizedString
        """

        self._unit = unit

    @property
    def visible(self):
        """Gets the visible of this Metric.

        Whether the metric is visible to the end user.

        :return: The visible of this Metric.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Metric.

        Whether the metric is visible to the end user.

        :param visible: The visible of this Metric.
        :type visible: bool
        """

        self._visible = visible
