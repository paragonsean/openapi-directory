# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_range import KeyRange
from openapi_server import util


class KeySet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all: bool=None, keys: List[List[object]]=None, ranges: List[KeyRange]=None):
        """KeySet - a model defined in OpenAPI

        :param all: The all of this KeySet.
        :param keys: The keys of this KeySet.
        :param ranges: The ranges of this KeySet.
        """
        self.openapi_types = {
            'all': bool,
            'keys': List[List[object]],
            'ranges': List[KeyRange]
        }

        self.attribute_map = {
            'all': 'all',
            'keys': 'keys',
            'ranges': 'ranges'
        }

        self._all = all
        self._keys = keys
        self._ranges = ranges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeySet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeySet of this KeySet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all(self):
        """Gets the all of this KeySet.

        For convenience `all` can be set to `true` to indicate that this `KeySet` matches all keys in the table or index. Note that any keys specified in `keys` or `ranges` are only yielded once.

        :return: The all of this KeySet.
        :rtype: bool
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this KeySet.

        For convenience `all` can be set to `true` to indicate that this `KeySet` matches all keys in the table or index. Note that any keys specified in `keys` or `ranges` are only yielded once.

        :param all: The all of this KeySet.
        :type all: bool
        """

        self._all = all

    @property
    def keys(self):
        """Gets the keys of this KeySet.

        A list of specific keys. Entries in `keys` should have exactly as many elements as there are columns in the primary or index key with which this `KeySet` is used. Individual key values are encoded as described here.

        :return: The keys of this KeySet.
        :rtype: List[List[object]]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this KeySet.

        A list of specific keys. Entries in `keys` should have exactly as many elements as there are columns in the primary or index key with which this `KeySet` is used. Individual key values are encoded as described here.

        :param keys: The keys of this KeySet.
        :type keys: List[List[object]]
        """

        self._keys = keys

    @property
    def ranges(self):
        """Gets the ranges of this KeySet.

        A list of key ranges. See KeyRange for more information about key range specifications.

        :return: The ranges of this KeySet.
        :rtype: List[KeyRange]
        """
        return self._ranges

    @ranges.setter
    def ranges(self, ranges):
        """Sets the ranges of this KeySet.

        A list of key ranges. See KeyRange for more information about key range specifications.

        :param ranges: The ranges of this KeySet.
        :type ranges: List[KeyRange]
        """

        self._ranges = ranges
