# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_backup_encryption_config import CopyBackupEncryptionConfig
from openapi_server import util


class CopyBackupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_id: str=None, encryption_config: CopyBackupEncryptionConfig=None, expire_time: str=None, source_backup: str=None):
        """CopyBackupRequest - a model defined in OpenAPI

        :param backup_id: The backup_id of this CopyBackupRequest.
        :param encryption_config: The encryption_config of this CopyBackupRequest.
        :param expire_time: The expire_time of this CopyBackupRequest.
        :param source_backup: The source_backup of this CopyBackupRequest.
        """
        self.openapi_types = {
            'backup_id': str,
            'encryption_config': CopyBackupEncryptionConfig,
            'expire_time': str,
            'source_backup': str
        }

        self.attribute_map = {
            'backup_id': 'backupId',
            'encryption_config': 'encryptionConfig',
            'expire_time': 'expireTime',
            'source_backup': 'sourceBackup'
        }

        self._backup_id = backup_id
        self._encryption_config = encryption_config
        self._expire_time = expire_time
        self._source_backup = source_backup

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyBackupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyBackupRequest of this CopyBackupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_id(self):
        """Gets the backup_id of this CopyBackupRequest.

        Required. The id of the backup copy. The `backup_id` appended to `parent` forms the full backup_uri of the form `projects//instances//backups/`.

        :return: The backup_id of this CopyBackupRequest.
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this CopyBackupRequest.

        Required. The id of the backup copy. The `backup_id` appended to `parent` forms the full backup_uri of the form `projects//instances//backups/`.

        :param backup_id: The backup_id of this CopyBackupRequest.
        :type backup_id: str
        """

        self._backup_id = backup_id

    @property
    def encryption_config(self):
        """Gets the encryption_config of this CopyBackupRequest.


        :return: The encryption_config of this CopyBackupRequest.
        :rtype: CopyBackupEncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this CopyBackupRequest.


        :param encryption_config: The encryption_config of this CopyBackupRequest.
        :type encryption_config: CopyBackupEncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def expire_time(self):
        """Gets the expire_time of this CopyBackupRequest.

        Required. The expiration time of the backup in microsecond granularity. The expiration time must be at least 6 hours and at most 366 days from the `create_time` of the source backup. Once the `expire_time` has passed, the backup is eligible to be automatically deleted by Cloud Spanner to free the resources used by the backup.

        :return: The expire_time of this CopyBackupRequest.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this CopyBackupRequest.

        Required. The expiration time of the backup in microsecond granularity. The expiration time must be at least 6 hours and at most 366 days from the `create_time` of the source backup. Once the `expire_time` has passed, the backup is eligible to be automatically deleted by Cloud Spanner to free the resources used by the backup.

        :param expire_time: The expire_time of this CopyBackupRequest.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def source_backup(self):
        """Gets the source_backup of this CopyBackupRequest.

        Required. The source backup to be copied. The source backup needs to be in READY state for it to be copied. Once CopyBackup is in progress, the source backup cannot be deleted or cleaned up on expiration until CopyBackup is finished. Values are of the form: `projects//instances//backups/`.

        :return: The source_backup of this CopyBackupRequest.
        :rtype: str
        """
        return self._source_backup

    @source_backup.setter
    def source_backup(self, source_backup):
        """Sets the source_backup of this CopyBackupRequest.

        Required. The source backup to be copied. The source backup needs to be in READY state for it to be copied. Once CopyBackup is in progress, the source backup cannot be deleted or cleaned up on expiration until CopyBackup is finished. Values are of the form: `projects//instances//backups/`.

        :param source_backup: The source_backup of this CopyBackupRequest.
        :type source_backup: str
        """

        self._source_backup = source_backup
