# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrefixNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_node: bool=None, depth: int=None, end_index: int=None, start_index: int=None, word: str=None):
        """PrefixNode - a model defined in OpenAPI

        :param data_source_node: The data_source_node of this PrefixNode.
        :param depth: The depth of this PrefixNode.
        :param end_index: The end_index of this PrefixNode.
        :param start_index: The start_index of this PrefixNode.
        :param word: The word of this PrefixNode.
        """
        self.openapi_types = {
            'data_source_node': bool,
            'depth': int,
            'end_index': int,
            'start_index': int,
            'word': str
        }

        self.attribute_map = {
            'data_source_node': 'dataSourceNode',
            'depth': 'depth',
            'end_index': 'endIndex',
            'start_index': 'startIndex',
            'word': 'word'
        }

        self._data_source_node = data_source_node
        self._depth = depth
        self._end_index = end_index
        self._start_index = start_index
        self._word = word

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrefixNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrefixNode of this PrefixNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_node(self):
        """Gets the data_source_node of this PrefixNode.

        Whether this corresponds to a data_source name.

        :return: The data_source_node of this PrefixNode.
        :rtype: bool
        """
        return self._data_source_node

    @data_source_node.setter
    def data_source_node(self, data_source_node):
        """Sets the data_source_node of this PrefixNode.

        Whether this corresponds to a data_source name.

        :param data_source_node: The data_source_node of this PrefixNode.
        :type data_source_node: bool
        """

        self._data_source_node = data_source_node

    @property
    def depth(self):
        """Gets the depth of this PrefixNode.

        The depth in the prefix hierarchy.

        :return: The depth of this PrefixNode.
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this PrefixNode.

        The depth in the prefix hierarchy.

        :param depth: The depth of this PrefixNode.
        :type depth: int
        """

        self._depth = depth

    @property
    def end_index(self):
        """Gets the end_index of this PrefixNode.

        The index of the end key bucket of the range that this node spans.

        :return: The end_index of this PrefixNode.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this PrefixNode.

        The index of the end key bucket of the range that this node spans.

        :param end_index: The end_index of this PrefixNode.
        :type end_index: int
        """

        self._end_index = end_index

    @property
    def start_index(self):
        """Gets the start_index of this PrefixNode.

        The index of the start key bucket of the range that this node spans.

        :return: The start_index of this PrefixNode.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this PrefixNode.

        The index of the start key bucket of the range that this node spans.

        :param start_index: The start_index of this PrefixNode.
        :type start_index: int
        """

        self._start_index = start_index

    @property
    def word(self):
        """Gets the word of this PrefixNode.

        The string represented by the prefix node.

        :return: The word of this PrefixNode.
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this PrefixNode.

        The string represented by the prefix node.

        :param word: The word of this PrefixNode.
        :type word: str
        """

        self._word = word
