# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDatabaseDdlRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation_id: str=None, proto_descriptors: str=None, statements: List[str]=None):
        """UpdateDatabaseDdlRequest - a model defined in OpenAPI

        :param operation_id: The operation_id of this UpdateDatabaseDdlRequest.
        :param proto_descriptors: The proto_descriptors of this UpdateDatabaseDdlRequest.
        :param statements: The statements of this UpdateDatabaseDdlRequest.
        """
        self.openapi_types = {
            'operation_id': str,
            'proto_descriptors': str,
            'statements': List[str]
        }

        self.attribute_map = {
            'operation_id': 'operationId',
            'proto_descriptors': 'protoDescriptors',
            'statements': 'statements'
        }

        self._operation_id = operation_id
        self._proto_descriptors = proto_descriptors
        self._statements = statements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDatabaseDdlRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDatabaseDdlRequest of this UpdateDatabaseDdlRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation_id(self):
        """Gets the operation_id of this UpdateDatabaseDdlRequest.

        If empty, the new update request is assigned an automatically-generated operation ID. Otherwise, `operation_id` is used to construct the name of the resulting Operation. Specifying an explicit operation ID simplifies determining whether the statements were executed in the event that the UpdateDatabaseDdl call is replayed, or the return value is otherwise lost: the database and `operation_id` fields can be combined to form the name of the resulting longrunning.Operation: `/operations/`. `operation_id` should be unique within the database, and must be a valid identifier: `a-z*`. Note that automatically-generated operation IDs always begin with an underscore. If the named operation already exists, UpdateDatabaseDdl returns `ALREADY_EXISTS`.

        :return: The operation_id of this UpdateDatabaseDdlRequest.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this UpdateDatabaseDdlRequest.

        If empty, the new update request is assigned an automatically-generated operation ID. Otherwise, `operation_id` is used to construct the name of the resulting Operation. Specifying an explicit operation ID simplifies determining whether the statements were executed in the event that the UpdateDatabaseDdl call is replayed, or the return value is otherwise lost: the database and `operation_id` fields can be combined to form the name of the resulting longrunning.Operation: `/operations/`. `operation_id` should be unique within the database, and must be a valid identifier: `a-z*`. Note that automatically-generated operation IDs always begin with an underscore. If the named operation already exists, UpdateDatabaseDdl returns `ALREADY_EXISTS`.

        :param operation_id: The operation_id of this UpdateDatabaseDdlRequest.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def proto_descriptors(self):
        """Gets the proto_descriptors of this UpdateDatabaseDdlRequest.

        Optional. Proto descriptors used by CREATE/ALTER PROTO BUNDLE statements. Contains a protobuf-serialized [google.protobuf.FileDescriptorSet](https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto). To generate it, [install](https://grpc.io/docs/protoc-installation/) and run `protoc` with --include_imports and --descriptor_set_out. For example, to generate for moon/shot/app.proto, run ``` $protoc --proto_path=/app_path --proto_path=/lib_path \\ --include_imports \\ --descriptor_set_out=descriptors.data \\ moon/shot/app.proto ``` For more details, see protobuffer [self description](https://developers.google.com/protocol-buffers/docs/techniques#self-description).

        :return: The proto_descriptors of this UpdateDatabaseDdlRequest.
        :rtype: str
        """
        return self._proto_descriptors

    @proto_descriptors.setter
    def proto_descriptors(self, proto_descriptors):
        """Sets the proto_descriptors of this UpdateDatabaseDdlRequest.

        Optional. Proto descriptors used by CREATE/ALTER PROTO BUNDLE statements. Contains a protobuf-serialized [google.protobuf.FileDescriptorSet](https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto). To generate it, [install](https://grpc.io/docs/protoc-installation/) and run `protoc` with --include_imports and --descriptor_set_out. For example, to generate for moon/shot/app.proto, run ``` $protoc --proto_path=/app_path --proto_path=/lib_path \\ --include_imports \\ --descriptor_set_out=descriptors.data \\ moon/shot/app.proto ``` For more details, see protobuffer [self description](https://developers.google.com/protocol-buffers/docs/techniques#self-description).

        :param proto_descriptors: The proto_descriptors of this UpdateDatabaseDdlRequest.
        :type proto_descriptors: str
        """

        self._proto_descriptors = proto_descriptors

    @property
    def statements(self):
        """Gets the statements of this UpdateDatabaseDdlRequest.

        Required. DDL statements to be applied to the database.

        :return: The statements of this UpdateDatabaseDdlRequest.
        :rtype: List[str]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this UpdateDatabaseDdlRequest.

        Required. DDL statements to be applied to the database.

        :param statements: The statements of this UpdateDatabaseDdlRequest.
        :type statements: List[str]
        """

        self._statements = statements
