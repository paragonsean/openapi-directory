# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.context_value import ContextValue
from openapi_server.models.localized_string import LocalizedString
from openapi_server import util


class KeyRangeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_values: List[ContextValue]=None, end_key_index: int=None, info: LocalizedString=None, keys_count: str=None, metric: LocalizedString=None, start_key_index: int=None, time_offset: str=None, unit: LocalizedString=None, value: float=None):
        """KeyRangeInfo - a model defined in OpenAPI

        :param context_values: The context_values of this KeyRangeInfo.
        :param end_key_index: The end_key_index of this KeyRangeInfo.
        :param info: The info of this KeyRangeInfo.
        :param keys_count: The keys_count of this KeyRangeInfo.
        :param metric: The metric of this KeyRangeInfo.
        :param start_key_index: The start_key_index of this KeyRangeInfo.
        :param time_offset: The time_offset of this KeyRangeInfo.
        :param unit: The unit of this KeyRangeInfo.
        :param value: The value of this KeyRangeInfo.
        """
        self.openapi_types = {
            'context_values': List[ContextValue],
            'end_key_index': int,
            'info': LocalizedString,
            'keys_count': str,
            'metric': LocalizedString,
            'start_key_index': int,
            'time_offset': str,
            'unit': LocalizedString,
            'value': float
        }

        self.attribute_map = {
            'context_values': 'contextValues',
            'end_key_index': 'endKeyIndex',
            'info': 'info',
            'keys_count': 'keysCount',
            'metric': 'metric',
            'start_key_index': 'startKeyIndex',
            'time_offset': 'timeOffset',
            'unit': 'unit',
            'value': 'value'
        }

        self._context_values = context_values
        self._end_key_index = end_key_index
        self._info = info
        self._keys_count = keys_count
        self._metric = metric
        self._start_key_index = start_key_index
        self._time_offset = time_offset
        self._unit = unit
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyRangeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyRangeInfo of this KeyRangeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_values(self):
        """Gets the context_values of this KeyRangeInfo.

        The list of context values for this key range.

        :return: The context_values of this KeyRangeInfo.
        :rtype: List[ContextValue]
        """
        return self._context_values

    @context_values.setter
    def context_values(self, context_values):
        """Sets the context_values of this KeyRangeInfo.

        The list of context values for this key range.

        :param context_values: The context_values of this KeyRangeInfo.
        :type context_values: List[ContextValue]
        """

        self._context_values = context_values

    @property
    def end_key_index(self):
        """Gets the end_key_index of this KeyRangeInfo.

        The index of the end key in indexed_keys.

        :return: The end_key_index of this KeyRangeInfo.
        :rtype: int
        """
        return self._end_key_index

    @end_key_index.setter
    def end_key_index(self, end_key_index):
        """Sets the end_key_index of this KeyRangeInfo.

        The index of the end key in indexed_keys.

        :param end_key_index: The end_key_index of this KeyRangeInfo.
        :type end_key_index: int
        """

        self._end_key_index = end_key_index

    @property
    def info(self):
        """Gets the info of this KeyRangeInfo.


        :return: The info of this KeyRangeInfo.
        :rtype: LocalizedString
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this KeyRangeInfo.


        :param info: The info of this KeyRangeInfo.
        :type info: LocalizedString
        """

        self._info = info

    @property
    def keys_count(self):
        """Gets the keys_count of this KeyRangeInfo.

        The number of keys this range covers.

        :return: The keys_count of this KeyRangeInfo.
        :rtype: str
        """
        return self._keys_count

    @keys_count.setter
    def keys_count(self, keys_count):
        """Sets the keys_count of this KeyRangeInfo.

        The number of keys this range covers.

        :param keys_count: The keys_count of this KeyRangeInfo.
        :type keys_count: str
        """

        self._keys_count = keys_count

    @property
    def metric(self):
        """Gets the metric of this KeyRangeInfo.


        :return: The metric of this KeyRangeInfo.
        :rtype: LocalizedString
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this KeyRangeInfo.


        :param metric: The metric of this KeyRangeInfo.
        :type metric: LocalizedString
        """

        self._metric = metric

    @property
    def start_key_index(self):
        """Gets the start_key_index of this KeyRangeInfo.

        The index of the start key in indexed_keys.

        :return: The start_key_index of this KeyRangeInfo.
        :rtype: int
        """
        return self._start_key_index

    @start_key_index.setter
    def start_key_index(self, start_key_index):
        """Sets the start_key_index of this KeyRangeInfo.

        The index of the start key in indexed_keys.

        :param start_key_index: The start_key_index of this KeyRangeInfo.
        :type start_key_index: int
        """

        self._start_key_index = start_key_index

    @property
    def time_offset(self):
        """Gets the time_offset of this KeyRangeInfo.

        The time offset. This is the time since the start of the time interval.

        :return: The time_offset of this KeyRangeInfo.
        :rtype: str
        """
        return self._time_offset

    @time_offset.setter
    def time_offset(self, time_offset):
        """Sets the time_offset of this KeyRangeInfo.

        The time offset. This is the time since the start of the time interval.

        :param time_offset: The time_offset of this KeyRangeInfo.
        :type time_offset: str
        """

        self._time_offset = time_offset

    @property
    def unit(self):
        """Gets the unit of this KeyRangeInfo.


        :return: The unit of this KeyRangeInfo.
        :rtype: LocalizedString
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this KeyRangeInfo.


        :param unit: The unit of this KeyRangeInfo.
        :type unit: LocalizedString
        """

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this KeyRangeInfo.

        The value of the metric.

        :return: The value of this KeyRangeInfo.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this KeyRangeInfo.

        The value of the metric.

        :param value: The value of this KeyRangeInfo.
        :type value: float
        """

        self._value = value
