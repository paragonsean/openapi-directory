# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partition_options import PartitionOptions
from openapi_server.models.transaction_selector import TransactionSelector
from openapi_server.models.type import Type
from openapi_server import util


class PartitionQueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, param_types: Dict[str, Type]=None, params: Dict[str, object]=None, partition_options: PartitionOptions=None, sql: str=None, transaction: TransactionSelector=None):
        """PartitionQueryRequest - a model defined in OpenAPI

        :param param_types: The param_types of this PartitionQueryRequest.
        :param params: The params of this PartitionQueryRequest.
        :param partition_options: The partition_options of this PartitionQueryRequest.
        :param sql: The sql of this PartitionQueryRequest.
        :param transaction: The transaction of this PartitionQueryRequest.
        """
        self.openapi_types = {
            'param_types': Dict[str, Type],
            'params': Dict[str, object],
            'partition_options': PartitionOptions,
            'sql': str,
            'transaction': TransactionSelector
        }

        self.attribute_map = {
            'param_types': 'paramTypes',
            'params': 'params',
            'partition_options': 'partitionOptions',
            'sql': 'sql',
            'transaction': 'transaction'
        }

        self._param_types = param_types
        self._params = params
        self._partition_options = partition_options
        self._sql = sql
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionQueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionQueryRequest of this PartitionQueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def param_types(self):
        """Gets the param_types of this PartitionQueryRequest.

        It is not always possible for Cloud Spanner to infer the right SQL type from a JSON value. For example, values of type `BYTES` and values of type `STRING` both appear in params as JSON strings. In these cases, `param_types` can be used to specify the exact SQL type for some or all of the SQL query parameters. See the definition of Type for more information about SQL types.

        :return: The param_types of this PartitionQueryRequest.
        :rtype: Dict[str, Type]
        """
        return self._param_types

    @param_types.setter
    def param_types(self, param_types):
        """Sets the param_types of this PartitionQueryRequest.

        It is not always possible for Cloud Spanner to infer the right SQL type from a JSON value. For example, values of type `BYTES` and values of type `STRING` both appear in params as JSON strings. In these cases, `param_types` can be used to specify the exact SQL type for some or all of the SQL query parameters. See the definition of Type for more information about SQL types.

        :param param_types: The param_types of this PartitionQueryRequest.
        :type param_types: Dict[str, Type]
        """

        self._param_types = param_types

    @property
    def params(self):
        """Gets the params of this PartitionQueryRequest.

        Parameter names and values that bind to placeholders in the SQL string. A parameter placeholder consists of the `@` character followed by the parameter name (for example, `@firstName`). Parameter names can contain letters, numbers, and underscores. Parameters can appear anywhere that a literal value is expected. The same parameter name can be used more than once, for example: `\"WHERE id > @msg_id AND id < @msg_id + 100\"` It is an error to execute a SQL statement with unbound parameters.

        :return: The params of this PartitionQueryRequest.
        :rtype: Dict[str, object]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this PartitionQueryRequest.

        Parameter names and values that bind to placeholders in the SQL string. A parameter placeholder consists of the `@` character followed by the parameter name (for example, `@firstName`). Parameter names can contain letters, numbers, and underscores. Parameters can appear anywhere that a literal value is expected. The same parameter name can be used more than once, for example: `\"WHERE id > @msg_id AND id < @msg_id + 100\"` It is an error to execute a SQL statement with unbound parameters.

        :param params: The params of this PartitionQueryRequest.
        :type params: Dict[str, object]
        """

        self._params = params

    @property
    def partition_options(self):
        """Gets the partition_options of this PartitionQueryRequest.


        :return: The partition_options of this PartitionQueryRequest.
        :rtype: PartitionOptions
        """
        return self._partition_options

    @partition_options.setter
    def partition_options(self, partition_options):
        """Sets the partition_options of this PartitionQueryRequest.


        :param partition_options: The partition_options of this PartitionQueryRequest.
        :type partition_options: PartitionOptions
        """

        self._partition_options = partition_options

    @property
    def sql(self):
        """Gets the sql of this PartitionQueryRequest.

        Required. The query request to generate partitions for. The request will fail if the query is not root partitionable. For a query to be root partitionable, it needs to satisfy a few conditions. For example, if the query execution plan contains a distributed union operator, then it must be the first operator in the plan. For more information about other conditions, see [Read data in parallel](https://cloud.google.com/spanner/docs/reads#read_data_in_parallel). The query request must not contain DML commands, such as INSERT, UPDATE, or DELETE. Use ExecuteStreamingSql with a PartitionedDml transaction for large, partition-friendly DML operations.

        :return: The sql of this PartitionQueryRequest.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this PartitionQueryRequest.

        Required. The query request to generate partitions for. The request will fail if the query is not root partitionable. For a query to be root partitionable, it needs to satisfy a few conditions. For example, if the query execution plan contains a distributed union operator, then it must be the first operator in the plan. For more information about other conditions, see [Read data in parallel](https://cloud.google.com/spanner/docs/reads#read_data_in_parallel). The query request must not contain DML commands, such as INSERT, UPDATE, or DELETE. Use ExecuteStreamingSql with a PartitionedDml transaction for large, partition-friendly DML operations.

        :param sql: The sql of this PartitionQueryRequest.
        :type sql: str
        """

        self._sql = sql

    @property
    def transaction(self):
        """Gets the transaction of this PartitionQueryRequest.


        :return: The transaction of this PartitionQueryRequest.
        :rtype: TransactionSelector
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this PartitionQueryRequest.


        :param transaction: The transaction of this PartitionQueryRequest.
        :type transaction: TransactionSelector
        """

        self._transaction = transaction
