# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PartitionOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_partitions: str=None, partition_size_bytes: str=None):
        """PartitionOptions - a model defined in OpenAPI

        :param max_partitions: The max_partitions of this PartitionOptions.
        :param partition_size_bytes: The partition_size_bytes of this PartitionOptions.
        """
        self.openapi_types = {
            'max_partitions': str,
            'partition_size_bytes': str
        }

        self.attribute_map = {
            'max_partitions': 'maxPartitions',
            'partition_size_bytes': 'partitionSizeBytes'
        }

        self._max_partitions = max_partitions
        self._partition_size_bytes = partition_size_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionOptions of this PartitionOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_partitions(self):
        """Gets the max_partitions of this PartitionOptions.

        **Note:** This hint is currently ignored by PartitionQuery and PartitionRead requests. The desired maximum number of partitions to return. For example, this may be set to the number of workers available. The default for this option is currently 10,000. The maximum value is currently 200,000. This is only a hint. The actual number of partitions returned may be smaller or larger than this maximum count request.

        :return: The max_partitions of this PartitionOptions.
        :rtype: str
        """
        return self._max_partitions

    @max_partitions.setter
    def max_partitions(self, max_partitions):
        """Sets the max_partitions of this PartitionOptions.

        **Note:** This hint is currently ignored by PartitionQuery and PartitionRead requests. The desired maximum number of partitions to return. For example, this may be set to the number of workers available. The default for this option is currently 10,000. The maximum value is currently 200,000. This is only a hint. The actual number of partitions returned may be smaller or larger than this maximum count request.

        :param max_partitions: The max_partitions of this PartitionOptions.
        :type max_partitions: str
        """

        self._max_partitions = max_partitions

    @property
    def partition_size_bytes(self):
        """Gets the partition_size_bytes of this PartitionOptions.

        **Note:** This hint is currently ignored by PartitionQuery and PartitionRead requests. The desired data size for each partition generated. The default for this option is currently 1 GiB. This is only a hint. The actual size of each partition may be smaller or larger than this size request.

        :return: The partition_size_bytes of this PartitionOptions.
        :rtype: str
        """
        return self._partition_size_bytes

    @partition_size_bytes.setter
    def partition_size_bytes(self, partition_size_bytes):
        """Sets the partition_size_bytes of this PartitionOptions.

        **Note:** This hint is currently ignored by PartitionQuery and PartitionRead requests. The desired data size for each partition generated. The default for this option is currently 1 GiB. This is only a hint. The actual size of each partition may be smaller or larger than this size request.

        :param partition_size_bytes: The partition_size_bytes of this PartitionOptions.
        :type partition_size_bytes: str
        """

        self._partition_size_bytes = partition_size_bytes
