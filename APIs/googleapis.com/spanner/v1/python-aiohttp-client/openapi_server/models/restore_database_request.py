# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.restore_database_encryption_config import RestoreDatabaseEncryptionConfig
from openapi_server import util


class RestoreDatabaseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup: str=None, database_id: str=None, encryption_config: RestoreDatabaseEncryptionConfig=None):
        """RestoreDatabaseRequest - a model defined in OpenAPI

        :param backup: The backup of this RestoreDatabaseRequest.
        :param database_id: The database_id of this RestoreDatabaseRequest.
        :param encryption_config: The encryption_config of this RestoreDatabaseRequest.
        """
        self.openapi_types = {
            'backup': str,
            'database_id': str,
            'encryption_config': RestoreDatabaseEncryptionConfig
        }

        self.attribute_map = {
            'backup': 'backup',
            'database_id': 'databaseId',
            'encryption_config': 'encryptionConfig'
        }

        self._backup = backup
        self._database_id = database_id
        self._encryption_config = encryption_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestoreDatabaseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestoreDatabaseRequest of this RestoreDatabaseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup(self):
        """Gets the backup of this RestoreDatabaseRequest.

        Name of the backup from which to restore. Values are of the form `projects//instances//backups/`.

        :return: The backup of this RestoreDatabaseRequest.
        :rtype: str
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """Sets the backup of this RestoreDatabaseRequest.

        Name of the backup from which to restore. Values are of the form `projects//instances//backups/`.

        :param backup: The backup of this RestoreDatabaseRequest.
        :type backup: str
        """

        self._backup = backup

    @property
    def database_id(self):
        """Gets the database_id of this RestoreDatabaseRequest.

        Required. The id of the database to create and restore to. This database must not already exist. The `database_id` appended to `parent` forms the full database name of the form `projects//instances//databases/`.

        :return: The database_id of this RestoreDatabaseRequest.
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this RestoreDatabaseRequest.

        Required. The id of the database to create and restore to. This database must not already exist. The `database_id` appended to `parent` forms the full database name of the form `projects//instances//databases/`.

        :param database_id: The database_id of this RestoreDatabaseRequest.
        :type database_id: str
        """

        self._database_id = database_id

    @property
    def encryption_config(self):
        """Gets the encryption_config of this RestoreDatabaseRequest.


        :return: The encryption_config of this RestoreDatabaseRequest.
        :rtype: RestoreDatabaseEncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this RestoreDatabaseRequest.


        :param encryption_config: The encryption_config of this RestoreDatabaseRequest.
        :type encryption_config: RestoreDatabaseEncryptionConfig
        """

        self._encryption_config = encryption_config
