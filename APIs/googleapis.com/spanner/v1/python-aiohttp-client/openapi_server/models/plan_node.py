# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.child_link import ChildLink
from openapi_server.models.short_representation import ShortRepresentation
from openapi_server import util


class PlanNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_links: List[ChildLink]=None, display_name: str=None, execution_stats: Dict[str, object]=None, index: int=None, kind: str=None, metadata: Dict[str, object]=None, short_representation: ShortRepresentation=None):
        """PlanNode - a model defined in OpenAPI

        :param child_links: The child_links of this PlanNode.
        :param display_name: The display_name of this PlanNode.
        :param execution_stats: The execution_stats of this PlanNode.
        :param index: The index of this PlanNode.
        :param kind: The kind of this PlanNode.
        :param metadata: The metadata of this PlanNode.
        :param short_representation: The short_representation of this PlanNode.
        """
        self.openapi_types = {
            'child_links': List[ChildLink],
            'display_name': str,
            'execution_stats': Dict[str, object],
            'index': int,
            'kind': str,
            'metadata': Dict[str, object],
            'short_representation': ShortRepresentation
        }

        self.attribute_map = {
            'child_links': 'childLinks',
            'display_name': 'displayName',
            'execution_stats': 'executionStats',
            'index': 'index',
            'kind': 'kind',
            'metadata': 'metadata',
            'short_representation': 'shortRepresentation'
        }

        self._child_links = child_links
        self._display_name = display_name
        self._execution_stats = execution_stats
        self._index = index
        self._kind = kind
        self._metadata = metadata
        self._short_representation = short_representation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanNode of this PlanNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_links(self):
        """Gets the child_links of this PlanNode.

        List of child node `index`es and their relationship to this parent.

        :return: The child_links of this PlanNode.
        :rtype: List[ChildLink]
        """
        return self._child_links

    @child_links.setter
    def child_links(self, child_links):
        """Sets the child_links of this PlanNode.

        List of child node `index`es and their relationship to this parent.

        :param child_links: The child_links of this PlanNode.
        :type child_links: List[ChildLink]
        """

        self._child_links = child_links

    @property
    def display_name(self):
        """Gets the display_name of this PlanNode.

        The display name for the node.

        :return: The display_name of this PlanNode.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PlanNode.

        The display name for the node.

        :param display_name: The display_name of this PlanNode.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def execution_stats(self):
        """Gets the execution_stats of this PlanNode.

        The execution statistics associated with the node, contained in a group of key-value pairs. Only present if the plan was returned as a result of a profile query. For example, number of executions, number of rows/time per execution etc.

        :return: The execution_stats of this PlanNode.
        :rtype: Dict[str, object]
        """
        return self._execution_stats

    @execution_stats.setter
    def execution_stats(self, execution_stats):
        """Sets the execution_stats of this PlanNode.

        The execution statistics associated with the node, contained in a group of key-value pairs. Only present if the plan was returned as a result of a profile query. For example, number of executions, number of rows/time per execution etc.

        :param execution_stats: The execution_stats of this PlanNode.
        :type execution_stats: Dict[str, object]
        """

        self._execution_stats = execution_stats

    @property
    def index(self):
        """Gets the index of this PlanNode.

        The `PlanNode`'s index in node list.

        :return: The index of this PlanNode.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this PlanNode.

        The `PlanNode`'s index in node list.

        :param index: The index of this PlanNode.
        :type index: int
        """

        self._index = index

    @property
    def kind(self):
        """Gets the kind of this PlanNode.

        Used to determine the type of node. May be needed for visualizing different kinds of nodes differently. For example, If the node is a SCALAR node, it will have a condensed representation which can be used to directly embed a description of the node in its parent.

        :return: The kind of this PlanNode.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PlanNode.

        Used to determine the type of node. May be needed for visualizing different kinds of nodes differently. For example, If the node is a SCALAR node, it will have a condensed representation which can be used to directly embed a description of the node in its parent.

        :param kind: The kind of this PlanNode.
        :type kind: str
        """
        allowed_values = ["KIND_UNSPECIFIED", "RELATIONAL", "SCALAR"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def metadata(self):
        """Gets the metadata of this PlanNode.

        Attributes relevant to the node contained in a group of key-value pairs. For example, a Parameter Reference node could have the following information in its metadata: { \"parameter_reference\": \"param1\", \"parameter_type\": \"array\" }

        :return: The metadata of this PlanNode.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PlanNode.

        Attributes relevant to the node contained in a group of key-value pairs. For example, a Parameter Reference node could have the following information in its metadata: { \"parameter_reference\": \"param1\", \"parameter_type\": \"array\" }

        :param metadata: The metadata of this PlanNode.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def short_representation(self):
        """Gets the short_representation of this PlanNode.


        :return: The short_representation of this PlanNode.
        :rtype: ShortRepresentation
        """
        return self._short_representation

    @short_representation.setter
    def short_representation(self, short_representation):
        """Sets the short_representation of this PlanNode.


        :param short_representation: The short_representation of this PlanNode.
        :type short_representation: ShortRepresentation
        """

        self._short_representation = short_representation
