# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.localized_string import LocalizedString
from openapi_server import util


class DerivedMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, denominator: LocalizedString=None, numerator: LocalizedString=None):
        """DerivedMetric - a model defined in OpenAPI

        :param denominator: The denominator of this DerivedMetric.
        :param numerator: The numerator of this DerivedMetric.
        """
        self.openapi_types = {
            'denominator': LocalizedString,
            'numerator': LocalizedString
        }

        self.attribute_map = {
            'denominator': 'denominator',
            'numerator': 'numerator'
        }

        self._denominator = denominator
        self._numerator = numerator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DerivedMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DerivedMetric of this DerivedMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def denominator(self):
        """Gets the denominator of this DerivedMetric.


        :return: The denominator of this DerivedMetric.
        :rtype: LocalizedString
        """
        return self._denominator

    @denominator.setter
    def denominator(self, denominator):
        """Sets the denominator of this DerivedMetric.


        :param denominator: The denominator of this DerivedMetric.
        :type denominator: LocalizedString
        """

        self._denominator = denominator

    @property
    def numerator(self):
        """Gets the numerator of this DerivedMetric.


        :return: The numerator of this DerivedMetric.
        :rtype: LocalizedString
        """
        return self._numerator

    @numerator.setter
    def numerator(self, numerator):
        """Sets the numerator of this DerivedMetric.


        :param numerator: The numerator of this DerivedMetric.
        :type numerator: LocalizedString
        """

        self._numerator = numerator
