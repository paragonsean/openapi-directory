# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server.models.encryption_info import EncryptionInfo
from openapi_server.models.restore_info import RestoreInfo
from openapi_server import util


class Database(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, database_dialect: str=None, default_leader: str=None, earliest_version_time: str=None, enable_drop_protection: bool=None, encryption_config: EncryptionConfig=None, encryption_info: List[EncryptionInfo]=None, name: str=None, reconciling: bool=None, restore_info: RestoreInfo=None, state: str=None, version_retention_period: str=None):
        """Database - a model defined in OpenAPI

        :param create_time: The create_time of this Database.
        :param database_dialect: The database_dialect of this Database.
        :param default_leader: The default_leader of this Database.
        :param earliest_version_time: The earliest_version_time of this Database.
        :param enable_drop_protection: The enable_drop_protection of this Database.
        :param encryption_config: The encryption_config of this Database.
        :param encryption_info: The encryption_info of this Database.
        :param name: The name of this Database.
        :param reconciling: The reconciling of this Database.
        :param restore_info: The restore_info of this Database.
        :param state: The state of this Database.
        :param version_retention_period: The version_retention_period of this Database.
        """
        self.openapi_types = {
            'create_time': str,
            'database_dialect': str,
            'default_leader': str,
            'earliest_version_time': str,
            'enable_drop_protection': bool,
            'encryption_config': EncryptionConfig,
            'encryption_info': List[EncryptionInfo],
            'name': str,
            'reconciling': bool,
            'restore_info': RestoreInfo,
            'state': str,
            'version_retention_period': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'database_dialect': 'databaseDialect',
            'default_leader': 'defaultLeader',
            'earliest_version_time': 'earliestVersionTime',
            'enable_drop_protection': 'enableDropProtection',
            'encryption_config': 'encryptionConfig',
            'encryption_info': 'encryptionInfo',
            'name': 'name',
            'reconciling': 'reconciling',
            'restore_info': 'restoreInfo',
            'state': 'state',
            'version_retention_period': 'versionRetentionPeriod'
        }

        self._create_time = create_time
        self._database_dialect = database_dialect
        self._default_leader = default_leader
        self._earliest_version_time = earliest_version_time
        self._enable_drop_protection = enable_drop_protection
        self._encryption_config = encryption_config
        self._encryption_info = encryption_info
        self._name = name
        self._reconciling = reconciling
        self._restore_info = restore_info
        self._state = state
        self._version_retention_period = version_retention_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Database':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Database of this Database.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Database.

        Output only. If exists, the time at which the database creation started.

        :return: The create_time of this Database.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Database.

        Output only. If exists, the time at which the database creation started.

        :param create_time: The create_time of this Database.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def database_dialect(self):
        """Gets the database_dialect of this Database.

        Output only. The dialect of the Cloud Spanner Database.

        :return: The database_dialect of this Database.
        :rtype: str
        """
        return self._database_dialect

    @database_dialect.setter
    def database_dialect(self, database_dialect):
        """Sets the database_dialect of this Database.

        Output only. The dialect of the Cloud Spanner Database.

        :param database_dialect: The database_dialect of this Database.
        :type database_dialect: str
        """
        allowed_values = ["DATABASE_DIALECT_UNSPECIFIED", "GOOGLE_STANDARD_SQL", "POSTGRESQL"]  # noqa: E501
        if database_dialect not in allowed_values:
            raise ValueError(
                "Invalid value for `database_dialect` ({0}), must be one of {1}"
                .format(database_dialect, allowed_values)
            )

        self._database_dialect = database_dialect

    @property
    def default_leader(self):
        """Gets the default_leader of this Database.

        Output only. The read-write region which contains the database's leader replicas. This is the same as the value of default_leader database option set using DatabaseAdmin.CreateDatabase or DatabaseAdmin.UpdateDatabaseDdl. If not explicitly set, this is empty.

        :return: The default_leader of this Database.
        :rtype: str
        """
        return self._default_leader

    @default_leader.setter
    def default_leader(self, default_leader):
        """Sets the default_leader of this Database.

        Output only. The read-write region which contains the database's leader replicas. This is the same as the value of default_leader database option set using DatabaseAdmin.CreateDatabase or DatabaseAdmin.UpdateDatabaseDdl. If not explicitly set, this is empty.

        :param default_leader: The default_leader of this Database.
        :type default_leader: str
        """

        self._default_leader = default_leader

    @property
    def earliest_version_time(self):
        """Gets the earliest_version_time of this Database.

        Output only. Earliest timestamp at which older versions of the data can be read. This value is continuously updated by Cloud Spanner and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.

        :return: The earliest_version_time of this Database.
        :rtype: str
        """
        return self._earliest_version_time

    @earliest_version_time.setter
    def earliest_version_time(self, earliest_version_time):
        """Sets the earliest_version_time of this Database.

        Output only. Earliest timestamp at which older versions of the data can be read. This value is continuously updated by Cloud Spanner and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.

        :param earliest_version_time: The earliest_version_time of this Database.
        :type earliest_version_time: str
        """

        self._earliest_version_time = earliest_version_time

    @property
    def enable_drop_protection(self):
        """Gets the enable_drop_protection of this Database.

        Whether drop protection is enabled for this database. Defaults to false, if not set. For more details, please see how to [prevent accidental database deletion](https://cloud.google.com/spanner/docs/prevent-database-deletion).

        :return: The enable_drop_protection of this Database.
        :rtype: bool
        """
        return self._enable_drop_protection

    @enable_drop_protection.setter
    def enable_drop_protection(self, enable_drop_protection):
        """Sets the enable_drop_protection of this Database.

        Whether drop protection is enabled for this database. Defaults to false, if not set. For more details, please see how to [prevent accidental database deletion](https://cloud.google.com/spanner/docs/prevent-database-deletion).

        :param enable_drop_protection: The enable_drop_protection of this Database.
        :type enable_drop_protection: bool
        """

        self._enable_drop_protection = enable_drop_protection

    @property
    def encryption_config(self):
        """Gets the encryption_config of this Database.


        :return: The encryption_config of this Database.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this Database.


        :param encryption_config: The encryption_config of this Database.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def encryption_info(self):
        """Gets the encryption_info of this Database.

        Output only. For databases that are using customer managed encryption, this field contains the encryption information for the database, such as all Cloud KMS key versions that are in use. The `encryption_status' field inside of each `EncryptionInfo` is not populated. For databases that are using Google default or other types of encryption, this field is empty. This field is propagated lazily from the backend. There might be a delay from when a key version is being used and when it appears in this field.

        :return: The encryption_info of this Database.
        :rtype: List[EncryptionInfo]
        """
        return self._encryption_info

    @encryption_info.setter
    def encryption_info(self, encryption_info):
        """Sets the encryption_info of this Database.

        Output only. For databases that are using customer managed encryption, this field contains the encryption information for the database, such as all Cloud KMS key versions that are in use. The `encryption_status' field inside of each `EncryptionInfo` is not populated. For databases that are using Google default or other types of encryption, this field is empty. This field is propagated lazily from the backend. There might be a delay from when a key version is being used and when it appears in this field.

        :param encryption_info: The encryption_info of this Database.
        :type encryption_info: List[EncryptionInfo]
        """

        self._encryption_info = encryption_info

    @property
    def name(self):
        """Gets the name of this Database.

        Required. The name of the database. Values are of the form `projects//instances//databases/`, where `` is as specified in the `CREATE DATABASE` statement. This name can be passed to other API methods to identify the database.

        :return: The name of this Database.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Database.

        Required. The name of the database. Values are of the form `projects//instances//databases/`, where `` is as specified in the `CREATE DATABASE` statement. This name can be passed to other API methods to identify the database.

        :param name: The name of this Database.
        :type name: str
        """

        self._name = name

    @property
    def reconciling(self):
        """Gets the reconciling of this Database.

        Output only. If true, the database is being updated. If false, there are no ongoing update operations for the database.

        :return: The reconciling of this Database.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this Database.

        Output only. If true, the database is being updated. If false, there are no ongoing update operations for the database.

        :param reconciling: The reconciling of this Database.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def restore_info(self):
        """Gets the restore_info of this Database.


        :return: The restore_info of this Database.
        :rtype: RestoreInfo
        """
        return self._restore_info

    @restore_info.setter
    def restore_info(self, restore_info):
        """Sets the restore_info of this Database.


        :param restore_info: The restore_info of this Database.
        :type restore_info: RestoreInfo
        """

        self._restore_info = restore_info

    @property
    def state(self):
        """Gets the state of this Database.

        Output only. The current database state.

        :return: The state of this Database.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Database.

        Output only. The current database state.

        :param state: The state of this Database.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY", "READY_OPTIMIZING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def version_retention_period(self):
        """Gets the version_retention_period of this Database.

        Output only. The period in which Cloud Spanner retains all versions of data for the database. This is the same as the value of version_retention_period database option set using UpdateDatabaseDdl. Defaults to 1 hour, if not set.

        :return: The version_retention_period of this Database.
        :rtype: str
        """
        return self._version_retention_period

    @version_retention_period.setter
    def version_retention_period(self, version_retention_period):
        """Sets the version_retention_period of this Database.

        Output only. The period in which Cloud Spanner retains all versions of data for the database. This is the same as the value of version_retention_period database option set using UpdateDatabaseDdl. Defaults to 1 hour, if not set.

        :param version_retention_period: The version_retention_period of this Database.
        :type version_retention_period: str
        """

        self._version_retention_period = version_retention_period
