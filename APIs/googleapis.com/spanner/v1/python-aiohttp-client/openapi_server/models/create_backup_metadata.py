# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_progress import OperationProgress
from openapi_server import util


class CreateBackupMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancel_time: str=None, database: str=None, name: str=None, progress: OperationProgress=None):
        """CreateBackupMetadata - a model defined in OpenAPI

        :param cancel_time: The cancel_time of this CreateBackupMetadata.
        :param database: The database of this CreateBackupMetadata.
        :param name: The name of this CreateBackupMetadata.
        :param progress: The progress of this CreateBackupMetadata.
        """
        self.openapi_types = {
            'cancel_time': str,
            'database': str,
            'name': str,
            'progress': OperationProgress
        }

        self.attribute_map = {
            'cancel_time': 'cancelTime',
            'database': 'database',
            'name': 'name',
            'progress': 'progress'
        }

        self._cancel_time = cancel_time
        self._database = database
        self._name = name
        self._progress = progress

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBackupMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBackupMetadata of this CreateBackupMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancel_time(self):
        """Gets the cancel_time of this CreateBackupMetadata.

        The time at which cancellation of this operation was received. Operations.CancelOperation starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.

        :return: The cancel_time of this CreateBackupMetadata.
        :rtype: str
        """
        return self._cancel_time

    @cancel_time.setter
    def cancel_time(self, cancel_time):
        """Sets the cancel_time of this CreateBackupMetadata.

        The time at which cancellation of this operation was received. Operations.CancelOperation starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.

        :param cancel_time: The cancel_time of this CreateBackupMetadata.
        :type cancel_time: str
        """

        self._cancel_time = cancel_time

    @property
    def database(self):
        """Gets the database of this CreateBackupMetadata.

        The name of the database the backup is created from.

        :return: The database of this CreateBackupMetadata.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this CreateBackupMetadata.

        The name of the database the backup is created from.

        :param database: The database of this CreateBackupMetadata.
        :type database: str
        """

        self._database = database

    @property
    def name(self):
        """Gets the name of this CreateBackupMetadata.

        The name of the backup being created.

        :return: The name of this CreateBackupMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateBackupMetadata.

        The name of the backup being created.

        :param name: The name of this CreateBackupMetadata.
        :type name: str
        """

        self._name = name

    @property
    def progress(self):
        """Gets the progress of this CreateBackupMetadata.


        :return: The progress of this CreateBackupMetadata.
        :rtype: OperationProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this CreateBackupMetadata.


        :param progress: The progress of this CreateBackupMetadata.
        :type progress: OperationProgress
        """

        self._progress = progress
