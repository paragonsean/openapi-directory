# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class BatchWriteResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit_timestamp: str=None, indexes: List[int]=None, status: Status=None):
        """BatchWriteResponse - a model defined in OpenAPI

        :param commit_timestamp: The commit_timestamp of this BatchWriteResponse.
        :param indexes: The indexes of this BatchWriteResponse.
        :param status: The status of this BatchWriteResponse.
        """
        self.openapi_types = {
            'commit_timestamp': str,
            'indexes': List[int],
            'status': Status
        }

        self.attribute_map = {
            'commit_timestamp': 'commitTimestamp',
            'indexes': 'indexes',
            'status': 'status'
        }

        self._commit_timestamp = commit_timestamp
        self._indexes = indexes
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchWriteResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchWriteResponse of this BatchWriteResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit_timestamp(self):
        """Gets the commit_timestamp of this BatchWriteResponse.

        The commit timestamp of the transaction that applied this batch. Present if `status` is `OK`, absent otherwise.

        :return: The commit_timestamp of this BatchWriteResponse.
        :rtype: str
        """
        return self._commit_timestamp

    @commit_timestamp.setter
    def commit_timestamp(self, commit_timestamp):
        """Sets the commit_timestamp of this BatchWriteResponse.

        The commit timestamp of the transaction that applied this batch. Present if `status` is `OK`, absent otherwise.

        :param commit_timestamp: The commit_timestamp of this BatchWriteResponse.
        :type commit_timestamp: str
        """

        self._commit_timestamp = commit_timestamp

    @property
    def indexes(self):
        """Gets the indexes of this BatchWriteResponse.

        The mutation groups applied in this batch. The values index into the `mutation_groups` field in the corresponding `BatchWriteRequest`.

        :return: The indexes of this BatchWriteResponse.
        :rtype: List[int]
        """
        return self._indexes

    @indexes.setter
    def indexes(self, indexes):
        """Sets the indexes of this BatchWriteResponse.

        The mutation groups applied in this batch. The values index into the `mutation_groups` field in the corresponding `BatchWriteRequest`.

        :param indexes: The indexes of this BatchWriteResponse.
        :type indexes: List[int]
        """

        self._indexes = indexes

    @property
    def status(self):
        """Gets the status of this BatchWriteResponse.


        :return: The status of this BatchWriteResponse.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BatchWriteResponse.


        :param status: The status of this BatchWriteResponse.
        :type status: Status
        """

        self._status = status
