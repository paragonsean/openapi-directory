# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShortRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, subqueries: Dict[str, int]=None):
        """ShortRepresentation - a model defined in OpenAPI

        :param description: The description of this ShortRepresentation.
        :param subqueries: The subqueries of this ShortRepresentation.
        """
        self.openapi_types = {
            'description': str,
            'subqueries': Dict[str, int]
        }

        self.attribute_map = {
            'description': 'description',
            'subqueries': 'subqueries'
        }

        self._description = description
        self._subqueries = subqueries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShortRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShortRepresentation of this ShortRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ShortRepresentation.

        A string representation of the expression subtree rooted at this node.

        :return: The description of this ShortRepresentation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ShortRepresentation.

        A string representation of the expression subtree rooted at this node.

        :param description: The description of this ShortRepresentation.
        :type description: str
        """

        self._description = description

    @property
    def subqueries(self):
        """Gets the subqueries of this ShortRepresentation.

        A mapping of (subquery variable name) -> (subquery node id) for cases where the `description` string of this node references a `SCALAR` subquery contained in the expression subtree rooted at this node. The referenced `SCALAR` subquery may not necessarily be a direct child of this node.

        :return: The subqueries of this ShortRepresentation.
        :rtype: Dict[str, int]
        """
        return self._subqueries

    @subqueries.setter
    def subqueries(self, subqueries):
        """Sets the subqueries of this ShortRepresentation.

        A mapping of (subquery variable name) -> (subquery node id) for cases where the `description` string of this node references a `SCALAR` subquery contained in the expression subtree rooted at this node. The referenced `SCALAR` subquery may not necessarily be a direct child of this node.

        :param subqueries: The subqueries of this ShortRepresentation.
        :type subqueries: Dict[str, int]
        """

        self._subqueries = subqueries
