# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_config import InstanceConfig
from openapi_server import util


class UpdateInstanceConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_config: InstanceConfig=None, update_mask: str=None, validate_only: bool=None):
        """UpdateInstanceConfigRequest - a model defined in OpenAPI

        :param instance_config: The instance_config of this UpdateInstanceConfigRequest.
        :param update_mask: The update_mask of this UpdateInstanceConfigRequest.
        :param validate_only: The validate_only of this UpdateInstanceConfigRequest.
        """
        self.openapi_types = {
            'instance_config': InstanceConfig,
            'update_mask': str,
            'validate_only': bool
        }

        self.attribute_map = {
            'instance_config': 'instanceConfig',
            'update_mask': 'updateMask',
            'validate_only': 'validateOnly'
        }

        self._instance_config = instance_config
        self._update_mask = update_mask
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateInstanceConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateInstanceConfigRequest of this UpdateInstanceConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_config(self):
        """Gets the instance_config of this UpdateInstanceConfigRequest.


        :return: The instance_config of this UpdateInstanceConfigRequest.
        :rtype: InstanceConfig
        """
        return self._instance_config

    @instance_config.setter
    def instance_config(self, instance_config):
        """Sets the instance_config of this UpdateInstanceConfigRequest.


        :param instance_config: The instance_config of this UpdateInstanceConfigRequest.
        :type instance_config: InstanceConfig
        """

        self._instance_config = instance_config

    @property
    def update_mask(self):
        """Gets the update_mask of this UpdateInstanceConfigRequest.

        Required. A mask specifying which fields in InstanceConfig should be updated. The field mask must always be specified; this prevents any future fields in InstanceConfig from being erased accidentally by clients that do not know about them. Only display_name and labels can be updated.

        :return: The update_mask of this UpdateInstanceConfigRequest.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this UpdateInstanceConfigRequest.

        Required. A mask specifying which fields in InstanceConfig should be updated. The field mask must always be specified; this prevents any future fields in InstanceConfig from being erased accidentally by clients that do not know about them. Only display_name and labels can be updated.

        :param update_mask: The update_mask of this UpdateInstanceConfigRequest.
        :type update_mask: str
        """

        self._update_mask = update_mask

    @property
    def validate_only(self):
        """Gets the validate_only of this UpdateInstanceConfigRequest.

        An option to validate, but not actually execute, a request, and provide the same response.

        :return: The validate_only of this UpdateInstanceConfigRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this UpdateInstanceConfigRequest.

        An option to validate, but not actually execute, a request, and provide the same response.

        :param validate_only: The validate_only of this UpdateInstanceConfigRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
