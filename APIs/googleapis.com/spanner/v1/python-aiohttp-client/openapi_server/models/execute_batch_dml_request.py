# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.request_options import RequestOptions
from openapi_server.models.statement import Statement
from openapi_server.models.transaction_selector import TransactionSelector
from openapi_server import util


class ExecuteBatchDmlRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_options: RequestOptions=None, seqno: str=None, statements: List[Statement]=None, transaction: TransactionSelector=None):
        """ExecuteBatchDmlRequest - a model defined in OpenAPI

        :param request_options: The request_options of this ExecuteBatchDmlRequest.
        :param seqno: The seqno of this ExecuteBatchDmlRequest.
        :param statements: The statements of this ExecuteBatchDmlRequest.
        :param transaction: The transaction of this ExecuteBatchDmlRequest.
        """
        self.openapi_types = {
            'request_options': RequestOptions,
            'seqno': str,
            'statements': List[Statement],
            'transaction': TransactionSelector
        }

        self.attribute_map = {
            'request_options': 'requestOptions',
            'seqno': 'seqno',
            'statements': 'statements',
            'transaction': 'transaction'
        }

        self._request_options = request_options
        self._seqno = seqno
        self._statements = statements
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecuteBatchDmlRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecuteBatchDmlRequest of this ExecuteBatchDmlRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_options(self):
        """Gets the request_options of this ExecuteBatchDmlRequest.


        :return: The request_options of this ExecuteBatchDmlRequest.
        :rtype: RequestOptions
        """
        return self._request_options

    @request_options.setter
    def request_options(self, request_options):
        """Sets the request_options of this ExecuteBatchDmlRequest.


        :param request_options: The request_options of this ExecuteBatchDmlRequest.
        :type request_options: RequestOptions
        """

        self._request_options = request_options

    @property
    def seqno(self):
        """Gets the seqno of this ExecuteBatchDmlRequest.

        Required. A per-transaction sequence number used to identify this request. This field makes each request idempotent such that if the request is received multiple times, at most one will succeed. The sequence number must be monotonically increasing within the transaction. If a request arrives for the first time with an out-of-order sequence number, the transaction may be aborted. Replays of previously handled requests will yield the same response as the first execution.

        :return: The seqno of this ExecuteBatchDmlRequest.
        :rtype: str
        """
        return self._seqno

    @seqno.setter
    def seqno(self, seqno):
        """Sets the seqno of this ExecuteBatchDmlRequest.

        Required. A per-transaction sequence number used to identify this request. This field makes each request idempotent such that if the request is received multiple times, at most one will succeed. The sequence number must be monotonically increasing within the transaction. If a request arrives for the first time with an out-of-order sequence number, the transaction may be aborted. Replays of previously handled requests will yield the same response as the first execution.

        :param seqno: The seqno of this ExecuteBatchDmlRequest.
        :type seqno: str
        """

        self._seqno = seqno

    @property
    def statements(self):
        """Gets the statements of this ExecuteBatchDmlRequest.

        Required. The list of statements to execute in this batch. Statements are executed serially, such that the effects of statement `i` are visible to statement `i+1`. Each statement must be a DML statement. Execution stops at the first failed statement; the remaining statements are not executed. Callers must provide at least one statement.

        :return: The statements of this ExecuteBatchDmlRequest.
        :rtype: List[Statement]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this ExecuteBatchDmlRequest.

        Required. The list of statements to execute in this batch. Statements are executed serially, such that the effects of statement `i` are visible to statement `i+1`. Each statement must be a DML statement. Execution stops at the first failed statement; the remaining statements are not executed. Callers must provide at least one statement.

        :param statements: The statements of this ExecuteBatchDmlRequest.
        :type statements: List[Statement]
        """

        self._statements = statements

    @property
    def transaction(self):
        """Gets the transaction of this ExecuteBatchDmlRequest.


        :return: The transaction of this ExecuteBatchDmlRequest.
        :rtype: TransactionSelector
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this ExecuteBatchDmlRequest.


        :param transaction: The transaction of this ExecuteBatchDmlRequest.
        :type transaction: TransactionSelector
        """

        self._transaction = transaction
