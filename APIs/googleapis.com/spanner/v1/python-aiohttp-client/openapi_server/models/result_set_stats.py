# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_plan import QueryPlan
from openapi_server import util


class ResultSetStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query_plan: QueryPlan=None, query_stats: Dict[str, object]=None, row_count_exact: str=None, row_count_lower_bound: str=None):
        """ResultSetStats - a model defined in OpenAPI

        :param query_plan: The query_plan of this ResultSetStats.
        :param query_stats: The query_stats of this ResultSetStats.
        :param row_count_exact: The row_count_exact of this ResultSetStats.
        :param row_count_lower_bound: The row_count_lower_bound of this ResultSetStats.
        """
        self.openapi_types = {
            'query_plan': QueryPlan,
            'query_stats': Dict[str, object],
            'row_count_exact': str,
            'row_count_lower_bound': str
        }

        self.attribute_map = {
            'query_plan': 'queryPlan',
            'query_stats': 'queryStats',
            'row_count_exact': 'rowCountExact',
            'row_count_lower_bound': 'rowCountLowerBound'
        }

        self._query_plan = query_plan
        self._query_stats = query_stats
        self._row_count_exact = row_count_exact
        self._row_count_lower_bound = row_count_lower_bound

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResultSetStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResultSetStats of this ResultSetStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query_plan(self):
        """Gets the query_plan of this ResultSetStats.


        :return: The query_plan of this ResultSetStats.
        :rtype: QueryPlan
        """
        return self._query_plan

    @query_plan.setter
    def query_plan(self, query_plan):
        """Sets the query_plan of this ResultSetStats.


        :param query_plan: The query_plan of this ResultSetStats.
        :type query_plan: QueryPlan
        """

        self._query_plan = query_plan

    @property
    def query_stats(self):
        """Gets the query_stats of this ResultSetStats.

        Aggregated statistics from the execution of the query. Only present when the query is profiled. For example, a query could return the statistics as follows: { \"rows_returned\": \"3\", \"elapsed_time\": \"1.22 secs\", \"cpu_time\": \"1.19 secs\" }

        :return: The query_stats of this ResultSetStats.
        :rtype: Dict[str, object]
        """
        return self._query_stats

    @query_stats.setter
    def query_stats(self, query_stats):
        """Sets the query_stats of this ResultSetStats.

        Aggregated statistics from the execution of the query. Only present when the query is profiled. For example, a query could return the statistics as follows: { \"rows_returned\": \"3\", \"elapsed_time\": \"1.22 secs\", \"cpu_time\": \"1.19 secs\" }

        :param query_stats: The query_stats of this ResultSetStats.
        :type query_stats: Dict[str, object]
        """

        self._query_stats = query_stats

    @property
    def row_count_exact(self):
        """Gets the row_count_exact of this ResultSetStats.

        Standard DML returns an exact count of rows that were modified.

        :return: The row_count_exact of this ResultSetStats.
        :rtype: str
        """
        return self._row_count_exact

    @row_count_exact.setter
    def row_count_exact(self, row_count_exact):
        """Sets the row_count_exact of this ResultSetStats.

        Standard DML returns an exact count of rows that were modified.

        :param row_count_exact: The row_count_exact of this ResultSetStats.
        :type row_count_exact: str
        """

        self._row_count_exact = row_count_exact

    @property
    def row_count_lower_bound(self):
        """Gets the row_count_lower_bound of this ResultSetStats.

        Partitioned DML does not offer exactly-once semantics, so it returns a lower bound of the rows modified.

        :return: The row_count_lower_bound of this ResultSetStats.
        :rtype: str
        """
        return self._row_count_lower_bound

    @row_count_lower_bound.setter
    def row_count_lower_bound(self, row_count_lower_bound):
        """Sets the row_count_lower_bound of this ResultSetStats.

        Partitioned DML does not offer exactly-once semantics, so it returns a lower bound of the rows modified.

        :param row_count_lower_bound: The row_count_lower_bound of this ResultSetStats.
        :type row_count_lower_bound: str
        """

        self._row_count_lower_bound = row_count_lower_bound
