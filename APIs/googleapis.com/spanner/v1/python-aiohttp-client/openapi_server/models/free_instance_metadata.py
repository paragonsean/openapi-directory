# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FreeInstanceMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expire_behavior: str=None, expire_time: str=None, upgrade_time: str=None):
        """FreeInstanceMetadata - a model defined in OpenAPI

        :param expire_behavior: The expire_behavior of this FreeInstanceMetadata.
        :param expire_time: The expire_time of this FreeInstanceMetadata.
        :param upgrade_time: The upgrade_time of this FreeInstanceMetadata.
        """
        self.openapi_types = {
            'expire_behavior': str,
            'expire_time': str,
            'upgrade_time': str
        }

        self.attribute_map = {
            'expire_behavior': 'expireBehavior',
            'expire_time': 'expireTime',
            'upgrade_time': 'upgradeTime'
        }

        self._expire_behavior = expire_behavior
        self._expire_time = expire_time
        self._upgrade_time = upgrade_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FreeInstanceMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FreeInstanceMetadata of this FreeInstanceMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expire_behavior(self):
        """Gets the expire_behavior of this FreeInstanceMetadata.

        Specifies the expiration behavior of a free instance. The default of ExpireBehavior is `REMOVE_AFTER_GRACE_PERIOD`. This can be modified during or after creation, and before expiration.

        :return: The expire_behavior of this FreeInstanceMetadata.
        :rtype: str
        """
        return self._expire_behavior

    @expire_behavior.setter
    def expire_behavior(self, expire_behavior):
        """Sets the expire_behavior of this FreeInstanceMetadata.

        Specifies the expiration behavior of a free instance. The default of ExpireBehavior is `REMOVE_AFTER_GRACE_PERIOD`. This can be modified during or after creation, and before expiration.

        :param expire_behavior: The expire_behavior of this FreeInstanceMetadata.
        :type expire_behavior: str
        """
        allowed_values = ["EXPIRE_BEHAVIOR_UNSPECIFIED", "FREE_TO_PROVISIONED", "REMOVE_AFTER_GRACE_PERIOD"]  # noqa: E501
        if expire_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `expire_behavior` ({0}), must be one of {1}"
                .format(expire_behavior, allowed_values)
            )

        self._expire_behavior = expire_behavior

    @property
    def expire_time(self):
        """Gets the expire_time of this FreeInstanceMetadata.

        Output only. Timestamp after which the instance will either be upgraded or scheduled for deletion after a grace period. ExpireBehavior is used to choose between upgrading or scheduling the free instance for deletion. This timestamp is set during the creation of a free instance.

        :return: The expire_time of this FreeInstanceMetadata.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this FreeInstanceMetadata.

        Output only. Timestamp after which the instance will either be upgraded or scheduled for deletion after a grace period. ExpireBehavior is used to choose between upgrading or scheduling the free instance for deletion. This timestamp is set during the creation of a free instance.

        :param expire_time: The expire_time of this FreeInstanceMetadata.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def upgrade_time(self):
        """Gets the upgrade_time of this FreeInstanceMetadata.

        Output only. If present, the timestamp at which the free instance was upgraded to a provisioned instance.

        :return: The upgrade_time of this FreeInstanceMetadata.
        :rtype: str
        """
        return self._upgrade_time

    @upgrade_time.setter
    def upgrade_time(self, upgrade_time):
        """Sets the upgrade_time of this FreeInstanceMetadata.

        Output only. If present, the timestamp at which the free instance was upgraded to a provisioned instance.

        :param upgrade_time: The upgrade_time of this FreeInstanceMetadata.
        :type upgrade_time: str
        """

        self._upgrade_time = upgrade_time
