# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.localized_string import LocalizedString
from openapi_server import util


class DiagnosticMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, info: LocalizedString=None, metric: LocalizedString=None, metric_specific: bool=None, severity: str=None, short_message: LocalizedString=None):
        """DiagnosticMessage - a model defined in OpenAPI

        :param info: The info of this DiagnosticMessage.
        :param metric: The metric of this DiagnosticMessage.
        :param metric_specific: The metric_specific of this DiagnosticMessage.
        :param severity: The severity of this DiagnosticMessage.
        :param short_message: The short_message of this DiagnosticMessage.
        """
        self.openapi_types = {
            'info': LocalizedString,
            'metric': LocalizedString,
            'metric_specific': bool,
            'severity': str,
            'short_message': LocalizedString
        }

        self.attribute_map = {
            'info': 'info',
            'metric': 'metric',
            'metric_specific': 'metricSpecific',
            'severity': 'severity',
            'short_message': 'shortMessage'
        }

        self._info = info
        self._metric = metric
        self._metric_specific = metric_specific
        self._severity = severity
        self._short_message = short_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosticMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosticMessage of this DiagnosticMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def info(self):
        """Gets the info of this DiagnosticMessage.


        :return: The info of this DiagnosticMessage.
        :rtype: LocalizedString
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this DiagnosticMessage.


        :param info: The info of this DiagnosticMessage.
        :type info: LocalizedString
        """

        self._info = info

    @property
    def metric(self):
        """Gets the metric of this DiagnosticMessage.


        :return: The metric of this DiagnosticMessage.
        :rtype: LocalizedString
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this DiagnosticMessage.


        :param metric: The metric of this DiagnosticMessage.
        :type metric: LocalizedString
        """

        self._metric = metric

    @property
    def metric_specific(self):
        """Gets the metric_specific of this DiagnosticMessage.

        Whether this message is specific only for the current metric. By default Diagnostics are shown for all metrics, regardless which metric is the currently selected metric in the UI. However occasionally a metric will generate so many messages that the resulting visual clutter becomes overwhelming. In this case setting this to true, will show the diagnostic messages for that metric only if it is the currently selected metric.

        :return: The metric_specific of this DiagnosticMessage.
        :rtype: bool
        """
        return self._metric_specific

    @metric_specific.setter
    def metric_specific(self, metric_specific):
        """Sets the metric_specific of this DiagnosticMessage.

        Whether this message is specific only for the current metric. By default Diagnostics are shown for all metrics, regardless which metric is the currently selected metric in the UI. However occasionally a metric will generate so many messages that the resulting visual clutter becomes overwhelming. In this case setting this to true, will show the diagnostic messages for that metric only if it is the currently selected metric.

        :param metric_specific: The metric_specific of this DiagnosticMessage.
        :type metric_specific: bool
        """

        self._metric_specific = metric_specific

    @property
    def severity(self):
        """Gets the severity of this DiagnosticMessage.

        The severity of the diagnostic message.

        :return: The severity of this DiagnosticMessage.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DiagnosticMessage.

        The severity of the diagnostic message.

        :param severity: The severity of this DiagnosticMessage.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "INFO", "WARNING", "ERROR", "FATAL"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def short_message(self):
        """Gets the short_message of this DiagnosticMessage.


        :return: The short_message of this DiagnosticMessage.
        :rtype: LocalizedString
        """
        return self._short_message

    @short_message.setter
    def short_message(self, short_message):
        """Sets the short_message of this DiagnosticMessage.


        :param short_message: The short_message of this DiagnosticMessage.
        :type short_message: LocalizedString
        """

        self._short_message = short_message
