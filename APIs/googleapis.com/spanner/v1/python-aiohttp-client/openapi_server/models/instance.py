# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.autoscaling_config import AutoscalingConfig
from openapi_server.models.free_instance_metadata import FreeInstanceMetadata
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autoscaling_config: AutoscalingConfig=None, config: str=None, create_time: str=None, display_name: str=None, endpoint_uris: List[str]=None, free_instance_metadata: FreeInstanceMetadata=None, instance_type: str=None, labels: Dict[str, str]=None, name: str=None, node_count: int=None, processing_units: int=None, state: str=None, update_time: str=None):
        """Instance - a model defined in OpenAPI

        :param autoscaling_config: The autoscaling_config of this Instance.
        :param config: The config of this Instance.
        :param create_time: The create_time of this Instance.
        :param display_name: The display_name of this Instance.
        :param endpoint_uris: The endpoint_uris of this Instance.
        :param free_instance_metadata: The free_instance_metadata of this Instance.
        :param instance_type: The instance_type of this Instance.
        :param labels: The labels of this Instance.
        :param name: The name of this Instance.
        :param node_count: The node_count of this Instance.
        :param processing_units: The processing_units of this Instance.
        :param state: The state of this Instance.
        :param update_time: The update_time of this Instance.
        """
        self.openapi_types = {
            'autoscaling_config': AutoscalingConfig,
            'config': str,
            'create_time': str,
            'display_name': str,
            'endpoint_uris': List[str],
            'free_instance_metadata': FreeInstanceMetadata,
            'instance_type': str,
            'labels': Dict[str, str],
            'name': str,
            'node_count': int,
            'processing_units': int,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'autoscaling_config': 'autoscalingConfig',
            'config': 'config',
            'create_time': 'createTime',
            'display_name': 'displayName',
            'endpoint_uris': 'endpointUris',
            'free_instance_metadata': 'freeInstanceMetadata',
            'instance_type': 'instanceType',
            'labels': 'labels',
            'name': 'name',
            'node_count': 'nodeCount',
            'processing_units': 'processingUnits',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._autoscaling_config = autoscaling_config
        self._config = config
        self._create_time = create_time
        self._display_name = display_name
        self._endpoint_uris = endpoint_uris
        self._free_instance_metadata = free_instance_metadata
        self._instance_type = instance_type
        self._labels = labels
        self._name = name
        self._node_count = node_count
        self._processing_units = processing_units
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autoscaling_config(self):
        """Gets the autoscaling_config of this Instance.


        :return: The autoscaling_config of this Instance.
        :rtype: AutoscalingConfig
        """
        return self._autoscaling_config

    @autoscaling_config.setter
    def autoscaling_config(self, autoscaling_config):
        """Sets the autoscaling_config of this Instance.


        :param autoscaling_config: The autoscaling_config of this Instance.
        :type autoscaling_config: AutoscalingConfig
        """

        self._autoscaling_config = autoscaling_config

    @property
    def config(self):
        """Gets the config of this Instance.

        Required. The name of the instance's configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.

        :return: The config of this Instance.
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Instance.

        Required. The name of the instance's configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.

        :param config: The config of this Instance.
        :type config: str
        """

        self._config = config

    @property
    def create_time(self):
        """Gets the create_time of this Instance.

        Output only. The time at which the instance was created.

        :return: The create_time of this Instance.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Instance.

        Output only. The time at which the instance was created.

        :param create_time: The create_time of this Instance.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this Instance.

        Required. The descriptive name for this instance as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.

        :return: The display_name of this Instance.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Instance.

        Required. The descriptive name for this instance as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.

        :param display_name: The display_name of this Instance.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def endpoint_uris(self):
        """Gets the endpoint_uris of this Instance.

        Deprecated. This field is not populated.

        :return: The endpoint_uris of this Instance.
        :rtype: List[str]
        """
        return self._endpoint_uris

    @endpoint_uris.setter
    def endpoint_uris(self, endpoint_uris):
        """Sets the endpoint_uris of this Instance.

        Deprecated. This field is not populated.

        :param endpoint_uris: The endpoint_uris of this Instance.
        :type endpoint_uris: List[str]
        """

        self._endpoint_uris = endpoint_uris

    @property
    def free_instance_metadata(self):
        """Gets the free_instance_metadata of this Instance.


        :return: The free_instance_metadata of this Instance.
        :rtype: FreeInstanceMetadata
        """
        return self._free_instance_metadata

    @free_instance_metadata.setter
    def free_instance_metadata(self, free_instance_metadata):
        """Sets the free_instance_metadata of this Instance.


        :param free_instance_metadata: The free_instance_metadata of this Instance.
        :type free_instance_metadata: FreeInstanceMetadata
        """

        self._free_instance_metadata = free_instance_metadata

    @property
    def instance_type(self):
        """Gets the instance_type of this Instance.

        The `InstanceType` of the current instance.

        :return: The instance_type of this Instance.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this Instance.

        The `InstanceType` of the current instance.

        :param instance_type: The instance_type of this Instance.
        :type instance_type: str
        """
        allowed_values = ["INSTANCE_TYPE_UNSPECIFIED", "PROVISIONED", "FREE_INSTANCE"]  # noqa: E501
        if instance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_type` ({0}), must be one of {1}"
                .format(instance_type, allowed_values)
            )

        self._instance_type = instance_type

    @property
    def labels(self):
        """Gets the labels of this Instance.

        Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. And so you are advised to use an internal label representation, such as JSON, which doesn't rely upon specific characters being disallowed. For example, representing labels as the string: name + \"_\" + value would prove problematic if we were to allow \"_\" in a future release.

        :return: The labels of this Instance.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Instance.

        Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. And so you are advised to use an internal label representation, such as JSON, which doesn't rely upon specific characters being disallowed. For example, representing labels as the string: name + \"_\" + value would prove problematic if we were to allow \"_\" in a future release.

        :param labels: The labels of this Instance.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Instance.

        Required. A unique identifier for the instance, which cannot be changed after the instance is created. Values are of the form `projects//instances/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length.

        :return: The name of this Instance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.

        Required. A unique identifier for the instance, which cannot be changed after the instance is created. Values are of the form `projects//instances/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length.

        :param name: The name of this Instance.
        :type name: str
        """

        self._name = name

    @property
    def node_count(self):
        """Gets the node_count of this Instance.

        The number of nodes allocated to this instance. At most one of either node_count or processing_units should be present in the message. Users can set the node_count field to specify the target number of nodes allocated to the instance. This may be zero in API responses for instances that are not yet in state `READY`. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.

        :return: The node_count of this Instance.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this Instance.

        The number of nodes allocated to this instance. At most one of either node_count or processing_units should be present in the message. Users can set the node_count field to specify the target number of nodes allocated to the instance. This may be zero in API responses for instances that are not yet in state `READY`. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.

        :param node_count: The node_count of this Instance.
        :type node_count: int
        """

        self._node_count = node_count

    @property
    def processing_units(self):
        """Gets the processing_units of this Instance.

        The number of processing units allocated to this instance. At most one of processing_units or node_count should be present in the message. Users can set the processing_units field to specify the target number of processing units allocated to the instance. This may be zero in API responses for instances that are not yet in state `READY`. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.

        :return: The processing_units of this Instance.
        :rtype: int
        """
        return self._processing_units

    @processing_units.setter
    def processing_units(self, processing_units):
        """Sets the processing_units of this Instance.

        The number of processing units allocated to this instance. At most one of processing_units or node_count should be present in the message. Users can set the processing_units field to specify the target number of processing units allocated to the instance. This may be zero in API responses for instances that are not yet in state `READY`. See [the documentation](https://cloud.google.com/spanner/docs/compute-capacity) for more information about nodes and processing units.

        :param processing_units: The processing_units of this Instance.
        :type processing_units: int
        """

        self._processing_units = processing_units

    @property
    def state(self):
        """Gets the state of this Instance.

        Output only. The current instance state. For CreateInstance, the state must be either omitted or set to `CREATING`. For UpdateInstance, the state must be either omitted or set to `READY`.

        :return: The state of this Instance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Instance.

        Output only. The current instance state. For CreateInstance, the state must be either omitted or set to `CREATING`. For UpdateInstance, the state must be either omitted or set to `READY`.

        :param state: The state of this Instance.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "READY"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this Instance.

        Output only. The time at which the instance was most recently updated.

        :return: The update_time of this Instance.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Instance.

        Output only. The time at which the instance was most recently updated.

        :param update_time: The update_time of this Instance.
        :type update_time: str
        """

        self._update_time = update_time
