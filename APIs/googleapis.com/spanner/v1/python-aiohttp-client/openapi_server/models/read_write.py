# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReadWrite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, read_lock_mode: str=None):
        """ReadWrite - a model defined in OpenAPI

        :param read_lock_mode: The read_lock_mode of this ReadWrite.
        """
        self.openapi_types = {
            'read_lock_mode': str
        }

        self.attribute_map = {
            'read_lock_mode': 'readLockMode'
        }

        self._read_lock_mode = read_lock_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadWrite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReadWrite of this ReadWrite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def read_lock_mode(self):
        """Gets the read_lock_mode of this ReadWrite.

        Read lock mode for the transaction.

        :return: The read_lock_mode of this ReadWrite.
        :rtype: str
        """
        return self._read_lock_mode

    @read_lock_mode.setter
    def read_lock_mode(self, read_lock_mode):
        """Sets the read_lock_mode of this ReadWrite.

        Read lock mode for the transaction.

        :param read_lock_mode: The read_lock_mode of this ReadWrite.
        :type read_lock_mode: str
        """
        allowed_values = ["READ_LOCK_MODE_UNSPECIFIED", "PESSIMISTIC", "OPTIMISTIC"]  # noqa: E501
        if read_lock_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `read_lock_mode` ({0}), must be one of {1}"
                .format(read_lock_mode, allowed_values)
            )

        self._read_lock_mode = read_lock_mode
