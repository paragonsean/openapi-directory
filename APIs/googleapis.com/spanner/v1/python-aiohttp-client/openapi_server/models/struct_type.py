# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_field import ModelField
from openapi_server import util


class StructType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[ModelField]=None):
        """StructType - a model defined in OpenAPI

        :param fields: The fields of this StructType.
        """
        self.openapi_types = {
            'fields': List[ModelField]
        }

        self.attribute_map = {
            'fields': 'fields'
        }

        self._fields = fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StructType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StructType of this StructType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this StructType.

        The list of fields that make up this struct. Order is significant, because values of this struct type are represented as lists, where the order of field values matches the order of fields in the StructType. In turn, the order of fields matches the order of columns in a read request, or the order of fields in the `SELECT` clause of a query.

        :return: The fields of this StructType.
        :rtype: List[ModelField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this StructType.

        The list of fields that make up this struct. Order is significant, because values of this struct type are represented as lists, where the order of field values matches the order of fields in the StructType. In turn, the order of fields matches the order of columns in a read request, or the order of fields in the `SELECT` clause of a query.

        :param fields: The fields of this StructType.
        :type fields: List[ModelField]
        """

        self._fields = fields
