# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directed_read_options import DirectedReadOptions
from openapi_server.models.key_set import KeySet
from openapi_server.models.request_options import RequestOptions
from openapi_server.models.transaction_selector import TransactionSelector
from openapi_server import util


class ReadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[str]=None, data_boost_enabled: bool=None, directed_read_options: DirectedReadOptions=None, index: str=None, key_set: KeySet=None, limit: str=None, partition_token: str=None, request_options: RequestOptions=None, resume_token: str=None, table: str=None, transaction: TransactionSelector=None):
        """ReadRequest - a model defined in OpenAPI

        :param columns: The columns of this ReadRequest.
        :param data_boost_enabled: The data_boost_enabled of this ReadRequest.
        :param directed_read_options: The directed_read_options of this ReadRequest.
        :param index: The index of this ReadRequest.
        :param key_set: The key_set of this ReadRequest.
        :param limit: The limit of this ReadRequest.
        :param partition_token: The partition_token of this ReadRequest.
        :param request_options: The request_options of this ReadRequest.
        :param resume_token: The resume_token of this ReadRequest.
        :param table: The table of this ReadRequest.
        :param transaction: The transaction of this ReadRequest.
        """
        self.openapi_types = {
            'columns': List[str],
            'data_boost_enabled': bool,
            'directed_read_options': DirectedReadOptions,
            'index': str,
            'key_set': KeySet,
            'limit': str,
            'partition_token': str,
            'request_options': RequestOptions,
            'resume_token': str,
            'table': str,
            'transaction': TransactionSelector
        }

        self.attribute_map = {
            'columns': 'columns',
            'data_boost_enabled': 'dataBoostEnabled',
            'directed_read_options': 'directedReadOptions',
            'index': 'index',
            'key_set': 'keySet',
            'limit': 'limit',
            'partition_token': 'partitionToken',
            'request_options': 'requestOptions',
            'resume_token': 'resumeToken',
            'table': 'table',
            'transaction': 'transaction'
        }

        self._columns = columns
        self._data_boost_enabled = data_boost_enabled
        self._directed_read_options = directed_read_options
        self._index = index
        self._key_set = key_set
        self._limit = limit
        self._partition_token = partition_token
        self._request_options = request_options
        self._resume_token = resume_token
        self._table = table
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReadRequest of this ReadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this ReadRequest.

        Required. The columns of table to be returned for each row matching this request.

        :return: The columns of this ReadRequest.
        :rtype: List[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ReadRequest.

        Required. The columns of table to be returned for each row matching this request.

        :param columns: The columns of this ReadRequest.
        :type columns: List[str]
        """

        self._columns = columns

    @property
    def data_boost_enabled(self):
        """Gets the data_boost_enabled of this ReadRequest.

        If this is for a partitioned read and this field is set to `true`, the request is executed with Spanner Data Boost independent compute resources. If the field is set to `true` but the request does not set `partition_token`, the API returns an `INVALID_ARGUMENT` error.

        :return: The data_boost_enabled of this ReadRequest.
        :rtype: bool
        """
        return self._data_boost_enabled

    @data_boost_enabled.setter
    def data_boost_enabled(self, data_boost_enabled):
        """Sets the data_boost_enabled of this ReadRequest.

        If this is for a partitioned read and this field is set to `true`, the request is executed with Spanner Data Boost independent compute resources. If the field is set to `true` but the request does not set `partition_token`, the API returns an `INVALID_ARGUMENT` error.

        :param data_boost_enabled: The data_boost_enabled of this ReadRequest.
        :type data_boost_enabled: bool
        """

        self._data_boost_enabled = data_boost_enabled

    @property
    def directed_read_options(self):
        """Gets the directed_read_options of this ReadRequest.


        :return: The directed_read_options of this ReadRequest.
        :rtype: DirectedReadOptions
        """
        return self._directed_read_options

    @directed_read_options.setter
    def directed_read_options(self, directed_read_options):
        """Sets the directed_read_options of this ReadRequest.


        :param directed_read_options: The directed_read_options of this ReadRequest.
        :type directed_read_options: DirectedReadOptions
        """

        self._directed_read_options = directed_read_options

    @property
    def index(self):
        """Gets the index of this ReadRequest.

        If non-empty, the name of an index on table. This index is used instead of the table primary key when interpreting key_set and sorting result rows. See key_set for further information.

        :return: The index of this ReadRequest.
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this ReadRequest.

        If non-empty, the name of an index on table. This index is used instead of the table primary key when interpreting key_set and sorting result rows. See key_set for further information.

        :param index: The index of this ReadRequest.
        :type index: str
        """

        self._index = index

    @property
    def key_set(self):
        """Gets the key_set of this ReadRequest.


        :return: The key_set of this ReadRequest.
        :rtype: KeySet
        """
        return self._key_set

    @key_set.setter
    def key_set(self, key_set):
        """Sets the key_set of this ReadRequest.


        :param key_set: The key_set of this ReadRequest.
        :type key_set: KeySet
        """

        self._key_set = key_set

    @property
    def limit(self):
        """Gets the limit of this ReadRequest.

        If greater than zero, only the first `limit` rows are yielded. If `limit` is zero, the default is no limit. A limit cannot be specified if `partition_token` is set.

        :return: The limit of this ReadRequest.
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ReadRequest.

        If greater than zero, only the first `limit` rows are yielded. If `limit` is zero, the default is no limit. A limit cannot be specified if `partition_token` is set.

        :param limit: The limit of this ReadRequest.
        :type limit: str
        """

        self._limit = limit

    @property
    def partition_token(self):
        """Gets the partition_token of this ReadRequest.

        If present, results will be restricted to the specified partition previously created using PartitionRead(). There must be an exact match for the values of fields common to this message and the PartitionReadRequest message used to create this partition_token.

        :return: The partition_token of this ReadRequest.
        :rtype: str
        """
        return self._partition_token

    @partition_token.setter
    def partition_token(self, partition_token):
        """Sets the partition_token of this ReadRequest.

        If present, results will be restricted to the specified partition previously created using PartitionRead(). There must be an exact match for the values of fields common to this message and the PartitionReadRequest message used to create this partition_token.

        :param partition_token: The partition_token of this ReadRequest.
        :type partition_token: str
        """

        self._partition_token = partition_token

    @property
    def request_options(self):
        """Gets the request_options of this ReadRequest.


        :return: The request_options of this ReadRequest.
        :rtype: RequestOptions
        """
        return self._request_options

    @request_options.setter
    def request_options(self, request_options):
        """Sets the request_options of this ReadRequest.


        :param request_options: The request_options of this ReadRequest.
        :type request_options: RequestOptions
        """

        self._request_options = request_options

    @property
    def resume_token(self):
        """Gets the resume_token of this ReadRequest.

        If this request is resuming a previously interrupted read, `resume_token` should be copied from the last PartialResultSet yielded before the interruption. Doing this enables the new read to resume where the last read left off. The rest of the request parameters must exactly match the request that yielded this token.

        :return: The resume_token of this ReadRequest.
        :rtype: str
        """
        return self._resume_token

    @resume_token.setter
    def resume_token(self, resume_token):
        """Sets the resume_token of this ReadRequest.

        If this request is resuming a previously interrupted read, `resume_token` should be copied from the last PartialResultSet yielded before the interruption. Doing this enables the new read to resume where the last read left off. The rest of the request parameters must exactly match the request that yielded this token.

        :param resume_token: The resume_token of this ReadRequest.
        :type resume_token: str
        """

        self._resume_token = resume_token

    @property
    def table(self):
        """Gets the table of this ReadRequest.

        Required. The name of the table in the database to be read.

        :return: The table of this ReadRequest.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this ReadRequest.

        Required. The name of the table in the database to be read.

        :param table: The table of this ReadRequest.
        :type table: str
        """

        self._table = table

    @property
    def transaction(self):
        """Gets the transaction of this ReadRequest.


        :return: The transaction of this ReadRequest.
        :rtype: TransactionSelector
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this ReadRequest.


        :param transaction: The transaction of this ReadRequest.
        :type transaction: TransactionSelector
        """

        self._transaction = transaction
