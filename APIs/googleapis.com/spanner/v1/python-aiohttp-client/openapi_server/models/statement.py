# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.type import Type
from openapi_server import util


class Statement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, param_types: Dict[str, Type]=None, params: Dict[str, object]=None, sql: str=None):
        """Statement - a model defined in OpenAPI

        :param param_types: The param_types of this Statement.
        :param params: The params of this Statement.
        :param sql: The sql of this Statement.
        """
        self.openapi_types = {
            'param_types': Dict[str, Type],
            'params': Dict[str, object],
            'sql': str
        }

        self.attribute_map = {
            'param_types': 'paramTypes',
            'params': 'params',
            'sql': 'sql'
        }

        self._param_types = param_types
        self._params = params
        self._sql = sql

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Statement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Statement of this Statement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def param_types(self):
        """Gets the param_types of this Statement.

        It is not always possible for Cloud Spanner to infer the right SQL type from a JSON value. For example, values of type `BYTES` and values of type `STRING` both appear in params as JSON strings. In these cases, `param_types` can be used to specify the exact SQL type for some or all of the SQL statement parameters. See the definition of Type for more information about SQL types.

        :return: The param_types of this Statement.
        :rtype: Dict[str, Type]
        """
        return self._param_types

    @param_types.setter
    def param_types(self, param_types):
        """Sets the param_types of this Statement.

        It is not always possible for Cloud Spanner to infer the right SQL type from a JSON value. For example, values of type `BYTES` and values of type `STRING` both appear in params as JSON strings. In these cases, `param_types` can be used to specify the exact SQL type for some or all of the SQL statement parameters. See the definition of Type for more information about SQL types.

        :param param_types: The param_types of this Statement.
        :type param_types: Dict[str, Type]
        """

        self._param_types = param_types

    @property
    def params(self):
        """Gets the params of this Statement.

        Parameter names and values that bind to placeholders in the DML string. A parameter placeholder consists of the `@` character followed by the parameter name (for example, `@firstName`). Parameter names can contain letters, numbers, and underscores. Parameters can appear anywhere that a literal value is expected. The same parameter name can be used more than once, for example: `\"WHERE id > @msg_id AND id < @msg_id + 100\"` It is an error to execute a SQL statement with unbound parameters.

        :return: The params of this Statement.
        :rtype: Dict[str, object]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Statement.

        Parameter names and values that bind to placeholders in the DML string. A parameter placeholder consists of the `@` character followed by the parameter name (for example, `@firstName`). Parameter names can contain letters, numbers, and underscores. Parameters can appear anywhere that a literal value is expected. The same parameter name can be used more than once, for example: `\"WHERE id > @msg_id AND id < @msg_id + 100\"` It is an error to execute a SQL statement with unbound parameters.

        :param params: The params of this Statement.
        :type params: Dict[str, object]
        """

        self._params = params

    @property
    def sql(self):
        """Gets the sql of this Statement.

        Required. The DML string.

        :return: The sql of this Statement.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this Statement.

        Required. The DML string.

        :param sql: The sql of this Statement.
        :type sql: str
        """

        self._sql = sql
