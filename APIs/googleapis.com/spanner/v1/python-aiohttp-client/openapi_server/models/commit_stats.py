# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CommitStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mutation_count: str=None):
        """CommitStats - a model defined in OpenAPI

        :param mutation_count: The mutation_count of this CommitStats.
        """
        self.openapi_types = {
            'mutation_count': str
        }

        self.attribute_map = {
            'mutation_count': 'mutationCount'
        }

        self._mutation_count = mutation_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitStats of this CommitStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mutation_count(self):
        """Gets the mutation_count of this CommitStats.

        The total number of mutations for the transaction. Knowing the `mutation_count` value can help you maximize the number of mutations in a transaction and minimize the number of API round trips. You can also monitor this value to prevent transactions from exceeding the system [limit](https://cloud.google.com/spanner/quotas#limits_for_creating_reading_updating_and_deleting_data). If the number of mutations exceeds the limit, the server returns [INVALID_ARGUMENT](https://cloud.google.com/spanner/docs/reference/rest/v1/Code#ENUM_VALUES.INVALID_ARGUMENT).

        :return: The mutation_count of this CommitStats.
        :rtype: str
        """
        return self._mutation_count

    @mutation_count.setter
    def mutation_count(self, mutation_count):
        """Sets the mutation_count of this CommitStats.

        The total number of mutations for the transaction. Knowing the `mutation_count` value can help you maximize the number of mutations in a transaction and minimize the number of API round trips. You can also monitor this value to prevent transactions from exceeding the system [limit](https://cloud.google.com/spanner/quotas#limits_for_creating_reading_updating_and_deleting_data). If the number of mutations exceeds the limit, the server returns [INVALID_ARGUMENT](https://cloud.google.com/spanner/docs/reference/rest/v1/Code#ENUM_VALUES.INVALID_ARGUMENT).

        :param mutation_count: The mutation_count of this CommitStats.
        :type mutation_count: str
        """

        self._mutation_count = mutation_count
