# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_options import TransactionOptions
from openapi_server import util


class TransactionSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin: TransactionOptions=None, id: str=None, single_use: TransactionOptions=None):
        """TransactionSelector - a model defined in OpenAPI

        :param begin: The begin of this TransactionSelector.
        :param id: The id of this TransactionSelector.
        :param single_use: The single_use of this TransactionSelector.
        """
        self.openapi_types = {
            'begin': TransactionOptions,
            'id': str,
            'single_use': TransactionOptions
        }

        self.attribute_map = {
            'begin': 'begin',
            'id': 'id',
            'single_use': 'singleUse'
        }

        self._begin = begin
        self._id = id
        self._single_use = single_use

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionSelector of this TransactionSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin(self):
        """Gets the begin of this TransactionSelector.


        :return: The begin of this TransactionSelector.
        :rtype: TransactionOptions
        """
        return self._begin

    @begin.setter
    def begin(self, begin):
        """Sets the begin of this TransactionSelector.


        :param begin: The begin of this TransactionSelector.
        :type begin: TransactionOptions
        """

        self._begin = begin

    @property
    def id(self):
        """Gets the id of this TransactionSelector.

        Execute the read or SQL query in a previously-started transaction.

        :return: The id of this TransactionSelector.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionSelector.

        Execute the read or SQL query in a previously-started transaction.

        :param id: The id of this TransactionSelector.
        :type id: str
        """

        self._id = id

    @property
    def single_use(self):
        """Gets the single_use of this TransactionSelector.


        :return: The single_use of this TransactionSelector.
        :rtype: TransactionOptions
        """
        return self._single_use

    @single_use.setter
    def single_use(self, single_use):
        """Sets the single_use of this TransactionSelector.


        :param single_use: The single_use of this TransactionSelector.
        :type single_use: TransactionOptions
        """

        self._single_use = single_use
