# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directed_read_options import DirectedReadOptions
from openapi_server.models.query_options import QueryOptions
from openapi_server.models.request_options import RequestOptions
from openapi_server.models.transaction_selector import TransactionSelector
from openapi_server.models.type import Type
from openapi_server import util


class ExecuteSqlRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_boost_enabled: bool=None, directed_read_options: DirectedReadOptions=None, param_types: Dict[str, Type]=None, params: Dict[str, object]=None, partition_token: str=None, query_mode: str=None, query_options: QueryOptions=None, request_options: RequestOptions=None, resume_token: str=None, seqno: str=None, sql: str=None, transaction: TransactionSelector=None):
        """ExecuteSqlRequest - a model defined in OpenAPI

        :param data_boost_enabled: The data_boost_enabled of this ExecuteSqlRequest.
        :param directed_read_options: The directed_read_options of this ExecuteSqlRequest.
        :param param_types: The param_types of this ExecuteSqlRequest.
        :param params: The params of this ExecuteSqlRequest.
        :param partition_token: The partition_token of this ExecuteSqlRequest.
        :param query_mode: The query_mode of this ExecuteSqlRequest.
        :param query_options: The query_options of this ExecuteSqlRequest.
        :param request_options: The request_options of this ExecuteSqlRequest.
        :param resume_token: The resume_token of this ExecuteSqlRequest.
        :param seqno: The seqno of this ExecuteSqlRequest.
        :param sql: The sql of this ExecuteSqlRequest.
        :param transaction: The transaction of this ExecuteSqlRequest.
        """
        self.openapi_types = {
            'data_boost_enabled': bool,
            'directed_read_options': DirectedReadOptions,
            'param_types': Dict[str, Type],
            'params': Dict[str, object],
            'partition_token': str,
            'query_mode': str,
            'query_options': QueryOptions,
            'request_options': RequestOptions,
            'resume_token': str,
            'seqno': str,
            'sql': str,
            'transaction': TransactionSelector
        }

        self.attribute_map = {
            'data_boost_enabled': 'dataBoostEnabled',
            'directed_read_options': 'directedReadOptions',
            'param_types': 'paramTypes',
            'params': 'params',
            'partition_token': 'partitionToken',
            'query_mode': 'queryMode',
            'query_options': 'queryOptions',
            'request_options': 'requestOptions',
            'resume_token': 'resumeToken',
            'seqno': 'seqno',
            'sql': 'sql',
            'transaction': 'transaction'
        }

        self._data_boost_enabled = data_boost_enabled
        self._directed_read_options = directed_read_options
        self._param_types = param_types
        self._params = params
        self._partition_token = partition_token
        self._query_mode = query_mode
        self._query_options = query_options
        self._request_options = request_options
        self._resume_token = resume_token
        self._seqno = seqno
        self._sql = sql
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecuteSqlRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecuteSqlRequest of this ExecuteSqlRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_boost_enabled(self):
        """Gets the data_boost_enabled of this ExecuteSqlRequest.

        If this is for a partitioned query and this field is set to `true`, the request is executed with Spanner Data Boost independent compute resources. If the field is set to `true` but the request does not set `partition_token`, the API returns an `INVALID_ARGUMENT` error.

        :return: The data_boost_enabled of this ExecuteSqlRequest.
        :rtype: bool
        """
        return self._data_boost_enabled

    @data_boost_enabled.setter
    def data_boost_enabled(self, data_boost_enabled):
        """Sets the data_boost_enabled of this ExecuteSqlRequest.

        If this is for a partitioned query and this field is set to `true`, the request is executed with Spanner Data Boost independent compute resources. If the field is set to `true` but the request does not set `partition_token`, the API returns an `INVALID_ARGUMENT` error.

        :param data_boost_enabled: The data_boost_enabled of this ExecuteSqlRequest.
        :type data_boost_enabled: bool
        """

        self._data_boost_enabled = data_boost_enabled

    @property
    def directed_read_options(self):
        """Gets the directed_read_options of this ExecuteSqlRequest.


        :return: The directed_read_options of this ExecuteSqlRequest.
        :rtype: DirectedReadOptions
        """
        return self._directed_read_options

    @directed_read_options.setter
    def directed_read_options(self, directed_read_options):
        """Sets the directed_read_options of this ExecuteSqlRequest.


        :param directed_read_options: The directed_read_options of this ExecuteSqlRequest.
        :type directed_read_options: DirectedReadOptions
        """

        self._directed_read_options = directed_read_options

    @property
    def param_types(self):
        """Gets the param_types of this ExecuteSqlRequest.

        It is not always possible for Cloud Spanner to infer the right SQL type from a JSON value. For example, values of type `BYTES` and values of type `STRING` both appear in params as JSON strings. In these cases, `param_types` can be used to specify the exact SQL type for some or all of the SQL statement parameters. See the definition of Type for more information about SQL types.

        :return: The param_types of this ExecuteSqlRequest.
        :rtype: Dict[str, Type]
        """
        return self._param_types

    @param_types.setter
    def param_types(self, param_types):
        """Sets the param_types of this ExecuteSqlRequest.

        It is not always possible for Cloud Spanner to infer the right SQL type from a JSON value. For example, values of type `BYTES` and values of type `STRING` both appear in params as JSON strings. In these cases, `param_types` can be used to specify the exact SQL type for some or all of the SQL statement parameters. See the definition of Type for more information about SQL types.

        :param param_types: The param_types of this ExecuteSqlRequest.
        :type param_types: Dict[str, Type]
        """

        self._param_types = param_types

    @property
    def params(self):
        """Gets the params of this ExecuteSqlRequest.

        Parameter names and values that bind to placeholders in the SQL string. A parameter placeholder consists of the `@` character followed by the parameter name (for example, `@firstName`). Parameter names must conform to the naming requirements of identifiers as specified at https://cloud.google.com/spanner/docs/lexical#identifiers. Parameters can appear anywhere that a literal value is expected. The same parameter name can be used more than once, for example: `\"WHERE id > @msg_id AND id < @msg_id + 100\"` It is an error to execute a SQL statement with unbound parameters.

        :return: The params of this ExecuteSqlRequest.
        :rtype: Dict[str, object]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ExecuteSqlRequest.

        Parameter names and values that bind to placeholders in the SQL string. A parameter placeholder consists of the `@` character followed by the parameter name (for example, `@firstName`). Parameter names must conform to the naming requirements of identifiers as specified at https://cloud.google.com/spanner/docs/lexical#identifiers. Parameters can appear anywhere that a literal value is expected. The same parameter name can be used more than once, for example: `\"WHERE id > @msg_id AND id < @msg_id + 100\"` It is an error to execute a SQL statement with unbound parameters.

        :param params: The params of this ExecuteSqlRequest.
        :type params: Dict[str, object]
        """

        self._params = params

    @property
    def partition_token(self):
        """Gets the partition_token of this ExecuteSqlRequest.

        If present, results will be restricted to the specified partition previously created using PartitionQuery(). There must be an exact match for the values of fields common to this message and the PartitionQueryRequest message used to create this partition_token.

        :return: The partition_token of this ExecuteSqlRequest.
        :rtype: str
        """
        return self._partition_token

    @partition_token.setter
    def partition_token(self, partition_token):
        """Sets the partition_token of this ExecuteSqlRequest.

        If present, results will be restricted to the specified partition previously created using PartitionQuery(). There must be an exact match for the values of fields common to this message and the PartitionQueryRequest message used to create this partition_token.

        :param partition_token: The partition_token of this ExecuteSqlRequest.
        :type partition_token: str
        """

        self._partition_token = partition_token

    @property
    def query_mode(self):
        """Gets the query_mode of this ExecuteSqlRequest.

        Used to control the amount of debugging information returned in ResultSetStats. If partition_token is set, query_mode can only be set to QueryMode.NORMAL.

        :return: The query_mode of this ExecuteSqlRequest.
        :rtype: str
        """
        return self._query_mode

    @query_mode.setter
    def query_mode(self, query_mode):
        """Sets the query_mode of this ExecuteSqlRequest.

        Used to control the amount of debugging information returned in ResultSetStats. If partition_token is set, query_mode can only be set to QueryMode.NORMAL.

        :param query_mode: The query_mode of this ExecuteSqlRequest.
        :type query_mode: str
        """
        allowed_values = ["NORMAL", "PLAN", "PROFILE"]  # noqa: E501
        if query_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `query_mode` ({0}), must be one of {1}"
                .format(query_mode, allowed_values)
            )

        self._query_mode = query_mode

    @property
    def query_options(self):
        """Gets the query_options of this ExecuteSqlRequest.


        :return: The query_options of this ExecuteSqlRequest.
        :rtype: QueryOptions
        """
        return self._query_options

    @query_options.setter
    def query_options(self, query_options):
        """Sets the query_options of this ExecuteSqlRequest.


        :param query_options: The query_options of this ExecuteSqlRequest.
        :type query_options: QueryOptions
        """

        self._query_options = query_options

    @property
    def request_options(self):
        """Gets the request_options of this ExecuteSqlRequest.


        :return: The request_options of this ExecuteSqlRequest.
        :rtype: RequestOptions
        """
        return self._request_options

    @request_options.setter
    def request_options(self, request_options):
        """Sets the request_options of this ExecuteSqlRequest.


        :param request_options: The request_options of this ExecuteSqlRequest.
        :type request_options: RequestOptions
        """

        self._request_options = request_options

    @property
    def resume_token(self):
        """Gets the resume_token of this ExecuteSqlRequest.

        If this request is resuming a previously interrupted SQL statement execution, `resume_token` should be copied from the last PartialResultSet yielded before the interruption. Doing this enables the new SQL statement execution to resume where the last one left off. The rest of the request parameters must exactly match the request that yielded this token.

        :return: The resume_token of this ExecuteSqlRequest.
        :rtype: str
        """
        return self._resume_token

    @resume_token.setter
    def resume_token(self, resume_token):
        """Sets the resume_token of this ExecuteSqlRequest.

        If this request is resuming a previously interrupted SQL statement execution, `resume_token` should be copied from the last PartialResultSet yielded before the interruption. Doing this enables the new SQL statement execution to resume where the last one left off. The rest of the request parameters must exactly match the request that yielded this token.

        :param resume_token: The resume_token of this ExecuteSqlRequest.
        :type resume_token: str
        """

        self._resume_token = resume_token

    @property
    def seqno(self):
        """Gets the seqno of this ExecuteSqlRequest.

        A per-transaction sequence number used to identify this request. This field makes each request idempotent such that if the request is received multiple times, at most one will succeed. The sequence number must be monotonically increasing within the transaction. If a request arrives for the first time with an out-of-order sequence number, the transaction may be aborted. Replays of previously handled requests will yield the same response as the first execution. Required for DML statements. Ignored for queries.

        :return: The seqno of this ExecuteSqlRequest.
        :rtype: str
        """
        return self._seqno

    @seqno.setter
    def seqno(self, seqno):
        """Sets the seqno of this ExecuteSqlRequest.

        A per-transaction sequence number used to identify this request. This field makes each request idempotent such that if the request is received multiple times, at most one will succeed. The sequence number must be monotonically increasing within the transaction. If a request arrives for the first time with an out-of-order sequence number, the transaction may be aborted. Replays of previously handled requests will yield the same response as the first execution. Required for DML statements. Ignored for queries.

        :param seqno: The seqno of this ExecuteSqlRequest.
        :type seqno: str
        """

        self._seqno = seqno

    @property
    def sql(self):
        """Gets the sql of this ExecuteSqlRequest.

        Required. The SQL string.

        :return: The sql of this ExecuteSqlRequest.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this ExecuteSqlRequest.

        Required. The SQL string.

        :param sql: The sql of this ExecuteSqlRequest.
        :type sql: str
        """

        self._sql = sql

    @property
    def transaction(self):
        """Gets the transaction of this ExecuteSqlRequest.


        :return: The transaction of this ExecuteSqlRequest.
        :rtype: TransactionSelector
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this ExecuteSqlRequest.


        :param transaction: The transaction of this ExecuteSqlRequest.
        :type transaction: TransactionSelector
        """

        self._transaction = transaction
