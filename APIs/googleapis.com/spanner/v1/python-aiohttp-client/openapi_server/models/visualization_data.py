# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.diagnostic_message import DiagnosticMessage
from openapi_server.models.metric import Metric
from openapi_server.models.prefix_node import PrefixNode
from openapi_server import util


class VisualizationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_end_token: str=None, data_source_separator_token: str=None, diagnostic_messages: List[DiagnosticMessage]=None, end_key_strings: List[str]=None, has_pii: bool=None, indexed_keys: List[str]=None, key_separator: str=None, key_unit: str=None, metrics: List[Metric]=None, prefix_nodes: List[PrefixNode]=None):
        """VisualizationData - a model defined in OpenAPI

        :param data_source_end_token: The data_source_end_token of this VisualizationData.
        :param data_source_separator_token: The data_source_separator_token of this VisualizationData.
        :param diagnostic_messages: The diagnostic_messages of this VisualizationData.
        :param end_key_strings: The end_key_strings of this VisualizationData.
        :param has_pii: The has_pii of this VisualizationData.
        :param indexed_keys: The indexed_keys of this VisualizationData.
        :param key_separator: The key_separator of this VisualizationData.
        :param key_unit: The key_unit of this VisualizationData.
        :param metrics: The metrics of this VisualizationData.
        :param prefix_nodes: The prefix_nodes of this VisualizationData.
        """
        self.openapi_types = {
            'data_source_end_token': str,
            'data_source_separator_token': str,
            'diagnostic_messages': List[DiagnosticMessage],
            'end_key_strings': List[str],
            'has_pii': bool,
            'indexed_keys': List[str],
            'key_separator': str,
            'key_unit': str,
            'metrics': List[Metric],
            'prefix_nodes': List[PrefixNode]
        }

        self.attribute_map = {
            'data_source_end_token': 'dataSourceEndToken',
            'data_source_separator_token': 'dataSourceSeparatorToken',
            'diagnostic_messages': 'diagnosticMessages',
            'end_key_strings': 'endKeyStrings',
            'has_pii': 'hasPii',
            'indexed_keys': 'indexedKeys',
            'key_separator': 'keySeparator',
            'key_unit': 'keyUnit',
            'metrics': 'metrics',
            'prefix_nodes': 'prefixNodes'
        }

        self._data_source_end_token = data_source_end_token
        self._data_source_separator_token = data_source_separator_token
        self._diagnostic_messages = diagnostic_messages
        self._end_key_strings = end_key_strings
        self._has_pii = has_pii
        self._indexed_keys = indexed_keys
        self._key_separator = key_separator
        self._key_unit = key_unit
        self._metrics = metrics
        self._prefix_nodes = prefix_nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VisualizationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VisualizationData of this VisualizationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_end_token(self):
        """Gets the data_source_end_token of this VisualizationData.

        The token signifying the end of a data_source.

        :return: The data_source_end_token of this VisualizationData.
        :rtype: str
        """
        return self._data_source_end_token

    @data_source_end_token.setter
    def data_source_end_token(self, data_source_end_token):
        """Sets the data_source_end_token of this VisualizationData.

        The token signifying the end of a data_source.

        :param data_source_end_token: The data_source_end_token of this VisualizationData.
        :type data_source_end_token: str
        """

        self._data_source_end_token = data_source_end_token

    @property
    def data_source_separator_token(self):
        """Gets the data_source_separator_token of this VisualizationData.

        The token delimiting a datasource name from the rest of a key in a data_source.

        :return: The data_source_separator_token of this VisualizationData.
        :rtype: str
        """
        return self._data_source_separator_token

    @data_source_separator_token.setter
    def data_source_separator_token(self, data_source_separator_token):
        """Sets the data_source_separator_token of this VisualizationData.

        The token delimiting a datasource name from the rest of a key in a data_source.

        :param data_source_separator_token: The data_source_separator_token of this VisualizationData.
        :type data_source_separator_token: str
        """

        self._data_source_separator_token = data_source_separator_token

    @property
    def diagnostic_messages(self):
        """Gets the diagnostic_messages of this VisualizationData.

        The list of messages (info, alerts, ...)

        :return: The diagnostic_messages of this VisualizationData.
        :rtype: List[DiagnosticMessage]
        """
        return self._diagnostic_messages

    @diagnostic_messages.setter
    def diagnostic_messages(self, diagnostic_messages):
        """Sets the diagnostic_messages of this VisualizationData.

        The list of messages (info, alerts, ...)

        :param diagnostic_messages: The diagnostic_messages of this VisualizationData.
        :type diagnostic_messages: List[DiagnosticMessage]
        """

        self._diagnostic_messages = diagnostic_messages

    @property
    def end_key_strings(self):
        """Gets the end_key_strings of this VisualizationData.

        We discretize the entire keyspace into buckets. Assuming each bucket has an inclusive keyrange and covers keys from k(i) ... k(n). In this case k(n) would be an end key for a given range. end_key_string is the collection of all such end keys

        :return: The end_key_strings of this VisualizationData.
        :rtype: List[str]
        """
        return self._end_key_strings

    @end_key_strings.setter
    def end_key_strings(self, end_key_strings):
        """Sets the end_key_strings of this VisualizationData.

        We discretize the entire keyspace into buckets. Assuming each bucket has an inclusive keyrange and covers keys from k(i) ... k(n). In this case k(n) would be an end key for a given range. end_key_string is the collection of all such end keys

        :param end_key_strings: The end_key_strings of this VisualizationData.
        :type end_key_strings: List[str]
        """

        self._end_key_strings = end_key_strings

    @property
    def has_pii(self):
        """Gets the has_pii of this VisualizationData.

        Whether this scan contains PII.

        :return: The has_pii of this VisualizationData.
        :rtype: bool
        """
        return self._has_pii

    @has_pii.setter
    def has_pii(self, has_pii):
        """Sets the has_pii of this VisualizationData.

        Whether this scan contains PII.

        :param has_pii: The has_pii of this VisualizationData.
        :type has_pii: bool
        """

        self._has_pii = has_pii

    @property
    def indexed_keys(self):
        """Gets the indexed_keys of this VisualizationData.

        Keys of key ranges that contribute significantly to a given metric Can be thought of as heavy hitters.

        :return: The indexed_keys of this VisualizationData.
        :rtype: List[str]
        """
        return self._indexed_keys

    @indexed_keys.setter
    def indexed_keys(self, indexed_keys):
        """Sets the indexed_keys of this VisualizationData.

        Keys of key ranges that contribute significantly to a given metric Can be thought of as heavy hitters.

        :param indexed_keys: The indexed_keys of this VisualizationData.
        :type indexed_keys: List[str]
        """

        self._indexed_keys = indexed_keys

    @property
    def key_separator(self):
        """Gets the key_separator of this VisualizationData.

        The token delimiting the key prefixes.

        :return: The key_separator of this VisualizationData.
        :rtype: str
        """
        return self._key_separator

    @key_separator.setter
    def key_separator(self, key_separator):
        """Sets the key_separator of this VisualizationData.

        The token delimiting the key prefixes.

        :param key_separator: The key_separator of this VisualizationData.
        :type key_separator: str
        """

        self._key_separator = key_separator

    @property
    def key_unit(self):
        """Gets the key_unit of this VisualizationData.

        The unit for the key: e.g. 'key' or 'chunk'.

        :return: The key_unit of this VisualizationData.
        :rtype: str
        """
        return self._key_unit

    @key_unit.setter
    def key_unit(self, key_unit):
        """Sets the key_unit of this VisualizationData.

        The unit for the key: e.g. 'key' or 'chunk'.

        :param key_unit: The key_unit of this VisualizationData.
        :type key_unit: str
        """
        allowed_values = ["KEY_UNIT_UNSPECIFIED", "KEY", "CHUNK"]  # noqa: E501
        if key_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `key_unit` ({0}), must be one of {1}"
                .format(key_unit, allowed_values)
            )

        self._key_unit = key_unit

    @property
    def metrics(self):
        """Gets the metrics of this VisualizationData.

        The list of data objects for each metric.

        :return: The metrics of this VisualizationData.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this VisualizationData.

        The list of data objects for each metric.

        :param metrics: The metrics of this VisualizationData.
        :type metrics: List[Metric]
        """

        self._metrics = metrics

    @property
    def prefix_nodes(self):
        """Gets the prefix_nodes of this VisualizationData.

        The list of extracted key prefix nodes used in the key prefix hierarchy.

        :return: The prefix_nodes of this VisualizationData.
        :rtype: List[PrefixNode]
        """
        return self._prefix_nodes

    @prefix_nodes.setter
    def prefix_nodes(self, prefix_nodes):
        """Sets the prefix_nodes of this VisualizationData.

        The list of extracted key prefix nodes used in the key prefix hierarchy.

        :param prefix_nodes: The prefix_nodes of this VisualizationData.
        :type prefix_nodes: List[PrefixNode]
        """

        self._prefix_nodes = prefix_nodes
