# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoscalingLimits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_nodes: int=None, max_processing_units: int=None, min_nodes: int=None, min_processing_units: int=None):
        """AutoscalingLimits - a model defined in OpenAPI

        :param max_nodes: The max_nodes of this AutoscalingLimits.
        :param max_processing_units: The max_processing_units of this AutoscalingLimits.
        :param min_nodes: The min_nodes of this AutoscalingLimits.
        :param min_processing_units: The min_processing_units of this AutoscalingLimits.
        """
        self.openapi_types = {
            'max_nodes': int,
            'max_processing_units': int,
            'min_nodes': int,
            'min_processing_units': int
        }

        self.attribute_map = {
            'max_nodes': 'maxNodes',
            'max_processing_units': 'maxProcessingUnits',
            'min_nodes': 'minNodes',
            'min_processing_units': 'minProcessingUnits'
        }

        self._max_nodes = max_nodes
        self._max_processing_units = max_processing_units
        self._min_nodes = min_nodes
        self._min_processing_units = min_processing_units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoscalingLimits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoscalingLimits of this AutoscalingLimits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_nodes(self):
        """Gets the max_nodes of this AutoscalingLimits.

        Maximum number of nodes allocated to the instance. If set, this number should be greater than or equal to min_nodes.

        :return: The max_nodes of this AutoscalingLimits.
        :rtype: int
        """
        return self._max_nodes

    @max_nodes.setter
    def max_nodes(self, max_nodes):
        """Sets the max_nodes of this AutoscalingLimits.

        Maximum number of nodes allocated to the instance. If set, this number should be greater than or equal to min_nodes.

        :param max_nodes: The max_nodes of this AutoscalingLimits.
        :type max_nodes: int
        """

        self._max_nodes = max_nodes

    @property
    def max_processing_units(self):
        """Gets the max_processing_units of this AutoscalingLimits.

        Maximum number of processing units allocated to the instance. If set, this number should be multiples of 1000 and be greater than or equal to min_processing_units.

        :return: The max_processing_units of this AutoscalingLimits.
        :rtype: int
        """
        return self._max_processing_units

    @max_processing_units.setter
    def max_processing_units(self, max_processing_units):
        """Sets the max_processing_units of this AutoscalingLimits.

        Maximum number of processing units allocated to the instance. If set, this number should be multiples of 1000 and be greater than or equal to min_processing_units.

        :param max_processing_units: The max_processing_units of this AutoscalingLimits.
        :type max_processing_units: int
        """

        self._max_processing_units = max_processing_units

    @property
    def min_nodes(self):
        """Gets the min_nodes of this AutoscalingLimits.

        Minimum number of nodes allocated to the instance. If set, this number should be greater than or equal to 1.

        :return: The min_nodes of this AutoscalingLimits.
        :rtype: int
        """
        return self._min_nodes

    @min_nodes.setter
    def min_nodes(self, min_nodes):
        """Sets the min_nodes of this AutoscalingLimits.

        Minimum number of nodes allocated to the instance. If set, this number should be greater than or equal to 1.

        :param min_nodes: The min_nodes of this AutoscalingLimits.
        :type min_nodes: int
        """

        self._min_nodes = min_nodes

    @property
    def min_processing_units(self):
        """Gets the min_processing_units of this AutoscalingLimits.

        Minimum number of processing units allocated to the instance. If set, this number should be multiples of 1000.

        :return: The min_processing_units of this AutoscalingLimits.
        :rtype: int
        """
        return self._min_processing_units

    @min_processing_units.setter
    def min_processing_units(self, min_processing_units):
        """Sets the min_processing_units of this AutoscalingLimits.

        Minimum number of processing units allocated to the instance. If set, this number should be multiples of 1000.

        :param min_processing_units: The min_processing_units of this AutoscalingLimits.
        :type min_processing_units: int
        """

        self._min_processing_units = min_processing_units
