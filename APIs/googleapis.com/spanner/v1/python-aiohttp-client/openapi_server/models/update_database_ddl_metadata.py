# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ddl_statement_action_info import DdlStatementActionInfo
from openapi_server.models.operation_progress import OperationProgress
from openapi_server import util


class UpdateDatabaseDdlMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[DdlStatementActionInfo]=None, commit_timestamps: List[str]=None, database: str=None, progress: List[OperationProgress]=None, statements: List[str]=None, throttled: bool=None):
        """UpdateDatabaseDdlMetadata - a model defined in OpenAPI

        :param actions: The actions of this UpdateDatabaseDdlMetadata.
        :param commit_timestamps: The commit_timestamps of this UpdateDatabaseDdlMetadata.
        :param database: The database of this UpdateDatabaseDdlMetadata.
        :param progress: The progress of this UpdateDatabaseDdlMetadata.
        :param statements: The statements of this UpdateDatabaseDdlMetadata.
        :param throttled: The throttled of this UpdateDatabaseDdlMetadata.
        """
        self.openapi_types = {
            'actions': List[DdlStatementActionInfo],
            'commit_timestamps': List[str],
            'database': str,
            'progress': List[OperationProgress],
            'statements': List[str],
            'throttled': bool
        }

        self.attribute_map = {
            'actions': 'actions',
            'commit_timestamps': 'commitTimestamps',
            'database': 'database',
            'progress': 'progress',
            'statements': 'statements',
            'throttled': 'throttled'
        }

        self._actions = actions
        self._commit_timestamps = commit_timestamps
        self._database = database
        self._progress = progress
        self._statements = statements
        self._throttled = throttled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDatabaseDdlMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDatabaseDdlMetadata of this UpdateDatabaseDdlMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this UpdateDatabaseDdlMetadata.

        The brief action info for the DDL statements. `actions[i]` is the brief info for `statements[i]`.

        :return: The actions of this UpdateDatabaseDdlMetadata.
        :rtype: List[DdlStatementActionInfo]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this UpdateDatabaseDdlMetadata.

        The brief action info for the DDL statements. `actions[i]` is the brief info for `statements[i]`.

        :param actions: The actions of this UpdateDatabaseDdlMetadata.
        :type actions: List[DdlStatementActionInfo]
        """

        self._actions = actions

    @property
    def commit_timestamps(self):
        """Gets the commit_timestamps of this UpdateDatabaseDdlMetadata.

        Reports the commit timestamps of all statements that have succeeded so far, where `commit_timestamps[i]` is the commit timestamp for the statement `statements[i]`.

        :return: The commit_timestamps of this UpdateDatabaseDdlMetadata.
        :rtype: List[str]
        """
        return self._commit_timestamps

    @commit_timestamps.setter
    def commit_timestamps(self, commit_timestamps):
        """Sets the commit_timestamps of this UpdateDatabaseDdlMetadata.

        Reports the commit timestamps of all statements that have succeeded so far, where `commit_timestamps[i]` is the commit timestamp for the statement `statements[i]`.

        :param commit_timestamps: The commit_timestamps of this UpdateDatabaseDdlMetadata.
        :type commit_timestamps: List[str]
        """

        self._commit_timestamps = commit_timestamps

    @property
    def database(self):
        """Gets the database of this UpdateDatabaseDdlMetadata.

        The database being modified.

        :return: The database of this UpdateDatabaseDdlMetadata.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this UpdateDatabaseDdlMetadata.

        The database being modified.

        :param database: The database of this UpdateDatabaseDdlMetadata.
        :type database: str
        """

        self._database = database

    @property
    def progress(self):
        """Gets the progress of this UpdateDatabaseDdlMetadata.

        The progress of the UpdateDatabaseDdl operations. All DDL statements will have continuously updating progress, and `progress[i]` is the operation progress for `statements[i]`. Also, `progress[i]` will have start time and end time populated with commit timestamp of operation, as well as a progress of 100% once the operation has completed.

        :return: The progress of this UpdateDatabaseDdlMetadata.
        :rtype: List[OperationProgress]
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this UpdateDatabaseDdlMetadata.

        The progress of the UpdateDatabaseDdl operations. All DDL statements will have continuously updating progress, and `progress[i]` is the operation progress for `statements[i]`. Also, `progress[i]` will have start time and end time populated with commit timestamp of operation, as well as a progress of 100% once the operation has completed.

        :param progress: The progress of this UpdateDatabaseDdlMetadata.
        :type progress: List[OperationProgress]
        """

        self._progress = progress

    @property
    def statements(self):
        """Gets the statements of this UpdateDatabaseDdlMetadata.

        For an update this list contains all the statements. For an individual statement, this list contains only that statement.

        :return: The statements of this UpdateDatabaseDdlMetadata.
        :rtype: List[str]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this UpdateDatabaseDdlMetadata.

        For an update this list contains all the statements. For an individual statement, this list contains only that statement.

        :param statements: The statements of this UpdateDatabaseDdlMetadata.
        :type statements: List[str]
        """

        self._statements = statements

    @property
    def throttled(self):
        """Gets the throttled of this UpdateDatabaseDdlMetadata.

        Output only. When true, indicates that the operation is throttled e.g. due to resource constraints. When resources become available the operation will resume and this field will be false again.

        :return: The throttled of this UpdateDatabaseDdlMetadata.
        :rtype: bool
        """
        return self._throttled

    @throttled.setter
    def throttled(self, throttled):
        """Sets the throttled of this UpdateDatabaseDdlMetadata.

        Output only. When true, indicates that the operation is throttled e.g. due to resource constraints. When resources become available the operation will resume and this field will be false again.

        :param throttled: The throttled of this UpdateDatabaseDdlMetadata.
        :type throttled: bool
        """

        self._throttled = throttled
