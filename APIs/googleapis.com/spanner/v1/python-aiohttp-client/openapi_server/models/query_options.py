# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, optimizer_statistics_package: str=None, optimizer_version: str=None):
        """QueryOptions - a model defined in OpenAPI

        :param optimizer_statistics_package: The optimizer_statistics_package of this QueryOptions.
        :param optimizer_version: The optimizer_version of this QueryOptions.
        """
        self.openapi_types = {
            'optimizer_statistics_package': str,
            'optimizer_version': str
        }

        self.attribute_map = {
            'optimizer_statistics_package': 'optimizerStatisticsPackage',
            'optimizer_version': 'optimizerVersion'
        }

        self._optimizer_statistics_package = optimizer_statistics_package
        self._optimizer_version = optimizer_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryOptions of this QueryOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def optimizer_statistics_package(self):
        """Gets the optimizer_statistics_package of this QueryOptions.

        An option to control the selection of optimizer statistics package. This parameter allows individual queries to use a different query optimizer statistics package. Specifying `latest` as a value instructs Cloud Spanner to use the latest generated statistics package. If not specified, Cloud Spanner uses the statistics package set at the database level options, or the latest package if the database option is not set. The statistics package requested by the query has to be exempt from garbage collection. This can be achieved with the following DDL statement: ``` ALTER STATISTICS SET OPTIONS (allow_gc=false) ``` The list of available statistics packages can be queried from `INFORMATION_SCHEMA.SPANNER_STATISTICS`. Executing a SQL statement with an invalid optimizer statistics package or with a statistics package that allows garbage collection fails with an `INVALID_ARGUMENT` error.

        :return: The optimizer_statistics_package of this QueryOptions.
        :rtype: str
        """
        return self._optimizer_statistics_package

    @optimizer_statistics_package.setter
    def optimizer_statistics_package(self, optimizer_statistics_package):
        """Sets the optimizer_statistics_package of this QueryOptions.

        An option to control the selection of optimizer statistics package. This parameter allows individual queries to use a different query optimizer statistics package. Specifying `latest` as a value instructs Cloud Spanner to use the latest generated statistics package. If not specified, Cloud Spanner uses the statistics package set at the database level options, or the latest package if the database option is not set. The statistics package requested by the query has to be exempt from garbage collection. This can be achieved with the following DDL statement: ``` ALTER STATISTICS SET OPTIONS (allow_gc=false) ``` The list of available statistics packages can be queried from `INFORMATION_SCHEMA.SPANNER_STATISTICS`. Executing a SQL statement with an invalid optimizer statistics package or with a statistics package that allows garbage collection fails with an `INVALID_ARGUMENT` error.

        :param optimizer_statistics_package: The optimizer_statistics_package of this QueryOptions.
        :type optimizer_statistics_package: str
        """

        self._optimizer_statistics_package = optimizer_statistics_package

    @property
    def optimizer_version(self):
        """Gets the optimizer_version of this QueryOptions.

        An option to control the selection of optimizer version. This parameter allows individual queries to pick different query optimizer versions. Specifying `latest` as a value instructs Cloud Spanner to use the latest supported query optimizer version. If not specified, Cloud Spanner uses the optimizer version set at the database level options. Any other positive integer (from the list of supported optimizer versions) overrides the default optimizer version for query execution. The list of supported optimizer versions can be queried from SPANNER_SYS.SUPPORTED_OPTIMIZER_VERSIONS. Executing a SQL statement with an invalid optimizer version fails with an `INVALID_ARGUMENT` error. See https://cloud.google.com/spanner/docs/query-optimizer/manage-query-optimizer for more information on managing the query optimizer. The `optimizer_version` statement hint has precedence over this setting.

        :return: The optimizer_version of this QueryOptions.
        :rtype: str
        """
        return self._optimizer_version

    @optimizer_version.setter
    def optimizer_version(self, optimizer_version):
        """Sets the optimizer_version of this QueryOptions.

        An option to control the selection of optimizer version. This parameter allows individual queries to pick different query optimizer versions. Specifying `latest` as a value instructs Cloud Spanner to use the latest supported query optimizer version. If not specified, Cloud Spanner uses the optimizer version set at the database level options. Any other positive integer (from the list of supported optimizer versions) overrides the default optimizer version for query execution. The list of supported optimizer versions can be queried from SPANNER_SYS.SUPPORTED_OPTIMIZER_VERSIONS. Executing a SQL statement with an invalid optimizer version fails with an `INVALID_ARGUMENT` error. See https://cloud.google.com/spanner/docs/query-optimizer/manage-query-optimizer for more information on managing the query optimizer. The `optimizer_version` statement hint has precedence over this setting.

        :param optimizer_version: The optimizer_version of this QueryOptions.
        :type optimizer_version: str
        """

        self._optimizer_version = optimizer_version
