# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.result_set_metadata import ResultSetMetadata
from openapi_server.models.result_set_stats import ResultSetStats
from openapi_server import util


class PartialResultSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chunked_value: bool=None, metadata: ResultSetMetadata=None, resume_token: str=None, stats: ResultSetStats=None, values: List[object]=None):
        """PartialResultSet - a model defined in OpenAPI

        :param chunked_value: The chunked_value of this PartialResultSet.
        :param metadata: The metadata of this PartialResultSet.
        :param resume_token: The resume_token of this PartialResultSet.
        :param stats: The stats of this PartialResultSet.
        :param values: The values of this PartialResultSet.
        """
        self.openapi_types = {
            'chunked_value': bool,
            'metadata': ResultSetMetadata,
            'resume_token': str,
            'stats': ResultSetStats,
            'values': List[object]
        }

        self.attribute_map = {
            'chunked_value': 'chunkedValue',
            'metadata': 'metadata',
            'resume_token': 'resumeToken',
            'stats': 'stats',
            'values': 'values'
        }

        self._chunked_value = chunked_value
        self._metadata = metadata
        self._resume_token = resume_token
        self._stats = stats
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartialResultSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartialResultSet of this PartialResultSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chunked_value(self):
        """Gets the chunked_value of this PartialResultSet.

        If true, then the final value in values is chunked, and must be combined with more values from subsequent `PartialResultSet`s to obtain a complete field value.

        :return: The chunked_value of this PartialResultSet.
        :rtype: bool
        """
        return self._chunked_value

    @chunked_value.setter
    def chunked_value(self, chunked_value):
        """Sets the chunked_value of this PartialResultSet.

        If true, then the final value in values is chunked, and must be combined with more values from subsequent `PartialResultSet`s to obtain a complete field value.

        :param chunked_value: The chunked_value of this PartialResultSet.
        :type chunked_value: bool
        """

        self._chunked_value = chunked_value

    @property
    def metadata(self):
        """Gets the metadata of this PartialResultSet.


        :return: The metadata of this PartialResultSet.
        :rtype: ResultSetMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PartialResultSet.


        :param metadata: The metadata of this PartialResultSet.
        :type metadata: ResultSetMetadata
        """

        self._metadata = metadata

    @property
    def resume_token(self):
        """Gets the resume_token of this PartialResultSet.

        Streaming calls might be interrupted for a variety of reasons, such as TCP connection loss. If this occurs, the stream of results can be resumed by re-sending the original request and including `resume_token`. Note that executing any other transaction in the same session invalidates the token.

        :return: The resume_token of this PartialResultSet.
        :rtype: str
        """
        return self._resume_token

    @resume_token.setter
    def resume_token(self, resume_token):
        """Sets the resume_token of this PartialResultSet.

        Streaming calls might be interrupted for a variety of reasons, such as TCP connection loss. If this occurs, the stream of results can be resumed by re-sending the original request and including `resume_token`. Note that executing any other transaction in the same session invalidates the token.

        :param resume_token: The resume_token of this PartialResultSet.
        :type resume_token: str
        """

        self._resume_token = resume_token

    @property
    def stats(self):
        """Gets the stats of this PartialResultSet.


        :return: The stats of this PartialResultSet.
        :rtype: ResultSetStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this PartialResultSet.


        :param stats: The stats of this PartialResultSet.
        :type stats: ResultSetStats
        """

        self._stats = stats

    @property
    def values(self):
        """Gets the values of this PartialResultSet.

        A streamed result set consists of a stream of values, which might be split into many `PartialResultSet` messages to accommodate large rows and/or large values. Every N complete values defines a row, where N is equal to the number of entries in metadata.row_type.fields. Most values are encoded based on type as described here. It is possible that the last value in values is \"chunked\", meaning that the rest of the value is sent in subsequent `PartialResultSet`(s). This is denoted by the chunked_value field. Two or more chunked values can be merged to form a complete value as follows: * `bool/number/null`: cannot be chunked * `string`: concatenate the strings * `list`: concatenate the lists. If the last element in a list is a `string`, `list`, or `object`, merge it with the first element in the next list by applying these rules recursively. * `object`: concatenate the (field name, field value) pairs. If a field name is duplicated, then apply these rules recursively to merge the field values. Some examples of merging: # Strings are concatenated. \"foo\", \"bar\" => \"foobar\" # Lists of non-strings are concatenated. [2, 3], [4] => [2, 3, 4] # Lists are concatenated, but the last and first elements are merged # because they are strings. [\"a\", \"b\"], [\"c\", \"d\"] => [\"a\", \"bc\", \"d\"] # Lists are concatenated, but the last and first elements are merged # because they are lists. Recursively, the last and first elements # of the inner lists are merged because they are strings. [\"a\", [\"b\", \"c\"]], [[\"d\"], \"e\"] => [\"a\", [\"b\", \"cd\"], \"e\"] # Non-overlapping object fields are combined. {\"a\": \"1\"}, {\"b\": \"2\"} => {\"a\": \"1\", \"b\": 2\"} # Overlapping object fields are merged. {\"a\": \"1\"}, {\"a\": \"2\"} => {\"a\": \"12\"} # Examples of merging objects containing lists of strings. {\"a\": [\"1\"]}, {\"a\": [\"2\"]} => {\"a\": [\"12\"]} For a more complete example, suppose a streaming SQL query is yielding a result set whose rows contain a single string field. The following `PartialResultSet`s might be yielded: { \"metadata\": { ... } \"values\": [\"Hello\", \"W\"] \"chunked_value\": true \"resume_token\": \"Af65...\" } { \"values\": [\"orl\"] \"chunked_value\": true } { \"values\": [\"d\"] \"resume_token\": \"Zx1B...\" } This sequence of `PartialResultSet`s encodes two rows, one containing the field value `\"Hello\"`, and a second containing the field value `\"World\" = \"W\" + \"orl\" + \"d\"`. Not all `PartialResultSet`s contain a `resume_token`. Execution can only be resumed from a previously yielded `resume_token`. For the above sequence of `PartialResultSet`s, resuming the query with `\"resume_token\": \"Af65...\"` will yield results from the `PartialResultSet` with value `[\"orl\"]`.

        :return: The values of this PartialResultSet.
        :rtype: List[object]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this PartialResultSet.

        A streamed result set consists of a stream of values, which might be split into many `PartialResultSet` messages to accommodate large rows and/or large values. Every N complete values defines a row, where N is equal to the number of entries in metadata.row_type.fields. Most values are encoded based on type as described here. It is possible that the last value in values is \"chunked\", meaning that the rest of the value is sent in subsequent `PartialResultSet`(s). This is denoted by the chunked_value field. Two or more chunked values can be merged to form a complete value as follows: * `bool/number/null`: cannot be chunked * `string`: concatenate the strings * `list`: concatenate the lists. If the last element in a list is a `string`, `list`, or `object`, merge it with the first element in the next list by applying these rules recursively. * `object`: concatenate the (field name, field value) pairs. If a field name is duplicated, then apply these rules recursively to merge the field values. Some examples of merging: # Strings are concatenated. \"foo\", \"bar\" => \"foobar\" # Lists of non-strings are concatenated. [2, 3], [4] => [2, 3, 4] # Lists are concatenated, but the last and first elements are merged # because they are strings. [\"a\", \"b\"], [\"c\", \"d\"] => [\"a\", \"bc\", \"d\"] # Lists are concatenated, but the last and first elements are merged # because they are lists. Recursively, the last and first elements # of the inner lists are merged because they are strings. [\"a\", [\"b\", \"c\"]], [[\"d\"], \"e\"] => [\"a\", [\"b\", \"cd\"], \"e\"] # Non-overlapping object fields are combined. {\"a\": \"1\"}, {\"b\": \"2\"} => {\"a\": \"1\", \"b\": 2\"} # Overlapping object fields are merged. {\"a\": \"1\"}, {\"a\": \"2\"} => {\"a\": \"12\"} # Examples of merging objects containing lists of strings. {\"a\": [\"1\"]}, {\"a\": [\"2\"]} => {\"a\": [\"12\"]} For a more complete example, suppose a streaming SQL query is yielding a result set whose rows contain a single string field. The following `PartialResultSet`s might be yielded: { \"metadata\": { ... } \"values\": [\"Hello\", \"W\"] \"chunked_value\": true \"resume_token\": \"Af65...\" } { \"values\": [\"orl\"] \"chunked_value\": true } { \"values\": [\"d\"] \"resume_token\": \"Zx1B...\" } This sequence of `PartialResultSet`s encodes two rows, one containing the field value `\"Hello\"`, and a second containing the field value `\"World\" = \"W\" + \"orl\" + \"d\"`. Not all `PartialResultSet`s contain a `resume_token`. Execution can only be resumed from a previously yielded `resume_token`. For the above sequence of `PartialResultSet`s, resuming the query with `\"resume_token\": \"Af65...\"` will yield results from the `PartialResultSet` with value `[\"orl\"]`.

        :param values: The values of this PartialResultSet.
        :type values: List[object]
        """

        self._values = values
