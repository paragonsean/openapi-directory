# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Session(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approximate_last_use_time: str=None, create_time: str=None, creator_role: str=None, labels: Dict[str, str]=None, name: str=None):
        """Session - a model defined in OpenAPI

        :param approximate_last_use_time: The approximate_last_use_time of this Session.
        :param create_time: The create_time of this Session.
        :param creator_role: The creator_role of this Session.
        :param labels: The labels of this Session.
        :param name: The name of this Session.
        """
        self.openapi_types = {
            'approximate_last_use_time': str,
            'create_time': str,
            'creator_role': str,
            'labels': Dict[str, str],
            'name': str
        }

        self.attribute_map = {
            'approximate_last_use_time': 'approximateLastUseTime',
            'create_time': 'createTime',
            'creator_role': 'creatorRole',
            'labels': 'labels',
            'name': 'name'
        }

        self._approximate_last_use_time = approximate_last_use_time
        self._create_time = create_time
        self._creator_role = creator_role
        self._labels = labels
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Session':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Session of this Session.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approximate_last_use_time(self):
        """Gets the approximate_last_use_time of this Session.

        Output only. The approximate timestamp when the session is last used. It is typically earlier than the actual last use time.

        :return: The approximate_last_use_time of this Session.
        :rtype: str
        """
        return self._approximate_last_use_time

    @approximate_last_use_time.setter
    def approximate_last_use_time(self, approximate_last_use_time):
        """Sets the approximate_last_use_time of this Session.

        Output only. The approximate timestamp when the session is last used. It is typically earlier than the actual last use time.

        :param approximate_last_use_time: The approximate_last_use_time of this Session.
        :type approximate_last_use_time: str
        """

        self._approximate_last_use_time = approximate_last_use_time

    @property
    def create_time(self):
        """Gets the create_time of this Session.

        Output only. The timestamp when the session is created.

        :return: The create_time of this Session.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Session.

        Output only. The timestamp when the session is created.

        :param create_time: The create_time of this Session.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creator_role(self):
        """Gets the creator_role of this Session.

        The database role which created this session.

        :return: The creator_role of this Session.
        :rtype: str
        """
        return self._creator_role

    @creator_role.setter
    def creator_role(self, creator_role):
        """Sets the creator_role of this Session.

        The database role which created this session.

        :param creator_role: The creator_role of this Session.
        :type creator_role: str
        """

        self._creator_role = creator_role

    @property
    def labels(self):
        """Gets the labels of this Session.

        The labels for the session. * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. * No more than 64 labels can be associated with a given session. See https://goo.gl/xmQnxf for more information on and examples of labels.

        :return: The labels of this Session.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Session.

        The labels for the session. * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. * No more than 64 labels can be associated with a given session. See https://goo.gl/xmQnxf for more information on and examples of labels.

        :param labels: The labels of this Session.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Session.

        Output only. The name of the session. This is always system-assigned.

        :return: The name of this Session.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Session.

        Output only. The name of the session. This is always system-assigned.

        :param name: The name of this Session.
        :type name: str
        """

        self._name = name
