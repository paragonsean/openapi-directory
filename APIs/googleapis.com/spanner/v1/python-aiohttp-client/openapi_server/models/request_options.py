# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, priority: str=None, request_tag: str=None, transaction_tag: str=None):
        """RequestOptions - a model defined in OpenAPI

        :param priority: The priority of this RequestOptions.
        :param request_tag: The request_tag of this RequestOptions.
        :param transaction_tag: The transaction_tag of this RequestOptions.
        """
        self.openapi_types = {
            'priority': str,
            'request_tag': str,
            'transaction_tag': str
        }

        self.attribute_map = {
            'priority': 'priority',
            'request_tag': 'requestTag',
            'transaction_tag': 'transactionTag'
        }

        self._priority = priority
        self._request_tag = request_tag
        self._transaction_tag = transaction_tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequestOptions of this RequestOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def priority(self):
        """Gets the priority of this RequestOptions.

        Priority for the request.

        :return: The priority of this RequestOptions.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this RequestOptions.

        Priority for the request.

        :param priority: The priority of this RequestOptions.
        :type priority: str
        """
        allowed_values = ["PRIORITY_UNSPECIFIED", "PRIORITY_LOW", "PRIORITY_MEDIUM", "PRIORITY_HIGH"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def request_tag(self):
        """Gets the request_tag of this RequestOptions.

        A per-request tag which can be applied to queries or reads, used for statistics collection. Both request_tag and transaction_tag can be specified for a read or query that belongs to a transaction. This field is ignored for requests where it's not applicable (e.g. CommitRequest). Legal characters for `request_tag` values are all printable characters (ASCII 32 - 126) and the length of a request_tag is limited to 50 characters. Values that exceed this limit are truncated. Any leading underscore (_) characters will be removed from the string.

        :return: The request_tag of this RequestOptions.
        :rtype: str
        """
        return self._request_tag

    @request_tag.setter
    def request_tag(self, request_tag):
        """Sets the request_tag of this RequestOptions.

        A per-request tag which can be applied to queries or reads, used for statistics collection. Both request_tag and transaction_tag can be specified for a read or query that belongs to a transaction. This field is ignored for requests where it's not applicable (e.g. CommitRequest). Legal characters for `request_tag` values are all printable characters (ASCII 32 - 126) and the length of a request_tag is limited to 50 characters. Values that exceed this limit are truncated. Any leading underscore (_) characters will be removed from the string.

        :param request_tag: The request_tag of this RequestOptions.
        :type request_tag: str
        """

        self._request_tag = request_tag

    @property
    def transaction_tag(self):
        """Gets the transaction_tag of this RequestOptions.

        A tag used for statistics collection about this transaction. Both request_tag and transaction_tag can be specified for a read or query that belongs to a transaction. The value of transaction_tag should be the same for all requests belonging to the same transaction. If this request doesn't belong to any transaction, transaction_tag will be ignored. Legal characters for `transaction_tag` values are all printable characters (ASCII 32 - 126) and the length of a transaction_tag is limited to 50 characters. Values that exceed this limit are truncated. Any leading underscore (_) characters will be removed from the string.

        :return: The transaction_tag of this RequestOptions.
        :rtype: str
        """
        return self._transaction_tag

    @transaction_tag.setter
    def transaction_tag(self, transaction_tag):
        """Sets the transaction_tag of this RequestOptions.

        A tag used for statistics collection about this transaction. Both request_tag and transaction_tag can be specified for a read or query that belongs to a transaction. The value of transaction_tag should be the same for all requests belonging to the same transaction. If this request doesn't belong to any transaction, transaction_tag will be ignored. Legal characters for `transaction_tag` values are all printable characters (ASCII 32 - 126) and the length of a transaction_tag is limited to 50 characters. Values that exceed this limit are truncated. Any leading underscore (_) characters will be removed from the string.

        :param transaction_tag: The transaction_tag of this RequestOptions.
        :type transaction_tag: str
        """

        self._transaction_tag = transaction_tag
