# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.localized_string import LocalizedString
from openapi_server import util


class ContextValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: LocalizedString=None, severity: str=None, unit: str=None, value: float=None):
        """ContextValue - a model defined in OpenAPI

        :param label: The label of this ContextValue.
        :param severity: The severity of this ContextValue.
        :param unit: The unit of this ContextValue.
        :param value: The value of this ContextValue.
        """
        self.openapi_types = {
            'label': LocalizedString,
            'severity': str,
            'unit': str,
            'value': float
        }

        self.attribute_map = {
            'label': 'label',
            'severity': 'severity',
            'unit': 'unit',
            'value': 'value'
        }

        self._label = label
        self._severity = severity
        self._unit = unit
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContextValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContextValue of this ContextValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this ContextValue.


        :return: The label of this ContextValue.
        :rtype: LocalizedString
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ContextValue.


        :param label: The label of this ContextValue.
        :type label: LocalizedString
        """

        self._label = label

    @property
    def severity(self):
        """Gets the severity of this ContextValue.

        The severity of this context.

        :return: The severity of this ContextValue.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ContextValue.

        The severity of this context.

        :param severity: The severity of this ContextValue.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "INFO", "WARNING", "ERROR", "FATAL"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def unit(self):
        """Gets the unit of this ContextValue.

        The unit of the context value.

        :return: The unit of this ContextValue.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ContextValue.

        The unit of the context value.

        :param unit: The unit of this ContextValue.
        :type unit: str
        """

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this ContextValue.

        The value for the context.

        :return: The value of this ContextValue.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ContextValue.

        The value for the context.

        :param value: The value of this ContextValue.
        :type value: float
        """

        self._value = value
