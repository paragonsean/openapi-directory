# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DdlStatementActionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, entity_names: List[str]=None, entity_type: str=None):
        """DdlStatementActionInfo - a model defined in OpenAPI

        :param action: The action of this DdlStatementActionInfo.
        :param entity_names: The entity_names of this DdlStatementActionInfo.
        :param entity_type: The entity_type of this DdlStatementActionInfo.
        """
        self.openapi_types = {
            'action': str,
            'entity_names': List[str],
            'entity_type': str
        }

        self.attribute_map = {
            'action': 'action',
            'entity_names': 'entityNames',
            'entity_type': 'entityType'
        }

        self._action = action
        self._entity_names = entity_names
        self._entity_type = entity_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DdlStatementActionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DdlStatementActionInfo of this DdlStatementActionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this DdlStatementActionInfo.

        The action for the DDL statement, e.g. CREATE, ALTER, DROP, GRANT, etc. This field is a non-empty string.

        :return: The action of this DdlStatementActionInfo.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DdlStatementActionInfo.

        The action for the DDL statement, e.g. CREATE, ALTER, DROP, GRANT, etc. This field is a non-empty string.

        :param action: The action of this DdlStatementActionInfo.
        :type action: str
        """

        self._action = action

    @property
    def entity_names(self):
        """Gets the entity_names of this DdlStatementActionInfo.

        The entity name(s) being operated on the DDL statement. E.g. 1. For statement \"CREATE TABLE t1(...)\", `entity_names` = [\"t1\"]. 2. For statement \"GRANT ROLE r1, r2 ...\", `entity_names` = [\"r1\", \"r2\"]. 3. For statement \"ANALYZE\", `entity_names` = [].

        :return: The entity_names of this DdlStatementActionInfo.
        :rtype: List[str]
        """
        return self._entity_names

    @entity_names.setter
    def entity_names(self, entity_names):
        """Sets the entity_names of this DdlStatementActionInfo.

        The entity name(s) being operated on the DDL statement. E.g. 1. For statement \"CREATE TABLE t1(...)\", `entity_names` = [\"t1\"]. 2. For statement \"GRANT ROLE r1, r2 ...\", `entity_names` = [\"r1\", \"r2\"]. 3. For statement \"ANALYZE\", `entity_names` = [].

        :param entity_names: The entity_names of this DdlStatementActionInfo.
        :type entity_names: List[str]
        """

        self._entity_names = entity_names

    @property
    def entity_type(self):
        """Gets the entity_type of this DdlStatementActionInfo.

        The entity type for the DDL statement, e.g. TABLE, INDEX, VIEW, etc. This field can be empty string for some DDL statement, e.g. for statement \"ANALYZE\", `entity_type` = \"\".

        :return: The entity_type of this DdlStatementActionInfo.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this DdlStatementActionInfo.

        The entity type for the DDL statement, e.g. TABLE, INDEX, VIEW, etc. This field can be empty string for some DDL statement, e.g. for statement \"ANALYZE\", `entity_type` = \"\".

        :param entity_type: The entity_type of this DdlStatementActionInfo.
        :type entity_type: str
        """

        self._entity_type = entity_type
